import { pascalCase } from 'change-case'
import * as fs from 'fs'
import type { OpModule } from './build-op-module'
import { buildOpModule } from './build-op-module'

function* emitOps(module: OpModule) {
  function* emitHeader() {
    yield `/* THIS FILE IS GENERATED BY ~/scripts/generate-op.ts - DO NOT MODIFY DIRECTLY */
import { createFunctionProxy, createObjectProxy } from './op-util'
`
    yield `import {\n`
    for (const item of opModule.items) {
      if (item.type === 'op-function' || item.type === 'op-overloaded-function') {
        yield `${pascalCase(item.name)}Type, `
      } else {
        yield `${item.name}Type, `
      }
      yield '\n'
    }
    yield `} from '${opTypesFilePathName}'\n`
    yield '\n'
  }

  function* emitDoc(doc: string | string[], minAvmVersion?: number) {
    if (Array.isArray(doc)) {
      yield '\n/**'
      for (const row of doc) {
        yield '\n  * '
        yield row
      }
    } else if (doc) {
      yield '\n/**'
      yield '\n  * '
      yield doc
    } else {
      return
    }
    if (minAvmVersion !== undefined) yield `\n  * Min AVM version: ${minAvmVersion}`
    yield '\n  */'
    yield '\n'
  }


  yield* emitHeader()

  for (const item of module.items) {
    if (item.type === 'op-function') {
      yield* emitDoc(item.docs, item.minAvmVersion)
      yield `export const ${item.name}: ${pascalCase(item.name)}Type = createFunctionProxy('${item.name}')\n`
    } else if (item.type === 'op-overloaded-function') {
      yield `export const ${item.name}: ${pascalCase(item.name)}Type = createFunctionProxy('${item.name}') as ${pascalCase(item.name)}Type\n`
    } else {
      yield* emitDoc(item.docs)
      yield `export const ${item.name}: ${item.name}Type = createObjectProxy('${item.name}')\n`
    }
  }


}

const fullFilePathName = process.argv[2]
const opTypesFilePathName = process.argv[3]

const opModule = buildOpModule()
fs.writeFileSync(fullFilePathName, Array.from(emitOps(opModule)).join(''))
