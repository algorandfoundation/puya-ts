import { camelCase, pascalCase } from 'change-case'
import * as fs from 'fs'
import type { EnumDef, OpModule } from './build-op-module'
import { buildOpModule, ENUMS_TO_EXPOSE } from './build-op-module'

function* emitHeader() {
  yield `
  /* THIS FILE IS GENERATED BY ~/scripts/generate-op-ptypes.ts - DO NOT MODIFY DIRECTLY */
  import { IntrinsicEnumType } from './intrinsic-enum-type'
  import { Constants } from "../../constants";


`
}

function* emitTypes(module: OpModule) {
  function* emitEnumPType(enumDef: EnumDef) {
    yield `export const ${camelCase(enumDef.tsName)}PType = new IntrinsicEnumType({
      name: '${pascalCase(enumDef.name)}',
      module: \`\${Constants.algoTsPackage}/op-types.d.ts\`,
      members: [`
    for (const member of enumDef.members) {
      yield `['${member.name}', '${member.value}'],`
    }
    yield `]});`
  }

  yield* emitHeader()
  for (const enumDef of module.enums) {
    if (!ENUMS_TO_EXPOSE.has(enumDef.name)) continue
    yield* emitEnumPType(enumDef)
  }
  yield `export const ALL_OP_ENUMS = [`
  yield module.enums
    .filter((e) => ENUMS_TO_EXPOSE.has(e.name))
    .map((e) => `${camelCase(e.tsName)}PType`)
    .join(', ')
  yield '];'
  yield `\n`
}
const fullFilePathName = process.argv[2]

const opModule = buildOpModule()
fs.writeFileSync(fullFilePathName, Array.from(emitTypes(opModule)).join(''))
