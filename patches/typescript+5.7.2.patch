diff --git a/node_modules/typescript/lib/typescript.d.ts b/node_modules/typescript/lib/typescript.d.ts
index 6780dd1..8700e72 100644
--- a/node_modules/typescript/lib/typescript.d.ts
+++ b/node_modules/typescript/lib/typescript.d.ts
@@ -6159,6 +6159,7 @@ declare namespace ts {
         getIndexInfoOfType(type: Type, kind: IndexKind): IndexInfo | undefined;
         getIndexInfosOfType(type: Type): readonly IndexInfo[];
         getIndexInfosOfIndexSymbol: (indexSymbol: Symbol, siblingSymbols?: Symbol[] | undefined) => IndexInfo[];
+        getTypeArgumentsForResolvedSignature(signature: Signature): readonly Type[] | undefined;
         getSignaturesOfType(type: Type, kind: SignatureKind): readonly Signature[];
         getIndexTypeOfType(type: Type, kind: IndexKind): Type | undefined;
         getBaseTypes(type: InterfaceType): BaseType[];
diff --git a/node_modules/typescript/lib/typescript.js b/node_modules/typescript/lib/typescript.js
index 33387ea..a1f35b3 100644
--- a/node_modules/typescript/lib/typescript.js
+++ b/node_modules/typescript/lib/typescript.js
@@ -50655,6 +50655,7 @@ function createTypeChecker(host) {
     getGlobalDiagnostics,
     getRecursionIdentity,
     getUnmatchedProperties,
+    getTypeArgumentsForResolvedSignature,
     getTypeOfSymbolAtLocation: (symbol, locationIn) => {
       const location = getParseTreeNode(locationIn);
       return location ? getTypeOfSymbolAtLocation(symbol, location) : errorType;
@@ -71776,6 +71777,9 @@ function createTypeChecker(host) {
       }
     }
   }
+  function getTypeArgumentsForResolvedSignature(signature) {
+    return signature.mapper && instantiateTypes((signature.target ?? signature).typeParameters ?? [], signature.mapper);
+  }
   function getUnmatchedProperty(source, target, requireOptionalProperties, matchDiscriminantProperties) {
     return firstOrUndefinedIterator(getUnmatchedProperties(source, target, requireOptionalProperties, matchDiscriminantProperties));
   }
