contract AccountsContract
{
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  getAccountInfo(): getAccountInfoResult{ bytes: bytes, balance: uint64, minBalance: uint64, authAddress: bytes, totalNumUint: uint64, totalNumByteSlice: uint64, totalExtraAppPages: uint64, totalAppsCreated: uint64, totalAppsOptedIn: uint64, totalAssetsCreated: uint64, totalAssets: uint64, totalBoxes: uint64, totalBoxBytes: uint64, isOptInApp: bool, isOptInAsset: bool }
  {
    return { bytes: (#0 = { bytes: reinterpret_cast<bytes>(account), balance: checked_maybe(acct_params_get<AcctBalance>(account), comment=account funded), minBalance: checked_maybe(acct_params_get<AcctMinBalance>(account), comment=account funded), authAddress: reinterpret_cast<bytes>(checked_maybe(acct_params_get<AcctAuthAddr>(account), comment=account funded)), totalNumUint: checked_maybe(acct_params_get<AcctTotalNumUint>(account), comment=account funded), totalNumByteSlice: checked_maybe(acct_params_get<AcctTotalNumByteSlice>(account), comment=account funded), totalExtraAppPages: checked_maybe(acct_params_get<AcctTotalExtraAppPages>(account), comment=account funded), totalAppsCreated: checked_maybe(acct_params_get<AcctTotalAppsCreated>(account), comment=account funded), totalAppsOptedIn: checked_maybe(acct_params_get<AcctTotalAppsOptedIn>(account), comment=account funded), totalAssetsCreated: checked_maybe(acct_params_get<AcctTotalAssetsCreated>(account), comment=account funded), totalAssets: checked_maybe(acct_params_get<AcctTotalAssets>(account), comment=account funded), totalBoxes: checked_maybe(acct_params_get<AcctTotalBoxes>(account), comment=account funded), totalBoxBytes: checked_maybe(acct_params_get<AcctTotalBoxBytes>(account), comment=account funded), isOptInApp: app_opted_in(account, global<CurrentApplicationID>()), isOptInAsset: asset_holding_get<AssetBalance>(account, asset).1 }).bytes, balance: #0.balance, minBalance: #0.minBalance, authAddress: #0.authAddress, totalNumUint: #0.totalNumUint, totalNumByteSlice: #0.totalNumByteSlice, totalExtraAppPages: #0.totalExtraAppPages, totalAppsCreated: #0.totalAppsCreated, totalAppsOptedIn: #0.totalAppsOptedIn, totalAssetsCreated: #0.totalAssetsCreated, totalAssets: #0.totalAssets, totalBoxes: #0.totalBoxes, totalBoxBytes: #0.totalBoxBytes, isOptInApp: #0.isOptInApp, isOptInAsset: #0.isOptInAsset }
  }
  
  constructor(): void
  {
    void
  }
  
  Contract::constructor(): void
  {
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}