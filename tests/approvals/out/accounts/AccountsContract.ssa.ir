contract tests/approvals/accounts.algo.ts::AccountsContract:
    program approval:
        subroutine @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> bool:
            block@0: // L1
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/accounts.algo.ts::AccountsContract.constructor()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%0#0: bool = tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine tests/approvals/accounts.algo.ts::AccountsContract.constructor() -> void:
            block@0: // L4
                return 
        
        subroutine tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@5
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "getAccountInfo(account,asset)(byte[],uint64,uint64,byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)" => block@2, * => block@3}
            block@2: // getAccountInfo_route_L5
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bytes = ((txnas Accounts) tmp%8#0)
                let tmp%10#0: bytes = (txna ApplicationArgs 2)
                let tmp%11#0: uint64 = (btoi tmp%10#0)
                let tmp%12#0: uint64 = ((txnas Assets) tmp%11#0)
                let (elements_to_encode%0#0: bytes, elements_to_encode%1#0: uint64, elements_to_encode%2#0: uint64, elements_to_encode%3#0: bytes, elements_to_encode%4#0: uint64, elements_to_encode%5#0: uint64, elements_to_encode%6#0: uint64, elements_to_encode%7#0: uint64, elements_to_encode%8#0: uint64, elements_to_encode%9#0: uint64, elements_to_encode%10#0: uint64, elements_to_encode%11#0: uint64, elements_to_encode%12#0: uint64, elements_to_encode%13#0: bool, elements_to_encode%14#0: bool) = tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(tmp%9#0, tmp%12#0)
                let length%0#0: uint64 = (len elements_to_encode%0#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%0#0)
                let val_as_bytes%0#0: bytes = (itob elements_to_encode%1#0)
                let val_as_bytes%1#0: bytes = (itob elements_to_encode%2#0)
                let length%1#0: uint64 = (len elements_to_encode%3#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 elements_to_encode%3#0)
                let val_as_bytes%2#0: bytes = (itob elements_to_encode%4#0)
                let val_as_bytes%3#0: bytes = (itob elements_to_encode%5#0)
                let val_as_bytes%4#0: bytes = (itob elements_to_encode%6#0)
                let val_as_bytes%5#0: bytes = (itob elements_to_encode%7#0)
                let val_as_bytes%6#0: bytes = (itob elements_to_encode%8#0)
                let val_as_bytes%7#0: bytes = (itob elements_to_encode%9#0)
                let val_as_bytes%8#0: bytes = (itob elements_to_encode%10#0)
                let val_as_bytes%9#0: bytes = (itob elements_to_encode%11#0)
                let val_as_bytes%10#0: bytes = (itob elements_to_encode%12#0)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u elements_to_encode%13#0)
                let encoded_bool%1#0: bytes = (setbit 0x00 0u elements_to_encode%14#0)
                let current_tail_offset%0#0: uint64 = 93u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let as_bytes%2#0: bytes = (itob current_tail_offset%0#0)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%1#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let data_length%1#0: uint64 = (len encoded_value%1#0)
                let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%2#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 val_as_bytes%3#0)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%4#0)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%5#0)
                let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 val_as_bytes%6#0)
                let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%7#0)
                let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 val_as_bytes%8#0)
                let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 val_as_bytes%9#0)
                let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 val_as_bytes%10#0)
                let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_bool%0#0)
                let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
                let encoded_tuple_buffer%15#0: bytes = (setbit encoded_tuple_buffer%14#0 737u is_true%0#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 encoded_value%0#0)
                let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 encoded_value%1#0)
                let tmp%13#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%17#0)
                (log tmp%13#0)
                return 1u
            block@3: // switch_case_default_L4
                goto block@4
            block@4: // switch_case_next_L4
                goto block@9
            block@5: // bare_routing_L4
                let tmp%14#0: uint64 = (txn OnCompletion)
                switch tmp%14#0 {0u => block@6, * => block@7}
            block@6: // __algots__.defaultCreate_L4
                let tmp%15#0: uint64 = (txn ApplicationID)
                let tmp%16#0: bool = (== tmp%15#0 0u)
                (assert tmp%16#0) // is creating
                tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate()
                return 1u
            block@7: // switch_case_default_L4
                goto block@8
            block@8: // switch_case_next_L4
                goto block@9
            block@9: // after_if_else_L4
                return 0u
        
        subroutine tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(account: bytes, asset: uint64) -> <bytes, uint64, uint64, bytes, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, bool, bool>:
            block@0: // L5
                let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
                (assert check%0#0) // account funded
                let (value%1#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) account#0)
                (assert check%1#0) // account funded
                let (value%2#0: bytes, check%2#0: bool) = ((acct_params_get AcctAuthAddr) account#0)
                (assert check%2#0) // account funded
                let (value%3#0: uint64, check%3#0: bool) = ((acct_params_get AcctTotalNumUint) account#0)
                (assert check%3#0) // account funded
                let (value%4#0: uint64, check%4#0: bool) = ((acct_params_get AcctTotalNumByteSlice) account#0)
                (assert check%4#0) // account funded
                let (value%5#0: uint64, check%5#0: bool) = ((acct_params_get AcctTotalExtraAppPages) account#0)
                (assert check%5#0) // account funded
                let (value%6#0: uint64, check%6#0: bool) = ((acct_params_get AcctTotalAppsCreated) account#0)
                (assert check%6#0) // account funded
                let (value%7#0: uint64, check%7#0: bool) = ((acct_params_get AcctTotalAppsOptedIn) account#0)
                (assert check%7#0) // account funded
                let (value%8#0: uint64, check%8#0: bool) = ((acct_params_get AcctTotalAssetsCreated) account#0)
                (assert check%8#0) // account funded
                let (value%9#0: uint64, check%9#0: bool) = ((acct_params_get AcctTotalAssets) account#0)
                (assert check%9#0) // account funded
                let (value%10#0: uint64, check%10#0: bool) = ((acct_params_get AcctTotalBoxes) account#0)
                (assert check%10#0) // account funded
                let (value%11#0: uint64, check%11#0: bool) = ((acct_params_get AcctTotalBoxBytes) account#0)
                (assert check%11#0) // account funded
                let tmp%0#0: uint64 = (global CurrentApplicationID)
                let tmp%1#0: bool = (app_opted_in account#0 tmp%0#0)
                let (tmp%2#0: uint64, tmp%3#0: bool) = ((asset_holding_get AssetBalance) account#0 asset#0)
                return account#0 value%0#0 value%1#0 value%2#0 value%3#0 value%4#0 value%5#0 value%6#0 value%7#0 value%8#0 value%9#0 value%10#0 value%11#0 tmp%1#0 tmp%3#0
        
        subroutine tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate() -> void:
            block@0: // L4
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u