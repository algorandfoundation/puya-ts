#pragma version 11

tests/approvals/avm11.algo.ts::Avm11Contract.approvalProgram:
    intcblock 0 1
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// tests/approvals/avm11.algo.ts::Avm11Contract.constructor() -> void:
constructor:
    // tests/approvals/avm11.algo.ts:11-12
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    proto 0 0
    retsub


// tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tests/approvals/avm11.algo.ts:11-12
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@5
    txna ApplicationArgs 0
    pushbytes 0x52448a31 // method "testNewOps()void"
    swap
    match __puya_arc4_router___testNewOps_route@2
    b __puya_arc4_router___switch_case_default@3

__puya_arc4_router___testNewOps_route@2:
    // tests/approvals/avm11.algo.ts:13
    // testNewOps() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testNewOps
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@3:
    b __puya_arc4_router___after_if_else@9

__puya_arc4_router___bare_routing@5:
    // tests/approvals/avm11.algo.ts:11-12
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algots__.defaultCreate@6
    b __puya_arc4_router___switch_case_default@7

__puya_arc4_router_____algots__.defaultCreate@6:
    // tests/approvals/avm11.algo.ts:11-12
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@7:

__puya_arc4_router___after_if_else@9:
    // tests/approvals/avm11.algo.ts:11-12
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    intc_0 // 0
    retsub


// tests/approvals/avm11.algo.ts::Avm11Contract.testNewOps() -> void:
testNewOps:
    // tests/approvals/avm11.algo.ts:13
    // testNewOps() {
    proto 0 0
    // tests/approvals/avm11.algo.ts:15
    // assert(!op.falconVerify(Bytes(), Bytes(), op.bzero(1793)))
    pushint 1793 // 1793
    bzero
    pushbytes 0x
    dup
    uncover 2
    falcon_verify
    !
    assert
    // tests/approvals/avm11.algo.ts:16
    // assert(op.sumhash512(Bytes()))
    pushbytes 0x
    sumhash512
    len
    assert
    // tests/approvals/avm11.algo.ts:17
    // assert(op.onlineStake())
    online_stake
    assert
    // tests/approvals/avm11.algo.ts:25
    // assert(op.Block.blkProposer(0) !== Global.zeroAddress, 'proposer')
    intc_0 // 0
    block BlkProposer
    global ZeroAddress
    !=
    assert // proposer
    // tests/approvals/avm11.algo.ts:26
    // assert(op.Block.blkFeesCollected(0), 'fees collected')
    intc_0 // 0
    block BlkFeesCollected
    assert // fees collected
    // tests/approvals/avm11.algo.ts:27
    // assert(op.Block.blkBonus(0), 'bonus')
    intc_0 // 0
    block BlkBonus
    assert // bonus
    // tests/approvals/avm11.algo.ts:28
    // assert(op.Block.blkBranch(0), 'branch')
    intc_0 // 0
    block BlkBranch
    len
    assert // branch
    // tests/approvals/avm11.algo.ts:29
    // assert(op.Block.blkFeeSink(0) !== Global.zeroAddress, 'fee sink')
    intc_0 // 0
    block BlkFeeSink
    global ZeroAddress
    !=
    assert // fee sink
    // tests/approvals/avm11.algo.ts:30
    // assert(op.Block.blkProtocol(0), 'protocol')
    intc_0 // 0
    block BlkProtocol
    len
    assert // protocol
    // tests/approvals/avm11.algo.ts:31
    // assert(op.Block.blkTxnCounter(0), 'txn counter')
    intc_0 // 0
    block BlkTxnCounter
    assert // txn counter
    // tests/approvals/avm11.algo.ts:32
    // assert(op.Block.blkProposerPayout(0), 'proposer payout')
    intc_0 // 0
    block BlkProposerPayout
    assert // proposer payout
    // tests/approvals/avm11.algo.ts:35
    // assert(op.Global.payoutsEnabled, 'payouts_enabled')
    global PayoutsEnabled
    assert // payouts_enabled
    // tests/approvals/avm11.algo.ts:36
    // assert(op.Global.payoutsGoOnlineFee, 'payouts_go_online_fee')
    global PayoutsGoOnlineFee
    assert // payouts_go_online_fee
    // tests/approvals/avm11.algo.ts:37
    // assert(op.Global.payoutsPercent, 'payouts_percent')
    global PayoutsPercent
    assert // payouts_percent
    // tests/approvals/avm11.algo.ts:38
    // assert(op.Global.payoutsMinBalance, 'payouts_min_balance')
    global PayoutsMinBalance
    assert // payouts_min_balance
    // tests/approvals/avm11.algo.ts:39
    // assert(op.Global.payoutsMaxBalance, 'payouts_max_balance')
    global PayoutsMaxBalance
    assert // payouts_max_balance
    // tests/approvals/avm11.algo.ts:41
    // const [g, h] = op.VoterParams.voterBalance(0)
    intc_0 // 0
    voter_params_get VoterBalance
    popn 2
    // tests/approvals/avm11.algo.ts:42
    // const [i, j] = op.VoterParams.voterIncentiveEligible(0)
    intc_0 // 0
    voter_params_get VoterIncentiveEligible
    popn 2
    retsub


// tests/approvals/avm11.algo.ts::Avm11Contract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    // tests/approvals/avm11.algo.ts:11-12
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    proto 0 0
    retsub
