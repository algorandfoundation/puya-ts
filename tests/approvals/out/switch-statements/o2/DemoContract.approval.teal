#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "hmmm" 0xff base64(ZHNmc2Rmc2Q=) base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xa6ff944a // method "run()void"
    txna ApplicationArgs 0
    match main_run_route@3

main_after_if_else@10:
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    intc_1 // 0
    return

main_run_route@3:
    // tests/approvals/switch-statements.algo.ts:5
    // run() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/switch-statements.algo.ts:52
    // case Bytes('hmmm'):
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:53
    // case Bytes.fromHex('Ff'):
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:54
    // case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:55
    // case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:17
    // assert(this.test_bytes(Bytes('hmmm')))
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:51-57
    // switch (x) {
    //   case Bytes('hmmm'):
    //   case Bytes.fromHex('Ff'):
    //   case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    //   case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    //     return true
    // }
    match main_block@31 main_block@31 main_block@31 main_block@31
    // tests/approvals/switch-statements.algo.ts:58
    // return false
    intc_1 // 0

main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@33:
    // tests/approvals/switch-statements.algo.ts:17
    // assert(this.test_bytes(Bytes('hmmm')))
    assert
    // tests/approvals/switch-statements.algo.ts:52
    // case Bytes('hmmm'):
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:53
    // case Bytes.fromHex('Ff'):
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:54
    // case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:55
    // case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:18
    // assert(this.test_bytes(Bytes.fromHex('ff')))
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:51-57
    // switch (x) {
    //   case Bytes('hmmm'):
    //   case Bytes.fromHex('Ff'):
    //   case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    //   case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    //     return true
    // }
    match main_block@34 main_block@34 main_block@34 main_block@34
    // tests/approvals/switch-statements.algo.ts:58
    // return false
    intc_1 // 0

main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@36:
    // tests/approvals/switch-statements.algo.ts:18
    // assert(this.test_bytes(Bytes.fromHex('ff')))
    assert
    // tests/approvals/switch-statements.algo.ts:52
    // case Bytes('hmmm'):
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:53
    // case Bytes.fromHex('Ff'):
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:54
    // case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:55
    // case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:19
    // assert(this.test_bytes(Bytes.fromBase64('ZHNmc2Rmc2Q=')))
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:51-57
    // switch (x) {
    //   case Bytes('hmmm'):
    //   case Bytes.fromHex('Ff'):
    //   case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    //   case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    //     return true
    // }
    match main_block@37 main_block@37 main_block@37 main_block@37
    // tests/approvals/switch-statements.algo.ts:58
    // return false
    intc_1 // 0

main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@39:
    // tests/approvals/switch-statements.algo.ts:19
    // assert(this.test_bytes(Bytes.fromBase64('ZHNmc2Rmc2Q=')))
    assert
    // tests/approvals/switch-statements.algo.ts:52
    // case Bytes('hmmm'):
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:53
    // case Bytes.fromHex('Ff'):
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:54
    // case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:55
    // case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:20
    // assert(this.test_bytes(Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM===')))
    dup
    // tests/approvals/switch-statements.algo.ts:51-57
    // switch (x) {
    //   case Bytes('hmmm'):
    //   case Bytes.fromHex('Ff'):
    //   case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    //   case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    //     return true
    // }
    match main_block@40 main_block@40 main_block@40 main_block@40
    // tests/approvals/switch-statements.algo.ts:58
    // return false
    intc_1 // 0

main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@42:
    // tests/approvals/switch-statements.algo.ts:20
    // assert(this.test_bytes(Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM===')))
    assert
    // tests/approvals/switch-statements.algo.ts:52
    // case Bytes('hmmm'):
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:53
    // case Bytes.fromHex('Ff'):
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:54
    // case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:55
    // case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:21
    // assert(!this.test_bytes(Bytes()))
    pushbytes 0x
    // tests/approvals/switch-statements.algo.ts:51-57
    // switch (x) {
    //   case Bytes('hmmm'):
    //   case Bytes.fromHex('Ff'):
    //   case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    //   case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    //     return true
    // }
    match main_block@43 main_block@43 main_block@43 main_block@43
    // tests/approvals/switch-statements.algo.ts:58
    // return false
    intc_1 // 0

main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@45:
    // tests/approvals/switch-statements.algo.ts:21
    // assert(!this.test_bytes(Bytes()))
    !
    assert
    // tests/approvals/switch-statements.algo.ts:5
    // run() {
    intc_0 // 1
    return

main_block@43:
    // tests/approvals/switch-statements.algo.ts:56
    // return true
    intc_0 // 1
    // tests/approvals/switch-statements.algo.ts:21
    // assert(!this.test_bytes(Bytes()))
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@45

main_block@40:
    // tests/approvals/switch-statements.algo.ts:56
    // return true
    intc_0 // 1
    // tests/approvals/switch-statements.algo.ts:20
    // assert(this.test_bytes(Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM===')))
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@42

main_block@37:
    // tests/approvals/switch-statements.algo.ts:56
    // return true
    intc_0 // 1
    // tests/approvals/switch-statements.algo.ts:19
    // assert(this.test_bytes(Bytes.fromBase64('ZHNmc2Rmc2Q=')))
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@39

main_block@34:
    // tests/approvals/switch-statements.algo.ts:56
    // return true
    intc_0 // 1
    // tests/approvals/switch-statements.algo.ts:18
    // assert(this.test_bytes(Bytes.fromHex('ff')))
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@36

main_block@31:
    // tests/approvals/switch-statements.algo.ts:56
    // return true
    intc_0 // 1
    // tests/approvals/switch-statements.algo.ts:17
    // assert(this.test_bytes(Bytes('hmmm')))
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@33

main_bare_routing@6:
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
