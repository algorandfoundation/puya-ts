contract tests/approvals/arc28-events.algo.ts::EventEmitter:
    program approval:
        subroutine @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> bool:
            block@0: // L1
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/arc28-events.algo.ts::EventEmitter.constructor()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%0#0: bool = tests/approvals/arc28-events.algo.ts::EventEmitter.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine tests/approvals/arc28-events.algo.ts::EventEmitter.constructor() -> void:
            block@0: // L12
                return 
        
        subroutine tests/approvals/arc28-events.algo.ts::EventEmitter.__puya_arc4_router__() -> bool:
            block@0: // L12
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@6
            block@1: // abi_routing_L12
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "emitSwapped(uint64,uint64)void" => block@2, method "emitCustom(string,bool)void" => block@3, * => block@4}
            block@2: // emitSwapped_route_L13
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is not NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // can only call when not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bytes = (txna ApplicationArgs 2)
                let tmp%10#0: uint64 = (btoi tmp%9#0)
                tests/approvals/arc28-events.algo.ts::EventEmitter.emitSwapped(tmp%8#0, tmp%10#0)
                return 1u
            block@3: // emitCustom_route_L28
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (== tmp%11#0 NoOp)
                (assert tmp%12#0) // OnCompletion is not NoOp
                let tmp%13#0: uint64 = (txn ApplicationID)
                let tmp%14#0: bool = (!= tmp%13#0 0u)
                (assert tmp%14#0) // can only call when not creating
                let tmp%15#0: bytes = (txna ApplicationArgs 1)
                let tmp%16#0: bytes = ((extract 2 0) tmp%15#0)
                let tmp%17#0: bytes = (txna ApplicationArgs 2)
                let tmp%18#0: bool = (getbit tmp%17#0 0u)
                tests/approvals/arc28-events.algo.ts::EventEmitter.emitCustom(tmp%16#0, tmp%18#0)
                return 1u
            block@4: // switch_case_default_L12
                goto block@5
            block@5: // switch_case_next_L12
                goto block@10
            block@6: // bare_routing_L12
                let tmp%19#0: uint64 = (txn OnCompletion)
                switch tmp%19#0 {0u => block@7, * => block@8}
            block@7: // __algots__.defaultCreate_L12
                let tmp%20#0: uint64 = (txn ApplicationID)
                let tmp%21#0: bool = (== tmp%20#0 0u)
                (assert tmp%21#0) // can only call when creating
                tests/approvals/arc28-events.algo.ts::EventEmitter.__algots__.defaultCreate()
                return 1u
            block@8: // switch_case_default_L12
                goto block@9
            block@9: // switch_case_next_L12
                goto block@10
            block@10: // after_if_else_L12
                return 0u
        
        subroutine tests/approvals/arc28-events.algo.ts::EventEmitter.emitSwapped(a: uint64, b: uint64) -> void:
            block@0: // L13
                let val_as_bytes%0#0: bytes = (itob b#0)
                let val_as_bytes%1#0: bytes = (itob a#0)
                let current_tail_offset%0#0: uint64 = 16u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
                let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%2#0)
                (log event%0#0)
                let (x.a#0: uint64, x.b#0: uint64) = (b#0, a#0)
                let val_as_bytes%2#0: bytes = (itob x.a#0)
                let val_as_bytes%3#0: bytes = (itob x.b#0)
                let current_tail_offset%1#0: uint64 = 16u
                let encoded_tuple_buffer%3#0: bytes = 0x
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%2#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
                let event%1#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%5#0)
                (log event%1#0)
                let val_as_bytes%4#0: bytes = (itob b#0)
                let val_as_bytes%5#0: bytes = (itob a#0)
                let val_as_bytes%6#0: bytes = (itob b#0)
                let val_as_bytes%7#0: bytes = (itob a#0)
                let current_tail_offset%2#0: uint64 = 16u
                let encoded_tuple_buffer%6#0: bytes = 0x
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%4#0)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%7#0)
                let y#0: bytes = encoded_tuple_buffer%8#0
                let event%2#0: bytes = (concat method "SwappedArc4(uint64,uint64)" y#0)
                (log event%2#0)
                let val_as_bytes%8#0: bytes = (itob b#0)
                let val_as_bytes%9#0: bytes = (itob a#0)
                let current_tail_offset%3#0: uint64 = 16u
                let encoded_tuple_buffer%9#0: bytes = 0x
                let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%8#0)
                let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 val_as_bytes%9#0)
                let event%3#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%11#0)
                (log event%3#0)
                return 
        
        subroutine tests/approvals/arc28-events.algo.ts::EventEmitter.emitCustom(arg0: bytes, arg1: bool) -> void:
            block@0: // L28
                let length%0#0: uint64 = (len arg0#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 arg0#0)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u arg1#0)
                let current_tail_offset%0#0: uint64 = 3u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let as_bytes%1#0: bytes = (itob current_tail_offset%0#0)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 encoded_bool%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
                let event%0#0: bytes = (concat method "Custom(string,bool)" encoded_tuple_buffer%3#0)
                (log event%0#0)
                return 
        
        subroutine tests/approvals/arc28-events.algo.ts::EventEmitter.__algots__.defaultCreate() -> void:
            block@0: // L12
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u