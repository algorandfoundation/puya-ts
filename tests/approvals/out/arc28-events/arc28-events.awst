contract EventEmitter
{
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  emitSwapped(): void
  {
    emit("Swapped(uint64,uint64)", ARC4_ENCODE({ a: b, b: a }, wtype=Swapped))
    x: Swapped{ a: uint64, b: uint64 } = { a: (#0 = { a: b, b: a }).a, b: #0.b }
    emit("Swapped(uint64,uint64)", ARC4_ENCODE(x, wtype=Swapped))
    y: SwappedArc4 = new SwappedArc4(a=(#1 = { a: ARC4_ENCODE(b, wtype=arc4.uint64), b: ARC4_ENCODE(a, wtype=arc4.uint64) }).a, b=#1.b)
    emit("SwappedArc4(uint64,uint64)", y)
    emit("Swapped(uint64,uint64)", new Swapped(0=ARC4_ENCODE(b, wtype=arc4.uint64), 1=ARC4_ENCODE(a, wtype=arc4.uint64)))
  }
  
  emitCustom(): void
  {
    emit("Custom(string,bool)", new Custom(0=ARC4_ENCODE(arg0, wtype=arc4.dynamic_array<arc4.byte>), 1=ARC4_ENCODE(arg1, wtype=arc4.bool)))
  }
  
  constructor(): void
  {
    void
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  BaseContract::constructor(): void
  {
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}