contract tests/approvals/abi-decorators.algo.ts::default:
    program approval:
        subroutine @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L4
                tests/approvals/abi-decorators.algo.ts::default.constructor()
                goto block@2
            block@2: // entrypoint_L4
                let tmp%0#0: bool = tests/approvals/abi-decorators.algo.ts::default.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@9
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "justNoop()void" => block@2, method "createMethod()void" => block@3, method "allActions()void" => block@4, method "overrideReadonlyName()uint64" => block@5, method "methodWithDefaults(uint64,uint64,uint64)uint64" => block@6, * => block@7}
            block@2: // justNoop_route_L5
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                tests/approvals/abi-decorators.algo.ts::default.justNoop()
                return 1u
            block@3: // createMethod_route_L7
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (== tmp%7#0 NoOp)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: uint64 = (txn ApplicationID)
                let tmp%10#0: bool = (== tmp%9#0 0u)
                (assert tmp%10#0) // is creating
                tests/approvals/abi-decorators.algo.ts::default.createMethod()
                return 1u
            block@4: // allActions_route_L9
                let tmp%11#0: uint64 = (txn ApplicationID)
                let tmp%12#0: bool = (!= tmp%11#0 0u)
                (assert tmp%12#0) // is not creating
                tests/approvals/abi-decorators.algo.ts::default.allActions()
                return 1u
            block@5: // overrideReadonlyName_route_L11
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (== tmp%13#0 NoOp)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: uint64 = (txn ApplicationID)
                let tmp%16#0: bool = (!= tmp%15#0 0u)
                (assert tmp%16#0) // is not creating
                let to_encode%0#0: uint64 = tests/approvals/abi-decorators.algo.ts::default.readonly()
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                let tmp%17#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%17#0)
                return 1u
            block@6: // methodWithDefaults_route_L18
                let tmp%18#0: uint64 = (txn OnCompletion)
                let tmp%19#0: bool = (== tmp%18#0 NoOp)
                (assert tmp%19#0) // OnCompletion is NoOp
                let tmp%20#0: uint64 = (txn ApplicationID)
                let tmp%21#0: bool = (!= tmp%20#0 0u)
                (assert tmp%21#0) // is not creating
                let tmp%22#0: bytes = (txna ApplicationArgs 1)
                let tmp%23#0: uint64 = (btoi tmp%22#0)
                let tmp%24#0: bytes = (txna ApplicationArgs 2)
                let tmp%25#0: uint64 = (btoi tmp%24#0)
                let tmp%26#0: bytes = (txna ApplicationArgs 3)
                let tmp%27#0: uint64 = (btoi tmp%26#0)
                let to_encode%1#0: uint64 = tests/approvals/abi-decorators.algo.ts::default.methodWithDefaults(tmp%23#0, tmp%25#0, tmp%27#0)
                let val_as_bytes%1#0: bytes = (itob to_encode%1#0)
                let tmp%28#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
                (log tmp%28#0)
                return 1u
            block@7: // switch_case_default_L4
                goto block@8
            block@8: // switch_case_next_L4
                goto block@10
            block@9: // bare_routing_L4
                goto block@10
            block@10: // after_if_else_L4
                return 0u
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.justNoop() -> void:
            block@0: // L5
                return 
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.createMethod() -> void:
            block@0: // L7
                return 
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.allActions() -> void:
            block@0: // L9
                return 
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.readonly() -> uint64:
            block@0: // L11
                return 5u
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.methodWithDefaults(a: uint64, b: uint64, c: uint64) -> uint64:
            block@0: // L18
                let tmp%0#0: uint64 = (* a#0 b#0)
                let tmp%1#0: uint64 = (+ tmp%0#0 c#0)
                return tmp%1#0
        
        subroutine tests/approvals/abi-decorators.algo.ts::default.constructor() -> void:
            block@0: // L4
                (app_global_put "globalValue" 123u)
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u