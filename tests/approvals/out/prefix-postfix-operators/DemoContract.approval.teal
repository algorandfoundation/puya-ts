#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 10 5
    bytecblock 0x0a 0x01 0x05

main_block@1:
    // tests/approvals/prefix-postfix-operators.algo.ts:57
    // export class DemoContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/prefix-postfix-operators.algo.ts:57
    // export class DemoContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xf59e3cc4 // method "test()bool"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/prefix-postfix-operators.algo.ts:57
    // export class DemoContract extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/prefix-postfix-operators.algo.ts:58
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/prefix-postfix-operators.algo.ts:57
    // export class DemoContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/prefix-postfix-operators.algo.ts:57
    // export class DemoContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__puya_arc4_router__@11


// tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.test() -> uint64:
test:
    // tests/approvals/prefix-postfix-operators.algo.ts:58
    // test() {
    proto 0 1
    // tests/approvals/prefix-postfix-operators.algo.ts:59
    // test_uint64(10, 5)
    intc_2 // 10
    intc_3 // 5
    callsub test_uint64
    pop
    // tests/approvals/prefix-postfix-operators.algo.ts:60
    // test_biguint(10n, 5n)
    bytec_0 // 0x0a
    bytec_2 // 0x05
    callsub test_biguint
    pop
    // tests/approvals/prefix-postfix-operators.algo.ts:62
    // test_bytes(bzero(4))
    pushint 4 // 4
    bzero
    callsub test_bytes
    // tests/approvals/prefix-postfix-operators.algo.ts:64
    // return true
    intc_1 // 1
    retsub


// tests/approvals/prefix-postfix-operators.algo.ts::test_uint64(x: uint64, y: uint64) -> uint64:
test_uint64:
    // tests/approvals/prefix-postfix-operators.algo.ts:5
    // function test_uint64(x: uint64, y: uint64) {
    proto 2 1
    // tests/approvals/prefix-postfix-operators.algo.ts:6
    // assert(x === 10, 'x input must be 10')
    frame_dig -2
    intc_2 // 10
    ==
    assert // x input must be 10
    // tests/approvals/prefix-postfix-operators.algo.ts:7
    // assert(y === 5, 'y input must be 5')
    frame_dig -1
    intc_3 // 5
    ==
    assert // y input must be 5
    // tests/approvals/prefix-postfix-operators.algo.ts:8
    // x++
    frame_dig -2
    intc_1 // 1
    +
    dup
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:9
    // assert(x === 11)
    pushint 11 // 11
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:10
    // x--
    frame_dig -2
    intc_1 // 1
    -
    dup
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:11
    // assert(x === 10)
    intc_2 // 10
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:12
    // x -= --y
    frame_dig -1
    intc_1 // 1
    -
    frame_bury -1
    frame_dig -2
    frame_dig -1
    -
    dup
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:13
    // assert(x === 6)
    pushint 6 // 6
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:14
    // assert(y === 4)
    frame_dig -1
    pushint 4 // 4
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:15
    // x += y++
    frame_dig -1
    intc_1 // 1
    +
    frame_dig -2
    frame_dig -1
    +
    dup
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:16
    // assert(x === 10)
    intc_2 // 10
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:17
    // assert(y === 5)
    dup
    intc_3 // 5
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:18
    // const inverted: uint64 = ~y
    dup
    ~
    swap
    // tests/approvals/prefix-postfix-operators.algo.ts:19
    // assert(inverted === 2 ** 64 - 1 - y)
    pushint 18446744073709551615 // 18446744073709551615
    dig 1
    -
    uncover 2
    ==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:26
    // assert(y)
    dup
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:27
    // assert(!!y)
    dup
    !
    !
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:28
    // return !y
    !
    retsub


// tests/approvals/prefix-postfix-operators.algo.ts::test_biguint(x: bytes, y: bytes) -> uint64:
test_biguint:
    // tests/approvals/prefix-postfix-operators.algo.ts:30
    // function test_biguint(x: biguint, y: biguint) {
    proto 2 1
    // tests/approvals/prefix-postfix-operators.algo.ts:31
    // assert(x === 10n, 'x input must be 10')
    frame_dig -2
    bytec_0 // 0x0a
    b==
    assert // x input must be 10
    // tests/approvals/prefix-postfix-operators.algo.ts:32
    // assert(y === 5n, 'y input must be 5')
    frame_dig -1
    bytec_2 // 0x05
    b==
    assert // y input must be 5
    // tests/approvals/prefix-postfix-operators.algo.ts:34
    // x++
    frame_dig -2
    bytec_1 // 0x01
    b+
    dup
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:35
    // assert(x === 11n)
    pushbytes 0x0b
    b==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:37
    // x--
    frame_dig -2
    bytec_1 // 0x01
    b-
    dup
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:39
    // assert(x === 10n)
    bytec_0 // 0x0a
    b==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:40
    // x -= --y
    frame_dig -1
    bytec_1 // 0x01
    b-
    frame_bury -1
    frame_dig -2
    frame_dig -1
    b-
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:41
    // assert(y === 4n)
    frame_dig -1
    pushbytes 0x04
    b==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:42
    // assert(x === 6n)
    frame_dig -2
    pushbytes 0x06
    b==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:43
    // x += y++
    frame_dig -1
    bytec_1 // 0x01
    b+
    frame_dig -2
    frame_dig -1
    b+
    frame_bury -2
    // tests/approvals/prefix-postfix-operators.algo.ts:44
    // assert(y === 5n)
    dup
    bytec_2 // 0x05
    b==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:45
    // assert(x === 10n)
    frame_dig -2
    bytec_0 // 0x0a
    b==
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:46
    // assert(y)
    dup
    bitlen
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:47
    // assert(!!y)
    dup
    bitlen
    !
    !
    assert
    // tests/approvals/prefix-postfix-operators.algo.ts:48
    // return !y
    bitlen
    !
    retsub


// tests/approvals/prefix-postfix-operators.algo.ts::test_bytes(x: bytes) -> void:
test_bytes:
    // tests/approvals/prefix-postfix-operators.algo.ts:50
    // function test_bytes(x: bytes) {
    proto 1 0
    // tests/approvals/prefix-postfix-operators.algo.ts:51
    // assert(x === bzero(4), 'x must be 4 unset bytes')
    pushint 4 // 4
    bzero
    frame_dig -1
    ==
    assert // x must be 4 unset bytes
    // tests/approvals/prefix-postfix-operators.algo.ts:52
    // const y = x.bitwiseInvert()
    frame_dig -1
    b~
    // tests/approvals/prefix-postfix-operators.algo.ts:54
    // assert(y === Bytes.fromHex('FFFFFFFF'))
    pushbytes 0xffffffff
    ==
    assert
    retsub


// tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    // tests/approvals/prefix-postfix-operators.algo.ts:57
    // export class DemoContract extends Contract {
    proto 0 0
    retsub
