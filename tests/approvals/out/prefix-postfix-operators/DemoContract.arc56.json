{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        50
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        95
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        55
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        133,
                        239
                    ],
                    "errorMessage": "x input must be 10"
                },
                {
                    "pc": [
                        334
                    ],
                    "errorMessage": "x must be 4 unset bytes"
                },
                {
                    "pc": [
                        138,
                        244
                    ],
                    "errorMessage": "y input must be 5"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6OkRlbW9Db250cmFjdC5jbGVhclN0YXRlUHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "events": [],
    "templateVariables": {}
}