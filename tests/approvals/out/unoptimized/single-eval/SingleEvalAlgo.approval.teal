#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "myState" "a"

main_block@0:

main_block@1:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/single-eval.algo.ts::SingleEvalAlgo.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/single-eval.algo.ts:16
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    intc_1 // 1
    b main_after_inlined_tests/approvals/single-eval.algo.ts::SingleEvalAlgo.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/single-eval.algo.ts::SingleEvalAlgo.__puya_arc4_router__@11


// tests/approvals/single-eval.algo.ts::SingleEvalAlgo.a() -> bytes:
a:

a_block@0:
    // tests/approvals/single-eval.algo.ts:8
    // this.myState.value += 1
    intc_0 // 0
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    bytec_0 // "myState"
    // tests/approvals/single-eval.algo.ts:8
    // this.myState.value += 1
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 1
    +
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    bytec_0 // "myState"
    // tests/approvals/single-eval.algo.ts:8
    // this.myState.value += 1
    swap
    app_global_put
    // tests/approvals/single-eval.algo.ts:9
    // return 'a'
    bytec_1 // "a"
    retsub


// tests/approvals/single-eval.algo.ts::SingleEvalAlgo.b() -> bytes:
b:

b_block@0:
    // tests/approvals/single-eval.algo.ts:13
    // return 'b'
    pushbytes "b"
    retsub


// tests/approvals/single-eval.algo.ts::SingleEvalAlgo.test() -> void:
test:
    // tests/approvals/single-eval.algo.ts:16
    // test() {
    proto 0 0

test_block@0:
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    bytec_0 // "myState"
    // tests/approvals/single-eval.algo.ts:17
    // this.myState.value = 0
    intc_0 // 0
    app_global_put
    // tests/approvals/single-eval.algo.ts:18
    // const result = this.a() || this.b()
    callsub a
    dup
    len
    bz test_ternary_false@2

test_ternary_true@1:
    // tests/approvals/single-eval.algo.ts:18
    // const result = this.a() || this.b()
    frame_dig 0

test_ternary_merge@3:
    // tests/approvals/single-eval.algo.ts:19
    // assert(this.myState.value === 1, 'a() should only be called once')
    intc_0 // 0
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    bytec_0 // "myState"
    // tests/approvals/single-eval.algo.ts:19
    // assert(this.myState.value === 1, 'a() should only be called once')
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 1
    ==
    assert // a() should only be called once
    // tests/approvals/single-eval.algo.ts:20
    // assert(result === 'a', 'Result should be "a"')
    bytec_1 // "a"
    ==
    assert // Result should be "a"
    retsub

test_ternary_false@2:
    // tests/approvals/single-eval.algo.ts:18
    // const result = this.a() || this.b()
    callsub b
    b test_ternary_merge@3


// tests/approvals/single-eval.algo.ts::SingleEvalAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
