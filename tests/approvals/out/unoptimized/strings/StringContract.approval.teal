#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2
    bytecblock 0x151f7c75

main_block@0:

main_block@1:
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x5049bd1b // method "join(string,string)string"
    pushbytes 0xdc882e2f // method "interpolate(string)string"
    uncover 2
    match main_join_route@3 main_interpolate_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__@12:
    return

main_interpolate_route@4:
    // tests/approvals/strings.algo.ts:8
    // interpolate(a: string): string {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // tests/approvals/strings.algo.ts:8
    // interpolate(a: string): string {
    callsub interpolate
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__@12

main_join_route@3:
    // tests/approvals/strings.algo.ts:4
    // join(a: string, b: string): string {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // tests/approvals/strings.algo.ts:4
    // join(a: string, b: string): string {
    callsub join
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__@12

main_bare_routing@7:
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    // tests/approvals/strings.algo.ts:3
    // class StringContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__@12


// tests/approvals/strings.algo.ts::StringContract.join(a: bytes, b: bytes) -> bytes:
join:
    // tests/approvals/strings.algo.ts:4
    // join(a: string, b: string): string {
    proto 2 1

join_block@0:
    // tests/approvals/strings.algo.ts:5
    // return a + b
    frame_dig -2
    frame_dig -1
    concat
    retsub


// tests/approvals/strings.algo.ts::StringContract.interpolate(a: bytes) -> bytes:
interpolate:
    // tests/approvals/strings.algo.ts:8
    // interpolate(a: string): string {
    proto 1 1

interpolate_block@0:
    // tests/approvals/strings.algo.ts:9
    // return `You interpolated ${a}`
    pushbytes "You interpolated "
    frame_dig -1
    concat
    retsub


// tests/approvals/strings.algo.ts::StringContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
