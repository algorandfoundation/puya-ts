main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__() -> bool:
    block@0: // L3
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L3
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L3
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "join(string,string)string" => block@3, method "interpolate(string)string" => block@4, * => block@5}
    block@3: // join_route_L4
        tests/approvals/strings.algo.ts::StringContract.join[routing]()
        goto block@5
    block@4: // interpolate_route_L8
        tests/approvals/strings.algo.ts::StringContract.interpolate[routing]()
        goto block@5
    block@5: // switch_case_next_L3
        goto block@7
    block@6: // create_NoOp_L3
        goto block@7
    block@7: // after_if_else_L3
        goto block@9
    block@8: // __algots__.defaultCreate_L3
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/strings.algo.ts::StringContract.__algots__.defaultCreate()
        exit 1u
    block@9: // after_if_else_L3
        exit 0u

subroutine tests/approvals/strings.algo.ts::StringContract.join[routing]() -> void:
    block@0: // L4
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = tmp%2#0
        let tmp%3#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%1#0)
        let tmp%4#0: string = tests/approvals/strings.algo.ts::StringContract.join(tmp%1#0, tmp%3#0)
        let tmp%5#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%4#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine tests/approvals/strings.algo.ts::StringContract.interpolate[routing]() -> void:
    block@0: // L8
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: string = tests/approvals/strings.algo.ts::StringContract.interpolate(tmp%1#0)
        let tmp%3#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/strings.algo.ts::StringContract.join(a: string, b: string) -> string:
    block@0: // L4
        let tmp%0#0: string = (concat a#0 b#0)
        return tmp%0#0

subroutine tests/approvals/strings.algo.ts::StringContract.interpolate(a: string) -> string:
    block@0: // L8
        let tmp%0#0: bytes = (concat "You interpolated " a#0)
        return tmp%0#0

subroutine tests/approvals/strings.algo.ts::StringContract.__algots__.defaultCreate() -> void:
    block@0: // L3
        return 