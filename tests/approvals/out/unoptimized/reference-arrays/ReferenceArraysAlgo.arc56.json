{
    "name": "ReferenceArraysAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        76
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        108
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        81
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        241
                    ],
                    "errorMessage": "has length"
                },
                {
                    "pc": [
                        293,
                        307
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        219
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        326
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEIJgIAAwaBAYAgf/////////////////////////////////////////81ADEbIhNBACU2GgCABCozd3FMjgEAAiJDMRkiEkQxGCITRDYaAReIAFYjQv/qMRkiTI4BAANC/94xGCISRIgAySNC/9OKAgCL/oEKCDIMiwAMQQAqsYEGshCBBbIZKbIeKbIfIiOL/44CAAsABLNC/9syALIBQv/1IrIBQv/viYoBAIHQDyKI/7soSVCIAHtJTwI/IosBi/8MQQAYiwBJPosBSU4DFihMUChQUD8jCIwBQv/giwBJPhUkCov/EkSL/0RJPkkVJAlLARVMSwJLAU8DUk4CTCJPAlhMF0sCTwI/i/8jCRJEST4VJAojCUsBPkwkCyRYF4v/gQIJEkQ+IyQLJFgXIxJEiYk0AJM0AIGAAksCCSJUNQCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}