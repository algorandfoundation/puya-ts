{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/boolean-conversions.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAiCI;;;AACA;;;AACO;AAAP;AA9Ba;AAAR;AAAP;AACc;AAAd;AACgB;AAAT;AAAA;AAAP;AACe;AAAf;AAAA;AACQ;AAAD;AAAA;AAAP;AACa;AAAb;AAAA;AACc;AACP;AAAA;AAAP;AACO;AAAP;AAAA;AACQ;AAAD;AAAP;;AAMO;AAAA;AAAA;AAAe;AAAA;AAAA;AAAf;AAAP;AACsB;AAAf;AAAA;AAAsC;;AAAf;AAAA;AAAvB;AAAP;AACuB;AAAhB;AAAA;AAAA;AAAwC;;;AAAhB;AAAA;AAAA;AAAxB;AAAP;AACqB;AAAd;AAAA;AAAwC;AAAd;AAAA;AAA1B;AAAP;AAEe;AAAR;AAAA;AAA2B;AAAR;AAAA;AAAnB;AAAP;AAEmB;AACZ;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/boolean-conversions.algo.ts::BooleanConversionsAlgo.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x \"abc\" 0x01 \"abcdef\""
    },
    "21": {
      "callsub": "tests/approvals/boolean-conversions.algo.ts::test_truthyness",
      "op": "callsub test_truthyness"
    },
    "24": {
      "callsub": "tests/approvals/boolean-conversions.algo.ts::test_booleans_are_equal",
      "op": "callsub test_booleans_are_equal"
    },
    "27": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "28": {
      "op": "return",
      "stack_out": []
    },
    "29": {
      "subroutine": "tests/approvals/boolean-conversions.algo.ts::test_truthyness",
      "params": {},
      "block": "test_truthyness",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "30": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "31": {
      "error": "Zero is falsy",
      "op": "assert // Zero is falsy",
      "stack_out": []
    },
    "32": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "33": {
      "error": "Non zero is truthy",
      "op": "assert // Non zero is truthy",
      "stack_out": []
    },
    "34": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "35": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%2#0"
      ],
      "stack_out": [
        "reinterpret_bool%2#0"
      ]
    },
    "36": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "37": {
      "error": "Zero is falsy",
      "op": "assert // Zero is falsy",
      "stack_out": []
    },
    "38": {
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "39": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%3#0"
      ],
      "stack_out": [
        "reinterpret_bool%3#0"
      ]
    },
    "40": {
      "error": "Non zero is truthy",
      "op": "assert // Non zero is truthy",
      "stack_out": []
    },
    "41": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "42": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%4#0"
      ],
      "stack_out": [
        "reinterpret_bool%4#0"
      ]
    },
    "43": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "44": {
      "error": "Empty is falsy",
      "op": "assert // Empty is falsy",
      "stack_out": []
    },
    "45": {
      "op": "bytec_1 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "46": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%5#0"
      ],
      "stack_out": [
        "reinterpret_bool%5#0"
      ]
    },
    "47": {
      "error": "Non empty is truthy",
      "op": "assert // Non empty is truthy",
      "stack_out": []
    },
    "48": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "\"\""
      ]
    },
    "49": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%6#0"
      ],
      "stack_out": [
        "reinterpret_bool%6#0"
      ]
    },
    "50": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "51": {
      "error": "Empty is falsy",
      "op": "assert // Empty is falsy",
      "stack_out": []
    },
    "52": {
      "op": "bytec_1 // \"abc\"",
      "stack_out": [
        "\"abc\""
      ]
    },
    "53": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%7#0"
      ],
      "stack_out": [
        "reinterpret_bool%7#0"
      ]
    },
    "54": {
      "error": "Non empty is truthy",
      "op": "assert // Non empty is truthy",
      "stack_out": []
    },
    "55": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "57": {
      "error": "False is falsy",
      "op": "assert // False is falsy",
      "stack_out": []
    },
    "58": {
      "retsub": true,
      "op": "retsub"
    },
    "59": {
      "subroutine": "tests/approvals/boolean-conversions.algo.ts::test_booleans_are_equal",
      "params": {},
      "block": "test_booleans_are_equal",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "60": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "62": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "63": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "64": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "66": {
      "op": "assert",
      "stack_out": []
    },
    "67": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "68": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "69": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "70": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "5"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "73": {
      "op": "!",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "75": {
      "op": "assert",
      "stack_out": []
    },
    "76": {
      "op": "bytec_2 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "77": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%2#0"
      ],
      "stack_out": [
        "reinterpret_bool%2#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "80": {
      "op": "pushbytes 0x05",
      "defined_out": [
        "0x05",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x05"
      ]
    },
    "83": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "reinterpret_bool%3#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "85": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "86": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "87": {
      "op": "assert",
      "stack_out": []
    },
    "88": {
      "op": "bytec_1 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "89": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "\"abc\"",
        "0x"
      ],
      "stack_out": [
        "\"abc\"",
        "0x"
      ]
    },
    "90": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "91": {
      "op": "bytec_3 // \"abcdef\"",
      "defined_out": [
        "\"abcdef\"",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "\"abcdef\""
      ]
    },
    "92": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%15#0",
        "\"abcdef\"",
        "0x"
      ]
    },
    "93": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "94": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "95": {
      "op": "assert",
      "stack_out": []
    },
    "96": {
      "op": "bytec_1 // \"abc\"",
      "stack_out": [
        "\"abc\""
      ]
    },
    "97": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "\"abc\"",
        "0x"
      ]
    },
    "98": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "99": {
      "op": "bytec_3 // \"abcdef\"",
      "stack_out": [
        "tmp%18#0",
        "\"abcdef\""
      ]
    },
    "100": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%18#0",
        "\"abcdef\"",
        "0x"
      ]
    },
    "101": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": []
    },
    "104": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "106": {
      "op": "assert",
      "stack_out": []
    },
    "107": {
      "retsub": true,
      "op": "retsub"
    }
  }
}