main tests/approvals/boolean-conversions.algo.ts::BooleanConversionsAlgo.approvalProgram:
    block@0: // L33
        tests/approvals/boolean-conversions.algo.ts::test_truthyness()
        tests/approvals/boolean-conversions.algo.ts::test_booleans_are_equal()
        return 1u

subroutine tests/approvals/boolean-conversions.algo.ts::test_truthyness() -> void:
    block@0: // L3
        let tmp%0#0: bool = (! 0u)
        (assert tmp%0#0) // Zero is falsy
        (assert 1u) // Non zero is truthy
        let reinterpret_bool%2#0: bool = (bitlen 0b)
        let tmp%1#0: bool = (! reinterpret_bool%2#0)
        (assert tmp%1#0) // Zero is falsy
        let reinterpret_bool%3#0: bool = (bitlen 1b)
        (assert reinterpret_bool%3#0) // Non zero is truthy
        let reinterpret_bool%4#0: bool = (len 0x)
        let tmp%2#0: bool = (! reinterpret_bool%4#0)
        (assert tmp%2#0) // Empty is falsy
        let reinterpret_bool%5#0: bool = (len "abc")
        (assert reinterpret_bool%5#0) // Non empty is truthy
        let reinterpret_bool%6#0: bool = (len "")
        let tmp%3#0: bool = (! reinterpret_bool%6#0)
        (assert tmp%3#0) // Empty is falsy
        let reinterpret_bool%7#0: bool = (len "abc")
        (assert reinterpret_bool%7#0) // Non empty is truthy
        let tmp%4#0: bool = (! 0u)
        (assert tmp%4#0) // False is falsy
        return 

subroutine tests/approvals/boolean-conversions.algo.ts::test_booleans_are_equal() -> void:
    block@0: // L19
        let tmp%0#0: bool = (! 1u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: bool = (! 1u)
        let tmp%3#0: bool = (! tmp%2#0)
        let tmp%4#0: bool = (== tmp%1#0 tmp%3#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (! 1u)
        let tmp%6#0: bool = (! tmp%5#0)
        let tmp%7#0: bool = (! 5u)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: bool = (== tmp%6#0 tmp%8#0)
        (assert tmp%9#0)
        let reinterpret_bool%2#0: bool = (bitlen 1b)
        let tmp%10#0: bool = (! reinterpret_bool%2#0)
        let tmp%11#0: bool = (! tmp%10#0)
        let reinterpret_bool%3#0: bool = (bitlen 5b)
        let tmp%12#0: bool = (! reinterpret_bool%3#0)
        let tmp%13#0: bool = (! tmp%12#0)
        let tmp%14#0: bool = (== tmp%11#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: bool = (!= "abc" 0x)
        let tmp%16#0: bool = (!= "abcdef" 0x)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: bool = (!= "abc" 0x)
        let tmp%19#0: bool = (!= "abcdef" 0x)
        let tmp%20#0: bool = (== tmp%18#0 tmp%19#0)
        (assert tmp%20#0)
        let tmp%21#0: bool = (! 0u)
        (assert tmp%21#0)
        return 