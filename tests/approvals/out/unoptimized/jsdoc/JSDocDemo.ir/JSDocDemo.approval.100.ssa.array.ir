main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L20
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,byte[])(uint64)" => block@3, method "test2(byte[])(byte[])" => block@4, * => block@5}
    block@3: // test_route_L30
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let value_len%0#0: uint64 = (len tmp%7#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 8u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%0#0: bytes[8] = tmp%7#0
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%9#0: bytes = (txna ApplicationArgs 2)
        let length%0#0: uint64 = (extract_uint16 tmp%9#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%1#0: uint64 = (len tmp%9#0)
        let size_is_correct%1#0: bool = (== value_len%1#0 num_bytes_with_header%0#0)
        (assert size_is_correct%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let reinterpret_bytes%0#0: bytes = tmp%9#0
        let tmp%10#0: bytes = ((extract 2 0) reinterpret_bytes%0#0)
        let tmp%11#0: bytes[8] = tests/approvals/jsdoc.algo.ts::JSDocDemo.test(tmp%8#0, tmp%10#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // test2_route_L39
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let tmp%17#0: bytes = (txna ApplicationArgs 1)
        let length%1#0: uint64 = (extract_uint16 tmp%17#0 0u) // on error: invalid array length header
        let num_bytes%1#0: uint64 = (* length%1#0 1u)
        let num_bytes_with_header%1#0: uint64 = (+ num_bytes%1#0 2u)
        let value_len%2#0: uint64 = (len tmp%17#0)
        let size_is_correct%2#0: bool = (== value_len%2#0 num_bytes_with_header%1#0)
        (assert size_is_correct%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let reinterpret_bytes%1#0: bytes = tmp%17#0
        let tmp%18#0: bytes = ((extract 2 0) reinterpret_bytes%1#0)
        let elements_to_encode%0#0: bytes = tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(tmp%18#0)
        let length%2#0: uint64 = (len elements_to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%2#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%0#0)
        let as_bytes%1#0: bytes[8] = (itob 2u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 encoded_value%0#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%19#0)
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L20
        goto block@6
    block@6: // switch_case_next_L20
        goto block@11
    block@7: // bare_routing_L20
        let tmp%20#0: uint64 = (txn OnCompletion)
        switch tmp%20#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L20
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (== tmp%21#0 0u)
        (assert tmp%22#0) // can only call when creating
        tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate()
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L20
        goto block@10
    block@10: // switch_case_next_L20
        goto block@11
    block@11: // after_if_else_L20
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test(a: uint64, b: bytes) -> bytes[8]:
    block@0: // L30
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        return encoded_tuple_buffer%1#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(a: bytes) -> bytes:
    block@0: // L39
        return a#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate() -> void:
    block@0: // L20
        return 