#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2
    bytecblock 0x151f7c75 0x
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@9
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@7
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x60d93beb // method "test(uint64,byte[])(uint64)"
    pushbytes 0x6618726a // method "test2(byte[])(byte[])"
    uncover 2
    match main_test_route@4 main_test2_route@5
    b main_switch_case_next@6

main_switch_case_next@6:
    b main_after_if_else@8

main_after_if_else@8:
    b main_after_if_else@10

main_after_if_else@10:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    err

main_test2_route@5:
    // tests/approvals/jsdoc.algo.ts:39
    // test2(a: bytes): DemoType {
    callsub test2
    b main_switch_case_next@6

main_test_route@4:
    // tests/approvals/jsdoc.algo.ts:30
    // test(a: uint64, b: bytes): DemoStruct {
    callsub test
    b main_switch_case_next@6

main_create_NoOp@7:
    b main_after_if_else@8

main___algots__.defaultCreate@9:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/jsdoc.algo.ts::JSDocDemo.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/jsdoc.algo.ts:30
    // test(a: uint64, b: bytes): DemoStruct {
    txna ApplicationArgs 1
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    callsub tests/approvals/jsdoc.algo.ts::JSDocDemo.test
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/jsdoc.algo.ts::JSDocDemo.test2[routing]() -> void:
test2:
    b test2_block@0

test2_block@0:
    // tests/approvals/jsdoc.algo.ts:39
    // test2(a: bytes): DemoType {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    callsub tests/approvals/jsdoc.algo.ts::JSDocDemo.test2
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/jsdoc.algo.ts::JSDocDemo.test(a: uint64, b: bytes) -> bytes:
tests/approvals/jsdoc.algo.ts::JSDocDemo.test:
    // tests/approvals/jsdoc.algo.ts:30
    // test(a: uint64, b: bytes): DemoStruct {
    proto 2 1
    b tests/approvals/jsdoc.algo.ts::JSDocDemo.test_block@0

tests/approvals/jsdoc.algo.ts::JSDocDemo.test_block@0:
    // tests/approvals/jsdoc.algo.ts:31
    // return new DemoStruct({ a: new Uint<64>(a) })
    frame_dig -2
    itob
    bytec_1 // 0x
    uncover 1
    concat
    retsub


// tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(a: bytes) -> bytes:
tests/approvals/jsdoc.algo.ts::JSDocDemo.test2:
    // tests/approvals/jsdoc.algo.ts:39
    // test2(a: bytes): DemoType {
    proto 1 1
    b tests/approvals/jsdoc.algo.ts::JSDocDemo.test2_block@0

tests/approvals/jsdoc.algo.ts::JSDocDemo.test2_block@0:
    // tests/approvals/jsdoc.algo.ts:40-42
    // return {
    //   a,
    // }
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    uncover 1
    concat
    retsub


// tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
