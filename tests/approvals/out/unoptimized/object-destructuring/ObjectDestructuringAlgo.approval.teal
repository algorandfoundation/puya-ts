#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8 4
    bytecblock 0x

main_block@0:

main_block@1:
    // tests/approvals/object-destructuring.algo.ts:96
    // class ObjectDestructuringAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/object-destructuring.algo.ts:96
    // class ObjectDestructuringAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/object-destructuring.algo.ts:96
    // class ObjectDestructuringAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/object-destructuring.algo.ts:97
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test
    intc_1 // 1
    b main_after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/object-destructuring.algo.ts:96
    // class ObjectDestructuringAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/object-destructuring.algo.ts:96
    // class ObjectDestructuringAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__@11


// tests/approvals/object-destructuring.algo.ts::testPartialDestructure(arg.x: uint64, arg.y: uint64, arg.z: bytes) -> uint64, uint64:
testPartialDestructure:
    // tests/approvals/object-destructuring.algo.ts:7
    // function testPartialDestructure(arg: { x: uint64; y: uint64; z: biguint }) {
    proto 3 2

testPartialDestructure_block@0:
    // tests/approvals/object-destructuring.algo.ts:8
    // const { x } = arg
    frame_dig -3
    // tests/approvals/object-destructuring.algo.ts:9-11
    // const {
    //   nested: { y },
    // } = { nested: arg }
    frame_dig -2
    // tests/approvals/object-destructuring.algo.ts:12
    // return [x, y] as const
    retsub


// tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(arg: bytes) -> uint64, uint64, bytes:
testPartialDestructureMutableObject:
    // tests/approvals/object-destructuring.algo.ts:15
    // function testPartialDestructureMutableObject(arg: Vector) {
    proto 1 3

testPartialDestructureMutableObject_block@0:
    // tests/approvals/object-destructuring.algo.ts:16-18
    // const {
    //   c1: { x },
    // } = arg
    frame_dig -1
    intc_0 // 0
    pushint 16 // 16
    extract3
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    // tests/approvals/object-destructuring.algo.ts:19-23
    // const {
    //   nested: {
    //     c1: { y },
    //   },
    // } = { nested: clone(arg) }
    frame_dig -1
    intc_0 // 0
    pushint 16 // 16
    extract3
    intc_2 // 8
    dup
    extract3
    btoi
    // tests/approvals/object-destructuring.algo.ts:24
    // return [x, y] as const
    frame_dig -1
    retsub


// tests/approvals/object-destructuring.algo.ts::test() -> void:
test:

test_block@0:
    // tests/approvals/object-destructuring.algo.ts:28
    // const { a, b, c, d } = produceItems()
    callsub produceItems
    popn 4
    // tests/approvals/object-destructuring.algo.ts:29
    // const { d: e } = produceItems()
    callsub produceItems
    popn 4
    // tests/approvals/object-destructuring.algo.ts:31
    // const f = ({ a: g, d: i } = produceItems())
    callsub produceItems
    popn 4
    // tests/approvals/object-destructuring.algo.ts:32
    // receivePartial(produceItems())
    callsub produceItems
    cover 3
    popn 2
    swap
    callsub receivePartial
    retsub


// tests/approvals/object-destructuring.algo.ts::testMutableObject() -> void:
testMutableObject:

testMutableObject_block@0:
    // tests/approvals/object-destructuring.algo.ts:39
    // } = produceVector()
    callsub produceVector
    pop
    // tests/approvals/object-destructuring.algo.ts:42
    // } = produceVector()
    callsub produceVector
    pop
    // tests/approvals/object-destructuring.algo.ts:47
    // } = produceVector())
    callsub produceVector
    pop
    // tests/approvals/object-destructuring.algo.ts:48
    // receivePartialMutableObject(produceVector())
    callsub produceVector
    intc_0 // 0
    pushint 16 // 16
    extract3
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    swap
    intc_2 // 8
    dup
    extract3
    btoi
    callsub receivePartialMutableObject
    retsub


// tests/approvals/object-destructuring.algo.ts::produceItems() -> uint64, bytes, uint64, bytes:
produceItems:

produceItems_block@0:
    // tests/approvals/object-destructuring.algo.ts:53
    // a: 1,
    intc_1 // 1
    // tests/approvals/object-destructuring.algo.ts:54
    // b: Bytes(''),
    bytec_0 // ""
    // tests/approvals/object-destructuring.algo.ts:55
    // c: false,
    intc_0 // 0
    // tests/approvals/object-destructuring.algo.ts:56
    // d: 999n,
    pushbytes 0x03e7
    // tests/approvals/object-destructuring.algo.ts:52-57
    // return {
    //   a: 1,
    //   b: Bytes(''),
    //   c: false,
    //   d: 999n,
    // }
    retsub


// tests/approvals/object-destructuring.algo.ts::produceVector() -> bytes:
produceVector:

produceVector_block@0:
    // tests/approvals/object-destructuring.algo.ts:61
    // return new Vector({ c1: new Coordinate({ x: 1, y: 2 }), c2: new Coordinate({ x: 4, y: 1 }) })
    intc_1 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 2 // 2
    itob
    concat
    bytec_0 // 0x
    concat
    intc_3 // 4
    itob
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    concat
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x
    concat
    retsub


// tests/approvals/object-destructuring.algo.ts::receivePartial(x.a: uint64, x.d: bytes) -> void:
receivePartial:
    // tests/approvals/object-destructuring.algo.ts:64
    // function receivePartial(x: { a: uint64; d: biguint }) {}
    proto 2 0

receivePartial_block@0:
    retsub


// tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(a.c1.x: uint64, a.c1.y: uint64) -> void:
receivePartialMutableObject:
    // tests/approvals/object-destructuring.algo.ts:66
    // function receivePartialMutableObject(a: { c1: { x: uint64; y: uint64 } }) {}
    proto 2 0

receivePartialMutableObject_block@0:
    retsub


// tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral() -> bytes:
testLiteralToLiteral:

testLiteralToLiteral_block@0:
    // tests/approvals/object-destructuring.algo.ts:74
    // const { b: f, a: e } = ({ a: c, b: d } = { a, b })
    intc_3 // 4
    // tests/approvals/object-destructuring.algo.ts:75
    // return [e, f, c, d]
    itob
    bytec_0 // 0x
    swap
    concat
    // tests/approvals/object-destructuring.algo.ts:74
    // const { b: f, a: e } = ({ a: c, b: d } = { a, b })
    intc_1 // 1
    // tests/approvals/object-destructuring.algo.ts:75
    // return [e, f, c, d]
    itob
    concat
    // tests/approvals/object-destructuring.algo.ts:74
    // const { b: f, a: e } = ({ a: c, b: d } = { a, b })
    intc_3 // 4
    // tests/approvals/object-destructuring.algo.ts:75
    // return [e, f, c, d]
    itob
    concat
    // tests/approvals/object-destructuring.algo.ts:74
    // const { b: f, a: e } = ({ a: c, b: d } = { a, b })
    intc_1 // 1
    // tests/approvals/object-destructuring.algo.ts:75
    // return [e, f, c, d]
    itob
    concat
    intc_3 // 4
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    retsub


// tests/approvals/object-destructuring.algo.ts::testNumericResolution() -> void:
testNumericResolution:

testNumericResolution_block@0:
    // tests/approvals/object-destructuring.algo.ts:81
    // assertMatch([x.a, y.a], [434, 434])
    pushint 2 // 2
    dup
    ==
    bz testNumericResolution_bool_false@4

testNumericResolution_and_contd@1:
    // tests/approvals/object-destructuring.algo.ts:80
    // const x: { a: uint64 } = (y = { a: 434 })
    pushint 434 // 434
    // tests/approvals/object-destructuring.algo.ts:81
    // assertMatch([x.a, y.a], [434, 434])
    dup
    ==
    bz testNumericResolution_bool_false@4

testNumericResolution_and_contd@2:
    // tests/approvals/object-destructuring.algo.ts:80
    // const x: { a: uint64 } = (y = { a: 434 })
    pushint 434 // 434
    // tests/approvals/object-destructuring.algo.ts:81
    // assertMatch([x.a, y.a], [434, 434])
    dup
    ==
    bz testNumericResolution_bool_false@4

testNumericResolution_bool_true@3:
    intc_1 // 1

testNumericResolution_bool_merge@5:
    // tests/approvals/object-destructuring.algo.ts:81
    // assertMatch([x.a, y.a], [434, 434])
    assert // assert target is match for conditions
    retsub

testNumericResolution_bool_false@4:
    intc_0 // 0
    b testNumericResolution_bool_merge@5


// tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test() -> void:
tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test:
    // tests/approvals/object-destructuring.algo.ts:97
    // test() {
    proto 0 0
    intc_0 // 0
    bytec_0 // ""
    dup

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_block@0:
    // tests/approvals/object-destructuring.algo.ts:98
    // const res = testPartialDestructure({ x: 1, y: 4, z: 123n })
    intc_1 // 1
    intc_3 // 4
    pushbytes 0x7b
    callsub testPartialDestructure
    // tests/approvals/object-destructuring.algo.ts:99
    // assertMatch(res, [1, 4])
    pushint 2 // 2
    dup
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@4

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@1:
    // tests/approvals/object-destructuring.algo.ts:99
    // assertMatch(res, [1, 4])
    frame_dig 3
    intc_1 // 1
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@4

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@2:
    // tests/approvals/object-destructuring.algo.ts:99
    // assertMatch(res, [1, 4])
    frame_dig 4
    intc_3 // 4
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@4

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_true@3:
    intc_1 // 1

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_merge@5:
    // tests/approvals/object-destructuring.algo.ts:99
    // assertMatch(res, [1, 4])
    assert // assert target is match for conditions
    // tests/approvals/object-destructuring.algo.ts:102
    // new Vector({ c1: new Coordinate({ x: 10, y: 20 }), c2: new Coordinate({ x: 20, y: 30 }) }),
    pushint 10 // 10
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 20 // 20
    itob
    concat
    bytec_0 // 0x
    concat
    pushint 20 // 20
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 30 // 30
    itob
    concat
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x
    concat
    // tests/approvals/object-destructuring.algo.ts:101-103
    // const res2 = testPartialDestructureMutableObject(
    //   new Vector({ c1: new Coordinate({ x: 10, y: 20 }), c2: new Coordinate({ x: 20, y: 30 }) }),
    // )
    callsub testPartialDestructureMutableObject
    pop
    swap
    frame_bury 1
    frame_bury 2
    // tests/approvals/object-destructuring.algo.ts:104
    // assertMatch(res2, [10, 20])
    pushint 2 // 2
    dup
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@9

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@6:
    // tests/approvals/object-destructuring.algo.ts:104
    // assertMatch(res2, [10, 20])
    frame_dig 1
    pushint 10 // 10
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@9

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@7:
    // tests/approvals/object-destructuring.algo.ts:104
    // assertMatch(res2, [10, 20])
    frame_dig 2
    pushint 20 // 20
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@9

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_true@8:
    intc_1 // 1

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_merge@10:
    // tests/approvals/object-destructuring.algo.ts:104
    // assertMatch(res2, [10, 20])
    assert // assert target is match for conditions
    // tests/approvals/object-destructuring.algo.ts:106
    // testNumericResolution()
    callsub testNumericResolution
    // tests/approvals/object-destructuring.algo.ts:108
    // const res3 = testLiteralToLiteral()
    callsub testLiteralToLiteral
    dup
    frame_bury 0
    // tests/approvals/object-destructuring.algo.ts:109
    // assertMatch(res3, [4, 1, 4, 1])
    intc_0 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@16

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@11:
    // tests/approvals/object-destructuring.algo.ts:109
    // assertMatch(res3, [4, 1, 4, 1])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@16

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@12:
    // tests/approvals/object-destructuring.algo.ts:109
    // assertMatch(res3, [4, 1, 4, 1])
    frame_dig 0
    extract 2 0
    intc_1 // 1
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 1
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@16

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@13:
    // tests/approvals/object-destructuring.algo.ts:109
    // assertMatch(res3, [4, 1, 4, 1])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@16

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_and_contd@14:
    // tests/approvals/object-destructuring.algo.ts:109
    // assertMatch(res3, [4, 1, 4, 1])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 1
    ==
    bz tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@16

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_true@15:
    intc_1 // 1

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_merge@17:
    // tests/approvals/object-destructuring.algo.ts:109
    // assertMatch(res3, [4, 1, 4, 1])
    assert // assert target is match for conditions
    // tests/approvals/object-destructuring.algo.ts:111
    // test()
    callsub test
    // tests/approvals/object-destructuring.algo.ts:113
    // testMutableObject()
    callsub testMutableObject
    retsub

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@16:
    intc_0 // 0
    b tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_merge@17

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@9:
    intc_0 // 0
    b tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_merge@10

tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_false@4:
    intc_0 // 0
    b tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test_bool_merge@5


// tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
