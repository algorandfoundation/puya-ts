{
    "name": "ObjectDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        42
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        351,
                        375,
                        420,
                        513
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        70
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        47
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        446,
                        467,
                        487,
                        508
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        149,
                        238
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAgBArIDJgIAAgPnMRsiE0EAITYaAIAEp4AA3kyOAQACIkMxGSISRDEYIhNEiAEuJEL/7jEZIkyOAQADQv/iMRgiEkSIAb8kQv/XigMCi/2L/omKAQOL/yKBEFgiI1gXi/8igRBYI0lYF4v/iYgAWkiIAFZIiABSSIgATkkiI1gXTIELgUBYTBYoTFBMSRWBQA5EgUCvq1CIAHJIiYgAVUiIAFFIiABNSIgASSKBEFhJIiNYF0wjSVgXTBYoTFBMFlAoTFCIAEtIiSQWKExQKBUWVwYCKFBMgUsWVwYCUIABACJJVFApFYFADkSBQK8pq1BMUIkkFihMUCUWUIEEFihMUCQWUChPAlBMUImKAQGL/4mKAQGL/4mBBBYoTFAkFlBJI0lYF0wiI1gXgQQWVwYCTBZQTBZQgQQWUCQWUIkhBBYoTFBJJUkSTCIjWBchBBIQTCIjWBchBBIQRIkkgQSAAXuI/uRMJUkSTCQSEEyBBBIQRIEKFihMUIEUFlCBFBYoTFCBHhZQKE8CUExQiP7BSEwlSRJMgQoSEEyBFBIQRIj/m4j/cUkiWYEEEkxJFUxJJU8DUiIjCyNYF4EEEk8CEExJFUxJJU8DUiQjCyNYFyQSTwIQTEkVTEklTwNSJSMLI1gXgQQSTwIQTEkVTCVPAlKBAyMLI1gXJBIQRIj+a4j+mImJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}