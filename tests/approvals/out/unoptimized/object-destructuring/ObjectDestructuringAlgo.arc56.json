{
    "name": "ObjectDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        78
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        62
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        407,
                        448,
                        500,
                        601
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        528,
                        551,
                        573,
                        596
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        509
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        168,
                        268
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAFCAABArIDJgIAAgPnQgAAQgAAMRsjE0EAKUIAADYaAIAEp4AA3k8BjgEAB0IAAEIAAAAxGSMSMRgjExBEiAFXQv/sMRkjEjEYIxIQRIgCDyRDigMCQgAAi/2L/omKAQNCAACL/yOBEFgjIlgXi/8jgRBYIiJYF4v/iYoAAEIAAIgAYYgAXogAW4gAWEkjIlgXTgGBC4FAWE4BFihPAVBOAUkVgUAORIFAr6tQiACEiYoAAEIAAIgAXIgAWYgAVogAUyOBEFhJIyJYF04BIiJYF08BFihPAVBPARZQKE8BUIgAWYlCAAAkFihPAVAoFRZXBgIoUE4BgUsWVwYCUIABACMjVFApFYFADkSBQK8pq1BPAVCJQgAAJBYoTwFQJRZQgQQWKE8BUCQWUChPAlBPAVCJigEBQgAAi/+JigEBQgAAi/+JQgAAgQQWKE8BUCQWUEkiIlgXTgEjIlgXgQQWVwYCTwEWUE8BFlCBBBZQJBZQiUIAACEEFihPAVBJJSUSTgEjIlgXIQQSEE8BIyJYFyEEEhBEiUIAAIgAAiRDigAAQgAAJIEEgAF7iP6kTgElJRJPASQSEE8BgQQSEESBChYoTwFQgRQWUIEUFihPAVCBHhZQKE8CUE8BUIj+fk4CTgElJRJPAYEKEhBPAYEUEhBEiP99iP9MSSNZgQQSTgFJFU4BSSVPA1IjIgsiWBeBBBJPAhBOAUkVTgFJJU8DUiQiCyJYFyQSTwIQTgFJFU4BSSVPA1IlIgsiWBeBBBJPAhBOAUkVTgElTwJSgQMiCyJYFyQSEESI/h+I/lKJQgAAiQ==",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}