subroutine testPartialDestructure(arg: ReadonlyObject6057C401{ x: uint64, y: uint64, z: biguint }): readonly [uint64, uint64]
{
  #[x]: readonly [uint64] = #[arg.x]
  #[#[y]]: readonly [readonly [uint64]] = #[#[($0 = #{ nested: arg }).nested.y]]
  return #[x, y]
}
subroutine testPartialDestructureMutableObject(arg: tests/approvals/object-destructuring.algo.ts::Vector): readonly [uint64, uint64]
{
  #[#[x]]: readonly [readonly [uint64]] = #[#[arg.c1.x]]
  #[#[#[y]]]: readonly [readonly [readonly [uint64]]] = #[#[#[($1 = #{ nested: copy(arg) }).nested.c1.y]]]
  return #[x, y]
}
subroutine test(): void
{
  #[a, b, c, d]: readonly [uint64, bytes, bool, biguint] = #[($2 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, $2.b, $2.c, $2.d]
  #[e]: readonly [biguint] = #[($3 = tests/approvals/object-destructuring.algo.ts::produceItems()).d]
  f: ObjectB4218761 = (#[g, i] = #[($4 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, $4.d]), $4
  tests/approvals/object-destructuring.algo.ts::receivePartial(new Object8B7906B5(a=($5 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, d=$5.d))
}
subroutine testMutableObject(): void
{
  #[#[x, y], c2]: readonly [readonly [uint64, uint64], tests/approvals/object-destructuring.algo.ts::Coordinate] = #[#[($6 = tests/approvals/object-destructuring.algo.ts::produceVector()).c1.x, $6.c1.y], $6.c2]
  #[#[b]]: readonly [readonly [uint64]] = #[#[($7 = tests/approvals/object-destructuring.algo.ts::produceVector()).c1.y]]
  f: tests/approvals/object-destructuring.algo.ts::Vector = (#[#[g], i] = #[#[($8 = tests/approvals/object-destructuring.algo.ts::produceVector()).c1.x], $8.c2]), $8
  tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(new Object2E6F7131(c1=new ObjectDC5110F2(x=($9 = ($10 = tests/approvals/object-destructuring.algo.ts::produceVector()).c1).x, y=$9.y)))
}
subroutine produceItems(): ObjectB4218761
{
  return new ObjectB4218761(a=($11 = #{ a: 1, b: "", c: False, d: 999 }).a, b=$11.b, c=$11.c, d=$11.d)
}
subroutine produceVector(): tests/approvals/object-destructuring.algo.ts::Vector
{
  return new tests/approvals/object-destructuring.algo.ts::Vector(c1=($12 = #{ c1: new tests/approvals/object-destructuring.algo.ts::Coordinate(x=($13 = #{ x: 1, y: 2 }).x, y=$13.y), c2: new tests/approvals/object-destructuring.algo.ts::Coordinate(x=($14 = #{ x: 4, y: 1 }).x, y=$14.y) }).c1, c2=$12.c2)
}
subroutine receivePartial(x: Object8B7906B5): void
{
}
subroutine receivePartialMutableObject(a: Object2E6F7131): void
{
}
subroutine testLiteralToLiteral(): arc4.dynamic_array<uint64>
{
  #[f, e]: readonly [uint64, uint64] = #[($15 = (#[c, d] = #[($16 = #{ a: 4, b: 1 }).a, $16.b]), new ObjectACED9E72(a=$16.a, b=$16.b)).b, $15.a]
  return new arc4.dynamic_array<uint64>(e, f, c, d)
}
subroutine testNumericResolution(): void
{
  x: ObjectA59DA9E9 = (y = new ObjectA59DA9E9(a=($17 = #{ a: ($18 = #{ a: 434 }).a }).a))
  assert(2 == 2 and x.a == 434 and y.a == 434, comment=assert target is match for conditions)
}
subroutine test2(args: ReadonlyObjectC90AF4BD{ x: bool, y: bool, z: readonly [string, string] }): void
{
  #[a, b, #[x, y]]: readonly [bool, bool, readonly [bool, bool]] = #[($19 = #{ a: True, b: False, args: args }).a, $19.b, #[$19.args.x, $19.args.y]]
  assert(a and !b)
  args2: ObjectC90AF4BD = new ObjectC90AF4BD(x=($20 = #{ x: True, y: True, z: args.z }).x, y=$20.y, z=$20.z)
  assert(args2.x and args2.y)
}
contract ObjectDestructuringAlgo
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  test(): void
  {
    res: readonly [uint64, uint64] = tests/approvals/object-destructuring.algo.ts::testPartialDestructure(#{ x: ($21 = #{ x: 1, y: 4, z: 123 }).x, y: $21.y, z: $21.z })
    assert(2 == 2 and res.0 == 1 and res.1 == 4, comment=assert target is match for conditions)
    res2: readonly [uint64, uint64] = tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(new tests/approvals/object-destructuring.algo.ts::Vector(c1=($22 = #{ c1: new tests/approvals/object-destructuring.algo.ts::Coordinate(x=($23 = #{ x: 10, y: 20 }).x, y=$23.y), c2: new tests/approvals/object-destructuring.algo.ts::Coordinate(x=($24 = #{ x: 20, y: 30 }).x, y=$24.y) }).c1, c2=$22.c2))
    assert(2 == 2 and res2.0 == 10 and res2.1 == 20, comment=assert target is match for conditions)
    tests/approvals/object-destructuring.algo.ts::testNumericResolution()
    res3: arc4.dynamic_array<uint64> = tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral()
    assert(res3.length == 4 and res3[0] == 4 and res3[1] == 1 and res3[2] == 4 and res3[3] == 1, comment=assert target is match for conditions)
    tests/approvals/object-destructuring.algo.ts::test()
    tests/approvals/object-destructuring.algo.ts::testMutableObject()
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}