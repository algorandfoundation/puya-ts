subroutine testPartialDestructure(arg: object{ x: uint64, y: uint64, z: biguint }): void
{
  { x: x, y: _₂, z: _₃ }: object{ x: uint64, y: uint64, z: biguint } = arg
  { nested: { y: y, x: _₆, z: _₇ } }: object{ nested: object{ y: uint64, x: uint64, z: biguint } } = { nested: (#0 = { nested: { y: arg.y, x: arg.x, z: arg.z } }).nested }
}
subroutine testPartialDestructureMutableObject(arg: Coordinate): void
{
  { v: { x: x, y: _₂ }, z: _₃ }: object{ v: object{ x: uint64, y: uint64 }, z: biguint } = { v: ARC4_DECODE((#1 = ARC4_DECODE(arg)).v), z: #1.z }
  { nested: { v: { x: _₆, y: y }, z: _₇ } }: object{ nested: object{ v: object{ x: uint64, y: uint64 }, z: biguint } } = { nested: (#2 = { nested: { v: ARC4_DECODE((#3 = ARC4_DECODE(copy(arg))).v), z: #3.z } }).nested }
}
subroutine test(): void
{
  { a: a, b: b, c: c, d: d }: object{ a: uint64, b: bytes, c: bool, d: biguint } = { a: (#4 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, b: #4.b, c: #4.c, d: #4.d }
  { d: e, a: _₃, b: _₄, c: _₅ }: object{ d: biguint, a: uint64, b: bytes, c: bool } = { d: (#5 = tests/approvals/object-destructuring.algo.ts::produceItems()).d, a: #5.a, b: #5.b, c: #5.c }
  f: object{ a: uint64, b: bytes, c: bool, d: biguint } = { a: (#6 = ({ a: g, d: i, b: _₈, c: _₉ } = { a: (#7 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, d: #7.d, b: #7.b, c: #7.c })).a, b: #6.b, c: #6.c, d: #6.d }
  tests/approvals/object-destructuring.algo.ts::receivePartial({ a: (#8 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, d: #8.d })
}
subroutine testMutableObject(): void
{
  { v: { x: x, y: y }, z: z }: object{ v: object{ x: uint64, y: uint64 }, z: biguint } = { v: ARC4_DECODE((#9 = ARC4_DECODE(tests/approvals/object-destructuring.algo.ts::produceCoordinates())).v), z: #9.z }
  { v: { x: _₂, y: b }, z: _₃ }: object{ v: object{ x: uint64, y: uint64 }, z: biguint } = { v: ARC4_DECODE((#10 = ARC4_DECODE(tests/approvals/object-destructuring.algo.ts::produceCoordinates())).v), z: #10.z }
  tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject({ v: ARC4_DECODE((#11 = ARC4_DECODE(tests/approvals/object-destructuring.algo.ts::produceCoordinates())).v) })
}
subroutine produceItems(): produceItemsResult{ a: uint64, b: bytes, c: bool, d: biguint }
{
  return { a: (#12 = { a: 1, b: "", c: False, d: 999 }).a, b: #12.b, c: #12.c, d: #12.d }
}
subroutine produceCoordinates(): Coordinate
{
  return new Coordinate(v=(#13 = { v: (#14 = { v: new Vector(x=(#15 = { x: (#16 = { x: 1, y: 2 }).x, y: #16.y }).x, y=#15.y), z: 3 }).v, z: #14.z }).v, z=#13.z)
}
subroutine receivePartial(x: object{ a: uint64, d: biguint }): void
{
}
subroutine receivePartialMutableObject(a: object{ v: object{ x: uint64, y: uint64 } }): void
{
}
subroutine testLiteralToLiteral(): void
{
  { a: e, b: f }: object{ a: uint64, b: uint64 } = ({ a: c, b: d } = { a: 4, b: 1 })
}
subroutine testNumericResolution(): void
{
  x: object{ a: uint64 } = (y = { a: (#17 = { a: 434 }).a })
}
subroutine test2(args: object{ x: bool, y: bool, z: readonlytuple[string, string] }): void
{
  { a: a, b: b, args: { x: x, y: y, z: _₁ } }: object{ a: bool, b: bool, args: object{ x: bool, y: bool, z: readonlytuple[string, string] } } = { a: True, b: False, args: args }
  args2: object{ x: bool, y: bool, z: readonlytuple[string, string] } = { x: True, y: True, z: args.z }
}