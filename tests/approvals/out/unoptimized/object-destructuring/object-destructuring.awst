subroutine testPartialDestructure(arg: object{ x: uint64, y: uint64, z: biguint }): void
{
  (x = arg.x), arg
  (y = (#0 = (#1 = { nested: (#2 = { nested: { y: arg.y, x: arg.x, z: arg.z } }).nested }).nested).y), #0, #1
}
subroutine testPartialDestructureMutableObject(arg: Coordinate): void
{
  (x = (#3 = arg.v).x), #3, arg
  (y = (#4 = (#5 = (#6 = { nested: copy(arg) }).nested).v).y), #4, #5, #6
}
subroutine test(): void
{
  (a = (#7 = { a: (#8 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, b: #8.b, c: #8.c, d: #8.d }).a), (b = #7.b), (c = #7.c), (d = #7.d), #7
  (e = (#9 = { d: (#10 = tests/approvals/object-destructuring.algo.ts::produceItems()).d, a: #10.a, b: #10.b, c: #10.c }).d), #9
  f: object{ a: uint64, b: bytes, c: bool, d: biguint } = { a: (#11 = (g = (#12 = { a: (#13 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, d: #13.d, b: #13.b, c: #13.c }).a), (i = #12.d), #12).a, b: #11.b, c: #11.c, d: #11.d }
  tests/approvals/object-destructuring.algo.ts::receivePartial({ a: (#14 = tests/approvals/object-destructuring.algo.ts::produceItems()).a, d: #14.d })
}
subroutine testMutableObject(): void
{
  (x = (#15 = (#16 = tests/approvals/object-destructuring.algo.ts::produceCoordinates()).v).x), (y = #15.y), #15, (z = #16.z), #16
  (b = (#17 = (#18 = tests/approvals/object-destructuring.algo.ts::produceCoordinates()).v).y), #17, #18
  f: Coordinate = (g = (#19 = (#20 = tests/approvals/object-destructuring.algo.ts::produceCoordinates()).v).x), #19, (i = #20.z), #20
  tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject({ v: ARC4_DECODE((#21 = ARC4_DECODE(tests/approvals/object-destructuring.algo.ts::produceCoordinates())).v) })
}
subroutine produceItems(): produceItemsResult{ a: uint64, b: bytes, c: bool, d: biguint }
{
  return { a: (#22 = { a: 1, b: "", c: False, d: 999 }).a, b: #22.b, c: #22.c, d: #22.d }
}
subroutine produceCoordinates(): Coordinate
{
  return new Coordinate(v=(#23 = { v: (#24 = { v: new Vector(x=(#25 = { x: (#26 = { x: 1, y: 2 }).x, y: #26.y }).x, y=#25.y), z: 3 }).v, z: #24.z }).v, z=#23.z)
}
subroutine receivePartial(x: object{ a: uint64, d: biguint }): void
{
}
subroutine receivePartialMutableObject(a: object{ v: object{ x: uint64, y: uint64 } }): void
{
}
subroutine testLiteralToLiteral(): void
{
  (e = (#27 = (c = (#28 = { a: 4, b: 1 }).a), (d = #28.b), #28).a), (f = #27.b), #27
}
subroutine testNumericResolution(): void
{
  x: object{ a: uint64 } = (y = { a: (#29 = { a: 434 }).a })
}
subroutine test2(args: object{ x: bool, y: bool, z: readonly [string, string] }): void
{
  (a = (#30 = { a: True, b: False, args: args }).a), (b = #30.b), (x = (#31 = #30.args).x), (y = #31.y), #31, #30
  args2: object{ x: bool, y: bool, z: readonly [string, string] } = { x: True, y: True, z: args.z }
}