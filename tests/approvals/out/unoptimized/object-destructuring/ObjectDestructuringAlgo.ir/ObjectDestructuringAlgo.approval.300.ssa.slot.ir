main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L96
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L96
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@4}
    block@3: // test_route_L97
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test()
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L96
        goto block@5
    block@5: // switch_case_next_L96
        goto block@10
    block@6: // bare_routing_L96
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L96
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate()
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L96
        goto block@9
    block@9: // switch_case_next_L96
        goto block@10
    block@10: // after_if_else_L96
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/object-destructuring.algo.ts::testPartialDestructure(arg.x: uint64, arg.y: uint64, arg.z: biguint) -> <uint64, uint64>:
    block@0: // L7
        let x#0: uint64 = arg.x#0
        let y#0: uint64 = arg.y#0
        return x#0 y#0

subroutine tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(arg: Encoded((uint64,uint64),(uint64,uint64))) -> <uint64, uint64, Encoded((uint64,uint64),(uint64,uint64))>:
    block@0: // L15
        let aggregate%extract%0#0: bytes = (extract3 arg#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#0
        let values%0#0: Encoded(uint64,uint64) = tuple_item%0#0
        let aggregate%extract%1#0: bytes = (extract3 values%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let x#0: uint64 = values%1#0
        let aggregate%extract%2#0: bytes = (extract3 arg#0 0u 16u)
        let tuple_item%2#0: Encoded(uint64,uint64) = aggregate%extract%2#0
        let values%2#0: Encoded(uint64,uint64) = tuple_item%2#0
        let aggregate%extract%3#0: bytes = (extract3 values%2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let y#0: uint64 = values%3#0
        return x#0 y#0 arg#0

subroutine tests/approvals/object-destructuring.algo.ts::test() -> void:
    block@0: // L27
        let awst_tmp%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let awst_tmp%1#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let awst_tmp%2#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let awst_tmp%3#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let aggregate%extract%5#0: bytes = (extract3 awst_tmp%3#0 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = aggregate%extract%5#0
        let values%7#0: uint64 = (btoi tuple_item%7#0)
        let aggregate%extract%6#0: bytes = (extract3 awst_tmp%3#0 11u 64u)
        let tuple_item%8#0: Encoded(uint512) = aggregate%extract%6#0
        let values%8#0: biguint = tuple_item%8#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%7#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%value_len%0#0: uint64 = (len values%8#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| values%8#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%as_Encoded(uint64,uint512)%0#0: Encoded(uint64,uint512) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint512) = aggregate%as_Encoded(uint64,uint512)%0#0
        let receivePartial%0#0: Encoded(uint64,uint512) = tests/approvals/object-destructuring.algo.ts::receivePartial(tmp%0#0)
        return 

subroutine tests/approvals/object-destructuring.algo.ts::testMutableObject() -> void:
    block@0: // L35
        let awst_tmp%0#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let awst_tmp%1#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let awst_tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let awst_tmp%3#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let aggregate%extract%10#0: bytes = (extract3 awst_tmp%3#0 0u 16u)
        let tuple_item%10#0: Encoded(uint64,uint64) = aggregate%extract%10#0
        let values%10#0: Encoded(uint64,uint64) = tuple_item%10#0
        let aggregate%extract%11#0: bytes = (extract3 values%10#0 0u 8u)
        let tuple_item%11#0: Encoded(uint64) = aggregate%extract%11#0
        let values%11#0: uint64 = (btoi tuple_item%11#0)
        let aggregate%extract%12#0: bytes = (extract3 values%10#0 8u 8u)
        let tuple_item%12#0: Encoded(uint64) = aggregate%extract%12#0
        let values%12#0: uint64 = (btoi tuple_item%12#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%11#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%12#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%head%2#0: bytes = (concat 0x tmp%0#0)
        let aggregate%as_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = aggregate%head%2#0
        let tmp%1#0: Encoded((uint64,uint64)) = aggregate%as_Encoded((uint64,uint64))%0#0
        let receivePartialMutableObject%0#0: Encoded((uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(tmp%1#0)
        return 

subroutine tests/approvals/object-destructuring.algo.ts::produceItems() -> Encoded(uint64,(len+uint8[]),bool1,uint512):
    block@0: // L51
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 75u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let aggregate%value_len%0#0: uint64 = (len 999b)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| 999b aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),bool1,uint512)%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = aggregate%concat%0#0
        let tmp%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = aggregate%as_Encoded(uint64,(len+uint8[]),bool1,uint512)%0#0
        return tmp%0#0

subroutine tests/approvals/object-destructuring.algo.ts::produceVector() -> Encoded((uint64,uint64),(uint64,uint64)):
    block@0: // L60
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%head%4#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%1#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%5#0
        let tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0
        return tmp%2#0

subroutine tests/approvals/object-destructuring.algo.ts::receivePartial(x: Encoded(uint64,uint512)) -> Encoded(uint64,uint512):
    block@0: // L64
        let x%out#0: Encoded(uint64,uint512) = x#0
        return x%out#0

subroutine tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(a: Encoded((uint64,uint64))) -> Encoded((uint64,uint64)):
    block@0: // L66
        let a%out#0: Encoded((uint64,uint64)) = a#0
        return a%out#0

subroutine tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral() -> Encoded(len+uint64[]):
    block@0: // L68
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let awst_tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let f#0: uint64 = values%0#0
        let e#0: uint64 = values%1#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob e#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob f#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%5#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/object-destructuring.algo.ts::testNumericResolution() -> void:
    block@0: // L78
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 434u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%head%0#0
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let y#0: Encoded(uint64) = tmp%0#0
        let x#0: Encoded(uint64) = y#0
        let tmp%1#0: bool = (== 2u 2u)
        let aggregate%extract%0#0: bytes = (extract3 x#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%2#0: bool = (== values%0#0 434u)
        let tmp%3#0: bool = (&& tmp%1#0 tmp%2#0)
        let aggregate%extract%1#0: bytes = (extract3 y#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%4#0: bool = (== values%1#0 434u)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        return 

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test() -> void:
    block@0: // L97
        let (tmp%0#0: uint64, tmp%1#0: uint64) = tests/approvals/object-destructuring.algo.ts::testPartialDestructure(1u, 4u, 123b)
        let res.0#0: uint64 = tmp%0#0
        let res.1#0: uint64 = tmp%1#0
        let tmp%2#0: bool = (== 2u 2u)
        let tmp%3#0: bool = (== res.0#0 1u)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (== res.1#0 4u)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%6#0) // assert target is match for conditions
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%7#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 30u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%8#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%head%4#0: bytes = (concat 0x tmp%7#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%8#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%5#0
        let tmp%9#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0
        let (testPartialDestructureMutableObject%0#0: uint64, testPartialDestructureMutableObject%1#0: uint64, testPartialDestructureMutableObject%2#0: Encoded((uint64,uint64),(uint64,uint64))) = tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(tmp%9#0)
        let res2.0#0: uint64 = testPartialDestructureMutableObject%0#0
        let res2.1#0: uint64 = testPartialDestructureMutableObject%1#0
        let tmp%10#0: bool = (== 2u 2u)
        let tmp%11#0: bool = (== res2.0#0 10u)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let tmp%13#0: bool = (== res2.1#0 20u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // assert target is match for conditions
        tests/approvals/object-destructuring.algo.ts::testNumericResolution()
        let tmp%15#0: Encoded(len+uint64[]) = tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral()
        let res3#0: Encoded(len+uint64[]) = tmp%15#0
        let array_length%0#0: uint64 = (extract_uint16 res3#0 0u)
        let tmp%16#0: bool = (== array_length%0#0 4u)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%17#0: bool = (== values%0#0 4u)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        let aggregate%array_trimmed%1#0: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%19#0: bool = (== values%1#0 1u)
        let tmp%20#0: bool = (&& tmp%18#0 tmp%19#0)
        let aggregate%array_trimmed%2#0: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%21#0: bool = (== values%2#0 4u)
        let tmp%22#0: bool = (&& tmp%20#0 tmp%21#0)
        let aggregate%array_trimmed%3#0: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%23#0: bool = (== values%3#0 1u)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        (assert tmp%24#0) // assert target is match for conditions
        tests/approvals/object-destructuring.algo.ts::test()
        tests/approvals/object-destructuring.algo.ts::testMutableObject()
        return 

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L96
        return 