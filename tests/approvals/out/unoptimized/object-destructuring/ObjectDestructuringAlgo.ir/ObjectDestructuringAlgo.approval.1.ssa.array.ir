main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L96
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L96
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@4}
    block@3: // test_route_L97
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test()
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L96
        goto block@5
    block@5: // switch_case_next_L96
        goto block@10
    block@6: // bare_routing_L96
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L96
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate()
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L96
        goto block@9
    block@9: // switch_case_next_L96
        goto block@10
    block@10: // after_if_else_L96
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/object-destructuring.algo.ts::testPartialDestructure(arg.x: uint64, arg.y: uint64, arg.z: biguint) -> <uint64, uint64>:
    block@0: // L7
        let x#0: uint64 = arg.x#0
        let y#0: uint64 = arg.y#0
        return x#0 y#0

subroutine tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(arg: Encoded((uint64,uint64),(uint64,uint64))) -> <uint64, uint64, Encoded((uint64,uint64),(uint64,uint64))>:
    block@0: // L15
        let array%extract%0#1: bytes = (extract3 arg#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = array%extract%0#1
        let array%extract%1#1: bytes = (extract3 tuple_item%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%1#1
        let values%0#0: uint64 = (btoi tuple_item%1#0)
        let x#0: uint64 = values%0#0
        let copy%0#0: Encoded((uint64,uint64),(uint64,uint64)) = arg#0
        let array%extract%2#1: bytes = (extract3 copy%0#0 0u 16u)
        let tuple_item%2#0: Encoded(uint64,uint64) = array%extract%2#1
        let array%extract%3#1: bytes = (extract3 tuple_item%2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = array%extract%3#1
        let values%1#0: uint64 = (btoi tuple_item%3#0)
        let y#0: uint64 = values%1#0
        return x#0 y#0 arg#0

subroutine tests/approvals/object-destructuring.algo.ts::test() -> void:
    block@0: // L27
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: bytes, awst_tmp%2#0: bool, awst_tmp%3#0: biguint) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let (awst_tmp%4#0: uint64, awst_tmp%5#0: bytes, awst_tmp%6#0: bool, awst_tmp%7#0: biguint) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let (awst_tmp%8#0: uint64, awst_tmp%9#0: bytes, awst_tmp%10#0: bool, awst_tmp%11#0: biguint) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let (awst_tmp%12#0: uint64, awst_tmp%13#0: bytes, awst_tmp%14#0: bool, awst_tmp%15#0: biguint) = tests/approvals/object-destructuring.algo.ts::produceItems()
        tests/approvals/object-destructuring.algo.ts::receivePartial(awst_tmp%12#0, awst_tmp%15#0)
        return 

subroutine tests/approvals/object-destructuring.algo.ts::testMutableObject() -> void:
    block@0: // L35
        let awst_tmp%0#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let array%extract%0#1: bytes = (extract3 awst_tmp%0#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = array%extract%0#1
        let array%extract%1#1: bytes = (extract3 tuple_item%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%1#1
        let values%0#0: uint64 = (btoi tuple_item%1#0)
        let array%extract%2#1: bytes = (extract3 tuple_item%0#0 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = array%extract%2#1
        let values%1#0: uint64 = (btoi tuple_item%2#0)
        let array%extract%3#1: bytes = (extract3 awst_tmp%0#0 16u 16u)
        let tuple_item%3#0: Encoded(uint64,uint64) = array%extract%3#1
        let awst_tmp%1#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let array%extract%4#1: bytes = (extract3 awst_tmp%1#0 0u 16u)
        let tuple_item%4#0: Encoded(uint64,uint64) = array%extract%4#1
        let array%extract%5#1: bytes = (extract3 tuple_item%4#0 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = array%extract%5#1
        let values%2#0: uint64 = (btoi tuple_item%5#0)
        let awst_tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let array%extract%6#1: bytes = (extract3 awst_tmp%2#0 0u 16u)
        let tuple_item%6#0: Encoded(uint64,uint64) = array%extract%6#1
        let array%extract%7#1: bytes = (extract3 tuple_item%6#0 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = array%extract%7#1
        let values%3#0: uint64 = (btoi tuple_item%7#0)
        let array%extract%8#1: bytes = (extract3 awst_tmp%2#0 16u 16u)
        let tuple_item%8#0: Encoded(uint64,uint64) = array%extract%8#1
        let tmp%0#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let array%extract%9#1: bytes = (extract3 tmp%0#0 0u 16u)
        let array%extract%10#1: bytes = (extract3 tmp%0#0 16u 16u)
        let (awst_tmp%3#0: Encoded(uint64,uint64), awst_tmp%4#0: Encoded(uint64,uint64)) = (array%extract%9#1, array%extract%10#1)
        let array%extract%11#1: bytes = (extract3 awst_tmp%3#0 0u 8u)
        let array%item0%0#1: uint64 = (btoi array%extract%11#1)
        let array%extract%12#1: bytes = (extract3 awst_tmp%3#0 8u 8u)
        let array%item1%0#1: uint64 = (btoi array%extract%12#1)
        let (tmp%1#0: uint64, tmp%2#0: uint64) = (array%item0%0#1, array%item1%0#1)
        tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(tmp%1#0, tmp%2#0)
        return 

subroutine tests/approvals/object-destructuring.algo.ts::produceItems() -> <uint64, bytes, bool, biguint>:
    block@0: // L51
        return 1u "" 0u 999b

subroutine tests/approvals/object-destructuring.algo.ts::produceVector() -> Encoded((uint64,uint64),(uint64,uint64)):
    block@0: // L60
        let array%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let tmp%0#0: Encoded(uint64,uint64) = array%encoded%2#1
        let array%val_as_bytes%2#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 array%as_Encoded(uint64)%3#1)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let tmp%1#0: Encoded(uint64,uint64) = array%encoded%5#1
        let array%encoded%6#1: Encoded((uint64,uint64)) = (concat 0x tmp%0#0)
        let array%encoded%7#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%6#1 tmp%1#0)
        let array%encoded%8#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%7#1 0x)
        let tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%8#1
        return tmp%2#0

subroutine tests/approvals/object-destructuring.algo.ts::receivePartial(x.a: uint64, x.d: biguint) -> void:
    block@0: // L64
        return 

subroutine tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(a.c1.x: uint64, a.c1.y: uint64) -> void:
    block@0: // L66
        return 

subroutine tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral() -> Encoded(len+uint64[]):
    block@0: // L68
        let array%val_as_bytes%0#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%val_as_bytes%2#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat array%encoded%1#1 array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%3#1: Encoded(uint64,uint64,uint64,uint64) = (concat array%encoded%2#1 array%as_Encoded(uint64)%3#1)
        let array%as_bytes%0#1: bytes[8] = (itob 4u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%4#1: bytes = (concat array%len_u16%0#1 array%encoded%3#1)
        let array%encoded%5#1: Encoded(len+uint64[]) = (concat array%encoded%4#1 0x)
        let encoded_array%0#0: Encoded(len+uint64[]) = array%encoded%5#1
        return encoded_array%0#0

subroutine tests/approvals/object-destructuring.algo.ts::testNumericResolution() -> void:
    block@0: // L78
        let tmp%0#0: bool = (== 2u 2u)
        goto tmp%0#0 ? block@1 : block@4
    block@1: // and_contd_L81
        let tmp%1#0: bool = (== 434u 434u)
        goto tmp%1#0 ? block@2 : block@4
    block@2: // and_contd_L81
        let tmp%2#0: bool = (== 434u 434u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // bool_true_L81
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L81
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L81
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test() -> void:
    block@0: // L97
        let (tmp%0#0: uint64, tmp%1#0: uint64) = tests/approvals/object-destructuring.algo.ts::testPartialDestructure(1u, 4u, 123b)
        let res.0#0: uint64 = tmp%0#0
        let res.1#0: uint64 = tmp%1#0
        let tmp%2#0: bool = (== 2u 2u)
        goto tmp%2#0 ? block@1 : block@4
    block@1: // and_contd_L99
        let tmp%3#0: bool = (== res.0#0 1u)
        goto tmp%3#0 ? block@2 : block@4
    block@2: // and_contd_L99
        let tmp%4#0: bool = (== res.1#0 4u)
        goto tmp%4#0 ? block@3 : block@4
    block@3: // bool_true_L99
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L99
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L99
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        let array%val_as_bytes%0#1: bytes[8] = (itob 10u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 20u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let tmp%5#0: Encoded(uint64,uint64) = array%encoded%2#1
        let array%val_as_bytes%2#1: bytes[8] = (itob 20u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 30u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 array%as_Encoded(uint64)%3#1)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let tmp%6#0: Encoded(uint64,uint64) = array%encoded%5#1
        let array%encoded%6#1: Encoded((uint64,uint64)) = (concat 0x tmp%5#0)
        let array%encoded%7#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%6#1 tmp%6#0)
        let array%encoded%8#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%7#1 0x)
        let tmp%7#0: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%8#1
        let (testPartialDestructureMutableObject%0#0: uint64, testPartialDestructureMutableObject%1#0: uint64, testPartialDestructureMutableObject%2#0: Encoded((uint64,uint64),(uint64,uint64))) = tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(tmp%7#0)
        let res2.0#0: uint64 = testPartialDestructureMutableObject%0#0
        let res2.1#0: uint64 = testPartialDestructureMutableObject%1#0
        let tmp%8#0: bool = (== 2u 2u)
        goto tmp%8#0 ? block@6 : block@9
    block@6: // and_contd_L104
        let tmp%9#0: bool = (== res2.0#0 10u)
        goto tmp%9#0 ? block@7 : block@9
    block@7: // and_contd_L104
        let tmp%10#0: bool = (== res2.1#0 20u)
        goto tmp%10#0 ? block@8 : block@9
    block@8: // bool_true_L104
        let and_result%1#0: bool = 1u
        goto block@10
    block@9: // bool_false_L104
        let and_result%1#1: bool = 0u
        goto block@10
    block@10: // bool_merge_L104
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@8, and_result%1#1 <- block@9)
        (assert and_result%1#2) // assert target is match for conditions
        tests/approvals/object-destructuring.algo.ts::testNumericResolution()
        let tmp%11#0: Encoded(len+uint64[]) = tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral()
        let res3#0: Encoded(len+uint64[]) = tmp%11#0
        let array_length%0#0: uint64 = (extract_uint16 res3#0 0u)
        let tmp%12#0: bool = (== array_length%0#0 4u)
        goto tmp%12#0 ? block@11 : block@16
    block@11: // and_contd_L109
        let array%array_trimmed%0#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%0#1: uint64 = (* 0u 8u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = array%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%13#0: bool = (== values%0#0 4u)
        goto tmp%13#0 ? block@12 : block@16
    block@12: // and_contd_L109
        let array%array_trimmed%1#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%1#1: uint64 = (* 1u 8u)
        let array%encoded_element%1#1: bytes = (extract3 array%array_trimmed%1#1 array%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = array%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%14#0: bool = (== values%1#0 1u)
        goto tmp%14#0 ? block@13 : block@16
    block@13: // and_contd_L109
        let array%array_trimmed%2#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%2#1: uint64 = (* 2u 8u)
        let array%encoded_element%2#1: bytes = (extract3 array%array_trimmed%2#1 array%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = array%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%15#0: bool = (== values%2#0 4u)
        goto tmp%15#0 ? block@14 : block@16
    block@14: // and_contd_L109
        let array%array_trimmed%3#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%3#1: uint64 = (* 3u 8u)
        let array%encoded_element%3#1: bytes = (extract3 array%array_trimmed%3#1 array%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = array%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%16#0: bool = (== values%3#0 1u)
        goto tmp%16#0 ? block@15 : block@16
    block@15: // bool_true_L109
        let and_result%2#0: bool = 1u
        goto block@17
    block@16: // bool_false_L109
        let and_result%2#1: bool = 0u
        goto block@17
    block@17: // bool_merge_L109
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@15, and_result%2#1 <- block@16)
        (assert and_result%2#2) // assert target is match for conditions
        tests/approvals/object-destructuring.algo.ts::test()
        tests/approvals/object-destructuring.algo.ts::testMutableObject()
        return 

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L96
        return 