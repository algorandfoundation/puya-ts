subroutine test(a: uint64, b: biguint, c: string): void
{
  assert(len(0x) == 0, comment=Empty bytes has length of 0)
  assert(checked_maybe(<tuple>[reinterpret_cast<bytes[8]>((#0 = itob(a))), len(#0) == 8], comment=Length must be 8) == itob(a), comment=Bytes(uint64) is equivalent to itob)
  assert(0x0000000000000001 == 0x0000000000000001, comment=Bytes(uint64) returns an 8 byte encoding)
  assert(reinterpret_cast<bytes>(256) == 0x0100)
  assert(reinterpret_cast<biguint>(reinterpret_cast<bytes>(b)) == b, comment=Round trip of biguint to bytes and back results in the same value)
  assert(reinterpret_cast<string>(reinterpret_cast<bytes>(c)) == c)
  assert("123" == "123")
  assert(0x01020304 == 0x01020304)
}
subroutine test2(a: bytes[8], b: bytes[8]): void
{
  assert(btoi(reinterpret_cast<bytes>(a)) == 5, comment=a must be bytes for 5)
  assert(btoi(reinterpret_cast<bytes>(b)) == 12, comment=b must be bytes for 12)
  assert(btoi(reinterpret_cast<bytes>(a & b)) == 4, comment=a & b is 4)
  assert(btoi(reinterpret_cast<bytes>(a | b)) == 13, comment=a | b is 13)
  assert(btoi(reinterpret_cast<bytes>(a ^ b)) == 9, comment=a ^ b is 9)
  assert(btoi(reinterpret_cast<bytes>(~a)) == 18446744073709551610, comment=!a is MAX_VALUE - 5)
  assert(btoi(reinterpret_cast<bytes>(~b)) == 18446744073709551603, comment=!b is MAX_VALUE - 12)
  assert(a.slice(0, 4) == b.slice(0, 4), comment=first four bytes should match)
  assert(concat(reinterpret_cast<bytes>(a), reinterpret_cast<bytes>(b)) == 0x0000000000000005000000000000000c)
}
contract DemoContract
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  test(): bool
  {
    tests/approvals/byte-expressions.algo.ts::test(1, 50, "things")
    tests/approvals/byte-expressions.algo.ts::test2(itob(5), itob(12))
    return True
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}