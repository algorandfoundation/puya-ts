main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L15
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()bool" => block@3, * => block@4}
    block@3: // test_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let to_encode%0#0: bool = tests/approvals/byte-expressions.algo.ts::DemoContract.test()
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%7#0)
        let tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L15
        goto block@5
    block@5: // switch_case_next_L15
        goto block@10
    block@6: // bare_routing_L15
        let tmp%8#0: uint64 = (txn OnCompletion)
        switch tmp%8#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L15
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        (assert tmp%10#0) // can only call when creating
        tests/approvals/byte-expressions.algo.ts::DemoContract.__algots__.defaultCreate()
        let tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L15
        goto block@9
    block@9: // switch_case_next_L15
        goto block@10
    block@10: // after_if_else_L15
        let tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/byte-expressions.algo.ts::test(a: uint64, b: biguint, c: bytes) -> void:
    block@0: // L4
        let tmp%0#0: uint64 = (len 0x)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // Empty bytes has length of 0
        let tmp%2#0: bytes = (itob a#0)
        let tmp%3#0: bytes = (itob a#0)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // Bytes(uint64) is equivalent to itob
        let tmp%5#0: bool = (== 0x0000000000000001 0x0000000000000001)
        (assert tmp%5#0) // Bytes(uint64) returns an 8 byte encoding
        let tmp%6#0: bool = (== 256b 0x0100)
        (assert tmp%6#0)
        let reinterpret_bytes%1#0: bytes = b#0
        let reinterpret_biguint%0#0: biguint = reinterpret_bytes%1#0
        let tmp%7#0: bool = (b== reinterpret_biguint%0#0 b#0)
        (assert tmp%7#0) // Round trip of biguint to bytes and back results in the same value
        let tmp%8#0: bool = (== c#0 c#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = (== "123" "123")
        (assert tmp%9#0)
        let tmp%10#0: bool = (== 0x01020304 0x01020304)
        (assert tmp%10#0)
        return 

subroutine tests/approvals/byte-expressions.algo.ts::DemoContract.test() -> bool:
    block@0: // L16
        tests/approvals/byte-expressions.algo.ts::test(1u, 50b, "things")
        return 1u

subroutine tests/approvals/byte-expressions.algo.ts::DemoContract.__algots__.defaultCreate() -> void:
    block@0: // L15
        return 