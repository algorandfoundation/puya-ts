#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 4 1 5

main_block@0:

main_block@1:
    // tests/approvals/byte-expressions.algo.ts:32
    // class DemoContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/byte-expressions.algo.ts:32
    // class DemoContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xf59e3cc4 // method "test()bool"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/byte-expressions.algo.ts:32
    // class DemoContract extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/byte-expressions.algo.ts:33
    // public test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub tests/approvals/byte-expressions.algo.ts::DemoContract.test
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/byte-expressions.algo.ts:32
    // class DemoContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/byte-expressions.algo.ts:32
    // class DemoContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11


// tests/approvals/byte-expressions.algo.ts::test(a: uint64, b: bytes, c: bytes) -> void:
test:
    // tests/approvals/byte-expressions.algo.ts:5
    // function test(a: uint64, b: biguint, c: string) {
    proto 3 0

test_block@0:
    // tests/approvals/byte-expressions.algo.ts:6
    // assert(Bytes().length === 0, 'Empty bytes has length of 0')
    pushbytes 0x
    len
    intc_0 // 0
    ==
    assert // Empty bytes has length of 0
    // tests/approvals/byte-expressions.algo.ts:7
    // assert(Bytes(a) === op.itob(a), 'Bytes(uint64) is equivalent to itob')
    frame_dig -3
    itob
    dup
    len
    pushint 8 // 8
    ==
    assert // Length must be 8
    frame_dig -3
    itob
    ==
    assert // Bytes(uint64) is equivalent to itob
    // tests/approvals/byte-expressions.algo.ts:8
    // assert(Bytes(Uint64(1)) === Bytes.fromHex('0000000000000001'), 'Bytes(uint64) returns an 8 byte encoding')
    pushbytes 0x0000000000000001
    dup
    ==
    assert // Bytes(uint64) returns an 8 byte encoding
    // tests/approvals/byte-expressions.algo.ts:9
    // assert(Bytes(BigUint(256)) === Bytes.fromHex('0100'))
    pushbytes 0x0100
    dup
    ==
    assert
    // tests/approvals/byte-expressions.algo.ts:10
    // assert(BigUint(Bytes(b)) === b, 'Round trip of biguint to bytes and back results in the same value')
    frame_dig -2
    dup
    b==
    assert // Round trip of biguint to bytes and back results in the same value
    // tests/approvals/byte-expressions.algo.ts:11
    // assert(String(Bytes(c)) === c)
    frame_dig -1
    dup
    ==
    assert
    // tests/approvals/byte-expressions.algo.ts:12
    // assert(Bytes(Bytes('123')) === Bytes('123'))
    pushbytes "123"
    dup
    ==
    assert
    // tests/approvals/byte-expressions.algo.ts:13
    // assert(Bytes([1, 2, 3, 4]) === Bytes.fromHex('01020304'))
    pushbytes 0x01020304
    dup
    ==
    assert
    retsub


// tests/approvals/byte-expressions.algo.ts::test2(a: bytes, b: bytes) -> void:
test2:
    // tests/approvals/byte-expressions.algo.ts:16
    // function test2(a: bytes<8>, b: bytes<8>) {
    proto 2 0

test2_block@0:
    // tests/approvals/byte-expressions.algo.ts:17
    // assert(btoi(a) === 5, 'a must be bytes for 5')
    frame_dig -2
    btoi
    intc_3 // 5
    ==
    assert // a must be bytes for 5
    // tests/approvals/byte-expressions.algo.ts:18
    // assert(btoi(b) === 12, 'b must be bytes for 12')
    frame_dig -1
    btoi
    pushint 12 // 12
    ==
    assert // b must be bytes for 12
    // tests/approvals/byte-expressions.algo.ts:20
    // assert(btoi(a.bitwiseAnd(b)) === 4, 'a & b is 4')
    frame_dig -2
    frame_dig -1
    b&
    btoi
    intc_1 // 4
    ==
    assert // a & b is 4
    // tests/approvals/byte-expressions.algo.ts:21
    // assert(btoi(a.bitwiseOr(b)) === 13, 'a | b is 13')
    frame_dig -2
    frame_dig -1
    b|
    btoi
    pushint 13 // 13
    ==
    assert // a | b is 13
    // tests/approvals/byte-expressions.algo.ts:22
    // assert(btoi(a.bitwiseXor(b)) === 9, 'a ^ b is 9')
    frame_dig -2
    frame_dig -1
    b^
    btoi
    pushint 9 // 9
    ==
    assert // a ^ b is 9
    // tests/approvals/byte-expressions.algo.ts:24
    // assert(btoi(a.bitwiseInvert()) === Uint64.MAX_VALUE - 5, '!a is MAX_VALUE - 5')
    frame_dig -2
    b~
    btoi
    pushint 18446744073709551610 // 18446744073709551610
    ==
    assert // !a is MAX_VALUE - 5
    // tests/approvals/byte-expressions.algo.ts:25
    // assert(btoi(b.bitwiseInvert()) === Uint64.MAX_VALUE - 12, '!b is MAX_VALUE - 12')
    frame_dig -1
    b~
    btoi
    pushint 18446744073709551603 // 18446744073709551603
    ==
    assert // !b is MAX_VALUE - 12
    // tests/approvals/byte-expressions.algo.ts:27
    // assert(a.slice(0, 4) === b.slice(0, 4), 'first four bytes should match')
    frame_dig -2
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    swap
    intc_1 // 4
    dig 1
    >=
    intc_1 // 4
    uncover 2
    uncover 2
    select
    frame_dig -2
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    swap
    intc_1 // 4
    dig 1
    >=
    intc_1 // 4
    uncover 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    ==
    assert // first four bytes should match
    // tests/approvals/byte-expressions.algo.ts:29
    // assert(a.concat(b) === Bytes.fromHex('0000000000000005000000000000000C'))
    frame_dig -2
    frame_dig -1
    concat
    pushbytes 0x0000000000000005000000000000000c
    ==
    assert
    retsub


// tests/approvals/byte-expressions.algo.ts::DemoContract.test() -> uint64:
tests/approvals/byte-expressions.algo.ts::DemoContract.test:

tests/approvals/byte-expressions.algo.ts::DemoContract.test_block@0:
    // tests/approvals/byte-expressions.algo.ts:34
    // test(1, 50n, 'things')
    intc_2 // 1
    pushbytes 0x32
    pushbytes "things"
    callsub test
    // tests/approvals/byte-expressions.algo.ts:35
    // test2(itob(5), itob(12))
    intc_3 // 5
    itob
    pushint 12 // 12
    itob
    callsub test2
    // tests/approvals/byte-expressions.algo.ts:36
    // return true
    intc_2 // 1
    retsub


// tests/approvals/byte-expressions.algo.ts::DemoContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
