#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1

main_block@1:
    // tests/approvals/byte-expressions.algo.ts:15
    // class DemoContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/byte-expressions.algo.ts:15
    // class DemoContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xf59e3cc4 // method "test()bool"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/byte-expressions.algo.ts:15
    // class DemoContract extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/byte-expressions.algo.ts:16
    // public test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/byte-expressions.algo.ts:15
    // class DemoContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/byte-expressions.algo.ts:15
    // class DemoContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11


// tests/approvals/byte-expressions.algo.ts::DemoContract.test() -> uint64:
test:
    // tests/approvals/byte-expressions.algo.ts:16
    // public test() {
    proto 0 1
    // tests/approvals/byte-expressions.algo.ts:17
    // test(1, 50n, 'things')
    intc_1 // 1
    pushbytes 0x32
    pushbytes "things"
    callsub tests/approvals/byte-expressions.algo.ts::test
    // tests/approvals/byte-expressions.algo.ts:18
    // return true
    intc_1 // 1
    retsub


// tests/approvals/byte-expressions.algo.ts::test(a: uint64, b: bytes, c: bytes) -> void:
tests/approvals/byte-expressions.algo.ts::test:
    // tests/approvals/byte-expressions.algo.ts:4
    // function test(a: uint64, b: biguint, c: string) {
    proto 3 0
    // tests/approvals/byte-expressions.algo.ts:5
    // assert(Bytes().length === 0, 'Empty bytes has length of 0')
    pushbytes 0x
    len
    intc_0 // 0
    ==
    assert // Empty bytes has length of 0
    // tests/approvals/byte-expressions.algo.ts:6
    // assert(Bytes(a) === op.itob(a), 'Bytes(uint64) is equivalent to itob')
    frame_dig -3
    itob
    frame_dig -3
    itob
    ==
    assert // Bytes(uint64) is equivalent to itob
    // tests/approvals/byte-expressions.algo.ts:7
    // assert(Bytes(Uint64(1)) === Bytes.fromHex('0000000000000001'), 'Bytes(uint64) returns an 8 byte encoding')
    pushbytes 0x0000000000000001
    dup
    ==
    assert // Bytes(uint64) returns an 8 byte encoding
    // tests/approvals/byte-expressions.algo.ts:8
    // assert(Bytes(BigUint(256)) === Bytes.fromHex('0100'))
    pushbytes 0x0100
    dup
    ==
    assert
    // tests/approvals/byte-expressions.algo.ts:9
    // assert(BigUint(Bytes(b)) === b, 'Round trip of biguint to bytes and back results in the same value')
    frame_dig -2
    dup
    b==
    assert // Round trip of biguint to bytes and back results in the same value
    // tests/approvals/byte-expressions.algo.ts:10
    // assert(String(Bytes(c)) === c)
    frame_dig -1
    dup
    ==
    assert
    // tests/approvals/byte-expressions.algo.ts:11
    // assert(Bytes(Bytes('123')) === Bytes('123'))
    pushbytes "123"
    dup
    ==
    assert
    // tests/approvals/byte-expressions.algo.ts:12
    // assert(Bytes([1, 2, 3, 4]) === Bytes.fromHex('01020304'))
    pushbytes 0x01020304
    dup
    ==
    assert
    retsub


// tests/approvals/byte-expressions.algo.ts::DemoContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    // tests/approvals/byte-expressions.algo.ts:15
    // class DemoContract extends Contract {
    proto 0 0
    retsub
