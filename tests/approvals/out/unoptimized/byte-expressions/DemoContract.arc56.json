{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        212
                    ],
                    "errorMessage": "!a is MAX_VALUE - 5"
                },
                {
                    "pc": [
                        229
                    ],
                    "errorMessage": "!b is MAX_VALUE - 12"
                },
                {
                    "pc": [
                        118
                    ],
                    "errorMessage": "Bytes(uint64) is equivalent to itob"
                },
                {
                    "pc": [
                        122
                    ],
                    "errorMessage": "Bytes(uint64) returns an 8 byte encoding"
                },
                {
                    "pc": [
                        110
                    ],
                    "errorMessage": "Empty bytes has length of 0"
                },
                {
                    "pc": [
                        93
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        77
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        132
                    ],
                    "errorMessage": "Round trip of biguint to bytes and back results in the same value"
                },
                {
                    "pc": [
                        175
                    ],
                    "errorMessage": "a & b is 4"
                },
                {
                    "pc": [
                        195
                    ],
                    "errorMessage": "a ^ b is 9"
                },
                {
                    "pc": [
                        159
                    ],
                    "errorMessage": "a must be bytes for 5"
                },
                {
                    "pc": [
                        185
                    ],
                    "errorMessage": "a | b is 13"
                },
                {
                    "pc": [
                        166
                    ],
                    "errorMessage": "b must be bytes for 12"
                },
                {
                    "pc": [
                        295
                    ],
                    "errorMessage": "first four bytes should match"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAEAAQBBSYECAAAAAAAAAABAgEAAzEyMwQBAgMEQgAAQgAAMRsiE0EAKUIAADYaAIAE9Z48xE8BjgEAB0IAAEIAAAAxGSISMRgiExBEiAENQv/sMRkiEjEYIhIQRIgBRCRDigMAQgAAgAAVIhJEi/0Wi/0WEkQoKBJEKSkSRIv+i/6oRIv/i/8SRCoqEkQrKxJEiYoCAEIAAIv+FyUSRIv/F4EMEkSL/ov/rBcjEkSL/ov/qxeBDRJEi/6L/60XgQkSRIv+rheB+v//////////ARJEi/+uF4Hz//////////8BEkSL/hUiSwEPIksCTwJNTgEjSwEPI08CTwJNi/5PAk8CUov/FSJLAQ8iSwJPAk1OASNLAQ8jTwJPAk2L/08CTwJSEkSL/ov/UIAQAAAAAAAAAAUAAAAAAAAADBJEiYoDAEIAAIv9FYEIEkSL/hWBEBJEi/8VgSASRIlCAACIABOAAQAiTwJUgAQVH3x1TwFQsCRDQgAAJIABMoAGdGhpbmdziP7aJRaBDBaI/wOBCK+BEK+BIK9PAk8CTwKI/58kiUIAAIk=",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}