{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        218
                    ],
                    "errorMessage": "!a is MAX_VALUE - 5"
                },
                {
                    "pc": [
                        235
                    ],
                    "errorMessage": "!b is MAX_VALUE - 12"
                },
                {
                    "pc": [
                        124
                    ],
                    "errorMessage": "Bytes(uint64) is equivalent to itob"
                },
                {
                    "pc": [
                        128
                    ],
                    "errorMessage": "Bytes(uint64) returns an 8 byte encoding"
                },
                {
                    "pc": [
                        110
                    ],
                    "errorMessage": "Empty bytes has length of 0"
                },
                {
                    "pc": [
                        119
                    ],
                    "errorMessage": "Length must be 8"
                },
                {
                    "pc": [
                        93
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        77
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        138
                    ],
                    "errorMessage": "Round trip of biguint to bytes and back results in the same value"
                },
                {
                    "pc": [
                        181
                    ],
                    "errorMessage": "a & b is 4"
                },
                {
                    "pc": [
                        201
                    ],
                    "errorMessage": "a ^ b is 9"
                },
                {
                    "pc": [
                        165
                    ],
                    "errorMessage": "a must be bytes for 5"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "a | b is 13"
                },
                {
                    "pc": [
                        172
                    ],
                    "errorMessage": "b must be bytes for 12"
                },
                {
                    "pc": [
                        301
                    ],
                    "errorMessage": "first four bytes should match"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAAQBBSYECAAAAAAAAAABAgEAAzEyMwQBAgMEQgAAQgAAMRsiE0EAKUIAADYaAIAE9Z48xE8BjgEAB0IAAEIAAAAxGSISMRgiExBEiAD3Qv/sMRkiEjEYIhIQRIgBHCRDigMAQgAAgAAVIhJEi/0WSRWBCBJEi/0WEkQoKBJEKSkSRIv+i/6oRIv/i/8SRCoqEkQrKxJEiYoCAEIAAIv+FyUSRIv/F4EMEkSL/ov/rBcjEkSL/ov/qxeBDRJEi/6L/60XgQkSRIv+rheB+v//////////ARJEi/+uF4Hz//////////8BEkSL/hUiSwEPIksCTwJNTgEjSwEPI08CTwJNi/5PAk8CUov/FSJLAQ8iSwJPAk1OASNLAQ8jTwJPAk2L/08CTwJSEkSL/ov/UIAQAAAAAAAAAAUAAAAAAAAADBJEiUIAAIgAE4ABACJPAlSABBUffHVPAVCwJENCAAAkgAEygAZ0aGluZ3OI/vAlFoEMFoj/HySJQgAAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}