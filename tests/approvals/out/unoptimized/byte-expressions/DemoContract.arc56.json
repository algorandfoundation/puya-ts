{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        218
                    ],
                    "errorMessage": "!a is MAX_VALUE - 5"
                },
                {
                    "pc": [
                        235
                    ],
                    "errorMessage": "!b is MAX_VALUE - 12"
                },
                {
                    "pc": [
                        108
                    ],
                    "errorMessage": "Bytes(uint64) is equivalent to itob"
                },
                {
                    "pc": [
                        121
                    ],
                    "errorMessage": "Bytes(uint64) returns an 8 byte encoding"
                },
                {
                    "pc": [
                        94
                    ],
                    "errorMessage": "Empty bytes has length of 0"
                },
                {
                    "pc": [
                        103
                    ],
                    "errorMessage": "Length must be 8"
                },
                {
                    "pc": [
                        34
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        133
                    ],
                    "errorMessage": "Round trip of biguint to bytes and back results in the same value"
                },
                {
                    "pc": [
                        181
                    ],
                    "errorMessage": "a & b is 4"
                },
                {
                    "pc": [
                        201
                    ],
                    "errorMessage": "a ^ b is 9"
                },
                {
                    "pc": [
                        165
                    ],
                    "errorMessage": "a must be bytes for 5"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "a | b is 13"
                },
                {
                    "pc": [
                        172
                    ],
                    "errorMessage": "b must be bytes for 12"
                },
                {
                    "pc": [
                        78
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        39
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        299
                    ],
                    "errorMessage": "first four bytes should match"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAQBBTEbIhNBADE2GgCABPWePMRMjgEAAiJDMRkiEkQxGCITRIgBG4ABACJPAlSABBUffHVMULAkQv/eMRkiTI4BAANC/9IxGCISRIgBDSRC/8eKAwCAABUiEkSL/RZJFYEIEkSL/RYSRIAIAAAAAAAAAAFJEkSAAgEASRJEi/5JqESL/0kSRIADMTIzSRJEgAQBAgMESRJEiYoCAIv+FyUSRIv/F4EMEkSL/ov/rBcjEkSL/ov/qxeBDRJEi/6L/60XgQkSRIv+rheB+v//////////ARJEi/+uF4Hz//////////8BEkSL/hUiSwEPIksCTwJNTCNLAQ8jTwJPAk2L/k8CTwJSi/8VIksBDyJLAk8CTUwjSwEPI08CTwJNi/9PAk8CUhJEi/6L/1CAEAAAAAAAAAAFAAAAAAAAAAwSRIkkgAEygAZ0aGluZ3OI/wElFoEMFoj/QCSJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}