{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/byte-expressions.algo.ts"
  ],
  "mappings": ";;;;;AAcA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAXA;;;AACS;;AAAQ;AAAW;AAAnB;AAAP;AACO;;AAAA;AAAa;;AAAA;AAAb;AAAP;AACO;;;;;;;;;;AAAqB;AAArB;AAAP;AACqB;;;;AAAU;AAAxB;AAAP;AACe;;AAAR;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACmB;;;;;AAAkB;AAA9B;AAAP;AACc;;;;;;AAAiB;AAAxB;AAAP;;AAKO;AAAG;;;AAAK;;;;;;;;AAAb;;;AACO;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "8": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "9": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "12": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "pushbytes 0xf59e3cc4 // method \"test()bool\"",
      "defined_out": [
        "Method(test()bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test()bool)"
      ]
    },
    "21": {
      "op": "swap",
      "stack_out": [
        "Method(test()bool)",
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "match main_test_route@3",
      "stack_out": []
    },
    "26": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "block": "main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "28": {
      "block": "main_test_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "31": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "32": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "35": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "36": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "37": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "38": {
      "callsub": "tests/approvals/byte-expressions.algo.ts::DemoContract.test",
      "op": "callsub tests/approvals/byte-expressions.algo.ts::DemoContract.test",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "41": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "44": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "45": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "47": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "48": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "54": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "55": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "op": "log",
      "stack_out": []
    },
    "57": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "b main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11"
    },
    "61": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%8#0"
      ]
    },
    "65": {
      "op": "match main___algots__.defaultCreate@7",
      "stack_out": []
    },
    "69": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "72": {
      "block": "main___algots__.defaultCreate@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "74": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "76": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "77": {
      "callsub": "tests/approvals/byte-expressions.algo.ts::DemoContract.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "80": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "b main_after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__@11"
    },
    "84": {
      "subroutine": "tests/approvals/byte-expressions.algo.ts::test",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "test",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "87": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "89": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "91": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "92": {
      "error": "Empty bytes has length of 0",
      "op": "assert // Empty bytes has length of 0",
      "stack_out": []
    },
    "93": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "95": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "96": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "a#0 (copy)"
      ]
    },
    "98": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "100": {
      "error": "Bytes(uint64) is equivalent to itob",
      "op": "assert // Bytes(uint64) is equivalent to itob",
      "stack_out": []
    },
    "101": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "111": {
      "op": "dup",
      "stack_out": [
        "0x0000000000000001",
        "0x0000000000000001"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "113": {
      "error": "Bytes(uint64) returns an 8 byte encoding",
      "op": "assert // Bytes(uint64) returns an 8 byte encoding",
      "stack_out": []
    },
    "114": {
      "op": "pushbytes 0x0100",
      "defined_out": [
        "0x0100"
      ],
      "stack_out": [
        "0x0100"
      ]
    },
    "118": {
      "op": "dup",
      "stack_out": [
        "0x0100",
        "0x0100"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "120": {
      "op": "assert",
      "stack_out": []
    },
    "121": {
      "op": "frame_dig -2",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "123": {
      "op": "dup",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "b#0 (copy)"
      ]
    },
    "124": {
      "op": "b==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "125": {
      "error": "Round trip of biguint to bytes and back results in the same value",
      "op": "assert // Round trip of biguint to bytes and back results in the same value",
      "stack_out": []
    },
    "126": {
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "128": {
      "op": "dup",
      "stack_out": [
        "c#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "130": {
      "op": "assert",
      "stack_out": []
    },
    "131": {
      "op": "pushbytes \"123\"",
      "defined_out": [
        "\"123\""
      ],
      "stack_out": [
        "\"123\""
      ]
    },
    "136": {
      "op": "dup",
      "stack_out": [
        "\"123\"",
        "\"123\""
      ]
    },
    "137": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "138": {
      "op": "assert",
      "stack_out": []
    },
    "139": {
      "op": "pushbytes 0x01020304",
      "defined_out": [
        "0x01020304"
      ],
      "stack_out": [
        "0x01020304"
      ]
    },
    "145": {
      "op": "dup",
      "stack_out": [
        "0x01020304",
        "0x01020304"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "147": {
      "op": "assert",
      "stack_out": []
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    },
    "149": {
      "subroutine": "tests/approvals/byte-expressions.algo.ts::DemoContract.test",
      "params": {},
      "block": "tests/approvals/byte-expressions.algo.ts::DemoContract.test",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "150": {
      "op": "pushbytes 0x32",
      "defined_out": [
        "0x32",
        "1"
      ],
      "stack_out": [
        "1",
        "0x32"
      ]
    },
    "153": {
      "op": "pushbytes \"things\"",
      "defined_out": [
        "\"things\"",
        "0x32",
        "1"
      ],
      "stack_out": [
        "1",
        "0x32",
        "\"things\""
      ]
    },
    "161": {
      "callsub": "tests/approvals/byte-expressions.algo.ts::test",
      "op": "callsub test",
      "stack_out": []
    },
    "164": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "165": {
      "retsub": true,
      "op": "retsub"
    },
    "166": {
      "subroutine": "tests/approvals/byte-expressions.algo.ts::DemoContract.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}