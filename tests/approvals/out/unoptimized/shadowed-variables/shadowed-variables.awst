contract ShadowedVariablesAlgo
{
  approvalProgram(): bool
  {
    #[b, u, f]: readonly [bytes, uint64, bool] = #[($0 = tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues()).0, $0.1, $0.2]
    assert("123" == b, comment=a should be module const (bytes))
    a: uint64 = u
    assert(a == 123, comment=a should be local const (uint))
    a₁: bool = f
    assert(!a₁, comment=a should be local let (bool))
    a₁: bool = !a₁
    assert(a₁, comment=a should be modified local let (bool))
    assert(a₁, comment=a should still be modified local let (bool))
    assert(a == 123, comment=a should be local const (uint))
    assert("123" == "123", comment=a should be module const (bytes))
    return True
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  getValues(): arc4.tuple<bytes,uint64,bool>
  {
    return ARC4_ENCODE(#["123", 123, False], wtype=arc4.tuple<bytes,uint64,bool>)
  }
  
}