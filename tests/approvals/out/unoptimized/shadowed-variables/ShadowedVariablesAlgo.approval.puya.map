{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/shadowed-variables.algo.ts"
  ],
  "mappings": ";;;;;;;AAOsB;;;AAAA;;AAAZ;;AAAA;AAAA;;AAJM;AAKL;AAAP;AAGS;AAAM;;AAAN;AAAP;AAEM;AACG;AAAA;AAAP;AAEM;AACJ;AAAA;AAEF;AAEW;;AAAN;AAAP;AAlBU;AAoBO;AAAZ;AAAP;AACO;;AAAP;AArBY;AAyBM;;AAAM;;AAAxB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock \"123\""
    },
    "7": {
      "callsub": "tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues",
      "op": "callsub getValues",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0"
      ],
      "stack_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0"
      ]
    },
    "10": {
      "op": "cover 2",
      "defined_out": [
        "b#0",
        "tuple_assignment%2#0",
        "u#0"
      ],
      "stack_out": [
        "tuple_assignment%2#0",
        "b#0",
        "u#0"
      ]
    },
    "12": {
      "op": "cover 2",
      "stack_out": [
        "u#0",
        "tuple_assignment%2#0",
        "b#0"
      ]
    },
    "14": {
      "op": "swap",
      "defined_out": [
        "b#0",
        "f#0",
        "u#0"
      ],
      "stack_out": [
        "u#0",
        "b#0",
        "f#0"
      ]
    },
    "15": {
      "op": "cover 2",
      "stack_out": [
        "f#0",
        "u#0",
        "b#0"
      ]
    },
    "17": {
      "op": "bytec_0 // \"123\"",
      "defined_out": [
        "\"123\"",
        "b#0",
        "f#0",
        "u#0"
      ],
      "stack_out": [
        "f#0",
        "u#0",
        "b#0",
        "\"123\""
      ]
    },
    "18": {
      "op": "==",
      "defined_out": [
        "f#0",
        "tmp%0#0",
        "u#0"
      ],
      "stack_out": [
        "f#0",
        "u#0",
        "tmp%0#0"
      ]
    },
    "19": {
      "error": "a should be module const (bytes)",
      "op": "assert // a should be module const (bytes)",
      "defined_out": [
        "a#0",
        "f#0"
      ],
      "stack_out": [
        "f#0",
        "a#0"
      ]
    },
    "20": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "f#0"
      ],
      "stack_out": [
        "f#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "21": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "a#0",
        "a#0 (copy)",
        "f#0"
      ],
      "stack_out": [
        "f#0",
        "a#0",
        "a#0 (copy)",
        "123"
      ]
    },
    "23": {
      "op": "==",
      "defined_out": [
        "a#0",
        "f#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "f#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "24": {
      "error": "a should be local const (uint)",
      "op": "assert // a should be local const (uint)",
      "stack_out": [
        "f#0",
        "a#0"
      ]
    },
    "25": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "a\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "a\u2081#0"
      ]
    },
    "26": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a\u2081#0",
        "a\u2081#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a\u2081#0",
        "a\u2081#0 (copy)"
      ]
    },
    "27": {
      "op": "!",
      "defined_out": [
        "a#0",
        "a\u2081#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "a\u2081#0",
        "tmp%2#0"
      ]
    },
    "28": {
      "error": "a should be local let (bool)",
      "op": "assert // a should be local let (bool)",
      "stack_out": [
        "a#0",
        "a\u2081#0"
      ]
    },
    "29": {
      "op": "!"
    },
    "30": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "a\u2081#0",
        "a\u2081#0 (copy)"
      ]
    },
    "31": {
      "error": "a should be modified local let (bool)",
      "op": "assert // a should be modified local let (bool)",
      "stack_out": [
        "a#0",
        "a\u2081#0"
      ]
    },
    "32": {
      "error": "a should still be modified local let (bool)",
      "op": "assert // a should still be modified local let (bool)",
      "stack_out": [
        "a#0"
      ]
    },
    "33": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "a#0",
        "123"
      ]
    },
    "35": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "36": {
      "error": "a should be local const (uint)",
      "op": "assert // a should be local const (uint)",
      "stack_out": []
    },
    "37": {
      "op": "bytec_0 // \"123\"",
      "stack_out": [
        "\"123\""
      ]
    },
    "38": {
      "op": "dup",
      "stack_out": [
        "\"123\"",
        "\"123\""
      ]
    },
    "39": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "40": {
      "error": "a should be module const (bytes)",
      "op": "assert // a should be module const (bytes)",
      "stack_out": []
    },
    "41": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "43": {
      "op": "return",
      "stack_out": []
    },
    "44": {
      "subroutine": "tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues",
      "params": {},
      "block": "getValues",
      "stack_in": [],
      "op": "bytec_0 // \"123\"",
      "defined_out": [
        "\"123\""
      ],
      "stack_out": [
        "\"123\""
      ]
    },
    "45": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "\"123\"",
        "123"
      ],
      "stack_out": [
        "\"123\"",
        "123"
      ]
    },
    "47": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "\"123\"",
        "0",
        "123"
      ],
      "stack_out": [
        "\"123\"",
        "123",
        "0"
      ]
    },
    "49": {
      "retsub": true,
      "op": "retsub"
    }
  }
}