main tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.approvalProgram:
    block@0: // L7
        let awst_tmp%0#0: Encoded((len+uint8[]),uint64,bool1) = tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues()
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 awst_tmp%0#0 0u)
        let aggregate%len%0#0: uint64 = (len awst_tmp%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 awst_tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%0#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let values%0#0: bytes = ((extract 2 0) tuple_item%0#0)
        let aggregate%extract%0#0: bytes = (extract3 awst_tmp%0#0 2u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%0#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%get_bit%0#0: bool = (getbit awst_tmp%0#0 80u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#0
        let values%2#0: bool = tuple_item%2#0
        let b#0: bytes = values%0#0
        let u#0: uint64 = values%1#0
        let f#0: bool = values%2#0
        let tmp%0#0: bool = (== "123" b#0)
        (assert tmp%0#0) // a should be module const (bytes)
        let a#0: uint64 = u#0
        let tmp%1#0: bool = (== a#0 123u)
        (assert tmp%1#0) // a should be local const (uint)
        let a₁#0: bool = f#0
        let tmp%2#0: bool = (! a₁#0)
        (assert tmp%2#0) // a should be local let (bool)
        let tmp%3#0: bool = (! a₁#0)
        let a₁#1: bool = tmp%3#0
        (assert a₁#1) // a should be modified local let (bool)
        (assert a₁#1) // a should still be modified local let (bool)
        let tmp%4#0: bool = (== a#0 123u)
        (assert tmp%4#0) // a should be local const (uint)
        let tmp%5#0: bool = (== "123" "123")
        (assert tmp%5#0) // a should be module const (bytes)
        return 1u

subroutine tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues() -> Encoded((len+uint8[]),uint64,bool1):
    block@0: // L28
        let aggregate%length%0#0: uint64 = (len "123")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "123")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+uint8[]),uint64,bool1)%0#0: Encoded((len+uint8[]),uint64,bool1) = aggregate%concat%0#0
        let tmp%0#0: Encoded((len+uint8[]),uint64,bool1) = aggregate%as_Encoded((len+uint8[]),uint64,bool1)%0#0
        return tmp%0#0