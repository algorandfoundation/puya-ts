main tests/approvals/casting.algo.ts::CastingAlgo.approvalProgram:
    block@0: // L5
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#1: Encoded(uint64,uint64,uint64) = aggregate%head%2#1
        let tmp%0#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#1
        let y#0: Encoded(uint64,uint64,uint64) = tmp%0#0
        let aggregate%extract%0#1: bytes = (extract3 y#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#1: bytes = (extract3 y#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%1#0: uint64 = (* values%0#0 values%1#0)
        let aggregate%extract%2#1: bytes = (extract3 y#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%2#0: uint64 = (* tmp%1#0 values%2#0)
        let tmp%3#0: uint64 = (* tmp%2#0 1u)
        let tmp%4#0: uint64 = (* tmp%3#0 2u)
        let tmp%5#0: uint64 = (* tmp%4#0 3u)
        let tmp%6#0: bool = (> 123u tmp%5#0)
        return tmp%6#0