#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@5
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x8fef7668 // method "testPay(pay)bool"
    uncover 1
    match main_testPay_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    err

main_testPay_route@3:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub testPay
    b main_switch_case_next@4

main___algots__.defaultCreate@5:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay[routing]() -> void:
testPay:
    b testPay_block@0

testPay_block@0:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    callsub tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(pay: uint64) -> uint64:
tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    proto 1 1
    b tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay_block@0

tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay_block@0:
    // tests/approvals/assert-match.algo.ts:6-8
    // assertMatch(Txn, {
    //   fee: { greaterThan: 0 },
    // })
    txn Fee
    // tests/approvals/assert-match.algo.ts:7
    // fee: { greaterThan: 0 },
    intc_0 // 0
    // tests/approvals/assert-match.algo.ts:6-8
    // assertMatch(Txn, {
    //   fee: { greaterThan: 0 },
    // })
    >
    assert // assert target is match for conditions
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns Amount
    // tests/approvals/assert-match.algo.ts:11
    // amount: { between: [100_000, 105_000] },
    pushint 105000 // 105000
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <=
    frame_dig -1
    gtxns Amount
    // tests/approvals/assert-match.algo.ts:11
    // amount: { between: [100_000, 105_000] },
    pushint 100000 // 100000
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >=
    &&
    frame_dig -1
    gtxns Sender
    // tests/approvals/assert-match.algo.ts:12
    // sender: Txn.sender,
    txn Sender
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    &&
    frame_dig -1
    gtxns Receiver
    // tests/approvals/assert-match.algo.ts:13
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    &&
    frame_dig -1
    gtxns CloseRemainderTo
    // tests/approvals/assert-match.algo.ts:14
    // closeRemainderTo: Global.zeroAddress,
    global ZeroAddress
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    &&
    frame_dig -1
    gtxns FirstValid
    // tests/approvals/assert-match.algo.ts:15
    // firstValid: { greaterThan: 1 },
    intc_1 // 1
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >
    &&
    frame_dig -1
    gtxns LastValid
    // tests/approvals/assert-match.algo.ts:16
    // lastValid: { lessThan: 2 ** 40 },
    pushint 1099511627776 // 1099511627776
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <
    &&
    assert // assert target is match for conditions
    // tests/approvals/assert-match.algo.ts:18
    // return true
    intc_1 // 1
    retsub


// tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
