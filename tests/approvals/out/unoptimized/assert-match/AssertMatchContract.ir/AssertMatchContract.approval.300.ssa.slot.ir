main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPay(pay)bool" => block@3, * => block@4}
    block@3: // testPay_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        goto block@6
    block@5: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate()
        exit 1u
    block@6: // after_if_else_L4
        exit 0u
    block@7: // after_inlined_tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay[routing]() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: bool = tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(gtxn_idx%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(pay: uint64) -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (txn Fee)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0) // assert target is match for conditions
        let tmp%2#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#0: bool = (<= tmp%2#0 105000u)
        let tmp%4#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%5#0: bool = (>= tmp%4#0 100000u)
        let tmp%6#0: bool = (&& tmp%3#0 tmp%5#0)
        let tmp%7#0: account = ((gtxns Sender) pay#0)
        let tmp%8#0: account = (txn Sender)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        let tmp%10#0: bool = (&& tmp%6#0 tmp%9#0)
        let tmp%11#0: account = ((gtxns Receiver) pay#0)
        let tmp%12#0: account = (global CurrentApplicationAddress)
        let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
        let tmp%14#0: bool = (&& tmp%10#0 tmp%13#0)
        let tmp%15#0: account = ((gtxns CloseRemainderTo) pay#0)
        let tmp%16#0: account = (global ZeroAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        let tmp%18#0: bool = (&& tmp%14#0 tmp%17#0)
        let tmp%19#0: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%20#0: bool = (> tmp%19#0 1u)
        let tmp%21#0: bool = (&& tmp%18#0 tmp%20#0)
        let tmp%22#0: uint64 = ((gtxns LastValid) pay#0)
        let tmp%23#0: bool = (< tmp%22#0 1099511627776u)
        let tmp%24#0: bool = (&& tmp%21#0 tmp%23#0)
        (assert tmp%24#0) // assert target is match for conditions
        return 1u

subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 