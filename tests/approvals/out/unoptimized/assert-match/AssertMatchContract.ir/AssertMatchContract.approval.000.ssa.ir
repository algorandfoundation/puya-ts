main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPay(pay)bool" => block@2, * => block@3}
    block@2: // testPay_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%8#0: bool = tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(gtxn_idx%0#0)
        let tmp%9#0: Encoded(bool8) = bytes_encode<bool8>(tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        return 1u
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        goto block@9
    block@5: // bare_routing_L4
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L4
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@9
    block@9: // after_if_else_L4
        return 0u

subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(pay: uint64) -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (txn Fee)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0) // assert target is match for conditions
        let tmp%2#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#0: bool = (<= tmp%2#0 105000u)
        goto tmp%3#0 ? block@1 : block@8
    block@1: // and_contd_L10
        let tmp%4#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%5#0: bool = (>= tmp%4#0 100000u)
        goto tmp%5#0 ? block@2 : block@8
    block@2: // and_contd_L10
        let tmp%6#0: account = ((gtxns Sender) pay#0)
        let tmp%7#0: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        goto tmp%8#0 ? block@3 : block@8
    block@3: // and_contd_L10
        let tmp%9#0: account = ((gtxns Receiver) pay#0)
        let tmp%10#0: account = (global CurrentApplicationAddress)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        goto tmp%11#0 ? block@4 : block@8
    block@4: // and_contd_L10
        let tmp%12#0: account = ((gtxns CloseRemainderTo) pay#0)
        let tmp%13#0: account = (global ZeroAddress)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        goto tmp%14#0 ? block@5 : block@8
    block@5: // and_contd_L10
        let tmp%15#0: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%16#0: bool = (> tmp%15#0 1u)
        goto tmp%16#0 ? block@6 : block@8
    block@6: // and_contd_L10
        let tmp%17#0: uint64 = ((gtxns LastValid) pay#0)
        let tmp%18#0: bool = (< tmp%17#0 1099511627776u)
        goto tmp%18#0 ? block@7 : block@8
    block@7: // bool_true_L10
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L10
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L10
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // assert target is match for conditions
        return 1u

subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 