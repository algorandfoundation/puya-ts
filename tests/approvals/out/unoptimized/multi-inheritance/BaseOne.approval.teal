#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75 "common"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_if_body@1

main_if_body@1:
    callsub constructor
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@12
    b main_abi_routing@4

main_abi_routing@4:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@10
    b main_call_NoOp@5

main_call_NoOp@5:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    txna ApplicationArgs 0
    pushbytes 0xc32533e3 // method "methodOne()string"
    pushbytes 0x455c8d09 // method "methodCommon()string"
    pushbytes 0xf9f5142c // method "b2CantOverride()string"
    uncover 3
    match main_methodOne_route@6 main_methodCommon_route@7 main_b2CantOverride_route@8
    b main_switch_case_next@9

main_switch_case_next@9:
    b main_after_if_else@11

main_after_if_else@11:
    b main_after_if_else@13

main_after_if_else@13:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    err

main_b2CantOverride_route@8:
    // tests/approvals/multi-inheritance.algo.ts:17
    // b2CantOverride(): string {
    callsub b2CantOverride
    b main_switch_case_next@9

main_methodCommon_route@7:
    // tests/approvals/multi-inheritance.algo.ts:13
    // methodCommon() {
    callsub methodCommon
    b main_switch_case_next@9

main_methodOne_route@6:
    // tests/approvals/multi-inheritance.algo.ts:24
    // methodOne() {
    callsub methodOne
    b main_switch_case_next@9

main_create_NoOp@10:
    b main_after_if_else@11

main___algots__.defaultCreate@12:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne[routing]() -> void:
methodOne:
    b methodOne_block@0

methodOne_block@0:
    // tests/approvals/multi-inheritance.algo.ts:24
    // methodOne() {
    callsub tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon[routing]() -> void:
methodCommon:
    b methodCommon_block@0

methodCommon_block@0:
    // tests/approvals/multi-inheritance.algo.ts:13
    // methodCommon() {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride[routing]() -> void:
b2CantOverride:
    b b2CantOverride_block@0

b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:17
    // b2CantOverride(): string {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne() -> bytes:
tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne:
    b tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne_block@0

tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne_block@0:
    // tests/approvals/multi-inheritance.algo.ts:25
    // return 'base-one'
    pushbytes "base-one"
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> bytes:
tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon:
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon_block@0

tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon_block@0:
    // tests/approvals/multi-inheritance.algo.ts:14
    // return 'common'
    bytec_1 // "common"
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride() -> bytes:
tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride:
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride_block@0

tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:18
    // return 'common'
    bytec_1 // "common"
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseOne.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor() -> void:
constructor:
    b constructor_block@0

constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor
    // tests/approvals/multi-inheritance.algo.ts:23
    // stateOne = GlobalState({ initialValue: Uint64(45) })
    pushbytes "stateOne"
    pushint 45 // 45
    app_global_put
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor:
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@0

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:10
    // export class CommonBase extends Contract {
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@1

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@1:
    // tests/approvals/multi-inheritance.algo.ts:10
    // export class CommonBase extends Contract {
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2:
    // tests/approvals/multi-inheritance.algo.ts:11
    // stateCommon = GlobalState<uint64>({ initialValue: 123 })
    pushbytes "stateCommon"
    pushint 123 // 123
    app_global_put
    retsub
