main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/multi-inheritance.algo.ts::MultiBases.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L45
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@15
    block@4: // abi_routing_L45
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "methodMulti()string" => block@5, method "methodCallsSuper()string" => block@6, method "callB2CantOverride()string" => block@7, method "callB2Common()string" => block@8, method "methodOne()string" => block@9, method "methodCommon()string" => block@10, method "b2CantOverride()string" => block@11, method "methodTwo()string" => block@12, * => block@13}
    block@5: // methodMulti_route_L48
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: string = tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti()
        let aggregate%length%0#0: uint64 = (len tmp%7#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%7#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@6: // methodCallsSuper_route_L52
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: string = tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper()
        let aggregate%length%1#0: uint64 = (len tmp%14#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%14#0)
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%15#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@7: // callB2CantOverride_route_L56
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let tmp%21#0: string = tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride()
        let aggregate%length%2#0: uint64 = (len tmp%21#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%21#0)
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%22#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@8: // callB2Common_route_L60
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        let tmp%28#0: string = tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common()
        let aggregate%length%3#0: uint64 = (len tmp%28#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 tmp%28#0)
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%29#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let tmp%30#0: bytes = (concat 0x151f7c75 tmp%29#0)
        (log tmp%30#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@9: // methodOne_route_L24
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (== tmp%31#0 NoOp)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // can only call when not creating
        let tmp%35#0: string = tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne()
        let aggregate%length%4#0: uint64 = (len tmp%35#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 tmp%35#0)
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let tmp%36#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#0
        let tmp%37#0: bytes = (concat 0x151f7c75 tmp%36#0)
        (log tmp%37#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@10: // methodCommon_route_L13
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let tmp%42#0: string = tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon()
        let aggregate%length%5#0: uint64 = (len tmp%42#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 tmp%42#0)
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%encoded_value%5#0
        let tmp%43#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let tmp%44#0: bytes = (concat 0x151f7c75 tmp%43#0)
        (log tmp%44#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@11: // b2CantOverride_route_L17
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (== tmp%45#0 NoOp)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        let tmp%48#0: bool = (!= tmp%47#0 0u)
        (assert tmp%48#0) // can only call when not creating
        let tmp%49#0: string = tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride()
        let aggregate%length%6#0: uint64 = (len tmp%49#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 tmp%49#0)
        let aggregate%as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = aggregate%encoded_value%6#0
        let tmp%50#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#0
        let tmp%51#0: bytes = (concat 0x151f7c75 tmp%50#0)
        (log tmp%51#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@12: // methodTwo_route_L31
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (== tmp%52#0 NoOp)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        let tmp%55#0: bool = (!= tmp%54#0 0u)
        (assert tmp%55#0) // can only call when not creating
        let tmp%56#0: string = tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo()
        let aggregate%length%7#0: uint64 = (len tmp%56#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 tmp%56#0)
        let aggregate%as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = aggregate%encoded_value%7#0
        let tmp%57#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#0
        let tmp%58#0: bytes = (concat 0x151f7c75 tmp%57#0)
        (log tmp%58#0)
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@13: // switch_case_default_L45
        goto block@14
    block@14: // switch_case_next_L45
        goto block@19
    block@15: // bare_routing_L45
        let tmp%59#0: uint64 = (txn OnCompletion)
        switch tmp%59#0 {0u => block@16, * => block@17}
    block@16: // __algots__.defaultCreate_L45
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (== tmp%60#0 0u)
        (assert tmp%61#0) // can only call when creating
        tests/approvals/multi-inheritance.algo.ts::MultiBases.__algots__.defaultCreate()
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@17: // switch_case_default_L45
        goto block@18
    block@18: // switch_case_next_L45
        goto block@19
    block@19: // after_if_else_L45
        let tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#9: bool = 0u
        goto block@20
    block@20: // after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#0 <- block@5, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#1 <- block@6, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#2 <- block@7, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#3 <- block@8, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#4 <- block@9, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#5 <- block@10, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#6 <- block@11, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#7 <- block@12, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#8 <- block@16, tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__%0#9 <- block@19)
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti() -> string:
    block@0: // L48
        return "multi-bases"

subroutine tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper() -> string:
    block@0: // L52
        let tmp%0#0: string = tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride() -> string:
    block@0: // L56
        let tmp%0#0: string = tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common() -> string:
    block@0: // L60
        let tmp%0#0: string = tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne() -> string:
    block@0: // L24
        return "base-one"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> string:
    block@0: // L13
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride() -> string:
    block@0: // L17
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo() -> string:
    block@0: // L31
        return "base-two"

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride() -> string:
    block@0: // L40
        return "base-two"

subroutine tests/approvals/multi-inheritance.algo.ts::MultiBases.__algots__.defaultCreate() -> void:
    block@0: // L45
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::MultiBases.constructor() -> void:
    block@0: // L45
        polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor()
        (app_global_put "stateMulti" "Hmmm")
        return 

subroutine polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor() -> void:
    block@0: // L1
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L1
        tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor()
        tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor()
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor() -> void:
    block@0: // L22
        tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor()
        (app_global_put "stateOne" 45u)
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
    block@0: // L10
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L10
        (app_global_put "stateCommon" 123u)
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor() -> void:
    block@0: // L29
        tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor()
        (app_global_put "stateTwo" "Hello")
        return 