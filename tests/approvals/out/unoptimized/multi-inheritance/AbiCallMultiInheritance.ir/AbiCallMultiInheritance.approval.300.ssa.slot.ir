main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L65
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L65
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L65
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test(uint64)void" => block@4, method "add(uint64,uint64)uint64" => block@5, * => block@6}
    block@4: // test_route_L66
        tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.test[routing]()
        goto block@6
    block@5: // add_route_L79
        tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.add[routing]()
        goto block@6
    block@6: // switch_case_next_L65
        goto block@8
    block@7: // create_NoOp_L65
        goto block@8
    block@8: // after_if_else_L65
        goto block@10
    block@9: // __algots__.defaultCreate_L65
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L65
        exit 0u
    block@11: // after_inlined_tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.test[routing]() -> void:
    block@0: // L66
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.test(tmp%1#0)
        exit 1u

subroutine tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.add[routing]() -> void:
    block@0: // L79
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint64)%1#0)
        let tmp%4#0: uint64 = tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.add(tmp%1#0, tmp%3#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.test(app: uint64) -> void:
    block@0: // L66
        itxn_begin
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationArgs) method "methodTwo()string")
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L67
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // Bytes has valid prefix
        itxn_begin
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint64) = tmp%4#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(uint64) = tmp%5#0
        ((itxn_field ApplicationArgs) method "add(uint64,uint64)uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L72
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // Bytes has valid prefix
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = tmp%6#0
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let result#0: uint64 = tmp%9#0
        let tmp%10#0: bool = (== result#0 3u)
        (assert tmp%10#0)
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.add(a: uint64, b: uint64) -> uint64:
    block@0: // L79
        let tmp%0#0: uint64 = (+ a#0 b#0)
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__algots__.defaultCreate() -> void:
    block@0: // L65
        return 