{
    "name": "MultiBases",
    "structs": {},
    "methods": [
        {
            "name": "methodMulti",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodCallsSuper",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "callB2CantOverride",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "callB2Common",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodOne",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodCommon",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "b2CantOverride",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodTwo",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "stateMulti": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3RhdGVNdWx0aQ=="
                },
                "stateOne": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdGVPbmU="
                },
                "stateCommon": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdGVDb21tb24="
                },
                "stateTwo": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3RhdGVUd28="
                }
            },
            "local": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        151,
                        184,
                        217,
                        250,
                        283,
                        316,
                        349,
                        382
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        433
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        156,
                        189,
                        222,
                        255,
                        288,
                        321,
                        354,
                        387
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiACAAEmAwQVH3x1BmNvbW1vbghiYXNlLXR3b4AAQgAAMRhAAAlCAACIAdtCAABCAAAxGyITQQFiQgAANhoAgAQpDrqfgASDnZb/gASpeMpWgASIVH64gATDJTPjgARFXI0JgAT59RQsgAQ2OzKeTwiOCAD3ANYAtQCUAHMAUgAxABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRIgBWUkVFlcGAk8BUChPAVCwI0UBQv/eMRkiEkQxGCITRIgBM0kVFlcGAk8BUChPAVCwI0UBQv+9MRkiEkQxGCITRIgBDUkVFlcGAk8BUChPAVCwI0UBQv+cMRkiEkQxGCITRIgA3kkVFlcGAk8BUChPAVCwI0UBQv97MRkiEkQxGCITRIgAtkkVFlcGAk8BUChPAVCwI0UBQv9aMRkiEkQxGCITRIgAjkkVFlcGAk8BUChPAVCwI0UBQv85MRkiEkQxGCITRIgAZkkVFlcGAk8BUChPAVCwI0UBQv8YMRkiEkQxGCITRIgANEkVFlcGAk8BUChPAVCwI0UBQv73MRkiTwGOAQAJQgAAQgAAQv7fMRgiEkSIAE4jRQFC/tdCAACAC211bHRpLWJhc2VziUIAAIgAJ4lCAACIACWJQgAAiAAPiUIAAIAIYmFzZS1vbmWJQgAAKYlCAAApiUIAACqJQgAAKolCAACJQgAAiAAUgApzdGF0ZU11bHRpgARIbW1tZ4lCAABCAABCAACIAASIAC+JQgAAiAAOgAhzdGF0ZU9uZYEtZ4lCAABCAABCAACAC3N0YXRlQ29tbW9ugXtniUIAAIj/4IAIc3RhdGVUd2+ABUhlbGxvZ4k=",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}