{
    "name": "MultiBases",
    "structs": {},
    "methods": [
        {
            "name": "methodMulti",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodCallsSuper",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "callB2CantOverride",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "callB2Common",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodOne",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodCommon",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "b2CantOverride",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodTwo",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "stateMulti": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3RhdGVNdWx0aQ=="
                },
                "stateOne": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdGVPbmU="
                },
                "stateCommon": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdGVDb21tb24="
                },
                "stateTwo": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3RhdGVUd28="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        120,
                        149,
                        178,
                        207,
                        236,
                        265,
                        294,
                        323
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        363
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        125,
                        154,
                        183,
                        212,
                        241,
                        270,
                        299,
                        328
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmAwQVH3x1BmNvbW1vbghiYXNlLXR3bzEYQAADiAFpMRsiE0EBMTYaAIAEKQ66n4AEg52W/4AEqXjKVoAEiFR+uIAEwyUz44AERVyNCYAE+fUULIAENjsynk8IjggAzQCwAJMAdgBZADwAHwACIkMxGSISRDEYIhNEiAFbSRUWVwYCTFAoTFCwI0L/4jEZIhJEMRgiE0SIAStJFRZXBgJMUChMULAjQv/FMRkiEkQxGCITRIgBDEkVFlcGAkxQKExQsCNC/6gxGSISRDEYIhNEiADTSRUWVwYCTFAoTFCwI0L/izEZIhJEMRgiE0SIAJRJFRZXBgJMUChMULAjQv9uMRkiEkQxGCITRIgAc0kVFlcGAkxQKExQsCNC/1ExGSISRDEYIhNEiABSSRUWVwYCTFAoTFCwI0L/NDEZIhJEMRgiE0SIACdJFRZXBgJMUChMULAjQv8XMRkiTI4BAANC/wsxGCISRIgAhyNC/wCAC211bHRpLWJhc2VziYgAWImIAFaJiAA7iYgAFIAKc3RhdGVNdWx0aYAESG1tbWeJiAAPiAA2iYAIYmFzZS1vbmWJiAASgAhzdGF0ZU9uZYEtZ4kpiSmJgAtzdGF0ZUNvbW1vboF7Z4kqiSqJiP/ogAhzdGF0ZVR3b4AFSGVsbG9niYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}