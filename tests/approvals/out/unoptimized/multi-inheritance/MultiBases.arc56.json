{
    "name": "MultiBases",
    "structs": {},
    "methods": [
        {
            "name": "methodMulti",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodCallsSuper",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "callB2CantOverride",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "callB2Common",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodOne",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodCommon",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "b2CantOverride",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "methodTwo",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "stateMulti": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3RhdGVNdWx0aQ=="
                },
                "stateOne": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdGVPbmU="
                },
                "stateCommon": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdGVDb21tb24="
                },
                "stateTwo": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3RhdGVUd28="
                }
            },
            "local": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        62
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        214
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiACAQAmAwQVH3x1BmNvbW1vbghiYXNlLXR3b0IAADEYQAAJQgAAiAGuQgAAQgAAMRsjE0EAlkIAADEZIxJEMRgjE0EAhEIAADYaAIAEKQ66n4AEg52W/4AEqXjKVoAEiFR+uIAEwyUz44AERVyNCYAE+fUULIAENjsynk8IjggANAAuACgAIgAcABYAEAAKQgAAQgAAQgAAAIgA2UL/84gAvUL/7YgAoUL/54gAhUL/4YgAaUL/24gATUL/1YgAMUL/z4gAFUL/yUL/yTEZIxIxGCMSEESIAPoiQ0IAAIgAqkkVFlcGAk8BUChPAVCwIkNCAACIAKVJFRZXBgJPAVAoTwFQsCJDQgAAiACWSRUWVwYCTwFQKE8BULAiQ0IAAIgAh0kVFlcGAk8BUChPAVCwIkNCAACIAHhJFRZXBgJPAVAoTwFQsCJDQgAAiABwSRUWVwYCTwFQKE8BULAiQ0IAAIgAX0kVFlcGAk8BUChPAVCwIkNCAACIAE5JFRZXBgJPAVAoTwFQsCJDQgAAgAttdWx0aS1iYXNlc4lCAACIACeJQgAAiAAliUIAAIgAD4lCAACACGJhc2Utb25liUIAACmJQgAAKYlCAAAqiUIAACqJQgAAiUIAAIgAFIAKc3RhdGVNdWx0aYAESG1tbWeJQgAAQgAAQgAAiAAEiAAviUIAAIgADoAIc3RhdGVPbmWBLWeJQgAAQgAAQgAAgAtzdGF0ZUNvbW1vboF7Z4lCAACI/+CACHN0YXRlVHdvgAVIZWxsb2eJ",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}