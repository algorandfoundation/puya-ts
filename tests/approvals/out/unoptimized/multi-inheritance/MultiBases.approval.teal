#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "common" "base-two"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_if_body@1

main_if_body@1:
    callsub constructor
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // tests/approvals/multi-inheritance.algo.ts:45
    // export class MultiBases extends classes(NameStore, BaseOne, BaseTwo) {
    txn NumAppArgs
    intc_1 // 0
    !=
    bz main___algots__.defaultCreate@17
    b main_abi_routing@4

main_abi_routing@4:
    // tests/approvals/multi-inheritance.algo.ts:45
    // export class MultiBases extends classes(NameStore, BaseOne, BaseTwo) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    bz main_create_NoOp@15
    b main_call_NoOp@5

main_call_NoOp@5:
    // tests/approvals/multi-inheritance.algo.ts:45
    // export class MultiBases extends classes(NameStore, BaseOne, BaseTwo) {
    txna ApplicationArgs 0
    pushbytes 0x290eba9f // method "methodMulti()string"
    pushbytes 0x839d96ff // method "methodCallsSuper()string"
    pushbytes 0xa978ca56 // method "callB2CantOverride()string"
    pushbytes 0x88547eb8 // method "callB2Common()string"
    pushbytes 0xc32533e3 // method "methodOne()string"
    pushbytes 0x455c8d09 // method "methodCommon()string"
    pushbytes 0xf9f5142c // method "b2CantOverride()string"
    pushbytes 0x363b329e // method "methodTwo()string"
    uncover 8
    match main_methodMulti_route@6 main_methodCallsSuper_route@7 main_callB2CantOverride_route@8 main_callB2Common_route@9 main_methodOne_route@10 main_methodCommon_route@11 main_b2CantOverride_route@12 main_methodTwo_route@13
    b main_switch_case_next@14

main_switch_case_next@14:
    b main_after_if_else@16

main_after_if_else@16:
    b main_after_if_else@18

main_after_if_else@18:
    // tests/approvals/multi-inheritance.algo.ts:45
    // export class MultiBases extends classes(NameStore, BaseOne, BaseTwo) {
    err

main_methodTwo_route@13:
    // tests/approvals/multi-inheritance.algo.ts:31
    // methodTwo() {
    callsub methodTwo
    b main_switch_case_next@14

main_b2CantOverride_route@12:
    // tests/approvals/multi-inheritance.algo.ts:17
    // b2CantOverride(): string {
    callsub b2CantOverride
    b main_switch_case_next@14

main_methodCommon_route@11:
    // tests/approvals/multi-inheritance.algo.ts:13
    // methodCommon() {
    callsub methodCommon
    b main_switch_case_next@14

main_methodOne_route@10:
    // tests/approvals/multi-inheritance.algo.ts:24
    // methodOne() {
    callsub methodOne
    b main_switch_case_next@14

main_callB2Common_route@9:
    // tests/approvals/multi-inheritance.algo.ts:60
    // callB2Common() {
    callsub callB2Common
    b main_switch_case_next@14

main_callB2CantOverride_route@8:
    // tests/approvals/multi-inheritance.algo.ts:56
    // callB2CantOverride() {
    callsub callB2CantOverride
    b main_switch_case_next@14

main_methodCallsSuper_route@7:
    // tests/approvals/multi-inheritance.algo.ts:52
    // methodCallsSuper() {
    callsub methodCallsSuper
    b main_switch_case_next@14

main_methodMulti_route@6:
    // tests/approvals/multi-inheritance.algo.ts:48
    // methodMulti() {
    callsub methodMulti
    b main_switch_case_next@14

main_create_NoOp@15:
    b main_after_if_else@16

main___algots__.defaultCreate@17:
    // tests/approvals/multi-inheritance.algo.ts:45
    // export class MultiBases extends classes(NameStore, BaseOne, BaseTwo) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti[routing]() -> void:
methodMulti:
    b methodMulti_block@0

methodMulti_block@0:
    // tests/approvals/multi-inheritance.algo.ts:48
    // methodMulti() {
    callsub tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper[routing]() -> void:
methodCallsSuper:
    b methodCallsSuper_block@0

methodCallsSuper_block@0:
    // tests/approvals/multi-inheritance.algo.ts:52
    // methodCallsSuper() {
    callsub tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride[routing]() -> void:
callB2CantOverride:
    b callB2CantOverride_block@0

callB2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:56
    // callB2CantOverride() {
    callsub tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common[routing]() -> void:
callB2Common:
    b callB2Common_block@0

callB2Common_block@0:
    // tests/approvals/multi-inheritance.algo.ts:60
    // callB2Common() {
    callsub tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne[routing]() -> void:
methodOne:
    b methodOne_block@0

methodOne_block@0:
    // tests/approvals/multi-inheritance.algo.ts:24
    // methodOne() {
    callsub tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon[routing]() -> void:
methodCommon:
    b methodCommon_block@0

methodCommon_block@0:
    // tests/approvals/multi-inheritance.algo.ts:13
    // methodCommon() {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride[routing]() -> void:
b2CantOverride:
    b b2CantOverride_block@0

b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:17
    // b2CantOverride(): string {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo[routing]() -> void:
methodTwo:
    b methodTwo_block@0

methodTwo_block@0:
    // tests/approvals/multi-inheritance.algo.ts:31
    // methodTwo() {
    callsub tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti() -> bytes:
tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti:
    b tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti_block@0

tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti_block@0:
    // tests/approvals/multi-inheritance.algo.ts:49
    // return 'multi-bases'
    pushbytes "multi-bases"
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper() -> bytes:
tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper:
    b tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper_block@0

tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper_block@0:
    // tests/approvals/multi-inheritance.algo.ts:53
    // return super.methodTwo()
    callsub tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride() -> bytes:
tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride:
    b tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride_block@0

tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:57
    // return super.class(BaseTwo).b2CantOverride()
    callsub tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common() -> bytes:
tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common:
    b tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common_block@0

tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common_block@0:
    // tests/approvals/multi-inheritance.algo.ts:61
    // return super.class(BaseTwo).methodCommon()
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne() -> bytes:
tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne:
    b tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne_block@0

tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne_block@0:
    // tests/approvals/multi-inheritance.algo.ts:25
    // return 'base-one'
    pushbytes "base-one"
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> bytes:
tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon:
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon_block@0

tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon_block@0:
    // tests/approvals/multi-inheritance.algo.ts:14
    // return 'common'
    bytec_1 // "common"
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride() -> bytes:
tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride:
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride_block@0

tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:18
    // return 'common'
    bytec_1 // "common"
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo() -> bytes:
tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo:
    b tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo_block@0

tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo_block@0:
    // tests/approvals/multi-inheritance.algo.ts:32
    // return 'base-two'
    bytec_2 // "base-two"
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride() -> bytes:
tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride:
    b tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride_block@0

tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:41
    // return 'base-two'
    bytec_2 // "base-two"
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.constructor() -> void:
constructor:
    b constructor_block@0

constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:45
    // export class MultiBases extends classes(NameStore, BaseOne, BaseTwo) {
    callsub polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor
    // tests/approvals/multi-inheritance.algo.ts:46
    // stateMulti = GlobalState({ initialValue: 'Hmmm' })
    pushbytes "stateMulti"
    pushbytes "Hmmm"
    app_global_put
    retsub


// polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor() -> void:
polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor:
    b polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_block@0

polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_block@0:
    b polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_block@1

polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_block@1:
    b polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2

polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::NameStore,tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2:
    callsub tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor
    callsub tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor:
    b tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor_block@0

tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:22
    // export class BaseOne extends CommonBase {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor
    // tests/approvals/multi-inheritance.algo.ts:23
    // stateOne = GlobalState({ initialValue: Uint64(45) })
    pushbytes "stateOne"
    pushint 45 // 45
    app_global_put
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor:
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@0

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:10
    // export class CommonBase extends Contract {
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@1

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@1:
    // tests/approvals/multi-inheritance.algo.ts:10
    // export class CommonBase extends Contract {
    b tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2:
    // tests/approvals/multi-inheritance.algo.ts:11
    // stateCommon = GlobalState<uint64>({ initialValue: 123 })
    pushbytes "stateCommon"
    pushint 123 // 123
    app_global_put
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor:
    b tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor_block@0

tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:29
    // export class BaseTwo extends CommonBase {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor
    // tests/approvals/multi-inheritance.algo.ts:30
    // stateTwo = GlobalState({ initialValue: 'Hello' })
    pushbytes "stateTwo"
    pushbytes "Hello"
    app_global_put
    retsub
