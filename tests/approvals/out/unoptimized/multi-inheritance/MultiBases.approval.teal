#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75 "common" "base-two"

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2

main_if_body@1:
    callsub constructor

main_after_if_else@2:

main_block@3:
    // tests/approvals/multi-inheritance.algo.ts:40
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@15

main_abi_routing@4:
    // tests/approvals/multi-inheritance.algo.ts:40
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    txna ApplicationArgs 0
    pushbytes 0x290eba9f // method "methodMulti()string"
    pushbytes 0x839d96ff // method "methodCallsSuper()string"
    pushbytes 0xa978ca56 // method "callB2CantOverride()string"
    pushbytes 0x88547eb8 // method "callB2Common()string"
    pushbytes 0xc32533e3 // method "methodOne()string"
    pushbytes 0x455c8d09 // method "methodCommon()string"
    pushbytes 0xf9f5142c // method "b2CantOverride()string"
    pushbytes 0x363b329e // method "methodTwo()string"
    uncover 8
    match main_methodMulti_route@5 main_methodCallsSuper_route@6 main_callB2CantOverride_route@7 main_callB2Common_route@8 main_methodOne_route@9 main_methodCommon_route@10 main_b2CantOverride_route@11 main_methodTwo_route@12

main_switch_case_default@13:

main_switch_case_next@14:

main_after_if_else@19:
    // tests/approvals/multi-inheritance.algo.ts:40
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    intc_0 // 0

main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20:
    return

main_methodTwo_route@12:
    // tests/approvals/multi-inheritance.algo.ts:26
    // methodTwo() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub methodTwo
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_b2CantOverride_route@11:
    // tests/approvals/multi-inheritance.algo.ts:12
    // b2CantOverride(): string {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub b2CantOverride
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_methodCommon_route@10:
    // tests/approvals/multi-inheritance.algo.ts:8
    // methodCommon() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub methodCommon
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_methodOne_route@9:
    // tests/approvals/multi-inheritance.algo.ts:19
    // methodOne() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub methodOne
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_callB2Common_route@8:
    // tests/approvals/multi-inheritance.algo.ts:55
    // callB2Common() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub callB2Common
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_callB2CantOverride_route@7:
    // tests/approvals/multi-inheritance.algo.ts:51
    // callB2CantOverride() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub callB2CantOverride
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_methodCallsSuper_route@6:
    // tests/approvals/multi-inheritance.algo.ts:47
    // methodCallsSuper() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub methodCallsSuper
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_methodMulti_route@5:
    // tests/approvals/multi-inheritance.algo.ts:43
    // methodMulti() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub methodMulti
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20

main_bare_routing@15:
    // tests/approvals/multi-inheritance.algo.ts:40
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@16

main_switch_case_default@17:

main_switch_case_next@18:
    b main_after_if_else@19

main___algots__.defaultCreate@16:
    // tests/approvals/multi-inheritance.algo.ts:40
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/multi-inheritance.algo.ts::MultiBases.__puya_arc4_router__@20


// tests/approvals/multi-inheritance.algo.ts::MultiBases.methodMulti() -> bytes:
methodMulti:

methodMulti_block@0:
    // tests/approvals/multi-inheritance.algo.ts:44
    // return 'multi-bases'
    pushbytes "multi-bases"
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.methodCallsSuper() -> bytes:
methodCallsSuper:

methodCallsSuper_block@0:
    // tests/approvals/multi-inheritance.algo.ts:48
    // return super.methodTwo()
    callsub methodTwo
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2CantOverride() -> bytes:
callB2CantOverride:

callB2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:52
    // return super.class(BaseTwo).b2CantOverride()
    callsub tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.callB2Common() -> bytes:
callB2Common:

callB2Common_block@0:
    // tests/approvals/multi-inheritance.algo.ts:56
    // return super.class(BaseTwo).methodCommon()
    callsub methodCommon
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne() -> bytes:
methodOne:

methodOne_block@0:
    // tests/approvals/multi-inheritance.algo.ts:20
    // return 'base-one'
    pushbytes "base-one"
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> bytes:
methodCommon:

methodCommon_block@0:
    // tests/approvals/multi-inheritance.algo.ts:9
    // return 'common'
    bytec_1 // "common"
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride() -> bytes:
b2CantOverride:

b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:13
    // return 'common'
    bytec_1 // "common"
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo() -> bytes:
methodTwo:

methodTwo_block@0:
    // tests/approvals/multi-inheritance.algo.ts:27
    // return 'base-two'
    bytec_2 // "base-two"
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride() -> bytes:
tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride:

tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride_block@0:
    // tests/approvals/multi-inheritance.algo.ts:36
    // return 'base-two'
    bytec_2 // "base-two"
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub


// tests/approvals/multi-inheritance.algo.ts::MultiBases.constructor() -> void:
constructor:

constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:40
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    callsub polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor
    // tests/approvals/multi-inheritance.algo.ts:41
    // stateMulti = GlobalState({ initialValue: 'Hmmm' })
    pushbytes "stateMulti"
    pushbytes "Hmmm"
    app_global_put
    retsub


// polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor() -> void:
polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor:

polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance.algo.ts::BaseOne,tests/approvals/multi-inheritance.algo.ts::BaseTwo>.constructor_block@0:
    callsub tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor
    callsub tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor:

tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:17
    // export class BaseOne extends CommonBase {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor
    // tests/approvals/multi-inheritance.algo.ts:18
    // stateOne = GlobalState({ initialValue: Uint64(45) })
    pushbytes "stateOne"
    pushint 45 // 45
    app_global_put
    retsub


// tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor:

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@0:

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_block@1:

tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2:
    // tests/approvals/multi-inheritance.algo.ts:6
    // stateCommon = GlobalState<uint64>({ initialValue: 123 })
    pushbytes "stateCommon"
    pushint 123 // 123
    app_global_put
    retsub


// tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor() -> void:
tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor:

tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor_block@0:
    // tests/approvals/multi-inheritance.algo.ts:24
    // export class BaseTwo extends CommonBase {
    callsub tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor
    // tests/approvals/multi-inheritance.algo.ts:25
    // stateTwo = GlobalState({ initialValue: 'Hello' })
    pushbytes "stateTwo"
    pushbytes "Hello"
    app_global_put
    retsub
