main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L25
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@10
    block@4: // abi_routing_L25
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "methodTwo()string" => block@5, method "b2CantOverride()string" => block@6, method "methodCommon()string" => block@7, * => block@8}
    block@5: // methodTwo_route_L27
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let to_encode%0#0: bytes = tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo()
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%7#0)
        let tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@6: // b2CantOverride_route_L36
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let to_encode%1#0: bytes = tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride()
        let length%1#0: uint64 = (len to_encode%1#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%12#0)
        let tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@7: // methodCommon_route_L9
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let to_encode%2#0: bytes = tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon()
        let length%2#0: uint64 = (len to_encode%2#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%2#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded_value%2#0)
        (log tmp%17#0)
        let tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@8: // switch_case_default_L25
        goto block@9
    block@9: // switch_case_next_L25
        goto block@14
    block@10: // bare_routing_L25
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {0u => block@11, * => block@12}
    block@11: // __algots__.defaultCreate_L25
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (== tmp%19#0 0u)
        (assert tmp%20#0) // can only call when creating
        tests/approvals/multi-inheritance.algo.ts::BaseTwo.__algots__.defaultCreate()
        let tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@12: // switch_case_default_L25
        goto block@13
    block@13: // switch_case_next_L25
        goto block@14
    block@14: // after_if_else_L25
        let tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#4: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#0 <- block@5, tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#1 <- block@6, tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#2 <- block@7, tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#3 <- block@11, tests/approvals/multi-inheritance.algo.ts::BaseTwo.__puya_arc4_router__%0#4 <- block@14)
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.methodTwo() -> bytes:
    block@0: // L27
        return "base-two"

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.b2CantOverride() -> bytes:
    block@0: // L36
        return "base-two"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> bytes:
    block@0: // L9
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.__algots__.defaultCreate() -> void:
    block@0: // L25
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::BaseTwo.constructor() -> void:
    block@0: // L25
        tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor()
        (app_global_put "stateTwo" "Hello")
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
    block@0: // L6
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L6
        (app_global_put "stateCommon" 123u)
        return 