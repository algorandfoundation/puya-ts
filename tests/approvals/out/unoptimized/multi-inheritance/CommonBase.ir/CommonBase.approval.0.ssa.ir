main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = tests/approvals/multi-inheritance.algo.ts::CommonBase.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.__puya_arc4_router__() -> bool:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "methodCommon()string" => block@2, method "b2CantOverride()string" => block@3, * => block@4}
    block@2: // methodCommon_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let to_encode%0#0: bytes = tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon()
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%7#0)
        return 1u
    block@3: // b2CantOverride_route_L17
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let to_encode%1#0: bytes = tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride()
        let length%1#0: uint64 = (len to_encode%1#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%12#0)
        return 1u
    block@4: // switch_case_default_L10
        goto block@5
    block@5: // switch_case_next_L10
        goto block@10
    block@6: // bare_routing_L10
        let tmp%13#0: uint64 = (txn OnCompletion)
        switch tmp%13#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L10
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        (assert tmp%15#0) // can only call when creating
        tests/approvals/multi-inheritance.algo.ts::CommonBase.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L10
        goto block@9
    block@9: // switch_case_next_L10
        goto block@10
    block@10: // after_if_else_L10
        return 0u

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> bytes:
    block@0: // L13
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride() -> bytes:
    block@0: // L17
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.__algots__.defaultCreate() -> void:
    block@0: // L10
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
    block@0: // L10
        @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor()
        (app_global_put "stateCommon" 123u)
        return 

subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor() -> void:
    block@0: // L1
        return 