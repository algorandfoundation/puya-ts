slot_allocation(dynamic, reserved=[])
main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L16
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L16
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@14
    block@3: // call_NoOp_L16
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "hashAddresses(byte[32],byte[32])byte[32]" => block@4, method "receiveB32(byte[32])byte[32]" => block@5, method "receiveBytes(byte[],uint64)void" => block@6, method "returnLength(byte[32])uint64" => block@7, method "test()void" => block@8, method "testArray()void" => block@9, method "test2()byte[]" => block@10, method "test3()void" => block@11, method "test4()void" => block@12, * => block@13}
    block@4: // hashAddresses_route_L17
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses[routing]()
        goto block@13
    block@5: // receiveB32_route_L21
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32[routing]()
        goto block@13
    block@6: // receiveBytes_route_L25
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes[routing]()
        goto block@13
    block@7: // returnLength_route_L29
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength[routing]()
        goto block@13
    block@8: // test_route_L33
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test[routing]()
        goto block@13
    block@9: // testArray_route_L47
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray[routing]()
        goto block@13
    block@10: // test2_route_L56
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test2[routing]()
        goto block@13
    block@11: // test3_route_L66
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test3[routing]()
        goto block@13
    block@12: // test4_route_L71
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test4[routing]()
        goto block@13
    block@13: // switch_case_next_L16
        goto block@15
    block@14: // create_NoOp_L16
        goto block@15
    block@15: // after_if_else_L16
        goto block@17
    block@16: // __algots__.defaultCreate_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__algots__.defaultCreate()
        exit 1u
    block@17: // after_if_else_L16
        exit 0u
    block@18: // after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/static-bytes.algo.ts::padTo32(b: bytes[16]) -> bytes[32]:
    block@0: // L12
        let tmp%0#0: bytes[32] = (bzero 32u)
        let reinterpret_bytes[32]%0#0: bytes[32] = (b| b#0 tmp%0#0)
        return reinterpret_bytes[32]%0#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes[32] = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes[32] = reinterpret_Encoded(uint8[32])%1#0
        let tmp%2#0: bytes[32] = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(tmp%0#0, tmp%1#0)
        let aggregate%length%0#0: uint64 = (len tmp%2#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%2#0
        let tmp%3#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32[routing]() -> void:
    block@0: // L21
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes[32] = reinterpret_Encoded(uint8[32])%0#0
        let tmp%1#0: bytes[32] = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%1#0
        let tmp%2#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes[routing]() -> void:
    block@0: // L25
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(tmp%0#0, tmp%1#0)
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength[routing]() -> void:
    block@0: // L29
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes[32] = reinterpret_Encoded(uint8[32])%0#0
        let tmp%1#0: uint64 = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(tmp%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test[routing]() -> void:
    block@0: // L33
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test()
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray[routing]() -> void:
    block@0: // L47
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray()
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test2[routing]() -> void:
    block@0: // L56
        let tmp%0#0: bytes = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test2()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test3[routing]() -> void:
    block@0: // L66
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test3()
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test4[routing]() -> void:
    block@0: // L71
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test4()
        exit 1u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(a1: bytes[32], a2: bytes[32]) -> bytes[32]:
    block@0: // L17
        let tmp%0#0: bytes = (concat a1#0 a2#0)
        let tmp%1#0: bytes[32] = (sha512_256 tmp%0#0)
        return tmp%1#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(b: bytes[32]) -> bytes[32]:
    block@0: // L21
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 32u)
        (assert tmp%1#0)
        let tmp%2#0: bytes[32] = (sha512_256 b#0)
        return tmp%2#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(b: bytes, length: uint64) -> void:
    block@0: // L25
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 length#0)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(b: bytes[32]) -> uint64:
    block@0: // L29
        let tmp%0#0: uint64 = (len b#0)
        return tmp%0#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test() -> void:
    block@0: // L33
        let reinterpret_bytes[32]%0#0: bytes[32] = (txn Sender)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(reinterpret_bytes[32]%0#0)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txn Sender)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(reinterpret_bytes[32]%1#0, 32u)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32("abcdefghabcdefghabcdefghabcdefgh")
        let tmp%0#0: bytes = (concat "" "abc")
        let tmp%1#0: bytes = (concat tmp%0#0 0xaaff)
        let tmp%2#0: bytes = (concat tmp%1#0 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        let awst_tmp%0#0: bytes = (concat tmp%2#0 SGVsbG8gQWxnb3JhbmQ=)
        let reinterpret_bytes[55]%0#0: bytes[55] = awst_tmp%0#0
        let tmp%3#0: uint64 = (len awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 55u)
        (assert tmp%4#0) // Length must be 55
        let joined#0: bytes[55] = reinterpret_bytes[55]%0#0
        let tmp%5#0: uint64 = (len joined#0)
        let tmp%6#0: bool = (== tmp%5#0 55u)
        (assert tmp%6#0)
        let reinterpret_bytes[32]%2#0: bytes[32] = (txn Sender)
        let length%0#0: uint64 = (len reinterpret_bytes[32]%2#0)
        let is_out_of_bounds%0#0: bool = (>= 0u length%0#0)
        let bounded_index%0#0: uint64 = (select 0u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 16u length%0#0)
        let bounded_index%1#0: uint64 = (select 16u length%0#0 is_out_of_bounds%1#0)
        let awst_tmp%1#0: bytes = (substring3 reinterpret_bytes[32]%2#0 bounded_index%0#0 bounded_index%1#0)
        let reinterpret_bytes[16]%0#0: bytes[16] = awst_tmp%1#0
        let tmp%7#0: uint64 = (len awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 16u)
        (assert tmp%8#0) // Length must be 16
        let tmp%9#0: bytes[32] = tests/approvals/static-bytes.algo.ts::padTo32(reinterpret_bytes[16]%0#0)
        let padded#0: bytes[32] = tmp%9#0
        let tmp%10#0: uint64 = (len padded#0)
        let tmp%11#0: bool = (== tmp%10#0 32u)
        (assert tmp%11#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray() -> void:
    block@0: // L47
        let reinterpret_bytes[32]%0#0: bytes[32] = (txn Sender)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txn Sender)
        let a.0#0: bytes[32] = reinterpret_bytes[32]%0#0
        let a.1#0: bytes[32] = reinterpret_bytes[32]%1#0
        let reinterpret_bytes[32]%2#0: bytes[32] = (txn Sender)
        let aggregate%length%0#0: uint64 = (len reinterpret_bytes[32]%2#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = reinterpret_bytes[32]%2#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint8[32][])%0#0: Encoded(uint8[32][]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(uint8[32][]) = aggregate%as_Encoded(uint8[32][])%0#0
        let slot%0#0: Encoded(uint8[32][])* = new()
        store(slot%0#0, encoded_array%0#0)
        let b#0: Encoded(uint8[32][])* = slot%0#0
        let slot_contents%0#0: Encoded(uint8[32][]) = load(b#0)
        let aggregate%length%1#0: uint64 = (len a.0#0)
        let aggregate%lengths_equal%1#0: bool = (== aggregate%length%1#0 32u)
        (assert aggregate%lengths_equal%1#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = a.0#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%length%2#0: uint64 = (len a.1#0)
        let aggregate%lengths_equal%2#0: bool = (== aggregate%length%2#0 32u)
        (assert aggregate%lengths_equal%2#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = a.1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint8[32])%2#0)
        let aggregate%as_Encoded(uint8[32][])%1#0: Encoded(uint8[32][]) = aggregate%head%2#0
        let tmp%0#0: Encoded(uint8[32][]) = aggregate%as_Encoded(uint8[32][])%1#0
        let concat%0#0: Encoded(uint8[32][]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(b#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint8[32][]) = load(b#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 32u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 32u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[32]) = aggregate%encoded_element%0#0
        let values%0#0: bytes[32] = array_item%0#0
        let tmp%1#0: bytes = (b& a.0#0 values%0#0)
        let bitAnd#0: bytes[32] = tmp%1#0
        let reinterpret_bytes[32]%3#0: bytes[32] = (txn Sender)
        let tmp%2#0: bool = (== bitAnd#0 reinterpret_bytes[32]%3#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test2() -> bytes:
    block@0: // L56
        let result#0: bytes = 0x0000000000000000000000000000000000000000000000000000000000000000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L59
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let result#1: bytes = φ(result#0 <- block@0, result#2 <- block@2)
        let tmp%0#0: bool = (< i#1 5u)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // while_body_L59
        let tmp%1#0: bytes = (concat result#1 result#1)
        let tmp%2#0: bytes[32] = (sha256 tmp%1#0)
        let result#2: bytes = tmp%2#0
        let tmp%3#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%3#0
        goto block@1
    block@3: // after_while_L59
        return result#1

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test3() -> void:
    block@0: // L66
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test4() -> void:
    block@0: // L71
        let reinterpret_bytes[32]%0#0: bytes[32] = (txn Sender)
        let b#0: bytes = reinterpret_bytes[32]%0#0
        let reinterpret_bytes[32]%1#0: bytes[32] = b#0
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 32u)
        (assert tmp%1#0) // Length must be 32
        let addr#0: bytes[32] = reinterpret_bytes[32]%1#0
        let tmp%2#0: uint64 = (len addr#0)
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__algots__.defaultCreate() -> void:
    block@0: // L16
        return 