{
    "name": "StaticBytesAlgo",
    "structs": {},
    "methods": [
        {
            "name": "hashAddresses",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "a1"
                },
                {
                    "type": "byte[32]",
                    "name": "a2"
                }
            ],
            "returns": {
                "type": "byte[32]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveB32",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "byte[32]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveBytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "returnLength",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        662
                    ],
                    "errorMessage": "Length must be 16"
                },
                {
                    "pc": [
                        830
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        619
                    ],
                    "errorMessage": "Length must be 55"
                },
                {
                    "pc": [
                        167,
                        186,
                        205,
                        238,
                        257,
                        276,
                        304,
                        333,
                        365
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        418
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        172,
                        191,
                        210,
                        243,
                        262,
                        281,
                        309,
                        338,
                        370
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        738
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        349,
                        384,
                        686,
                        707,
                        719
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        727
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        855
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEACABECYCAAQVH3x1gCB//////////////////////////////////////////zUAKEIAAEIAADEbIhNBAUtCAAA2GgCABCW7NGWABGP77b6ABFxvSZyABNcSgOqABKeAAN6ABLl2eI+ABJ1Sw4+ABN+SDzeABD1GNFxPCY4JANYAtgCZAH0AagBXADYAIwAQQgAAQgAAQgAAIkUBQgAAQzEZIhJEMRgiE0SIAoUkRQFC/+wxGSISRDEYIhNEiAJuJEUBQv/ZMRkiEkQxGCITRIgCE0kVFlcGAk8BUClPAVCwJEUBQv+4MRkiEkQxGCITRIgBqCRFAUL/pTEZIhJEMRgiE0SIAOMkRQFC/5IxGSISRDEYIhNENhoBiADDFilPAVCwJEUBQv92MRkiEkQxGCITRDYaAVcCADYaAheIAJIkRQFC/1kxGSISRDEYIhNENhoBiABsSRUjEkQpTwFQsCRFAUL/OTEZIhJEMRgiE0Q2GgE2GgKIADxJFSMSRClPAVCwJEUBQv8WMRkiTwGOAQAJQgAAQgAAQv7+MRgiEkSIAZ4kRQFC/vaKAQFCAAAjr4v/q4mKAgFCAACL/ov/UAOJigEBQgAAi/8VIxJEi/8DiYoCAEIAAIv+FYv/EkSJigEBQgAAi/8ViUIAADEAiP/QSDEAI4j/2YAgYWJjZGVmZ2hhYmNkZWZnaGFiY2RlZmdoYWJjZGVmZ2iI/6RIKIADYWJjUIACqv9QgCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx05VRQgA5IZWxsbyBBbGdvcmFuZFBJFYE3EkQVgTcSRDEASRUiSwEPIksCTwJNTgElSwEPJU8CTwJNTwJPAk8CUkkVJRJEiP8SFSMSRIlCAAAxADEATgExAEkVIxJEKE8BUIgAkklPAj9JPk4BSwIVIxJESwIoTwFQSwQVIxJETwRQTwJPAVBLAU8BPz4iIwsjWKwxABJEiYoAAUIAAIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiQgAAiwGBBQxBABNCAACLAElQAYwAiwEkCIwBQv/liUIAAIlCAAAxAEkVIxJEFSMSRIlCAACJQgAANACTNACBgAJLAgkiVDUAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}