{
    "name": "StaticBytesAlgo",
    "structs": {},
    "methods": [
        {
            "name": "hashAddresses",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "a1"
                },
                {
                    "type": "byte[32]",
                    "name": "a2"
                }
            ],
            "returns": {
                "type": "byte[32]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveB32",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "byte[32]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveBytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "returnLength",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        510
                    ],
                    "errorMessage": "Length must be 55"
                },
                {
                    "pc": [
                        135,
                        152,
                        181,
                        198,
                        215,
                        240,
                        267,
                        296
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        339
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        140,
                        157,
                        186,
                        203,
                        220,
                        245,
                        272,
                        301
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        283,
                        315,
                        526,
                        545,
                        556
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        563
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        657
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEgNyYCBBUffHUAgCB//////////////////////////////////////////zUAMRsiE0EBCjYaAIAEJbs0ZYAEY/vtvoAEXG9JnIAE1xKA6oAEp4AA3oAEuXZ4j4AEnVLDj4AE35IPN08IjggAowCGAGsAUgBBADAAEwACIkMxGSISRDEYIhNEiAHzI0L/7jEZIhJEMRgiE0SIAaNJFRZXBgJMUChMULAjQv/RMRkiEkQxGCITRIgBRiNC/8AxGSISRDEYIhNEiAC1I0L/rzEZIhJEMRgiE0Q2GgGIAJoWKExQsCNC/5YxGSISRDEYIhNENhoBVwIANhoCF4gAbyNC/3sxGSISRDEYIhNENhoBiABOSRUkEkQoTFCwI0L/XjEZIhJEMRgiE0Q2GgE2GgKIACRJFSQSRChMULAjQv8+MRkiTI4BAANC/zIxGCISRIgBLSNC/yeKAgGL/ov/UAOJigEBi/8VJBJEi/8DiYoCAIv+FYv/EkSJigEBi/8ViTEAiP/cSDEAJIj/4oAgYWJjZGVmZ2hhYmNkZWZnaGFiY2RlZmdoYWJjZGVmZ2iI/7BIKYADYWJjUIACqv9QgCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx05VRQgA5IZWxsbyBBbGdvcmFuZFBJFSUSRBUlEkSJMQBJTDEASRUkEkQpTFCIAHBJTwI/ST5MSwIVJBJESwIpTFBLBBUkEkRPBFBPAkxQSwFMPz4iJAskWKwxABJEiYoAAYAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiiwGBBQxBABCLAElQAYwAiwEjCIwBQv/oiYmJNACTNACBgAJLAgkiVDUAiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}