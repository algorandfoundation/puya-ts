#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 32 55
    bytecblock 0x 0x151f7c75
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0

main_block@0:

main_block@1:
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@11

main_abi_routing@2:
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x25bb3465 // method "hashAddresses(byte[32],byte[32])byte[32]"
    pushbytes 0x63fbedbe // method "receiveB32(byte[32])byte[32]"
    pushbytes 0x5c6f499c // method "receiveBytes(byte[],uint64)void"
    pushbytes 0xd71280ea // method "returnLength(byte[32])uint64"
    pushbytes 0xa78000de // method "test()void"
    pushbytes 0xb976788f // method "testArray()void"
    uncover 6
    match main_hashAddresses_route@3 main_receiveB32_route@4 main_receiveBytes_route@5 main_returnLength_route@6 main_test_route@7 main_testArray_route@8

main_switch_case_default@9:

main_switch_case_next@10:

main_after_if_else@15:
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16:
    return

main_testArray_route@8:
    // tests/approvals/static-bytes.algo.ts:41
    // testArray() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testArray
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16

main_test_route@7:
    // tests/approvals/static-bytes.algo.ts:31
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16

main_returnLength_route@6:
    // tests/approvals/static-bytes.algo.ts:27
    // returnLength(b: bytes<32>): uint64 {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/static-bytes.algo.ts:27
    // returnLength(b: bytes<32>): uint64 {
    callsub returnLength
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16

main_receiveBytes_route@5:
    // tests/approvals/static-bytes.algo.ts:23
    // receiveBytes(b: bytes, length: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/approvals/static-bytes.algo.ts:23
    // receiveBytes(b: bytes, length: uint64) {
    callsub receiveBytes
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16

main_receiveB32_route@4:
    // tests/approvals/static-bytes.algo.ts:19
    // receiveB32(b: bytes<32>) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/static-bytes.algo.ts:19
    // receiveB32(b: bytes<32>) {
    callsub receiveB32
    dup
    len
    intc_2 // 32
    ==
    assert // invalid size
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16

main_hashAddresses_route@3:
    // tests/approvals/static-bytes.algo.ts:15
    // hashAddresses(a1: bytes<32>, a2: bytes<32>): bytes<32> {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/static-bytes.algo.ts:15
    // hashAddresses(a1: bytes<32>, a2: bytes<32>): bytes<32> {
    callsub hashAddresses
    dup
    len
    intc_2 // 32
    ==
    assert // invalid size
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16

main_bare_routing@11:
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@12

main_switch_case_default@13:

main_switch_case_next@14:
    b main_after_if_else@15

main___algots__.defaultCreate@12:
    // tests/approvals/static-bytes.algo.ts:14
    // class StaticBytesAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__@16


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(a1: bytes, a2: bytes) -> bytes:
hashAddresses:
    // tests/approvals/static-bytes.algo.ts:15
    // hashAddresses(a1: bytes<32>, a2: bytes<32>): bytes<32> {
    proto 2 1

hashAddresses_block@0:
    // tests/approvals/static-bytes.algo.ts:16
    // return sha512_256(a1.concat(a2))
    frame_dig -2
    frame_dig -1
    concat
    sha512_256
    retsub


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(b: bytes) -> bytes:
receiveB32:
    // tests/approvals/static-bytes.algo.ts:19
    // receiveB32(b: bytes<32>) {
    proto 1 1

receiveB32_block@0:
    // tests/approvals/static-bytes.algo.ts:20
    // assert(b.length === 32)
    frame_dig -1
    len
    intc_2 // 32
    ==
    assert
    // tests/approvals/static-bytes.algo.ts:21
    // return sha512_256(b)
    frame_dig -1
    sha512_256
    retsub


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(b: bytes, length: uint64) -> void:
receiveBytes:
    // tests/approvals/static-bytes.algo.ts:23
    // receiveBytes(b: bytes, length: uint64) {
    proto 2 0

receiveBytes_block@0:
    // tests/approvals/static-bytes.algo.ts:24
    // assert(b.length === length)
    frame_dig -2
    len
    frame_dig -1
    ==
    assert
    retsub


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(b: bytes) -> uint64:
returnLength:
    // tests/approvals/static-bytes.algo.ts:27
    // returnLength(b: bytes<32>): uint64 {
    proto 1 1

returnLength_block@0:
    // tests/approvals/static-bytes.algo.ts:28
    // return b.length
    frame_dig -1
    len
    retsub


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test() -> void:
test:

test_block@0:
    // tests/approvals/static-bytes.algo.ts:32
    // this.receiveB32(Txn.sender.bytes)
    txn Sender
    callsub receiveB32
    pop
    // tests/approvals/static-bytes.algo.ts:33
    // this.receiveBytes(Txn.sender.bytes, 32)
    txn Sender
    intc_2 // 32
    callsub receiveBytes
    // tests/approvals/static-bytes.algo.ts:35
    // this.receiveB32(Bytes`abcdefghabcdefghabcdefghabcdefgh`.toFixed({ length: 32 }))
    pushbytes "abcdefghabcdefghabcdefghabcdefgh"
    callsub receiveB32
    pop
    // tests/approvals/static-bytes.algo.ts:37
    // const joined = Bytes<55>`${fromUtf8}${fromHex}${fromBase32}${fromBase64}`
    bytec_0 // ""
    // tests/approvals/static-bytes.algo.ts:5
    // const fromUtf8 = Bytes<3>('abc')
    pushbytes "abc"
    // tests/approvals/static-bytes.algo.ts:37
    // const joined = Bytes<55>`${fromUtf8}${fromHex}${fromBase32}${fromBase64}`
    concat
    // tests/approvals/static-bytes.algo.ts:6
    // const fromHex = Bytes.fromHex<2>('AAFF')
    pushbytes 0xaaff
    // tests/approvals/static-bytes.algo.ts:37
    // const joined = Bytes<55>`${fromUtf8}${fromHex}${fromBase32}${fromBase64}`
    concat
    // tests/approvals/static-bytes.algo.ts:7
    // const fromBase32 = Bytes.fromBase32<36>('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ')
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
    // tests/approvals/static-bytes.algo.ts:37
    // const joined = Bytes<55>`${fromUtf8}${fromHex}${fromBase32}${fromBase64}`
    concat
    // tests/approvals/static-bytes.algo.ts:8
    // const fromBase64 = Bytes.fromBase64<14>('SGVsbG8gQWxnb3JhbmQ=')
    pushbytes base64(SGVsbG8gQWxnb3JhbmQ=)
    // tests/approvals/static-bytes.algo.ts:37
    // const joined = Bytes<55>`${fromUtf8}${fromHex}${fromBase32}${fromBase64}`
    concat
    dup
    len
    intc_3 // 55
    ==
    assert // Length must be 55
    // tests/approvals/static-bytes.algo.ts:38
    // assert(joined.length === 55)
    len
    intc_3 // 55
    ==
    assert
    retsub


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray() -> void:
testArray:

testArray_block@0:
    // tests/approvals/static-bytes.algo.ts:42
    // const a = [Txn.sender.bytes, Txn.sender.bytes] as const
    txn Sender
    dup
    swap
    // tests/approvals/static-bytes.algo.ts:43
    // const b = new MutableArray<bytes<32>>(Txn.sender.bytes)
    txn Sender
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // tests/approvals/static-bytes.algo.ts:42
    // const a = [Txn.sender.bytes, Txn.sender.bytes] as const
    bytec_0 // 0x
    dig 2
    concat
    // tests/approvals/static-bytes.algo.ts:44
    // b.push(...a)
    bytec_0 // 0x
    swap
    concat
    // tests/approvals/static-bytes.algo.ts:42
    // const a = [Txn.sender.bytes, Txn.sender.bytes] as const
    bytec_0 // 0x
    uncover 4
    concat
    // tests/approvals/static-bytes.algo.ts:44
    // b.push(...a)
    concat
    dig 1
    loads
    swap
    concat // on error: max array length exceeded
    dig 1
    swap
    stores
    // tests/approvals/static-bytes.algo.ts:46
    // const bitAnd = a[0].bitwiseAnd(b[0])
    loads
    intc_0 // 0
    intc_2 // 32
    *
    intc_2 // 32
    extract3
    intc_0 // 0
    intc_2 // 32
    extract3
    b&
    // tests/approvals/static-bytes.algo.ts:47
    // assert(bitAnd === Txn.sender.bytes)
    txn Sender
    ==
    assert
    retsub


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:

_puya_lib.mem.new_slot@entry:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_0 // 0
    setbit // on error: no available slots
    store 0
    retsub
