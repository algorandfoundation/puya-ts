main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L16
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@9
    block@4: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getVeryImportantValue()string" => block@5, method "simpleAbiMethod(uint64,uint64)uint64" => block@6, * => block@7}
    block@5: // getVeryImportantValue_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: string = tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.getVeryImportantValue()
        let array%length%0#1: uint64 = (len tmp%7#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 tmp%7#0)
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let tmp%8#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%0#1
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@6: // simpleAbiMethod_route_L17
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%16#0: uint64 = tests/approvals/inheritance-a.algo.ts::Arc4Contract.simpleAbiMethod(tmp%14#0, tmp%15#0)
        let array%val_as_bytes%0#1: bytes[8] = (itob tmp%16#0)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let tmp%17#0: Encoded(uint64) = array%as_Encoded(uint64)%0#1
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@7: // switch_case_default_L16
        goto block@8
    block@8: // switch_case_next_L16
        goto block@13
    block@9: // bare_routing_L16
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L16
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__algots__.defaultCreate()
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@11: // switch_case_default_L16
        goto block@12
    block@12: // switch_case_next_L16
        goto block@13
    block@13: // after_if_else_L16
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#3: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#0 <- block@5, tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#1 <- block@6, tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#2 <- block@10, tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#3 <- block@13)
        return tmp%0#0

subroutine tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.getVeryImportantValue() -> string:
    block@0: // L18
        return "42hello"

subroutine tests/approvals/inheritance-a.algo.ts::Arc4Contract.simpleAbiMethod(a: uint64, b: uint64) -> uint64:
    block@0: // L17
        let tmp%0#0: uint64 = (+ a#0 b#0)
        return tmp%0#0

subroutine tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__algots__.defaultCreate() -> void:
    block@0: // L16
        return 

subroutine tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.constructor() -> void:
    block@0: // L16
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L16
        (app_global_put "concreteState" "testing")
        return 