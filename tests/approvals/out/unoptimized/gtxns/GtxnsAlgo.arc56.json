{
    "name": "GtxnsAlgo",
    "structs": {
        "reflectAllPayResult": [
            {
                "name": "sender",
                "type": "byte[32]"
            },
            {
                "name": "fee",
                "type": "uint64"
            },
            {
                "name": "firstValid",
                "type": "uint64"
            },
            {
                "name": "firstValidTime",
                "type": "uint64"
            },
            {
                "name": "lastValid",
                "type": "uint64"
            },
            {
                "name": "note",
                "type": "byte[]"
            },
            {
                "name": "lease",
                "type": "byte[32]"
            },
            {
                "name": "typeBytes",
                "type": "byte[]"
            },
            {
                "name": "groupIndex",
                "type": "uint64"
            },
            {
                "name": "txnId",
                "type": "byte[32]"
            },
            {
                "name": "rekeyTo",
                "type": "byte[32]"
            },
            {
                "name": "receiver",
                "type": "byte[32]"
            },
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "closeRemainderTo",
                "type": "byte[32]"
            }
        ]
    },
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [
                {
                    "type": "appl",
                    "name": "other"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reflectAllPay",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])",
                "struct": "reflectAllPayResult"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        507
                    ],
                    "errorMessage": "OCA must be NoOp"
                },
                {
                    "pc": [
                        82,
                        270,
                        297,
                        314,
                        331
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        525
                    ],
                    "errorMessage": "Other txn must be NoOp"
                },
                {
                    "pc": [
                        388
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        359
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        87,
                        275,
                        302,
                        319,
                        336
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        130,
                        181,
                        216,
                        225,
                        234,
                        247
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        285
                    ],
                    "errorMessage": "transaction type is appl"
                },
                {
                    "pc": [
                        97,
                        372
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEgBiYDAATfkg83C0hlbGxvIHRlc3Q0MRsiE0EBNjYaAIAEp4AA3oAE8ZCFJCmABO20+XOABBPealRPBY4FAPsA6gDZAL4AAiJDMRkiEkQxGCITRDEWIwlJOBAjEkSIAchODU4MTgtOCk4JTghOB04GTgVOBE4DTgJMSRUkEkQoTFBMFlBMFlBMFlBMFlBLARUWVwYCTwJQKEsBUE4CFYH0AQhMgfQBFlcGAlBLAxUkEkRPA1BLAxUWVwYCTwRQTwNMUE4CTBZXBgJQTwIWUEsCFSQSRE8CUEsCFSQSRE8CUEsCFSQSRE8CUE8CFlBLAhUkEkRPAlBMUIAEFR98dUxQsCNC/0MxGSISRDEYIhNEMRYjCUk4ECUSRIgA4yNC/ygxGSISRDEYIhNEiADFI0L/FzEZIhJEMRgiE0SIADkjQv8GMRkiEkQxGCITRIgAGyNC/vUxGSJMjgEAA0L+6TEYIhJEiAEaI0L+3iI4ECMSRCI4CCINRImKAAAoSTIEI0QiiwOLAgxBAGiLA0mMATgQSYwAJRJBAA+LATgYFrCLAyMIjANC/9qLAIEEEkEACYsBOBEWsEL/5osAgQMSQQAJiwE4IRawQv/ViwAjEkEACIsBOAewQv/GiwCBAhJBAAiLATgKsEL/tosBOC0WsEL/rYkxGSISRDEQJRJEKrCJigEAi/84GSISRIv/OBAlEkSL/zg+KhJEi/8iwhopEkSL/zgYMggSRImKAQ6L/zgAi/84AYv/OAKL/zgDi/84BIv/OAWL/zgGi/84D4v/OBaL/zgXi/84IIv/OAeL/zgIi/84CU8NTw1PDU8NTw1PDU8NTw1PDU8NTw1PDU8NTw2JiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}