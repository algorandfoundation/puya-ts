main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L16
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@11
    block@2: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, method "test2()void" => block@4, method "test3()void" => block@5, method "test4(appl)void" => block@6, method "reflectAllPay(pay)(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])" => block@7, method "test5(txn)uint64" => block@8, * => block@9}
    block@3: // test_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test()
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@4: // test2_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test2()
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@5: // test3_route_L47
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test3()
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@6: // test4_route_L53
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let tmp%19#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%19#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 appl)
        (assert gtxn_type_matches%0#0) // transaction type is appl
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test4(gtxn_idx%0#0)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@7: // reflectAllPay_route_L61
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        let tmp%24#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%24#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%25#0: Encoded(uint8[32],uint64,uint64,uint64,uint64,(len+uint8[]),uint8[32],(len+uint8[]),uint64,uint8[32],uint8[32],uint8[32],uint64,uint8[32]) = tests/approvals/gtxns.algo.ts::GtxnsAlgo.reflectAllPay(gtxn_idx%1#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 tmp%25#0)
        (log tmp%26#0)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@8: // test5_route_L80
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let tmp%31#0: uint64 = (txn GroupIndex)
        let gtxn_idx%2#0: uint64 = (- tmp%31#0 1u)
        let tmp%32#0: uint64 = tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5(gtxn_idx%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%32#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%33#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%34#0: bytes = (concat 0x151f7c75 tmp%33#0)
        (log tmp%34#0)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@16
    block@9: // switch_case_default_L16
        goto block@10
    block@10: // switch_case_next_L16
        goto block@15
    block@11: // bare_routing_L16
        let tmp%35#0: uint64 = (txn OnCompletion)
        switch tmp%35#0 {0u => block@12, * => block@13}
    block@12: // __algots__.defaultCreate_L16
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (== tmp%36#0 0u)
        (assert tmp%37#0) // can only call when creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate()
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@16
    block@13: // switch_case_default_L16
        goto block@14
    block@14: // switch_case_next_L16
        goto block@15
    block@15: // after_if_else_L16
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#7: bool = 0u
        goto block@16
    block@16: // after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#6 <- block@12, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#7 <- block@15)
        return tmp%0#0

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test() -> void:
    block@0: // L17
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#0: uint64 = ((gtxns Amount) 0u)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test2() -> void:
    block@0: // L21
        let tmp%0#0: uint64 = (global GroupSize)
        (assert 1u) // Step cannot be zero
        let temp#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L22
        let temp#1: uint64 = φ(temp#0 <- block@0, temp#2 <- block@20)
        let continue_looping%0#0: bool = (< temp#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@21
    block@2: // for_body_L22
        let i#0: uint64 = temp#1
        let txn#0: uint64 = i#0
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%1#0: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#0 ? block@3 : block@5
    block@3: // if_body_L25
        goto block@4
    block@4: // L25
        let tmp%2#0: uint64 = ((gtxns ApplicationID) txn#0)
        let tmp%3#0: bytes[8] = (itob tmp%2#0)
        (log tmp%3#0)
        goto block@19
    block@5: // after_if_else_L25
        let tmp%4#0: bool = (== awst_tmp%0#0 4u)
        goto tmp%4#0 ? block@6 : block@8
    block@6: // if_body_L28
        goto block@7
    block@7: // L28
        let tmp%5#0: uint64 = ((gtxns XferAsset) txn#0)
        let tmp%6#0: bytes[8] = (itob tmp%5#0)
        (log tmp%6#0)
        goto block@19
    block@8: // after_if_else_L28
        let tmp%7#0: bool = (== awst_tmp%0#0 3u)
        goto tmp%7#0 ? block@9 : block@11
    block@9: // if_body_L31
        goto block@10
    block@10: // L31
        let tmp%8#0: uint64 = ((gtxns ConfigAsset) txn#0)
        let tmp%9#0: bytes[8] = (itob tmp%8#0)
        (log tmp%9#0)
        goto block@19
    block@11: // after_if_else_L31
        let tmp%10#0: bool = (== awst_tmp%0#0 1u)
        goto tmp%10#0 ? block@12 : block@14
    block@12: // if_body_L34
        goto block@13
    block@13: // L34
        let tmp%11#0: account = ((gtxns Receiver) txn#0)
        (log tmp%11#0)
        goto block@19
    block@14: // after_if_else_L34
        let tmp%12#0: bool = (== awst_tmp%0#0 2u)
        goto tmp%12#0 ? block@15 : block@17
    block@15: // if_body_L37
        goto block@16
    block@16: // L37
        let tmp%13#0: bytes[32] = ((gtxns VotePK) txn#0)
        (log tmp%13#0)
        goto block@19
    block@17: // after_if_else_L37
        goto block@18
    block@18: // L40
        let tmp%14#0: uint64 = ((gtxns FreezeAsset) txn#0)
        let tmp%15#0: bytes[8] = (itob tmp%14#0)
        (log tmp%15#0)
        goto block@19
    block@19: // L24
        goto block@20
    block@20: // for_footer_L22
        let temp#2: uint64 = (+ temp#1 1u)
        goto block@1
    block@21: // after_for_L22
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test3() -> void:
    block@0: // L47
        let tmp%0#0: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // OCA must be NoOp
        let tmp%2#0: uint64 = (txn TypeEnum)
        let tmp%3#0: bool = (== tmp%2#0 6u)
        (assert tmp%3#0)
        (log "Hello test4")
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test4(other: uint64) -> void:
    block@0: // L53
        let tmp%0#0: uint64 = ((gtxns OnCompletion) other#0)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // Other txn must be NoOp
        let tmp%2#0: uint64 = ((gtxns TypeEnum) other#0)
        let tmp%3#0: bool = (== tmp%2#0 6u)
        (assert tmp%3#0)
        let tmp%4#0: bytes = ((gtxns LastLog) other#0)
        let tmp%5#0: bool = (== tmp%4#0 "Hello test4")
        (assert tmp%5#0)
        let tmp%6#0: bytes = ((gtxnsas ApplicationArgs) other#0 0u)
        let tmp%7#0: bool = (== tmp%6#0 method "test3()void")
        (assert tmp%7#0)
        let tmp%8#0: uint64 = ((gtxns ApplicationID) other#0)
        let tmp%9#0: uint64 = (global CurrentApplicationID)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0)
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.reflectAllPay(pay: uint64) -> Encoded(uint8[32],uint64,uint64,uint64,uint64,(len+uint8[]),uint8[32],(len+uint8[]),uint64,uint8[32],uint8[32],uint8[32],uint64,uint8[32]):
    block@0: // L61
        let reinterpret_bytes[32]%0#0: bytes[32] = ((gtxns Sender) pay#0)
        let tmp%0#0: uint64 = ((gtxns Fee) pay#0)
        let tmp%1#0: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%2#0: uint64 = ((gtxns FirstValidTime) pay#0)
        let tmp%3#0: uint64 = ((gtxns LastValid) pay#0)
        let tmp%4#0: bytes = ((gtxns Note) pay#0)
        let tmp%5#0: bytes[32] = ((gtxns Lease) pay#0)
        let tmp%6#0: bytes = ((gtxns Type) pay#0)
        let tmp%7#0: uint64 = ((gtxns GroupIndex) pay#0)
        let tmp%8#0: bytes[32] = ((gtxns TxID) pay#0)
        let reinterpret_bytes[32]%1#0: bytes[32] = ((gtxns RekeyTo) pay#0)
        let reinterpret_bytes[32]%2#0: bytes[32] = ((gtxns Receiver) pay#0)
        let tmp%9#0: uint64 = ((gtxns Amount) pay#0)
        let reinterpret_bytes[32]%3#0: bytes[32] = ((gtxns CloseRemainderTo) pay#0)
        let aggregate%length%0#0: uint64 = (len reinterpret_bytes[32]%0#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = reinterpret_bytes[32]%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%length%1#0: uint64 = (len tmp%4#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%4#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 244u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 244u aggregate%data_length%0#0)
        let aggregate%length%2#0: uint64 = (len tmp%5#0)
        let aggregate%lengths_equal%1#0: bool = (== aggregate%length%2#0 32u)
        (assert aggregate%lengths_equal%1#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = tmp%5#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%length%3#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%6#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%length%4#0: uint64 = (len tmp%8#0)
        let aggregate%lengths_equal%2#0: bool = (== aggregate%length%4#0 32u)
        (assert aggregate%lengths_equal%2#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = tmp%8#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint8[32])%2#0)
        let aggregate%length%5#0: uint64 = (len reinterpret_bytes[32]%1#0)
        let aggregate%lengths_equal%3#0: bool = (== aggregate%length%5#0 32u)
        (assert aggregate%lengths_equal%3#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%3#0: Encoded(uint8[32]) = reinterpret_bytes[32]%1#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint8[32])%3#0)
        let aggregate%length%6#0: uint64 = (len reinterpret_bytes[32]%2#0)
        let aggregate%lengths_equal%4#0: bool = (== aggregate%length%6#0 32u)
        (assert aggregate%lengths_equal%4#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%4#0: Encoded(uint8[32]) = reinterpret_bytes[32]%2#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint8[32])%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%length%7#0: uint64 = (len reinterpret_bytes[32]%3#0)
        let aggregate%lengths_equal%5#0: bool = (== aggregate%length%7#0 32u)
        (assert aggregate%lengths_equal%5#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%5#0: Encoded(uint8[32]) = reinterpret_bytes[32]%3#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint8[32])%5#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%13#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64,uint64,uint64,(len+uint8[]),uint8[32],(len+uint8[]),uint64,uint8[32],uint8[32],uint8[32],uint64,uint8[32])%0#0: Encoded(uint8[32],uint64,uint64,uint64,uint64,(len+uint8[]),uint8[32],(len+uint8[]),uint64,uint8[32],uint8[32],uint8[32],uint64,uint8[32]) = aggregate%concat%1#0
        let tmp%10#0: Encoded(uint8[32],uint64,uint64,uint64,uint64,(len+uint8[]),uint8[32],(len+uint8[]),uint64,uint8[32],uint8[32],uint8[32],uint64,uint8[32]) = aggregate%as_Encoded(uint8[32],uint64,uint64,uint64,uint64,(len+uint8[]),uint8[32],(len+uint8[]),uint64,uint8[32],uint8[32],uint8[32],uint64,uint8[32])%0#0
        return tmp%10#0

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5(txn: uint64) -> uint64:
    block@0: // L80
        let tmp%0#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L81
        return 1u
    block@2: // else_body_L83
        let tmp%2#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%3#0: bool = (== tmp%2#0 4u)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L83
        return 0u
    block@4: // after_if_else_L83
        goto block@5
    block@5: // after_if_else_L81
        return 0u

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L16
        return 