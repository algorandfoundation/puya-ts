#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 32 6
    bytecblock 0xdf920f37 0x "Hello test4"

main_block@0:

main_block@1:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@10

main_abi_routing@2:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    pushbytes 0xf1908524 // method "test2()void"
    bytec_0 // method "test3()void"
    pushbytes 0xedb4f973 // method "test4(appl)void"
    pushbytes 0x13de6a54 // method "reflectAllPay(pay)(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])"
    uncover 5
    match main_test_route@3 main_test2_route@4 main_test3_route@5 main_test4_route@6 main_reflectAllPay_route@7

main_switch_case_default@8:

main_switch_case_next@9:

main_after_if_else@14:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15:
    return

main_reflectAllPay_route@7:
    // tests/approvals/gtxns.algo.ts:60
    // reflectAllPay(pay: gtxn.PaymentTxn) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/gtxns.algo.ts:60
    // reflectAllPay(pay: gtxn.PaymentTxn) {
    callsub reflectAllPay
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15

main_test4_route@6:
    // tests/approvals/gtxns.algo.ts:52
    // test4(other: gtxn.ApplicationCallTxn) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // appl
    ==
    assert // transaction type is appl
    // tests/approvals/gtxns.algo.ts:52
    // test4(other: gtxn.ApplicationCallTxn) {
    callsub test4
    intc_1 // 1
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15

main_test3_route@5:
    // tests/approvals/gtxns.algo.ts:46
    // test3() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test3
    intc_1 // 1
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15

main_test2_route@4:
    // tests/approvals/gtxns.algo.ts:20
    // test2() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test2
    intc_1 // 1
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15

main_test_route@3:
    // tests/approvals/gtxns.algo.ts:16
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    intc_1 // 1
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15

main_bare_routing@10:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@11

main_switch_case_default@12:

main_switch_case_next@13:
    b main_after_if_else@14

main___algots__.defaultCreate@11:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__@15


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test() -> void:
test:

test_block@0:
    // tests/approvals/gtxns.algo.ts:17
    // assert(gtxn.PaymentTxn(0).amount > 0)
    intc_0 // 0
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    intc_0 // 0
    gtxns Amount
    intc_0 // 0
    >
    assert
    retsub


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test2() -> void:
test2:
    // tests/approvals/gtxns.algo.ts:20
    // test2() {
    proto 0 0
    bytec_1 // ""
    dup

test2_block@0:
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    global GroupSize
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test2_for_header@1:
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    frame_dig 3
    frame_dig 2
    <
    bz test2_after_for@21

test2_for_body@2:
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    frame_dig 3
    // tests/approvals/gtxns.algo.ts:22
    // const txn = gtxn.Transaction(i)
    dup
    frame_bury 1
    // tests/approvals/gtxns.algo.ts:23
    // switch (txn.type) {
    gtxns TypeEnum
    dup
    frame_bury 0
    // tests/approvals/gtxns.algo.ts:24
    // case TransactionType.ApplicationCall:
    intc_3 // 6
    ==
    // tests/approvals/gtxns.algo.ts:24-26
    // case TransactionType.ApplicationCall:
    //   log(txn.appId.id)
    //   break
    bz test2_after_if_else@5

test2_if_body@3:

test2_block@4:
    // tests/approvals/gtxns.algo.ts:25
    // log(txn.appId.id)
    frame_dig 1
    gtxns ApplicationID
    itob
    log

test2_block@19:

test2_for_footer@20:
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test2_for_header@1

test2_after_if_else@5:
    // tests/approvals/gtxns.algo.ts:27
    // case TransactionType.AssetTransfer:
    frame_dig 0
    pushint 4 // 4
    ==
    // tests/approvals/gtxns.algo.ts:27-29
    // case TransactionType.AssetTransfer:
    //   log(txn.xferAsset.id)
    //   break
    bz test2_after_if_else@8

test2_if_body@6:

test2_block@7:
    // tests/approvals/gtxns.algo.ts:28
    // log(txn.xferAsset.id)
    frame_dig 1
    gtxns XferAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:29
    // break
    b test2_block@19

test2_after_if_else@8:
    // tests/approvals/gtxns.algo.ts:30
    // case TransactionType.AssetConfig:
    frame_dig 0
    pushint 3 // 3
    ==
    // tests/approvals/gtxns.algo.ts:30-32
    // case TransactionType.AssetConfig:
    //   log(txn.configAsset.id)
    //   break
    bz test2_after_if_else@11

test2_if_body@9:

test2_block@10:
    // tests/approvals/gtxns.algo.ts:31
    // log(txn.configAsset.id)
    frame_dig 1
    gtxns ConfigAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:32
    // break
    b test2_block@19

test2_after_if_else@11:
    // tests/approvals/gtxns.algo.ts:33
    // case TransactionType.Payment:
    frame_dig 0
    intc_1 // 1
    ==
    // tests/approvals/gtxns.algo.ts:33-35
    // case TransactionType.Payment:
    //   log(txn.receiver)
    //   break
    bz test2_after_if_else@14

test2_if_body@12:

test2_block@13:
    // tests/approvals/gtxns.algo.ts:34
    // log(txn.receiver)
    frame_dig 1
    gtxns Receiver
    log
    // tests/approvals/gtxns.algo.ts:35
    // break
    b test2_block@19

test2_after_if_else@14:
    // tests/approvals/gtxns.algo.ts:36
    // case TransactionType.KeyRegistration:
    frame_dig 0
    pushint 2 // 2
    ==
    // tests/approvals/gtxns.algo.ts:36-38
    // case TransactionType.KeyRegistration:
    //   log(txn.voteKey)
    //   break
    bz test2_after_if_else@17

test2_if_body@15:

test2_block@16:
    // tests/approvals/gtxns.algo.ts:37
    // log(txn.voteKey)
    frame_dig 1
    gtxns VotePK
    log
    // tests/approvals/gtxns.algo.ts:38
    // break
    b test2_block@19

test2_after_if_else@17:

test2_block@18:
    // tests/approvals/gtxns.algo.ts:40
    // log(txn.freezeAsset.id)
    frame_dig 1
    gtxns FreezeAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:41
    // break
    b test2_block@19

test2_after_for@21:
    retsub


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test3() -> void:
test3:

test3_block@0:
    // tests/approvals/gtxns.algo.ts:47
    // assert(Txn.onCompletion === OnCompleteAction.NoOp, 'OCA must be NoOp')
    txn OnCompletion
    intc_0 // 0
    ==
    assert // OCA must be NoOp
    // tests/approvals/gtxns.algo.ts:48
    // assert(Txn.typeEnum === TransactionType.ApplicationCall)
    txn TypeEnum
    intc_3 // 6
    ==
    assert
    // tests/approvals/gtxns.algo.ts:49
    // log('Hello test4')
    bytec_2 // "Hello test4"
    log
    retsub


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test4(other: uint64) -> void:
test4:
    // tests/approvals/gtxns.algo.ts:52
    // test4(other: gtxn.ApplicationCallTxn) {
    proto 1 0

test4_block@0:
    // tests/approvals/gtxns.algo.ts:53
    // assert(other.onCompletion === OnCompleteAction.NoOp, 'Other txn must be NoOp')
    frame_dig -1
    gtxns OnCompletion
    intc_0 // 0
    ==
    assert // Other txn must be NoOp
    // tests/approvals/gtxns.algo.ts:54
    // assert(other.type === TransactionType.ApplicationCall)
    frame_dig -1
    gtxns TypeEnum
    intc_3 // 6
    ==
    assert
    // tests/approvals/gtxns.algo.ts:55
    // assert(other.lastLog === Bytes('Hello test4'))
    frame_dig -1
    gtxns LastLog
    bytec_2 // "Hello test4"
    ==
    assert
    // tests/approvals/gtxns.algo.ts:56
    // assert(other.appArgs(0) === methodSelector(GtxnsAlgo.prototype.test3))
    frame_dig -1
    intc_0 // 0
    gtxnsas ApplicationArgs
    bytec_0 // method "test3()void"
    ==
    assert
    // tests/approvals/gtxns.algo.ts:57
    // assert(other.appId === Global.currentApplicationId)
    frame_dig -1
    gtxns ApplicationID
    global CurrentApplicationID
    ==
    assert
    retsub


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.reflectAllPay(pay: uint64) -> bytes:
reflectAllPay:
    // tests/approvals/gtxns.algo.ts:60
    // reflectAllPay(pay: gtxn.PaymentTxn) {
    proto 1 1

reflectAllPay_block@0:
    // tests/approvals/gtxns.algo.ts:62
    // sender: pay.sender.bytes,
    frame_dig -1
    gtxns Sender
    // tests/approvals/gtxns.algo.ts:63
    // fee: pay.fee,
    frame_dig -1
    gtxns Fee
    swap
    // tests/approvals/gtxns.algo.ts:64
    // firstValid: pay.firstValid,
    frame_dig -1
    gtxns FirstValid
    cover 2
    // tests/approvals/gtxns.algo.ts:65
    // firstValidTime: pay.firstValidTime,
    frame_dig -1
    gtxns FirstValidTime
    cover 3
    // tests/approvals/gtxns.algo.ts:66
    // lastValid: pay.lastValid,
    frame_dig -1
    gtxns LastValid
    cover 4
    // tests/approvals/gtxns.algo.ts:67
    // note: pay.note,
    frame_dig -1
    gtxns Note
    cover 5
    // tests/approvals/gtxns.algo.ts:68
    // lease: pay.lease,
    frame_dig -1
    gtxns Lease
    cover 6
    // tests/approvals/gtxns.algo.ts:69
    // typeBytes: pay.typeBytes,
    frame_dig -1
    gtxns Type
    cover 7
    // tests/approvals/gtxns.algo.ts:70
    // groupIndex: pay.groupIndex,
    frame_dig -1
    gtxns GroupIndex
    cover 8
    // tests/approvals/gtxns.algo.ts:71
    // txnId: pay.txnId,
    frame_dig -1
    gtxns TxID
    cover 9
    // tests/approvals/gtxns.algo.ts:72
    // rekeyTo: pay.rekeyTo.bytes,
    frame_dig -1
    gtxns RekeyTo
    cover 10
    // tests/approvals/gtxns.algo.ts:73
    // receiver: pay.receiver.bytes,
    frame_dig -1
    gtxns Receiver
    cover 11
    // tests/approvals/gtxns.algo.ts:74
    // amount: pay.amount,
    frame_dig -1
    gtxns Amount
    cover 12
    // tests/approvals/gtxns.algo.ts:75
    // closeRemainderTo: pay.closeRemainderTo.bytes,
    frame_dig -1
    gtxns CloseRemainderTo
    cover 13
    // tests/approvals/gtxns.algo.ts:61-76
    // return {
    //   sender: pay.sender.bytes,
    //   fee: pay.fee,
    //   firstValid: pay.firstValid,
    //   firstValidTime: pay.firstValidTime,
    //   lastValid: pay.lastValid,
    //   note: pay.note,
    //   lease: pay.lease,
    //   typeBytes: pay.typeBytes,
    //   groupIndex: pay.groupIndex,
    //   txnId: pay.txnId,
    //   rekeyTo: pay.rekeyTo.bytes,
    //   receiver: pay.receiver.bytes,
    //   amount: pay.amount,
    //   closeRemainderTo: pay.closeRemainderTo.bytes,
    // }
    dup
    len
    intc_2 // 32
    ==
    assert // invalid size
    bytec_1 // 0x
    swap
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 244 // 244
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dup
    len
    pushint 244 // 244
    +
    swap
    dig 3
    len
    intc_2 // 32
    ==
    assert // invalid size
    uncover 3
    uncover 3
    swap
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 2
    uncover 3
    itob
    extract 6 2
    concat
    uncover 3
    itob
    concat
    dig 3
    len
    intc_2 // 32
    ==
    assert // invalid size
    uncover 3
    concat
    dig 3
    len
    intc_2 // 32
    ==
    assert // invalid size
    uncover 3
    concat
    dig 3
    len
    intc_2 // 32
    ==
    assert // invalid size
    uncover 3
    concat
    uncover 3
    itob
    concat
    dig 3
    len
    intc_2 // 32
    ==
    assert // invalid size
    uncover 3
    concat
    swap
    concat
    swap
    concat
    retsub


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
