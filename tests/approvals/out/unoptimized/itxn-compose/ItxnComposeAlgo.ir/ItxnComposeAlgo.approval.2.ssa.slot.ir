main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L18
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L18
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "distribute(address[],pay,application)void" => block@3, method "conditionalBegin(uint64)void" => block@4, * => block@5}
    block@3: // distribute_route_L19
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%9#0: uint64 = ((txnas Applications) tmp%8#0)
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute(reinterpret_Encoded(len+uint8[32][])%0#0, gtxn_idx%0#0, tmp%9#0)
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // conditionalBegin_route_L53
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin(tmp%14#0)
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L18
        goto block@6
    block@6: // switch_case_next_L18
        goto block@11
    block@7: // bare_routing_L18
        let tmp%15#0: uint64 = (txn OnCompletion)
        switch tmp%15#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L18
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (== tmp%16#0 0u)
        (assert tmp%17#0) // can only call when creating
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__algots__.defaultCreate()
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L18
        goto block@10
    block@10: // switch_case_next_L18
        goto block@11
    block@11: // after_if_else_L18
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute(addresses: Encoded(len+uint8[32][]), funds: uint64, verifier: uint64) -> void:
    block@0: // L19
        let tmp%0#0: account = ((gtxns Receiver) funds#0)
        let tmp%1#0: account = (global CurrentApplicationAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // assert target is match for conditions
        let array_length%0#0: uint64 = (extract_uint16 addresses#0 0u)
        let reinterpret_bool%0#0: bool = array_length%0#0
        (assert reinterpret_bool%0#0) // must provide some accounts
        let tmp%3#0: uint64 = ((gtxns Amount) funds#0)
        let array_length%1#0: uint64 = (extract_uint16 addresses#0 0u)
        let tmp%4#0: uint64 = (/ tmp%3#0 array_length%1#0)
        let share#0: uint64 = tmp%4#0
        let array%array_trimmed%0#1: bytes = ((extract 2 0) addresses#0)
        let array%bytes_offset%0#1: uint64 = (* 0u 32u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 32u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[32]) = array%encoded_element%0#1
        let payFields.amount#0: uint64 = share#0
        let payFields.receiver#0: bytes = array_item%0#0
        itxn_begin
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = payFields.amount#0
        let reinterpret_account%0#0: account = payFields.receiver#0
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = reinterpret_account%0#0
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        let array_length%2#0: uint64 = (extract_uint16 addresses#0 0u)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L32
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 array_length%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L32
        let array%array_trimmed%1#1: bytes = ((extract 2 0) addresses#0)
        let array%bytes_offset%1#1: uint64 = (* i#1 32u)
        let array%encoded_element%1#1: bytes = (extract3 array%array_trimmed%1#1 array%bytes_offset%1#1 32u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8[32]) = array%encoded_element%1#1
        let addr#0: Encoded(uint8[32]) = array_item%1#0
        itxn_next
        let reinterpret_account%1#0: account = addr#0
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = reinterpret_account%1#0
        let inner_txn_params%1%%param_Amount_idx_0#0: uint64 = payFields.amount#0
        ((itxn_field Amount) inner_txn_params%1%%param_Amount_idx_0#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // for_footer_L32
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L32
        itxn_next
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = verifier#0
        ((itxn_field ApplicationArgs) method "verify()void")
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetName) "abc")
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin(count: uint64) -> void:
    block@0: // L53
        itxn_begin
        let array%length%0#1: uint64 = (len "Hi")
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 "Hi")
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%0#1
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%0#0
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiADAAECJgQIZ3JlZXRpbmcABBUffHUBIDEYQAADiAEFMRsiE0EArzYaAIAEAJIlroAEJDeNPIAEoOgYcoAE0KKCAIAEUYC6IE8FjgUAaQBXAEUAIgACIkMxGSISRDEYIhNENhoBiACLSRUWVwYCTFAqTFCwI0L/3zEZIhJEMRgiE0Q2GgFXAgCIAFhJFRZXBgJMUCpMULAjQv+8MRmBBBJEMRgiE0SIADkjQv+qMRmBBRJEMRgiE0SIACYjQv+YMRkiEkQxGCISRDYaAVcCAIgAByNC/4FC/32KAQAoi/9niYmJigEBIihlRClMUCtQi/9QiYoBASIoZUQpTFArUIv/IlmL/yRZi/9PAk8CUlcCAFCL/yRZi/8Vi/9PAk8CUlcCAFCJKClniQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L55
        itxn_submit
        let tmp%1#0: uint64 = (gitxn 0 CreatedApplicationID)
        let appId#0: uint64 = tmp%1#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L57
        let i#1: uint64 = φ(i#0 <- block@1, i#2 <- block@7)
        let continue_looping%0#0: bool = (< i#1 count#0)
        goto continue_looping%0#0 ? block@3 : block@8
    block@3: // for_body_L57
        let tmp%2#0: bool = (== i#1 0u)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // if_body_L58
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = appId#0
        let array%length%1#1: uint64 = (len "ho")
        let array%as_bytes%1#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 "ho")
        let array%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = array%encoded_value%1#1
        let tmp%3#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%1#1
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%3#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@5: // else_body_L60
        itxn_next
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = appId#0
        let array%length%2#1: uint64 = (len "ho")
        let array%as_bytes%2#1: bytes[8] = (itob array%length%2#1)
        let array%length_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded_value%2#1: bytes = (concat array%length_uint16%2#1 "ho")
        let array%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = array%encoded_value%2#1
        let tmp%4#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%2#1
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%4#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // after_if_else_L58
        goto block@7
    block@7: // for_footer_L57
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@8: // after_for_L57
        itxn_submit
        return 

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__algots__.defaultCreate() -> void:
    block@0: // L18
        return 