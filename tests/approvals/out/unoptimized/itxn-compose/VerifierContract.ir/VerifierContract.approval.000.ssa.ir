main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/itxn-compose.algo.ts::VerifierContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/itxn-compose.algo.ts::VerifierContract.__puya_arc4_router__() -> bool:
    block@0: // L68
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L68
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify()void" => block@2, * => block@3}
    block@2: // verify_route_L69
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/itxn-compose.algo.ts::VerifierContract.verify()
        return 1u
    block@3: // switch_case_default_L68
        goto block@4
    block@4: // switch_case_next_L68
        goto block@9
    block@5: // bare_routing_L68
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L68
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/itxn-compose.algo.ts::VerifierContract.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L68
        goto block@8
    block@8: // switch_case_next_L68
        goto block@9
    block@9: // after_if_else_L68
        return 0u

subroutine tests/approvals/itxn-compose.algo.ts::VerifierContract.verify() -> void:
    block@0: // L69
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L70
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let tmp%0#0: uint64 = (txn GroupIndex)
        let tmp%1#0: bool = (< i#1 tmp%0#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // while_body_L70
        let txn#0: uint64 = i#1
        let tmp%2#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0) // Txn must be pay
        let tmp%4#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%4#0
        goto block@1
    block@3: // after_while_L70
        return 

subroutine tests/approvals/itxn-compose.algo.ts::VerifierContract.__algots__.defaultCreate() -> void:
    block@0: // L68
        return 