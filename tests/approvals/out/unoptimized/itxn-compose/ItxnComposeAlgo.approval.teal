#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 32 8
    bytecblock 0x "ho" "Hi" 0xd0a28200

main_block@0:

main_block@1:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x1ecad34c // method "distribute(address[],pay,uint64)void"
    pushbytes 0x90d29762 // method "conditionalBegin(uint64)void"
    uncover 2
    match main_distribute_route@3 main_conditionalBegin_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__@12:
    return

main_conditionalBegin_route@4:
    // tests/approvals/itxn-compose.algo.ts:52
    // conditionalBegin(count: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/itxn-compose.algo.ts:52
    // conditionalBegin(count: uint64) {
    callsub conditionalBegin
    intc_1 // 1
    b main_after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__@12

main_distribute_route@3:
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 2
    btoi
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    uncover 2
    uncover 2
    uncover 2
    callsub distribute
    intc_1 // 1
    b main_after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__@12

main_bare_routing@7:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__@12


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute(addresses: bytes, funds: uint64, verifier: uint64) -> void:
distribute:
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    proto 3 0

distribute_block@0:
    // tests/approvals/itxn-compose.algo.ts:20-22
    // assertMatch(funds, {
    //   receiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Receiver
    // tests/approvals/itxn-compose.algo.ts:21
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/itxn-compose.algo.ts:20-22
    // assertMatch(funds, {
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    assert // assert target is match for conditions
    // tests/approvals/itxn-compose.algo.ts:23
    // assert(addresses.length, 'must provide some accounts')
    frame_dig -3
    intc_0 // 0
    extract_uint16
    assert // must provide some accounts
    // tests/approvals/itxn-compose.algo.ts:24
    // const share: uint64 = funds.amount / addresses.length
    frame_dig -2
    gtxns Amount
    frame_dig -3
    intc_0 // 0
    extract_uint16
    /
    // tests/approvals/itxn-compose.algo.ts:29
    // receiver: addresses[0].bytes,
    frame_dig -3
    extract 2 0
    intc_0 // 0
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: index access is out of bounds
    // tests/approvals/itxn-compose.algo.ts:27
    // type: TransactionType.Payment,
    intc_1 // 1
    // tests/approvals/itxn-compose.algo.ts:26-30
    // const payFields = {
    //   type: TransactionType.Payment,
    //   amount: share,
    //   receiver: addresses[0].bytes,
    // } satisfies PaymentComposeFields
    itob
    bytec_0 // 0x
    swap
    concat
    uncover 2
    itob
    concat
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    dup
    // tests/approvals/itxn-compose.algo.ts:31
    // itxnCompose.begin(payFields)
    itxn_begin
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    swap
    dup
    intc_3 // 8
    dup
    extract3
    btoi
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    itxn_field Receiver
    itxn_field Amount
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    frame_dig -3
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    assert // Step cannot be zero
    intc_1 // 1

distribute_for_header@1:
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    frame_dig 2
    frame_dig 1
    <
    bz distribute_after_for@4

distribute_for_body@2:
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    frame_dig 2
    // tests/approvals/itxn-compose.algo.ts:33
    // const addr = addresses[i]
    frame_dig -3
    extract 2 0
    swap
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: index access is out of bounds
    // tests/approvals/itxn-compose.algo.ts:34-37
    // itxnCompose.next({
    //   ...payFields,
    //   receiver: addr.bytes,
    // })
    itxn_next
    // tests/approvals/itxn-compose.algo.ts:35
    // ...payFields,
    frame_dig 0
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    swap
    intc_3 // 8
    dup
    extract3
    btoi
    // tests/approvals/itxn-compose.algo.ts:36
    // receiver: addr.bytes,
    uncover 2
    itxn_field Receiver
    itxn_field Amount
    itxn_field TypeEnum
    // tests/approvals/itxn-compose.algo.ts:34-37
    // itxnCompose.next({
    //   ...payFields,
    //   receiver: addr.bytes,
    // })
    intc_0 // 0
    itxn_field Fee

distribute_for_footer@3:
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b distribute_for_header@1

distribute_after_for@4:
    // tests/approvals/itxn-compose.algo.ts:40-42
    // itxnCompose.next(VerifierContract.prototype.verify, {
    //   appId: verifier,
    // })
    itxn_next
    // tests/approvals/itxn-compose.algo.ts:41
    // appId: verifier,
    frame_dig -1
    // tests/approvals/itxn-compose.algo.ts:40-42
    // itxnCompose.next(VerifierContract.prototype.verify, {
    //   appId: verifier,
    // })
    pushbytes 0x65a9aecc // method "verify()void"
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:44-48
    // itxnCompose.next(
    //   itxn.assetConfig({
    //     assetName: 'abc',
    //   }),
    // )
    itxn_next
    // tests/approvals/itxn-compose.algo.ts:46
    // assetName: 'abc',
    pushbytes "abc"
    itxn_field ConfigAssetName
    // tests/approvals/itxn-compose.algo.ts:45-47
    // itxn.assetConfig({
    //   assetName: 'abc',
    // }),
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:50
    // itxnCompose.submit()
    itxn_submit
    retsub


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin(count: uint64) -> void:
conditionalBegin:
    // tests/approvals/itxn-compose.algo.ts:52
    // conditionalBegin(count: uint64) {
    proto 1 0
    bytec_0 // ""
    dup

conditionalBegin_block@0:
    // tests/approvals/itxn-compose.algo.ts:54
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    itxn_begin
    bytec_2 // "Hi"
    len
    itob
    extract 6 2
    bytec_2 // "Hi"
    concat
    pushbytes 0x009225ae // method "helloCreate(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // tests/approvals/itxn-compose.algo.ts:53
    // const hello = compileArc4(Hello)
    intc_0 // 0
    itxn_field ExtraProgramPages
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_1 // 1
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    pushbytes base64(CiADAAECJgQIZ3JlZXRpbmcABBUffHUBIDEYQAADiAEFMRsiE0EArzYaAIAEAJIlroAEJDeNPIAEoOgYcoAE0KKCAIAEUYC6IE8FjgUAaQBXAEUAIgACIkMxGSISRDEYIhNENhoBiACLSRUWVwYCTFAqTFCwI0L/3zEZIhJEMRgiE0Q2GgFXAgCIAFhJFRZXBgJMUCpMULAjQv+8MRmBBBJEMRgiE0SIADkjQv+qMRmBBRJEMRgiE0SIACYjQv+YMRkiEkQxGCISRDYaAVcCAIgAByNC/4FC/32KAQAoi/9niYmJigEBIihlRClMUCtQi/9QiYoBASIoZUQpTFArUIv/IlmL/yRZi/9PAk8CUlcCAFCL/yRZi/8Vi/9PAk8CUlcCAFCJKClniQ==)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn-compose.algo.ts:54
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

conditionalBegin_next_txn@1:
    // tests/approvals/itxn-compose.algo.ts:54
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    itxn_submit
    gitxn 0 CreatedApplicationID
    frame_bury 0
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 1

conditionalBegin_for_header@2:
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    frame_dig 1
    frame_dig -1
    <
    bz conditionalBegin_after_for@8

conditionalBegin_for_body@3:
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    frame_dig 1
    // tests/approvals/itxn-compose.algo.ts:57
    // if (i === 0) {
    intc_0 // 0
    ==
    bz conditionalBegin_else_body@5

conditionalBegin_if_body@4:
    // tests/approvals/itxn-compose.algo.ts:58
    // itxnCompose.begin(Hello.prototype.greet, { appId, args: ['ho'] })
    itxn_begin
    frame_dig 0
    bytec_1 // "ho"
    len
    itob
    extract 6 2
    bytec_1 // "ho"
    concat
    bytec_3 // method "greet(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

conditionalBegin_after_if_else@6:

conditionalBegin_for_footer@7:
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b conditionalBegin_for_header@2

conditionalBegin_else_body@5:
    // tests/approvals/itxn-compose.algo.ts:60
    // itxnCompose.next(Hello.prototype.greet, { appId, args: ['ho'] })
    itxn_next
    frame_dig 0
    bytec_1 // "ho"
    len
    itob
    extract 6 2
    bytec_1 // "ho"
    concat
    bytec_3 // method "greet(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b conditionalBegin_after_if_else@6

conditionalBegin_after_for@8:
    // tests/approvals/itxn-compose.algo.ts:63
    // itxnCompose.submit()
    itxn_submit
    retsub


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
