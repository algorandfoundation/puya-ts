{
    "name": "ItxnComposeAlgo",
    "structs": {},
    "methods": [
        {
            "name": "distribute",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                },
                {
                    "type": "pay",
                    "name": "funds"
                },
                {
                    "type": "application",
                    "name": "verifier"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "conditionalBegin",
            "args": [
                {
                    "type": "uint64",
                    "name": "count"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        57,
                        78
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        248,
                        713
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        149
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        62,
                        83
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        173,
                        269
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        154
                    ],
                    "errorMessage": "must provide some accounts"
                },
                {
                    "pc": [
                        96
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEgCCYEAAJobwJIaQTQooIAMRsiE0EAWDYaAIAELvWOJ4AEkNKXYk8CjgIAFwACIkMxGSISRDEYIhNENhoBF4gBDiNC/+oxGSISRDEYIhNENhoBMRYjCUk4ECMSRDYaAhfAMk8CTwJPAogAGyNC/8AxGSJMjgEAA0L/tDEYIhJEiAKVI0L/qYoDAIv+OAcyChJEi/0iWUSL/jgIi/0iWQqL/VcCACIkCyRYIxYoTFBPAhZQTEkVFlcGAkxQgRIWVwYCTwJMUExQSbFJIiVYF0xJJUlYF0xJgRBZTEkVTE8CTwJSVwIAsgeyCLIQIrIBi/0iWSNEI4sCiwEMQQAtiwKL/VcCAEwkCyRYtosASSIlWBdMJUlYF08CsgeyCLIQIrIBiwIjCIwCQv/Ltov/gARlqa7MshqyGIEGshAisgG2gANhYmOyJoEDshAisgGziYoBAChJsSoVFlcGAipQgAQAkiWushqyGiKyOCKyNiKyNyOyNSKyNIAECoEBQ7JCKLJCgKoCCiADAAECJgQIZ3JlZXRpbmcABBUffHUBIDEYQAADiAEFMRsiE0EArzYaAIAEAJIlroAEJDeNPIAEoOgYcoAE0KKCAIAEUYC6IE8FjgUAaQBXAEUAIgACIkMxGSISRDEYIhNENhoBiACLSRUWVwYCTFAqTFCwI0L/3zEZIhJEMRgiE0Q2GgFXAgCIAFhJFRZXBgJMUCpMULAjQv+8MRmBBBJEMRgiE0SIADkjQv+qMRmBBRJEMRgiE0SIACYjQv+YMRkiEkQxGCISRDYaAVcCAIgAByNC/4FC/32KAQAoi/9niYmJigEBIihlRClMUCtQi/9QiYoBASIoZUQpTFArUIv/IlmL/yRZi/9PAk8CUlcCAFCL/yRZi/8Vi/9PAk8CUlcCAFCJKClnibJAKLJAIrIZgQayECKyAbO3AD2MACNEIowBiwGL/wxBAEWLASISQQAisYsAKRUWVwYCKVArshqyGrIYgQayECKyAYsBIwiMAUL/z7aLACkVFlcGAilQK7IashqyGIEGshAisgFC/9uziYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}