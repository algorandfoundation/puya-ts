{
    "name": "ItxnComposeAlgo",
    "structs": {},
    "methods": [
        {
            "name": "distribute",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                },
                {
                    "type": "pay",
                    "name": "funds"
                },
                {
                    "type": "uint64",
                    "name": "verifier"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "conditionalBegin",
            "args": [
                {
                    "type": "uint64",
                    "name": "count"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        57,
                        78
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        251,
                        721
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        147
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        129
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        62,
                        83
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        176,
                        277
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        152
                    ],
                    "errorMessage": "must provide some accounts"
                },
                {
                    "pc": [
                        96
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEgCCYEAAJobwJIaQTQooIAMRsiE0EAVjYaAIAEHsrTTIAEkNKXYk8CjgIAFwACIkMxGSISRDEYIhNENhoBF4gBFiNC/+oxGSISRDEYIhNENhoBMRYjCUk4ECMSRDYaAhdPAk8CTwKIABsjQv/CMRkiTI4BAANC/7YxGCISRIgCnyNC/6uKAwCL/jgHMgoSRIv9IllEi/44CIv9IlkKi/0Vi/2BAk8CUiIkCyRYIxYoTFBPAhZQTEkVFlcGAkxQgRIWVwYCTwJMUExQSbFJIiVYF0xJJUlYF0xJgRBZTEkVTE8CTwJSVwIAsgeyCLIQIrIBi/0iWSNEI4sCiwEMQQAyiwKL/RWL/YECTwJSTCQLJFi2iwBJIiVYF0wlSVgXTwKyB7IIshAisgGLAiMIjAJC/8a2i/+ABGWprsyyGrIYgQayECKyAbaAA2FiY7ImgQOyECKyAbOJigEAKEmxKhUWVwYCKlCABACSJa6yGrIaIrI4IrI2IrI3I7I1IrI0gAQKgQFDskIoskKAqgIKIAMAAQImBAhncmVldGluZwAEFR98dQEgMRhAAAOIAQUxGyITQQCvNhoAgAQAkiWugAQkN408gASg6BhygATQooIAgARRgLogTwWOBQBpAFcARQAiAAIiQzEZIhJEMRgiE0Q2GgGIAItJFRZXBgJMUCpMULAjQv/fMRkiEkQxGCITRDYaAVcCAIgAWEkVFlcGAkxQKkxQsCNC/7wxGYEEEkQxGCITRIgAOSNC/6oxGYEFEkQxGCITRIgAJiNC/5gxGSISRDEYIhJENhoBVwIAiAAHI0L/gUL/fYoBACiL/2eJiYmKAQEiKGVEKUxQK1CL/1CJigEBIihlRClMUCtQi/8iWYv/JFmL/08CTwJSVwIAUIv/JFmL/xWL/08CTwJSVwIAUIkoKWeJskAoskAishmBBrIQIrIBs7cAPYwAI0QijAGLAYv/DEEARYsBIhJBACKxiwApFRZXBgIpUCuyGrIashiBBrIQIrIBiwEjCIwBQv/PtosAKRUWVwYCKVArshqyGrIYgQayECKyAUL/27OJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}