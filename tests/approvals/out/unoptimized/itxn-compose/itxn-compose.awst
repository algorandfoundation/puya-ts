contract ItxnComposeAlgo
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  distribute(addresses: arc4.dynamic_array<arc4.static_array<arc4.byte>>, funds: group_transaction_pay, verifier: application): void
  {
    assert(gtxns<Receiver>(funds) == global<CurrentApplicationAddress>(), comment=assert target is match for conditions)
    assert(Boolean(addresses.length), comment=must provide some accounts)
    share: uint64 = gtxns<Amount>(funds) // addresses.length
    payFields: Object3BB2638B = new Object3BB2638B(type=($0 = #{ type: ($1 = #{ type: ($2 = #[1, share, reinterpret_cast<bytes>(addresses[0])]).0, amount: $2.1, receiver: $2.2 }).type, amount: $1.amount, receiver: $1.receiver }).type, amount=$0.amount, receiver=$0.receiver)
    begin_txn(create_inner_transaction(Fee=0, TypeEnum=payFields.type, Amount=payFields.amount, Receiver=reinterpret_cast<account>(payFields.receiver)))
    for (temp in urange(1, addresses.length, 1)) {
      i: uint64 = copy(temp)
      addr: arc4.static_array<arc4.byte> = addresses[i]
      next_txn(create_inner_transaction(Fee=0, TypeEnum=payFields.type, Amount=payFields.amount, Receiver=reinterpret_cast<account>(reinterpret_cast<bytes>(addr))))
    }
    next_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=verifier, ApplicationArgs=#[Method("verify()void")]))
    next_txn(create_inner_transaction(Fee=0, TypeEnum=3, ConfigAssetName="abc"))
    itxn_submit()
  }
  
  conditionalBegin(count: uint64): void
  {
    hello: CompiledContract{ approvalProgram: readonly [bytes, bytes], clearStateProgram: readonly [bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::Hello
    appId: application = #{ itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=hello.approvalProgram, ClearStateProgramPages=hello.clearStateProgram, GlobalNumUint=hello.globalUints, GlobalNumByteSlice=hello.globalBytes, LocalNumByteSlice=hello.localBytes, LocalNumUint=hello.localUints, ExtraProgramPages=hello.extraProgramPages, ApplicationArgs=#[Method("helloCreate(string)void"), ARC4_ENCODE("Hi", wtype=arc4.dynamic_array<arc4.byte>)])) }.itxn.CreatedApplicationID
    for (temp in urange(0, count, 1)) {
      i: uint64 = copy(temp)
      if (i == 0) {
        begin_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, ApplicationArgs=#[Method("greet(string)string"), ARC4_ENCODE("ho", wtype=arc4.dynamic_array<arc4.byte>)]))
      } else {
        next_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, ApplicationArgs=#[Method("greet(string)string"), ARC4_ENCODE("ho", wtype=arc4.dynamic_array<arc4.byte>)]))
      }
    }
    itxn_submit()
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}
contract VerifierContract
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  verify(): void
  {
    i: uint64 = 0
    while (i < txn<GroupIndex>()) {
      txn: group_transaction = group_transaction(index=i, type=group_transaction)
      assert(gtxns<TypeEnum>(txn) == reinterpret_cast<uint64>(1), comment=Txn must be pay)
      i++
    }
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}