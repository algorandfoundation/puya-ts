#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    pushbytes ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x65a9aecc // method "verify()void"
    uncover 1
    match main_verify_route@3
    b main_switch_case_default@4

main_switch_case_default@4:
    b main_switch_case_next@5

main_switch_case_next@5:
    b main_after_if_else@10

main_after_if_else@10:
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    intc_0 // 0
    bury 1
    b main_after_inlined_tests/approvals/itxn-compose.algo.ts::VerifierContract.__puya_arc4_router__@11

main_after_inlined_tests/approvals/itxn-compose.algo.ts::VerifierContract.__puya_arc4_router__@11:
    return

main_verify_route@3:
    // tests/approvals/itxn-compose.algo.ts:68
    // verify() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub verify
    intc_1 // 1
    bury 1
    b main_after_inlined_tests/approvals/itxn-compose.algo.ts::VerifierContract.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    uncover 1
    match main___algots__.defaultCreate@7
    b main_switch_case_default@8

main_switch_case_default@8:
    b main_switch_case_next@9

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    bury 1
    b main_after_inlined_tests/approvals/itxn-compose.algo.ts::VerifierContract.__puya_arc4_router__@11


// tests/approvals/itxn-compose.algo.ts::VerifierContract.verify() -> void:
verify:
    // tests/approvals/itxn-compose.algo.ts:68
    // verify() {
    proto 0 0
    b verify_block@0

verify_block@0:
    // tests/approvals/itxn-compose.algo.ts:69
    // for (let i: uint64 = 0; i < Txn.groupIndex; i++) {
    intc_0 // 0
    b verify_while_top@1

verify_while_top@1:
    // tests/approvals/itxn-compose.algo.ts:69
    // for (let i: uint64 = 0; i < Txn.groupIndex; i++) {
    txn GroupIndex
    frame_dig 0
    >
    bz verify_after_while@3
    b verify_while_body@2

verify_while_body@2:
    // tests/approvals/itxn-compose.algo.ts:70
    // const txn = gtxn.Transaction(i)
    frame_dig 0
    dup
    // tests/approvals/itxn-compose.algo.ts:71
    // assert(txn.type === TransactionType.Payment, 'Txn must be pay')
    gtxns TypeEnum
    intc_1 // 1
    ==
    assert // Txn must be pay
    // tests/approvals/itxn-compose.algo.ts:69
    // for (let i: uint64 = 0; i < Txn.groupIndex; i++) {
    intc_1 // 1
    +
    frame_bury 0
    b verify_while_top@1

verify_after_while@3:
    retsub


// tests/approvals/itxn-compose.algo.ts::VerifierContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
