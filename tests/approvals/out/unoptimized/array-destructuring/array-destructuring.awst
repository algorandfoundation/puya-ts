contract ArrayDestructuringAlgo
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  testNested(arg: readonlytuple[uint64, readonlytuple[biguint, biguint]]): readonlytuple[uint64, readonlytuple[biguint, biguint], uint64, biguint]
  {
    #[a, b]: readonlytuple[uint64, readonlytuple[biguint, biguint]] = arg
    #[c, #[d, _]]: readonlytuple[uint64, readonlytuple[biguint, biguint]] = arg
    return #[a, b, c, d]
  }
  
  test(): void
  {
    #[a, b, c, d]: readonlytuple[uint64, bytes, bool, biguint] = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
    #[_, _₁, e, _₂]: readonlytuple[uint64, bytes, bool, biguint] = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
    f: readonlytuple[uint64, bytes, bool, biguint] = (#[g, _₃, _₄, i] = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems())
    assert(a == 5)
    assert(b == 0x)
    assert(!c)
    assert(d == 6)
    assert(!e)
    assert(g == 5)
    assert(i == 6)
    assert(4 == 4 and f.0 == 5 and f.1 == 0x and f.2 == False and f.3 == 6, comment=assert target is match for conditions)
  }
  
  produceItems(): readonlytuple[uint64, bytes, bool, biguint]
  {
    return #[5, 0x, False, 6]
  }
  
  testLiteralDestructuring(): void
  {
    a: uint64 = 1
    b: uint64 = 2
    #[x, y]: readonlytuple[uint64, uint64] = (#[b, a] = #[a, b])
    assert(x == b)
    assert(y == a)
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}