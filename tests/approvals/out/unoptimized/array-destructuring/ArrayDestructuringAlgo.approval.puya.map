{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/array-destructuring.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;AA4BE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AArBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACE;;;AACQ;;AAAA;;AAAA;;AACA;;AAAA;;AACN;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAGF;;;AACuB;;;AAAA;;AAAA;;AAAA;AAAf;;AAAA;;AAAA;;AAAA;;AACU;;;AAAA;AAAA;;AAAA;;AAAV;;AAGkB;;;AAAA;;AAAA;;AAAA;AAAb;;AAAA;;AAAA;;AAAL;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAEC;;AAAM;AAAN;AAAP;AACO;;AAAM;AAAN;AAAP;AACO;;AAAA;AAAP;AACO;;AAAM;AAAN;AAAP;AACO;;AAAA;AAAP;AACa;AAAN;AAAP;AACa;AAAN;AAAP;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAgB;AAAhB;AAAA;;;AAAA;;AAAmB;AAAnB;AAAA;;;AAAA;;AAA4B;AAA5B;AAAA;;;AAAA;;AAAmC;AAAnC;AAAA;;;;AAAA;;;;;;AAIQ;AAAG;AAAS;AAAO;AAA3B;AAIe;AAAA;AAKR;AAAP;AAJe;;AAAA;AAKR;AAAP;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 64 1 5"
    },
    "7": {
      "op": "bytecblock 0x 0x06"
    },
    "12": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "15": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "19": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "pushbytes 0x74b7e8df // method \"testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)\"",
      "defined_out": [
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))"
      ]
    },
    "28": {
      "op": "pushbytes 0xa78000de // method \"test()void\"",
      "defined_out": [
        "Method(test()void)",
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))",
        "Method(test()void)"
      ]
    },
    "34": {
      "op": "pushbytes 0x2dafc6c6 // method \"testLiteralDestructuring()void\"",
      "defined_out": [
        "Method(test()void)",
        "Method(testLiteralDestructuring()void)",
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))",
        "Method(test()void)",
        "Method(testLiteralDestructuring()void)"
      ]
    },
    "40": {
      "op": "uncover 3",
      "stack_out": [
        "Method(testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512))",
        "Method(test()void)",
        "Method(testLiteralDestructuring()void)",
        "tmp%2#0"
      ]
    },
    "42": {
      "op": "match main_testNested_route@3 main_test_route@4 main_testLiteralDestructuring_route@5",
      "stack_out": []
    },
    "50": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "51": {
      "block": "main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "52": {
      "block": "main_testLiteralDestructuring_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "54": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "55": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "56": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "59": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "60": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "61": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "62": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring",
      "op": "callsub testLiteralDestructuring"
    },
    "65": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@13"
    },
    "69": {
      "block": "main_test_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "71": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "72": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "73": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "74": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "76": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "77": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "78": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "79": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test",
      "op": "callsub test"
    },
    "82": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@13"
    },
    "86": {
      "block": "main_testNested_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "88": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "89": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "90": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "93": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "94": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[136]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)"
      ]
    },
    "100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)",
        "0"
      ]
    },
    "101": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "103": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "reinterpret_bytes[136]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "item0%0#0"
      ]
    },
    "104": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "reinterpret_bytes[136]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "item0%0%0#0"
      ]
    },
    "105": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[136]%0#0"
      ]
    },
    "106": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[136]%0#0",
        "8"
      ]
    },
    "108": {
      "op": "pushint 128 // 128",
      "defined_out": [
        "128",
        "8",
        "item0%0%0#0",
        "reinterpret_bytes[136]%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[136]%0#0",
        "8",
        "128"
      ]
    },
    "111": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "112": {
      "op": "dup",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ]
    },
    "113": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)",
        "0"
      ]
    },
    "114": {
      "op": "intc_1 // 64",
      "defined_out": [
        "0",
        "64",
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)",
        "0",
        "64"
      ]
    },
    "115": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item0%1#0"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "117": {
      "op": "intc_1 // 64",
      "stack_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%0#0",
        "64"
      ]
    },
    "118": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%0#0",
        "64",
        "64"
      ]
    },
    "119": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "120": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1#0",
        "item1%1#0",
        "item0%0%0#0"
      ]
    },
    "122": {
      "op": "uncover 2",
      "stack_out": [
        "item1%1#0",
        "item0%0%0#0",
        "item0%1#0"
      ]
    },
    "124": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "126": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested",
      "op": "callsub testNested",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "129": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "131": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "133": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "136": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "137": {
      "op": "cover 4",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "139": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "140": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "len_%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "len_%0#0"
      ]
    },
    "141": {
      "op": "intc_1 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "len_%0#0",
        "64"
      ]
    },
    "142": {
      "op": "<=",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "no_overflow%0#0"
      ]
    },
    "143": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "144": {
      "op": "intc_1 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "64"
      ]
    },
    "145": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "b_zeros%0#0"
      ]
    },
    "146": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0"
      ]
    },
    "147": {
      "op": "dig 1",
      "defined_out": [
        "arc4_item%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "149": {
      "op": "len",
      "defined_out": [
        "arc4_item%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "len_%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0",
        "len_%1#0"
      ]
    },
    "150": {
      "op": "intc_1 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0",
        "len_%1#0",
        "64"
      ]
    },
    "151": {
      "op": "<=",
      "defined_out": [
        "arc4_item%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "no_overflow%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0",
        "no_overflow%1#0"
      ]
    },
    "152": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0"
      ]
    },
    "153": {
      "op": "intc_1 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0",
        "64"
      ]
    },
    "154": {
      "op": "bzero",
      "defined_out": [
        "arc4_item%0#0",
        "b_zeros%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_item%0#0",
        "b_zeros%1#0"
      ]
    },
    "155": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "arc4_item%0#0",
        "b_zeros%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "157": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "arc4_item%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "arc4_item%0#0",
        "arc4_item%1#0"
      ]
    },
    "158": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "arc4_item%0#0",
        "arc4_item%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "arc4_item%0#0",
        "arc4_item%1#0",
        "0x"
      ]
    },
    "159": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "arc4_item%1#0",
        "0x",
        "arc4_item%0#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "arc4_item%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "arc4_item%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%1#0",
        "arc4_item%1#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "166": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "167": {
      "op": "dig 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "169": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "len_%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "len_%2#0"
      ]
    },
    "170": {
      "op": "intc_1 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "len_%2#0",
        "64"
      ]
    },
    "171": {
      "op": "<=",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "no_overflow%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "no_overflow%2#0"
      ]
    },
    "172": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "173": {
      "op": "intc_1 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "64"
      ]
    },
    "174": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%2#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "b_zeros%2#0"
      ]
    },
    "175": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "b_zeros%2#0",
        "elements_to_encode%4#0"
      ]
    },
    "177": {
      "op": "b|",
      "defined_out": [
        "arc4_item%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "arc4_item%2#0"
      ]
    },
    "178": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "arc4_item%2#0",
        "0x"
      ]
    },
    "179": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "arc4_item%2#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "181": {
      "op": "concat",
      "defined_out": [
        "arc4_item%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "arc4_item%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "182": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%1#0",
        "arc4_item%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "184": {
      "op": "concat",
      "defined_out": [
        "arc4_item%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "arc4_item%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "185": {
      "op": "uncover 2",
      "stack_out": [
        "arc4_item%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%1#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "arc4_item%2#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "arc4_item%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "arc4_item%2#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "190": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "196": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "197": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "198": {
      "op": "log",
      "stack_out": []
    },
    "199": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "200": {
      "op": "b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@13"
    },
    "203": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "205": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%16#0"
      ]
    },
    "207": {
      "op": "match main___algots__.defaultCreate@9",
      "stack_out": []
    },
    "211": {
      "block": "main_switch_case_next@11",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "214": {
      "block": "main___algots__.defaultCreate@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "218": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "219": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "222": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "223": {
      "op": "b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@13"
    },
    "226": {
      "subroutine": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested",
      "params": {
        "arg.0#0": "uint64",
        "arg.1.0#0": "bytes",
        "arg.1.1#0": "bytes"
      },
      "block": "testNested",
      "stack_in": [],
      "op": "proto 3 5"
    },
    "229": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "231": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b.0#0"
      ],
      "stack_out": [
        "a#0",
        "b.0#0"
      ]
    },
    "233": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b.0#0",
        "b.1#0"
      ],
      "stack_out": [
        "a#0",
        "b.0#0",
        "b.1#0"
      ]
    },
    "235": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "b.0#0",
        "b.1#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b.0#0",
        "b.1#0",
        "c#0"
      ]
    },
    "237": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b.0#0",
        "b.1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b.0#0",
        "b.1#0",
        "c#0",
        "d#0"
      ]
    },
    "239": {
      "op": "uncover 4",
      "stack_out": [
        "b.0#0",
        "b.1#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "241": {
      "op": "uncover 4",
      "stack_out": [
        "b.1#0",
        "c#0",
        "d#0",
        "a#0",
        "b.0#0"
      ]
    },
    "243": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "a#0",
        "b.0#0",
        "b.1#0"
      ]
    },
    "245": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "a#0",
        "b.0#0",
        "b.1#0",
        "c#0"
      ]
    },
    "247": {
      "op": "uncover 4",
      "stack_out": [
        "a#0",
        "b.0#0",
        "b.1#0",
        "c#0",
        "d#0"
      ]
    },
    "249": {
      "retsub": true,
      "op": "retsub"
    },
    "250": {
      "subroutine": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test",
      "params": {},
      "block": "test",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "253": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems",
      "op": "callsub produceItems",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ],
      "stack_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ]
    },
    "256": {
      "op": "cover 3",
      "stack_out": [
        "tuple_assignment%3#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0"
      ]
    },
    "258": {
      "op": "cover 2",
      "stack_out": [
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "260": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ],
      "stack_out": [
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%1#0",
        "a#0"
      ]
    },
    "261": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ],
      "stack_out": [
        "a#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "b#0"
      ]
    },
    "263": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tuple_assignment%3#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "tuple_assignment%3#0",
        "c#0"
      ]
    },
    "265": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "b#0",
        "a#0",
        "d#0"
      ]
    },
    "267": {
      "op": "cover 3",
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "269": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems",
      "op": "callsub produceItems",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tuple_assignment%4#0",
        "tuple_assignment%5#0",
        "tuple_assignment%6#0",
        "tuple_assignment%7#0"
      ],
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%4#0",
        "tuple_assignment%5#0",
        "tuple_assignment%6#0",
        "tuple_assignment%7#0"
      ]
    },
    "272": {
      "op": "pop",
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%4#0",
        "tuple_assignment%5#0",
        "tuple_assignment%6#0"
      ]
    },
    "273": {
      "op": "cover 2",
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%6#0",
        "tuple_assignment%4#0",
        "tuple_assignment%5#0"
      ]
    },
    "275": {
      "op": "popn 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "e#0"
      ]
    },
    "277": {
      "op": "cover 3",
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "279": {
      "callsub": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems",
      "op": "callsub produceItems",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tuple_assignment%10#0",
        "tuple_assignment%11#0",
        "tuple_assignment%8#0",
        "tuple_assignment%9#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%8#0",
        "tuple_assignment%9#0",
        "tuple_assignment%10#0",
        "tuple_assignment%11#0"
      ]
    },
    "282": {
      "op": "cover 3",
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%11#0",
        "tuple_assignment%8#0",
        "tuple_assignment%9#0",
        "tuple_assignment%10#0"
      ]
    },
    "284": {
      "op": "cover 2",
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%11#0",
        "tuple_assignment%10#0",
        "tuple_assignment%8#0",
        "tuple_assignment%9#0"
      ]
    },
    "286": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "g#0",
        "tuple_assignment%10#0",
        "tuple_assignment%11#0",
        "tuple_assignment%9#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%11#0",
        "tuple_assignment%10#0",
        "tuple_assignment%9#0",
        "g#0"
      ]
    },
    "287": {
      "op": "cover 2",
      "defined_out": [
        "_\u2083#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "g#0",
        "tuple_assignment%10#0",
        "tuple_assignment%11#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%11#0",
        "g#0",
        "tuple_assignment%10#0",
        "_\u2083#0"
      ]
    },
    "289": {
      "op": "cover 2",
      "defined_out": [
        "_\u2083#0",
        "_\u2084#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "g#0",
        "tuple_assignment%11#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "tuple_assignment%11#0",
        "_\u2083#0",
        "g#0",
        "_\u2084#0"
      ]
    },
    "291": {
      "op": "cover 2",
      "defined_out": [
        "_\u2083#0",
        "_\u2084#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "_\u2084#0",
        "_\u2083#0",
        "g#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "_\u2083#0",
        "_\u2084#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "_\u2084#0",
        "_\u2083#0",
        "g#0",
        "f.0#0"
      ]
    },
    "294": {
      "op": "cover 9",
      "defined_out": [
        "_\u2083#0",
        "_\u2084#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "_\u2084#0",
        "_\u2083#0",
        "g#0"
      ]
    },
    "296": {
      "op": "swap",
      "defined_out": [
        "_\u2084#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "_\u2084#0",
        "g#0",
        "f.1#0"
      ]
    },
    "297": {
      "op": "cover 8",
      "defined_out": [
        "_\u2084#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "_\u2084#0",
        "g#0"
      ]
    },
    "299": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "g#0",
        "f.2#0"
      ]
    },
    "300": {
      "op": "cover 7",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "g#0"
      ]
    },
    "302": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "g#0",
        "f.3#0"
      ]
    },
    "304": {
      "op": "cover 7",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "a#0",
        "i#0",
        "g#0"
      ]
    },
    "306": {
      "op": "uncover 2",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "i#0",
        "g#0",
        "a#0"
      ]
    },
    "308": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "i#0",
        "g#0",
        "a#0",
        "5"
      ]
    },
    "309": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "i#0",
        "g#0",
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "b#0",
        "i#0",
        "g#0"
      ]
    },
    "311": {
      "op": "uncover 2",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "i#0",
        "g#0",
        "b#0"
      ]
    },
    "313": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "i#0",
        "g#0",
        "b#0",
        "0x"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "i#0",
        "g#0",
        "tmp%1#0"
      ]
    },
    "315": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "c#0",
        "i#0",
        "g#0"
      ]
    },
    "316": {
      "op": "uncover 2",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "i#0",
        "g#0",
        "c#0"
      ]
    },
    "318": {
      "op": "!",
      "defined_out": [
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "i#0",
        "g#0",
        "tmp%2#0"
      ]
    },
    "319": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "d#0",
        "e#0",
        "i#0",
        "g#0"
      ]
    },
    "320": {
      "op": "uncover 3",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "e#0",
        "i#0",
        "g#0",
        "d#0"
      ]
    },
    "322": {
      "op": "bytec_1 // 0x06",
      "defined_out": [
        "0x06",
        "d#0",
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "e#0",
        "i#0",
        "g#0",
        "d#0",
        "0x06"
      ]
    },
    "323": {
      "op": "b==",
      "defined_out": [
        "e#0",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "e#0",
        "i#0",
        "g#0",
        "tmp%3#0"
      ]
    },
    "324": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "e#0",
        "i#0",
        "g#0"
      ]
    },
    "325": {
      "op": "uncover 2",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "g#0",
        "e#0"
      ]
    },
    "327": {
      "op": "!",
      "defined_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "g#0",
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "328": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "g#0"
      ]
    },
    "329": {
      "op": "intc_3 // 5",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "g#0",
        "5"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "331": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0"
      ]
    },
    "332": {
      "op": "bytec_1 // 0x06",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "i#0",
        "0x06"
      ]
    },
    "333": {
      "op": "b==",
      "defined_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%6#0"
      ]
    },
    "334": {
      "op": "assert",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "335": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "4"
      ]
    },
    "337": {
      "op": "dup",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "4",
        "4"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%7#0"
      ]
    },
    "339": {
      "op": "bz test_bool_false@6",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "342": {
      "block": "test_and_contd@1",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "f.0#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.0#0"
      ]
    },
    "344": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "f.0#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.0#0",
        "5"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "f.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%8#0"
      ]
    },
    "346": {
      "op": "bz test_bool_false@6",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "349": {
      "block": "test_and_contd@2",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "f.1#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.1#0"
      ]
    },
    "351": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "f.1#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.1#0",
        "0x"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "f.1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%9#0"
      ]
    },
    "353": {
      "op": "bz test_bool_false@6",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "356": {
      "block": "test_and_contd@3",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "f.2#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.2#0"
      ]
    },
    "358": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "f.2#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.2#0",
        "0"
      ]
    },
    "359": {
      "op": "==",
      "defined_out": [
        "f.2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%10#0"
      ]
    },
    "360": {
      "op": "bz test_bool_false@6",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "363": {
      "block": "test_and_contd@4",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "f.3#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.3#0"
      ]
    },
    "365": {
      "op": "bytec_1 // 0x06",
      "defined_out": [
        "0x06",
        "f.3#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "f.3#0",
        "0x06"
      ]
    },
    "366": {
      "op": "b==",
      "defined_out": [
        "f.3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "tmp%11#0"
      ]
    },
    "367": {
      "op": "bz test_bool_false@6",
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "370": {
      "block": "test_bool_true@5",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "and_result%0#0"
      ]
    },
    "371": {
      "block": "test_bool_merge@7",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ]
    },
    "372": {
      "retsub": true,
      "op": "retsub"
    },
    "373": {
      "block": "test_bool_false@6",
      "stack_in": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "f.0#0",
        "f.1#0",
        "f.2#0",
        "f.3#0",
        "and_result%0#0"
      ]
    },
    "374": {
      "op": "b test_bool_merge@7"
    },
    "377": {
      "subroutine": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems",
      "params": {},
      "block": "produceItems",
      "stack_in": [],
      "op": "intc_3 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "378": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "5"
      ],
      "stack_out": [
        "5",
        "0x"
      ]
    },
    "379": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x",
        "5"
      ],
      "stack_out": [
        "5",
        "0x",
        "0"
      ]
    },
    "380": {
      "op": "bytec_1 // 0x06",
      "defined_out": [
        "0",
        "0x",
        "0x06",
        "5"
      ],
      "stack_out": [
        "5",
        "0x",
        "0",
        "0x06"
      ]
    },
    "381": {
      "retsub": true,
      "op": "retsub"
    },
    "382": {
      "subroutine": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring",
      "params": {},
      "block": "testLiteralDestructuring",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "383": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "384": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "385": {
      "op": "assert",
      "stack_out": []
    },
    "386": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "388": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "390": {
      "op": "assert",
      "stack_out": []
    },
    "391": {
      "retsub": true,
      "op": "retsub"
    },
    "392": {
      "subroutine": "tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}