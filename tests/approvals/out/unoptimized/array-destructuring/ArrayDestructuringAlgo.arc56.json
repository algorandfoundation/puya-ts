{
    "name": "ArrayDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testNested",
            "args": [
                {
                    "type": "(uint64,(uint512,uint512))",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "(uint64,(uint512,uint512),uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testLiteralDestructuring",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "produceFixed",
            "args": [],
            "returns": {
                "type": "uint64[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        37
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        133
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        417
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        202,
                        215,
                        232
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCA2NCAxIDgKICAgIGJ5dGVjYmxvY2sgMHggMHgwNiAweDE1MWY3Yzc1CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgYiBtYWluX2Jsb2NrQDEKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NAogICAgLy8gZXhwb3J0IGNsYXNzIEFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBieiBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxMQogICAgYiBtYWluX2FiaV9yb3V0aW5nQDIKCm1haW5fYWJpX3JvdXRpbmdAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NAogICAgLy8gZXhwb3J0IGNsYXNzIEFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBieiBtYWluX2NyZWF0ZV9Ob09wQDkKICAgIGIgbWFpbl9jYWxsX05vT3BAMwoKbWFpbl9jYWxsX05vT3BAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NAogICAgLy8gZXhwb3J0IGNsYXNzIEFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBwdXNoYnl0ZXMgMHg3NGI3ZThkZiAvLyBtZXRob2QgInRlc3ROZXN0ZWQoKHVpbnQ2NCwodWludDUxMix1aW50NTEyKSkpKHVpbnQ2NCwodWludDUxMix1aW50NTEyKSx1aW50NjQsdWludDUxMikiCiAgICBwdXNoYnl0ZXMgMHhhNzgwMDBkZSAvLyBtZXRob2QgInRlc3QoKXZvaWQiCiAgICBwdXNoYnl0ZXMgMHgyZGFmYzZjNiAvLyBtZXRob2QgInRlc3RMaXRlcmFsRGVzdHJ1Y3R1cmluZygpdm9pZCIKICAgIHB1c2hieXRlcyAweGQ0OGI2OTgzIC8vIG1ldGhvZCAicHJvZHVjZUZpeGVkKCl1aW50NjRbM10iCiAgICB1bmNvdmVyIDQKICAgIG1hdGNoIG1haW5fdGVzdE5lc3RlZF9yb3V0ZUA0IG1haW5fdGVzdF9yb3V0ZUA1IG1haW5fdGVzdExpdGVyYWxEZXN0cnVjdHVyaW5nX3JvdXRlQDYgbWFpbl9wcm9kdWNlRml4ZWRfcm91dGVANwogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAOAoKbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDg6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMAoKbWFpbl9hZnRlcl9pZl9lbHNlQDEwOgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMTIKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NAogICAgLy8gZXhwb3J0IGNsYXNzIEFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBlcnIKCm1haW5fcHJvZHVjZUZpeGVkX3JvdXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjQ0CiAgICAvLyBwcm9kdWNlRml4ZWQoKTogRml4ZWRBcnJheTx1aW50NjQsIDM+IHsKICAgIGNhbGxzdWIgcHJvZHVjZUZpeGVkCiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEA4CgptYWluX3Rlc3RMaXRlcmFsRGVzdHJ1Y3R1cmluZ19yb3V0ZUA2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czozNAogICAgLy8gdGVzdExpdGVyYWxEZXN0cnVjdHVyaW5nKCkgewogICAgY2FsbHN1YiB0ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmcKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDgKCm1haW5fdGVzdF9yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czoxMQogICAgLy8gdGVzdCgpIHsKICAgIGNhbGxzdWIgdGVzdAogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAOAoKbWFpbl90ZXN0TmVzdGVkX3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjUKICAgIC8vIHRlc3ROZXN0ZWQoYXJnOiByZWFkb25seSBbdWludDY0LCByZWFkb25seSBbYmlndWludCwgYmlndWludF1dKSB7CiAgICBjYWxsc3ViIHRlc3ROZXN0ZWQKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDgKCm1haW5fY3JlYXRlX05vT3BAOToKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDEwCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NAogICAgLy8gZXhwb3J0IGNsYXNzIEFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGNhbGxzdWIgX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TmVzdGVkW3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdE5lc3RlZDoKICAgIGIgdGVzdE5lc3RlZF9ibG9ja0AwCgp0ZXN0TmVzdGVkX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjUKICAgIC8vIHRlc3ROZXN0ZWQoYXJnOiByZWFkb25seSBbdWludDY0LCByZWFkb25seSBbYmlndWludCwgYmlndWludF1dKSB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdDMKICAgIGJ0b2kKICAgIGNvdmVyIDEKICAgIGludGNfMyAvLyA4CiAgICBwdXNoaW50IDEyOCAvLyAxMjgKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzEgLy8gNjQKICAgIGV4dHJhY3QzCiAgICBjb3ZlciAxCiAgICBpbnRjXzEgLy8gNjQKICAgIGludGNfMSAvLyA2NAogICAgZXh0cmFjdDMKICAgIHVuY292ZXIgMgogICAgY292ZXIgMQogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TmVzdGVkCiAgICBjb3ZlciA0CiAgICBjb3ZlciAzCiAgICBjb3ZlciAyCiAgICBjb3ZlciAxCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgY292ZXIgMgogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18xIC8vIDY0CiAgICBiemVybwogICAgYnwKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICBpbnRjXzEgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMSAvLyA2NAogICAgYnplcm8KICAgIHVuY292ZXIgMgogICAgYnwKICAgIGNvbmNhdAogICAgY29uY2F0CiAgICB1bmNvdmVyIDEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50Y18xIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzEgLy8gNjQKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDIKICAgIGJ8CiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6OkFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28udGVzdFtyb3V0aW5nXSgpIC0+IHZvaWQ6CnRlc3Q6CiAgICBiIHRlc3RfYmxvY2tAMAoKdGVzdF9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czoxMQogICAgLy8gdGVzdCgpIHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0CiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmdbcm91dGluZ10oKSAtPiB2b2lkOgp0ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmc6CiAgICBiIHRlc3RMaXRlcmFsRGVzdHJ1Y3R1cmluZ19ibG9ja0AwCgp0ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmdfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MzQKICAgIC8vIHRlc3RMaXRlcmFsRGVzdHJ1Y3R1cmluZygpIHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmcKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnByb2R1Y2VGaXhlZFtyb3V0aW5nXSgpIC0+IHZvaWQ6CnByb2R1Y2VGaXhlZDoKICAgIGIgcHJvZHVjZUZpeGVkX2Jsb2NrQDAKCnByb2R1Y2VGaXhlZF9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo0NAogICAgLy8gcHJvZHVjZUZpeGVkKCk6IEZpeGVkQXJyYXk8dWludDY0LCAzPiB7CiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6OkFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28ucHJvZHVjZUZpeGVkCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnRlc3ROZXN0ZWQoYXJnLjA6IHVpbnQ2NCwgYXJnLjEuMDogYnl0ZXMsIGFyZy4xLjE6IGJ5dGVzKSAtPiB1aW50NjQsIGJ5dGVzLCBieXRlcywgdWludDY0LCBieXRlczoKdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TmVzdGVkOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo1CiAgICAvLyB0ZXN0TmVzdGVkKGFyZzogcmVhZG9ubHkgW3VpbnQ2NCwgcmVhZG9ubHkgW2JpZ3VpbnQsIGJpZ3VpbnRdXSkgewogICAgcHJvdG8gMyA1CiAgICBiIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6OkFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28udGVzdE5lc3RlZF9ibG9ja0AwCgp0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnRlc3ROZXN0ZWRfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NgogICAgLy8gY29uc3QgW2EsIGJdID0gYXJnCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjcKICAgIC8vIGNvbnN0IFtjLCBbZF1dID0gYXJnCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo4CiAgICAvLyByZXR1cm4gW2EsIGIsIGMsIGRdIGFzIGNvbnN0CiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0KCkgLT4gdm9pZDoKdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czoxMQogICAgLy8gdGVzdCgpIHsKICAgIHByb3RvIDAgMAogICAgYiB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnRlc3RfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjEyCiAgICAvLyBjb25zdCBbYSwgYiwgYywgZF0gPSB0aGlzLnByb2R1Y2VJdGVtcygpCiAgICBjYWxsc3ViIHByb2R1Y2VJdGVtcwogICAgY292ZXIgMwogICAgY292ZXIgMgogICAgY292ZXIgMQogICAgY292ZXIgMwogICAgY292ZXIgMwogICAgY292ZXIgMwogICAgY292ZXIgMwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czoxMwogICAgLy8gY29uc3QgWywgLCBlXSA9IHRoaXMucHJvZHVjZUl0ZW1zKCkKICAgIGNhbGxzdWIgcHJvZHVjZUl0ZW1zCiAgICBjb3ZlciA3CiAgICBjb3ZlciAyCiAgICBjb3ZlciA2CiAgICBjb3ZlciA1CiAgICBjb3ZlciAzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjE2CiAgICAvLyBjb25zdCBmID0gKFtnLCAsICwgaV0gPSB0aGlzLnByb2R1Y2VJdGVtcygpKQogICAgY2FsbHN1YiBwcm9kdWNlSXRlbXMKICAgIGNvdmVyIDMKICAgIGNvdmVyIDMKICAgIGNvdmVyIDIKICAgIGR1cAogICAgY292ZXIgNwogICAgZGlnIDEKICAgIGNvdmVyIDEwCiAgICBjb3ZlciAxMAogICAgdW5jb3ZlciAxCiAgICBjb3ZlciAxMAogICAgdW5jb3ZlciAxCiAgICBjb3ZlciAxMAogICAgY292ZXIgMTAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MTgKICAgIC8vIGFzc2VydChhID09PSA1KQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MTkKICAgIC8vIGFzc2VydChiID09PSBCeXRlcygpKQogICAgYnl0ZWNfMCAvLyAweAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czoyMAogICAgLy8gYXNzZXJ0KCFjKQogICAgIQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjIxCiAgICAvLyBhc3NlcnQoZCA9PT0gNm4pCiAgICB1bmNvdmVyIDIKICAgIGJ5dGVjXzEgLy8gMHgwNgogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MjIKICAgIC8vIGFzc2VydCghZSkKICAgIHVuY292ZXIgMQogICAgIQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjIzCiAgICAvLyBhc3NlcnQoZyA9PT0gNSkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjI0CiAgICAvLyBhc3NlcnQoaSA9PT0gNm4pCiAgICBieXRlY18xIC8vIDB4MDYKICAgIGI9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjI1CiAgICAvLyBhc3NlcnRNYXRjaChmLCBbNSwgQnl0ZXMoKSwgZmFsc2UsIDZuXSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICAmJgogICAgdW5jb3ZlciAxCiAgICBieXRlY18wIC8vIDB4CiAgICA9PQogICAgJiYKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDAKICAgID09CiAgICAmJgogICAgdW5jb3ZlciAxCiAgICBieXRlY18xIC8vIDB4MDYKICAgIGI9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjI3CiAgICAvLyBjb25zdCBbeCwgeSwgel0gPSB0aGlzLnByb2R1Y2VGaXhlZCgpCiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6OkFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28ucHJvZHVjZUZpeGVkCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnByb2R1Y2VJdGVtcygpIC0+IHVpbnQ2NCwgYnl0ZXMsIHVpbnQ2NCwgYnl0ZXM6CnByb2R1Y2VJdGVtczoKICAgIGIgcHJvZHVjZUl0ZW1zX2Jsb2NrQDAKCnByb2R1Y2VJdGVtc19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czozMQogICAgLy8gcmV0dXJuIFs1LCBCeXRlcygpLCBmYWxzZSwgNm5dCiAgICBwdXNoaW50IDUgLy8gNQogICAgYnl0ZWNfMCAvLyAweAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHgwNgogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmcoKSAtPiB2b2lkOgp0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnRlc3RMaXRlcmFsRGVzdHJ1Y3R1cmluZzoKICAgIGIgdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmdfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby50ZXN0TGl0ZXJhbERlc3RydWN0dXJpbmdfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MzUKICAgIC8vIGxldCBhID0gVWludDY0KDEpCiAgICBpbnRjXzIgLy8gMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czozOAogICAgLy8gY29uc3QgW3gsIHldID0gKFtiLCBhXSA9IFthLCBiXSkKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjM2CiAgICAvLyBsZXQgYiA9IFVpbnQ2NCgyKQogICAgcHVzaGludCAyIC8vIDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MzgKICAgIC8vIGNvbnN0IFt4LCB5XSA9IChbYiwgYV0gPSBbYSwgYl0pCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0MwogICAgYnRvaQogICAgY292ZXIgMQogICAgaW50Y18zIC8vIDgKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0MwogICAgYnRvaQogICAgY292ZXIgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czozNQogICAgLy8gbGV0IGEgPSBVaW50NjQoMSkKICAgIGludGNfMiAvLyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjQwCiAgICAvLyBhc3NlcnQoeCA9PT0gYikKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6MzYKICAgIC8vIGxldCBiID0gVWludDY0KDIpCiAgICBwdXNoaW50IDIgLy8gMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo0MQogICAgLy8gYXNzZXJ0KHkgPT09IGEpCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnByb2R1Y2VGaXhlZCgpIC0+IGJ5dGVzOgp0ZXN0cy9hcHByb3ZhbHMvYXJyYXktZGVzdHJ1Y3R1cmluZy5hbGdvLnRzOjpBcnJheURlc3RydWN0dXJpbmdBbGdvLnByb2R1Y2VGaXhlZDoKICAgIGIgdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby5wcm9kdWNlRml4ZWRfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL2FycmF5LWRlc3RydWN0dXJpbmcuYWxnby50czo6QXJyYXlEZXN0cnVjdHVyaW5nQWxnby5wcm9kdWNlRml4ZWRfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6NDUKICAgIC8vIHJldHVybiBuZXcgRml4ZWRBcnJheTx1aW50NjQsIDM+KDEsIDIsIDMpCiAgICBpbnRjXzIgLy8gMQogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweAogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9hcnJheS1kZXN0cnVjdHVyaW5nLmFsZ28udHM6OkFycmF5RGVzdHJ1Y3R1cmluZ0FsZ28uX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlKCkgLT4gdm9pZDoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlOgogICAgYiBfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMAoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlX2Jsb2NrQDA6CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAEABCCYDAAEGBBUffHVCAABCAAAxGyITQQBeQgAAMRkiEkQxGCITQQBMQgAANhoAgAR0t+jfgASngADegAQtr8bGgATUi2mDTwSOBAAcABYAEAAKQgAAQgAAQgAAAIgAokL/84gAlEL/7YgAhkL/54gAFUL/4UL/4TEZIhIxGCISEESIAVokQ0IAADYaAUkiJVgXTgElgYABWEkiI1hOASMjWE8CTgFPAk8BTwJPAk8CiABcTgROA04CTgEWKE8BUE4CSRUjDkQjr6soTwFQSwEVIw5EI69PAqtQUE8BFlBLARUjDkQjr08Cq1AqTwFQsCRDQgAAiAAyJENCAACIAKskQ0IAAIgAxSpPAVCwJEOKAwVCAACL/Yv+i/+L/Yv+TwRPBE8ETwRPBImKAABCAACIAG9OA04CTgFOA04DTgNOA4gAXk4HTgJOBk4FTgOIAFFOA04DTgJJTgdLAU4KTgpPAU4KTwFOCk4KgQUSRCgSRBRETwIpqERPARREgQUSRCmoRIEEgQQSTwGBBRIQTwEoEhBPASISEE8BKagQRIgALIlCAACBBSgiKYlCAAAkFihPAVCBAhZQSSIlWBdOASUlWBdOASQSRIECEkSJQgAAJBYoTwFQgQIWUIEDFlCJQgAAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}