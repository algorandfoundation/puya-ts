{
    "name": "ArrayDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testNested",
            "args": [
                {
                    "type": "(uint64,(uint512,uint512))",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "(uint64,(uint512,uint512),uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testLiteralDestructuring",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "produceFixed",
            "args": [],
            "returns": {
                "type": "uint64[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        37
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        133
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        424
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        151
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,(uint512,uint512))"
                },
                {
                    "pc": [
                        209,
                        222,
                        239
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAEAEABCCYDAAEGBBUffHVCAABCAAAxGyITQQBeQgAAMRkiEkQxGCITQQBMQgAANhoAgAR0t+jfgASngADegAQtr8bGgATUi2mDTwSOBAAcABYAEAAKQgAAQgAAQgAAAIgAqUL/84gAm0L/7YgAjUL/54gAFUL/4UL/4TEZIhIxGCISEESIAWEkQ0IAADYaAUkVgYgBEkRJIiVYF04BJYGAAVhJIiNYTgEjI1hPAk4BTwJPAU8CTwJPAogAXE4ETgNOAk4BFihPAVBOAkkVIw5EI6+rKE8BUEsBFSMORCOvTwKrUFBPARZQSwEVIw5EI69PAqtQKk8BULAkQ0IAAIgAMiRDQgAAiACrJENCAACIAMUqTwFQsCRDigMFQgAAi/2L/ov/i/2L/k8ETwRPBE8ETwSJigAAQgAAiABvTgNOAk4BTgNOA04DTgOIAF5OB04CTgZOBU4DiABRTgNOA04CSU4HSwFOCk4KTwFOCk8BTgpOCoEFEkQoEkQURE8CKahETwEURIEFEkQpqESBBIEEEk8BgQUSEE8BKBIQTwEiEhBPASmoEESIACyJQgAAgQUoIimJQgAAJBYoTwFQgQIWUEkiJVgXTgElJVgXTgEkEkSBAhJEiUIAACQWKE8BUIECFlCBAxZQiUIAAIk=",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}