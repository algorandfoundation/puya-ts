{
    "name": "ArrayDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testNested",
            "args": [
                {
                    "type": "(uint64,(uint512,uint512))",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "(uint64,(uint512,uint512),uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testLiteralDestructuring",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        103,
                        111,
                        115,
                        119
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        56,
                        73,
                        90
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        371
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        218
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        61,
                        78,
                        95
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        143,
                        152,
                        172
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAEABBSYCAAEGMRsiE0EAuDYaAIAEdLfo34AEp4AA3oAELa/Gxk8DjgMAJAATAAIiQzEZIhJEMRgiE0SIAT0kQv/uMRkiEkQxGCITRIgAqCRC/90xGSISRDEYIhNENhoBSSKBCFgXTIEIgYABWEkiI1hMI0lYTwJPAk8CiABhTgROA04CTBZOBEkVIw5EI6+rSwEVIw5EI69PAqsoTwJQTFBMFkxLAhUjDkQjr08DqyhPBFBPAlBPAlBMUIAEFR98dUxQsCRC/2gxGSJMjgEAA0L/XDEYIhJEiACqJEL/UYoDBYv9i/6L/4v9i/5PBE8ETwRPBE8EiYoAAIgAeU4DTgJMTgNOA04DTgOIAGlITgJGAk4DiABfTgNOAkxOAk4CTgJJTglMTghMTgdLAU4HTwIlEkRPAigSRE8CFERPAymoRE8CFEQlEkQpqESBBEkSQQAfiwAlEkEAGIsBKBJBABGLAiISQQAKiwMpqEEAAyREiSJC//olKCIpiSRJEkSBAkkSRImJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}