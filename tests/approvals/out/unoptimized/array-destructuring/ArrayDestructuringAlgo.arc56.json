{
    "name": "ArrayDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testNested",
            "args": [
                {
                    "type": "(uint64,(uint512,uint512))",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "(uint64,(uint512,uint512),uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testLiteralDestructuring",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "produceFixed",
            "args": [],
            "returns": {
                "type": "uint64[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        93,
                        117,
                        136,
                        155
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        443
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        98,
                        122,
                        141,
                        160
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        221,
                        234,
                        251
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAEABCCYDAAEGBBUffHUoQgAAQgAAMRsiE0EA7kIAADYaAIAEdLfo34AEp4AA3oAELa/GxoAE1Itpg08EjgQATgA7ACgAEEIAAEIAAEIAACJFAUIAAEMxGSISRDEYIhNEiAGFKk8BULAkRQFC/+cxGSISRDEYIhNEiAFLJEUBQv/UMRkiEkQxGCITRIgAtyRFAUL/wTEZIhJEMRgiE0Q2GgFJIiVYF04BJYGAAVhJIiNYTgEjI1hPAk4BTwJPAU8CTwJPAogAY04ETgNOAk4BFihPAVBOAkkVIw5EI6+rKE8BUEsBFSMORCOvTwKrUFBPARZQSwEVIw5EI69PAqtQKk8BULAkRQFC/0sxGSJPAY4BAAlCAABCAABC/zMxGCISRIgA1iRFAUL/K4oDBUIAAIv9i/6L/4v9i/5PBE8ETwRPBE8EiYoAAEIAAIgAb04DTgJOAU4DTgNOA04DiABeTgdOAk4GTgVOA4gAUU4DTgNOAklOB0sBTgpOCk8BTgpPAU4KTgqBBRJEKBJEFERPAimoRE8BFESBBRJEKahEgQSBBBJPAYEFEhBPASgSEE8BIhIQTwEpqBBEiAAsiUIAAIEFKCIpiUIAACQWKE8BUIECFlBJIiVYF04BJSVYF04BJBJEgQISRIlCAAAkFihPAVCBAhZQgQMWUIlCAACJ",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}