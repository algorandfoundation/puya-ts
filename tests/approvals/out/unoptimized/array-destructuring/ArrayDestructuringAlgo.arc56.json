{
    "name": "ArrayDestructuringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testNested",
            "args": [
                {
                    "type": "(uint64,(uint512,uint512))",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "(uint64,(uint512,uint512),uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testLiteralDestructuring",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "produceFixed",
            "args": [],
            "returns": {
                "type": "uint64[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        69,
                        90,
                        107,
                        124
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        390
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        242
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        74,
                        95,
                        112,
                        129
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        184,
                        196,
                        212
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAFACCYDAAEGBBUffHUxGyITQQDLNhoAgAR0t+jfgASngADegAQtr8bGgATUi2mDTwSOBAA5ACgAFwACIkMxGSISRDEYIhNEiAFkKkxQsCNC/+oxGSISRDEYIhNEiAEzI0L/2TEZIhJEMRgiE0SIAJ4jQv/IMRkiEkQxGCITRDYaAUkiJVgXTCWBgAFYSSIkWEwkSVhPAkxPAkxPAk8CTwKIAFNOBE4DTgJMFihMUE4CSRUkDkQkr6soTFBLARUkDkQkr08Cq1BQTBZQSwEVJA5EJK9PAqtQKkxQsCNC/10xGSJMjgEAA0L/UTEYIhJEiADKI0L/RooDBYv9i/6L/4v9i/5PBE8ETwRPBE8EiYoAAIgAeE4DTgJMTgNOA04DTgOIAGhITgJGAk4DiABeTgNOA04CSU4HSwFOCk4KTE4JTE4ITgeBBRJEKBJEFERPAimoREwURIEFEkQpqESBBEkSQQAkiwCBBRJBAByLASgSQQAViwIiEkEADosDKahBAAcjRIgAKEiJIkL/9oEFKCIpiSMWKExQgQIWUEkiJVgXTCVJWBdMIxJEgQISRIkjFihMUIECFlCBAxZQiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}