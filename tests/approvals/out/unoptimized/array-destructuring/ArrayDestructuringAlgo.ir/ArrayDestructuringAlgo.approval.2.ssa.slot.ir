main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)" => block@3, method "test()void" => block@4, method "testLiteralDestructuring()void" => block@5, method "produceFixed()uint64[3]" => block@6, * => block@7}
    block@3: // testNested_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(uint512,uint512))%0#0: Encoded(uint64,(uint512,uint512)) = (txna ApplicationArgs 1)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,(uint512,uint512))%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract%1#1: bytes = (extract3 reinterpret_Encoded(uint64,(uint512,uint512))%0#0 8u 128u)
        let aggregate%extract%2#1: bytes = (extract3 aggregate%extract%1#1 0u 64u)
        let aggregate%extract%3#1: bytes = (extract3 aggregate%extract%1#1 64u 64u)
        let tmp%7#0: uint64 = aggregate%item0%0#1
        let tmp%8#0: biguint = aggregate%extract%2#1
        let tmp%9#0: biguint = aggregate%extract%3#1
        let (tmp%10#0: uint64, tmp%11#0: biguint, tmp%12#0: biguint, tmp%13#0: uint64, tmp%14#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(tmp%7#0, tmp%8#0, tmp%9#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%value_len%0#1: uint64 = (len tmp%11#0)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| tmp%11#0 aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let aggregate%encoded%1#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%0#1)
        let aggregate%value_len%1#1: uint64 = (len tmp%12#0)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| tmp%12#0 aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint512)%1#1: Encoded(uint512) = aggregate%arc4_encoded%1#1
        let aggregate%encoded%2#1: Encoded(uint512,uint512) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint512)%1#1)
        let aggregate%encoded%3#1: Encoded(uint512,uint512) = (concat aggregate%encoded%2#1 0x)
        let aggregate%encoded%4#1: Encoded(uint64,(uint512,uint512)) = (concat aggregate%encoded%0#1 aggregate%encoded%3#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%5#1: Encoded(uint64,(uint512,uint512),uint64) = (concat aggregate%encoded%4#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%value_len%2#1: uint64 = (len tmp%14#0)
        let aggregate%len_ok%2#1: bool = (<= aggregate%value_len%2#1 64u)
        (assert aggregate%len_ok%2#1) // overflow
        let aggregate%bzero%2#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#1: bytes[64] = (b| tmp%14#0 aggregate%bzero%2#1)
        let aggregate%as_Encoded(uint512)%2#1: Encoded(uint512) = aggregate%arc4_encoded%2#1
        let aggregate%encoded%6#1: Encoded(uint64,(uint512,uint512),uint64,uint512) = (concat aggregate%encoded%5#1 aggregate%as_Encoded(uint512)%2#1)
        let aggregate%encoded%7#1: Encoded(uint64,(uint512,uint512),uint64,uint512) = (concat aggregate%encoded%6#1 0x)
        let tmp%15#0: Encoded(uint64,(uint512,uint512),uint64,uint512) = aggregate%encoded%7#1
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // test_route_L11
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test()
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // testLiteralDestructuring_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring()
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // produceFixed_route_L44
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let tmp%29#0: Encoded(uint64[3]) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed()
        let tmp%30#0: bytes = (concat 0x151f7c75 tmp%29#0)
        (log tmp%30#0)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@13
    block@9: // bare_routing_L4
        let tmp%31#0: uint64 = (txn OnCompletion)
        switch tmp%31#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L4
        let tmp%32#0: uint64 = (txn ApplicationID)
        let tmp%33#0: bool = (== tmp%32#0 0u)
        (assert tmp%33#0) // can only call when creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate()
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@11: // switch_case_default_L4
        goto block@12
    block@12: // switch_case_next_L4
        goto block@13
    block@13: // after_if_else_L4
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(arg.0: uint64, arg.1.0: biguint, arg.1.1: biguint) -> <uint64, biguint, biguint, uint64, biguint>:
    block@0: // L5
        let a#0: uint64 = arg.0#0
        let b.0#0: biguint = arg.1.0#0
        let b.1#0: biguint = arg.1.1#0
        let c#0: uint64 = arg.0#0
        let d#0: biguint = arg.1.0#0
        return a#0 b.0#0 b.1#0 c#0 d#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test() -> void:
    block@0: // L11
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: bytes, awst_tmp%2#0: bool, awst_tmp%3#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let a#0: uint64 = awst_tmp%0#0
        let b#0: bytes = awst_tmp%1#0
        let c#0: bool = awst_tmp%2#0
        let d#0: biguint = awst_tmp%3#0
        let (awst_tmp%4#0: uint64, awst_tmp%5#0: bytes, awst_tmp%6#0: bool, awst_tmp%7#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let e#0: bool = awst_tmp%6#0
        let (awst_tmp%8#0: uint64, awst_tmp%9#0: bytes, awst_tmp%10#0: bool, awst_tmp%11#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let g#0: uint64 = awst_tmp%8#0
        let i#0: biguint = awst_tmp%11#0
        let f.0#0: uint64 = awst_tmp%8#0
        let f.1#0: bytes = awst_tmp%9#0
        let f.2#0: bool = awst_tmp%10#0
        let f.3#0: biguint = awst_tmp%11#0
        let tmp%0#0: bool = (== a#0 5u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== b#0 0x)
        (assert tmp%1#0)
        let tmp%2#0: bool = (! c#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (b== d#0 6b)
        (assert tmp%3#0)
        let tmp%4#0: bool = (! e#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== g#0 5u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (b== i#0 6b)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== 4u 4u)
        goto tmp%7#0 ? block@1 : block@6
    block@1: // and_contd_L25
        let tmp%8#0: bool = (== f.0#0 5u)
        goto tmp%8#0 ? block@2 : block@6
    block@2: // and_contd_L25
        let tmp%9#0: bool = (== f.1#0 0x)
        goto tmp%9#0 ? block@3 : block@6
    block@3: // and_contd_L25
        let tmp%10#0: bool = (== f.2#0 0u)
        goto tmp%10#0 ? block@4 : block@6
    block@4: // and_contd_L25
        let tmp%11#0: bool = (b== f.3#0 6b)
        goto tmp%11#0 ? block@5 : block@6
    block@5: // bool_true_L25
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L25
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L25
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let awst_tmp%12#0: Encoded(uint64[3]) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed()
        return 

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems() -> <uint64, bytes, bool, biguint>:
    block@0: // L30
        return 5u 0x 0u 6b

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring() -> void:
    block@0: // L34
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%2#1: Encoded(uint64,uint64) = (concat aggregate%encoded%1#1 0x)
        let awst_tmp%0#0: Encoded(uint64,uint64) = aggregate%encoded%2#1
        let aggregate%extract%0#1: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let b#1: uint64 = values%0#0
        let aggregate%extract%1#1: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let a#1: uint64 = values%1#0
        let aggregate%extract%2#1: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let x#0: uint64 = values%2#0
        let aggregate%extract%3#1: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#1
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let y#0: uint64 = values%3#0
        let tmp%0#0: bool = (== x#0 b#1)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== y#0 a#1)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed() -> Encoded(uint64[3]):
    block@0: // L44
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded%3#1: Encoded(uint64[3]) = (concat aggregate%encoded%2#1 0x)
        let encoded_array%0#0: Encoded(uint64[3]) = aggregate%encoded%3#1
        return encoded_array%0#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 