main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@11
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@9
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)" => block@4, method "test()void" => block@5, method "testLiteralDestructuring()void" => block@6, method "produceFixed()uint64[3]" => block@7, * => block@8}
    block@4: // testNested_route_L5
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested[routing]()
        goto block@8
    block@5: // test_route_L11
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test[routing]()
        goto block@8
    block@6: // testLiteralDestructuring_route_L34
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring[routing]()
        goto block@8
    block@7: // produceFixed_route_L44
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed[routing]()
        goto block@8
    block@8: // switch_case_next_L4
        goto block@10
    block@9: // create_NoOp_L4
        goto block@10
    block@10: // after_if_else_L4
        goto block@12
    block@11: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate()
        exit 1u
    block@12: // after_if_else_L4
        exit 0u
    block@13: // after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64,(uint512,uint512))%0#0: Encoded(uint64,(uint512,uint512)) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,(uint512,uint512))%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(uint64,(uint512,uint512))%0#0 8u 128u)
        let aggregate%extract%2#0: bytes = (extract3 aggregate%extract%1#0 0u 64u)
        let aggregate%extract%3#0: bytes = (extract3 aggregate%extract%1#0 64u 64u)
        let tmp%0#0: uint64 = aggregate%item0%0#0
        let tmp%1#0: biguint = aggregate%extract%2#0
        let tmp%2#0: biguint = aggregate%extract%3#0
        let (tmp%3#0: uint64, tmp%4#0: biguint, tmp%5#0: biguint, tmp%6#0: uint64, tmp%7#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(tmp%0#0, tmp%1#0, tmp%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%4#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%4#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%0#0)
        let aggregate%value_len%1#0: uint64 = (len tmp%5#0)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%5#0 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint512)%1#0)
        let aggregate%as_Encoded(uint512,uint512)%0#0: Encoded(uint512,uint512) = aggregate%head%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint512,uint512)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%value_len%2#0: uint64 = (len tmp%7#0)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| tmp%7#0 aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint512)%2#0)
        let aggregate%as_Encoded(uint64,(uint512,uint512),uint64,uint512)%0#0: Encoded(uint64,(uint512,uint512),uint64,uint512) = aggregate%head%5#0
        let tmp%8#0: Encoded(uint64,(uint512,uint512),uint64,uint512) = aggregate%as_Encoded(uint64,(uint512,uint512),uint64,uint512)%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test[routing]() -> void:
    block@0: // L11
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test()
        exit 1u

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring[routing]() -> void:
    block@0: // L34
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring()
        exit 1u

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed[routing]() -> void:
    block@0: // L44
        let tmp%0#0: Encoded(uint64[3]) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(arg.0: uint64, arg.1.0: biguint, arg.1.1: biguint) -> <uint64, biguint, biguint, uint64, biguint>:
    block@0: // L5
        let a#0: uint64 = arg.0#0
        let b.0#0: biguint = arg.1.0#0
        let b.1#0: biguint = arg.1.1#0
        let c#0: uint64 = arg.0#0
        let d#0: biguint = arg.1.0#0
        return a#0 b.0#0 b.1#0 c#0 d#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test() -> void:
    block@0: // L11
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: bytes, awst_tmp%2#0: bool, awst_tmp%3#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let a#0: uint64 = awst_tmp%0#0
        let b#0: bytes = awst_tmp%1#0
        let c#0: bool = awst_tmp%2#0
        let d#0: biguint = awst_tmp%3#0
        let (awst_tmp%4#0: uint64, awst_tmp%5#0: bytes, awst_tmp%6#0: bool, awst_tmp%7#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let e#0: bool = awst_tmp%6#0
        let (awst_tmp%8#0: uint64, awst_tmp%9#0: bytes, awst_tmp%10#0: bool, awst_tmp%11#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let g#0: uint64 = awst_tmp%8#0
        let i#0: biguint = awst_tmp%11#0
        let f.0#0: uint64 = awst_tmp%8#0
        let f.1#0: bytes = awst_tmp%9#0
        let f.2#0: bool = awst_tmp%10#0
        let f.3#0: biguint = awst_tmp%11#0
        let tmp%0#0: bool = (== a#0 5u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== b#0 0x)
        (assert tmp%1#0)
        let tmp%2#0: bool = (! c#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (b== d#0 6b)
        (assert tmp%3#0)
        let tmp%4#0: bool = (! e#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== g#0 5u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (b== i#0 6b)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== 4u 4u)
        let tmp%8#0: bool = (== f.0#0 5u)
        let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
        let tmp%10#0: bool = (== f.1#0 0x)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        let tmp%12#0: bool = (== f.2#0 0u)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        let tmp%14#0: bool = (b== f.3#0 6b)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        (assert tmp%15#0) // assert target is match for conditions
        let awst_tmp%12#0: Encoded(uint64[3]) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed()
        return 

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems() -> <uint64, bytes, bool, biguint>:
    block@0: // L30
        return 5u 0x 0u 6b

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring() -> void:
    block@0: // L34
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let awst_tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let x#0: uint64 = values%0#0
        let y#0: uint64 = values%1#0
        let tmp%0#0: bool = (== x#0 1u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== y#0 2u)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed() -> Encoded(uint64[3]):
    block@0: // L44
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#0
        return encoded_array%0#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 