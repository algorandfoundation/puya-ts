#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 64 1 8
    bytecblock 0x 0x06 0x151f7c75
    bytec_0 // ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/array-destructuring.algo.ts:4
    // export class ArrayDestructuringAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@9
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/array-destructuring.algo.ts:4
    // export class ArrayDestructuringAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x74b7e8df // method "testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)"
    pushbytes 0xa78000de // method "test()void"
    pushbytes 0x2dafc6c6 // method "testLiteralDestructuring()void"
    pushbytes 0xd48b6983 // method "produceFixed()uint64[3]"
    uncover 4
    match main_testNested_route@3 main_test_route@4 main_testLiteralDestructuring_route@5 main_produceFixed_route@6
    b main_switch_case_default@7

main_switch_case_default@7:
    b main_switch_case_next@8

main_switch_case_next@8:
    b main_after_if_else@13

main_after_if_else@13:
    // tests/approvals/array-destructuring.algo.ts:4
    // export class ArrayDestructuringAlgo extends Contract {
    intc_0 // 0
    bury 1
    b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14

main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14:
    return

main_produceFixed_route@6:
    // tests/approvals/array-destructuring.algo.ts:44
    // produceFixed(): FixedArray<uint64, 3> {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub produceFixed
    bytec_2 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14

main_testLiteralDestructuring_route@5:
    // tests/approvals/array-destructuring.algo.ts:34
    // testLiteralDestructuring() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testLiteralDestructuring
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14

main_test_route@4:
    // tests/approvals/array-destructuring.algo.ts:11
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14

main_testNested_route@3:
    // tests/approvals/array-destructuring.algo.ts:5
    // testNested(arg: readonly [uint64, readonly [biguint, biguint]]) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/array-destructuring.algo.ts:4
    // export class ArrayDestructuringAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_3 // 8
    pushint 128 // 128
    extract3
    dup
    intc_0 // 0
    intc_1 // 64
    extract3
    cover 1
    intc_1 // 64
    intc_1 // 64
    extract3
    uncover 2
    cover 1
    uncover 2
    uncover 1
    // tests/approvals/array-destructuring.algo.ts:5
    // testNested(arg: readonly [uint64, readonly [biguint, biguint]]) {
    uncover 2
    uncover 2
    uncover 2
    callsub testNested
    cover 4
    cover 3
    cover 2
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    cover 2
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    uncover 2
    b|
    concat
    concat
    uncover 1
    itob
    concat
    dig 1
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    uncover 2
    b|
    concat
    bytec_2 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14

main_bare_routing@9:
    // tests/approvals/array-destructuring.algo.ts:4
    // export class ArrayDestructuringAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    uncover 1
    match main___algots__.defaultCreate@10
    b main_switch_case_default@11

main_switch_case_default@11:
    b main_switch_case_next@12

main_switch_case_next@12:
    b main_after_if_else@13

main___algots__.defaultCreate@10:
    // tests/approvals/array-destructuring.algo.ts:4
    // export class ArrayDestructuringAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__@14


// tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(arg.0: uint64, arg.1.0: bytes, arg.1.1: bytes) -> uint64, bytes, bytes, uint64, bytes:
testNested:
    // tests/approvals/array-destructuring.algo.ts:5
    // testNested(arg: readonly [uint64, readonly [biguint, biguint]]) {
    proto 3 5
    b testNested_block@0

testNested_block@0:
    // tests/approvals/array-destructuring.algo.ts:6
    // const [a, b] = arg
    frame_dig -3
    frame_dig -2
    frame_dig -1
    // tests/approvals/array-destructuring.algo.ts:7
    // const [c, [d]] = arg
    frame_dig -3
    frame_dig -2
    // tests/approvals/array-destructuring.algo.ts:8
    // return [a, b, c, d] as const
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test() -> void:
test:
    // tests/approvals/array-destructuring.algo.ts:11
    // test() {
    proto 0 0
    b test_block@0

test_block@0:
    // tests/approvals/array-destructuring.algo.ts:12
    // const [a, b, c, d] = this.produceItems()
    callsub produceItems
    cover 3
    cover 2
    cover 1
    cover 3
    cover 3
    cover 3
    cover 3
    // tests/approvals/array-destructuring.algo.ts:13
    // const [, , e] = this.produceItems()
    callsub produceItems
    cover 7
    cover 2
    cover 6
    cover 5
    cover 3
    // tests/approvals/array-destructuring.algo.ts:16
    // const f = ([g, , , i] = this.produceItems())
    callsub produceItems
    cover 3
    cover 3
    cover 2
    dup
    cover 7
    dig 1
    cover 10
    cover 10
    uncover 1
    cover 10
    uncover 1
    cover 10
    cover 10
    // tests/approvals/array-destructuring.algo.ts:18
    // assert(a === 5)
    pushint 5 // 5
    ==
    assert
    // tests/approvals/array-destructuring.algo.ts:19
    // assert(b === Bytes())
    bytec_0 // 0x
    ==
    assert
    // tests/approvals/array-destructuring.algo.ts:20
    // assert(!c)
    !
    assert
    // tests/approvals/array-destructuring.algo.ts:21
    // assert(d === 6n)
    uncover 2
    bytec_1 // 0x06
    b==
    assert
    // tests/approvals/array-destructuring.algo.ts:22
    // assert(!e)
    uncover 1
    !
    assert
    // tests/approvals/array-destructuring.algo.ts:23
    // assert(g === 5)
    pushint 5 // 5
    ==
    assert
    // tests/approvals/array-destructuring.algo.ts:24
    // assert(i === 6n)
    bytec_1 // 0x06
    b==
    assert
    // tests/approvals/array-destructuring.algo.ts:25
    // assertMatch(f, [5, Bytes(), false, 6n])
    pushint 4 // 4
    pushint 4 // 4
    ==
    uncover 1
    pushint 5 // 5
    ==
    &&
    uncover 1
    bytec_0 // 0x
    ==
    &&
    uncover 1
    intc_0 // 0
    ==
    &&
    uncover 1
    bytec_1 // 0x06
    b==
    &&
    assert // assert target is match for conditions
    // tests/approvals/array-destructuring.algo.ts:27
    // const [x, y, z] = this.produceFixed()
    callsub produceFixed
    retsub


// tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems() -> uint64, bytes, uint64, bytes:
produceItems:
    b produceItems_block@0

produceItems_block@0:
    // tests/approvals/array-destructuring.algo.ts:31
    // return [5, Bytes(), false, 6n]
    pushint 5 // 5
    bytec_0 // 0x
    intc_0 // 0
    bytec_1 // 0x06
    retsub


// tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring() -> void:
testLiteralDestructuring:
    b testLiteralDestructuring_block@0

testLiteralDestructuring_block@0:
    // tests/approvals/array-destructuring.algo.ts:35
    // let a = Uint64(1)
    intc_2 // 1
    // tests/approvals/array-destructuring.algo.ts:38
    // const [x, y] = ([b, a] = [a, b])
    itob
    bytec_0 // 0x
    uncover 1
    concat
    // tests/approvals/array-destructuring.algo.ts:36
    // let b = Uint64(2)
    pushint 2 // 2
    // tests/approvals/array-destructuring.algo.ts:38
    // const [x, y] = ([b, a] = [a, b])
    itob
    concat
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    btoi
    cover 1
    // tests/approvals/array-destructuring.algo.ts:35
    // let a = Uint64(1)
    intc_2 // 1
    // tests/approvals/array-destructuring.algo.ts:40
    // assert(x === b)
    ==
    assert
    // tests/approvals/array-destructuring.algo.ts:36
    // let b = Uint64(2)
    pushint 2 // 2
    // tests/approvals/array-destructuring.algo.ts:41
    // assert(y === a)
    ==
    assert
    retsub


// tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceFixed() -> bytes:
produceFixed:
    b produceFixed_block@0

produceFixed_block@0:
    // tests/approvals/array-destructuring.algo.ts:45
    // return new FixedArray<uint64, 3>(1, 2, 3)
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    retsub


// tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
