#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x151f7c75
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/urange.algo.ts:4
    // class UrangeAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@10
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/urange.algo.ts:4
    // class UrangeAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@8
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/urange.algo.ts:4
    // class UrangeAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x01329a32 // method "testSingleArg()uint64[]"
    pushbytes 0xea63d4ac // method "testTwoArg()uint64[]"
    pushbytes 0xad2e1f0e // method "testThreeArg()uint64[]"
    uncover 3
    match main_testSingleArg_route@4 main_testTwoArg_route@5 main_testThreeArg_route@6
    b main_switch_case_next@7

main_switch_case_next@7:
    b main_after_if_else@9

main_after_if_else@9:
    b main_after_if_else@11

main_after_if_else@11:
    // tests/approvals/urange.algo.ts:4
    // class UrangeAlgo extends Contract {
    err

main_testThreeArg_route@6:
    // tests/approvals/urange.algo.ts:19
    // testThreeArg() {
    callsub testThreeArg
    b main_switch_case_next@7

main_testTwoArg_route@5:
    // tests/approvals/urange.algo.ts:12
    // testTwoArg() {
    callsub testTwoArg
    b main_switch_case_next@7

main_testSingleArg_route@4:
    // tests/approvals/urange.algo.ts:5
    // testSingleArg() {
    callsub testSingleArg
    b main_switch_case_next@7

main_create_NoOp@8:
    b main_after_if_else@9

main___algots__.defaultCreate@10:
    // tests/approvals/urange.algo.ts:4
    // class UrangeAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg[routing]() -> void:
testSingleArg:
    b testSingleArg_block@0

testSingleArg_block@0:
    // tests/approvals/urange.algo.ts:5
    // testSingleArg() {
    callsub tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg[routing]() -> void:
testTwoArg:
    b testTwoArg_block@0

testTwoArg_block@0:
    // tests/approvals/urange.algo.ts:12
    // testTwoArg() {
    callsub tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg[routing]() -> void:
testThreeArg:
    b testThreeArg_block@0

testThreeArg_block@0:
    // tests/approvals/urange.algo.ts:19
    // testThreeArg() {
    callsub tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg() -> bytes:
tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg:
    // tests/approvals/urange.algo.ts:5
    // testSingleArg() {
    proto 0 1
    b tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_block@0

tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_block@0:
    // tests/approvals/urange.algo.ts:6
    // let results: uint64[] = []
    intc_0 // 0
    itob
    extract 6 2
    // tests/approvals/urange.algo.ts:7
    // for (const i of urange(5)) {
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_header@1

tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_header@1:
    // tests/approvals/urange.algo.ts:7
    // for (const i of urange(5)) {
    frame_dig 1
    pushint 5 // 5
    <
    bz tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_after_for@4
    b tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_body@2

tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_body@2:
    // tests/approvals/urange.algo.ts:7
    // for (const i of urange(5)) {
    frame_dig 1
    // tests/approvals/urange.algo.ts:8
    // results = [...results, i]
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    itob
    concat
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 0
    uncover 1
    concat // on error: max array length exceeded
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_footer@3

tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_footer@3:
    // tests/approvals/urange.algo.ts:7
    // for (const i of urange(5)) {
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_for_header@1

tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg_after_for@4:
    // tests/approvals/urange.algo.ts:10
    // return results
    retsub


// tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg() -> bytes:
tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg:
    // tests/approvals/urange.algo.ts:12
    // testTwoArg() {
    proto 0 1
    b tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_block@0

tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_block@0:
    // tests/approvals/urange.algo.ts:13
    // let results: uint64[] = []
    intc_0 // 0
    itob
    extract 6 2
    // tests/approvals/urange.algo.ts:14
    // for (const i of urange(2, 5)) {
    intc_1 // 1
    assert // Step cannot be zero
    intc_2 // 2
    b tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_header@1

tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_header@1:
    // tests/approvals/urange.algo.ts:14
    // for (const i of urange(2, 5)) {
    frame_dig 1
    pushint 5 // 5
    <
    bz tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_after_for@4
    b tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_body@2

tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_body@2:
    // tests/approvals/urange.algo.ts:14
    // for (const i of urange(2, 5)) {
    frame_dig 1
    // tests/approvals/urange.algo.ts:15
    // results = [...results, i]
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    itob
    concat
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 0
    uncover 1
    concat // on error: max array length exceeded
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_footer@3

tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_footer@3:
    // tests/approvals/urange.algo.ts:14
    // for (const i of urange(2, 5)) {
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_for_header@1

tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg_after_for@4:
    // tests/approvals/urange.algo.ts:17
    // return results
    retsub


// tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg() -> bytes:
tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg:
    // tests/approvals/urange.algo.ts:19
    // testThreeArg() {
    proto 0 1
    b tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_block@0

tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_block@0:
    // tests/approvals/urange.algo.ts:20
    // let results: uint64[] = []
    intc_0 // 0
    itob
    extract 6 2
    // tests/approvals/urange.algo.ts:21
    // for (const i of urange(2, 10, 3)) {
    pushint 3 // 3
    assert // Step cannot be zero
    intc_2 // 2
    b tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_header@1

tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_header@1:
    // tests/approvals/urange.algo.ts:21
    // for (const i of urange(2, 10, 3)) {
    frame_dig 1
    pushint 10 // 10
    <
    bz tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_after_for@4
    b tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_body@2

tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_body@2:
    // tests/approvals/urange.algo.ts:21
    // for (const i of urange(2, 10, 3)) {
    frame_dig 1
    // tests/approvals/urange.algo.ts:22
    // results = [...results, i]
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    itob
    concat
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 0
    uncover 1
    concat // on error: max array length exceeded
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_footer@3

tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_footer@3:
    // tests/approvals/urange.algo.ts:21
    // for (const i of urange(2, 10, 3)) {
    frame_dig 1
    pushint 3 // 3
    +
    frame_bury 1
    b tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_for_header@1

tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg_after_for@4:
    // tests/approvals/urange.algo.ts:24
    // return results
    retsub


// tests/approvals/urange.algo.ts::UrangeAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
