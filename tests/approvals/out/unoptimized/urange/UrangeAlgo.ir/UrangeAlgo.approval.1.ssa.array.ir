main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testSingleArg()uint64[]" => block@3, method "testTwoArg()uint64[]" => block@4, method "testThreeArg()uint64[]" => block@5, * => block@6}
    block@3: // testSingleArg_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: Encoded(len+uint64[]) = tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // testTwoArg_route_L12
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        let tmp%13#0: Encoded(len+uint64[]) = tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg()
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        let tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // testThreeArg_route_L19
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let tmp%19#0: Encoded(len+uint64[]) = tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg()
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
        (log tmp%20#0)
        let tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@6: // switch_case_default_L4
        goto block@7
    block@7: // switch_case_next_L4
        goto block@12
    block@8: // bare_routing_L4
        let tmp%21#0: uint64 = (txn OnCompletion)
        switch tmp%21#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L4
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (== tmp%22#0 0u)
        (assert tmp%23#0) // can only call when creating
        tests/approvals/urange.algo.ts::UrangeAlgo.__algots__.defaultCreate()
        let tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@10: // switch_case_default_L4
        goto block@11
    block@11: // switch_case_next_L4
        goto block@12
    block@12: // after_if_else_L4
        let tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#3 <- block@9, tests/approvals/urange.algo.ts::UrangeAlgo.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg() -> Encoded(len+uint64[]):
    block@0: // L5
        let array%as_bytes%0#1: bytes[8] = (itob 0u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%0#1: bytes = (concat array%len_u16%0#1 0x)
        let array%encoded%1#1: Encoded(len+uint64[]) = (concat array%encoded%0#1 0x)
        let encoded_array%0#0: Encoded(len+uint64[]) = array%encoded%1#1
        let results#0: Encoded(len+uint64[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L7
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@0, results#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L7
        let array%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%2#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 1u)
        let array%len_u16%1#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%3#1: bytes = (concat array%len_u16%1#1 array%encoded%2#1)
        let array%encoded%4#1: Encoded(len+uint64[]) = (concat array%encoded%3#1 0x)
        let encoded_array%1#0: Encoded(len+uint64[]) = array%encoded%4#1
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let results#2: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        goto block@3
    block@3: // for_footer_L7
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L7
        return results#1

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg() -> Encoded(len+uint64[]):
    block@0: // L12
        let array%as_bytes%0#1: bytes[8] = (itob 0u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%0#1: bytes = (concat array%len_u16%0#1 0x)
        let array%encoded%1#1: Encoded(len+uint64[]) = (concat array%encoded%0#1 0x)
        let encoded_array%0#0: Encoded(len+uint64[]) = array%encoded%1#1
        let results#0: Encoded(len+uint64[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 2u
        goto block@1
    block@1: // for_header_L14
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@0, results#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L14
        let array%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%2#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 1u)
        let array%len_u16%1#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%3#1: bytes = (concat array%len_u16%1#1 array%encoded%2#1)
        let array%encoded%4#1: Encoded(len+uint64[]) = (concat array%encoded%3#1 0x)
        let encoded_array%1#0: Encoded(len+uint64[]) = array%encoded%4#1
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let results#2: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        goto block@3
    block@3: // for_footer_L14
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L14
        return results#1

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg() -> Encoded(len+uint64[]):
    block@0: // L19
        let array%as_bytes%0#1: bytes[8] = (itob 0u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%0#1: bytes = (concat array%len_u16%0#1 0x)
        let array%encoded%1#1: Encoded(len+uint64[]) = (concat array%encoded%0#1 0x)
        let encoded_array%0#0: Encoded(len+uint64[]) = array%encoded%1#1
        let results#0: Encoded(len+uint64[]) = encoded_array%0#0
        (assert 3u) // Step cannot be zero
        let i#0: uint64 = 2u
        goto block@1
    block@1: // for_header_L21
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@0, results#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 10u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L21
        let array%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%2#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 1u)
        let array%len_u16%1#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%3#1: bytes = (concat array%len_u16%1#1 array%encoded%2#1)
        let array%encoded%4#1: Encoded(len+uint64[]) = (concat array%encoded%3#1 0x)
        let encoded_array%1#0: Encoded(len+uint64[]) = array%encoded%4#1
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let results#2: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        goto block@3
    block@3: // for_footer_L21
        let i#2: uint64 = (+ i#1 3u)
        goto block@1
    block@4: // after_for_L21
        return results#1

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 