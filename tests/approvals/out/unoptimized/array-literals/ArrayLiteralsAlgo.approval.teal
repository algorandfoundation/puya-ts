#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    pushbytes ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/array-literals.algo.ts:9
    // class ArrayLiteralsAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/array-literals.algo.ts:9
    // class ArrayLiteralsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xe04ac19e // method "test(uint64,uint64)void"
    pushbytes 0x341a3794 // method "test2()uint64"
    uncover 2
    match main_test_route@3 main_test2_route@4
    b main_switch_case_default@5

main_switch_case_default@5:
    b main_switch_case_next@6

main_switch_case_next@6:
    b main_after_if_else@11

main_after_if_else@11:
    // tests/approvals/array-literals.algo.ts:9
    // class ArrayLiteralsAlgo extends Contract {
    intc_0 // 0
    bury 1
    b main_after_inlined_tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__@12

main_after_inlined_tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__@12:
    return

main_test2_route@4:
    // tests/approvals/array-literals.algo.ts:22
    // test2(): uint64 {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test2
    itob
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__@12

main_test_route@3:
    // tests/approvals/array-literals.algo.ts:10
    // test(a: uint64, b: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/array-literals.algo.ts:9
    // class ArrayLiteralsAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/approvals/array-literals.algo.ts:10
    // test(a: uint64, b: uint64) {
    callsub test
    intc_1 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__@12

main_bare_routing@7:
    // tests/approvals/array-literals.algo.ts:9
    // class ArrayLiteralsAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    uncover 1
    match main___algots__.defaultCreate@8
    b main_switch_case_default@9

main_switch_case_default@9:
    b main_switch_case_next@10

main_switch_case_next@10:
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    // tests/approvals/array-literals.algo.ts:9
    // class ArrayLiteralsAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    bury 1
    b main_after_inlined_tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__@12


// tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.test(a: uint64, b: uint64) -> void:
test:
    // tests/approvals/array-literals.algo.ts:10
    // test(a: uint64, b: uint64) {
    proto 2 0
    b test_block@0

test_block@0:
    // tests/approvals/array-literals.algo.ts:14
    // const conditionalExplicitTuple: [uint64, uint64] = a < b ? [a, b] : [b, a]
    frame_dig -2
    frame_dig -1
    <
    bz test_ternary_false@2
    b test_ternary_true@1

test_ternary_true@1:
    b test_ternary_merge@3

test_ternary_merge@3:
    retsub

test_ternary_false@2:
    b test_ternary_merge@3


// tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.test2() -> uint64:
test2:
    b test2_block@0

test2_block@0:
    // tests/approvals/array-literals.algo.ts:23-25
    // const x: SomeObj = {
    //   things: [],
    // }
    intc_0 // 0
    itob
    extract 6 2
    pushint 2 // 2
    itob
    extract 6 2
    pushbytes 0x
    uncover 1
    concat
    uncover 1
    concat
    // tests/approvals/array-literals.algo.ts:27
    // x.things.push(new Uint32(123))
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    pushbytes 0x
    pushbytes 0x0000007b
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    dig 1
    intc_0 // 0
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // tests/approvals/array-literals.algo.ts:28
    // return x.things.length
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    retsub


// tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
