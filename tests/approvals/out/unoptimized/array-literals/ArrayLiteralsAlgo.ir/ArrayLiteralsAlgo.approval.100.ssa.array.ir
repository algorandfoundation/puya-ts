main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L9
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,uint64)void" => block@3, method "test2()uint64" => block@4, * => block@5}
    block@3: // test_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.test(tmp%7#0, tmp%8#0)
        let tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // test2_route_L22
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        let tmp%13#0: uint64 = tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.test2()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%14#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%15#0: bytes = (concat 0x151f7c75 tmp%14#0)
        (log tmp%15#0)
        let tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L9
        goto block@6
    block@6: // switch_case_next_L9
        goto block@11
    block@7: // bare_routing_L9
        let tmp%16#0: uint64 = (txn OnCompletion)
        switch tmp%16#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L9
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (== tmp%17#0 0u)
        (assert tmp%18#0) // can only call when creating
        tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__algots__.defaultCreate()
        let tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L9
        goto block@10
    block@10: // switch_case_next_L9
        goto block@11
    block@11: // after_if_else_L9
        let tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.test(a: uint64, b: uint64) -> void:
    block@0: // L10
        let tmp%1#0: bool = (< a#0 b#0)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // ternary_true_L14
        goto block@3
    block@2: // ternary_false_L14
        goto block@3
    block@3: // ternary_merge_L14
        return 

subroutine tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.test2() -> uint64:
    block@0: // L22
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint32[])%0#0: Encoded(len+uint32[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint32[]) = aggregate%as_Encoded(len+uint32[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len encoded_array%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 2u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%0#0 encoded_array%0#0)
        let aggregate%as_Encoded((len+uint32[]))%0#0: Encoded((len+uint32[])) = aggregate%concat%0#0
        let tmp%0#0: Encoded((len+uint32[])) = aggregate%as_Encoded((len+uint32[]))%0#0
        let x#0: Encoded((len+uint32[])) = tmp%0#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 x#0 0u)
        let aggregate%len%0#0: uint64 = (len x#0)
        let aggregate%substring3%0#0: bytes = (substring3 x#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%0#0: Encoded(len+uint32[]) = aggregate%substring3%0#0
        let aggregate%head%1#0: bytes = (concat 0x 0x0000007b)
        let aggregate%as_Encoded(uint32[])%0#0: Encoded(uint32[]) = aggregate%head%1#0
        let tmp%1#0: Encoded(uint32[]) = aggregate%as_Encoded(uint32[])%0#0
        let concat%0#0: Encoded(len+uint32[]) = (concat tuple_item%0#0 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tuple_item%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint32[])%0#0: Encoded(len+uint32[]) = replace%0#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 x#0 0u)
        let aggregate%len%1#0: uint64 = (len x#0)
        let aggregate%substring3%1#0: bytes = (substring3 x#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 x#0 0u)
        let aggregate%data_up_to_item%0#0: bytes = (extract3 x#0 0u aggregate%item_offset%0#0)
        let aggregate%updated_data%0#0: bytes = (concat aggregate%data_up_to_item%0#0 as_Encoded(len+uint32[])%0#0)
        let updated_tuple%0#0: Encoded((len+uint32[])) = aggregate%updated_data%0#0
        let x#1: Encoded((len+uint32[])) = updated_tuple%0#0
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 x#1 0u)
        let aggregate%len%2#0: uint64 = (len x#1)
        let aggregate%substring3%2#0: bytes = (substring3 x#1 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tuple_item%2#0: Encoded(len+uint32[]) = aggregate%substring3%2#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tuple_item%2#0 0u)
        let tmp%3#0: uint64 = aggregate%array_length%0#0
        return tmp%3#0

subroutine tests/approvals/array-literals.algo.ts::ArrayLiteralsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L9
        return 