{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/biguint-expressions.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;AA+ByD;AAAL;AAAhC;;;;;AAAU;;;;;AAAW;AAAO;AAA5C;;AAAyD;;;AAAzD;;;AACQ;;;;AAAM;;;;AAAd;;;AACO;AAAP;AA7BJ;;;AACS;AAAc;AAAd;AAAP;AACe;AAAR;AAAkB;AAAlB;AAAP;AACe;AAAR;AAAmB;AAAnB;AAAP;AACe;AAAO;AAAf;AAAP;AACe;AAAO;AAAf;AAAP;AACe;AAAQ;AAAhB;AAAP;AACe;AAAQ;AAAhB;AAAP;AACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAqB;AAA7B;AAAP;AACO;;;;;;;;;AAAgC;AAAhC;AAAP;AACO;;AAAA;AAAA;;AAAA;AAAP;AACe;;AAAA;AAAA;AAAR;AAAmB;;AAAA;AAAA;AAAnB;AAAP;AACO;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;;AAGF;;;AACS;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACoC;AAAT;AAAmB;;AAAnB;AAApB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/biguint-expressions.algo.ts::DemoContract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 4 0 1"
    },
    "6": {
      "op": "bytecblock 0x 0x01"
    },
    "11": {
      "op": "intc_0 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "12": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "13": {
      "op": "pushint 12312312 // 12312312",
      "defined_out": [
        "12312312",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "12312312"
      ]
    },
    "18": {
      "op": "pushbytes 0xbbdef8",
      "defined_out": [
        "0xbbdef8",
        "12312312",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "12312312",
        "0xbbdef8"
      ]
    },
    "23": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0xbbdef8",
        "12312312",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "12312312",
        "0xbbdef8",
        "0"
      ]
    },
    "24": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0",
        "0x",
        "0xbbdef8",
        "12312312",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "12312312",
        "0xbbdef8",
        "0",
        "0x"
      ]
    },
    "25": {
      "op": "uncover 4",
      "stack_out": [
        "12312312",
        "0xbbdef8",
        "0",
        "0x",
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0",
        "0x",
        "0x04",
        "0xbbdef8",
        "12312312",
        "tmp%0#0"
      ],
      "stack_out": [
        "12312312",
        "0xbbdef8",
        "0",
        "0x",
        "tmp%0#0",
        "0x04"
      ]
    },
    "30": {
      "callsub": "tests/approvals/biguint-expressions.algo.ts::testConstructor",
      "op": "callsub testConstructor",
      "stack_out": []
    },
    "33": {
      "op": "pushbytes 0x01f4",
      "defined_out": [
        "0x01f4"
      ],
      "stack_out": [
        "0x01f4"
      ]
    },
    "37": {
      "op": "pushbytes 0x03e8",
      "defined_out": [
        "0x01f4",
        "0x03e8"
      ],
      "stack_out": [
        "0x01f4",
        "0x03e8"
      ]
    },
    "41": {
      "callsub": "tests/approvals/biguint-expressions.algo.ts::testOps",
      "op": "callsub testOps",
      "stack_out": []
    },
    "44": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "45": {
      "op": "return",
      "stack_out": []
    },
    "46": {
      "subroutine": "tests/approvals/biguint-expressions.algo.ts::testConstructor",
      "params": {
        "a#0": "uint64",
        "a_b#0": "bytes",
        "b#0": "uint64",
        "b_b#0": "bytes",
        "c#0": "bytes",
        "c_b#0": "bytes"
      },
      "block": "testConstructor",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "49": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "50": {
      "op": "dup",
      "stack_out": [
        "0x",
        "0x"
      ]
    },
    "51": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "52": {
      "op": "assert",
      "stack_out": []
    },
    "53": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "54": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "55": {
      "op": "bytec_1 // 0x01",
      "defined_out": [
        "0x01",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x01"
      ]
    },
    "56": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "57": {
      "op": "assert",
      "stack_out": []
    },
    "58": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "59": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0"
      ]
    },
    "60": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "reinterpret_biguint%1#0",
        "0x"
      ]
    },
    "61": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "62": {
      "op": "assert",
      "stack_out": []
    },
    "63": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "64": {
      "op": "dup",
      "stack_out": [
        "0x",
        "0x"
      ]
    },
    "65": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "66": {
      "op": "assert",
      "stack_out": []
    },
    "67": {
      "op": "bytec_1 // 0x01",
      "stack_out": [
        "0x01"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "69": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "70": {
      "op": "assert",
      "stack_out": []
    },
    "71": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "72": {
      "op": "dup",
      "stack_out": [
        "0x",
        "0x"
      ]
    },
    "73": {
      "op": "b==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "74": {
      "op": "assert",
      "stack_out": []
    },
    "75": {
      "op": "bytec_1 // 0x01",
      "stack_out": [
        "0x01"
      ]
    },
    "76": {
      "op": "dup",
      "stack_out": [
        "0x01",
        "0x01"
      ]
    },
    "77": {
      "op": "b==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "78": {
      "op": "assert",
      "stack_out": []
    },
    "79": {
      "op": "pushbytes 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
      "defined_out": [
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      ],
      "stack_out": [
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      ]
    },
    "145": {
      "op": "dup",
      "stack_out": [
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      ]
    },
    "146": {
      "op": "b==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "147": {
      "op": "assert",
      "stack_out": []
    },
    "148": {
      "op": "pushbytes 0x045fcc91fd8e73",
      "defined_out": [
        "0x045fcc91fd8e73"
      ],
      "stack_out": [
        "0x045fcc91fd8e73"
      ]
    },
    "157": {
      "op": "dup",
      "stack_out": [
        "0x045fcc91fd8e73",
        "0x045fcc91fd8e73"
      ]
    },
    "158": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "159": {
      "op": "assert",
      "stack_out": []
    },
    "160": {
      "op": "frame_dig -6",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "162": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "163": {
      "op": "frame_dig -5",
      "defined_out": [
        "a_b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "a_b#0 (copy)"
      ]
    },
    "165": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "166": {
      "op": "assert",
      "stack_out": []
    },
    "167": {
      "op": "frame_dig -6",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "169": {
      "op": "dup",
      "stack_out": [
        "a#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "170": {
      "op": "*",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%3#0"
      ]
    },
    "172": {
      "op": "frame_dig -5",
      "stack_out": [
        "reinterpret_biguint%3#0",
        "a_b#0 (copy)"
      ]
    },
    "174": {
      "op": "dup",
      "stack_out": [
        "reinterpret_biguint%3#0",
        "a_b#0 (copy)",
        "a_b#0 (copy)"
      ]
    },
    "175": {
      "op": "b*",
      "defined_out": [
        "reinterpret_biguint%3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "reinterpret_biguint%3#0",
        "tmp%11#0"
      ]
    },
    "176": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "177": {
      "op": "assert",
      "stack_out": []
    },
    "178": {
      "op": "frame_dig -4",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "180": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0"
      ]
    },
    "181": {
      "op": "frame_dig -3",
      "defined_out": [
        "b_b#0 (copy)",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0",
        "b_b#0 (copy)"
      ]
    },
    "183": {
      "op": "b==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "184": {
      "op": "assert",
      "stack_out": []
    },
    "185": {
      "op": "frame_dig -2",
      "defined_out": [
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "reinterpret_biguint%5#0"
      ]
    },
    "187": {
      "op": "frame_dig -1",
      "defined_out": [
        "c_b#0 (copy)",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "reinterpret_biguint%5#0",
        "c_b#0 (copy)"
      ]
    },
    "189": {
      "op": "b==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "190": {
      "op": "assert",
      "stack_out": []
    },
    "191": {
      "retsub": true,
      "op": "retsub"
    },
    "192": {
      "subroutine": "tests/approvals/biguint-expressions.algo.ts::testOps",
      "params": {
        "smaller#0": "bytes",
        "larger#0": "bytes"
      },
      "block": "testOps",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "195": {
      "op": "frame_dig -2",
      "defined_out": [
        "smaller#0 (copy)"
      ],
      "stack_out": [
        "smaller#0 (copy)"
      ]
    },
    "197": {
      "op": "frame_dig -1",
      "defined_out": [
        "larger#0 (copy)",
        "smaller#0 (copy)"
      ],
      "stack_out": [
        "smaller#0 (copy)",
        "larger#0 (copy)"
      ]
    },
    "199": {
      "op": "b<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "200": {
      "op": "assert",
      "stack_out": []
    },
    "201": {
      "op": "frame_dig -2",
      "stack_out": [
        "smaller#0 (copy)"
      ]
    },
    "203": {
      "op": "dup",
      "stack_out": [
        "smaller#0 (copy)",
        "smaller#0 (copy)"
      ]
    },
    "204": {
      "op": "b<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "205": {
      "op": "assert",
      "stack_out": []
    },
    "206": {
      "op": "frame_dig -1",
      "stack_out": [
        "larger#0 (copy)"
      ]
    },
    "208": {
      "op": "frame_dig -2",
      "stack_out": [
        "larger#0 (copy)",
        "smaller#0 (copy)"
      ]
    },
    "210": {
      "op": "b>",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "211": {
      "op": "assert",
      "stack_out": []
    },
    "212": {
      "op": "frame_dig -1",
      "stack_out": [
        "larger#0 (copy)"
      ]
    },
    "214": {
      "op": "dup",
      "stack_out": [
        "larger#0 (copy)",
        "larger#0 (copy)"
      ]
    },
    "215": {
      "op": "b>=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "216": {
      "op": "assert",
      "stack_out": []
    },
    "217": {
      "op": "frame_dig -2",
      "stack_out": [
        "smaller#0 (copy)"
      ]
    },
    "219": {
      "op": "dup",
      "stack_out": [
        "smaller#0 (copy)",
        "smaller#0 (copy)"
      ]
    },
    "220": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "221": {
      "op": "assert",
      "stack_out": []
    },
    "222": {
      "op": "intc_0 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "223": {
      "op": "bzero",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "224": {
      "op": "frame_dig -2",
      "defined_out": [
        "reinterpret_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "reinterpret_bytes%0#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "227": {
      "op": "frame_dig -2",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "smaller#0 (copy)"
      ]
    },
    "229": {
      "op": "b==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "230": {
      "error": "Leading zeros should be ignored in equality",
      "op": "assert // Leading zeros should be ignored in equality",
      "stack_out": []
    },
    "231": {
      "retsub": true,
      "op": "retsub"
    }
  }
}