main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L61
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L61
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "someMethod()string" => block@3, * => block@4}
    block@3: // someMethod_route_L63
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/abi-decorators.algo.ts::SubAbi2.someMethod[routing]()
        goto block@4
    block@4: // switch_case_next_L61
        goto block@6
    block@5: // __algots__.defaultCreate_L61
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/abi-decorators.algo.ts::SubAbi2.__algots__.defaultCreate()
        exit 1u
    block@6: // after_if_else_L61
        exit 0u
    block@7: // after_inlined_tests/approvals/abi-decorators.algo.ts::SubAbi2.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/abi-decorators.algo.ts::SubAbi2.someMethod[routing]() -> void:
    block@0: // L63
        let tmp%0#0: string = tests/approvals/abi-decorators.algo.ts::SubAbi2.someMethod()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::SubAbi2.someMethod() -> string:
    block@0: // L63
        return "sub-abi-2:noop"

subroutine tests/approvals/abi-decorators.algo.ts::SubAbi2.__algots__.defaultCreate() -> void:
    block@0: // L61
        return 