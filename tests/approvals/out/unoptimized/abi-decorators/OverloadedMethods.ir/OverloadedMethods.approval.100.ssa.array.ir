main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L35
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L35
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L35
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "doThing(uint64)uint64" => block@4, method "doThing(uint64,uint64)uint64" => block@5, * => block@6}
    block@4: // doThing_route_L36
        tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingOne[routing]()
        goto block@6
    block@5: // doThing_route_L41
        tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingTwo[routing]()
        goto block@6
    block@6: // switch_case_next_L35
        goto block@8
    block@7: // create_NoOp_L35
        goto block@8
    block@8: // after_if_else_L35
        goto block@10
    block@9: // __algots__.defaultCreate_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/abi-decorators.algo.ts::OverloadedMethods.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L35
        exit 0u
    block@11: // after_inlined_tests/approvals/abi-decorators.algo.ts::OverloadedMethods.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingOne[routing]() -> void:
    block@0: // L36
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: uint64 = tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingOne(tmp%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingTwo[routing]() -> void:
    block@0: // L41
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%2#0: uint64 = tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingTwo(tmp%0#0, tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingOne(x: uint64) -> uint64:
    block@0: // L36
        return x#0

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingTwo(x: uint64, y: uint64) -> uint64:
    block@0: // L41
        let tmp%0#0: uint64 = (* x#0 y#0)
        return tmp%0#0

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.__algots__.defaultCreate() -> void:
    block@0: // L35
        return 