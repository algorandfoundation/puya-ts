{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc4-types.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJI;;;AACU;AAAG;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAjB;;;AACA;;;AACA;;;AACW;;;;;;;;;;AAAX;;;AACA;;;AACA;;;AACA;;;AACuB;;;;;;;;;;;;AAAvB;;;AACA;;;AACe;AAAA;AAAA;AACD;AAAA;AAAW;AAAlB;AAAP;AACO;AAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7I6B;;;;;;AACA;AAExB;AAAP;;AAGF;;;AACY;;;AACK;AAAW;AAAnB;AAAP;AACW;;;AACS;AAAb;AAAP;AAEU;AACK;AAAW;AAAnB;AAAP;AACU;;AAAA;AAAA;;;AACS;AACZ;;AAAA;AAAP;AAGU;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAJ;;AAAI;AACJ;AACC;;AAAA;AAAP;AAEe;;AAAA;AAAW;;AAAnB;AAAP;AAEM;AAGC;AAAP;AAEkB;;;;;;;;;;AAED;AAAW;;AAArB;AAAP;AACkB;;;;;;AACkB;;;;AAA7B;AAAP;AAEa;;;AAEN;AAA+B;AAA/B;AAAP;;AAIW;AACS;AAAb;AAAP;AACW;;AACD;;;AAAW;;;;;;;AAAd;AAAP;AADW;;AAAA;AAOJ;AAAP;;AAGF;;;AACc;AACD;;;AAAW;AAAf;AAAP;AADY;AAES;AAAd;AAAP;AACY;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACD;;;AAAJ;;AAAA;AAAP;AAEY;;AACD;;;AAAiB;;;;;;;AAArB;AAAP;AADY;;AAGA;;;AAAW;;;;;;;;;;AAAX;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACD;;;AAAiB;;;;;;;;;;;;;AAArB;AAAP;;AAQW;;;;AAHA;;;;;;AAGA;AAAA;;;AAFA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACD;;;AAAW;;;;;;;;;;;AAAd;AAAP;;AAMF;;;AACkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAEhB;;;AAAa;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAEoB;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAEG;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAhB;AAAP;AAEiB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAED;AAAT;AAAA;AAAA;AAAA;AAAgB;AAAA;AAAA;;;AAAA;AAAhB;AAAP;;AAQU;AACC;AACJ;AAAP;;AAK0B;;AADhB;AAGH;AAAP;AAHU;AAIG;AAAN;AAAP;AACS;AAAF;AAAA;AALG;AAKH;AAAA;AAAA;AAAS;AAAT;AAAP;;AAIU;AAAU;;;;;;;;;;AAAV;AACJ;AAAY;AAAA;AAAA;AAAZ;AACqB;AAAA;AAAA;AACpB;AAAP;AAEU;AAAW;AAAd;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 2"
    },
    "7": {
      "op": "bytecblock 0x 0x0000 0x00 base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0x000548656c6c6f 0x000568656c6c6f"
    },
    "64": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testStr",
      "op": "callsub testStr"
    },
    "67": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "68": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "1"
      ],
      "stack_out": [
        "1",
        "0x02"
      ]
    },
    "71": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000004",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000004",
        "0x02",
        "1"
      ],
      "stack_out": [
        "1",
        "0x02",
        "0x0000000000000000000000000000000000000000000000000000000000000004"
      ]
    },
    "105": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testUintN",
      "op": "callsub testUintN",
      "stack_out": []
    },
    "108": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testUFixed",
      "op": "callsub testUFixed"
    },
    "111": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testByte",
      "op": "callsub testByte"
    },
    "114": {
      "op": "pushbytes 0x0000000000000041",
      "defined_out": [
        "0x0000000000000041"
      ],
      "stack_out": [
        "0x0000000000000041"
      ]
    },
    "124": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testArrays",
      "op": "callsub testArrays",
      "stack_out": []
    },
    "127": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testAddress",
      "op": "callsub testAddress"
    },
    "130": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testTuple",
      "op": "callsub testTuple"
    },
    "133": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testUFixed",
      "op": "callsub testUFixed"
    },
    "136": {
      "op": "pushbytes \"hmmmmmmmmm\"",
      "defined_out": [
        "\"hmmmmmmmmm\""
      ],
      "stack_out": [
        "\"hmmmmmmmmm\""
      ]
    },
    "148": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testDynamicBytes",
      "op": "callsub testDynamicBytes",
      "stack_out": []
    },
    "151": {
      "callsub": "tests/approvals/arc4-types.algo.ts::testStaticBytes",
      "op": "callsub testStaticBytes"
    },
    "154": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "155": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "156": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "157": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0"
      ]
    },
    "158": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "160": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "161": {
      "op": "assert",
      "stack_out": []
    },
    "162": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "163": {
      "op": "return",
      "stack_out": []
    },
    "164": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "params": {
        "array#0": "bytes",
        "fixed_byte_size#0": "uint64"
      },
      "block": "dynamic_array_pop_fixed_size",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "167": {
      "op": "frame_dig -2",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "169": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "170": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "171": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "172": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "173": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "177": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "array#0 (copy)"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "array#0 (copy)",
        "tmp%1#0"
      ]
    },
    "180": {
      "op": "replace2 0",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "182": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "183": {
      "op": "len",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "184": {
      "op": "frame_dig -1",
      "defined_out": [
        "fixed_byte_size#0 (copy)",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "186": {
      "op": "-",
      "defined_out": [
        "item_location#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0"
      ]
    },
    "187": {
      "op": "dup2",
      "defined_out": [
        "item_location#0",
        "item_location#0 (copy)",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)"
      ]
    },
    "188": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "190": {
      "op": "extract3",
      "defined_out": [
        "item_location#0",
        "popped#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "popped#0"
      ]
    },
    "191": {
      "op": "cover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "item_location#0"
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0"
      ]
    },
    "194": {
      "op": "intc_0 // 0",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0",
        "0"
      ]
    },
    "195": {
      "op": "uncover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "0",
        "item_location#0"
      ]
    },
    "197": {
      "op": "substring3",
      "stack_out": [
        "popped#0",
        "result#0"
      ]
    },
    "198": {
      "retsub": true,
      "op": "retsub"
    },
    "199": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testUFixed",
      "params": {},
      "block": "testUFixed",
      "stack_in": [],
      "op": "pushbytes 0x000004dc",
      "defined_out": [
        "0x000004dc"
      ],
      "stack_out": [
        "0x000004dc"
      ]
    },
    "205": {
      "op": "dup",
      "stack_out": [
        "0x000004dc",
        "0x000004dc"
      ]
    },
    "206": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "assert",
      "stack_out": []
    },
    "208": {
      "retsub": true,
      "op": "retsub"
    },
    "209": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testUintN",
      "params": {
        "n#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "testUintN",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "212": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04"
      ],
      "stack_out": [
        "0x04"
      ]
    },
    "215": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "218": {
      "op": "assert",
      "stack_out": []
    },
    "219": {
      "op": "pushbytes 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "0xff"
      ]
    },
    "222": {
      "op": "dup",
      "stack_out": [
        "0xff",
        "0xff"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "224": {
      "op": "assert",
      "stack_out": []
    },
    "225": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "226": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "227": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "2"
      ]
    },
    "228": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "229": {
      "op": "assert",
      "stack_out": []
    },
    "230": {
      "op": "frame_dig -3",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "232": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "233": {
      "op": "extract 7 1",
      "defined_out": [
        "z#0"
      ],
      "stack_out": [
        "z#0"
      ]
    },
    "236": {
      "op": "btoi",
      "defined_out": [
        "z_native#0"
      ],
      "stack_out": [
        "z_native#0"
      ]
    },
    "237": {
      "op": "frame_dig -3",
      "stack_out": [
        "z_native#0",
        "n#0 (copy)"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "240": {
      "op": "assert",
      "stack_out": []
    },
    "241": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "243": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "244": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "16"
      ]
    },
    "246": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "247": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "248": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "16"
      ]
    },
    "250": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "251": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "b#0 (copy)"
      ]
    },
    "253": {
      "op": "b|",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "254": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a_native#0"
      ],
      "stack_out": [
        "a#0",
        "a_native#0"
      ]
    },
    "255": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "a_native#0",
        "b#0 (copy)"
      ]
    },
    "257": {
      "op": "b==",
      "defined_out": [
        "a#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%6#0"
      ]
    },
    "258": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "259": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "c#0 (copy)"
      ]
    },
    "261": {
      "op": "len",
      "defined_out": [
        "a#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#0"
      ]
    },
    "262": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "a#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#0",
        "32"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "a#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%8#0"
      ]
    },
    "265": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "266": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a_from_bytes#0"
      ],
      "stack_out": [
        "a_from_bytes#0",
        "a#0"
      ]
    },
    "267": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "268": {
      "op": "assert",
      "stack_out": []
    },
    "269": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c"
      ],
      "stack_out": [
        "0x000000000000000c"
      ]
    },
    "279": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "280": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "12"
      ]
    },
    "282": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "283": {
      "op": "assert",
      "stack_out": []
    },
    "284": {
      "op": "pushbytes 0x0000c571",
      "defined_out": [
        "0x0000c571"
      ],
      "stack_out": [
        "0x0000c571"
      ]
    },
    "290": {
      "op": "pushbytes 0xc571",
      "defined_out": [
        "0x0000c571",
        "0xc571"
      ],
      "stack_out": [
        "0x0000c571",
        "0xc571"
      ]
    },
    "294": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "295": {
      "op": "assert",
      "stack_out": []
    },
    "296": {
      "op": "pushbytes 0xff",
      "stack_out": [
        "0xff"
      ]
    },
    "299": {
      "op": "b~",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "300": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x00"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "302": {
      "op": "assert",
      "stack_out": []
    },
    "303": {
      "retsub": true,
      "op": "retsub"
    },
    "304": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testStr",
      "params": {},
      "block": "testStr",
      "stack_in": [],
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "305": {
      "op": "dup",
      "stack_out": [
        "0x0000",
        "0x0000"
      ]
    },
    "306": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "307": {
      "error": "Empty string should equal the uint16 length prefix",
      "op": "assert // Empty string should equal the uint16 length prefix",
      "stack_out": []
    },
    "308": {
      "op": "bytec 4 // 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f"
      ],
      "stack_out": [
        "0x000548656c6c6f"
      ]
    },
    "310": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "313": {
      "op": "pushbytes \"Hello\"",
      "defined_out": [
        "\"Hello\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"Hello\""
      ]
    },
    "320": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "321": {
      "op": "assert",
      "stack_out": []
    },
    "322": {
      "op": "bytec 4 // 0x000548656c6c6f",
      "stack_out": [
        "0x000548656c6c6f"
      ]
    },
    "324": {
      "op": "dup",
      "stack_out": [
        "0x000548656c6c6f",
        "0x000548656c6c6f"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "326": {
      "op": "assert",
      "stack_out": []
    },
    "327": {
      "retsub": true,
      "op": "retsub"
    },
    "328": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testDynamicBytes",
      "params": {
        "someBytes#0": "bytes"
      },
      "block": "testDynamicBytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "331": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "332": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "336": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "337": {
      "error": "No args should give empty bytes",
      "op": "assert // No args should give empty bytes",
      "stack_out": []
    },
    "338": {
      "op": "bytec_1 // 0x0000",
      "stack_out": [
        "0x0000"
      ]
    },
    "339": {
      "op": "dup",
      "stack_out": [
        "0x0000",
        "0x0000"
      ]
    },
    "340": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "341": {
      "error": "bytes prop should return length header (of 0)",
      "op": "assert // bytes prop should return length header (of 0)",
      "stack_out": []
    },
    "342": {
      "op": "frame_dig -1",
      "defined_out": [
        "someBytes#0 (copy)"
      ],
      "stack_out": [
        "someBytes#0 (copy)"
      ]
    },
    "344": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "345": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "346": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "349": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%0#0",
        "someBytes#0 (copy)"
      ]
    },
    "351": {
      "op": "concat",
      "defined_out": [
        "db2#0"
      ],
      "stack_out": [
        "db2#0"
      ]
    },
    "352": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "355": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "someBytes#0 (copy)"
      ]
    },
    "357": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "358": {
      "op": "assert",
      "stack_out": []
    },
    "359": {
      "op": "bytec 5 // 0x000568656c6c6f",
      "defined_out": [
        "0x000568656c6c6f"
      ],
      "stack_out": [
        "0x000568656c6c6f"
      ]
    },
    "361": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "364": {
      "op": "pushbytes \"hello\"",
      "defined_out": [
        "\"hello\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"hello\""
      ]
    },
    "371": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "372": {
      "op": "assert",
      "stack_out": []
    },
    "373": {
      "op": "bytec 5 // 0x000568656c6c6f",
      "stack_out": [
        "0x000568656c6c6f"
      ]
    },
    "375": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "378": {
      "op": "pushbytes 0x000620776f726c64",
      "defined_out": [
        "0x000620776f726c64",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x000620776f726c64"
      ]
    },
    "388": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "391": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "392": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "393": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "394": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%1#0"
      ]
    },
    "395": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "db4#0"
      ],
      "stack_out": [
        "db4#0"
      ]
    },
    "400": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "403": {
      "op": "pushbytes \"hello world\"",
      "defined_out": [
        "\"hello world\"",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "\"hello world\""
      ]
    },
    "416": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "417": {
      "op": "assert",
      "stack_out": []
    },
    "418": {
      "retsub": true,
      "op": "retsub"
    },
    "419": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testStaticBytes",
      "params": {},
      "block": "testStaticBytes",
      "stack_in": [],
      "op": "pushbytes 0x0004",
      "defined_out": [
        "0x0004"
      ],
      "stack_out": [
        "0x0004"
      ]
    },
    "423": {
      "op": "pushbytes 0x00000000",
      "defined_out": [
        "0x00000000",
        "0x0004"
      ],
      "stack_out": [
        "0x0004",
        "0x00000000"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "433": {
      "op": "pushbytes 0xaabbccddee",
      "defined_out": [
        "0xaabbccddee",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0xaabbccddee"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "441": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "442": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "443": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "444": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "447": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "s4#0"
      ],
      "stack_out": [
        "s4#0"
      ]
    },
    "449": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "452": {
      "op": "pushbytes 0x00000000aabbccddee",
      "defined_out": [
        "0x00000000aabbccddee",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00000000aabbccddee"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "464": {
      "op": "assert",
      "stack_out": []
    },
    "465": {
      "retsub": true,
      "op": "retsub"
    },
    "466": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testArrays",
      "params": {
        "n#0": "bytes"
      },
      "block": "testArrays",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "469": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "470": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "n#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "n#0 (copy)"
      ]
    },
    "472": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "473": {
      "op": "frame_dig -1",
      "stack_out": [
        "result%0#0",
        "n#0 (copy)"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "476": {
      "op": "frame_dig -1",
      "stack_out": [
        "result%1#0",
        "n#0 (copy)"
      ]
    },
    "478": {
      "op": "concat",
      "defined_out": [
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0"
      ]
    },
    "479": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0",
        "0x0003"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "0x0003",
        "result%2#0"
      ]
    },
    "484": {
      "op": "concat",
      "defined_out": [
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0"
      ]
    },
    "485": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "488": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "489": {
      "op": "frame_dig -1",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "n#0 (copy)"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "492": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "493": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "494": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "495": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "496": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "497": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "498": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "499": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "500": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "501": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "504": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "505": {
      "op": "concat",
      "stack_out": [
        "myArray#0"
      ]
    },
    "506": {
      "op": "dup",
      "defined_out": [
        "myArray#0",
        "myArray#0 (copy)"
      ],
      "stack_out": [
        "myArray#0",
        "myArray#0 (copy)"
      ]
    },
    "507": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%1#0",
        "myArray#0"
      ]
    },
    "511": {
      "op": "dup",
      "stack_out": [
        "expr_value_trimmed%1#0",
        "myArray#0",
        "myArray#0 (copy)"
      ]
    },
    "512": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%2#0",
        "myArray#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "myArray#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "515": {
      "op": "uncover 2",
      "stack_out": [
        "myArray#0",
        "expr_value_trimmed%2#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "517": {
      "op": "swap",
      "stack_out": [
        "myArray#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "concatenated%1#0"
      ]
    },
    "519": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "520": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "concatenated%1#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "521": {
      "op": "intc_1 // 8",
      "stack_out": [
        "myArray#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "522": {
      "op": "/",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "523": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "524": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "527": {
      "op": "swap",
      "stack_out": [
        "myArray#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "528": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0"
      ]
    },
    "529": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "0x"
      ]
    },
    "530": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "0x",
        "n#0 (copy)"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%3#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%3#0"
      ]
    },
    "533": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%3#0",
        "n#0 (copy)"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%4#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%4#0"
      ]
    },
    "536": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%4#0",
        "n#0 (copy)"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%5#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%5#0"
      ]
    },
    "539": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%5#0",
        "n#0 (copy)"
      ]
    },
    "541": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%6#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%6#0"
      ]
    },
    "542": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%6#0",
        "n#0 (copy)"
      ]
    },
    "544": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%7#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%7#0"
      ]
    },
    "545": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%7#0",
        "n#0 (copy)"
      ]
    },
    "547": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%8#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%8#0"
      ]
    },
    "548": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%8#0",
        "n#0 (copy)"
      ]
    },
    "550": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%9#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%9#0"
      ]
    },
    "551": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%9#0",
        "n#0 (copy)"
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "doubleArray#0",
        "myArray#0",
        "result%10#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%10#0"
      ]
    },
    "554": {
      "op": "pushbytes 0x0008",
      "defined_out": [
        "0x0008",
        "doubleArray#0",
        "myArray#0",
        "result%10#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "result%10#0",
        "0x0008"
      ]
    },
    "558": {
      "op": "swap",
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "0x0008",
        "result%10#0"
      ]
    },
    "559": {
      "op": "concat",
      "defined_out": [
        "array_data%1#0",
        "doubleArray#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "doubleArray#0",
        "array_data%1#0"
      ]
    },
    "560": {
      "op": "==",
      "defined_out": [
        "myArray#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "myArray#0",
        "tmp%0#0"
      ]
    },
    "561": {
      "op": "assert",
      "stack_out": [
        "myArray#0"
      ]
    },
    "562": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "myArray#0",
        "0x"
      ]
    },
    "563": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "0x",
        "n#0 (copy)"
      ]
    },
    "565": {
      "op": "concat",
      "defined_out": [
        "myArray#0",
        "result%11#0"
      ],
      "stack_out": [
        "myArray#0",
        "result%11#0"
      ]
    },
    "566": {
      "op": "frame_dig -1",
      "stack_out": [
        "myArray#0",
        "result%11#0",
        "n#0 (copy)"
      ]
    },
    "568": {
      "op": "concat",
      "defined_out": [
        "myArray#0",
        "result%12#0"
      ],
      "stack_out": [
        "myArray#0",
        "result%12#0"
      ]
    },
    "569": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "myArray#0",
        "result%12#0",
        "0x"
      ]
    },
    "570": {
      "op": "swap",
      "stack_out": [
        "myArray#0",
        "0x",
        "result%12#0"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail%0#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "array_head_and_tail%0#0"
      ]
    },
    "572": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "573": {
      "op": "intc_1 // 8",
      "stack_out": [
        "myArray#0",
        "array_head_and_tail%0#0",
        "0",
        "8"
      ]
    },
    "574": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "myArray#0"
      ],
      "stack_out": [
        "myArray#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "575": {
      "op": "intc_1 // 8",
      "stack_out": [
        "myArray#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "576": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "myArray#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "myArray#0",
        "tmp%1#0"
      ]
    },
    "577": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "myArray#0"
      ]
    },
    "578": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%1#0",
        "myArray#0",
        "8"
      ]
    },
    "579": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "data%0#0",
        "popped%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "popped%0#0",
        "data%0#0"
      ]
    },
    "582": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "popped%0#0"
      ]
    },
    "583": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "584": {
      "op": "assert",
      "stack_out": []
    },
    "585": {
      "retsub": true,
      "op": "retsub"
    },
    "586": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testByte",
      "params": {},
      "block": "testByte",
      "stack_in": [],
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "587": {
      "op": "dup",
      "stack_out": [
        "0x00",
        "0x00"
      ]
    },
    "588": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "589": {
      "op": "assert",
      "stack_out": []
    },
    "590": {
      "retsub": true,
      "op": "retsub"
    },
    "591": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testAddress",
      "params": {},
      "block": "testAddress",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "593": {
      "op": "bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "594": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "595": {
      "error": "Zero address should not match sender",
      "op": "assert // Zero address should not match sender",
      "stack_out": []
    },
    "596": {
      "op": "bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "597": {
      "op": "dup",
      "stack_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "598": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "599": {
      "error": "Two zero addresses should match",
      "op": "assert // Two zero addresses should match",
      "stack_out": []
    },
    "600": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "601": {
      "op": "intc_2 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "0",
        "1"
      ]
    },
    "602": {
      "op": "*",
      "defined_out": [
        "item_offset%0#0"
      ],
      "stack_out": [
        "item_offset%0#0"
      ]
    },
    "603": {
      "op": "bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "item_offset%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "item_offset%0#0"
      ]
    },
    "605": {
      "op": "intc_2 // 1",
      "stack_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "item_offset%0#0",
        "1"
      ]
    },
    "606": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "607": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x00"
      ]
    },
    "608": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "609": {
      "error": "Zero address should start with zero byte",
      "op": "assert // Zero address should start with zero byte",
      "stack_out": []
    },
    "610": {
      "retsub": true,
      "op": "retsub"
    },
    "611": {
      "subroutine": "tests/approvals/arc4-types.algo.ts::testTuple",
      "params": {},
      "block": "testTuple",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "612": {
      "op": "pushbytes 0x0000000000000022",
      "defined_out": [
        "0x",
        "0x0000000000000022"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000022"
      ]
    },
    "622": {
      "op": "concat",
      "defined_out": [
        "t#0"
      ],
      "stack_out": [
        "t#0"
      ]
    },
    "623": {
      "op": "dup",
      "defined_out": [
        "t#0",
        "t#0 (copy)"
      ],
      "stack_out": [
        "t#0",
        "t#0 (copy)"
      ]
    },
    "624": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "t#0",
        "t#0 (copy)"
      ],
      "stack_out": [
        "t#0",
        "t#0 (copy)",
        "0"
      ]
    },
    "625": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "t#0",
        "t#0 (copy)"
      ],
      "stack_out": [
        "t#0",
        "t#0 (copy)",
        "0",
        "8"
      ]
    },
    "626": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "firstItem#0",
        "t#0"
      ],
      "stack_out": [
        "t#0",
        "firstItem#0"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "firstItem#0",
        "t#0"
      ]
    },
    "628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "firstItem#0",
        "t#0",
        "0"
      ]
    },
    "629": {
      "op": "intc_1 // 8",
      "stack_out": [
        "firstItem#0",
        "t#0",
        "0",
        "8"
      ]
    },
    "630": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "firstItem#0",
        "firstItemIndexer#0"
      ],
      "stack_out": [
        "firstItem#0",
        "firstItemIndexer#0"
      ]
    },
    "631": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "632": {
      "op": "assert",
      "stack_out": []
    },
    "633": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "634": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "635": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "636": {
      "op": "assert",
      "stack_out": []
    },
    "637": {
      "retsub": true,
      "op": "retsub"
    }
  }
}