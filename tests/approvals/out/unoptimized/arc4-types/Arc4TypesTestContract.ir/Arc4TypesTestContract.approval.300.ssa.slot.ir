main tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram:
    block@0: // L191
        _puya_lib.util.ensure_budget(1400u, 0u)
        tests/approvals/arc4-types.algo.ts::testStr()
        tests/approvals/arc4-types.algo.ts::testUintN(1u, 2b, 0x0000000000000000000000000000000000000000000000000000000000000004)
        tests/approvals/arc4-types.algo.ts::testUFixed()
        tests/approvals/arc4-types.algo.ts::testByte()
        tests/approvals/arc4-types.algo.ts::testArrays(0x0000000000000041)
        tests/approvals/arc4-types.algo.ts::testAddress()
        tests/approvals/arc4-types.algo.ts::testTuple()
        tests/approvals/arc4-types.algo.ts::testUFixed()
        tests/approvals/arc4-types.algo.ts::testDynamicBytes("hmmmmmmmmm")
        tests/approvals/arc4-types.algo.ts::testStaticBytes()
        tests/approvals/arc4-types.algo.ts::testZeroValues()
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let result#0: Encoded(len+uint64[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        tests/approvals/arc4-types.algo.ts::testAsUint64()
        tests/approvals/arc4-types.algo.ts::testAsBigUint()
        return 1u

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L46
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#1: bytes = tmp%8#0
        return popped#0 result#1

subroutine tests/approvals/arc4-types.algo.ts::testUFixed() -> void:
    block@0: // L23
        let tmp%0#0: bool = (== 0x000004dc 0x000004dc)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testUintN(n: uint64, b: biguint, c: Encoded(uint256)) -> void:
    block@0: // L30
        let tmp%0#0: uint64 = (len 0x04)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== 0xff 0xff)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (len 0x0000)
        let tmp%4#0: bool = (== tmp%3#0 2u)
        (assert tmp%4#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob n#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 8u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint8%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 7u 1u)
        let aggregate%as_Encoded(uint8)%0#0: Encoded(uint8) = aggregate%uint8%0#0
        let tmp%5#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#0
        let z#0: Encoded(uint8) = tmp%5#0
        let tmp%6#0: uint64 = (btoi z#0)
        let z_native#0: uint64 = tmp%6#0
        let tmp%7#0: bool = (== z_native#0 n#0)
        (assert tmp%7#0)
        let aggregate%value_len%0#0: uint64 = (len b#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 16u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 16u)
        let aggregate%arc4_encoded%0#0: bytes[16] = (b| b#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint128)%0#0: Encoded(uint128) = aggregate%arc4_encoded%0#0
        let tmp%8#0: Encoded(uint128) = aggregate%as_Encoded(uint128)%0#0
        let a#0: Encoded(uint128) = tmp%8#0
        let tmp%9#0: biguint = a#0
        let a_native#0: biguint = tmp%9#0
        let tmp%10#0: bool = (b== a_native#0 b#0)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = (len c#0)
        let tmp%12#0: bool = (== tmp%11#0 32u)
        (assert tmp%12#0)
        let a_bytes#0: bytes = a#0
        let len%0#0: uint64 = (len a_bytes#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for uint128
        let as_Encoded(uint128)%0#0: Encoded(uint128) = a_bytes#0
        let a_from_bytes#0: Encoded(uint128) = as_Encoded(uint128)%0#0
        let tmp%13#0: bool = (== a_from_bytes#0 a#0)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = (btoi 0x000000000000000c)
        let tmp%15#0: bool = (== tmp%14#0 12u)
        (assert tmp%15#0)
        let tmp%16#0: bool = (b== 0x0000c571 50545b)
        (assert tmp%16#0)
        let tmp%17#0: bytes = (b~ 0xff)
        let tmp%18#0: bool = (== tmp%17#0 0x00)
        (assert tmp%18#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testStr() -> void:
    block@0: // L65
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%1#0: bool = (== tmp%0#0 0x0000)
        (assert tmp%1#0) // Empty string should equal the uint16 length prefix
        let aggregate%length%1#0: uint64 = (len "Hello")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%3#0: string = ((extract 2 0) tmp%2#0)
        let tmp%4#0: bool = (== tmp%3#0 "Hello")
        (assert tmp%4#0)
        let aggregate%length%2#0: uint64 = (len "Hello")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let s2_bytes#0: bytes = tmp%5#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 s2_bytes#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len s2_bytes#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = s2_bytes#0
        let s2_from_bytes#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let aggregate%length%3#0: uint64 = (len "Hello")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let tmp%7#0: bool = (== tmp%6#0 s2_from_bytes#0)
        (assert tmp%7#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testDynamicBytes(someBytes: bytes) -> void:
    block@0: // L78
        let tmp%0#0: bytes = ((extract 2 0) 0x0000)
        let tmp%1#0: bool = (== tmp%0#0 0x)
        (assert tmp%1#0) // No args should give empty bytes
        let tmp%2#0: bool = (== 0x0000 0x0000)
        (assert tmp%2#0) // bytes prop should return length header (of 0)
        let aggregate%length%0#0: uint64 = (len someBytes#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 someBytes#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let db2#0: Encoded(len+uint8[]) = tmp%3#0
        let tmp%4#0: bytes = ((extract 2 0) db2#0)
        let tmp%5#0: bool = (== tmp%4#0 someBytes#0)
        (assert tmp%5#0)
        let tmp%6#0: bytes = ((extract 2 0) 0x000568656c6c6f)
        let tmp%7#0: bool = (== tmp%6#0 "hello")
        (assert tmp%7#0)
        let total_length%0#0: uint64 = (len 0x000620776f726c64)
        let extract_to_end%0#0: bytes = (substring3 0x000620776f726c64 2u total_length%0#0)
        let concat%0#0: Encoded(len+uint8[]) = (concat 0x000568656c6c6f extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%0#0)
        let extract_to_end%1#0: bytes = (substring3 concat%0#0 2u total_length%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let db4#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let tmp%8#0: bytes = ((extract 2 0) db4#0)
        let tmp%9#0: bool = (== tmp%8#0 "hello world")
        (assert tmp%9#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testStaticBytes() -> void:
    block@0: // L92
        let aggregate%head%0#0: bytes = (concat 0x 0xaabbccddee)
        let aggregate%as_Encoded(uint8[5][1])%0#0: Encoded(uint8[5][1]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(uint8[5][1]) = aggregate%as_Encoded(uint8[5][1])%0#0
        let s5#0: Encoded(uint8[5][1]) = encoded_array%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 5u)
        let aggregate%encoded_element%0#0: bytes = (extract3 s5#0 aggregate%bytes_offset%0#0 5u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[5]) = aggregate%encoded_element%0#0
        let tmp%0#0: bytes = array_item%0#0
        let tmp%1#0: bool = (== tmp%0#0 0xaabbccddee)
        (assert tmp%1#0)
        let concat%0#0: Encoded(len+uint8[]) = (concat 0x000400000000 0xaabbccddee) // on error: max array length exceeded
        let total_length%0#0: uint64 = (len concat%0#0)
        let extract_to_end%0#0: bytes = (substring3 concat%0#0 2u total_length%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = replace%0#0
        let s4#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = ((extract 2 0) s4#0)
        let tmp%3#0: bool = (== tmp%2#0 0x00000000aabbccddee)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testArrays(n: Encoded(uint64)) -> void:
    block@0: // L107
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 n#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 n#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 n#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let myArray#0: Encoded(len+uint64[]) = encoded_array%0#0
        let aggregate%head%3#0: bytes = (concat 0x n#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%3#0
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat myArray#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 myArray#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let myArray#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let total_length%0#0: uint64 = (len myArray#1)
        let extract_to_end%0#0: bytes = (substring3 myArray#1 2u total_length%0#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat myArray#1 extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%1#0)
        let extract_to_end%1#0: bytes = (substring3 concat%1#0 2u total_length%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let doubleArray#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%1#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%1#0 n#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 n#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 n#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 n#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 n#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 n#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 n#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 n#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%11#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let tmp%1#0: bool = (== doubleArray#0 encoded_array%1#0)
        (assert tmp%1#0)
        let aggregate%head%12#0: bytes = (concat 0x n#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 n#0)
        let aggregate%as_Encoded(uint64[2])%0#0: Encoded(uint64[2]) = aggregate%head%13#0
        let encoded_array%2#0: Encoded(uint64[2]) = aggregate%as_Encoded(uint64[2])%0#0
        let myStatic#0: Encoded(uint64[2]) = encoded_array%2#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 myStatic#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let (tmp%2#0: bytes, tmp%3#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(myArray#1, 8u)
        let tmp%4#0: bool = (== array_item%0#0 tmp%2#0)
        (assert tmp%4#0)
        let aggregate%head%14#0: bytes = (concat 0x n#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 n#0)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 n#0)
        let aggregate%as_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = aggregate%head%16#0
        let encoded_array%3#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#0
        let myStatic2#0: Encoded(uint64[3]) = encoded_array%3#0
        let tmp%6#0: bool = (== 3u 3u)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let tmp%7#0: bool = (== array_item%1#0 n#0)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let tmp%9#0: bool = (== array_item%2#0 n#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let tmp%11#0: bool = (== array_item%3#0 n#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        (assert tmp%12#0) // assert target is match for conditions
        let aggregate%array_length%0#0: uint64 = (extract_uint16 doubleArray#0 0u)
        let tmp%13#0: uint64 = aggregate%array_length%0#0
        let tmp%14#0: bool = (== tmp%13#0 8u)
        let aggregate%total_length%0#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let tmp%15#0: bool = (== array_item%4#0 n#0)
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        let aggregate%total_length%1#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let tmp%17#0: bool = (== array_item%5#0 n#0)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        let aggregate%total_length%2#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%6#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%6#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%6#0 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#0
        let tmp%19#0: bool = (== array_item%6#0 n#0)
        let tmp%20#0: bool = (&& tmp%18#0 tmp%19#0)
        let aggregate%total_length%3#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%7#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%7#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%7#0 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%7#0
        let tmp%21#0: bool = (== array_item%7#0 n#0)
        let tmp%22#0: bool = (&& tmp%20#0 tmp%21#0)
        let aggregate%total_length%4#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%4#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%8#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%8#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%8#0 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%8#0
        let tmp%23#0: bool = (== array_item%8#0 n#0)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        let aggregate%total_length%5#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%5#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%9#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%9#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%9#0 8u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint64) = aggregate%encoded_element%9#0
        let tmp%25#0: bool = (== array_item%9#0 n#0)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        let aggregate%total_length%6#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%6#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%6#0)
        let aggregate%bytes_offset%10#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%10#0: bytes = (extract3 aggregate%array_trimmed%6#0 aggregate%bytes_offset%10#0 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%10#0
        let tmp%27#0: bool = (== array_item%10#0 n#0)
        let tmp%28#0: bool = (&& tmp%26#0 tmp%27#0)
        let aggregate%total_length%7#0: uint64 = (len doubleArray#0)
        let aggregate%array_trimmed%7#0: bytes = (substring3 doubleArray#0 2u aggregate%total_length%7#0)
        let aggregate%bytes_offset%11#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%11#0: bytes = (extract3 aggregate%array_trimmed%7#0 aggregate%bytes_offset%11#0 8u) // on error: index access is out of bounds
        let array_item%11#0: Encoded(uint64) = aggregate%encoded_element%11#0
        let tmp%29#0: bool = (== array_item%11#0 n#0)
        let tmp%30#0: bool = (&& tmp%28#0 tmp%29#0)
        (assert tmp%30#0) // assert target is match for conditions
        return 

subroutine tests/approvals/arc4-types.algo.ts::testByte() -> void:
    block@0: // L129
        let tmp%0#0: bool = (== 0x00 0x00)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testAddress() -> void:
    block@0: // L135
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txn Sender)
        let b#0: Encoded(uint8[32]) = reinterpret_Encoded(uint8[32])%0#0
        let tmp%0#0: account = b#0
        let tmp%1#0: account = (txn Sender)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (!= addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ b#0)
        (assert tmp%3#0) // Zero address should not match sender
        let tmp%4#0: bool = (== addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        (assert tmp%4#0) // Two zero addresses should match
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#0
        let tmp%5#0: bool = (== array_item%0#0 0x00)
        (assert tmp%5#0) // Zero address should start with zero byte
        return 

subroutine tests/approvals/arc4-types.algo.ts::testTuple() -> void:
    block@0: // L146
        let aggregate%head%0#0: bytes = (concat 0x 0x0000000000000022)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%head%0#0
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let t#0: Encoded(uint64) = tmp%0#0
        let aggregate%extract%0#0: bytes = (extract3 t#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let firstItem#0: Encoded(uint64) = tuple_item%0#0
        let aggregate%extract%1#0: bytes = (extract3 t#0 0u 8u)
        let tmp%1#0: Encoded(uint64) = aggregate%extract%1#0
        let firstItemIndexer#0: Encoded(uint64) = tmp%1#0
        let tmp%2#0: bool = (== firstItem#0 firstItemIndexer#0)
        (assert tmp%2#0)
        let tmp%4#0: bool = (== 2u 2u)
        (assert tmp%4#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testAsUint64() -> void:
    block@0: // L155
        let tmp%0#0: uint64 = (btoi 0x2a)
        let tmp%1#0: bool = (== tmp%0#0 42u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (btoi 0xffffffffffffffff)
        let tmp%3#0: bool = (== tmp%2#0 18446744073709551615u)
        (assert tmp%3#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen 0x00000000000000000000000000000001)
        let aggregate%lte%0#0: bool = (<= aggregate%bitlen%0#0 64u)
        (assert aggregate%lte%0#0) // overflow
        let aggregate%len%0#0: uint64 = (len 0x00000000000000000000000000000001)
        let aggregate%sub%0#0: uint64 = (- aggregate%len%0#0 8u)
        let aggregate%extract_uint64%0#0: uint64 = (extract_uint64 0x00000000000000000000000000000001 aggregate%sub%0#0)
        let tmp%4#0: uint64 = aggregate%extract_uint64%0#0
        let tmp%5#0: bool = (== tmp%4#0 1u)
        (assert tmp%5#0)
        let aggregate%bitlen%1#0: uint64 = (bitlen 0x000000000000000000000000000000000000000000000000ffffffffffffffff)
        let aggregate%lte%1#0: bool = (<= aggregate%bitlen%1#0 64u)
        (assert aggregate%lte%1#0) // overflow
        let aggregate%len%1#0: uint64 = (len 0x000000000000000000000000000000000000000000000000ffffffffffffffff)
        let aggregate%sub%1#0: uint64 = (- aggregate%len%1#0 8u)
        let aggregate%extract_uint64%1#0: uint64 = (extract_uint64 0x000000000000000000000000000000000000000000000000ffffffffffffffff aggregate%sub%1#0)
        let tmp%6#0: uint64 = aggregate%extract_uint64%1#0
        let tmp%7#0: bool = (== tmp%6#0 18446744073709551615u)
        (assert tmp%7#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testAsBigUint() -> void:
    block@0: // L170
        let tmp%1#0: bool = (b== 0x2a 42b)
        (assert tmp%1#0)
        let tmp%3#0: bool = (b== 0xffffffffffffffff 18446744073709551615b)
        (assert tmp%3#0)
        let tmp%5#0: bool = (b== 0x00000000000000000000000000000001 1b)
        (assert tmp%5#0)
        let tmp%7#0: bool = (b== 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 115792089237316195423570985008687907853269984665640564039457584007913129639935b)
        (assert tmp%7#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testZeroValues() -> void:
    block@0: // L213
        let tmp%0#0: Encoded(uint8[4]) = (bzero 4u)
        let aggregate%head%0#0: bytes = (concat 0x 0x00)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x00)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x00)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x00)
        let aggregate%as_Encoded(uint8[4])%0#0: Encoded(uint8[4]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#0
        let tmp%1#0: bool = (== tmp%0#0 encoded_array%0#0)
        (assert tmp%1#0)
        let tmp%2#0: Encoded(bool1[4]) = (bzero 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let tmp%5#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%6#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%get_bit%0#0: bool = (getbit tmp%4#0 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%3#0 1u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: bool = (getbit tmp%5#0 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit aggregate%set_bit%0#0 2u aggregate%get_bit%1#0)
        let aggregate%get_bit%2#0: bool = (getbit tmp%6#0 0u)
        let aggregate%set_bit%2#0: Encoded(bool8) = (setbit aggregate%set_bit%1#0 3u aggregate%get_bit%2#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%set_bit%2#0)
        let aggregate%as_Encoded(bool1[4])%0#0: Encoded(bool1[4]) = aggregate%head%4#0
        let encoded_array%1#0: Encoded(bool1[4]) = aggregate%as_Encoded(bool1[4])%0#0
        let tmp%7#0: bool = (== tmp%2#0 encoded_array%1#0)
        (assert tmp%7#0)
        let tmp%8#0: Encoded(bool1[9]) = (bzero 2u)
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%4#0: Encoded(bool8) = aggregate%encoded_bool%4#0
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%4#0
        let aggregate%encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%5#0: Encoded(bool8) = aggregate%encoded_bool%5#0
        let tmp%10#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%5#0
        let aggregate%encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%6#0: Encoded(bool8) = aggregate%encoded_bool%6#0
        let tmp%11#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%6#0
        let aggregate%encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%7#0: Encoded(bool8) = aggregate%encoded_bool%7#0
        let tmp%12#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%7#0
        let aggregate%encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%8#0: Encoded(bool8) = aggregate%encoded_bool%8#0
        let tmp%13#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%8#0
        let aggregate%encoded_bool%9#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%9#0: Encoded(bool8) = aggregate%encoded_bool%9#0
        let tmp%14#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%9#0
        let aggregate%encoded_bool%10#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%10#0: Encoded(bool8) = aggregate%encoded_bool%10#0
        let tmp%15#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%10#0
        let aggregate%encoded_bool%11#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%11#0: Encoded(bool8) = aggregate%encoded_bool%11#0
        let tmp%16#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%11#0
        let aggregate%encoded_bool%12#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%12#0: Encoded(bool8) = aggregate%encoded_bool%12#0
        let tmp%17#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%12#0
        let aggregate%get_bit%3#0: bool = (getbit tmp%10#0 0u)
        let aggregate%set_bit%3#0: Encoded(bool8) = (setbit tmp%9#0 1u aggregate%get_bit%3#0)
        let aggregate%get_bit%4#0: bool = (getbit tmp%11#0 0u)
        let aggregate%set_bit%4#0: Encoded(bool8) = (setbit aggregate%set_bit%3#0 2u aggregate%get_bit%4#0)
        let aggregate%get_bit%5#0: bool = (getbit tmp%12#0 0u)
        let aggregate%set_bit%5#0: Encoded(bool8) = (setbit aggregate%set_bit%4#0 3u aggregate%get_bit%5#0)
        let aggregate%get_bit%6#0: bool = (getbit tmp%13#0 0u)
        let aggregate%set_bit%6#0: Encoded(bool8) = (setbit aggregate%set_bit%5#0 4u aggregate%get_bit%6#0)
        let aggregate%get_bit%7#0: bool = (getbit tmp%14#0 0u)
        let aggregate%set_bit%7#0: Encoded(bool8) = (setbit aggregate%set_bit%6#0 5u aggregate%get_bit%7#0)
        let aggregate%get_bit%8#0: bool = (getbit tmp%15#0 0u)
        let aggregate%set_bit%8#0: Encoded(bool8) = (setbit aggregate%set_bit%7#0 6u aggregate%get_bit%8#0)
        let aggregate%get_bit%9#0: bool = (getbit tmp%16#0 0u)
        let aggregate%set_bit%9#0: Encoded(bool8) = (setbit aggregate%set_bit%8#0 7u aggregate%get_bit%9#0)
        let aggregate%head%5#0: bytes = (concat 0x aggregate%set_bit%9#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 tmp%17#0)
        let aggregate%as_Encoded(bool1[9])%0#0: Encoded(bool1[9]) = aggregate%head%6#0
        let encoded_array%2#0: Encoded(bool1[9]) = aggregate%as_Encoded(bool1[9])%0#0
        let tmp%18#0: bool = (== tmp%8#0 encoded_array%2#0)
        (assert tmp%18#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%len_u16%0#0
        let encoded_array%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%19#0: bytes[2] = (bzero 2u)
        let tmp%20#0: bool = (== encoded_array%3#0 tmp%19#0)
        (assert tmp%20#0)
        let tmp%21#0: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = (bzero 2u)
        let aggregate%encoded_bool%13#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%set_bit%10#0: bytes[1] = (setbit aggregate%encoded_bool%13#0 1u 0u)
        let aggregate%set_bit%11#0: bytes[1] = (setbit aggregate%set_bit%10#0 2u 0u)
        let aggregate%set_bit%12#0: bytes[1] = (setbit aggregate%set_bit%11#0 3u 0u)
        let aggregate%set_bit%13#0: bytes[1] = (setbit aggregate%set_bit%12#0 4u 0u)
        let aggregate%set_bit%14#0: bytes[1] = (setbit aggregate%set_bit%13#0 5u 0u)
        let aggregate%set_bit%15#0: bytes[1] = (setbit aggregate%set_bit%14#0 6u 0u)
        let aggregate%set_bit%16#0: bytes[1] = (setbit aggregate%set_bit%15#0 7u 0u)
        let aggregate%head%7#0: bytes = (concat 0x aggregate%set_bit%16#0)
        let aggregate%encoded_bool%14#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%encoded_bool%14#0)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = aggregate%head%8#0
        let tmp%22#0: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1)%0#0
        let tmp%23#0: bool = (== tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%24#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%25#0: bytes[2] = (bzero 2u)
        let tmp%26#0: bool = (== tmp%24#0 tmp%25#0)
        (assert tmp%26#0)
        let tmp%27#0: bytes[2] = (bzero 2u)
        let tmp%28#0: bool = (== 0x0000 tmp%27#0)
        (assert tmp%28#0)
        let tmp%29#0: bytes[5] = (bzero 5u)
        let tmp%30#0: bool = (== 0x0000000000 tmp%29#0)
        (assert tmp%30#0)
        let tmp%31#0: bytes[32] = (bzero 32u)
        let tmp%32#0: bool = (== addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ tmp%31#0)
        (assert tmp%32#0)
        let tmp%33#0: bytes[4] = (bzero 4u)
        let tmp%34#0: bool = (== 0x00000000 tmp%33#0)
        (assert tmp%34#0)
        let aggregate%encoded_bool%15#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%13#0: Encoded(bool8) = aggregate%encoded_bool%15#0
        let tmp%35#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%13#0
        let tmp%36#0: bytes[1] = (bzero 1u)
        let tmp%37#0: bool = (== tmp%35#0 tmp%36#0)
        (assert tmp%37#0)
        let tmp%38#0: bytes[4] = (bzero 4u)
        let tmp%39#0: bool = (== 0x00000000 tmp%38#0)
        (assert tmp%39#0)
        return 