main tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram:
    block@0: // L148
        tests/approvals/arc4-types.algo.ts::testStr()
        tests/approvals/arc4-types.algo.ts::testUintN(1u, 2b, 0x0000000000000000000000000000000000000000000000000000000000000004)
        tests/approvals/arc4-types.algo.ts::testUFixed()
        tests/approvals/arc4-types.algo.ts::testByte()
        tests/approvals/arc4-types.algo.ts::testArrays(0x0000000000000041)
        tests/approvals/arc4-types.algo.ts::testAddress()
        tests/approvals/arc4-types.algo.ts::testTuple()
        tests/approvals/arc4-types.algo.ts::testUFixed()
        tests/approvals/arc4-types.algo.ts::testDynamicBytes("hmmmmmmmmm")
        tests/approvals/arc4-types.algo.ts::testStaticBytes()
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let result#0: bytes = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        return 1u

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine tests/approvals/arc4-types.algo.ts::testUFixed() -> void:
    block@0: // L20
        let tmp%0#0: bool = (== 0x000004dc 0x000004dc)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testUintN(n: uint64, b: biguint, c: bytes[32]) -> void:
    block@0: // L27
        let tmp%0#0: uint64 = (len 0x04)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== 0xff 0xff)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (len 0x0000)
        let tmp%4#0: bool = (== tmp%3#0 2u)
        (assert tmp%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob n#0)
        let z#0: bytes[1] = ((extract 7 1) val_as_bytes%0#0)
        let z_native#0: uint64 = (btoi z#0)
        let tmp%5#0: bool = (== z_native#0 n#0)
        (assert tmp%5#0)
        let len_%0#0: uint64 = (len b#0)
        let no_overflow%0#0: bool = (<= len_%0#0 16u)
        (assert no_overflow%0#0) // overflow
        let b_zeros%0#0: bytes = (bzero 16u)
        let a#0: bytes[16] = (b| b#0 b_zeros%0#0)
        let a_native#0: biguint = a#0
        let tmp%6#0: bool = (b== a_native#0 b#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = (len c#0)
        let tmp%8#0: bool = (== tmp%7#0 32u)
        (assert tmp%8#0)
        let a_bytes#0: bytes = a#0
        let reinterpret_bytes[16]%0#0: bytes[16] = a_bytes#0
        let a_from_bytes#0: bytes[16] = reinterpret_bytes[16]%0#0
        let tmp%9#0: bool = (== a_from_bytes#0 a#0)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (btoi 0x000000000000000c)
        let tmp%11#0: bool = (== tmp%10#0 12u)
        (assert tmp%11#0)
        let tmp%12#0: bool = (b== 0x0000c571 50545b)
        (assert tmp%12#0)
        let tmp%13#0: bytes = (b~ 0xff)
        let tmp%14#0: bool = (== tmp%13#0 0x00)
        (assert tmp%14#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testStr() -> void:
    block@0: // L62
        let tmp%0#0: bool = (== 0x0000 0x0000)
        (assert tmp%0#0) // Empty string should equal the uint16 length prefix
        let tmp%1#0: bytes = ((extract 2 0) 0x000548656c6c6f)
        let tmp%2#0: bool = (== tmp%1#0 "Hello")
        (assert tmp%2#0)
        let tmp%3#0: bool = (== 0x000548656c6c6f 0x000548656c6c6f)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testDynamicBytes(someBytes: bytes) -> void:
    block@0: // L75
        let tmp%0#0: bytes = ((extract 2 0) 0x0000)
        let tmp%1#0: bool = (== tmp%0#0 0x)
        (assert tmp%1#0) // No args should give empty bytes
        let tmp%2#0: bool = (== 0x0000 0x0000)
        (assert tmp%2#0) // bytes prop should return length header (of 0)
        let length%0#0: uint64 = (len someBytes#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 someBytes#0)
        let db2#0: bytes = encoded_value%0#0
        let tmp%3#0: bytes = ((extract 2 0) db2#0)
        let tmp%4#0: bool = (== tmp%3#0 someBytes#0)
        (assert tmp%4#0)
        let tmp%5#0: bytes = ((extract 2 0) 0x000568656c6c6f)
        let tmp%6#0: bool = (== tmp%5#0 "hello")
        (assert tmp%6#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) 0x000568656c6c6f)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) 0x000620776f726c64)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%1#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let db4#0: bytes = concat_result%0#0
        let tmp%7#0: bytes = ((extract 2 0) db4#0)
        let tmp%8#0: bool = (== tmp%7#0 "hello world")
        (assert tmp%8#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testStaticBytes() -> void:
    block@0: // L89
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) 0x000400000000)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0xaabbccddee)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let s4#0: bytes = concat_result%0#0
        let tmp%0#0: bytes = ((extract 2 0) s4#0)
        let tmp%1#0: bool = (== tmp%0#0 0x00000000aabbccddee)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testArrays(n: bytes[8]) -> void:
    block@0: // L101
        let result%0#0: bytes = (concat 0x n#0)
        let result%1#0: bytes = (concat result%0#0 n#0)
        let result%2#0: bytes = (concat result%1#0 n#0)
        let array_data%0#0: bytes = (concat 0x0003 result%2#0)
        let myArray#0: bytes = array_data%0#0
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) myArray#0)
        let array%encoded%0#1: bytes[8][] = (concat 0x n#0)
        let array%data%0#1: bytes[8][] = (concat 0x array%encoded%0#1)
        let encoded%0#0: bytes[8][] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let myArray#1: bytes = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) myArray#1)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) myArray#1)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 expr_value_trimmed%2#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let doubleArray#0: bytes = concat_result%1#0
        let result%3#0: bytes = (concat 0x n#0)
        let result%4#0: bytes = (concat result%3#0 n#0)
        let result%5#0: bytes = (concat result%4#0 n#0)
        let result%6#0: bytes = (concat result%5#0 n#0)
        let result%7#0: bytes = (concat result%6#0 n#0)
        let result%8#0: bytes = (concat result%7#0 n#0)
        let result%9#0: bytes = (concat result%8#0 n#0)
        let result%10#0: bytes = (concat result%9#0 n#0)
        let array_data%1#0: bytes = (concat 0x0008 result%10#0)
        let tmp%0#0: bool = (== doubleArray#0 array_data%1#0)
        (assert tmp%0#0)
        let result%11#0: bytes = (concat 0x n#0)
        let result%12#0: bytes = (concat result%11#0 n#0)
        let array_data%2#0: bytes = (concat 0x result%12#0)
        let myStatic#0: bytes[16] = array_data%2#0
        let array_head_and_tail%0#0: bytes[16] = myStatic#0
        let item_offset%0#0: uint64 = (* 0u 8u)
        let tmp%1#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(myArray#1, 8u)
        let tmp%2#0: bool = (== tmp%1#0 popped%0#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testByte() -> void:
    block@0: // L119
        let tmp%0#0: bool = (== 0x00 0x00)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testAddress() -> void:
    block@0: // L125
        let b#0: bytes[32] = (txn Sender)
        let tmp%0#0: bool = (!= addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ b#0)
        (assert tmp%0#0) // Zero address should not match sender
        let tmp%1#0: bool = (== addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        (assert tmp%1#0) // Two zero addresses should match
        let item_offset%0#0: uint64 = (* 0u 1u)
        let tmp%2#0: bytes = (extract3 addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ item_offset%0#0 1u) // on error: Index access is out of bounds
        let tmp%3#0: bool = (== tmp%2#0 0x00)
        (assert tmp%3#0) // Zero address should start with zero byte
        return 

subroutine tests/approvals/arc4-types.algo.ts::testTuple() -> void:
    block@0: // L134
        let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x0000000000000022)
        let t#0: bytes[8] = encoded_tuple_buffer%1#0
        let firstItem#0: bytes[8] = (extract3 t#0 0u 8u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 t#0 0u 8u) // on error: Index access is out of bounds
        let firstItemIndexer#0: bytes[8] = item0%0#0
        let tmp%0#0: bool = (== firstItem#0 firstItemIndexer#0)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== 2u 2u)
        (assert tmp%1#0)
        return 