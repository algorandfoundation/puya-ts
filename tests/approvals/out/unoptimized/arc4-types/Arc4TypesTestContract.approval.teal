#pragma version 10
#pragma typetrack false

// tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1 2
    bytecblock 0x00 0x "Hello" 0x0000 base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0xaabbccddee 0x068101 0x000568656c6c6f 0x00000000

main_block@0:
    // tests/approvals/arc4-types.algo.ts:162
    // ensureBudget(1400)
    pushint 1400 // 1400
    intc_0 // 0
    callsub ensure_budget
    // tests/approvals/arc4-types.algo.ts:164
    // testStr()
    callsub testStr
    // tests/approvals/arc4-types.algo.ts:165
    // testUintN(1, 2n, new UintN<256>(4))
    intc_2 // 1
    pushbytes 0x02
    pushbytes 0x0000000000000000000000000000000000000000000000000000000000000004
    callsub testUintN
    // tests/approvals/arc4-types.algo.ts:166
    // testUFixed()
    callsub testUFixed
    // tests/approvals/arc4-types.algo.ts:167
    // testByte()
    callsub testByte
    // tests/approvals/arc4-types.algo.ts:168
    // testArrays(new UintN<64>(65))
    pushbytes 0x0000000000000041
    callsub testArrays
    // tests/approvals/arc4-types.algo.ts:169
    // testAddress()
    callsub testAddress
    // tests/approvals/arc4-types.algo.ts:170
    // testTuple()
    callsub testTuple
    // tests/approvals/arc4-types.algo.ts:171
    // testUFixed()
    callsub testUFixed
    // tests/approvals/arc4-types.algo.ts:172
    // testDynamicBytes(Bytes('hmmmmmmmmm'))
    pushbytes "hmmmmmmmmm"
    callsub testDynamicBytes
    // tests/approvals/arc4-types.algo.ts:173
    // testStaticBytes()
    callsub testStaticBytes
    // tests/approvals/arc4-types.algo.ts:174
    // testZeroValues()
    callsub testZeroValues
    // tests/approvals/arc4-types.algo.ts:175
    // const result = new arc4.DynamicArray<arc4.UintN<64>>()
    intc_0 // 0
    itob
    extract 6 2
    // tests/approvals/arc4-types.algo.ts:176
    // assert(result.length === 0)
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:177
    // return true
    intc_2 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@7

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 6 // 0x068101
    itxn_field ApprovalProgram
    bytec 6 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_2 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_default@5:

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2

dynamic_array_pop_fixed_size_block@0:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// tests/approvals/arc4-types.algo.ts::testUFixed() -> void:
testUFixed:

testUFixed_block@0:
    // tests/approvals/arc4-types.algo.ts:28
    // assert(a === c)
    pushbytes 0x000004dc
    dup
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testUintN(n: uint64, b: bytes, c: bytes) -> void:
testUintN:
    // tests/approvals/arc4-types.algo.ts:31
    // function testUintN(n: uint64, b: biguint, c: UintN<256>) {
    proto 3 0

testUintN_block@0:
    // tests/approvals/arc4-types.algo.ts:33
    // assert(x.bytes.length === 1)
    pushbytes 0x04
    len
    intc_2 // 1
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:35
    // assert(x2.bytes === Bytes.fromHex('ff'))
    pushbytes 0xff
    dup
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:38
    // assert(y.bytes.length === 2)
    bytec_3 // 0x0000
    len
    intc_3 // 2
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:39
    // const z = new UintN<8>(n)
    frame_dig -3
    itob
    dup
    bitlen
    intc_1 // 8
    <=
    assert // overflow
    pushint 7 // 7
    intc_2 // 1
    extract3
    // tests/approvals/arc4-types.algo.ts:40
    // const z_native = z.native
    btoi
    // tests/approvals/arc4-types.algo.ts:41
    // assert(z_native === n)
    frame_dig -3
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:44
    // const a = new UintN<128>(b)
    frame_dig -2
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    frame_dig -2
    b|
    // tests/approvals/arc4-types.algo.ts:45
    // const a_native = a.native
    dup
    // tests/approvals/arc4-types.algo.ts:46
    // assert(a_native === b)
    frame_dig -2
    b==
    assert
    // tests/approvals/arc4-types.algo.ts:48
    // assert(c.bytes.length === 256 / 8)
    frame_dig -1
    len
    pushint 32 // 32
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:50
    // const a_bytes = a.bytes
    dup
    // tests/approvals/arc4-types.algo.ts:53
    // assert(a_from_bytes === a)
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:57
    // assert(aliased64.native === 12)
    pushbytes 0x000000000000000c
    btoi
    pushint 12 // 12
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:59
    // assert(BigUint(aliased32.bytes) === 50545n)
    pushbytes 0x0000c571
    pushbytes 0xc571
    b==
    assert
    // tests/approvals/arc4-types.algo.ts:63
    // assert(byte.bytes.bitwiseInvert() === Bytes.fromHex('00'))
    pushbytes 0xff
    b~
    bytec_0 // 0x00
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testStr() -> void:
testStr:

testStr_block@0:
    // tests/approvals/arc4-types.algo.ts:68
    // assert(s1.bytes === new UintN<16>(0).bytes, 'Empty string should equal the uint16 length prefix')
    bytec_1 // ""
    len
    itob
    extract 6 2
    bytec_1 // ""
    concat
    bytec_3 // 0x0000
    ==
    assert // Empty string should equal the uint16 length prefix
    // tests/approvals/arc4-types.algo.ts:70
    // assert(s2.native === 'Hello')
    bytec_2 // "Hello"
    len
    itob
    extract 6 2
    bytec_2 // "Hello"
    concat
    extract 2 0
    bytec_2 // "Hello"
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:72
    // const s2_bytes = s2.bytes
    bytec_2 // "Hello"
    len
    itob
    extract 6 2
    bytec_2 // "Hello"
    concat
    // tests/approvals/arc4-types.algo.ts:76
    // assert(s2 === s2_from_bytes)
    bytec_2 // "Hello"
    len
    itob
    extract 6 2
    bytec_2 // "Hello"
    concat
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testDynamicBytes(someBytes: bytes) -> void:
testDynamicBytes:
    // tests/approvals/arc4-types.algo.ts:79
    // function testDynamicBytes(someBytes: bytes) {
    proto 1 0

testDynamicBytes_block@0:
    // tests/approvals/arc4-types.algo.ts:81
    // assert(db1.native === Bytes(), 'No args should give empty bytes')
    bytec_3 // 0x0000
    extract 2 0
    bytec_1 // 0x
    ==
    assert // No args should give empty bytes
    // tests/approvals/arc4-types.algo.ts:82
    // assert(db1.bytes === new UintN<16>(0).bytes, 'bytes prop should return length header (of 0)')
    bytec_3 // 0x0000
    dup
    ==
    assert // bytes prop should return length header (of 0)
    // tests/approvals/arc4-types.algo.ts:83
    // const db2 = new DynamicBytes(someBytes)
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    // tests/approvals/arc4-types.algo.ts:84
    // assert(db2.native === someBytes)
    extract 2 0
    frame_dig -1
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:87
    // assert(db3.native === Bytes('hello'))
    bytec 7 // 0x000568656c6c6f
    extract 2 0
    pushbytes "hello"
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:89
    // const db4 = db3.concat(new DynamicBytes(' world'))
    pushbytes 0x000620776f726c64
    extract 2 0
    bytec 7 // 0x000568656c6c6f
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 1
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    // tests/approvals/arc4-types.algo.ts:90
    // assert(db4.native === Bytes('hello world'))
    extract 2 0
    pushbytes "hello world"
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testStaticBytes() -> void:
testStaticBytes:

testStaticBytes_block@0:
    // tests/approvals/arc4-types.algo.ts:98
    // const s5 = new StaticArray<StaticBytes<5>, 1>(new StaticBytes<5>(Bytes.fromHex('AABBCCDDEE')))
    bytec_1 // 0x
    bytec 5 // 0xaabbccddee
    concat
    // tests/approvals/arc4-types.algo.ts:99
    // assert(s5[0].native === Bytes.fromHex('AABBCCDDEE'))
    intc_0 // 0
    pushint 5 // 5
    *
    pushint 5 // 5
    extract3 // on error: index access is out of bounds
    bytec 5 // 0xaabbccddee
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:101
    // const s4 = s2.concat(s3)
    pushbytes 0x000400000000
    bytec 5 // 0xaabbccddee
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 1
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    // tests/approvals/arc4-types.algo.ts:102
    // assert(s4.native === Bytes.fromHex('00000000AABBCCDDEE'))
    extract 2 0
    pushbytes 0x00000000aabbccddee
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testArrays(n: bytes) -> void:
testArrays:
    // tests/approvals/arc4-types.algo.ts:108
    // function testArrays(n: ARC4Uint64) {
    proto 1 0

testArrays_block@0:
    // tests/approvals/arc4-types.algo.ts:109
    // const myArray = new DynamicArray(n, n, n)
    pushint 3 // 3
    itob
    extract 6 2
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    // tests/approvals/arc4-types.algo.ts:111
    // myArray.push(n)
    bytec_1 // 0x
    frame_dig -1
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    // tests/approvals/arc4-types.algo.ts:113
    // const doubleArray = myArray.concat(myArray)
    dup
    extract 2 0
    dig 1
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_1 // 8
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    // tests/approvals/arc4-types.algo.ts:115
    // assert(doubleArray === new DynamicArray(n, n, n, n, n, n, n, n))
    intc_1 // 8
    itob
    extract 6 2
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    dig 1
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:117
    // const myStatic = new StaticArray(n, n)
    bytec_1 // 0x
    frame_dig -1
    concat
    frame_dig -1
    concat
    // tests/approvals/arc4-types.algo.ts:119
    // assert(myStatic[0] === myArray.pop())
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    uncover 2
    intc_1 // 8
    callsub dynamic_array_pop_fixed_size
    pop
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:123
    // const myStatic2 = new StaticArray<ARC4Uint64, 3>(n, n, n)
    bytec_1 // 0x
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    // tests/approvals/arc4-types.algo.ts:125
    // assertMatch(myStatic2, [n, n, n])
    pushint 3 // 3
    dup
    ==
    swap
    intc_0 // 0
    intc_1 // 8
    *
    dig 1
    swap
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    uncover 2
    &&
    intc_2 // 1
    intc_1 // 8
    *
    dig 2
    swap
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    intc_3 // 2
    intc_1 // 8
    *
    uncover 2
    swap
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/arc4-types.algo.ts:127
    // assertMatch(doubleArray, [n, n, n, n, n, n, n, n])
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 8
    ==
    swap
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    uncover 2
    &&
    dig 1
    extract 2 0
    intc_2 // 1
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    dig 1
    extract 2 0
    intc_3 // 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    dig 1
    extract 2 0
    pushint 3 // 3
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    dig 1
    extract 2 0
    pushint 4 // 4
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    dig 1
    extract 2 0
    pushint 5 // 5
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    dig 1
    extract 2 0
    pushint 6 // 6
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    swap
    extract 2 0
    pushint 7 // 7
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    &&
    assert // assert target is match for conditions
    retsub


// tests/approvals/arc4-types.algo.ts::testByte() -> void:
testByte:

testByte_block@0:
    // tests/approvals/arc4-types.algo.ts:133
    // assert(b === b2)
    bytec_0 // 0x00
    dup
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testAddress() -> void:
testAddress:

testAddress_block@0:
    // tests/approvals/arc4-types.algo.ts:138
    // const b = new Address(Txn.sender)
    txn Sender
    // tests/approvals/arc4-types.algo.ts:140
    // assert(b.native === Txn.sender)
    dup
    txn Sender
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:142
    // assert(a !== b, 'Zero address should not match sender')
    bytec 4 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    !=
    assert // Zero address should not match sender
    // tests/approvals/arc4-types.algo.ts:143
    // assert(a === new Address(), 'Two zero addresses should match')
    bytec 4 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    dup
    ==
    assert // Two zero addresses should match
    // tests/approvals/arc4-types.algo.ts:144
    // assert(a[0] === new Byte(), 'Zero address should start with zero byte')
    intc_0 // 0
    intc_2 // 1
    *
    bytec 4 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    swap
    intc_2 // 1
    extract3 // on error: index access is out of bounds
    bytec_0 // 0x00
    ==
    assert // Zero address should start with zero byte
    retsub


// tests/approvals/arc4-types.algo.ts::testTuple() -> void:
testTuple:

testTuple_block@0:
    // tests/approvals/arc4-types.algo.ts:148
    // const t = new Tuple(new ARC4Uint64(34))
    bytec_1 // 0x
    pushbytes 0x0000000000000022
    concat
    // tests/approvals/arc4-types.algo.ts:149
    // const firstItem = t.at(0)
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    // tests/approvals/arc4-types.algo.ts:150
    // const firstItemIndexer = t.native[0]
    swap
    intc_0 // 0
    intc_1 // 8
    extract3
    // tests/approvals/arc4-types.algo.ts:151
    // assert(firstItem === firstItemIndexer)
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:153
    // assert(t1.length === 2)
    intc_3 // 2
    dup
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testZeroValues() -> void:
testZeroValues:

testZeroValues_block@0:
    // tests/approvals/arc4-types.algo.ts:182
    // assert(new StaticArray<UintN8, 4>().bytes === new StaticArray(new UintN8(0), new UintN8(0), new UintN8(0), new UintN8(0)).bytes)
    pushint 4 // 4
    bzero
    bytec_1 // 0x
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    concat
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:183
    // assert(new StaticArray<Bool, 4>().bytes === new StaticArray(new Bool(false), new Bool(false), new Bool(false), new Bool(false)).bytes)
    intc_2 // 1
    bzero
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    swap
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 2
    intc_0 // 0
    getbit
    uncover 3
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    intc_3 // 2
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    bytec_1 // 0x
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:185
    // new StaticArray<Bool, 9>().bytes ===
    intc_3 // 2
    bzero
    // tests/approvals/arc4-types.algo.ts:187
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    // tests/approvals/arc4-types.algo.ts:188
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    // tests/approvals/arc4-types.algo.ts:189
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    swap
    // tests/approvals/arc4-types.algo.ts:190
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 2
    // tests/approvals/arc4-types.algo.ts:191
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 3
    // tests/approvals/arc4-types.algo.ts:192
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 4
    // tests/approvals/arc4-types.algo.ts:193
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 5
    // tests/approvals/arc4-types.algo.ts:194
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 6
    // tests/approvals/arc4-types.algo.ts:195
    // new Bool(false),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 7
    // tests/approvals/arc4-types.algo.ts:186-196
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    uncover 8
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    intc_3 // 2
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 4 // 4
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 5 // 5
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 6 // 6
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 7 // 7
    uncover 2
    setbit
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:185-196
    // new StaticArray<Bool, 9>().bytes ===
    //   new StaticArray(
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //   ).bytes,
    ==
    // tests/approvals/arc4-types.algo.ts:184-197
    // assert(
    //   new StaticArray<Bool, 9>().bytes ===
    //     new StaticArray(
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //     ).bytes,
    // )
    assert
    // tests/approvals/arc4-types.algo.ts:198
    // assert(new DynamicArray<UintN8>().bytes === bzero(2))
    intc_0 // 0
    itob
    extract 6 2
    intc_3 // 2
    bzero
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:200
    // new Tuple<[Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool]>().bytes ===
    intc_3 // 2
    bzero
    // tests/approvals/arc4-types.algo.ts:201
    // encodeArc4([false, false, false, false, false, false, false, false, false]),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    intc_2 // 1
    intc_0 // 0
    setbit
    intc_3 // 2
    intc_0 // 0
    setbit
    pushint 3 // 3
    intc_0 // 0
    setbit
    pushint 4 // 4
    intc_0 // 0
    setbit
    pushint 5 // 5
    intc_0 // 0
    setbit
    pushint 6 // 6
    intc_0 // 0
    setbit
    pushint 7 // 7
    intc_0 // 0
    setbit
    bytec_1 // 0x
    swap
    concat
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    concat
    // tests/approvals/arc4-types.algo.ts:200-201
    // new Tuple<[Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool]>().bytes ===
    //   encodeArc4([false, false, false, false, false, false, false, false, false]),
    ==
    // tests/approvals/arc4-types.algo.ts:199-202
    // assert(
    //   new Tuple<[Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool]>().bytes ===
    //     encodeArc4([false, false, false, false, false, false, false, false, false]),
    // )
    assert
    // tests/approvals/arc4-types.algo.ts:203
    // assert(new Str().bytes === bzero(2))
    bytec_1 // ""
    len
    itob
    extract 6 2
    bytec_1 // ""
    concat
    intc_3 // 2
    bzero
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:204
    // assert(new DynamicBytes().bytes === bzero(2))
    intc_3 // 2
    bzero
    bytec_3 // 0x0000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:205
    // assert(new StaticBytes<5>().bytes === bzero(5))
    pushint 5 // 5
    bzero
    pushbytes 0x0000000000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:206
    // assert(new Address().bytes === bzero(32))
    pushint 32 // 32
    bzero
    bytec 4 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:207
    // assert(new UFixedNxM<32, 4>().bytes === bzero(32 / 8))
    pushint 4 // 4
    bzero
    bytec 8 // 0x00000000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:208
    // assert(new Bool().bytes === bzero(1))
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    intc_2 // 1
    bzero
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:209
    // assert(new UintN32().bytes === bzero(32 / 8))
    pushint 4 // 4
    bzero
    bytec 8 // 0x00000000
    ==
    assert
    retsub
