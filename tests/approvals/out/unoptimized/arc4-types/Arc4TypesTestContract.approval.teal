#pragma version 10
#pragma typetrack false

// tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x00 0x 0x0000 base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0xaabbccddee 0x000548656c6c6f 0x000568656c6c6f 0x00000000

main_block@0:
    // tests/approvals/arc4-types.algo.ts:157
    // testStr()
    callsub testStr
    // tests/approvals/arc4-types.algo.ts:158
    // testUintN(1, 2n, new UintN<256>(4))
    intc_1 // 1
    pushbytes 0x02
    pushbytes 0x0000000000000000000000000000000000000000000000000000000000000004
    callsub testUintN
    // tests/approvals/arc4-types.algo.ts:159
    // testUFixed()
    callsub testUFixed
    // tests/approvals/arc4-types.algo.ts:160
    // testByte()
    callsub testByte
    // tests/approvals/arc4-types.algo.ts:161
    // testArrays(new UintN<64>(65))
    pushbytes 0x0000000000000041
    callsub testArrays
    // tests/approvals/arc4-types.algo.ts:162
    // testAddress()
    callsub testAddress
    // tests/approvals/arc4-types.algo.ts:163
    // testTuple()
    callsub testTuple
    // tests/approvals/arc4-types.algo.ts:164
    // testUFixed()
    callsub testUFixed
    // tests/approvals/arc4-types.algo.ts:165
    // testDynamicBytes(Bytes('hmmmmmmmmm'))
    pushbytes "hmmmmmmmmm"
    callsub testDynamicBytes
    // tests/approvals/arc4-types.algo.ts:166
    // testStaticBytes()
    callsub testStaticBytes
    // tests/approvals/arc4-types.algo.ts:167
    // testZeroValues()
    callsub testZeroValues
    // tests/approvals/arc4-types.algo.ts:168
    // const result = new arc4.DynamicArray<arc4.UintN<64>>()
    bytec_2 // 0x0000
    bytec_1 // 0x
    concat
    // tests/approvals/arc4-types.algo.ts:169
    // assert(result.length === 0)
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:170
    // return true
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2

dynamic_array_pop_fixed_size_block@0:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// tests/approvals/arc4-types.algo.ts::testUFixed() -> void:
testUFixed:

testUFixed_block@0:
    // tests/approvals/arc4-types.algo.ts:25
    // const a = new UFixedNxM<32, 4>('1.244')
    pushbytes 0x000004dc
    // tests/approvals/arc4-types.algo.ts:26
    // const c = new UFixedNxM<32, 4>('1.244')
    dup
    // tests/approvals/arc4-types.algo.ts:28
    // assert(a === c)
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testUintN(n: uint64, b: bytes, c: bytes) -> void:
testUintN:
    // tests/approvals/arc4-types.algo.ts:31
    // function testUintN(n: uint64, b: biguint, c: UintN<256>) {
    proto 3 0

testUintN_block@0:
    // tests/approvals/arc4-types.algo.ts:32
    // const x = new UintN<8>(4)
    pushbytes 0x04
    // tests/approvals/arc4-types.algo.ts:33
    // assert(x.bytes.length === 1)
    len
    intc_1 // 1
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:34
    // const x2 = new UintN<8>(255n)
    pushbytes 0xff
    // tests/approvals/arc4-types.algo.ts:35
    // assert(x2.bytes === Bytes.fromHex('ff'))
    dup
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:37
    // const y = new UintN<16>()
    bytec_2 // 0x0000
    // tests/approvals/arc4-types.algo.ts:38
    // assert(y.bytes.length === 2)
    len
    intc_2 // 2
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:39
    // const z = new UintN<8>(n)
    frame_dig -3
    itob
    extract 7 1
    // tests/approvals/arc4-types.algo.ts:40
    // const z_native = z.native
    btoi
    // tests/approvals/arc4-types.algo.ts:41
    // assert(z_native === n)
    frame_dig -3
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:44
    // const a = new UintN<128>(b)
    frame_dig -2
    len
    pushint 16 // 16
    <=
    assert // overflow
    pushint 16 // 16
    bzero
    frame_dig -2
    b|
    // tests/approvals/arc4-types.algo.ts:45
    // const a_native = a.native
    dup
    // tests/approvals/arc4-types.algo.ts:46
    // assert(a_native === b)
    frame_dig -2
    b==
    assert
    // tests/approvals/arc4-types.algo.ts:48
    // assert(c.bytes.length === 256 / 8)
    frame_dig -1
    len
    pushint 32 // 32
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:50
    // const a_bytes = a.bytes
    dup
    // tests/approvals/arc4-types.algo.ts:53
    // assert(a_from_bytes === a)
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:55
    // const aliased64 = new UintN64(12)
    pushbytes 0x000000000000000c
    // tests/approvals/arc4-types.algo.ts:57
    // assert(aliased64.native === 12)
    btoi
    pushint 12 // 12
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:58
    // const aliased32 = new UintN32(50545)
    pushbytes 0x0000c571
    // tests/approvals/arc4-types.algo.ts:59
    // assert(BigUint(aliased32.bytes) === 50545n)
    pushbytes 0xc571
    b==
    assert
    // tests/approvals/arc4-types.algo.ts:61
    // const byte = new Byte(255)
    pushbytes 0xff
    // tests/approvals/arc4-types.algo.ts:63
    // assert(byte.bytes.bitwiseInvert() === Bytes.fromHex('00'))
    b~
    bytec_0 // 0x00
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testStr() -> void:
testStr:

testStr_block@0:
    // tests/approvals/arc4-types.algo.ts:67
    // const s1 = new Str()
    bytec_2 // 0x0000
    // tests/approvals/arc4-types.algo.ts:68
    // assert(s1.bytes === new UintN<16>(0).bytes, 'Empty string should equal the uint16 length prefix')
    dup
    ==
    assert // Empty string should equal the uint16 length prefix
    // tests/approvals/arc4-types.algo.ts:69
    // const s2 = new Str('Hello')
    bytec 5 // 0x000548656c6c6f
    // tests/approvals/arc4-types.algo.ts:70
    // assert(s2.native === 'Hello')
    extract 2 0
    pushbytes "Hello"
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:69
    // const s2 = new Str('Hello')
    bytec 5 // 0x000548656c6c6f
    dup
    // tests/approvals/arc4-types.algo.ts:76
    // assert(s2 === s2_from_bytes)
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testDynamicBytes(someBytes: bytes) -> void:
testDynamicBytes:
    // tests/approvals/arc4-types.algo.ts:79
    // function testDynamicBytes(someBytes: bytes) {
    proto 1 0

testDynamicBytes_block@0:
    // tests/approvals/arc4-types.algo.ts:80
    // const db1 = new DynamicBytes()
    bytec_2 // 0x0000
    // tests/approvals/arc4-types.algo.ts:81
    // assert(db1.native === Bytes(), 'No args should give empty bytes')
    extract 2 0
    bytec_1 // 0x
    ==
    assert // No args should give empty bytes
    // tests/approvals/arc4-types.algo.ts:82
    // assert(db1.bytes === new UintN<16>(0).bytes, 'bytes prop should return length header (of 0)')
    bytec_2 // 0x0000
    dup
    ==
    assert // bytes prop should return length header (of 0)
    // tests/approvals/arc4-types.algo.ts:83
    // const db2 = new DynamicBytes(someBytes)
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    // tests/approvals/arc4-types.algo.ts:84
    // assert(db2.native === someBytes)
    extract 2 0
    frame_dig -1
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:86
    // const db3 = new DynamicBytes('hello')
    bytec 6 // 0x000568656c6c6f
    // tests/approvals/arc4-types.algo.ts:87
    // assert(db3.native === Bytes('hello'))
    extract 2 0
    pushbytes "hello"
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:86
    // const db3 = new DynamicBytes('hello')
    bytec 6 // 0x000568656c6c6f
    // tests/approvals/arc4-types.algo.ts:89
    // const db4 = db3.concat(new DynamicBytes(' world'))
    extract 2 0
    pushbytes 0x000620776f726c64
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:90
    // assert(db4.native === Bytes('hello world'))
    extract 2 0
    pushbytes "hello world"
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testStaticBytes() -> void:
testStaticBytes:

testStaticBytes_block@0:
    // tests/approvals/arc4-types.algo.ts:98
    // const s5 = new StaticArray<StaticBytes<5>, 1>(new StaticBytes<5>(Bytes.fromHex('AABBCCDDEE')))
    bytec_1 // 0x
    bytec 4 // 0xaabbccddee
    concat
    bytec_1 // 0x
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:99
    // assert(s5[0].native === Bytes.fromHex('AABBCCDDEE'))
    intc_0 // 0
    pushint 5 // 5
    *
    pushint 5 // 5
    extract3 // on error: Index access is out of bounds
    bytec 4 // 0xaabbccddee
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:95
    // const s2 = new StaticBytes<4>()
    pushbytes 0x000400000000
    // tests/approvals/arc4-types.algo.ts:101
    // const s4 = s2.concat(s3)
    extract 2 0
    // tests/approvals/arc4-types.algo.ts:96
    // const s3 = new StaticBytes<5>(Bytes.fromHex('AABBCCDDEE'))
    bytec 4 // 0xaabbccddee
    // tests/approvals/arc4-types.algo.ts:101
    // const s4 = s2.concat(s3)
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:102
    // assert(s4.native === Bytes.fromHex('00000000AABBCCDDEE'))
    extract 2 0
    pushbytes 0x00000000aabbccddee
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testArrays(n: bytes) -> void:
testArrays:
    // tests/approvals/arc4-types.algo.ts:108
    // function testArrays(n: ARC4Uint64) {
    proto 1 0

testArrays_block@0:
    // tests/approvals/arc4-types.algo.ts:109
    // const myArray = new DynamicArray(n, n, n)
    bytec_1 // 0x
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    pushbytes 0x0003
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:111
    // myArray.push(n)
    extract 2 0
    bytec_1 // 0x
    frame_dig -1
    concat
    bytec_1 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:113
    // const doubleArray = myArray.concat(myArray)
    dup
    extract 2 0
    swap
    dup
    extract 2 0
    uncover 2
    swap
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:115
    // assert(doubleArray === new DynamicArray(n, n, n, n, n, n, n, n))
    bytec_1 // 0x
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    frame_dig -1
    concat
    pushbytes 0x0008
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:117
    // const myStatic = new StaticArray(n, n)
    bytec_1 // 0x
    frame_dig -1
    concat
    frame_dig -1
    concat
    bytec_1 // 0x
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:119
    // assert(myStatic[0] === myArray.pop())
    intc_0 // 0
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    swap
    intc_3 // 8
    callsub dynamic_array_pop_fixed_size
    pop
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testByte() -> void:
testByte:

testByte_block@0:
    // tests/approvals/arc4-types.algo.ts:127
    // const b = new Byte()
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:128
    // const b2 = new Byte(0)
    dup
    // tests/approvals/arc4-types.algo.ts:129
    // assert(b === b2)
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testAddress() -> void:
testAddress:

testAddress_block@0:
    // tests/approvals/arc4-types.algo.ts:134
    // const b = new Address(Txn.sender)
    txn Sender
    // tests/approvals/arc4-types.algo.ts:133
    // const a = new Address()
    bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // tests/approvals/arc4-types.algo.ts:136
    // assert(a !== b, 'Zero address should not match sender')
    !=
    assert // Zero address should not match sender
    // tests/approvals/arc4-types.algo.ts:133
    // const a = new Address()
    bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // tests/approvals/arc4-types.algo.ts:137
    // assert(a === new Address(), 'Two zero addresses should match')
    dup
    ==
    assert // Two zero addresses should match
    // tests/approvals/arc4-types.algo.ts:138
    // assert(a[0] === new Byte(), 'Zero address should start with zero byte')
    intc_0 // 0
    intc_1 // 1
    *
    // tests/approvals/arc4-types.algo.ts:133
    // const a = new Address()
    bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // tests/approvals/arc4-types.algo.ts:138
    // assert(a[0] === new Byte(), 'Zero address should start with zero byte')
    swap
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    bytec_0 // 0x00
    ==
    assert // Zero address should start with zero byte
    retsub


// tests/approvals/arc4-types.algo.ts::testTuple() -> void:
testTuple:

testTuple_block@0:
    // tests/approvals/arc4-types.algo.ts:142
    // const t = new Tuple(new ARC4Uint64(34))
    bytec_1 // 0x
    pushbytes 0x0000000000000022
    concat
    // tests/approvals/arc4-types.algo.ts:143
    // const firstItem = t.at(0)
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    swap
    // tests/approvals/arc4-types.algo.ts:144
    // const firstItemIndexer = t.native[0]
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    // tests/approvals/arc4-types.algo.ts:145
    // assert(firstItem === firstItemIndexer)
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:147
    // assert(t1.length === 2)
    intc_2 // 2
    dup
    ==
    assert
    retsub


// tests/approvals/arc4-types.algo.ts::testZeroValues() -> void:
testZeroValues:

testZeroValues_block@0:
    // tests/approvals/arc4-types.algo.ts:175
    // assert(new StaticArray<UintN8, 4>().bytes === new StaticArray(new UintN8(0), new UintN8(0), new UintN8(0), new UintN8(0)).bytes)
    pushint 4 // 4
    bzero
    bytec_1 // 0x
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    concat
    bytec_1 // 0x
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:176
    // assert(new StaticArray<Bool, 4>().bytes === new StaticArray(new Bool(false), new Bool(false), new Bool(false), new Bool(false)).bytes)
    intc_1 // 1
    bzero
    bytec_1 // 0x
    bytec_0 // 0x00
    concat
    bytec_0 // 0x00
    intc_0 // 0
    getbit
    swap
    intc_1 // 1
    uncover 2
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    getbit
    swap
    intc_2 // 2
    uncover 2
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    bytec_1 // 0x
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:178
    // new StaticArray<Bool, 9>().bytes ===
    intc_2 // 2
    bzero
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    bytec_1 // 0x
    // tests/approvals/arc4-types.algo.ts:180
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    concat
    // tests/approvals/arc4-types.algo.ts:181
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    intc_1 // 1
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:182
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    intc_2 // 2
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:183
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:184
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    pushint 4 // 4
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:185
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    pushint 5 // 5
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:186
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    pushint 6 // 6
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:187
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    intc_0 // 0
    getbit
    swap
    pushint 7 // 7
    uncover 2
    setbit
    // tests/approvals/arc4-types.algo.ts:188
    // new Bool(false),
    bytec_0 // 0x00
    // tests/approvals/arc4-types.algo.ts:179-189
    // new StaticArray(
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    //   new Bool(false),
    // ).bytes,
    concat
    bytec_1 // 0x
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:178-189
    // new StaticArray<Bool, 9>().bytes ===
    //   new StaticArray(
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //     new Bool(false),
    //   ).bytes,
    ==
    // tests/approvals/arc4-types.algo.ts:177-190
    // assert(
    //   new StaticArray<Bool, 9>().bytes ===
    //     new StaticArray(
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //       new Bool(false),
    //     ).bytes,
    // )
    assert
    // tests/approvals/arc4-types.algo.ts:191
    // assert(new DynamicArray<UintN8>().bytes === bzero(2))
    bytec_2 // 0x0000
    bytec_1 // 0x
    concat
    intc_2 // 2
    bzero
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:193
    // new Tuple<[Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool]>().bytes ===
    intc_2 // 2
    bzero
    // tests/approvals/arc4-types.algo.ts:194
    // encodeArc4([false, false, false, false, false, false, false, false, false]),
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 2
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 3
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 4
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 5
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 6
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 7
    bytec_0 // 0x00
    intc_0 // 0
    dup
    setbit
    cover 8
    bytec_1 // 0x
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_1 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    intc_2 // 2
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 3 // 3
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 4 // 4
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 5 // 5
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 6 // 6
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 7 // 7
    uncover 2
    setbit
    swap
    concat
    // tests/approvals/arc4-types.algo.ts:193-194
    // new Tuple<[Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool]>().bytes ===
    //   encodeArc4([false, false, false, false, false, false, false, false, false]),
    ==
    // tests/approvals/arc4-types.algo.ts:192-195
    // assert(
    //   new Tuple<[Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool]>().bytes ===
    //     encodeArc4([false, false, false, false, false, false, false, false, false]),
    // )
    assert
    // tests/approvals/arc4-types.algo.ts:196
    // assert(new Str().bytes === bzero(2))
    intc_2 // 2
    bzero
    bytec_2 // 0x0000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:197
    // assert(new DynamicBytes().bytes === bzero(2))
    intc_2 // 2
    bzero
    bytec_2 // 0x0000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:198
    // assert(new StaticBytes<5>().bytes === bzero(5))
    pushint 5 // 5
    bzero
    pushbytes 0x0000000000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:199
    // assert(new Address().bytes === bzero(32))
    pushint 32 // 32
    bzero
    bytec_3 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:200
    // assert(new UFixedNxM<32, 4>().bytes === bzero(32 / 8))
    pushint 4 // 4
    bzero
    bytec 7 // 0x00000000
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:201
    // assert(new Bool().bytes === bzero(1))
    intc_1 // 1
    bzero
    bytec_0 // 0x00
    ==
    assert
    // tests/approvals/arc4-types.algo.ts:202
    // assert(new UintN32().bytes === bzero(32 / 8))
    pushint 4 // 4
    bzero
    bytec 7 // 0x00000000
    ==
    assert
    retsub
