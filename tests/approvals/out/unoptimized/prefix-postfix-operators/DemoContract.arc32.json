{
    "hints": {
        "test()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDEwIDUKICAgIGJ5dGVjYmxvY2sgMHgwYSAweDAxIDB4MDUKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo1NwogICAgLy8gZXhwb3J0IGNsYXNzIERlbW9Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDYKCm1haW5fYWJpX3JvdXRpbmdAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo1NwogICAgLy8gZXhwb3J0IGNsYXNzIERlbW9Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIHB1c2hieXRlcyAweGY1OWUzY2M0IC8vIG1ldGhvZCAidGVzdCgpYm9vbCIKICAgIHN3YXAKICAgIG1hdGNoIG1haW5fdGVzdF9yb3V0ZUAzCgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRANDoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEA1OgoKbWFpbl9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjU3CiAgICAvLyBleHBvcnQgY2xhc3MgRGVtb0NvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKCm1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6OkRlbW9Db250cmFjdC5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMToKICAgIHJldHVybgoKbWFpbl90ZXN0X3JvdXRlQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NTgKICAgIC8vIHRlc3QoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3QKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo6RGVtb0NvbnRyYWN0Ll9fcHV5YV9hcmM0X3JvdXRlcl9fQDExCgptYWluX2JhcmVfcm91dGluZ0A2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjU3CiAgICAvLyBleHBvcnQgY2xhc3MgRGVtb0NvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIG1hdGNoIG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDcKCm1haW5fc3dpdGNoX2Nhc2VfZGVmYXVsdEA4OgoKbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDk6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMAoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo1NwogICAgLy8gZXhwb3J0IGNsYXNzIERlbW9Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgPT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGNhbGxzdWIgX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjpEZW1vQ29udHJhY3QuX19wdXlhX2FyYzRfcm91dGVyX19AMTEKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6OnRlc3RfdWludDY0KHg6IHVpbnQ2NCwgeTogdWludDY0KSAtPiB1aW50NjQ6CnRlc3RfdWludDY0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjUKICAgIC8vIGZ1bmN0aW9uIHRlc3RfdWludDY0KHg6IHVpbnQ2NCwgeTogdWludDY0KSB7CiAgICBwcm90byAyIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo2CiAgICAvLyBhc3NlcnQoeCA9PT0gMTAsICd4IGlucHV0IG11c3QgYmUgMTAnKQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gMTAKICAgID09CiAgICBhc3NlcnQgLy8geCBpbnB1dCBtdXN0IGJlIDEwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NwogICAgLy8gYXNzZXJ0KHkgPT09IDUsICd5IGlucHV0IG11c3QgYmUgNScpCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMyAvLyA1CiAgICA9PQogICAgYXNzZXJ0IC8vIHkgaW5wdXQgbXVzdCBiZSA1CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6OAogICAgLy8geCsrCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgLTIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo5CiAgICAvLyBhc3NlcnQoeCA9PT0gMTEpCiAgICBwdXNoaW50IDExIC8vIDExCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MTAKICAgIC8vIHgtLQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0yCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MTEKICAgIC8vIGFzc2VydCh4ID09PSAxMCkKICAgIGludGNfMiAvLyAxMAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjEyCiAgICAvLyB4IC09IC0teQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZnJhbWVfYnVyeSAtMQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjEzCiAgICAvLyBhc3NlcnQoeCA9PT0gNikKICAgIHB1c2hpbnQgNiAvLyA2CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MTQKICAgIC8vIGFzc2VydCh5ID09PSA0KQogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjE1CiAgICAvLyB4ICs9IHkrKwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgICsKICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjE2CiAgICAvLyBhc3NlcnQoeCA9PT0gMTApCiAgICBpbnRjXzIgLy8gMTAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czoxNwogICAgLy8gYXNzZXJ0KHkgPT09IDUpCiAgICBkdXAKICAgIGludGNfMyAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MTgKICAgIC8vIGNvbnN0IGludmVydGVkOiB1aW50NjQgPSB+eQogICAgZHVwCiAgICB+CiAgICBzd2FwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MTkKICAgIC8vIGFzc2VydChpbnZlcnRlZCA9PT0gMiAqKiA2NCAtIDEgLSB5KQogICAgcHVzaGludCAxODQ0Njc0NDA3MzcwOTU1MTYxNSAvLyAxODQ0Njc0NDA3MzcwOTU1MTYxNQogICAgZGlnIDEKICAgIC0KICAgIHVuY292ZXIgMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjI2CiAgICAvLyBhc3NlcnQoeSkKICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MjcKICAgIC8vIGFzc2VydCghIXkpCiAgICBkdXAKICAgICEKICAgICEKICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjI4CiAgICAvLyByZXR1cm4gIXkKICAgICEKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo6dGVzdF9iaWd1aW50KHg6IGJ5dGVzLCB5OiBieXRlcykgLT4gdWludDY0Ogp0ZXN0X2JpZ3VpbnQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MzAKICAgIC8vIGZ1bmN0aW9uIHRlc3RfYmlndWludCh4OiBiaWd1aW50LCB5OiBiaWd1aW50KSB7CiAgICBwcm90byAyIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czozMQogICAgLy8gYXNzZXJ0KHggPT09IDEwbiwgJ3ggaW5wdXQgbXVzdCBiZSAxMCcpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjXzAgLy8gMHgwYQogICAgYj09CiAgICBhc3NlcnQgLy8geCBpbnB1dCBtdXN0IGJlIDEwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MzIKICAgIC8vIGFzc2VydCh5ID09PSA1biwgJ3kgaW5wdXQgbXVzdCBiZSA1JykKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMiAvLyAweDA1CiAgICBiPT0KICAgIGFzc2VydCAvLyB5IGlucHV0IG11c3QgYmUgNQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjM0CiAgICAvLyB4KysKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZWNfMSAvLyAweDAxCiAgICBiKwogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0yCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6MzUKICAgIC8vIGFzc2VydCh4ID09PSAxMW4pCiAgICBwdXNoYnl0ZXMgMHgwYgogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czozNwogICAgLy8geC0tCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjXzEgLy8gMHgwMQogICAgYi0KICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjM5CiAgICAvLyBhc3NlcnQoeCA9PT0gMTBuKQogICAgYnl0ZWNfMCAvLyAweDBhCiAgICBiPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjQwCiAgICAvLyB4IC09IC0teQogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlY18xIC8vIDB4MDEKICAgIGItCiAgICBmcmFtZV9idXJ5IC0xCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgYi0KICAgIGZyYW1lX2J1cnkgLTIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo0MQogICAgLy8gYXNzZXJ0KHkgPT09IDRuKQogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoYnl0ZXMgMHgwNAogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo0MgogICAgLy8gYXNzZXJ0KHggPT09IDZuKQogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoYnl0ZXMgMHgwNgogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo0MwogICAgLy8geCArPSB5KysKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMSAvLyAweDAxCiAgICBiKwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGIrCiAgICBmcmFtZV9idXJ5IC0yCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NDQKICAgIC8vIGFzc2VydCh5ID09PSA1bikKICAgIGR1cAogICAgYnl0ZWNfMiAvLyAweDA1CiAgICBiPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjQ1CiAgICAvLyBhc3NlcnQoeCA9PT0gMTBuKQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlY18wIC8vIDB4MGEKICAgIGI9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NDYKICAgIC8vIGFzc2VydCh5KQogICAgZHVwCiAgICBiaXRsZW4KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjQ3CiAgICAvLyBhc3NlcnQoISF5KQogICAgZHVwCiAgICBiaXRsZW4KICAgICEKICAgICEKICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjQ4CiAgICAvLyByZXR1cm4gIXkKICAgIGJpdGxlbgogICAgIQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjp0ZXN0X2J5dGVzKHg6IGJ5dGVzKSAtPiB2b2lkOgp0ZXN0X2J5dGVzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjUwCiAgICAvLyBmdW5jdGlvbiB0ZXN0X2J5dGVzKHg6IGJ5dGVzKSB7CiAgICBwcm90byAxIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo1MQogICAgLy8gYXNzZXJ0KHggPT09IGJ6ZXJvKDQpLCAneCBtdXN0IGJlIDQgdW5zZXQgYnl0ZXMnKQogICAgcHVzaGludCA0IC8vIDQKICAgIGJ6ZXJvCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBhc3NlcnQgLy8geCBtdXN0IGJlIDQgdW5zZXQgYnl0ZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo1MgogICAgLy8gY29uc3QgeSA9IHguYml0d2lzZUludmVydCgpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ+CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NTQKICAgIC8vIGFzc2VydCh5ID09PSBCeXRlcy5mcm9tSGV4KCdGRkZGRkZGRicpKQogICAgcHVzaGJ5dGVzIDB4ZmZmZmZmZmYKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo6RGVtb0NvbnRyYWN0LnRlc3QoKSAtPiB1aW50NjQ6CnRlc3Q6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NTkKICAgIC8vIHRlc3RfdWludDY0KDEwLCA1KQogICAgaW50Y18yIC8vIDEwCiAgICBpbnRjXzMgLy8gNQogICAgY2FsbHN1YiB0ZXN0X3VpbnQ2NAogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NjAKICAgIC8vIHRlc3RfYmlndWludCgxMG4sIDVuKQogICAgYnl0ZWNfMCAvLyAweDBhCiAgICBieXRlY18yIC8vIDB4MDUKICAgIGNhbGxzdWIgdGVzdF9iaWd1aW50CiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVmaXgtcG9zdGZpeC1vcGVyYXRvcnMuYWxnby50czo2MgogICAgLy8gdGVzdF9ieXRlcyhiemVybyg0KSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBiemVybwogICAgY2FsbHN1YiB0ZXN0X2J5dGVzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlZml4LXBvc3RmaXgtb3BlcmF0b3JzLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3ByZWZpeC1wb3N0Zml4LW9wZXJhdG9ycy5hbGdvLnRzOjpEZW1vQ29udHJhY3QuX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlKCkgLT4gdm9pZDoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlOgogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DemoContract",
        "methods": [
            {
                "name": "test",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}