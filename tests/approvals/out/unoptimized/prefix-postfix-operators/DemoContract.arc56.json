{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        68
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        122
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        142,
                        248
                    ],
                    "errorMessage": "x input must be 10"
                },
                {
                    "pc": [
                        346
                    ],
                    "errorMessage": "x must be 4 unset bytes"
                },
                {
                    "pc": [
                        147,
                        253
                    ],
                    "errorMessage": "y input must be 5"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAAEKBSYDAQoBAQEFgABCAABCAAAxGyITQQBGQgAANhoAgAT1njzETwGOAQAQQgAAQgAAQgAAIkUBQgAAQzEZIhJEMRgiE0SIARqAAQAiTwJUgAQVH3x1TwFQsCNFAUL/2zEZIk8BjgEACUIAAEIAAEL/wzEYIhJEiAEAI0UBQv+7igIBQgAAi/4kEkSL/yUSRIv+IwhJjP6BCxJEi/4jCUmM/iQSRIv/IwmM/4v+i/8JSYz+gQYSRIv/gQQSRIv/IwiL/ov/CEmM/iQSREklEkRJHIH///////////8BSwIJEkRJREkUFEQUiYoCAUIAAIv+KKhEi/8qqESL/imgSYz+gAELqESL/imhSYz+KKhEi/8poYz/i/6L/6GM/ov/gAEEqESL/oABBqhEi/8poIv+i/+gjP5JKqhEi/4oqERJk0RJkxQURJMUiYoBAEIAAIEEr4v/EkSL/66ABP////8SRIlCAAAkJYj/FUgoKoj/eUiBBK+I/9IjiUIAAIk=",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}