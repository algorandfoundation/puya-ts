{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/prefix-postfix-operators.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAwDA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AApDA;;;AACS;;AAAM;AAAN;AAAP;AACO;;AAAM;AAAN;AAAP;AACA;;AAAA;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACA;;AAAA;AAAA;;AAAA;;AACa;AAAN;AAAP;AACK;;AAAA;AAAA;AAAA;;AAAL;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACK;;AAAA;AAAA;AAAL;;AAAA;;AAAA;;AAAA;;AACa;AAAN;AAAP;AACO;AAAM;AAAN;AAAP;AACM;AAAmB;AAAnB;AACc;;;;;;;;;;;AAAA;;AAAA;AAAb;;AAAA;AAAP;AAOA;AAAA;AACQ;AAAA;AAAD;AAAP;AACO;AAAP;AAEF;;;AACS;;AAAM;AAAN;AAAP;AACO;;AAAM;AAAN;AAAP;AAEA;;AAAA;AAAA;;AAAA;;AACa;;;AAAN;AAAP;AAEA;;AAAA;AAAA;;AAAA;;AAEa;AAAN;AAAP;AACK;;AAAA;AAAA;AAAA;;AAAL;;AAAA;;AAAA;AAAA;;AACO;;AAAM;;;AAAN;AAAP;AACO;;AAAM;;;AAAN;AAAP;AACK;;AAAA;AAAA;AAAL;;AAAA;;AAAA;AAAA;;AACO;AAAM;AAAN;AAAP;AACO;;AAAM;AAAN;AAAP;AACA;AAAA;AAAA;AACQ;AAAA;AAAA;AAAD;AAAP;AACO;AAAA;AAAP;AAEF;;;AACqB;;AAAN;AAAN;;AAAA;AAAP;AACM;;AAAI;AAEG;;;;;;AAAN;AAAP;;AAKc;AAAI;AAAhB;;;;AACa;AAAK;AAAlB;;;;AAEiB;;AAAN;AAAX;;;AAEO;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10 5"
    },
    "7": {
      "op": "bytecblock 0x0a 0x01 0x05"
    },
    "15": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "17": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "18": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "22": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "pushbytes 0xf59e3cc4 // method \"test()bool\"",
      "defined_out": [
        "Method(test()bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test()bool)"
      ]
    },
    "31": {
      "op": "swap",
      "stack_out": [
        "Method(test()bool)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_test_route@3",
      "stack_out": []
    },
    "36": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "37": {
      "block": "main_after_inlined_tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "38": {
      "block": "main_test_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "40": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "41": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "42": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "46": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "47": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "48": {
      "callsub": "tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.test",
      "op": "callsub test",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "51": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "54": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "55": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "57": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "58": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "65": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "66": {
      "op": "log",
      "stack_out": []
    },
    "67": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "68": {
      "op": "b main_after_inlined_tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__puya_arc4_router__@11"
    },
    "71": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "73": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "74": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%8#0"
      ]
    },
    "75": {
      "op": "match main___algots__.defaultCreate@7",
      "stack_out": []
    },
    "79": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "82": {
      "block": "main___algots__.defaultCreate@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "84": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "85": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "86": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "87": {
      "callsub": "tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "90": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "b main_after_inlined_tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__puya_arc4_router__@11"
    },
    "94": {
      "subroutine": "tests/approvals/prefix-postfix-operators.algo.ts::test_uint64",
      "params": {
        "x#0": "uint64",
        "y#0": "uint64"
      },
      "block": "test_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "97": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "99": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "10"
      ]
    },
    "100": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "error": "x input must be 10",
      "op": "assert // x input must be 10",
      "stack_out": []
    },
    "102": {
      "op": "frame_dig -1",
      "defined_out": [
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "104": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0 (copy)",
        "5"
      ]
    },
    "105": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "106": {
      "error": "y input must be 5",
      "op": "assert // y input must be 5",
      "stack_out": []
    },
    "107": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "109": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "110": {
      "op": "+",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "111": {
      "op": "dup"
    },
    "112": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "114": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "11"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "117": {
      "op": "assert",
      "stack_out": []
    },
    "118": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "120": {
      "op": "intc_1 // 1",
      "stack_out": [
        "x#0 (copy)",
        "1"
      ]
    },
    "121": {
      "op": "-",
      "stack_out": [
        "x#0"
      ]
    },
    "122": {
      "op": "dup"
    },
    "123": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "125": {
      "op": "intc_2 // 10",
      "stack_out": [
        "x#0 (copy)",
        "10"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": []
    },
    "128": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "130": {
      "op": "intc_1 // 1",
      "stack_out": [
        "y#0 (copy)",
        "1"
      ]
    },
    "131": {
      "op": "-",
      "defined_out": [
        "y#0"
      ],
      "stack_out": [
        "y#0"
      ]
    },
    "132": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "134": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0 (copy)",
        "y#0 (copy)"
      ]
    },
    "138": {
      "op": "-",
      "stack_out": [
        "x#0"
      ]
    },
    "139": {
      "op": "dup"
    },
    "140": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "142": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "6"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "145": {
      "op": "assert",
      "stack_out": []
    },
    "146": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "148": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0 (copy)",
        "4"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "151": {
      "op": "assert",
      "stack_out": []
    },
    "152": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "154": {
      "op": "intc_1 // 1",
      "stack_out": [
        "y#0 (copy)",
        "1"
      ]
    },
    "155": {
      "op": "+",
      "defined_out": [
        "y#2"
      ],
      "stack_out": [
        "y#2"
      ]
    },
    "156": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#2",
        "x#0 (copy)"
      ]
    },
    "158": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#2",
        "x#0 (copy)",
        "y#0 (copy)"
      ]
    },
    "160": {
      "op": "+",
      "stack_out": [
        "y#2",
        "x#0"
      ]
    },
    "161": {
      "op": "dup"
    },
    "162": {
      "op": "frame_bury -2",
      "stack_out": [
        "y#2",
        "x#0 (copy)"
      ]
    },
    "164": {
      "op": "intc_2 // 10",
      "stack_out": [
        "y#2",
        "x#0 (copy)",
        "10"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%6#0"
      ]
    },
    "166": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "167": {
      "op": "dup",
      "defined_out": [
        "y#2",
        "y#2 (copy)"
      ],
      "stack_out": [
        "y#2",
        "y#2 (copy)"
      ]
    },
    "168": {
      "op": "intc_3 // 5",
      "stack_out": [
        "y#2",
        "y#2 (copy)",
        "5"
      ]
    },
    "169": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%7#0"
      ]
    },
    "170": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "171": {
      "op": "dup",
      "stack_out": [
        "y#2",
        "y#2 (copy)"
      ]
    },
    "172": {
      "op": "~",
      "defined_out": [
        "inverted#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "inverted#0"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "inverted#0",
        "y#2"
      ]
    },
    "174": {
      "op": "pushint 18446744073709551615 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "inverted#0",
        "y#2"
      ],
      "stack_out": [
        "inverted#0",
        "y#2",
        "18446744073709551615"
      ]
    },
    "185": {
      "op": "dig 1",
      "stack_out": [
        "inverted#0",
        "y#2",
        "18446744073709551615",
        "y#2 (copy)"
      ]
    },
    "187": {
      "op": "-",
      "defined_out": [
        "inverted#0",
        "tmp%8#0",
        "y#2"
      ],
      "stack_out": [
        "inverted#0",
        "y#2",
        "tmp%8#0"
      ]
    },
    "188": {
      "op": "uncover 2",
      "stack_out": [
        "y#2",
        "tmp%8#0",
        "inverted#0"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "tmp%9#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%9#0"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "192": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bool%0#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "reinterpret_bool%0#0"
      ]
    },
    "193": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "194": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bool%1#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "reinterpret_bool%1#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%10#0"
      ]
    },
    "196": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%11#0"
      ]
    },
    "197": {
      "op": "assert",
      "defined_out": [
        "reinterpret_bool%2#0"
      ],
      "stack_out": [
        "reinterpret_bool%2#0"
      ]
    },
    "198": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "199": {
      "retsub": true,
      "op": "retsub"
    },
    "200": {
      "subroutine": "tests/approvals/prefix-postfix-operators.algo.ts::test_biguint",
      "params": {
        "x#0": "bytes",
        "y#0": "bytes"
      },
      "block": "test_biguint",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "203": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "205": {
      "op": "bytec_0 // 0x0a",
      "defined_out": [
        "0x0a",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "0x0a"
      ]
    },
    "206": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "error": "x input must be 10",
      "op": "assert // x input must be 10",
      "stack_out": []
    },
    "208": {
      "op": "frame_dig -1",
      "defined_out": [
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "210": {
      "op": "bytec_2 // 0x05",
      "defined_out": [
        "0x05",
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0 (copy)",
        "0x05"
      ]
    },
    "211": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "212": {
      "error": "y input must be 5",
      "op": "assert // y input must be 5",
      "stack_out": []
    },
    "213": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "215": {
      "op": "bytec_1 // 0x01",
      "defined_out": [
        "0x01",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "0x01"
      ]
    },
    "216": {
      "op": "b+",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "217": {
      "op": "dup"
    },
    "218": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "220": {
      "op": "pushbytes 0x0b",
      "defined_out": [
        "0x0b",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "0x0b"
      ]
    },
    "223": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "224": {
      "op": "assert",
      "stack_out": []
    },
    "225": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "227": {
      "op": "bytec_1 // 0x01",
      "stack_out": [
        "x#0 (copy)",
        "0x01"
      ]
    },
    "228": {
      "op": "b-",
      "stack_out": [
        "x#0"
      ]
    },
    "229": {
      "op": "dup"
    },
    "230": {
      "op": "frame_bury -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "232": {
      "op": "bytec_0 // 0x0a",
      "stack_out": [
        "x#0 (copy)",
        "0x0a"
      ]
    },
    "233": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "234": {
      "op": "assert",
      "stack_out": []
    },
    "235": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "237": {
      "op": "bytec_1 // 0x01",
      "stack_out": [
        "y#0 (copy)",
        "0x01"
      ]
    },
    "238": {
      "op": "b-",
      "defined_out": [
        "y#0"
      ],
      "stack_out": [
        "y#0"
      ]
    },
    "239": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "241": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "243": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0 (copy)",
        "y#0 (copy)"
      ]
    },
    "245": {
      "op": "b-",
      "stack_out": [
        "x#0"
      ]
    },
    "246": {
      "op": "frame_bury -2",
      "stack_out": []
    },
    "248": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "250": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0 (copy)",
        "0x04"
      ]
    },
    "253": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "254": {
      "op": "assert",
      "stack_out": []
    },
    "255": {
      "op": "frame_dig -2",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "257": {
      "op": "pushbytes 0x06",
      "defined_out": [
        "0x06",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "0x06"
      ]
    },
    "260": {
      "op": "b==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "261": {
      "op": "assert",
      "stack_out": []
    },
    "262": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0 (copy)"
      ]
    },
    "264": {
      "op": "bytec_1 // 0x01",
      "stack_out": [
        "y#0 (copy)",
        "0x01"
      ]
    },
    "265": {
      "op": "b+",
      "defined_out": [
        "y#2"
      ],
      "stack_out": [
        "y#2"
      ]
    },
    "266": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#2",
        "x#0 (copy)"
      ]
    },
    "268": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#2",
        "x#0 (copy)",
        "y#0 (copy)"
      ]
    },
    "270": {
      "op": "b+",
      "stack_out": [
        "y#2",
        "x#0"
      ]
    },
    "271": {
      "op": "frame_bury -2",
      "stack_out": [
        "y#2"
      ]
    },
    "273": {
      "op": "dup",
      "defined_out": [
        "y#2",
        "y#2 (copy)"
      ],
      "stack_out": [
        "y#2",
        "y#2 (copy)"
      ]
    },
    "274": {
      "op": "bytec_2 // 0x05",
      "stack_out": [
        "y#2",
        "y#2 (copy)",
        "0x05"
      ]
    },
    "275": {
      "op": "b==",
      "defined_out": [
        "tmp%6#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%6#0"
      ]
    },
    "276": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "277": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#2",
        "x#0 (copy)"
      ]
    },
    "279": {
      "op": "bytec_0 // 0x0a",
      "stack_out": [
        "y#2",
        "x#0 (copy)",
        "0x0a"
      ]
    },
    "280": {
      "op": "b==",
      "defined_out": [
        "tmp%7#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%7#0"
      ]
    },
    "281": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "282": {
      "op": "dup",
      "stack_out": [
        "y#2",
        "y#2 (copy)"
      ]
    },
    "283": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%0#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "reinterpret_bool%0#0"
      ]
    },
    "284": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "285": {
      "op": "dup",
      "stack_out": [
        "y#2",
        "y#2 (copy)"
      ]
    },
    "286": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%1#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "reinterpret_bool%1#0"
      ]
    },
    "287": {
      "op": "!",
      "defined_out": [
        "tmp%8#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%8#0"
      ]
    },
    "288": {
      "op": "!",
      "defined_out": [
        "tmp%9#0",
        "y#2"
      ],
      "stack_out": [
        "y#2",
        "tmp%9#0"
      ]
    },
    "289": {
      "op": "assert",
      "stack_out": [
        "y#2"
      ]
    },
    "290": {
      "op": "bitlen",
      "defined_out": [
        "reinterpret_bool%2#0"
      ],
      "stack_out": [
        "reinterpret_bool%2#0"
      ]
    },
    "291": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "292": {
      "retsub": true,
      "op": "retsub"
    },
    "293": {
      "subroutine": "tests/approvals/prefix-postfix-operators.algo.ts::test_bytes",
      "params": {
        "x#0": "bytes"
      },
      "block": "test_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "296": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "298": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "299": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "x#0 (copy)"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "302": {
      "error": "x must be 4 unset bytes",
      "op": "assert // x must be 4 unset bytes",
      "stack_out": []
    },
    "303": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "305": {
      "op": "b~",
      "defined_out": [
        "y#0"
      ],
      "stack_out": [
        "y#0"
      ]
    },
    "306": {
      "op": "pushbytes 0xffffffff",
      "defined_out": [
        "0xffffffff",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "0xffffffff"
      ]
    },
    "312": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "313": {
      "op": "assert",
      "stack_out": []
    },
    "314": {
      "retsub": true,
      "op": "retsub"
    },
    "315": {
      "subroutine": "tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.test",
      "params": {},
      "block": "test",
      "stack_in": [],
      "op": "intc_2 // 10",
      "defined_out": [
        "10"
      ],
      "stack_out": [
        "10"
      ]
    },
    "316": {
      "op": "intc_3 // 5",
      "defined_out": [
        "10",
        "5"
      ],
      "stack_out": [
        "10",
        "5"
      ]
    },
    "317": {
      "callsub": "tests/approvals/prefix-postfix-operators.algo.ts::test_uint64",
      "op": "callsub test_uint64",
      "defined_out": [
        "{test_uint64}"
      ],
      "stack_out": [
        "{test_uint64}"
      ]
    },
    "320": {
      "op": "pop",
      "stack_out": []
    },
    "321": {
      "op": "bytec_0 // 0x0a",
      "defined_out": [
        "0x0a"
      ],
      "stack_out": [
        "0x0a"
      ]
    },
    "322": {
      "op": "bytec_2 // 0x05",
      "defined_out": [
        "0x05",
        "0x0a"
      ],
      "stack_out": [
        "0x0a",
        "0x05"
      ]
    },
    "323": {
      "callsub": "tests/approvals/prefix-postfix-operators.algo.ts::test_biguint",
      "op": "callsub test_biguint",
      "defined_out": [
        "{test_biguint}"
      ],
      "stack_out": [
        "{test_biguint}"
      ]
    },
    "326": {
      "op": "pop",
      "stack_out": []
    },
    "327": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "329": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "330": {
      "callsub": "tests/approvals/prefix-postfix-operators.algo.ts::test_bytes",
      "op": "callsub test_bytes",
      "stack_out": []
    },
    "333": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "334": {
      "retsub": true,
      "op": "retsub"
    },
    "335": {
      "subroutine": "tests/approvals/prefix-postfix-operators.algo.ts::DemoContract.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}