#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8

main_block@0:

main_block@1:
    // tests/approvals/destructured-params.algo.ts:4
    // export class DestructuredParamsAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // tests/approvals/destructured-params.algo.ts:4
    // export class DestructuredParamsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xfefea766 // method "test((uint64,byte[],bool))void"
    pushbytes 0x83f14748 // method "init()void"
    uncover 2
    match main_test_route@3 main_init_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // tests/approvals/destructured-params.algo.ts:4
    // export class DestructuredParamsAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__@12:
    return

main_init_route@4:
    // tests/approvals/destructured-params.algo.ts:9
    // init() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub init
    intc_1 // 1
    b main_after_inlined_tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__@12

main_test_route@3:
    // tests/approvals/destructured-params.algo.ts:5
    // test({ a, b, c }: { a: uint64; b: bytes; c: boolean }): void {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/destructured-params.algo.ts:4
    // export class DestructuredParamsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    pushint 80 // 80
    getbit
    intc_0 // 0
    getbit
    uncover 2
    swap
    uncover 2
    swap
    // tests/approvals/destructured-params.algo.ts:5
    // test({ a, b, c }: { a: uint64; b: bytes; c: boolean }): void {
    uncover 2
    uncover 2
    uncover 2
    callsub test
    intc_1 // 1
    b main_after_inlined_tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__@12

main_bare_routing@7:
    // tests/approvals/destructured-params.algo.ts:4
    // export class DestructuredParamsAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    // tests/approvals/destructured-params.algo.ts:4
    // export class DestructuredParamsAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__@12


// tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(p.a: uint64, p.b: bytes, p.c: uint64) -> void:
test:
    // tests/approvals/destructured-params.algo.ts:5
    // test({ a, b, c }: { a: uint64; b: bytes; c: boolean }): void {
    proto 3 0

test_block@0:
    // tests/approvals/destructured-params.algo.ts:5
    // test({ a, b, c }: { a: uint64; b: bytes; c: boolean }): void {
    frame_dig -3
    frame_dig -2
    swap
    frame_dig -1
    cover 2
    // tests/approvals/destructured-params.algo.ts:6
    // log(a, b, c)
    itob
    swap
    concat
    swap
    itob
    concat
    log
    retsub


// tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init() -> void:
init:

init_block@0:
    // tests/approvals/destructured-params.algo.ts:10
    // this.test({ a: 456, b: Bytes(''), c: false })
    pushint 456 // 456
    pushbytes ""
    intc_0 // 0
    callsub test
    // tests/approvals/destructured-params.algo.ts:11
    // const temp = { a: Uint64(2), b: Bytes('Hello'), c: true }
    pushint 2 // 2
    pushbytes "Hello"
    intc_1 // 1
    // tests/approvals/destructured-params.algo.ts:12
    // this.test(temp)
    callsub test
    retsub


// tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
