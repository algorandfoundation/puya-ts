main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/state-totals.algo.ts::BaseWithState.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L27
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@7
    block@4: // abi_routing_L27
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "setState(uint64)void" => block@5, * => block@6}
    block@5: // setState_route_L31
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be OptIn && can only call when not creating
        tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState[routing]()
        goto block@6
    block@6: // switch_case_next_L27
        goto block@8
    block@7: // __algots__.defaultCreate_L27
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.__algots__.defaultCreate()
        exit 1u
    block@8: // after_if_else_L27
        exit 0u
    block@9: // after_inlined_tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState[routing]() -> void:
    block@0: // L31
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState(tmp%1#0)
        exit 1u

subroutine tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState(n: uint64) -> void:
    block@0: // L31
        tests/approvals/state-totals.algo.ts::BaseWithState.setState(n#0)
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 "oneLocal" n#0)
        return 

subroutine tests/approvals/state-totals.algo.ts::BaseWithState.setState(n: uint64) -> void:
    block@0: // L9
        (app_global_put "oneGlobal" n#0)
        (app_global_put "twoGlobal" n#0)
        return 

subroutine tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.__algots__.defaultCreate() -> void:
    block@0: // L27
        return 

subroutine tests/approvals/state-totals.algo.ts::BaseWithState.constructor() -> void:
    block@0: // L4
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L4
        (app_global_put "oneGlobal" 1u)
        return 