#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 8 0 1 16
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/tuples.algo.ts:6
    // class TuplesAlgo extends Contract {
    txn NumAppArgs
    intc_1 // 0
    !=
    bz main___algots__.defaultCreate@5
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/tuples.algo.ts:6
    // class TuplesAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x37e7ce87 // method "test(uint64,uint64,uint64)void"
    uncover 1
    match main_test_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // tests/approvals/tuples.algo.ts:6
    // class TuplesAlgo extends Contract {
    err

main_test_route@3:
    // tests/approvals/tuples.algo.ts:7
    // test(a: Uint64, b: Uint64, c: Uint64) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub test
    b main_switch_case_next@4

main___algots__.defaultCreate@5:
    // tests/approvals/tuples.algo.ts:6
    // class TuplesAlgo extends Contract {
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    return


// tests/approvals/tuples.algo.ts::TuplesAlgo.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/tuples.algo.ts:7
    // test(a: Uint64, b: Uint64, c: Uint64) {
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 3
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for uint64
    uncover 2
    uncover 2
    uncover 2
    callsub tests/approvals/tuples.algo.ts::TuplesAlgo.test
    intc_2 // 1
    return


// tests/approvals/tuples.algo.ts::TuplesAlgo.test(a: bytes, b: bytes, c: bytes) -> void:
tests/approvals/tuples.algo.ts::TuplesAlgo.test:
    // tests/approvals/tuples.algo.ts:7
    // test(a: Uint64, b: Uint64, c: Uint64) {
    proto 3 0
    b tests/approvals/tuples.algo.ts::TuplesAlgo.test_block@0

tests/approvals/tuples.algo.ts::TuplesAlgo.test_block@0:
    // tests/approvals/tuples.algo.ts:8
    // const readonlyTuple = [a, b, c] as const
    frame_dig -3
    frame_dig -2
    frame_dig -1
    // tests/approvals/tuples.algo.ts:10
    // const mutableTuple: [Uint64, Uint64, Uint64] = [a, b, c]
    pushbytes 0x
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // tests/approvals/tuples.algo.ts:12
    // const arc4Tuple = new Tuple(a, b, c)
    pushbytes 0x
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    cover 1
    // tests/approvals/tuples.algo.ts:14
    // this.receiveReadonly(readonlyTuple)
    uncover 4
    uncover 4
    uncover 4
    callsub receiveReadonly
    pop
    // tests/approvals/tuples.algo.ts:15
    // this.receiveReadonly(mutableTuple)
    dup
    intc_1 // 0
    intc_0 // 8
    extract3
    cover 1
    dup
    intc_0 // 8
    intc_0 // 8
    extract3
    cover 1
    dup
    intc_3 // 16
    intc_0 // 8
    extract3
    uncover 3
    uncover 3
    uncover 2
    callsub receiveReadonly
    pop
    // tests/approvals/tuples.algo.ts:16
    // this.receiveReadonly(arc4Tuple.native)
    dig 1
    intc_1 // 0
    intc_0 // 8
    extract3
    cover 1
    dig 2
    intc_0 // 8
    intc_0 // 8
    extract3
    cover 1
    uncover 3
    intc_3 // 16
    intc_0 // 8
    extract3
    uncover 3
    cover 1
    uncover 3
    uncover 1
    uncover 2
    uncover 2
    uncover 2
    callsub receiveReadonly
    pop
    // tests/approvals/tuples.algo.ts:18
    // this.receiveMutable(mutableTuple)
    callsub receiveMutable
    pop
    retsub


// tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(arg.0: bytes, arg.1: bytes, arg.2: bytes) -> uint64:
receiveReadonly:
    // tests/approvals/tuples.algo.ts:28
    // private receiveReadonly(arg: readonly [Uint64, Uint64, Uint64]): uint64 {
    proto 3 1
    b receiveReadonly_block@0

receiveReadonly_block@0:
    // tests/approvals/tuples.algo.ts:29
    // return arg.length
    pushint 3 // 3
    retsub


// tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(arg: bytes) -> uint64:
receiveMutable:
    // tests/approvals/tuples.algo.ts:32
    // private receiveMutable(arg: [Uint64, Uint64, Uint64]): uint64 {
    proto 1 1
    b receiveMutable_block@0

receiveMutable_block@0:
    // tests/approvals/tuples.algo.ts:34
    // return arg.length
    pushint 3 // 3
    retsub


// tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
