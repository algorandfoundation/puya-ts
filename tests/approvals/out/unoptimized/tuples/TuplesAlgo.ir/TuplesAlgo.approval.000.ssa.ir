main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,uint64,uint64)void" => block@2, * => block@3}
    block@2: // test_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        tests/approvals/tuples.algo.ts::TuplesAlgo.test(reinterpret_Encoded(uint64)%0#0, reinterpret_Encoded(uint64)%1#0, reinterpret_Encoded(uint64)%2#0)
        return 1u
    block@3: // switch_case_default_L6
        goto block@4
    block@4: // switch_case_next_L6
        goto block@9
    block@5: // bare_routing_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L6
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L6
        goto block@8
    block@8: // switch_case_next_L6
        goto block@9
    block@9: // after_if_else_L6
        return 0u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.test(a: Encoded(uint64), b: Encoded(uint64), c: Encoded(uint64)) -> void:
    block@0: // L7
        let (readonlyTuple.0#0: Encoded(uint64), readonlyTuple.1#0: Encoded(uint64), readonlyTuple.2#0: Encoded(uint64)) = (a#0, b#0, c#0)
        let tmp%0#0: Encoded(uint64,uint64,uint64) = bytes_encode<(uint64,uint64,uint64)>(a#0, b#0, c#0)
        let mutableTuple#0: Encoded(uint64,uint64,uint64) = tmp%0#0
        let awst_tmp%0#0: Encoded(uint64,uint64,uint64) = bytes_encode<(uint64,uint64,uint64)>(a#0, b#0, c#0)
        let arc4Tuple#0: Encoded(uint64,uint64,uint64) = awst_tmp%0#0
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(readonlyTuple.0#0, readonlyTuple.1#0, readonlyTuple.2#0)
        let tuple_item%0#0: Encoded(uint64) = extract_value(mutableTuple#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(mutableTuple#0, 1)
        let tuple_item%2#0: Encoded(uint64) = extract_value(mutableTuple#0, 2)
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(tuple_item%0#0, tuple_item%1#0, tuple_item%2#0)
        let (tmp%1#0: Encoded(uint64), tmp%2#0: Encoded(uint64), tmp%3#0: Encoded(uint64)) = decode_bytes<(Encoded(uint64),Encoded(uint64),Encoded(uint64),)>(arc4Tuple#0)
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(tmp%1#0, tmp%2#0, tmp%3#0)
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(mutableTuple#0)
        let x#0: Encoded(uint64) = readonlyTuple.0#0
        let y#0: Encoded(uint64) = readonlyTuple.1#0
        let z#0: Encoded(uint64) = readonlyTuple.2#0
        let tuple_item%3#0: Encoded(uint64) = extract_value(mutableTuple#0, 0)
        let tuple_item%4#0: Encoded(uint64) = extract_value(mutableTuple#0, 1)
        let tuple_item%5#0: Encoded(uint64) = extract_value(mutableTuple#0, 2)
        let d#0: Encoded(uint64) = tuple_item%3#0
        let e#0: Encoded(uint64) = tuple_item%4#0
        let f#0: Encoded(uint64) = tuple_item%5#0
        let g#0: Encoded(uint64) = readonlyTuple.0#0
        let tuple_item%6#0: Encoded(uint64) = extract_value(mutableTuple#0, 0)
        let h#0: Encoded(uint64) = tuple_item%6#0
        return 

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(arg.0: Encoded(uint64), arg.1: Encoded(uint64), arg.2: Encoded(uint64)) -> uint64:
    block@0: // L28
        return 3u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(arg: Encoded(uint64,uint64,uint64)) -> uint64:
    block@0: // L32
        return 3u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 