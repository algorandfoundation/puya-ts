main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L6
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,uint64,uint64)void" => block@3, * => block@4}
    block@3: // test_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        tests/approvals/tuples.algo.ts::TuplesAlgo.test(reinterpret_Encoded(uint64)%0#0, reinterpret_Encoded(uint64)%1#0, reinterpret_Encoded(uint64)%2#0)
        let tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L6
        goto block@5
    block@5: // switch_case_next_L6
        goto block@10
    block@6: // bare_routing_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L6
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate()
        let tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L6
        goto block@9
    block@9: // switch_case_next_L6
        goto block@10
    block@10: // after_if_else_L6
        let tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.test(a: Encoded(uint64), b: Encoded(uint64), c: Encoded(uint64)) -> void:
    block@0: // L7
        let readonlyTuple.0#0: Encoded(uint64) = a#0
        let readonlyTuple.1#0: Encoded(uint64) = b#0
        let readonlyTuple.2#0: Encoded(uint64) = c#0
        let array%encoded%0#1: Encoded((uint64)) = (concat 0x a#0)
        let array%encoded%1#1: Encoded((uint64,uint64)) = (concat array%encoded%0#1 b#0)
        let array%encoded%2#1: Encoded((uint64,uint64,uint64)) = (concat array%encoded%1#1 c#0)
        let array%encoded%3#1: Encoded((uint64,uint64,uint64)) = (concat array%encoded%2#1 0x)
        let tmp%0#0: Encoded((uint64,uint64,uint64)) = array%encoded%3#1
        let mutableTuple#0: Encoded((uint64,uint64,uint64)) = tmp%0#0
        let array%encoded%4#1: Encoded((uint64)) = (concat 0x a#0)
        let array%encoded%5#1: Encoded((uint64,uint64)) = (concat array%encoded%4#1 b#0)
        let array%encoded%6#1: Encoded((uint64,uint64,uint64)) = (concat array%encoded%5#1 c#0)
        let array%encoded%7#1: Encoded((uint64,uint64,uint64)) = (concat array%encoded%6#1 0x)
        let tmp%1#0: Encoded((uint64,uint64,uint64)) = array%encoded%7#1
        let arc4Tuple#0: Encoded((uint64,uint64,uint64)) = tmp%1#0
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(readonlyTuple.0#0, readonlyTuple.1#0, readonlyTuple.2#0)
        let array%extract%0#1: bytes = (extract3 mutableTuple#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%0#1
        let array%extract%1#1: bytes = (extract3 mutableTuple#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%1#1
        let array%extract%2#1: bytes = (extract3 mutableTuple#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = array%extract%2#1
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(tuple_item%0#0, tuple_item%1#0, tuple_item%2#0)
        let array%extract%3#1: bytes = (extract3 arc4Tuple#0 0u 8u)
        let array%extract%4#1: bytes = (extract3 arc4Tuple#0 8u 8u)
        let array%extract%5#1: bytes = (extract3 arc4Tuple#0 16u 8u)
        let tmp%2#0: Encoded(uint64) = array%extract%3#1
        let tmp%3#0: Encoded(uint64) = array%extract%4#1
        let tmp%4#0: Encoded(uint64) = array%extract%5#1
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(tmp%2#0, tmp%3#0, tmp%4#0)
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(mutableTuple#0)
        return 

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(arg.0: Encoded(uint64), arg.1: Encoded(uint64), arg.2: Encoded(uint64)) -> uint64:
    block@0: // L28
        return 3u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(arg: Encoded((uint64,uint64,uint64))) -> uint64:
    block@0: // L32
        return 3u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 