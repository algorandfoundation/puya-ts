main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L6
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,uint64,uint64)void" => block@3, * => block@4}
    block@3: // test_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/tuples.algo.ts::TuplesAlgo.test[routing]()
        goto block@4
    block@4: // switch_case_next_L6
        goto block@6
    block@5: // __algots__.defaultCreate_L6
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate()
        exit 1u
    block@6: // after_if_else_L6
        exit 0u
    block@7: // after_inlined_tests/approvals/tuples.algo.ts::TuplesAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.test[routing]() -> void:
    block@0: // L7
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%1#0
        let tmp%2#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%2#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%2#0: Encoded(uint64) = tmp%2#0
        tests/approvals/tuples.algo.ts::TuplesAlgo.test(as_Encoded(uint64)%0#0, as_Encoded(uint64)%1#0, as_Encoded(uint64)%2#0)
        exit 1u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.test(a: Encoded(uint64), b: Encoded(uint64), c: Encoded(uint64)) -> void:
    block@0: // L7
        let readonlyTuple.0#0: Encoded(uint64) = a#0
        let readonlyTuple.1#0: Encoded(uint64) = b#0
        let readonlyTuple.2#0: Encoded(uint64) = c#0
        let aggregate%head%0#0: bytes = (concat 0x a#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 b#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 c#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = aggregate%head%2#0
        let tmp%0#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#0
        let mutableTuple#0: Encoded(uint64,uint64,uint64) = tmp%0#0
        let aggregate%head%3#0: bytes = (concat 0x a#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 b#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 c#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%1#0: Encoded(uint64,uint64,uint64) = aggregate%head%5#0
        let tmp%1#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%1#0
        let arc4Tuple#0: Encoded(uint64,uint64,uint64) = tmp%1#0
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(readonlyTuple.0#0, readonlyTuple.1#0, readonlyTuple.2#0)
        let aggregate%extract%0#0: bytes = (extract3 mutableTuple#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let aggregate%extract%1#0: bytes = (extract3 mutableTuple#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let aggregate%extract%2#0: bytes = (extract3 mutableTuple#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(tuple_item%0#0, tuple_item%1#0, tuple_item%2#0)
        let aggregate%extract%3#0: bytes = (extract3 arc4Tuple#0 0u 8u)
        let aggregate%extract%4#0: bytes = (extract3 arc4Tuple#0 8u 8u)
        let aggregate%extract%5#0: bytes = (extract3 arc4Tuple#0 16u 8u)
        let tmp%2#0: Encoded(uint64) = aggregate%extract%3#0
        let tmp%3#0: Encoded(uint64) = aggregate%extract%4#0
        let tmp%4#0: Encoded(uint64) = aggregate%extract%5#0
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(tmp%2#0, tmp%3#0, tmp%4#0)
        tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(mutableTuple#0)
        return 

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(arg.0: Encoded(uint64), arg.1: Encoded(uint64), arg.2: Encoded(uint64)) -> uint64:
    block@0: // L28
        return 3u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(arg: Encoded(uint64,uint64,uint64)) -> uint64:
    block@0: // L32
        return 3u

subroutine tests/approvals/tuples.algo.ts::TuplesAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 