contract TuplesAlgo
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  test(a: arc4.uint64, b: arc4.uint64, c: arc4.uint64): void
  {
    readonlyTuple: readonly [arc4.uint64, arc4.uint64, arc4.uint64] = <tuple>[a, b, c]
    mutableTuple: arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64> = ARC4_ENCODE(<tuple>[a, b, c], wtype=arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>)
    arc4Tuple: arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64> = ARC4_ENCODE(<tuple>[a, b, c], wtype=arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>)
    tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(readonlyTuple)
    tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(<tuple>[mutableTuple.0, mutableTuple.1, mutableTuple.2])
    tests/approvals/tuples.algo.ts::TuplesAlgo.receiveReadonly(ARC4_DECODE(arc4Tuple))
    tests/approvals/tuples.algo.ts::TuplesAlgo.receiveMutable(mutableTuple)
    (x = readonlyTuple.0), (y = readonlyTuple.1), (z = readonlyTuple.2), readonlyTuple
    (d = mutableTuple.0), (e = mutableTuple.1), (f = mutableTuple.2), mutableTuple
    (g = readonlyTuple.0), readonlyTuple
    (h = mutableTuple.0), mutableTuple
  }
  
  receiveReadonly(arg: readonly [arc4.uint64, arc4.uint64, arc4.uint64]): uint64
  {
    return 3
  }
  
  receiveMutable(arg: arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>): uint64
  {
    return 3
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}