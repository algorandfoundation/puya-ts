{
    "name": "TuplesAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        34
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        77
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        39
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCA4IDEgMTYKCm1haW5fYmxvY2tAMDoKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo2CiAgICAvLyBjbGFzcyBUdXBsZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdANgoKbWFpbl9hYmlfcm91dGluZ0AyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjYKICAgIC8vIGNsYXNzIFR1cGxlc0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBwdXNoYnl0ZXMgMHgzN2U3Y2U4NyAvLyBtZXRob2QgInRlc3QodWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKICAgIHN3YXAKICAgIG1hdGNoIG1haW5fdGVzdF9yb3V0ZUAzCgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRANDoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEA1OgoKbWFpbl9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjYKICAgIC8vIGNsYXNzIFR1cGxlc0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAoKbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo6VHVwbGVzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMToKICAgIHJldHVybgoKbWFpbl90ZXN0X3JvdXRlQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6NwogICAgLy8gdGVzdChhOiBVaW50NjQsIGI6IFVpbnQ2NCwgYzogVWludDY0KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6NgogICAgLy8gY2xhc3MgVHVwbGVzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo3CiAgICAvLyB0ZXN0KGE6IFVpbnQ2NCwgYjogVWludDY0LCBjOiBVaW50NjQpIHsKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgdGVzdAogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo6VHVwbGVzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMQoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo2CiAgICAvLyBjbGFzcyBUdXBsZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIG1hdGNoIG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDcKCm1haW5fc3dpdGNoX2Nhc2VfZGVmYXVsdEA4OgoKbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDk6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMAoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo2CiAgICAvLyBjbGFzcyBUdXBsZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICA9PQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBfX2FsZ290c19fLmRlZmF1bHRDcmVhdGUKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6OlR1cGxlc0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMTEKCgovLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6OlR1cGxlc0FsZ28udGVzdChhOiBieXRlcywgYjogYnl0ZXMsIGM6IGJ5dGVzKSAtPiB2b2lkOgp0ZXN0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjcKICAgIC8vIHRlc3QoYTogVWludDY0LCBiOiBVaW50NjQsIGM6IFVpbnQ2NCkgewogICAgcHJvdG8gMyAwCgp0ZXN0X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6OAogICAgLy8gY29uc3QgcmVhZG9ubHlUdXBsZSA9IFthLCBiLCBjXSBhcyBjb25zdAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjEwCiAgICAvLyBjb25zdCBtdXRhYmxlVHVwbGU6IFtVaW50NjQsIFVpbnQ2NCwgVWludDY0XSA9IFthLCBiLCBjXQogICAgcHVzaGJ5dGVzIDB4CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6MTIKICAgIC8vIGNvbnN0IGFyYzRUdXBsZSA9IG5ldyBUdXBsZShhLCBiLCBjKQogICAgcHVzaGJ5dGVzIDB4CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBzd2FwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6MTQKICAgIC8vIHRoaXMucmVjZWl2ZVJlYWRvbmx5KHJlYWRvbmx5VHVwbGUpCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICBjYWxsc3ViIHJlY2VpdmVSZWFkb25seQogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6MTUKICAgIC8vIHRoaXMucmVjZWl2ZVJlYWRvbmx5KG11dGFibGVUdXBsZSkKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGludGNfMSAvLyA4CiAgICBleHRyYWN0MwogICAgc3dhcAogICAgZHVwCiAgICBpbnRjXzEgLy8gOAogICAgZHVwCiAgICBleHRyYWN0MwogICAgc3dhcAogICAgZHVwCiAgICBpbnRjXzMgLy8gMTYKICAgIGludGNfMSAvLyA4CiAgICBleHRyYWN0MwogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgY2FsbHN1YiByZWNlaXZlUmVhZG9ubHkKICAgIHBvcAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjE2CiAgICAvLyB0aGlzLnJlY2VpdmVSZWFkb25seShhcmM0VHVwbGUubmF0aXZlKQogICAgZGlnIDEKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzEgLy8gOAogICAgZXh0cmFjdDMKICAgIHN3YXAKICAgIGRpZyAyCiAgICBpbnRjXzEgLy8gOAogICAgZHVwCiAgICBleHRyYWN0MwogICAgc3dhcAogICAgdW5jb3ZlciAzCiAgICBpbnRjXzMgLy8gMTYKICAgIGludGNfMSAvLyA4CiAgICBleHRyYWN0MwogICAgdW5jb3ZlciAzCiAgICBzd2FwCiAgICB1bmNvdmVyIDMKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgcmVjZWl2ZVJlYWRvbmx5CiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czoxOAogICAgLy8gdGhpcy5yZWNlaXZlTXV0YWJsZShtdXRhYmxlVHVwbGUpCiAgICBjYWxsc3ViIHJlY2VpdmVNdXRhYmxlCiAgICBwb3AKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo6VHVwbGVzQWxnby5yZWNlaXZlUmVhZG9ubHkoYXJnLjA6IGJ5dGVzLCBhcmcuMTogYnl0ZXMsIGFyZy4yOiBieXRlcykgLT4gdWludDY0OgpyZWNlaXZlUmVhZG9ubHk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6MjgKICAgIC8vIHByaXZhdGUgcmVjZWl2ZVJlYWRvbmx5KGFyZzogcmVhZG9ubHkgW1VpbnQ2NCwgVWludDY0LCBVaW50NjRdKTogdWludDY0IHsKICAgIHByb3RvIDMgMQoKcmVjZWl2ZVJlYWRvbmx5X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6MjkKICAgIC8vIHJldHVybiBhcmcubGVuZ3RoCiAgICBwdXNoaW50IDMgLy8gMwogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjpUdXBsZXNBbGdvLnJlY2VpdmVNdXRhYmxlKGFyZzogYnl0ZXMpIC0+IHVpbnQ2NDoKcmVjZWl2ZU11dGFibGU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdHVwbGVzLmFsZ28udHM6MzIKICAgIC8vIHByaXZhdGUgcmVjZWl2ZU11dGFibGUoYXJnOiBbVWludDY0LCBVaW50NjQsIFVpbnQ2NF0pOiB1aW50NjQgewogICAgcHJvdG8gMSAxCgpyZWNlaXZlTXV0YWJsZV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3R1cGxlcy5hbGdvLnRzOjM0CiAgICAvLyByZXR1cm4gYXJnLmxlbmd0aAogICAgcHVzaGludCAzIC8vIDMKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy90dXBsZXMuYWxnby50czo6VHVwbGVzQWxnby5fX2FsZ290c19fLmRlZmF1bHRDcmVhdGUoKSAtPiB2b2lkOgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGU6CgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMDoKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAgBEDEbIhNBADA2GgCABDfnzodMjgEAAiJDMRkiEkQxGCITRDYaATYaAjYaA08CTwJPAogAGyRC/98xGSJMjgEAA0L/0zEYIhJEiAB4JEL/yIoDAIv9i/6L/4AAi/1Qi/5Qi/9QgACL/VCL/lCL/1BMTwRPBE8EiAA/SEkiI1hMSSNJWExJJSNYTwNPA08CiAAnSEsBIiNYTEsCI0lYTE8DJSNYTwNMTwNMTwJPAk8CiAAGSIgACEiJigMBgQOJigEBgQOJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}