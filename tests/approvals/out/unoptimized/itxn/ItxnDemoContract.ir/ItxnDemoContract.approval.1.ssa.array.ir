main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/itxn.algo.ts::ItxnDemoContract.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L7
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@11
    block@4: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test1()void" => block@5, method "test2()void" => block@6, method "test3()void" => block@7, method "test4()void" => block@8, * => block@9}
    block@5: // test1_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test1()
        let tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@6: // test2_route_L58
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test2()
        let tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@7: // test3_route_L95
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test3()
        let tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@8: // test4_route_L171
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test4()
        let tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@9: // switch_case_default_L7
        goto block@10
    block@10: // switch_case_next_L7
        goto block@15
    block@11: // bare_routing_L7
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {0u => block@12, * => block@13}
    block@12: // __algots__.defaultCreate_L7
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        tests/approvals/itxn.algo.ts::ItxnDemoContract.__algots__.defaultCreate()
        let tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@13: // switch_case_default_L7
        goto block@14
    block@14: // switch_case_next_L7
        goto block@15
    block@15: // after_if_else_L7
        let tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#5: bool = 0u
        goto block@16
    block@16: // after_inlined_tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#0 <- block@5, tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#1 <- block@6, tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#2 <- block@7, tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#3 <- block@8, tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#4 <- block@12, tests/approvals/itxn.algo.ts::ItxnDemoContract.__puya_arc4_router__%0#5 <- block@15)
        return tmp%0#0

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test1() -> void:
    block@0: // L10
        (app_global_put "name" "AST1")
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "name")
        (assert maybe_exists%0#0) // check GlobalState exists
        let assetParams%%param_ConfigAssetName_idx_0#0: bytes = maybe_value%0#0
        let assetParams%%param_ConfigAssetManager_idx_0#0: bytes[32] = (global CurrentApplicationAddress)
        let assetParams%%param_ConfigAssetReserve_idx_0#0: bytes[32] = (global CurrentApplicationAddress)
        (app_global_put "name" "AST2")
        itxn_begin
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) assetParams%%param_ConfigAssetName_idx_0#0)
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L23
        itxn_submit
        let asset1_txn.ConfigAssetName#0: bytes = (itxn ConfigAssetName)
        let asset1_txn.CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "name")
        (assert maybe_exists%1#0) // check GlobalState exists
        let assetParams%%param_ConfigAssetName_idx_0#1: bytes = maybe_value%1#0
        itxn_begin
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) assetParams%%param_ConfigAssetName_idx_0#1)
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L27
        itxn_submit
        let asset2_txn.ConfigAssetName#0: bytes = (itxn ConfigAssetName)
        let asset2_txn.CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
        let tmp%0#0: bool = (== asset1_txn.ConfigAssetName#0 "AST1")
        (assert tmp%0#0) // asset1_txn is correct
        let tmp%1#0: bool = (== asset2_txn.ConfigAssetName#0 "AST2")
        (assert tmp%1#0) // asset2_txn is correct
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset1_txn.CreatedAssetID#0)
        (assert check%0#0) // asset exists
        let tmp%2#0: bool = (== value%0#0 "AST1")
        (assert tmp%2#0) // created asset 1 is correct
        let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetName) asset2_txn.CreatedAssetID#0)
        (assert check%1#0) // asset exists
        let tmp%3#0: bool = (== value%1#0 "AST2")
        (assert tmp%3#0) // created asset 2 is correct
        itxn_begin
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L44
        itxn_next
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) "AST3")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L44
        itxn_submit
        let appCreateTxn.CreatedApplicationID#0: uint64 = (gitxn 0 CreatedApplicationID)
        let asset3_txn.ConfigAssetName#0: bytes = (itxn ConfigAssetName)
        let reinterpret_bool%0#0: bool = appCreateTxn.CreatedApplicationID#0
        (assert reinterpret_bool%0#0) // app is created
        let tmp%4#0: bool = (== asset3_txn.ConfigAssetName#0 "AST3")
        (assert tmp%4#0) // asset3_txn is correct
        itxn_begin
        let is_Note_count_gte_1%0#0: bool = (>= 1u 1u)
        goto is_Note_count_gte_1%0#0 ? block@5 : block@6
    block@5: // set_Note_0_to_0_L55
        ((itxn_field Note) "3rd")
        goto block@6
    block@6: // next_field_L55
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L55
        itxn_next
        let is_Note_count_gte_1%1#0: bool = (>= 1u 1u)
        goto is_Note_count_gte_1%1#0 ? block@8 : block@9
    block@8: // set_Note_0_to_0_L55
        ((itxn_field Note) "3rd")
        goto block@9
    block@9: // next_field_L55
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) "AST3")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@10
    block@10: // next_txn_L55
        itxn_submit
        return 

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test2() -> void:
    block@0: // L58
        let createAppParams%%param_OnCompletion_idx_0#2: uint64 = undefined
        let createAppParams%%param_ApplicationArgs_idx_2#3: bytes = undefined
        let reinterpret_bool%0#0: bool = (txn NumAppArgs)
        goto reinterpret_bool%0#0 ? block@1 : block@2
    block@1: // if_body_L60
        let createAppParams%%param_ApplicationArgs_idx_0#0: bytes = "1"
        let createAppParams%%param_ApplicationArgs_idx_1#0: bytes = "2"
        let createAppParams%%ApplicationArgs_length#0: uint64 = 2u
        let createAppParams%%param_OnCompletion_idx_0#0: uint64 = 0u
        let createAppParams%%OnCompletion_length#0: uint64 = 1u
        let createAppParams%%param_Note_idx_0#0: bytes = "with args param set"
        goto block@3
    block@2: // else_body_L69
        let createAppParams%%param_ApplicationArgs_idx_0#1: bytes = "3"
        let createAppParams%%param_ApplicationArgs_idx_1#1: bytes = "4"
        let createAppParams%%param_ApplicationArgs_idx_2#0: bytes = "5"
        let createAppParams%%ApplicationArgs_length#1: uint64 = 3u
        let createAppParams%%param_Note_idx_0#1: bytes = "no args param set"
        let createAppParams%%OnCompletion_length#1: uint64 = 0u
        goto block@3
    block@3: // after_if_else_L60
        let createAppParams%%param_Note_idx_0#2: bytes = Ï†(createAppParams%%param_Note_idx_0#0 <- block@1, createAppParams%%param_Note_idx_0#1 <- block@2)
        let createAppParams%%OnCompletion_length#2: uint64 = Ï†(createAppParams%%OnCompletion_length#0 <- block@1, createAppParams%%OnCompletion_length#1 <- block@2)
        let createAppParams%%param_OnCompletion_idx_0#1: uint64 = Ï†(createAppParams%%param_OnCompletion_idx_0#0 <- block@1, createAppParams%%param_OnCompletion_idx_0#2 <- block@2)
        let createAppParams%%param_ApplicationArgs_idx_0#3: bytes = Ï†(createAppParams%%param_ApplicationArgs_idx_0#0 <- block@1, createAppParams%%param_ApplicationArgs_idx_0#1 <- block@2)
        let createAppParams%%param_ApplicationArgs_idx_1#3: bytes = Ï†(createAppParams%%param_ApplicationArgs_idx_1#0 <- block@1, createAppParams%%param_ApplicationArgs_idx_1#1 <- block@2)
        let createAppParams%%ApplicationArgs_length#3: uint64 = Ï†(createAppParams%%ApplicationArgs_length#0 <- block@1, createAppParams%%ApplicationArgs_length#1 <- block@2)
        let createAppParams%%param_ApplicationArgs_idx_2#2: bytes = Ï†(createAppParams%%param_ApplicationArgs_idx_2#3 <- block@1, createAppParams%%param_ApplicationArgs_idx_2#0 <- block@2)
        itxn_begin
        ((itxn_field Note) createAppParams%%param_Note_idx_0#2)
        let is_OnCompletion_count_gte_1%0#0: bool = (>= createAppParams%%OnCompletion_length#2 1u)
        goto is_OnCompletion_count_gte_1%0#0 ? block@4 : block@5
    block@4: // set_OnCompletion_0_to_0_L77
        ((itxn_field OnCompletion) createAppParams%%param_OnCompletion_idx_0#1)
        goto block@5
    block@5: // next_field_L77
        ((itxn_field ApplicationArgs) createAppParams%%param_ApplicationArgs_idx_0#3)
        ((itxn_field ApplicationArgs) createAppParams%%param_ApplicationArgs_idx_1#3)
        let is_ApplicationArgs_count_gte_3%0#0: bool = (>= createAppParams%%ApplicationArgs_length#3 3u)
        goto is_ApplicationArgs_count_gte_3%0#0 ? block@6 : block@7
    block@6: // set_ApplicationArgs_2_to_2_L77
        ((itxn_field ApplicationArgs) createAppParams%%param_ApplicationArgs_idx_2#2)
        goto block@7
    block@7: // next_field_L77
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@8
    block@8: // next_txn_L77
        itxn_submit
        let createAppTxn.Note#0: bytes = (itxn Note)
        let tmp%0#0: bytes = ((itxnas ApplicationArgs) 0u)
        let tmp%1#0: bool = (== tmp%0#0 "1")
        (assert tmp%1#0) // correct args used 1
        let tmp%2#0: bytes = ((itxnas ApplicationArgs) 1u)
        let tmp%3#0: bool = (== tmp%2#0 "2")
        (assert tmp%3#0) // correct args used 2
        let tmp%4#0: uint64 = (txn NumAppArgs)
        let tmp%5#0: bool = (> tmp%4#0 1u)
        goto tmp%5#0 ? block@9 : block@11
    block@9: // if_body_L81
        itxn_begin
        ((itxn_field ApplicationArgs) "42")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@10
    block@10: // next_txn_L82
        itxn_submit
        let tmp%6#0: bytes = ((itxnas ApplicationArgs) 0u)
        let tmp%7#0: bool = (== tmp%6#0 "42")
        (assert tmp%7#0) // correct args used 2
        let tmp%8#0: bool = (== createAppTxn.Note#0 "with args param set")
        (assert tmp%8#0)
        goto block@11
    block@11: // after_if_else_L81
        return 

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test3() -> void:
    block@0: // L95
        itxn_begin
        ((itxn_field ApplicationArgs) "1")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L135
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "2")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L136
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "3")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L137
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "4")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L138
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "5")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L139
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "6")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L140
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "7")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L141
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "8")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@8
    block@8: // next_txn_L142
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "9")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@9
    block@9: // next_txn_L143
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "10")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@10
    block@10: // next_txn_L144
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "11")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@11
    block@11: // next_txn_L145
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "12")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@12
    block@12: // next_txn_L146
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "13")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@13
    block@13: // next_txn_L147
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "14")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@14
    block@14: // next_txn_L148
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "15")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@15
    block@15: // next_txn_L149
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "16")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@16
    block@16: // next_txn_L150
        itxn_submit
        let tmp%0#0: bytes = ((gitxnas 0 Logs) 0u)
        let tmp%1#0: bool = (== tmp%0#0 "1")
        (assert tmp%1#0)
        let tmp%2#0: bytes = ((gitxnas 1 Logs) 0u)
        let tmp%3#0: bool = (== tmp%2#0 "2")
        (assert tmp%3#0)
        let tmp%4#0: bytes = ((gitxnas 2 Logs) 0u)
        let tmp%5#0: bool = (== tmp%4#0 "3")
        (assert tmp%5#0)
        let tmp%6#0: bytes = ((gitxnas 3 Logs) 0u)
        let tmp%7#0: bool = (== tmp%6#0 "4")
        (assert tmp%7#0)
        let tmp%8#0: bytes = ((gitxnas 4 Logs) 0u)
        let tmp%9#0: bool = (== tmp%8#0 "5")
        (assert tmp%9#0)
        let tmp%10#0: bytes = ((gitxnas 5 Logs) 0u)
        let tmp%11#0: bool = (== tmp%10#0 "6")
        (assert tmp%11#0)
        let tmp%12#0: bytes = ((gitxnas 6 Logs) 0u)
        let tmp%13#0: bool = (== tmp%12#0 "7")
        (assert tmp%13#0)
        let tmp%14#0: bytes = ((gitxnas 7 Logs) 0u)
        let tmp%15#0: bool = (== tmp%14#0 "8")
        (assert tmp%15#0)
        let tmp%16#0: bytes = ((gitxnas 8 Logs) 0u)
        let tmp%17#0: bool = (== tmp%16#0 "9")
        (assert tmp%17#0)
        let tmp%18#0: bytes = ((gitxnas 9 Logs) 0u)
        let tmp%19#0: bool = (== tmp%18#0 "10")
        (assert tmp%19#0)
        let tmp%20#0: bytes = ((gitxnas 10 Logs) 0u)
        let tmp%21#0: bool = (== tmp%20#0 "11")
        (assert tmp%21#0)
        let tmp%22#0: bytes = ((gitxnas 11 Logs) 0u)
        let tmp%23#0: bool = (== tmp%22#0 "12")
        (assert tmp%23#0)
        let tmp%24#0: bytes = ((gitxnas 12 Logs) 0u)
        let tmp%25#0: bool = (== tmp%24#0 "13")
        (assert tmp%25#0)
        let tmp%26#0: bytes = ((gitxnas 13 Logs) 0u)
        let tmp%27#0: bool = (== tmp%26#0 "14")
        (assert tmp%27#0)
        let tmp%28#0: bytes = ((gitxnas 14 Logs) 0u)
        let tmp%29#0: bool = (== tmp%28#0 "15")
        (assert tmp%29#0)
        let tmp%30#0: bytes = ((itxnas Logs) 0u)
        let tmp%31#0: bool = (== tmp%30#0 "16")
        (assert tmp%31#0)
        return 

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test4() -> void:
    block@0: // L171
        let lotsOfBytes#0: bytes = (bzero 2044u)
        let tmp%0#0: bytes = (concat 0x80fc0f lotsOfBytes#0)
        let approval2#0: bytes = (concat tmp%0#0 0x48)
        let appTxn1%%param_ApprovalProgramPages_idx_1#0: bytes = approval2#0
        let appTxn1%%param_ApprovalProgramPages_idx_2#0: bytes = approval2#0
        let appTxn1%%param_ApprovalProgramPages_idx_3#0: bytes = approval2#0
        itxn_begin
        ((itxn_field ExtraProgramPages) 3u)
        ((itxn_field ApplicationArgs) "1")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) appTxn1%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) appTxn1%%param_ApprovalProgramPages_idx_2#0)
        ((itxn_field ApprovalProgramPages) appTxn1%%param_ApprovalProgramPages_idx_3#0)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L185
        itxn_submit
        let app1.ExtraProgramPages#0: uint64 = (itxn ExtraProgramPages)
        let app1.NumApprovalProgramPages#0: uint64 = (itxn NumApprovalProgramPages)
        let app1.NumClearStateProgramPages#0: uint64 = (itxn NumClearStateProgramPages)
        let tmp%1#0: bool = (== app1.ExtraProgramPages#0 3u)
        (assert tmp%1#0) // extra pages = 3
        let tmp%2#0: bool = (== app1.NumApprovalProgramPages#0 2u)
        (assert tmp%2#0) // approval pages = 2
        let tmp%3#0: bytes = ((itxnas ApprovalProgramPages) 0u)
        let tmp%4#0: bytes = (concat 0x098101 approval2#0)
        let length%0#0: uint64 = (len approval2#0)
        let is_out_of_bounds%0#0: bool = (>= 0u length%0#0)
        let bounded_index%0#0: uint64 = (select 0u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 3u length%0#0)
        let bounded_offset%0#0: uint64 = (select 3u length%0#0 is_out_of_bounds%1#0)
        let bounded_index%1#0: uint64 = (- length%0#0 bounded_offset%0#0)
        let end_before_start%0#0: bool = (< bounded_index%1#0 bounded_index%0#0)
        let end%0#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0)
        let tmp%5#0: bytes = (substring3 approval2#0 bounded_index%0#0 end%0#0)
        let tmp%6#0: bytes = (concat tmp%4#0 tmp%5#0)
        let tmp%7#0: bool = (== tmp%3#0 tmp%6#0)
        (assert tmp%7#0) // expected approval page 0
        let tmp%8#0: bytes = ((itxnas ApprovalProgramPages) 1u)
        let length%1#0: uint64 = (len approval2#0)
        let is_out_of_bounds%2#0: bool = (>= 3u length%1#0)
        let bounded_offset%1#0: uint64 = (select 3u length%1#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- length%1#0 bounded_offset%1#0)
        let tmp%9#0: bytes = (substring3 approval2#0 bounded_index%2#0 length%1#0)
        let tmp%10#0: bytes = (concat tmp%9#0 approval2#0)
        let tmp%11#0: bool = (== tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // expected approval page 1
        let tmp%12#0: bool = (== app1.NumClearStateProgramPages#0 1u)
        (assert tmp%12#0) // clear state pages = 1
        let tmp%13#0: bytes = ((itxnas ClearStateProgramPages) 0u)
        let tmp%14#0: bool = (== tmp%13#0 0x098101)
        (assert tmp%14#0) // expected clear state page
        return 

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.__algots__.defaultCreate() -> void:
    block@0: // L7
        return 

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.constructor() -> void:
    block@0: // L7
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L7
        (app_global_put "name" 0x)
        return 