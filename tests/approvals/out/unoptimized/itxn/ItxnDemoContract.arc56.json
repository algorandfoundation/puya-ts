{
    "name": "ItxnDemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test1",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bmFtZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        166,
                        184,
                        202,
                        220
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        428
                    ],
                    "errorMessage": "app is created"
                },
                {
                    "pc": [
                        1205
                    ],
                    "errorMessage": "approval pages = 2"
                },
                {
                    "pc": [
                        366,
                        373
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        358
                    ],
                    "errorMessage": "asset1_txn is correct"
                },
                {
                    "pc": [
                        362
                    ],
                    "errorMessage": "asset2_txn is correct"
                },
                {
                    "pc": [
                        432
                    ],
                    "errorMessage": "asset3_txn is correct"
                },
                {
                    "pc": [
                        249
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        171,
                        189,
                        207,
                        225
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        269,
                        318
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        1300
                    ],
                    "errorMessage": "clear state pages = 1"
                },
                {
                    "pc": [
                        593
                    ],
                    "errorMessage": "correct args used 1"
                },
                {
                    "pc": [
                        601,
                        637
                    ],
                    "errorMessage": "correct args used 2"
                },
                {
                    "pc": [
                        370
                    ],
                    "errorMessage": "created asset 1 is correct"
                },
                {
                    "pc": [
                        377
                    ],
                    "errorMessage": "created asset 2 is correct"
                },
                {
                    "pc": [
                        1265
                    ],
                    "errorMessage": "expected approval page 0"
                },
                {
                    "pc": [
                        1296
                    ],
                    "errorMessage": "expected approval page 1"
                },
                {
                    "pc": [
                        1306
                    ],
                    "errorMessage": "expected clear state page"
                },
                {
                    "pc": [
                        1201
                    ],
                    "errorMessage": "extra pages = 3"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAYFA+gHJhYDCYEBBwk2GgCwgQEEbmFtZQExBHVuaXQBMgRBU1QxBEFTVDIEQVNUMwEzATQBNQMzcmQTd2l0aCBhcmdzIHBhcmFtIHNldAI0MgIxMAIxMQIxMgIxMwIxNAIxNQIxNjEYQAADiASrMRsiE0EAcTYaAIAEICVPkYAE8ZCFJIAE35IPN4AEPUY0XE8EjgQAOAAmABQAAiJDMRkiEkQxGCITRIgDxYEBQv/tMRkiEkQxGCITRIgB7IEBQv/bMRkiEkQxGCITRIgBIYEBQv/JMRkiEkQxGCITRIgAHYEBQv+3MRkiTI4BAANC/6sxGCISRIgEH4EBQv+figAAIionBmciKmVEMgpJTgIyCklOAyonB2exsiqyKSWyIycEsiWyJiEEsiIlshAisgGztCaMALQ8IiplRLGLArIqiwGyKSWyIycEsiWyJiEEsiIlshAisgGztCa0PEyLACcGEkQnBxJETHEERCcGEkRxBEQnBxJEsSiyQiiyQCOyECKyAbaLArIqiwGyKSWyIycEsiUnCLImIQSyIiWyECKyAbO3AD20JkxEJwgSRLGBAUkPQQAEJwyyBSiyQiiyQCOyECKyAbaBAUkPQQAEJwyyBYsCsiqLAbIpJbIjJwSyJScIsiYhBLIiJbIQIrIBs4mKAAAiRwKAAEkigAAxG0EAgCuMACcFjAGBAowDIowGgQGMBCcNsbIFiwSBAQ9BAASLBrIZiwCyGosBshqLAyUPQQAEiwWyGiiyQiiyQCOyECKyAbO0BYwCIsUaKxJEgQHFGicFEkQxG4EBDUEAIrEnDrIaJLIZKLJCKLJAI7IQIrIBsyLFGicOEkSLAicNEkSJJwmMACcKjAEnC4wFJYwDgBFubyBhcmdzIHBhcmFtIHNldCKMBEL/bLErshokshkoskIpskAjshAisgG2KLJCKbJAJwWyGiSyGSOyECKyAbYoskIpskAnCbIaJLIZI7IQIrIBtiiyQimyQCcKshokshkjshAisgG2KLJCKbJAJwuyGiSyGSOyECKyAbYoskIpskCAATayGiSyGSOyECKyAbYoskIpskCAATeyGiSyGSOyECKyAbYoskIpskCAATiyGiSyGSOyECKyAbYoskIpskCAATmyGiSyGSOyECKyAbYoskIpskAnD7IaJLIZI7IQIrIBtiiyQimyQCcQshokshkjshAisgG2KLJCKbJAJxGyGiSyGSOyECKyAbYoskIpskAnErIaJLIZI7IQIrIBtiiyQimyQCcTshokshkjshAisgG2KLJCKbJAJxSyGiSyGSOyECKyAbYoskIpskAnFbIaJLIZI7IQIrIBsyLGADorEkQixgE6JwUSRCLGAjonCRJEIsYDOicKEkQixgQ6JwsSRCLGBTqAATYSRCLGBjqAATcSRCLGBzqAATgSRCLGCDqAATkSRCLGCTonDxJEIsYKOicQEkQixgs6JxESRCLGDDonEhJEIsYNOicTEkQixg46JxQSRCLFOicVEkSJgfwPr4ADgPwPTFCAAUhQRwNOAk4CsSWyOCuyGiSyGSiyQiiyQLJAskCyQCOyECKyAbO0OLRBTLRDTgIlEkSBAhJEIsVAKE8DSU4CUExJFSJLAQ8iSwJPAk1MJUsBDyVLAk8CTQlJSwIMTEsCTwJNSwJPAk8CUk8CTFBPAhJEgQHFQExJFSVLAQ8lSwJPAk1LAUwJSwJMTwJSTFASRIEBEkQixUIoEkSJiSqAAGeJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}