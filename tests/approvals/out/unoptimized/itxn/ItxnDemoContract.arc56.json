{
    "name": "ItxnDemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test1",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test5",
            "args": [
                {
                    "type": "application",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bmFtZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1441
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        180,
                        204,
                        222,
                        240,
                        258
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        466
                    ],
                    "errorMessage": "app is created"
                },
                {
                    "pc": [
                        1361
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        1251
                    ],
                    "errorMessage": "approval pages = 2"
                },
                {
                    "pc": [
                        1490
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        404,
                        411
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        396
                    ],
                    "errorMessage": "asset1_txn is correct"
                },
                {
                    "pc": [
                        400
                    ],
                    "errorMessage": "asset2_txn is correct"
                },
                {
                    "pc": [
                        470
                    ],
                    "errorMessage": "asset3_txn is correct"
                },
                {
                    "pc": [
                        287
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        185,
                        209,
                        227,
                        245,
                        263
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        307,
                        356
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        1346
                    ],
                    "errorMessage": "clear state pages = 1"
                },
                {
                    "pc": [
                        631
                    ],
                    "errorMessage": "correct args used 1"
                },
                {
                    "pc": [
                        639,
                        675
                    ],
                    "errorMessage": "correct args used 2"
                },
                {
                    "pc": [
                        408
                    ],
                    "errorMessage": "created asset 1 is correct"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "created asset 2 is correct"
                },
                {
                    "pc": [
                        1311
                    ],
                    "errorMessage": "expected approval page 0"
                },
                {
                    "pc": [
                        1342
                    ],
                    "errorMessage": "expected approval page 1"
                },
                {
                    "pc": [
                        1352
                    ],
                    "errorMessage": "expected clear state page"
                },
                {
                    "pc": [
                        1247
                    ],
                    "errorMessage": "extra pages = 3"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAYFA+gHJhcDCYEBBwk2GgCwgQEEbmFtZQExBHVuaXQBMgE0BEFTVDEEQVNUMgRBU1QzATMBNQVoZWxsbwMzcmQTd2l0aCBhcmdzIHBhcmFtIHNldAI0MgIxMAIxMQIxMgIxMwIxNAIxNQIxNjEYQAADiAVdMRsiE0EAkTYaAIAEICVPkYAE8ZCFJIAE35IPN4AEPUY0XIAEBkA8ZE8FjgUAUAA+ACwAGgACIkMxGSISRDEYIhNENhoBF8AyiASHgQFC/+cxGSISRDEYIhNEiAPNgQFC/9UxGSISRDEYIhNEiAH0gQFC/8MxGSISRDEYIhNEiAEhgQFC/7ExGSISRDEYIhNEiAAdgQFC/58xGSJMjgEAA0L/kzEYIhJEiASxgQFC/4eKAAAiKicHZyIqZUQyCklOAjIKSU4DKicIZ7GyKrIpJbIjJwSyJbImIQSyIiWyECKyAbO0JowAtDwiKmVEsYsCsiqLAbIpJbIjJwSyJbImIQSyIiWyECKyAbO0JrQ8TIsAJwcSRCcIEkRMcQREJwcSRHEERCcIEkSxKLJCKLJAI7IQIrIBtosCsiqLAbIpJbIjJwSyJScJsiYhBLIiJbIQIrIBs7cAPbQmTEQnCRJEsYEBSQ9BAAQnDbIFKLJCKLJAI7IQIrIBtoEBSQ9BAAQnDbIFiwKyKosBsiklsiMnBLIlJwmyJiEEsiIlshAisgGziYoAACJHAoAASSKAADEbQQCAK4wAJwWMAYECjAMijAaBAYwEJw6xsgWLBIEBD0EABIsGshmLALIaiwGyGosDJQ9BAASLBbIaKLJCKLJAI7IQIrIBs7QFjAIixRorEkSBAcUaJwUSRDEbgQENQQAisScPshokshkoskIoskAjshAisgGzIsUaJw8SRIsCJw4SRIknBhUWVwYCJwZQJwqMAIwBJwuMBSWMA4ARbm8gYXJncyBwYXJhbSBzZXQijARC/2SxK7IaJLIZKLJCKbJAI7IQIrIBtiiyQimyQCcFshokshkjshAisgG2KLJCKbJAJwqyGiSyGSOyECKyAbYoskIpskAnBrIaJLIZI7IQIrIBtiiyQimyQCcLshokshkjshAisgG2KLJCKbJAgAE2shokshkjshAisgG2KLJCKbJAgAE3shokshkjshAisgG2KLJCKbJAgAE4shokshkjshAisgG2KLJCKbJAgAE5shokshkjshAisgG2KLJCKbJAJxCyGiSyGSOyECKyAbYoskIpskAnEbIaJLIZI7IQIrIBtiiyQimyQCcSshokshkjshAisgG2KLJCKbJAJxOyGiSyGSOyECKyAbYoskIpskAnFLIaJLIZI7IQIrIBtiiyQimyQCcVshokshkjshAisgG2KLJCKbJAJxayGiSyGSOyECKyAbMixgA6KxJEIsYBOicFEkQixgI6JwoSRCLGAzonBhJEIsYEOicLEkQixgU6gAE2EkQixgY6gAE3EkQixgc6gAE4EkQixgg6gAE5EkQixgk6JxASRCLGCjonERJEIsYLOicSEkQixgw6JxMSRCLGDTonFBJEIsYOOicVEkQixTonFhJEiYH8D6+AA4D8D0xQgAFIUEcDTgJOArElsjgrshokshkoskIoskCyQLJAskAjshAisgGztDi0QUy0Q04CJRJEgQISRCLFQChPA0lOAlBMSRUiSwEPIksCTwJNTCVLAQ8lSwJPAk0JSUsCDExLAk8CTUsCTwJPAlJPAkxQTwISRIEBxUBMSRUlSwEPJUsCTwJNSwFMCUsCTE8CUkxQEkSBARJEIsVCKBJEiYoBAIv/cghEi/9MJwwVFlcGAicMUE4CsSEEsgiyB4EBshAisgG2gAQZcdGXshqACAAAAAAAAAABshpMshqyGCOyECKyAbO0PklXBABMVwAEgAQVH3x1EkQlSRJMSSKBCFgXgQESTwIQSwGBCElYFyEEEhBMSYEQWUxJFUxPAk8CUlcCACcMEhBEiYkqgABniQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}