contract HelloFactory
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  test_compile_contract(): void
  {
    compiled: CompiledContract{ approvalProgram: readonlytuple[bytes, bytes], clearStateProgram: readonlytuple[bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::Hello
    app: application = { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiled.approvalProgram, ClearStateProgramPages=compiled.clearStateProgram, GlobalNumUint=compiled.globalUints, GlobalNumByteSlice=compiled.globalBytes, LocalNumByteSlice=compiled.localBytes, LocalNumUint=compiled.localUints, ExtraProgramPages=compiled.extraProgramPages, ApplicationArgs=<tuple>[Method("helloCreate(string)void"), ARC4_ENCODE("hello", wtype=arc4.dynamic_array<arc4.byte>)])) }.itxn.CreatedApplicationID
    result: string = { itxn: (#0 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=app, OnCompletion=0, ApplicationArgs=<tuple>[Method("greet(string)string"), ARC4_ENCODE("world", wtype=arc4.dynamic_array<arc4.byte>)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#1 = #0.LastLog)), extract<0, 4>(#1) == 0x151f7c75], comment=Bytes has valid prefix))) }.returnValue
    assert(result == "hello world")
    result2: string = { itxn: (#2 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=app, ApplicationArgs=<tuple>[Method("greet(string)string"), ARC4_ENCODE("abi", wtype=arc4.dynamic_array<arc4.byte>)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#3 = #2.LastLog)), extract<0, 4>(#3) == 0x151f7c75], comment=Bytes has valid prefix))) }.returnValue
    assert(result2 == "hello abi")
    result3: string = { itxn: (#4 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=app, ApplicationArgs=<tuple>[Method("greet(string)string"), ARC4_ENCODE("stubbed", wtype=arc4.dynamic_array<arc4.byte>)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#5 = #4.LastLog)), extract<0, 4>(#5) == 0x151f7c75], comment=Bytes has valid prefix))) }.returnValue
    assert(result3 == "hello stubbed")
    result4: string = { itxn: (#6 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=app, ApplicationArgs=<tuple>[Method("sendGreetings((string,string))string"), new Greeting(name=(#7 = { name: "world", termination: "!" }).name, termination=#7.termination)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#8 = #6.LastLog)), extract<0, 4>(#8) == 0x151f7c75], comment=Bytes has valid prefix))) }.returnValue
    assert(result4 == "hello world!")
    { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=app, OnCompletion=5, ApplicationArgs=<tuple>[Method("delete()void")])) }
  }
  
  test_compile_contract_with_template(): void
  {
    compiled: CompiledContract{ approvalProgram: readonlytuple[bytes, bytes], clearStateProgram: readonlytuple[bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::HelloTemplate, GREETING="hey"
    helloApp: application = { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiled.approvalProgram, ClearStateProgramPages=compiled.clearStateProgram, GlobalNumUint=compiled.globalUints, GlobalNumByteSlice=compiled.globalBytes, LocalNumByteSlice=compiled.localBytes, LocalNumUint=compiled.localUints, ExtraProgramPages=compiled.extraProgramPages, ApplicationArgs=<tuple>[Method("create()void")])) }.itxn.CreatedApplicationID
    txn1: object{ itxn: inner_transaction_appl, returnValue: string } = { itxn: (#9 = { itxn: (#10 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=helloApp, OnCompletion=0, ApplicationArgs=<tuple>[Method("greet(string)string"), ARC4_ENCODE("world", wtype=arc4.dynamic_array<arc4.byte>)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#11 = #10.LastLog)), extract<0, 4>(#11) == 0x151f7c75], comment=Bytes has valid prefix))) }).itxn, returnValue: #9.returnValue }
    assert(txn1.returnValue == "hey world")
    txn2: object{ itxn: inner_transaction_appl, returnValue: string } = { itxn: (#12 = { itxn: (#13 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=helloApp, OnCompletion=0, ApplicationArgs=<tuple>[Method("sendGreetings((string,string))string"), new Greeting(name=(#14 = { name: "world", termination: "!" }).name, termination=#14.termination)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#15 = #13.LastLog)), extract<0, 4>(#15) == 0x151f7c75], comment=Bytes has valid prefix))) }).itxn, returnValue: #12.returnValue }
    assert(txn2.returnValue == "hey world!")
    { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=helloApp, OnCompletion=5, ApplicationArgs=<tuple>[Method("delete()void")])) }
  }
  
  test_compile_contract_with_template_and_custom_prefix(): void
  {
    compiled: CompiledContract{ approvalProgram: readonlytuple[bytes, bytes], clearStateProgram: readonlytuple[bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::HelloTemplateCustomPrefix, prefix=PRFX_, GREETING="bonjour"
    helloApp: application = { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiled.approvalProgram, ClearStateProgramPages=compiled.clearStateProgram, GlobalNumUint=compiled.globalUints, GlobalNumByteSlice=compiled.globalBytes, LocalNumByteSlice=compiled.localBytes, LocalNumUint=compiled.localUints, ExtraProgramPages=compiled.extraProgramPages, ApplicationArgs=<tuple>[Method("create()void")])) }.itxn.CreatedApplicationID
    { returnValue: result, itxn: _ }: object{ returnValue: string, itxn: inner_transaction_appl } = { returnValue: (#16 = { itxn: (#17 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=helloApp, OnCompletion=0, ApplicationArgs=<tuple>[Method("greet(string)string"), ARC4_ENCODE("world", wtype=arc4.dynamic_array<arc4.byte>)]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#18 = #17.LastLog)), extract<0, 4>(#18) == 0x151f7c75], comment=Bytes has valid prefix))) }).returnValue, itxn: #16.itxn }
    assert(result == "bonjour world")
    { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=helloApp, OnCompletion=5, ApplicationArgs=<tuple>[Method("delete()void")])) }
  }
  
  test_compile_contract_large(): void
  {
    compiled: CompiledContract{ approvalProgram: readonlytuple[bytes, bytes], clearStateProgram: readonlytuple[bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::LargeProgram
    largeApp: application = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiled.approvalProgram, ClearStateProgramPages=compiled.clearStateProgram, GlobalNumUint=compiled.globalUints, GlobalNumByteSlice=compiled.globalBytes, LocalNumByteSlice=compiled.localBytes, LocalNumUint=compiled.localUints, ExtraProgramPages=compiled.extraProgramPages)).CreatedApplicationID
    { returnValue: result, itxn: _ }: object{ returnValue: uint64, itxn: inner_transaction_appl } = { returnValue: (#19 = { itxn: (#20 = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=largeApp, OnCompletion=0, ApplicationArgs=<tuple>[Method("getBigBytesLength()uint64")]))), returnValue: ARC4_DECODE(reinterpret_cast<arc4.uint64>(checked_maybe(<tuple>[extract<4, 0>((#21 = #20.LastLog)), extract<0, 4>(#21) == 0x151f7c75], comment=Bytes has valid prefix))) }).returnValue, itxn: #19.itxn }
    assert(result == 4096)
    { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=largeApp, OnCompletion=5, ApplicationArgs=<tuple>[Method("delete()void")])) }
  }
  
  test_call_contract_with_transactions(): void
  {
    compiled: CompiledContract{ approvalProgram: readonlytuple[bytes, bytes], clearStateProgram: readonlytuple[bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::ReceivesTxns
    appId: application = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiled.approvalProgram, ClearStateProgramPages=compiled.clearStateProgram, GlobalNumUint=compiled.globalUints, GlobalNumByteSlice=compiled.globalBytes, LocalNumByteSlice=compiled.localBytes, LocalNumUint=compiled.localUints, ExtraProgramPages=compiled.extraProgramPages)).CreatedApplicationID
    assetCreate: inner_transaction_fields_acfg = create_inner_transaction(Fee=0, TypeEnum=3, ConfigAssetTotal=1, ConfigAssetUnitName="T", ConfigAssetName="TEST")
    { itxn: (#22 = submit_txn(assetCreate, create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, OnCompletion=0, ApplicationArgs=<tuple>[Method("receivesAnyTxn(txn)uint64")])).1), returnValue: ARC4_DECODE(reinterpret_cast<arc4.uint64>(checked_maybe(<tuple>[extract<4, 0>((#23 = #22.LastLog)), extract<0, 4>(#23) == 0x151f7c75], comment=Bytes has valid prefix))) }
    appCall: inner_transaction_fields_appl = create_inner_transaction(Fee=0, TypeEnum=6, ApplicationID=appId, ApplicationArgs=<tuple>[Method("getOne()uint64")])
    { itxn: (#24 = submit_txn(appCall, create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, OnCompletion=0, ApplicationArgs=<tuple>[Method("receivesAnyTxn(txn)uint64")])).1), returnValue: ARC4_DECODE(reinterpret_cast<arc4.uint64>(checked_maybe(<tuple>[extract<4, 0>((#25 = #24.LastLog)), extract<0, 4>(#25) == 0x151f7c75], comment=Bytes has valid prefix))) }
    { itxn: (#26 = submit_txn(assetCreate, create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, OnCompletion=0, ApplicationArgs=<tuple>[Method("receivesAssetConfig(acfg)byte[]")])).1), returnValue: ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(checked_maybe(<tuple>[extract<4, 0>((#27 = #26.LastLog)), extract<0, 4>(#27) == 0x151f7c75], comment=Bytes has valid prefix))) }
    pay: inner_transaction_fields_pay = create_inner_transaction(Fee=0, TypeEnum=1, Receiver=checked_maybe(app_params_get<AppAddress>(appId), comment=application exists), Amount=100000, Sender=checked_maybe(app_params_get<AppAddress>(global<CurrentApplicationID>()), comment=application exists))
    { itxn: submit_txn(assetCreate, pay, create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, OnCompletion=0, ApplicationArgs=<tuple>[Method("receivesAssetConfigAndPay(acfg,pay)void")])).2 }
  }
  
  test_call_contract_with_reference_types(): void
  {
    compiled: CompiledContract{ approvalProgram: readonlytuple[bytes, bytes], clearStateProgram: readonlytuple[bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/precompiled-apps.algo.ts::ReceivesReferenceTypes
    appId: application = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiled.approvalProgram, ClearStateProgramPages=compiled.clearStateProgram, GlobalNumUint=compiled.globalUints, GlobalNumByteSlice=compiled.globalBytes, LocalNumByteSlice=compiled.localBytes, LocalNumUint=compiled.localUints, ExtraProgramPages=compiled.extraProgramPages)).CreatedApplicationID
    asset: asset = submit_txn(create_inner_transaction(Fee=0, TypeEnum=3, ConfigAssetTotal=1, ConfigAssetUnitName="T", ConfigAssetName="TEST")).CreatedAssetID
    result: object{ itxn: inner_transaction_appl } = { itxn: (#28 = { itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, ApplicationID=appId, OnCompletion=0, ApplicationArgs=<tuple>[Method("receivesReferenceTypes(application,account,asset)void"), 1, 1, 0], Applications=<tuple>[global<CurrentApplicationID>()], Assets=<tuple>[asset], Accounts=<tuple>[txn<Sender>()])) }).itxn }
    assert(result.itxn.Logs[0] == reinterpret_cast<bytes>(reinterpret_cast<bytes[32]>(global<CurrentApplicationAddress>())))
    assert(result.itxn.Logs[1] == reinterpret_cast<bytes>(reinterpret_cast<bytes[32]>(txn<Sender>())))
    assert(result.itxn.Logs[2] == checked_maybe(asset_params_get<AssetName>(asset), comment=asset exists))
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}