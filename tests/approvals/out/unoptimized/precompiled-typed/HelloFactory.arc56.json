{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template_and_custom_prefix",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_transactions",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_reference_types",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        674,
                        733,
                        790,
                        890,
                        1321,
                        1493,
                        1920,
                        2152,
                        2582,
                        2629,
                        2680
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        146,
                        163,
                        180,
                        197,
                        214,
                        231
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2685,
                        2690
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        2999
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        259
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        151,
                        168,
                        185,
                        202,
                        219,
                        236
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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igEBIihlRClMUCtQi/8iWYv/JFmL/08CTwJSVwIAUIv/JFmL/xWL/08CTwJSVwIAUImIAAUoJwRniSgpZ4myQCiyQCKyGSOyECKyAbO3AD1JsSoVFlcGAipQJwSyGrIaIrIZshgjshAisgGztD5JVwQATFcABCkSRFcCAIANYm9uam91ciB3b3JsZBJEsScGshqBBbIZshgjshAisgGzibEisjgisjYisjcisjUisjQrskIoskKAdQogAgABMRsiE0EARjYaAIAEAr8wz4AEJDeNPE8CjgIAFAACIkMxGYEFEkQxGCITRIgAQCNC/+0xGSISRDEYIhNEiAAqFoAEFR98dUxQsCNC/9IxGSJMjgEAA0L/xjEYIhJEiAAPI0L/u4GAIK+JiP/4FYmJibJAKLJAIrIZI7IQIrIBs7Q9SbGABAK/MM+yGiKyGbIYI7IQIrIBs7Q+SVcEAExXAAQpEkQXgYAgEkSxJwayGoEFshmyGCOyECKyAbOJigAAKLEisjgisjYisjcisjUisjQrskIoskKAtgIKIAMAAQMmAQQVH3x1MRsiE0EApjYaAIAEj2iS74AEnNh944AE02bIaYAEgbZzUk8EjgQAaQBPACgAAiJDMRkiEkQxGCITRDEWgQIJSTgQJBJEMRYjCUk4ECMSRIgAxCNC/9kxGSISRDEYIhNEMRYjCUk4ECQSRIgAoUkVFlcGAkxQKExQsCNC/7IxGSISRDEYIhNEMRYjCYgAOBYoTFCwI0L/mDEZIhJEMRgiE0SIACAWKExQsCNC/4IxGSJMjgEAA0L/djEYIhJEiABoI0L/ayOJigEBgABJi/84EEkkEkEAFov/ODxJjABBAAWLAIwAiYv/OCFC//aLAoEGEkEAFov/OD1JjAFBAAWLAYwAiYv/OBhC//YijACJigEBi/84F4mKAgCL/jgQJBJEi/84ECMSRImJskAoskAishkjshAisgGztD2MALEnB7ImJwiyJSSyIoEDshAisgG2iwAnDrIaIrIZshgjshAisgGztwE+VwAEKRJEiwCxgASPaJLvshqyGCOyECKyAbaLACcOshoishmyGCOyECKyAbO3AT5XAAQpEkSxJweyJicIsiUksiKBA7IQIrIBtosAgATTZshpshoishmyGCOyECKyAbO3AT5XAAQpEkSLAHIIRDIIcghETLEnB7ImJwiyJSSyIoEDshAisgG2TLIAgaCNBrIIsgckshAisgG2iwCABIG2c1KyGiKyGbIYI7IQIrIBs4mxIrI4IrI2IrI3IrI1IrI0K7JCKLJCgHAKIAIAATEbIhNBADk2GgCABIM9EhJMjgEAAiJDMRkiEkQxGCITRDYaARfAMjYaAhfAHDYaAxfAME8CTwJPAogAGyNC/9YxGSJMjgEAA0L/yjEYIhJEiAAXI0L/v4oDAIv9cghEsIv+sIv/cQREsImJskAoskAishkjshAisgGztD2xJweyJicIsiUksiKBA7IQIrIBs7Q8SU4CsTIITDEAshyyMLIygASDPRISshqAAQGyGoABAbIagAEAshoishmyGCOyECKyAbMixToyChJEJMU6MQASRIECxTpMcQREEkSJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}