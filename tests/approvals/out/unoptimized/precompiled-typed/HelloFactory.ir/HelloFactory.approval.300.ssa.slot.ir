main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L13
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@11
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_compile_contract()void" => block@3, method "test_compile_contract_with_template()void" => block@4, method "test_compile_contract_with_template_and_custom_prefix()void" => block@5, method "test_compile_contract_large()void" => block@6, method "test_call_contract_with_transactions()void" => block@7, method "test_call_contract_with_reference_types()void" => block@8, * => block@9}
    block@3: // test_compile_contract_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@4: // test_compile_contract_with_template_route_L53
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@5: // test_compile_contract_with_template_and_custom_prefix_route_L78
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template_and_custom_prefix()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@6: // test_compile_contract_large_route_L95
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_large()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@7: // test_call_contract_with_transactions_route_L111
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_transactions()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@8: // test_call_contract_with_reference_types_route_L154
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_reference_types()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#5: bool = 1u
        goto block@16
    block@9: // switch_case_default_L13
        goto block@10
    block@10: // switch_case_next_L13
        goto block@15
    block@11: // bare_routing_L13
        let tmp%27#0: uint64 = (txn OnCompletion)
        switch tmp%27#0 {0u => block@12, * => block@13}
    block@12: // __algots__.defaultCreate_L13
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (== tmp%28#0 0u)
        (assert tmp%29#0) // can only call when creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.__algots__.defaultCreate()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#6: bool = 1u
        goto block@16
    block@13: // switch_case_default_L13
        goto block@14
    block@14: // switch_case_next_L13
        goto block@15
    block@15: // after_if_else_L13
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#7: bool = 0u
        goto block@16
    block@16: // after_inlined_tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#0 <- block@3, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#1 <- block@4, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#2 <- block@5, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#3 <- block@6, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#4 <- block@7, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#5 <- block@8, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#6 <- block@12, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#7 <- block@15)
        return tmp%0#0

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract() -> void:
    block@0: // L14
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%0#0
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiADAAECJgQIZ3JlZXRpbmcABBUffHUBIDEYQAADiAEFMRsiE0EArzYaAIAEAJIlroAEJDeNPIAEoOgYcoAE0KKCAIAEUYC6IE8FjgUAaQBXAEUAIgACIkMxGSISRDEYIhNENhoBiACLSRUWVwYCTFAqTFCwI0L/3zEZIhJEMRgiE0Q2GgFXAgCIAFhJFRZXBgJMUCpMULAjQv+8MRmBBBJEMRgiE0SIADkjQv+qMRmBBRJEMRgiE0SIACYjQv+YMRkiEkQxGCISRDYaAVcCAIgAByNC/4FC/32KAQAoi/9niYmJigEBIihlRClMUCtQi/9QiYoBASIoZUQpTFArUIv/IlmL/yRZi/9PAk8CUlcCAFCL/yRZi/8Vi/9PAk8CUlcCAFCJKClniQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L17
        itxn_submit
        let tmp%1#0: uint64 = (gitxn 0 CreatedApplicationID)
        let app#0: uint64 = tmp%1#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        let aggregate%length%1#1: uint64 = (len "world")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "world")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%2#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L21
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%3#0
        let tmp%6#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let result#0: string = tmp%6#0
        let tmp%7#0: bool = (== result#0 "hello world")
        (assert tmp%7#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        let aggregate%length%2#1: uint64 = (len "abi")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "abi")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let tmp%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%8#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L27
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%9#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = tmp%9#0
        let tmp%12#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let result2#0: string = tmp%12#0
        let greetItxn.LastLog#0: bytes = (itxn LastLog)
        let tmp%13#0: bool = (== result2#0 "hello abi")
        (assert tmp%13#0)
        let aggregate%length%3#1: uint64 = (len 0x68656c6c6f20616269)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x68656c6c6f20616269)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let tmp%14#0: bytes = (concat 0x151f7c75 encoded%0#0)
        let tmp%15#0: bool = (== greetItxn.LastLog#0 tmp%14#0)
        (assert tmp%15#0)
        itxn_begin
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        let aggregate%length%4#1: uint64 = (len "stubbed")
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 "stubbed")
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let tmp%16#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#1
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%16#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L35
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%17#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%18#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%19#0: bool = (== tmp%18#0 0x151f7c75)
        (assert tmp%19#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = tmp%17#0
        let tmp%20#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        let result3#0: string = tmp%20#0
        let tmp%21#0: bool = (== result3#0 "hello stubbed")
        (assert tmp%21#0)
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        let aggregate%length%5#1: uint64 = (len 0x21)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 0x21)
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%5#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#1
        let aggregate%length%6#1: uint64 = (len "world")
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 "world")
        let aggregate%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let aggregate%as_bytes%7#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%head%0#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%6#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%1#1 aggregate%as_Encoded(len+utf8[])%6#1)
        let aggregate%concat%1#1: bytes = (concat aggregate%concat%0#1 encoded%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#1
        let tmp%22#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1
        let tmp%23#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%22#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%23#0
        ((itxn_field ApplicationArgs) method "sendGreetings((string,string))string")
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L41
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%24#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%25#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%26#0: bool = (== tmp%25#0 0x151f7c75)
        (assert tmp%26#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = tmp%24#0
        let tmp%27#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%3#0)
        let result4#0: string = tmp%27#0
        let tmp%28#0: bool = (== result4#0 "hello world!")
        (assert tmp%28#0)
        itxn_begin
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L48
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template() -> void:
    block@0: // L53
        itxn_begin
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiADAAECJgUIZ3JlZXRpbmcABBUffHUBIANoZXkxGEAAA4gA+DEbIhNBAKk2GgCABExcYbqABCQ3jTyABKDoGHKABNCiggCABFGAuiBPBY4FAGkAVwBFACIAAiJDMRkiEkQxGCITRDYaAYgAfkkVFlcGAkxQKkxQsCNC/98xGSISRDEYIhNENhoBVwIAiABLSRUWVwYCTFAqTFCwI0L/vDEZgQQSRDEYIhNEiAAsI0L/qjEZgQUSRDEYIhNEiAAZI0L/mDEZIhJEMRgiEkSIAAcjQv+HQv+DiYmJigEBIihlRClMUCtQi/9QiYoBASIoZUQpTFArUIv/IlmL/yRZi/9PAk8CUlcCAFCL/yRZi/8Vi/9PAk8CUlcCAFCJiAAFKCcEZ4koKWeJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L56
        itxn_submit
        let tmp%0#0: uint64 = (gitxn 0 CreatedApplicationID)
        let helloApp#0: uint64 = tmp%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = helloApp#0
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L58
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%2#0
        let tmp%5#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let txn1.returnValue#0: string = tmp%5#0
        let tmp%6#0: bool = (== txn1.returnValue#0 "hey world")
        (assert tmp%6#0)
        let aggregate%length%1#1: uint64 = (len 0x21)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x21)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%length%2#1: uint64 = (len "world")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "world")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let aggregate%as_bytes%3#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%head%0#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%1#1 aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%concat%1#1: bytes = (concat aggregate%concat%0#1 encoded%0#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#1
        let tmp%7#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1
        let greeting#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%7#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = helloApp#0
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 greeting#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 greeting#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 greeting#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 greeting#0 2u)
        let aggregate%len%0#1: uint64 = (len greeting#0)
        let aggregate%substring3%1#1: bytes = (substring3 greeting#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let tuple_item%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#1
        let aggregate%length%3#1: uint64 = (len values%0#0)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 values%0#0)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let aggregate%as_bytes%6#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%head%2#1: bytes = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%head%3#1: bytes = (concat aggregate%head%2#1 aggregate%offset_as_uint16%3#1)
        let aggregate%concat%2#1: bytes = (concat aggregate%head%3#1 aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%concat%3#1: bytes = (concat aggregate%concat%2#1 tuple_item%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%3#1
        let tmp%8#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#1
        let tmp%9#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%8#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%9#0
        ((itxn_field ApplicationArgs) method "sendGreetings((string,string))string")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L66
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = tmp%10#0
        let tmp%13#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let txn2.returnValue#0: string = tmp%13#0
        let tmp%14#0: bool = (== txn2.returnValue#0 "hey world!")
        (assert tmp%14#0)
        itxn_begin
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = helloApp#0
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L73
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template_and_custom_prefix() -> void:
    block@0: // L78
        itxn_begin
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiADAAECJgUIZ3JlZXRpbmcABBUffHUBIAdib25qb3VyMRhAAAOIAPgxGyITQQCpNhoAgARMXGG6gAQkN408gASg6BhygATQooIAgARRgLogTwWOBQBpAFcARQAiAAIiQzEZIhJEMRgiE0Q2GgGIAH5JFRZXBgJMUCpMULAjQv/fMRkiEkQxGCITRDYaAVcCAIgAS0kVFlcGAkxQKkxQsCNC/7wxGYEEEkQxGCITRIgALCNC/6oxGYEFEkQxGCITRIgAGSNC/5gxGSISRDEYIhJEiAAHI0L/h0L/g4mJiYoBASIoZUQpTFArUIv/UImKAQEiKGVEKUxQK1CL/yJZi/8kWYv/TwJPAlJXAgBQi/8kWYv/FYv/TwJPAlJXAgBQiYgABSgnBGeJKClniQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L81
        itxn_submit
        let tmp%0#0: uint64 = (gitxn 0 CreatedApplicationID)
        let helloApp#0: uint64 = tmp%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = helloApp#0
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = tmp%1#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L83
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // Bytes has valid prefix
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%2#0
        let tmp%5#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let result#0: string = tmp%5#0
        let tmp%6#0: bool = (== result#0 "bonjour world")
        (assert tmp%6#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = helloApp#0
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L90
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_large() -> void:
    block@0: // L95
        itxn_begin
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAExGyITQQBGNhoAgAQCvzDPgAQkN408TwKOAgAUAAIiQzEZgQUSRDEYIhNEiABAI0L/7TEZIhJEMRgiE0SIACoWgAQVH3x1TFCwI0L/0jEZIkyOAQADQv/GMRgiEkSIAA8jQv+7gYAgr4mI//gViYmJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L98
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let largeApp#0: uint64 = tmp%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = largeApp#0
        ((itxn_field ApplicationArgs) method "getBigBytesLength()uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L100
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = tmp%1#0
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let result#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (== result#0 4096u)
        (assert tmp%5#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = largeApp#0
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L106
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_transactions() -> void:
    block@0: // L111
        itxn_begin
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiADAAEDJgEEFR98dTEbIhNBAKY2GgCABI9oku+ABJzYfeOABNNmyGmABIG2c1JPBI4EAGkATwAoAAIiQzEZIhJEMRgiE0QxFoECCUk4ECQSRDEWIwlJOBAjEkSIAMQjQv/ZMRkiEkQxGCITRDEWIwlJOBAkEkSIAKFJFRZXBgJMUChMULAjQv+yMRkiEkQxGCITRDEWIwmIADgWKExQsCNC/5gxGSISRDEYIhNEiAAgFihMULAjQv+CMRkiTI4BAANC/3YxGCISRIgAaCNC/2sjiYoBAYAASYv/OBBJJBJBABaL/zg8SYwAQQAFiwCMAImL/zghQv/2iwKBBhJBABaL/zg9SYwBQQAFiwGMAImL/zgYQv/2IowAiYoBAYv/OBeJigIAi/44ECQSRIv/OBAjEkSJiQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L114
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let appId#0: uint64 = tmp%0#0
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L123
        itxn_next
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = appId#0
        ((itxn_field ApplicationArgs) method "receivesAnyTxn(txn)uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L122
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let appCall%%param_ApplicationID_idx_0#0: uint64 = appId#0
        itxn_begin
        ((itxn_field ApplicationArgs) method "getOne()uint64")
        ((itxn_field ApplicationID) appCall%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L134
        itxn_next
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = appId#0
        ((itxn_field ApplicationArgs) method "receivesAnyTxn(txn)uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L132
        itxn_submit
        let awst_tmp%1#0: bytes = (gitxn 1 LastLog)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // Bytes has valid prefix
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L139
        itxn_next
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = appId#0
        ((itxn_field ApplicationArgs) method "receivesAssetConfig(acfg)byte[]")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L137
        itxn_submit
        let awst_tmp%2#0: bytes = (gitxn 1 LastLog)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // Bytes has valid prefix
        let (value%0#0: account, check%0#0: bool) = ((app_params_get AppAddress) appId#0)
        (assert check%0#0) // application exists
        let pay%%param_Receiver_idx_0#0: account = value%0#0
        let tmp%13#0: uint64 = (global CurrentApplicationID)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) tmp%13#0)
        (assert check%1#0) // application exists
        let pay%%param_Sender_idx_0#0: account = value%1#0
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@8
    block@8: // next_txn_L150
        itxn_next
        ((itxn_field Sender) pay%%param_Sender_idx_0#0)
        ((itxn_field Amount) 100000u)
        ((itxn_field Receiver) pay%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        goto block@9
    block@9: // next_txn_L150
        itxn_next
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = appId#0
        ((itxn_field ApplicationArgs) method "receivesAssetConfigAndPay(acfg,pay)void")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@10
    block@10: // next_txn_L148
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_reference_types() -> void:
    block@0: // L154
        itxn_begin
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CiACAAExGyITQQA5NhoAgASDPRISTI4BAAIiQzEZIhJEMRgiE0Q2GgEXwDI2GgIXwBw2GgMXwDBPAk8CTwKIABsjQv/WMRkiTI4BAANC/8oxGCISRIgAFyNC/7+KAwCL/XIIRLCL/rCL/3EERLCJiQ==)
        (itxn_field ApprovalProgramPages)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L157
        itxn_submit
        let tmp%0#0: uint64 = (itxn CreatedApplicationID)
        let appId#0: uint64 = tmp%0#0
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L159
        itxn_submit
        let tmp%1#0: uint64 = (itxn CreatedAssetID)
        let asset#0: uint64 = tmp%1#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = appId#0
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let inner_txn_params%2%%param_Applications_idx_0#0: uint64 = tmp%2#0
        let inner_txn_params%2%%param_Assets_idx_0#0: uint64 = asset#0
        let tmp%3#0: account = (txn Sender)
        let inner_txn_params%2%%param_Accounts_idx_0#0: account = tmp%3#0
        ((itxn_field Accounts) inner_txn_params%2%%param_Accounts_idx_0#0)
        ((itxn_field Assets) inner_txn_params%2%%param_Assets_idx_0#0)
        ((itxn_field Applications) inner_txn_params%2%%param_Applications_idx_0#0)
        ((itxn_field ApplicationArgs) method "receivesReferenceTypes(application,account,asset)void")
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L167
        itxn_submit
        let tmp%4#0: bytes = ((itxnas Logs) 0u)
        let reinterpret_bytes[32]%0#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%4#0 reinterpret_bytes[32]%0#0)
        (assert tmp%5#0)
        let tmp%6#0: bytes = ((itxnas Logs) 1u)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txn Sender)
        let tmp%7#0: bool = (== tmp%6#0 reinterpret_bytes[32]%1#0)
        (assert tmp%7#0)
        let tmp%8#0: bytes = ((itxnas Logs) 2u)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%9#0: bool = (== tmp%8#0 value%0#0)
        (assert tmp%9#0)
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.__algots__.defaultCreate() -> void:
    block@0: // L13
        return 