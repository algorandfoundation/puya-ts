{
    "hints": {
        "test_compile_contract()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_compile_contract_with_template()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_compile_contract_with_template_and_custom_prefix()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_compile_contract_large()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_call_contract_with_transactions()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_call_contract_with_reference_types()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDYgMgogICAgYnl0ZWNibG9jayAweCAweDE1MWY3Yzc1IGJhc2U2NChDb0VCUXc9PSkgIndvcmxkIiAweGQwYTI4MjAwIDB4MjQzNzhkM2MgIlRFU1QiICJUIiAiaGVsbG8iICJhYmkiICJzdHViYmVkIiAweDRjNWM2MWJhIDB4OWNkODdkZTMKCm1haW5fYmxvY2tAMDoKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEzCiAgICAvLyBjbGFzcyBIZWxsb0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMQoKbWFpbl9hYmlfcm91dGluZ0AyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTMKICAgIC8vIGNsYXNzIEhlbGxvRmFjdG9yeSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIHB1c2hieXRlcyAweDJhMTc5OTVjIC8vIG1ldGhvZCAidGVzdF9jb21waWxlX2NvbnRyYWN0KCl2b2lkIgogICAgcHVzaGJ5dGVzIDB4ZTMyNTRiYzkgLy8gbWV0aG9kICJ0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZSgpdm9pZCIKICAgIHB1c2hieXRlcyAweGUyYjdjNjkyIC8vIG1ldGhvZCAidGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXgoKXZvaWQiCiAgICBwdXNoYnl0ZXMgMHgwMjk0N2NhMiAvLyBtZXRob2QgInRlc3RfY29tcGlsZV9jb250cmFjdF9sYXJnZSgpdm9pZCIKICAgIHB1c2hieXRlcyAweDQ5NWUwMDEwIC8vIG1ldGhvZCAidGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zKCl2b2lkIgogICAgcHVzaGJ5dGVzIDB4Mjc1MTllN2IgLy8gbWV0aG9kICJ0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF9yZWZlcmVuY2VfdHlwZXMoKXZvaWQiCiAgICB1bmNvdmVyIDYKICAgIG1hdGNoIG1haW5fdGVzdF9jb21waWxlX2NvbnRyYWN0X3JvdXRlQDMgbWFpbl90ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9yb3V0ZUA0IG1haW5fdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXhfcm91dGVANSBtYWluX3Rlc3RfY29tcGlsZV9jb250cmFjdF9sYXJnZV9yb3V0ZUA2IG1haW5fdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX3JvdXRlQDcgbWFpbl90ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF9yZWZlcmVuY2VfdHlwZXNfcm91dGVAOAoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDk6CgptYWluX3N3aXRjaF9jYXNlX25leHRAMTA6CgptYWluX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMwogICAgLy8gY2xhc3MgSGVsbG9GYWN0b3J5IGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKCm1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo6SGVsbG9GYWN0b3J5Ll9fcHV5YV9hcmM0X3JvdXRlcl9fQDE2OgogICAgcmV0dXJuCgptYWluX3Rlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlc19yb3V0ZUA4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTM4CiAgICAvLyB0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF9yZWZlcmVuY2VfdHlwZXMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlcwogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjpIZWxsb0ZhY3RvcnkuX19wdXlhX2FyYzRfcm91dGVyX19AMTYKCm1haW5fdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX3JvdXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5NQogICAgLy8gdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF90cmFuc2FjdGlvbnMKICAgIGludGNfMSAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo6SGVsbG9GYWN0b3J5Ll9fcHV5YV9hcmM0X3JvdXRlcl9fQDE2CgptYWluX3Rlc3RfY29tcGlsZV9jb250cmFjdF9sYXJnZV9yb3V0ZUA2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NzkKICAgIC8vIHRlc3RfY29tcGlsZV9jb250cmFjdF9sYXJnZSgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9jb21waWxlX2NvbnRyYWN0X2xhcmdlCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OkhlbGxvRmFjdG9yeS5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxNgoKbWFpbl90ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9hbmRfY3VzdG9tX3ByZWZpeF9yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjIKICAgIC8vIHRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX2FuZF9jdXN0b21fcHJlZml4KCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9hbmRfY3VzdG9tX3ByZWZpeAogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjpIZWxsb0ZhY3RvcnkuX19wdXlhX2FyYzRfcm91dGVyX19AMTYKCm1haW5fdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjQ1CiAgICAvLyB0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZSgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGUKICAgIGludGNfMSAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo6SGVsbG9GYWN0b3J5Ll9fcHV5YV9hcmM0X3JvdXRlcl9fQDE2CgptYWluX3Rlc3RfY29tcGlsZV9jb250cmFjdF9yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTQKICAgIC8vIHRlc3RfY29tcGlsZV9jb250cmFjdCgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9jb21waWxlX2NvbnRyYWN0CiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OkhlbGxvRmFjdG9yeS5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxNgoKbWFpbl9iYXJlX3JvdXRpbmdAMTE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMwogICAgLy8gY2xhc3MgSGVsbG9GYWN0b3J5IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIG1hdGNoIG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEyCgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRAMTM6CgptYWluX3N3aXRjaF9jYXNlX25leHRAMTQ6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxNQoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMTI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMwogICAgLy8gY2xhc3MgSGVsbG9GYWN0b3J5IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICA9PQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBfX2FsZ290c19fLmRlZmF1bHRDcmVhdGUKICAgIGludGNfMSAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo6SGVsbG9GYWN0b3J5Ll9fcHV5YV9hcmM0X3JvdXRlcl9fQDE2CgoKLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OkhlbGxvRmFjdG9yeS50ZXN0X2NvbXBpbGVfY29udHJhY3QoKSAtPiB2b2lkOgp0ZXN0X2NvbXBpbGVfY29udHJhY3Q6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNAogICAgLy8gdGVzdF9jb21waWxlX2NvbnRyYWN0KCkgewogICAgcHJvdG8gMCAwCiAgICBieXRlY18wIC8vICIiCgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE3LTE5CiAgICAvLyBjb25zdCBhcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSh7CiAgICAvLyAgIGFyZ3M6IFsnaGVsbG8nXSwKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTgKICAgIC8vIGFyZ3M6IFsnaGVsbG8nXSwKICAgIGJ5dGVjIDggLy8gImhlbGxvIgogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWMgOCAvLyAiaGVsbG8iCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE3LTE5CiAgICAvLyBjb25zdCBhcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSh7CiAgICAvLyAgIGFyZ3M6IFsnaGVsbG8nXSwKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgcHVzaGJ5dGVzIDB4MDA5MjI1YWUgLy8gbWV0aG9kICJoZWxsb0NyZWF0ZShzdHJpbmcpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTUKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoSGVsbG8pCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBFeHRyYVByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgTG9jYWxOdW1VaW50CiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBMb2NhbE51bUJ5dGVTbGljZQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1VaW50CiAgICBieXRlY18yIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgYnl0ZWNfMCAvLyAweAogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgYmFzZTY0KENpQURBQUVDSmdJSVozSmxaWFJwYm1jQU1SaEFBQU9JQU1veEd5SVRRUUNrTmhvQWdBUUFraVd1Z0FRa040MDhnQVNnNkJoeWdBVFFvb0lBVHdTT0JBQmFBRWdBTmdBQ0lrTXhHU0lTUkRFWUloTkVOaG9CU1NKWkl3c2tDRXNCRlJKRVZ3SUFpQUJwU1JVV1Z3WUNURkNBQkJVZmZIVk1VTEFqUXYvTE1SbUJCQkpFTVJnaUUwU0lBRVVqUXYrNU1SbUJCUkpFTVJnaUUwU0lBRElqUXYrbk1Sa2lFa1F4R0NJU1JEWWFBVWtpV1NNTEpBaExBUlVTUkZjQ0FJZ0FCeU5DLzRSQy80Q0tBUUFvaS85bmlZbUppZ0VCSWlobFJDbE1VSUFCSUZDTC8xQ0pLQ2xuaVE9PSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE3LTE5CiAgICAvLyBjb25zdCBhcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSh7CiAgICAvLyAgIGFyZ3M6IFsnaGVsbG8nXSwKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfbmV4dF90eG5AMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE3LTE5CiAgICAvLyBjb25zdCBhcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSh7CiAgICAvLyAgIGFyZ3M6IFsnaGVsbG8nXSwKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgaXR4bl9zdWJtaXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE5CiAgICAvLyB9KS5pdHhuLmNyZWF0ZWRBcHAKICAgIGdpdHhuIDAgQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE3LTE5CiAgICAvLyBjb25zdCBhcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSh7CiAgICAvLyAgIGFyZ3M6IFsnaGVsbG8nXSwKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjIxLTI0CiAgICAvLyBjb25zdCByZXN1bHQgPSBjb21waWxlZC5jYWxsLmdyZWV0KHsKICAgIC8vICAgYXJnczogWyd3b3JsZCddLAogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjIyCiAgICAvLyBhcmdzOiBbJ3dvcmxkJ10sCiAgICBieXRlY18zIC8vICJ3b3JsZCIKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjXzMgLy8gIndvcmxkIgogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoyMS0yNAogICAgLy8gY29uc3QgcmVzdWx0ID0gY29tcGlsZWQuY2FsbC5ncmVldCh7CiAgICAvLyAgIGFyZ3M6IFsnd29ybGQnXSwKICAgIC8vICAgYXBwSWQ6IGFwcCwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY29tcGlsZV9jb250cmFjdF9uZXh0X3R4bkAyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjEtMjQKICAgIC8vIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNiAvLyBvbiBlcnJvcjogaW52YWxpZCBhcnJheSBsZW5ndGggaGVhZGVyCiAgICBpbnRjXzEgLy8gMQogICAgKgogICAgaW50Y18zIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQuZHluYW1pY19hcnJheTxhcmM0LnVpbnQ4PgogICAgZXh0cmFjdCAyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjI1CiAgICAvLyBhc3NlcnQocmVzdWx0ID09PSAnaGVsbG8gd29ybGQnKQogICAgcHVzaGJ5dGVzICJoZWxsbyB3b3JsZCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjI3LTMwCiAgICAvLyBjb25zdCByZXN1bHQyID0gYWJpQ2FsbChIZWxsby5wcm90b3R5cGUuZ3JlZXQsIHsKICAgIC8vICAgYXBwSWQ6IGFwcCwKICAgIC8vICAgYXJnczogWydhYmknXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoyOAogICAgLy8gYXBwSWQ6IGFwcCwKICAgIGZyYW1lX2RpZyAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoyOQogICAgLy8gYXJnczogWydhYmknXSwKICAgIGJ5dGVjIDkgLy8gImFiaSIKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjIDkgLy8gImFiaSIKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjctMzAKICAgIC8vIGNvbnN0IHJlc3VsdDIgPSBhYmlDYWxsKEhlbGxvLnByb3RvdHlwZS5ncmVldCwgewogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gICBhcmdzOiBbJ2FiaSddLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGJ5dGVjIDQgLy8gbWV0aG9kICJncmVldChzdHJpbmcpc3RyaW5nIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY29tcGlsZV9jb250cmFjdF9uZXh0X3R4bkAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjctMzAKICAgIC8vIGNvbnN0IHJlc3VsdDIgPSBhYmlDYWxsKEhlbGxvLnByb3RvdHlwZS5ncmVldCwgewogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gICBhcmdzOiBbJ2FiaSddLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYgLy8gb24gZXJyb3I6IGludmFsaWQgYXJyYXkgbGVuZ3RoIGhlYWRlcgogICAgaW50Y18xIC8vIDEKICAgICoKICAgIGludGNfMyAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBhcmM0LmR5bmFtaWNfYXJyYXk8YXJjNC51aW50OD4KICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozMgogICAgLy8gYXNzZXJ0KHJlc3VsdDIgPT09ICdoZWxsbyBhYmknKQogICAgcHVzaGJ5dGVzICJoZWxsbyBhYmkiCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozNC0zNwogICAgLy8gY29uc3QgcmVzdWx0MyA9IGFiaUNhbGwoSGVsbG9TdHViYmVkLnByb3RvdHlwZS5ncmVldCwgewogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gICBhcmdzOiBbJ3N0dWJiZWQnXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozNQogICAgLy8gYXBwSWQ6IGFwcCwKICAgIGZyYW1lX2RpZyAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozNgogICAgLy8gYXJnczogWydzdHViYmVkJ10sCiAgICBieXRlYyAxMCAvLyAic3R1YmJlZCIKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjIDEwIC8vICJzdHViYmVkIgogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozNC0zNwogICAgLy8gY29uc3QgcmVzdWx0MyA9IGFiaUNhbGwoSGVsbG9TdHViYmVkLnByb3RvdHlwZS5ncmVldCwgewogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gICBhcmdzOiBbJ3N0dWJiZWQnXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfbmV4dF90eG5ANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjM0LTM3CiAgICAvLyBjb25zdCByZXN1bHQzID0gYWJpQ2FsbChIZWxsb1N0dWJiZWQucHJvdG90eXBlLmdyZWV0LCB7CiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyAgIGFyZ3M6IFsnc3R1YmJlZCddLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYgLy8gb24gZXJyb3I6IGludmFsaWQgYXJyYXkgbGVuZ3RoIGhlYWRlcgogICAgaW50Y18xIC8vIDEKICAgICoKICAgIGludGNfMyAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBhcmM0LmR5bmFtaWNfYXJyYXk8YXJjNC51aW50OD4KICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozOAogICAgLy8gYXNzZXJ0KHJlc3VsdDMgPT09ICdoZWxsbyBzdHViYmVkJykKICAgIHB1c2hieXRlcyAiaGVsbG8gc3R1YmJlZCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjQwLTQyCiAgICAvLyBjb21waWxlZC5jYWxsLmRlbGV0ZSh7CiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NDEKICAgIC8vIGFwcElkOiBhcHAsCiAgICBmcmFtZV9kaWcgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NDAtNDIKICAgIC8vIGNvbXBpbGVkLmNhbGwuZGVsZXRlKHsKICAgIC8vICAgYXBwSWQ6IGFwcCwKICAgIC8vIH0pCiAgICBieXRlYyA1IC8vIG1ldGhvZCAiZGVsZXRlKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfbmV4dF90eG5ANToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjQwLTQyCiAgICAvLyBjb21waWxlZC5jYWxsLmRlbGV0ZSh7CiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyB9KQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjpIZWxsb0ZhY3RvcnkudGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGUoKSAtPiB2b2lkOgp0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZToKCnRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo0OAogICAgLy8gY29uc3QgaGVsbG9BcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSgpLml0eG4uY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgYnl0ZWMgMTEgLy8gbWV0aG9kICJjcmVhdGUoKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NDYKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoSGVsbG9UZW1wbGF0ZSwgeyB0ZW1wbGF0ZVZhcnM6IHsgR1JFRVRJTkc6ICdoZXknIH0gfSkKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEV4dHJhUHJvZ3JhbVBhZ2VzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBMb2NhbE51bVVpbnQKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIExvY2FsTnVtQnl0ZVNsaWNlCiAgICBpbnRjXzEgLy8gMQogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEdsb2JhbE51bVVpbnQKICAgIGJ5dGVjXzIgLy8gYmFzZTY0KENvRUJRdz09KQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBieXRlY18wIC8vIDB4CiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIHB1c2hieXRlcyBiYXNlNjQoQ2lBQ0FBRW1Bd2huY21WbGRHbHVad0FEYUdWNU1SaEFBQU9JQUxJeEd5SVRRUUNUTmhvQWdBUk1YR0c2Z0FRa040MDhnQVNnNkJoeWdBVFFvb0lBVHdTT0JBQmJBRWtBTndBQ0lrTXhHU0lTUkRFWUloTkVOaG9CU1NKWkl3dUJBZ2hMQVJVU1JGY0NBSWdBVUVrVkZsY0dBa3hRZ0FRVkgzeDFURkN3STBML3lqRVpnUVFTUkRFWUloTkVpQUFzSTBML3VERVpnUVVTUkRFWUloTkVpQUFaSTBML3BqRVpJaEpFTVJnaUVrU0lBQWNqUXYrVlF2K1JpWW1KaWdFQklpaGxSQ2xNVUlBQklGQ0wvMUNKaUFBRUtDcG5pU2dwWjRrPSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjQ4CiAgICAvLyBjb25zdCBoZWxsb0FwcCA9IGNvbXBpbGVkLmNhbGwuY3JlYXRlKCkuaXR4bi5jcmVhdGVkQXBwCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX25leHRfdHhuQDE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo0OAogICAgLy8gY29uc3QgaGVsbG9BcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSgpLml0eG4uY3JlYXRlZEFwcAogICAgaXR4bl9zdWJtaXQKICAgIGdpdHhuIDAgQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIGR1cAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NTAtNTMKICAgIC8vIGNvbnN0IHR4biA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo1MQogICAgLy8gYXJnczogWyd3b3JsZCddLAogICAgYnl0ZWNfMyAvLyAid29ybGQiCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlY18zIC8vICJ3b3JsZCIKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NTAtNTMKICAgIC8vIGNvbnN0IHR4biA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX25leHRfdHhuQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo1MC01MwogICAgLy8gY29uc3QgdHhuID0gY29tcGlsZWQuY2FsbC5ncmVldCh7CiAgICAvLyAgIGFyZ3M6IFsnd29ybGQnXSwKICAgIC8vICAgYXBwSWQ6IGhlbGxvQXBwLAogICAgLy8gfSkKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYgLy8gb24gZXJyb3I6IGludmFsaWQgYXJyYXkgbGVuZ3RoIGhlYWRlcgogICAgaW50Y18xIC8vIDEKICAgICoKICAgIGludGNfMyAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBhcmM0LmR5bmFtaWNfYXJyYXk8YXJjNC51aW50OD4KICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo1NQogICAgLy8gYXNzZXJ0KHR4bi5yZXR1cm5WYWx1ZSA9PT0gJ2hleSB3b3JsZCcpCiAgICBwdXNoYnl0ZXMgImhleSB3b3JsZCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjU3LTU5CiAgICAvLyBjb21waWxlZC5jYWxsLmRlbGV0ZSh7CiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICBieXRlYyA1IC8vIG1ldGhvZCAiZGVsZXRlKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9uZXh0X3R4bkAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NTctNTkKICAgIC8vIGNvbXBpbGVkLmNhbGwuZGVsZXRlKHsKICAgIC8vICAgYXBwSWQ6IGhlbGxvQXBwLAogICAgLy8gfSkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo6SGVsbG9GYWN0b3J5LnRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX2FuZF9jdXN0b21fcHJlZml4KCkgLT4gdm9pZDoKdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXg6Cgp0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9hbmRfY3VzdG9tX3ByZWZpeF9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjUKICAgIC8vIGNvbnN0IGhlbGxvQXBwID0gY29tcGlsZWQuY2FsbC5jcmVhdGUoKS5pdHhuLmNyZWF0ZWRBcHAKICAgIGl0eG5fYmVnaW4KICAgIGJ5dGVjIDExIC8vIG1ldGhvZCAiY3JlYXRlKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjYzCiAgICAvLyBjb25zdCBjb21waWxlZCA9IGNvbXBpbGVBcmM0KEhlbGxvVGVtcGxhdGVDdXN0b21QcmVmaXgsIHsgdGVtcGxhdGVWYXJzOiB7IEdSRUVUSU5HOiAnYm9uam91cicgfSwgdGVtcGxhdGVWYXJzUHJlZml4OiAnUFJGWF8nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBFeHRyYVByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgTG9jYWxOdW1VaW50CiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBMb2NhbE51bUJ5dGVTbGljZQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1VaW50CiAgICBieXRlY18yIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgYnl0ZWNfMCAvLyAweAogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgYmFzZTY0KENpQUNBQUVtQXdobmNtVmxkR2x1WndBSFltOXVhbTkxY2pFWVFBQURpQUN5TVJzaUUwRUFrellhQUlBRVRGeGh1b0FFSkRlTlBJQUVvT2dZY29BRTBLS0NBRThFamdRQVd3QkpBRGNBQWlKRE1Sa2lFa1F4R0NJVFJEWWFBVWtpV1NNTGdRSUlTd0VWRWtSWEFnQ0lBRkJKRlJaWEJnSk1VSUFFRlI5OGRVeFFzQ05DLzhveEdZRUVFa1F4R0NJVFJJZ0FMQ05DLzdneEdZRUZFa1F4R0NJVFJJZ0FHU05DLzZZeEdTSVNSREVZSWhKRWlBQUhJMEwvbFVML2tZbUppWW9CQVNJb1pVUXBURkNBQVNCUWkvOVFpWWdBQkNncVo0a29LV2VKKQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgYnl0ZWNfMCAvLyAweAogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjUKICAgIC8vIGNvbnN0IGhlbGxvQXBwID0gY29tcGlsZWQuY2FsbC5jcmVhdGUoKS5pdHhuLmNyZWF0ZWRBcHAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXhfbmV4dF90eG5AMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjY1CiAgICAvLyBjb25zdCBoZWxsb0FwcCA9IGNvbXBpbGVkLmNhbGwuY3JlYXRlKCkuaXR4bi5jcmVhdGVkQXBwCiAgICBpdHhuX3N1Ym1pdAogICAgZ2l0eG4gMCBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgZHVwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo2Ny03MAogICAgLy8gY29uc3QgeyByZXR1cm5WYWx1ZTogcmVzdWx0IH0gPSBjb21waWxlZC5jYWxsLmdyZWV0KHsKICAgIC8vICAgYXJnczogWyd3b3JsZCddLAogICAgLy8gICBhcHBJZDogaGVsbG9BcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjgKICAgIC8vIGFyZ3M6IFsnd29ybGQnXSwKICAgIGJ5dGVjXzMgLy8gIndvcmxkIgogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMyAvLyAid29ybGQiCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjY3LTcwCiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXN1bHQgfSA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBieXRlYyA0IC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX2FuZF9jdXN0b21fcHJlZml4X25leHRfdHhuQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo2Ny03MAogICAgLy8gY29uc3QgeyByZXR1cm5WYWx1ZTogcmVzdWx0IH0gPSBjb21waWxlZC5jYWxsLmdyZWV0KHsKICAgIC8vICAgYXJnczogWyd3b3JsZCddLAogICAgLy8gICBhcHBJZDogaGVsbG9BcHAsCiAgICAvLyB9KQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNiAvLyBvbiBlcnJvcjogaW52YWxpZCBhcnJheSBsZW5ndGggaGVhZGVyCiAgICBpbnRjXzEgLy8gMQogICAgKgogICAgaW50Y18zIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQuZHluYW1pY19hcnJheTxhcmM0LnVpbnQ4PgogICAgZXh0cmFjdCAyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjcyCiAgICAvLyBhc3NlcnQocmVzdWx0ID09PSAnYm9uam91ciB3b3JsZCcpCiAgICBwdXNoYnl0ZXMgImJvbmpvdXIgd29ybGQiCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo3NC03NgogICAgLy8gY29tcGlsZWQuY2FsbC5kZWxldGUoewogICAgLy8gICBhcHBJZDogaGVsbG9BcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgYnl0ZWMgNSAvLyBtZXRob2QgImRlbGV0ZSgpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXhfbmV4dF90eG5AMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjc0LTc2CiAgICAvLyBjb21waWxlZC5jYWxsLmRlbGV0ZSh7CiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OkhlbGxvRmFjdG9yeS50ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2UoKSAtPiB2b2lkOgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2U6Cgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2VfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjgyCiAgICAvLyBjb25zdCBsYXJnZUFwcCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo4MAogICAgLy8gY29uc3QgY29tcGlsZWQgPSBjb21waWxlQXJjNChMYXJnZVByb2dyYW0pCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBFeHRyYVByb2dyYW1QYWdlcwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgTG9jYWxOdW1VaW50CiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBMb2NhbE51bUJ5dGVTbGljZQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1VaW50CiAgICBieXRlY18yIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgYnl0ZWNfMCAvLyAweAogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgYmFzZTY0KENpQUNBQUV4R3lJVFFRQkdOaG9BZ0FRQ3Z6RFBnQVFrTjQwOFR3S09BZ0FVQUFJaVF6RVpnUVVTUkRFWUloTkVpQUJBSTBMLzdURVpJaEpFTVJnaUUwU0lBQ29XZ0FRVkgzeDFURkN3STBMLzBqRVpJa3lPQVFBRFF2L0dNUmdpRWtTSUFBOGpRdis3Z1lBZ3I0bUkvL2dWaVltSikKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjgyCiAgICAvLyBjb25zdCBsYXJnZUFwcCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY29tcGlsZV9jb250cmFjdF9sYXJnZV9uZXh0X3R4bkAxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6ODIKICAgIC8vIGNvbnN0IGxhcmdlQXBwID0gY29tcGlsZWQuYmFyZUNyZWF0ZSgpLmNyZWF0ZWRBcHAKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBcHBsaWNhdGlvbklECiAgICBkdXAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjg0LTg2CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXN1bHQgfSA9IGNvbXBpbGVkLmNhbGwuZ2V0QmlnQnl0ZXNMZW5ndGgoewogICAgLy8gICBhcHBJZDogbGFyZ2VBcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgcHVzaGJ5dGVzIDB4MDJiZjMwY2YgLy8gbWV0aG9kICJnZXRCaWdCeXRlc0xlbmd0aCgpdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2VfbmV4dF90eG5AMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjg0LTg2CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXN1bHQgfSA9IGNvbXBpbGVkLmNhbGwuZ2V0QmlnQnl0ZXNMZW5ndGgoewogICAgLy8gICBhcHBJZDogbGFyZ2VBcHAsCiAgICAvLyB9KQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQudWludDY0CiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo4OAogICAgLy8gYXNzZXJ0KHJlc3VsdCA9PT0gNDA5NikKICAgIHB1c2hpbnQgNDA5NiAvLyA0MDk2CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5MC05MgogICAgLy8gY29tcGlsZWQuY2FsbC5kZWxldGUoewogICAgLy8gICBhcHBJZDogbGFyZ2VBcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgYnl0ZWMgNSAvLyBtZXRob2QgImRlbGV0ZSgpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jb21waWxlX2NvbnRyYWN0X2xhcmdlX25leHRfdHhuQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5MC05MgogICAgLy8gY29tcGlsZWQuY2FsbC5kZWxldGUoewogICAgLy8gICBhcHBJZDogbGFyZ2VBcHAsCiAgICAvLyB9KQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjpIZWxsb0ZhY3RvcnkudGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zKCkgLT4gdm9pZDoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OTUKICAgIC8vIHRlc3RfY2FsbF9jb250cmFjdF93aXRoX3RyYW5zYWN0aW9ucygpIHsKICAgIHByb3RvIDAgMAogICAgYnl0ZWNfMCAvLyAiIgoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5OAogICAgLy8gY29uc3QgYXBwSWQgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OTYKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoUmVjZWl2ZXNUeG5zKQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRXh0cmFQcm9ncmFtUGFnZXMKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIExvY2FsTnVtVWludAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgTG9jYWxOdW1CeXRlU2xpY2UKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEdsb2JhbE51bUJ5dGVTbGljZQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtVWludAogICAgYnl0ZWNfMiAvLyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDaUFEQUFFREpnRUVGUjk4ZFRFYkloTkJBS1kyR2dDQUJJOW9rdStBQkp6WWZlT0FCTk5teUdtQUJJRzJjMUpQQkk0RUFHa0FUd0FvQUFJaVF6RVpJaEpFTVJnaUUwUXhGb0VDQ1VrNEVDUVNSREVXSXdsSk9CQWpFa1NJQU1RalF2L1pNUmtpRWtReEdDSVRSREVXSXdsSk9CQWtFa1NJQUtGSkZSWlhCZ0pNVUNoTVVMQWpRdit5TVJraUVrUXhHQ0lUUkRFV0l3bUlBRGdXS0V4UXNDTkMvNWd4R1NJU1JERVlJaE5FaUFBZ0ZpaE1VTEFqUXYrQ01Sa2lUSTRCQUFOQy8zWXhHQ0lTUklnQWFDTkMvMnNqaVlvQkFZQUFTWXYvT0JCSkpCSkJBQmFML3pnOFNZd0FRUUFGaXdDTUFJbUwvemdoUXYvMml3S0JCaEpCQUJhTC96ZzlTWXdCUVFBRml3R01BSW1ML3pnWVF2LzJJb3dBaVlvQkFZdi9PQmVKaWdJQWkvNDRFQ1FTUkl2L09CQWpFa1NKaVE9PSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjk4CiAgICAvLyBjb25zdCBhcHBJZCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3RyYW5zYWN0aW9uc19uZXh0X3R4bkAxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OTgKICAgIC8vIGNvbnN0IGFwcElkID0gY29tcGlsZWQuYmFyZUNyZWF0ZSgpLmNyZWF0ZWRBcHAKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBcHBsaWNhdGlvbklECiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwNi0xMDkKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBbnlUeG4oewogICAgLy8gICBhcmdzOiBbYXNzZXRDcmVhdGVdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDMKICAgIC8vIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgYnl0ZWMgNiAvLyAiVEVTVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDIKICAgIC8vIHVuaXROYW1lOiAnVCcsCiAgICBieXRlYyA3IC8vICJUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDEKICAgIC8vIHRvdGFsOiAxLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAwLTEwNAogICAgLy8gY29uc3QgYXNzZXRDcmVhdGUgPSBpdHhuLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgdG90YWw6IDEsCiAgICAvLyAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gfSkKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3RyYW5zYWN0aW9uc19uZXh0X3R4bkAyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTA2LTEwOQogICAgLy8gY29tcGlsZWQuY2FsbC5yZWNlaXZlc0FueVR4bih7CiAgICAvLyAgIGFyZ3M6IFthc3NldENyZWF0ZV0sCiAgICAvLyAgIGFwcElkLAogICAgLy8gfSkKICAgIGl0eG5fbmV4dAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTA4CiAgICAvLyBhcHBJZCwKICAgIGZyYW1lX2RpZyAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDYtMTA5CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQW55VHhuKHsKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlXSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgYnl0ZWMgMTIgLy8gbWV0aG9kICJyZWNlaXZlc0FueVR4bih0eG4pdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF90cmFuc2FjdGlvbnNfbmV4dF90eG5AMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwNi0xMDkKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBbnlUeG4oewogICAgLy8gICBhcmdzOiBbYXNzZXRDcmVhdGVdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgZ2l0eG4gMSBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBzd2FwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQudWludDY0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMTIKICAgIC8vIGFwcElkLAogICAgZnJhbWVfZGlnIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjExNi0xMTkKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBbnlUeG4oewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2FwcENhbGxdLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjExMwogICAgLy8gYXBwQXJnczogW21ldGhvZFNlbGVjdG9yKFJlY2VpdmVzVHhucy5wcm90b3R5cGUuZ2V0T25lKV0sCiAgICBwdXNoYnl0ZXMgMHg4ZjY4OTJlZiAvLyBtZXRob2QgImdldE9uZSgpdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTExLTExNAogICAgLy8gY29uc3QgYXBwQ2FsbCA9IGl0eG4uYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFwcEFyZ3M6IFttZXRob2RTZWxlY3RvcihSZWNlaXZlc1R4bnMucHJvdG90eXBlLmdldE9uZSldLAogICAgLy8gfSkKICAgIGludGNfMiAvLyA2CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3RyYW5zYWN0aW9uc19uZXh0X3R4bkA0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTE2LTExOQogICAgLy8gY29tcGlsZWQuY2FsbC5yZWNlaXZlc0FueVR4bih7CiAgICAvLyAgIGFwcElkLAogICAgLy8gICBhcmdzOiBbYXBwQ2FsbF0sCiAgICAvLyB9KQogICAgaXR4bl9uZXh0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMTcKICAgIC8vIGFwcElkLAogICAgZnJhbWVfZGlnIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjExNi0xMTkKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBbnlUeG4oewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2FwcENhbGxdLAogICAgLy8gfSkKICAgIGJ5dGVjIDEyIC8vIG1ldGhvZCAicmVjZWl2ZXNBbnlUeG4odHhuKXVpbnQ2NCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX25leHRfdHhuQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMTYtMTE5CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQW55VHhuKHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthcHBDYWxsXSwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgZ2l0eG4gMSBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBzd2FwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQudWludDY0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMjEtMTI0CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWcoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlXSwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDMKICAgIC8vIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgYnl0ZWMgNiAvLyAiVEVTVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDIKICAgIC8vIHVuaXROYW1lOiAnVCcsCiAgICBieXRlYyA3IC8vICJUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDEKICAgIC8vIHRvdGFsOiAxLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAwLTEwNAogICAgLy8gY29uc3QgYXNzZXRDcmVhdGUgPSBpdHhuLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgdG90YWw6IDEsCiAgICAvLyAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gfSkKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3RyYW5zYWN0aW9uc19uZXh0X3R4bkA2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTIxLTEyNAogICAgLy8gY29tcGlsZWQuY2FsbC5yZWNlaXZlc0Fzc2V0Q29uZmlnKHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthc3NldENyZWF0ZV0sCiAgICAvLyB9KQogICAgaXR4bl9uZXh0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMjIKICAgIC8vIGFwcElkLAogICAgZnJhbWVfZGlnIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEyMS0xMjQKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBc3NldENvbmZpZyh7CiAgICAvLyAgIGFwcElkLAogICAgLy8gICBhcmdzOiBbYXNzZXRDcmVhdGVdLAogICAgLy8gfSkKICAgIHB1c2hieXRlcyAweGQzNjZjODY5IC8vIG1ldGhvZCAicmVjZWl2ZXNBc3NldENvbmZpZyhhY2ZnKWJ5dGVbXSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX25leHRfdHhuQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMjEtMTI0CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWcoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlXSwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgZ2l0eG4gMSBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBzd2FwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2IC8vIG9uIGVycm9yOiBpbnZhbGlkIGFycmF5IGxlbmd0aCBoZWFkZXIKICAgIGludGNfMSAvLyAxCiAgICAqCiAgICBpbnRjXzMgLy8gMgogICAgKwogICAgc3dhcAogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBhcmM0LmR5bmFtaWNfYXJyYXk8YXJjNC51aW50OD4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEyNwogICAgLy8gcmVjZWl2ZXI6IGFwcElkLmFkZHJlc3MsCiAgICBmcmFtZV9kaWcgMAogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTI5CiAgICAvLyBzZW5kZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICBzd2FwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzItMTM1CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWdBbmRQYXkoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlLCBwYXldLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwMwogICAgLy8gYXNzZXROYW1lOiAnVEVTVCcsCiAgICBieXRlYyA2IC8vICJURVNUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwMgogICAgLy8gdW5pdE5hbWU6ICdUJywKICAgIGJ5dGVjIDcgLy8gIlQiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwMQogICAgLy8gdG90YWw6IDEsCiAgICBpbnRjXzEgLy8gMQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDAtMTA0CiAgICAvLyBjb25zdCBhc3NldENyZWF0ZSA9IGl0eG4uYXNzZXRDb25maWcoewogICAgLy8gICB0b3RhbDogMSwKICAgIC8vICAgdW5pdE5hbWU6ICdUJywKICAgIC8vICAgYXNzZXROYW1lOiAnVEVTVCcsCiAgICAvLyB9KQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX25leHRfdHhuQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzQKICAgIC8vIGFyZ3M6IFthc3NldENyZWF0ZSwgcGF5XSwKICAgIGl0eG5fbmV4dAogICAgc3dhcAogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEyOAogICAgLy8gYW1vdW50OiAxMDAwMDAsCiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMjYtMTMwCiAgICAvLyBjb25zdCBwYXkgPSBpdHhuLnBheW1lbnQoewogICAgLy8gICByZWNlaXZlcjogYXBwSWQuYWRkcmVzcywKICAgIC8vICAgYW1vdW50OiAxMDAwMDAsCiAgICAvLyAgIHNlbmRlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmFkZHJlc3MsCiAgICAvLyB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX25leHRfdHhuQDk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzItMTM1CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWdBbmRQYXkoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlLCBwYXldLAogICAgLy8gfSkKICAgIGl0eG5fbmV4dAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTMzCiAgICAvLyBhcHBJZCwKICAgIGZyYW1lX2RpZyAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzItMTM1CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWdBbmRQYXkoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlLCBwYXldLAogICAgLy8gfSkKICAgIHB1c2hieXRlcyAweDgxYjY3MzUyIC8vIG1ldGhvZCAicmVjZWl2ZXNBc3NldENvbmZpZ0FuZFBheShhY2ZnLHBheSl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF90cmFuc2FjdGlvbnNfbmV4dF90eG5AMTA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzItMTM1CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWdBbmRQYXkoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlLCBwYXldLAogICAgLy8gfSkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo6SGVsbG9GYWN0b3J5LnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlcygpIC0+IHZvaWQ6CnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlczoKCnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlc19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTQxCiAgICAvLyBjb25zdCBhcHBJZCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzkKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoUmVjZWl2ZXNSZWZlcmVuY2VUeXBlcykKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEV4dHJhUHJvZ3JhbVBhZ2VzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBMb2NhbE51bVVpbnQKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIExvY2FsTnVtQnl0ZVNsaWNlCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEdsb2JhbE51bVVpbnQKICAgIGJ5dGVjXzIgLy8gYmFzZTY0KENvRUJRdz09KQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBieXRlY18wIC8vIDB4CiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIHB1c2hieXRlcyBiYXNlNjQoQ2lBQ0FBRXhHeUlUUVFCSU5ob0FnQVNEUFJJU1RJNEJBQUlpUXpFWkloSkVNUmdpRTBRMkdnRkpGU01TUkJmQU1qWWFBa2tWSXhKRUY4QWNOaG9EU1JVakVrUVh3REJQQWs4Q1R3S0lBQnNqUXYvSE1Sa2lUSTRCQUFOQy83c3hHQ0lTUklnQUZ5TkMvN0NLQXdDTC9YSUlSTENML3JDTC8zRUVSTENKaVE9PSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0MQogICAgLy8gY29uc3QgYXBwSWQgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCgp0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF9yZWZlcmVuY2VfdHlwZXNfbmV4dF90eG5AMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0MQogICAgLy8gY29uc3QgYXBwSWQgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0My0xNDkKICAgIC8vIGNvbnN0IGFzc2V0ID0gaXR4bgogICAgLy8gICAuYXNzZXRDb25maWcoewogICAgLy8gICAgIHRvdGFsOiAxLAogICAgLy8gICAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgICAgYXNzZXROYW1lOiAnVEVTVCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKS5jcmVhdGVkQXNzZXQKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0NwogICAgLy8gYXNzZXROYW1lOiAnVEVTVCcsCiAgICBieXRlYyA2IC8vICJURVNUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0NgogICAgLy8gdW5pdE5hbWU6ICdUJywKICAgIGJ5dGVjIDcgLy8gIlQiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0NQogICAgLy8gdG90YWw6IDEsCiAgICBpbnRjXzEgLy8gMQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNDMtMTQ4CiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQoKdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfcmVmZXJlbmNlX3R5cGVzX25leHRfdHhuQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNDMtMTQ5CiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkuY3JlYXRlZEFzc2V0CiAgICBpdHhuX3N1Ym1pdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTQ5CiAgICAvLyAuc3VibWl0KCkuY3JlYXRlZEFzc2V0CiAgICBpdHhuIENyZWF0ZWRBc3NldElECiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNDMtMTQ5CiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkuY3JlYXRlZEFzc2V0CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE1MS0xNTQKICAgIC8vIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNSZWZlcmVuY2VUeXBlcyh7CiAgICAvLyAgIGFyZ3M6IFtHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXIsIGFzc2V0XSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTUyCiAgICAvLyBhcmdzOiBbR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyLCBhc3NldF0sCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIHN3YXAKICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgQWNjb3VudHMKICAgIGl0eG5fZmllbGQgQXNzZXRzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTUxLTE1NAogICAgLy8gY29uc3QgcmVzdWx0ID0gY29tcGlsZWQuY2FsbC5yZWNlaXZlc1JlZmVyZW5jZVR5cGVzKHsKICAgIC8vICAgYXJnczogW0dsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlciwgYXNzZXRdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHg4MzNkMTIxMiAvLyBtZXRob2QgInJlY2VpdmVzUmVmZXJlbmNlVHlwZXMoYXBwbGljYXRpb24sYWNjb3VudCxhc3NldCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hieXRlcyAweDAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGJ5dGVzIDB4MDEKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE1MS0xNTQKICAgIC8vIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNSZWZlcmVuY2VUeXBlcyh7CiAgICAvLyAgIGFyZ3M6IFtHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXIsIGFzc2V0XSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKCnRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlc19uZXh0X3R4bkAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTUxLTE1NAogICAgLy8gY29uc3QgcmVzdWx0ID0gY29tcGlsZWQuY2FsbC5yZWNlaXZlc1JlZmVyZW5jZVR5cGVzKHsKICAgIC8vICAgYXJnczogW0dsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlciwgYXNzZXRdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTU2CiAgICAvLyBhc3NlcnQocmVzdWx0Lml0eG4ubG9ncygwKSA9PT0gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYnl0ZXMpCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bmFzIExvZ3MKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNTcKICAgIC8vIGFzc2VydChyZXN1bHQuaXR4bi5sb2dzKDEpID09PSBUeG4uc2VuZGVyLmJ5dGVzKQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5hcyBMb2dzCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNTgKICAgIC8vIGFzc2VydChyZXN1bHQuaXR4bi5sb2dzKDIpID09PSBhc3NldC5uYW1lKQogICAgaW50Y18zIC8vIDIKICAgIGl0eG5hcyBMb2dzCiAgICBzd2FwCiAgICBhc3NldF9wYXJhbXNfZ2V0IEFzc2V0TmFtZQogICAgYXNzZXJ0IC8vIGFzc2V0IGV4aXN0cwogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OkhlbGxvRmFjdG9yeS5fX2FsZ290c19fLmRlZmF1bHRDcmVhdGUoKSAtPiB2b2lkOgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGU6CgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMDoKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "HelloFactory",
        "methods": [
            {
                "name": "test_compile_contract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_compile_contract_with_template",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_compile_contract_with_template_and_custom_prefix",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_compile_contract_large",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_call_contract_with_transactions",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_call_contract_with_reference_types",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}