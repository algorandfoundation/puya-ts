#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 64 2 1
    bytecblock 0x 0x151f7c75 0x00 0x08 "ab"

main_block@0:

main_block@1:
    // tests/approvals/module-constants.algo.ts:42
    // class ModuleConstantsAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@9

main_abi_routing@2:
    // tests/approvals/module-constants.algo.ts:42
    // class ModuleConstantsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x687a073d // method "getBoolConstants()(bool,bool)"
    pushbytes 0x0a0c480e // method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
    pushbytes 0x0510a934 // method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)"
    pushbytes 0x773153a7 // method "getStringConstants()string[]"
    uncover 4
    match main_getBoolConstants_route@3 main_getUintConstants_route@4 main_getBigUintConstants_route@5 main_getStringConstants_route@6

main_switch_case_default@7:

main_switch_case_next@8:

main_after_if_else@13:
    // tests/approvals/module-constants.algo.ts:42
    // class ModuleConstantsAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__@14:
    return

main_getStringConstants_route@6:
    // tests/approvals/module-constants.algo.ts:52
    // getStringConstants() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getStringConstants
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    b main_after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__@14

main_getBigUintConstants_route@5:
    // tests/approvals/module-constants.algo.ts:49
    // getBigUintConstants() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getBigUintConstants
    cover 7
    cover 6
    cover 5
    cover 4
    cover 3
    cover 2
    swap
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    cover 6
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    cover 4
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    cover 3
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    swap
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    dig 2
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    uncover 3
    b|
    dig 5
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    uncover 6
    b|
    dig 7
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    uncover 8
    b|
    bytec_0 // 0x
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    b main_after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__@14

main_getUintConstants_route@4:
    // tests/approvals/module-constants.algo.ts:46
    // getUintConstants() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getUintConstants
    cover 10
    cover 9
    cover 8
    cover 7
    cover 6
    cover 5
    cover 4
    cover 3
    cover 2
    swap
    itob
    cover 7
    itob
    cover 8
    itob
    cover 8
    itob
    cover 8
    itob
    cover 8
    itob
    cover 9
    itob
    cover 9
    itob
    cover 9
    swap
    itob
    cover 9
    uncover 5
    itob
    cover 10
    uncover 9
    itob
    cover 10
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    b main_after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__@14

main_getBoolConstants_route@3:
    // tests/approvals/module-constants.algo.ts:43
    // getBoolConstants() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getBoolConstants
    swap
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_2 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    bytec_0 // 0x
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_3 // 1
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_3 // 1
    b main_after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__@14

main_bare_routing@9:
    // tests/approvals/module-constants.algo.ts:42
    // class ModuleConstantsAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@10

main_switch_case_default@11:

main_switch_case_next@12:
    b main_after_if_else@13

main___algots__.defaultCreate@10:
    // tests/approvals/module-constants.algo.ts:42
    // class ModuleConstantsAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_3 // 1
    b main_after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__@14


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    proto 3 1

dynamic_array_concat_byte_length_head_block@0:
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dup
    frame_dig -1
    +
    swap
    intc_2 // 2
    *
    intc_2 // 2
    +
    swap
    dup
    itob
    extract 6 2
    swap
    frame_dig -3
    intc_2 // 2
    dig 4
    substring3
    frame_dig -1
    intc_2 // 2
    *
    bzero
    concat
    frame_dig -3
    len
    frame_dig -3
    uncover 5
    uncover 2
    substring3
    concat
    frame_dig -2
    concat
    swap
    intc_0 // 0
    callsub recalculate_head_for_elements_with_byte_length_head
    concat
    retsub


// _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_head_for_elements_with_byte_length_head:
    proto 3 1

recalculate_head_for_elements_with_byte_length_head_block@0:
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    intc_2 // 2
    *
    frame_dig -3
    swap
    extract_uint16
    frame_dig -1
    select
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero

recalculate_head_for_elements_with_byte_length_head_for_header@1:
    frame_dig 2
    frame_dig 1
    <
    bz recalculate_head_for_elements_with_byte_length_head_after_for@4

recalculate_head_for_elements_with_byte_length_head_for_body@2:
    frame_dig 0
    dup
    itob
    extract 6 2
    frame_dig -3
    frame_dig 2
    uncover 2
    replace3
    dup
    frame_bury -3
    dig 1
    extract_uint16
    intc_2 // 2
    +
    +
    frame_bury 0

recalculate_head_for_elements_with_byte_length_head_for_footer@3:
    frame_dig 2
    intc_2 // 2
    +
    frame_bury 2
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_after_for@4:
    frame_dig -3
    frame_bury 0
    retsub


// tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants() -> uint64, uint64:
getBoolConstants:

getBoolConstants_block@0:
    // tests/approvals/module-constants.algo.ts:7
    // const b_and = b_a && b_b
    intc_0 // 0
    // tests/approvals/module-constants.algo.ts:8
    // const b_or = b_a || b_b
    intc_3 // 1
    // tests/approvals/module-constants.algo.ts:44
    // return [b_and, b_or] as const
    retsub


// tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants() -> uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getUintConstants:

getUintConstants_block@0:
    // tests/approvals/module-constants.algo.ts:13
    // const u_add: uint64 = u_a + u_b
    pushint 12 // 12
    // tests/approvals/module-constants.algo.ts:14
    // const u_sub: uint64 = u_a - u_b
    pushint 8 // 8
    // tests/approvals/module-constants.algo.ts:15
    // const u_mul: uint64 = u_a * u_b
    pushint 20 // 20
    // tests/approvals/module-constants.algo.ts:16
    // const u_div: uint64 = u_a / u_b
    pushint 5 // 5
    // tests/approvals/module-constants.algo.ts:17
    // const u_mod: uint64 = u_a % u_b
    intc_0 // 0
    // tests/approvals/module-constants.algo.ts:18
    // const u_pow: uint64 = u_a ** u_b
    pushint 100 // 100
    // tests/approvals/module-constants.algo.ts:19
    // const u_lshift: uint64 = u_a << u_b
    pushint 40 // 40
    // tests/approvals/module-constants.algo.ts:20
    // const u_rshift: uint64 = u_a >> u_b
    intc_2 // 2
    // tests/approvals/module-constants.algo.ts:21
    // const u_bitOr: uint64 = u_a | u_b
    pushint 10 // 10
    // tests/approvals/module-constants.algo.ts:22
    // const u_bitXor: uint64 = u_a ^ u_b
    pushint 8 // 8
    // tests/approvals/module-constants.algo.ts:23
    // const u_bitAnd: uint64 = u_a & u_b
    intc_2 // 2
    // tests/approvals/module-constants.algo.ts:47
    // return [u_add, u_sub, u_mul, u_div, u_mod, u_pow, u_lshift, u_rshift, u_bitOr, u_bitXor, u_bitAnd] as const
    retsub


// tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants() -> bytes, bytes, bytes, bytes, bytes, bytes, bytes, bytes:
getBigUintConstants:

getBigUintConstants_block@0:
    // tests/approvals/module-constants.algo.ts:28
    // const bu_add: biguint = bu_a + bu_b
    pushbytes 0x0c
    // tests/approvals/module-constants.algo.ts:29
    // const bu_sub: biguint = bu_a - bu_b
    bytec_3 // 0x08
    // tests/approvals/module-constants.algo.ts:30
    // const bu_mul: biguint = bu_a * bu_b
    pushbytes 0x14
    // tests/approvals/module-constants.algo.ts:31
    // const bu_div: biguint = bu_a / bu_b
    pushbytes 0x05
    // tests/approvals/module-constants.algo.ts:32
    // const bu_mod: biguint = bu_a % bu_b
    bytec_0 // 0x
    // tests/approvals/module-constants.algo.ts:33
    // const bu_bitOr: biguint = bu_a | bu_b
    pushbytes 0x0a
    // tests/approvals/module-constants.algo.ts:34
    // const bu_bitXor: biguint = bu_a ^ bu_b
    bytec_3 // 0x08
    // tests/approvals/module-constants.algo.ts:35
    // const bu_bitAnd: biguint = bu_a & bu_b
    pushbytes 0x02
    // tests/approvals/module-constants.algo.ts:50
    // return [bu_add, bu_sub, bu_mul, bu_div, bu_mod, bu_bitOr, bu_bitXor, bu_bitAnd] as const
    retsub


// tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants() -> bytes:
getStringConstants:

getStringConstants_block@0:
    // tests/approvals/module-constants.algo.ts:53
    // return [s_add]
    pushbytes 0x0000
    bytec_0 // 0x
    concat
    // tests/approvals/module-constants.algo.ts:40
    // const s_add = s_a + s_b
    bytec 4 // "ab"
    len
    itob
    extract 6 2
    bytec 4 // "ab"
    concat
    // tests/approvals/module-constants.algo.ts:53
    // return [s_add]
    bytec_0 // 0x
    swap
    concat
    intc_3 // 1
    callsub dynamic_array_concat_byte_length_head
    retsub


// tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
