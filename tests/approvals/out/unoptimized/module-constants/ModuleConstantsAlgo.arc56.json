{
    "name": "ModuleConstantsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "getBoolConstants",
            "args": [],
            "returns": {
                "type": "(bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUintConstants",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBigUintConstants",
            "args": [],
            "returns": {
                "type": "(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStringConstants",
            "args": [],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        72,
                        93,
                        224,
                        300
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        349
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        77,
                        98,
                        229,
                        305
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        119,
                        131,
                        143,
                        155,
                        167,
                        179,
                        191,
                        203
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEQAABAiYEAAQVH3x1AQgCYWIxGyMTQQEzNhoAgARoegc9gAQKDEgOgAQFEKk0gAR3MVOnTwSOBADmAJoAFwACI0MxGSMSRDEYIxNEiAE+KUxQsCRC/+oxGSMSRDEYIxNEiAEWTgdOBk4FTgROA04CTEkVIg5EIq+rKExQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQKFApTFCwJEL/ZzEZIxJEMRgjE0SIAH9OCk4JTghOB04GTgVOBE4DTgJMFihMUEwWUEwWUEwWUEwWUEwWUEwWUEwWUEwWUEwWUEwWUChQKUxQsCRC/xsxGSMSRDEYIxNEiAAwTIABACNPAlQoTFAkTwJUKFApTFCwJEL+9TEZI0yOAQADQv7pMRgjEkSIAEskQv7eIySJgQyBCIEUgQUjgWSBKCWBCoEIJYmAAQwqgAEUgAEFKIABCiqAAQKJKxUWVwYCK1AoTFAlFlcGAihMUCQWVwYCTFBMUImJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}