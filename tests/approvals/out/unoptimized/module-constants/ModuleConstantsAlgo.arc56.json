{
    "name": "ModuleConstantsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "getBoolConstants",
            "args": [],
            "returns": {
                "type": "(bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUintConstants",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBigUintConstants",
            "args": [],
            "returns": {
                "type": "(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStringConstants",
            "args": [],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        96,
                        120,
                        254,
                        343
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        402
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        101,
                        125,
                        259,
                        348
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        147,
                        160,
                        172,
                        184,
                        196,
                        208,
                        220,
                        232
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEQAABAiYEAAQVH3x1AQgCYWIoQgAAQgAAMRsjE0EBWkIAADYaAIAEaHoHPYAECgxIDoAEBRCpNIAEdzFTp08EjgQBBwCuACgAEEIAAEIAAEIAACNFAUIAAEMxGSMSRDEYIxNEiAFmKU8BULAkRQFC/+cxGSMSRDEYIxNEiAE4TgdOBk4FTgROA04CTgFJFSIORCKvqyhPAVBLARUiDkQir08Cq1BLARUiDkQir08Cq1BLARUiDkQir08Cq1BLARUiDkQir08Cq1BLARUiDkQir08Cq1BLARUiDkQir08Cq1BLARUiDkQir08Cq1ApTwFQsCRFAUL/YTEZIxJEMRgjE0SIAJtOCk4JTghOB04GTgVOBE4DTgJOARYoTwFQTwEWUE8BFlBPARZQTwEWUE8BFlBPARZQTwEWUE8BFlBPARZQTwEWUClPAVCwJEUBQv8IMRkjEkQxGCMTRIgAPE4BgAEAI08CVCRPAlQoTwFQKU8BULAkRQFC/t8xGSNPAY4BAAlCAABCAABC/scxGCMSRIgAVyRFAUL+v0IAACMkiUIAAIEMgQiBFIEFI4FkgSglgQqBCCWJQgAAgAEMKoABFIABBSiAAQoqgAECiUIAACQWVwYCKxUWVwYCK1AlFlcGAk8CTwFQTwFQiUIAAIk=",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}