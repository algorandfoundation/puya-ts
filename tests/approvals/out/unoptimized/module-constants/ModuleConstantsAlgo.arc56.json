{
    "name": "ModuleConstantsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "getBoolConstants",
            "args": [],
            "returns": {
                "type": "(bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUintConstants",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBigUintConstants",
            "args": [],
            "returns": {
                "type": "(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStringConstants",
            "args": [],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        72,
                        93,
                        222,
                        296
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        343
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        77,
                        98,
                        227,
                        301
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        119,
                        131,
                        143,
                        155,
                        167,
                        179,
                        191,
                        203
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgNjQgMCAxIDIKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAweCAweDA4ICJhYiIKCm1haW5fYmxvY2tAMDoKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6NDIKICAgIC8vIGNsYXNzIE1vZHVsZUNvbnN0YW50c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A5CgptYWluX2FiaV9yb3V0aW5nQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjQyCiAgICAvLyBjbGFzcyBNb2R1bGVDb25zdGFudHNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgcHVzaGJ5dGVzIDB4Njg3YTA3M2QgLy8gbWV0aG9kICJnZXRCb29sQ29uc3RhbnRzKCkoYm9vbCxib29sKSIKICAgIHB1c2hieXRlcyAweDBhMGM0ODBlIC8vIG1ldGhvZCAiZ2V0VWludENvbnN0YW50cygpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpIgogICAgcHVzaGJ5dGVzIDB4MDUxMGE5MzQgLy8gbWV0aG9kICJnZXRCaWdVaW50Q29uc3RhbnRzKCkodWludDUxMix1aW50NTEyLHVpbnQ1MTIsdWludDUxMix1aW50NTEyLHVpbnQ1MTIsdWludDUxMix1aW50NTEyKSIKICAgIHB1c2hieXRlcyAweDc3MzE1M2E3IC8vIG1ldGhvZCAiZ2V0U3RyaW5nQ29uc3RhbnRzKClzdHJpbmdbXSIKICAgIHVuY292ZXIgNAogICAgbWF0Y2ggbWFpbl9nZXRCb29sQ29uc3RhbnRzX3JvdXRlQDMgbWFpbl9nZXRVaW50Q29uc3RhbnRzX3JvdXRlQDQgbWFpbl9nZXRCaWdVaW50Q29uc3RhbnRzX3JvdXRlQDUgbWFpbl9nZXRTdHJpbmdDb25zdGFudHNfcm91dGVANgoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDc6CgptYWluX3N3aXRjaF9jYXNlX25leHRAODoKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6NDIKICAgIC8vIGNsYXNzIE1vZHVsZUNvbnN0YW50c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAoKbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6Ok1vZHVsZUNvbnN0YW50c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMTQ6CiAgICByZXR1cm4KCm1haW5fZ2V0U3RyaW5nQ29uc3RhbnRzX3JvdXRlQDY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjUyCiAgICAvLyBnZXRTdHJpbmdDb25zdGFudHMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldFN0cmluZ0NvbnN0YW50cwogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6Ok1vZHVsZUNvbnN0YW50c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMTQKCm1haW5fZ2V0QmlnVWludENvbnN0YW50c19yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo0OQogICAgLy8gZ2V0QmlnVWludENvbnN0YW50cygpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0QmlnVWludENvbnN0YW50cwogICAgY292ZXIgNwogICAgY292ZXIgNgogICAgY292ZXIgNQogICAgY292ZXIgNAogICAgY292ZXIgMwogICAgY292ZXIgMgogICAgc3dhcAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18wIC8vIDY0CiAgICBiemVybwogICAgYnwKICAgIGJ5dGVjXzEgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50Y18wIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzAgLy8gNjQKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDIKICAgIGJ8CiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGludGNfMCAvLyA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18wIC8vIDY0CiAgICBiemVybwogICAgdW5jb3ZlciAyCiAgICBifAogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICBpbnRjXzAgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMCAvLyA2NAogICAgYnplcm8KICAgIHVuY292ZXIgMgogICAgYnwKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50Y18wIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzAgLy8gNjQKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDIKICAgIGJ8CiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGludGNfMCAvLyA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18wIC8vIDY0CiAgICBiemVybwogICAgdW5jb3ZlciAyCiAgICBifAogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICBpbnRjXzAgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMCAvLyA2NAogICAgYnplcm8KICAgIHVuY292ZXIgMgogICAgYnwKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50Y18wIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzAgLy8gNjQKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDIKICAgIGJ8CiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjpNb2R1bGVDb25zdGFudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE0CgptYWluX2dldFVpbnRDb25zdGFudHNfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6NDYKICAgIC8vIGdldFVpbnRDb25zdGFudHMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldFVpbnRDb25zdGFudHMKICAgIGNvdmVyIDEwCiAgICBjb3ZlciA5CiAgICBjb3ZlciA4CiAgICBjb3ZlciA3CiAgICBjb3ZlciA2CiAgICBjb3ZlciA1CiAgICBjb3ZlciA0CiAgICBjb3ZlciAzCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6Ok1vZHVsZUNvbnN0YW50c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMTQKCm1haW5fZ2V0Qm9vbENvbnN0YW50c19yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo0MwogICAgLy8gZ2V0Qm9vbENvbnN0YW50cygpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0Qm9vbENvbnN0YW50cwogICAgc3dhcAogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18yIC8vIDEKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18xIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjpNb2R1bGVDb25zdGFudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE0CgptYWluX2JhcmVfcm91dGluZ0A5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo0MgogICAgLy8gY2xhc3MgTW9kdWxlQ29uc3RhbnRzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyAwCiAgICBzd2FwCiAgICBtYXRjaCBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxMAoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDExOgoKbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDEyOgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMTMKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo0MgogICAgLy8gY2xhc3MgTW9kdWxlQ29uc3RhbnRzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgPT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGNhbGxzdWIgX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlCiAgICBpbnRjXzIgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo6TW9kdWxlQ29uc3RhbnRzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxNAoKCi8vIHRlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6Ok1vZHVsZUNvbnN0YW50c0FsZ28uZ2V0Qm9vbENvbnN0YW50cygpIC0+IHVpbnQ2NCwgdWludDY0OgpnZXRCb29sQ29uc3RhbnRzOgoKZ2V0Qm9vbENvbnN0YW50c19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo0NAogICAgLy8gcmV0dXJuIFtiX2FuZCwgYl9vcl0gYXMgY29uc3QKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzIgLy8gMQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo6TW9kdWxlQ29uc3RhbnRzQWxnby5nZXRVaW50Q29uc3RhbnRzKCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQ6CmdldFVpbnRDb25zdGFudHM6CgpnZXRVaW50Q29uc3RhbnRzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjQ3CiAgICAvLyByZXR1cm4gW3VfYWRkLCB1X3N1YiwgdV9tdWwsIHVfZGl2LCB1X21vZCwgdV9wb3csIHVfbHNoaWZ0LCB1X3JzaGlmdCwgdV9iaXRPciwgdV9iaXRYb3IsIHVfYml0QW5kXSBhcyBjb25zdAogICAgcHVzaGludCAxMiAvLyAxMgogICAgcHVzaGludCA4IC8vIDgKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpbnRjXzEgLy8gMAogICAgcHVzaGludCAxMDAgLy8gMTAwCiAgICBwdXNoaW50IDQwIC8vIDQwCiAgICBpbnRjXzMgLy8gMgogICAgcHVzaGludCAxMCAvLyAxMAogICAgcHVzaGludCA4IC8vIDgKICAgIGludGNfMyAvLyAyCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjpNb2R1bGVDb25zdGFudHNBbGdvLmdldEJpZ1VpbnRDb25zdGFudHMoKSAtPiBieXRlcywgYnl0ZXMsIGJ5dGVzLCBieXRlcywgYnl0ZXMsIGJ5dGVzLCBieXRlcywgYnl0ZXM6CmdldEJpZ1VpbnRDb25zdGFudHM6CgpnZXRCaWdVaW50Q29uc3RhbnRzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjUwCiAgICAvLyByZXR1cm4gW2J1X2FkZCwgYnVfc3ViLCBidV9tdWwsIGJ1X2RpdiwgYnVfbW9kLCBidV9iaXRPciwgYnVfYml0WG9yLCBidV9iaXRBbmRdIGFzIGNvbnN0CiAgICBwdXNoYnl0ZXMgMHgwYwogICAgYnl0ZWNfMiAvLyAweDA4CiAgICBwdXNoYnl0ZXMgMHgxNAogICAgcHVzaGJ5dGVzIDB4MDUKICAgIGJ5dGVjXzEgLy8gMHgKICAgIHB1c2hieXRlcyAweDBhCiAgICBieXRlY18yIC8vIDB4MDgKICAgIHB1c2hieXRlcyAweDAyCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbW9kdWxlLWNvbnN0YW50cy5hbGdvLnRzOjpNb2R1bGVDb25zdGFudHNBbGdvLmdldFN0cmluZ0NvbnN0YW50cygpIC0+IGJ5dGVzOgpnZXRTdHJpbmdDb25zdGFudHM6CgpnZXRTdHJpbmdDb25zdGFudHNfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tb2R1bGUtY29uc3RhbnRzLmFsZ28udHM6NTMKICAgIC8vIHJldHVybiBbc19hZGRdCiAgICBpbnRjXzIgLy8gMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjXzMgLy8gImFiIgogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMyAvLyAiYWIiCiAgICBjb25jYXQKICAgIGludGNfMyAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL21vZHVsZS1jb25zdGFudHMuYWxnby50czo6TW9kdWxlQ29uc3RhbnRzQWxnby5fX2FsZ290c19fLmRlZmF1bHRDcmVhdGUoKSAtPiB2b2lkOgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGU6CgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMDoKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEQAABAiYEBBUffHUAAQgCYWIxGyMTQQEtNhoAgARoegc9gAQKDEgOgAQFEKk0gAR3MVOnTwSOBADiAJgAFwACI0MxGSMSRDEYIxNEiAE4KExQsCRC/+oxGSMSRDEYIxNEiAEQTgdOBk4FTgROA04CTEkVIg5EIq+rKUxQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQSwEVIg5EIq9PAqtQKExQsCRC/2kxGSMSRDEYIxNEiAB7TgpOCU4ITgdOBk4FTgROA04CTBYpTFBMFlBMFlBMFlBMFlBMFlBMFlBMFlBMFlBMFlBMFlAoTFCwJEL/HzEZIxJEMRgjE0SIAC5MgAEAI08CVCRPAlQpTFAoTFCwJEL++zEZI0yOAQADQv7vMRgjEkSIAEckQv7kIySJgQyBCIEUgQUjgWSBKCWBCoEIJYmAAQwqgAEUgAEFKYABCiqAAQKJJBZXBgIrFRZXBgIrUCUWVwYCTwJMUExQiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}