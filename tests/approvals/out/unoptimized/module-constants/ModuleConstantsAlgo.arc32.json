{
    "hints": {
        "getBoolConstants()(bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStringConstants()string[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ModuleConstantsAlgo",
        "methods": [
            {
                "name": "getBoolConstants",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,bool)"
                }
            },
            {
                "name": "getUintConstants",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getBigUintConstants",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)"
                }
            },
            {
                "name": "getStringConstants",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}