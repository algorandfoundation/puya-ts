main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L42
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L42
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getBoolConstants()(bool,bool)" => block@2, method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)" => block@3, method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)" => block@4, method "getStringConstants()string[]" => block@5, * => block@6}
    block@2: // getBoolConstants_route_L43
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let (tmp%7#0: bool, tmp%8#0: bool) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants()
        let tmp%9#0: Encoded(bool1,bool1) = bytes_encode<(bool1,bool1)>(tmp%7#0, tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        return 1u
    block@3: // getUintConstants_route_L46
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let (tmp%15#0: uint64, tmp%16#0: uint64, tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: uint64, tmp%20#0: uint64, tmp%21#0: uint64, tmp%22#0: uint64, tmp%23#0: uint64, tmp%24#0: uint64, tmp%25#0: uint64) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants()
        let tmp%26#0: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = bytes_encode<(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)>(tmp%15#0, tmp%16#0, tmp%17#0, tmp%18#0, tmp%19#0, tmp%20#0, tmp%21#0, tmp%22#0, tmp%23#0, tmp%24#0, tmp%25#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        return 1u
    block@4: // getBigUintConstants_route_L49
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let (tmp%32#0: biguint, tmp%33#0: biguint, tmp%34#0: biguint, tmp%35#0: biguint, tmp%36#0: biguint, tmp%37#0: biguint, tmp%38#0: biguint, tmp%39#0: biguint) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants()
        let tmp%40#0: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = bytes_encode<(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)>(tmp%32#0, tmp%33#0, tmp%34#0, tmp%35#0, tmp%36#0, tmp%37#0, tmp%38#0, tmp%39#0)
        let tmp%41#0: bytes = (concat 0x151f7c75 tmp%40#0)
        (log tmp%41#0)
        return 1u
    block@5: // getStringConstants_route_L52
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let tmp%46#0: Encoded(len+(len+utf8[])[]) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants()
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        return 1u
    block@6: // switch_case_default_L42
        goto block@7
    block@7: // switch_case_next_L42
        goto block@12
    block@8: // bare_routing_L42
        let tmp%48#0: uint64 = (txn OnCompletion)
        switch tmp%48#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L42
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (== tmp%49#0 0u)
        (assert tmp%50#0) // can only call when creating
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L42
        goto block@11
    block@11: // switch_case_next_L42
        goto block@12
    block@12: // after_if_else_L42
        return 0u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants() -> <bool, bool>:
    block@0: // L43
        return 0u 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants() -> <uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64>:
    block@0: // L46
        return 12u 8u 20u 5u 0u 100u 40u 2u 10u 8u 2u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants() -> <biguint, biguint, biguint, biguint, biguint, biguint, biguint, biguint>:
    block@0: // L49
        return 12b 8b 20b 5b 0b 10b 8b 2b

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants() -> Encoded(len+(len+utf8[])[]):
    block@0: // L52
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>("ab")
        return encoded_array%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L42
        return 