main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L42
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L42
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getBoolConstants()(bool,bool)" => block@3, method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)" => block@4, method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)" => block@5, method "getStringConstants()string[]" => block@6, * => block@7}
    block@3: // getBoolConstants_route_L43
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let (tmp%7#0: bool, tmp%8#0: bool) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants()
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%7#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%8#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%set_bit%0#0)
        let aggregate%as_Encoded(bool1,bool1)%0#0: Encoded(bool1,bool1) = aggregate%head%0#0
        let tmp%9#0: Encoded(bool1,bool1) = aggregate%as_Encoded(bool1,bool1)%0#0
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // getUintConstants_route_L46
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let (tmp%15#0: uint64, tmp%16#0: uint64, tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: uint64, tmp%20#0: uint64, tmp%21#0: uint64, tmp%22#0: uint64, tmp%23#0: uint64, tmp%24#0: uint64, tmp%25#0: uint64) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%15#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%16#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%17#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%18#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%19#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%20#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%21#0)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%22#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%23#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob tmp%24#0)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob tmp%25#0)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%as_Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = aggregate%head%11#0
        let tmp%26#0: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)%0#0
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getBigUintConstants_route_L49
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let (tmp%32#0: biguint, tmp%33#0: biguint, tmp%34#0: biguint, tmp%35#0: biguint, tmp%36#0: biguint, tmp%37#0: biguint, tmp%38#0: biguint, tmp%39#0: biguint) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants()
        let aggregate%value_len%0#0: uint64 = (len tmp%32#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%32#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%0#0)
        let aggregate%value_len%1#0: uint64 = (len tmp%33#0)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%33#0 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint512)%1#0)
        let aggregate%value_len%2#0: uint64 = (len tmp%34#0)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| tmp%34#0 aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%as_Encoded(uint512)%2#0)
        let aggregate%value_len%3#0: uint64 = (len tmp%35#0)
        let aggregate%len_ok%3#0: bool = (<= aggregate%value_len%3#0 64u)
        (assert aggregate%len_ok%3#0) // overflow
        let aggregate%bzero%3#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%3#0: bytes[64] = (b| tmp%35#0 aggregate%bzero%3#0)
        let aggregate%as_Encoded(uint512)%3#0: Encoded(uint512) = aggregate%arc4_encoded%3#0
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%as_Encoded(uint512)%3#0)
        let aggregate%value_len%4#0: uint64 = (len tmp%36#0)
        let aggregate%len_ok%4#0: bool = (<= aggregate%value_len%4#0 64u)
        (assert aggregate%len_ok%4#0) // overflow
        let aggregate%bzero%4#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%4#0: bytes[64] = (b| tmp%36#0 aggregate%bzero%4#0)
        let aggregate%as_Encoded(uint512)%4#0: Encoded(uint512) = aggregate%arc4_encoded%4#0
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 aggregate%as_Encoded(uint512)%4#0)
        let aggregate%value_len%5#0: uint64 = (len tmp%37#0)
        let aggregate%len_ok%5#0: bool = (<= aggregate%value_len%5#0 64u)
        (assert aggregate%len_ok%5#0) // overflow
        let aggregate%bzero%5#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%5#0: bytes[64] = (b| tmp%37#0 aggregate%bzero%5#0)
        let aggregate%as_Encoded(uint512)%5#0: Encoded(uint512) = aggregate%arc4_encoded%5#0
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%as_Encoded(uint512)%5#0)
        let aggregate%value_len%6#0: uint64 = (len tmp%38#0)
        let aggregate%len_ok%6#0: bool = (<= aggregate%value_len%6#0 64u)
        (assert aggregate%len_ok%6#0) // overflow
        let aggregate%bzero%6#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%6#0: bytes[64] = (b| tmp%38#0 aggregate%bzero%6#0)
        let aggregate%as_Encoded(uint512)%6#0: Encoded(uint512) = aggregate%arc4_encoded%6#0
        let aggregate%head%18#0: bytes = (concat aggregate%head%17#0 aggregate%as_Encoded(uint512)%6#0)
        let aggregate%value_len%7#0: uint64 = (len tmp%39#0)
        let aggregate%len_ok%7#0: bool = (<= aggregate%value_len%7#0 64u)
        (assert aggregate%len_ok%7#0) // overflow
        let aggregate%bzero%7#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%7#0: bytes[64] = (b| tmp%39#0 aggregate%bzero%7#0)
        let aggregate%as_Encoded(uint512)%7#0: Encoded(uint512) = aggregate%arc4_encoded%7#0
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%as_Encoded(uint512)%7#0)
        let aggregate%as_Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)%0#0: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = aggregate%head%19#0
        let tmp%40#0: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = aggregate%as_Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)%0#0
        let tmp%41#0: bytes = (concat 0x151f7c75 tmp%40#0)
        (log tmp%41#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // getStringConstants_route_L52
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let tmp%46#0: Encoded(len+(len+utf8[])[]) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants()
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@7: // switch_case_default_L42
        goto block@8
    block@8: // switch_case_next_L42
        goto block@13
    block@9: // bare_routing_L42
        let tmp%48#0: uint64 = (txn OnCompletion)
        switch tmp%48#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L42
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (== tmp%49#0 0u)
        (assert tmp%50#0) // can only call when creating
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate()
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@11: // switch_case_default_L42
        goto block@12
    block@12: // switch_case_next_L42
        goto block@13
    block@13: // after_if_else_L42
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants() -> <bool, bool>:
    block@0: // L43
        return 0u 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants() -> <uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64>:
    block@0: // L46
        return 12u 8u 20u 5u 0u 100u 40u 2u 10u 8u 2u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants() -> <biguint, biguint, biguint, biguint, biguint, biguint, biguint, biguint>:
    block@0: // L49
        return 12b 8b 20b 5b 0b 10b 8b 2b

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants() -> Encoded(len+(len+utf8[])[]):
    block@0: // L52
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%length%0#0: uint64 = (len "ab")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "ab")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%0#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L42
        return 