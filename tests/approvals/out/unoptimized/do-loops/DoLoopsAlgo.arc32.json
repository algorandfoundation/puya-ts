{
    "hints": {
        "testDo(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testDoBreak(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testDoContinue(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DoLoopsAlgo",
        "methods": [
            {
                "name": "testDo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stop"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "testDoBreak",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stop"
                    },
                    {
                        "type": "uint64",
                        "name": "breakMod"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "testDoContinue",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stop"
                    },
                    {
                        "type": "uint64",
                        "name": "mod"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}