{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/do-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;AAmBE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnBF;;;AAAA;AAAA;;;AAAA;AAmBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AARF;;;AAAA;AAAA;;;AAAA;AAQE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AACE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACE;;;AACiB;AACf;AAAA;;;AACE;;AAAK;AAAL;AAAA;AAAA;;AACO;;AAAA;AAAA;;;AACT;;AAAA;AAAA;;;;;;;AAEF;;;AACqB;AACJ;AACf;AAAA;;;AACM;;AAAI;AAAJ;AAAA;;;AAAS;;AAAA;;AAAA;AAAiB;AAAjB;AAAT;;;AAKN;AAHE;;AAAK;AAAL;AAAA;AAAA;;AACA;;AAAA;;AAAA;AAAA;;AACO;;AAAA;AAAA;;;AALT;;;;;;;;;AAQF;;;AACiB;AACI;AACnB;AAAA;;;AACM;;AAAI;AAAJ;AAAA;;;AAAS;;AAAA;;AAAA;AAAY;AAAZ;AAAT;;;AACF;;AAAS;;AAAT;AAAA;;AACA;;AAAK;AAAL;AAAA;;AAKK;;AAAA;;AAAA;AAAA;;;AACT;;AAAA;;AAAA;;;;AAHE;;AAAS;AAAT;AAAA;;AACA;;AAAK;AAAL;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "15": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "19": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "pushbytes 0x39239792 // method \"testDo(uint64)uint64\"",
      "defined_out": [
        "Method(testDo(uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testDo(uint64)uint64)"
      ]
    },
    "28": {
      "op": "pushbytes 0xace2eb21 // method \"testDoBreak(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(testDo(uint64)uint64)",
        "Method(testDoBreak(uint64,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testDo(uint64)uint64)",
        "Method(testDoBreak(uint64,uint64)uint64)"
      ]
    },
    "34": {
      "op": "pushbytes 0x78e8d516 // method \"testDoContinue(uint64,uint64)uint64\"",
      "defined_out": [
        "Method(testDo(uint64)uint64)",
        "Method(testDoBreak(uint64,uint64)uint64)",
        "Method(testDoContinue(uint64,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testDo(uint64)uint64)",
        "Method(testDoBreak(uint64,uint64)uint64)",
        "Method(testDoContinue(uint64,uint64)uint64)"
      ]
    },
    "40": {
      "op": "uncover 3",
      "stack_out": [
        "Method(testDo(uint64)uint64)",
        "Method(testDoBreak(uint64,uint64)uint64)",
        "Method(testDoContinue(uint64,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "42": {
      "op": "match main_testDo_route@3 main_testDoBreak_route@4 main_testDoContinue_route@5",
      "stack_out": []
    },
    "50": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "51": {
      "block": "main_after_inlined_tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "52": {
      "block": "main_testDoContinue_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "54": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "NoOp"
      ]
    },
    "55": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "56": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "59": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "60": {
      "op": "!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "61": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "62": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "65": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "66": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "69": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "70": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoContinue",
      "op": "callsub testDoContinue",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "73": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "74": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "77": {
      "op": "log",
      "stack_out": []
    },
    "78": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "b main_after_inlined_tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__@13"
    },
    "82": {
      "block": "main_testDoBreak_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "84": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "NoOp"
      ]
    },
    "85": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "86": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "89": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "90": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "91": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "92": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "95": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "96": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "99": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "100": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoBreak",
      "op": "callsub testDoBreak",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "103": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "104": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "105": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "106": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "107": {
      "op": "log",
      "stack_out": []
    },
    "108": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "b main_after_inlined_tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__@13"
    },
    "112": {
      "block": "main_testDo_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "114": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "116": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "119": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "120": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "121": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "122": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "125": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "126": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDo",
      "op": "callsub testDo",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "129": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "130": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "133": {
      "op": "log",
      "stack_out": []
    },
    "134": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "b main_after_inlined_tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__@13"
    },
    "138": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "140": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%23#0"
      ]
    },
    "142": {
      "op": "match main___algots__.defaultCreate@9",
      "stack_out": []
    },
    "146": {
      "block": "main_switch_case_next@11",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "149": {
      "block": "main___algots__.defaultCreate@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "151": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "153": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "154": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "157": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "b main_after_inlined_tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__@13"
    },
    "161": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDo",
      "params": {
        "stop#0": "uint64"
      },
      "block": "testDo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "165": {
      "block": "testDo_while_top@1",
      "stack_in": [
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "1"
      ]
    },
    "166": {
      "op": "bz testDo_after_while@5",
      "stack_out": [
        "i#0"
      ]
    },
    "169": {
      "block": "testDo_while_body@2",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "1"
      ]
    },
    "172": {
      "op": "+",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "173": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "i#0",
        "i#0"
      ]
    },
    "174": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "176": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "178": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "bnz testDo_after_if_else@4",
      "stack_out": [
        "i#0"
      ]
    },
    "182": {
      "block": "testDo_block@6",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "184": {
      "op": "swap"
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    },
    "186": {
      "block": "testDo_after_if_else@4",
      "stack_in": [
        "i#0"
      ],
      "op": "b testDo_while_top@1"
    },
    "189": {
      "block": "testDo_after_while@5",
      "stack_in": [
        "i#0"
      ],
      "op": "b testDo_block@6"
    },
    "192": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoBreak",
      "params": {
        "stop#0": "uint64",
        "breakMod#0": "uint64"
      },
      "block": "testDoBreak",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "196": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "197": {
      "block": "testDoBreak_while_top@1",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "1"
      ]
    },
    "198": {
      "op": "bz testDoBreak_after_while@8",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "201": {
      "block": "testDoBreak_while_body@2",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "203": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "0"
      ]
    },
    "204": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "bz testDoBreak_after_if_else@5",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "208": {
      "block": "testDoBreak_and_contd@3",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "210": {
      "op": "frame_dig -1",
      "defined_out": [
        "breakMod#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "breakMod#0 (copy)"
      ]
    },
    "212": {
      "op": "%",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "213": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%1#0",
        "0"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "215": {
      "op": "bz testDoBreak_after_if_else@5",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "218": {
      "block": "testDoBreak_block@9",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "219": {
      "block": "testDoBreak_after_if_else@5",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "222": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "223": {
      "op": "dup",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "i#0"
      ]
    },
    "224": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "226": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0"
      ]
    },
    "228": {
      "op": "dig 1",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0",
        "i#0 (copy)"
      ]
    },
    "230": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0"
      ]
    },
    "231": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "233": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "235": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "236": {
      "op": "bnz testDoBreak_after_if_else@7",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "239": {
      "block": "testDoBreak_if_body@6",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "b testDoBreak_block@9"
    },
    "242": {
      "block": "testDoBreak_after_if_else@7",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "b testDoBreak_while_top@1"
    },
    "245": {
      "block": "testDoBreak_after_while@8",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "b testDoBreak_block@9"
    },
    "248": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoContinue",
      "params": {
        "stop#0": "uint64",
        "mod#0": "uint64"
      },
      "block": "testDoContinue",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "251": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "252": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "253": {
      "block": "testDoContinue_while_top@1",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "1"
      ]
    },
    "254": {
      "op": "bz testDoContinue_after_while@9",
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "257": {
      "block": "testDoContinue_while_body@2",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "259": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "0"
      ]
    },
    "260": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "bz testDoContinue_after_if_else@5",
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "264": {
      "block": "testDoContinue_and_contd@3",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "266": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "mod#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "mod#0 (copy)"
      ]
    },
    "268": {
      "op": "%",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "tmp%1#0"
      ]
    },
    "269": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "tmp%1#0",
        "0"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "tmp%2#0"
      ]
    },
    "271": {
      "op": "bz testDoContinue_after_if_else@5",
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "274": {
      "block": "testDoContinue_if_body@4",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "276": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0",
        "2"
      ]
    },
    "278": {
      "op": "+",
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "279": {
      "op": "frame_bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "281": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "283": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "1"
      ]
    },
    "284": {
      "op": "+",
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "285": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "287": {
      "block": "testDoContinue_block@6",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "289": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "291": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "tmp%3#0"
      ]
    },
    "292": {
      "op": "bnz testDoContinue_after_if_else@8",
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "295": {
      "block": "testDoContinue_block@10",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "297": {
      "op": "frame_bury 0"
    },
    "299": {
      "retsub": true,
      "op": "retsub"
    },
    "300": {
      "block": "testDoContinue_after_if_else@8",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "b testDoContinue_while_top@1"
    },
    "303": {
      "block": "testDoContinue_after_if_else@5",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "305": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0",
        "1"
      ]
    },
    "306": {
      "op": "+",
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "307": {
      "op": "frame_bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "309": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "311": {
      "op": "intc_1 // 1",
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "1"
      ]
    },
    "312": {
      "op": "+",
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "313": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "315": {
      "op": "b testDoContinue_block@6"
    },
    "318": {
      "block": "testDoContinue_after_while@9",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "b testDoContinue_block@10"
    },
    "321": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}