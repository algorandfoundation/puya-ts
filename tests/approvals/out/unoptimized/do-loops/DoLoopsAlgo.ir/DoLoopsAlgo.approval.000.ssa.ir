main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testDo(uint64)uint64" => block@2, method "testDoBreak(uint64,uint64)uint64" => block@3, method "testDoContinue(uint64,uint64)uint64" => block@4, * => block@5}
    block@2: // testDo_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let value_len%0#0: uint64 = (len tmp%7#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 8u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%0#0: bytes[8] = tmp%7#0
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let to_encode%0#0: uint64 = tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDo(tmp%8#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%9#0)
        return 1u
    block@3: // testDoBreak_route_L12
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: bytes = (txna ApplicationArgs 1)
        let value_len%1#0: uint64 = (len tmp%14#0)
        let size_is_correct%1#0: bool = (== value_len%1#0 8u)
        (assert size_is_correct%1#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%1#0: bytes[8] = tmp%14#0
        let tmp%15#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%16#0: bytes = (txna ApplicationArgs 2)
        let value_len%2#0: uint64 = (len tmp%16#0)
        let size_is_correct%2#0: bool = (== value_len%2#0 8u)
        (assert size_is_correct%2#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%2#0: bytes[8] = tmp%16#0
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let to_encode%1#0: uint64 = tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoBreak(tmp%15#0, tmp%17#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%18#0)
        return 1u
    block@4: // testDoContinue_route_L23
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let tmp%23#0: bytes = (txna ApplicationArgs 1)
        let value_len%3#0: uint64 = (len tmp%23#0)
        let size_is_correct%3#0: bool = (== value_len%3#0 8u)
        (assert size_is_correct%3#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%3#0: bytes[8] = tmp%23#0
        let tmp%24#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let tmp%25#0: bytes = (txna ApplicationArgs 2)
        let value_len%4#0: uint64 = (len tmp%25#0)
        let size_is_correct%4#0: bool = (== value_len%4#0 8u)
        (assert size_is_correct%4#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%4#0: bytes[8] = tmp%25#0
        let tmp%26#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let to_encode%2#0: uint64 = tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoContinue(tmp%24#0, tmp%26#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%27#0)
        return 1u
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        goto block@11
    block@7: // bare_routing_L4
        let tmp%28#0: uint64 = (txn OnCompletion)
        switch tmp%28#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L4
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (== tmp%29#0 0u)
        (assert tmp%30#0) // can only call when creating
        tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__algots__.defaultCreate()
        return 1u
    block@9: // switch_case_default_L4
        goto block@10
    block@10: // switch_case_next_L4
        goto block@11
    block@11: // after_if_else_L4
        return 0u

subroutine tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDo(stop: uint64) -> uint64:
    block@0: // L5
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L7
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@4)
        goto 1u ? block@2 : block@5
    block@2: // while_body_L7
        let i#2: uint64 = (+ i#1 1u)
        let tmp%0#0: bool = (< i#2 stop#0)
        goto tmp%0#0 ? block@4 : block@3
    block@3: // if_body_L7
        goto block@6
    block@4: // after_if_else_L7
        goto block@1
    block@5: // after_while_L7
        goto block@6
    block@6: // L7
        let i#3: uint64 = φ(i#2 <- block@3, i#1 <- block@5)
        return i#3

subroutine tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoBreak(stop: uint64, breakMod: uint64) -> uint64:
    block@0: // L12
        let total#0: uint64 = 0u
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L15
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@7)
        let total#2: uint64 = φ(total#0 <- block@0, total#3 <- block@7)
        goto 1u ? block@2 : block@8
    block@2: // while_body_L15
        let tmp%0#0: bool = (> i#1 0u)
        goto tmp%0#0 ? block@3 : block@5
    block@3: // and_contd_L16
        let tmp%1#0: uint64 = (% i#1 breakMod#0)
        let tmp%2#0: bool = (== tmp%1#0 0u)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // if_body_L16
        goto block@9
    block@5: // after_if_else_L16
        let i#3: uint64 = (+ i#1 1u)
        let total#3: uint64 = (+ total#2 i#3)
        let tmp%3#0: bool = (< i#3 stop#0)
        goto tmp%3#0 ? block@7 : block@6
    block@6: // if_body_L15
        goto block@9
    block@7: // after_if_else_L15
        goto block@1
    block@8: // after_while_L15
        goto block@9
    block@9: // L15
        let total#4: uint64 = φ(total#2 <- block@4, total#3 <- block@6, total#2 <- block@8)
        return total#4

subroutine tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoContinue(stop: uint64, mod: uint64) -> uint64:
    block@0: // L23
        let i#0: uint64 = 0u
        let total#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L26
        let i#1: uint64 = φ(i#0 <- block@0, i#5 <- block@8)
        let total#1: uint64 = φ(total#0 <- block@0, total#5 <- block@8)
        goto 1u ? block@2 : block@9
    block@2: // while_body_L26
        let tmp%0#0: bool = (> i#1 0u)
        goto tmp%0#0 ? block@3 : block@5
    block@3: // and_contd_L27
        let tmp%1#0: uint64 = (% i#1 mod#0)
        let tmp%2#0: bool = (== tmp%1#0 0u)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // if_body_L27
        let total#2: uint64 = (+ total#1 2u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@6
    block@5: // after_if_else_L27
        let total#4: uint64 = (+ total#1 1u)
        let i#4: uint64 = (+ i#1 1u)
        goto block@6
    block@6: // L26
        let i#5: uint64 = φ(i#2 <- block@4, i#4 <- block@5)
        let total#5: uint64 = φ(total#2 <- block@4, total#4 <- block@5)
        let tmp%3#0: bool = (< i#5 stop#0)
        goto tmp%3#0 ? block@8 : block@7
    block@7: // if_body_L26
        goto block@10
    block@8: // after_if_else_L26
        goto block@1
    block@9: // after_while_L26
        goto block@10
    block@10: // L26
        let total#6: uint64 = φ(total#5 <- block@7, total#1 <- block@9)
        return total#6

subroutine tests/approvals/do-loops.algo.ts::DoLoopsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 