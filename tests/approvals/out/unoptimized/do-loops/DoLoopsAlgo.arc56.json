{
    "name": "DoLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testDo",
            "args": [
                {
                    "type": "uint64",
                    "name": "stop"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDoBreak",
            "args": [
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "breakMod"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDoContinue",
            "args": [
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "mod"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        56,
                        86,
                        116
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        61,
                        91,
                        121
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmAQQVH3x1MRsiE0EAdzYaAIAEOSOXkoAErOLrIYAEeOjVFk8DjgMAPgAgAAIiQzEZIhJEMRgiE0Q2GgEXNhoCF4gArxYoTFCwI0L/4TEZIhJEMRgiE0Q2GgEXNhoCF4gAWRYoTFCwI0L/wzEZIhJEMRgiE0Q2GgEXiAAgFihMULAjQv+pMRkiTI4BAANC/50xGCISRIgApCNC/5KKAQEiI0EAFIsAIwhJjACL/wxAAASLAEyJQv/oQv/2igIBIkkjQQAsiwEiDUEAC4sBi/8YIhJBAAGJiwEjCEmMAYsASwEIjACL/gxAAANC/+hC/9BC/+KKAgEiSSNBAD2LACINQQAniwCL/xgiEkEAHYsBgQIIjAGLACMIjACLAIv+DEAABYsBjACJQv/OiwEjCIwBiwAjCIwAQv/hQv/miQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}