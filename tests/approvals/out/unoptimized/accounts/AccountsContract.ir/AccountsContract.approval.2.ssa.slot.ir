main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L8
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getAccountInfo(account,asset)(byte[32],uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)" => block@3, method "otherAccount()void" => block@4, * => block@5}
    block@3: // getAccountInfo_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%8#0: account = ((txnas Accounts) tmp%7#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%10#0: uint64 = ((txnas Assets) tmp%9#0)
        let (tmp%11#0: bytes[32], tmp%12#0: uint64, tmp%13#0: uint64, tmp%14#0: bytes[32], tmp%15#0: uint64, tmp%16#0: uint64, tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: uint64, tmp%20#0: uint64, tmp%21#0: uint64, tmp%22#0: uint64, tmp%23#0: uint64, tmp%24#0: bool, tmp%25#0: bool) = tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(tmp%8#0, tmp%10#0)
        let aggregate%length%0#1: uint64 = (len tmp%11#0)
        let aggregate%lengths_equal%0#1: bool = (== aggregate%length%0#1 32u)
        (assert aggregate%lengths_equal%0#1) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#1: Encoded(uint8[32]) = tmp%11#0
        let aggregate%encoded%0#1: Encoded(uint8[32]) = (concat 0x aggregate%as_Encoded(uint8[32])%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%12#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%1#1: Encoded(uint8[32],uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%2#1: Encoded(uint8[32],uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%1#1: uint64 = (len tmp%14#0)
        let aggregate%lengths_equal%1#1: bool = (== aggregate%length%1#1 32u)
        (assert aggregate%lengths_equal%1#1) // invalid size
        let aggregate%as_Encoded(uint8[32])%1#1: Encoded(uint8[32]) = tmp%14#0
        let aggregate%encoded%3#1: Encoded(uint8[32],uint64,uint64,uint8[32]) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint8[32])%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%15#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%4#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64) = (concat aggregate%encoded%3#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%16#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%5#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64) = (concat aggregate%encoded%4#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%17#0)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%6#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64) = (concat aggregate%encoded%5#1 aggregate%as_Encoded(uint64)%4#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%18#0)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%7#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64) = (concat aggregate%encoded%6#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%19#0)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%encoded%8#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%7#1 aggregate%as_Encoded(uint64)%6#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%20#0)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%encoded%9#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%8#1 aggregate%as_Encoded(uint64)%7#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob tmp%21#0)
        let aggregate%as_Encoded(uint64)%8#1: Encoded(uint64) = aggregate%val_as_bytes%8#1
        let aggregate%encoded%10#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint64)%8#1)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob tmp%22#0)
        let aggregate%as_Encoded(uint64)%9#1: Encoded(uint64) = aggregate%val_as_bytes%9#1
        let aggregate%encoded%11#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%10#1 aggregate%as_Encoded(uint64)%9#1)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob tmp%23#0)
        let aggregate%as_Encoded(uint64)%10#1: Encoded(uint64) = aggregate%val_as_bytes%10#1
        let aggregate%encoded%12#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%11#1 aggregate%as_Encoded(uint64)%10#1)
        let aggregate%encoded_bit%0#1: bytes = (setbit 0x00 0u tmp%24#0)
        let aggregate%encoded%13#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1) = (concat aggregate%encoded%12#1 aggregate%encoded_bit%0#1)
        let aggregate%set_bit%0#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1) = (setbit aggregate%encoded%13#1 1217u tmp%25#0)
        let aggregate%encoded%14#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1) = (concat aggregate%set_bit%0#1 0x)
        let tmp%26#0: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1) = aggregate%encoded%14#1
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        let tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // otherAccount_route_L30
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        tests/approvals/accounts.algo.ts::AccountsContract.otherAccount()
        let tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L8
        goto block@6
    block@6: // switch_case_next_L8
        goto block@11
    block@7: // bare_routing_L8
        let tmp%32#0: uint64 = (txn OnCompletion)
        switch tmp%32#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L8
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (== tmp%33#0 0u)
        (assert tmp%34#0) // can only call when creating
        tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate()
        let tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L8
        goto block@10
    block@10: // switch_case_next_L8
        goto block@11
    block@11: // after_if_else_L8
        let tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#2 <- block@8, tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(account: account, asset: uint64) -> <bytes[32], uint64, uint64, bytes[32], uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, bool, bool>:
    block@0: // L9
        _puya_lib.util.ensure_budget(1400u, 0u)
        let reinterpret_bytes[32]%0#0: bytes[32] = account#0
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let (value%1#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) account#0)
        (assert check%1#0) // account funded
        let (value%2#0: account, check%2#0: bool) = ((acct_params_get AcctAuthAddr) account#0)
        (assert check%2#0) // account funded
        let reinterpret_bytes[32]%1#0: bytes[32] = value%2#0
        let (value%3#0: uint64, check%3#0: bool) = ((acct_params_get AcctTotalNumUint) account#0)
        (assert check%3#0) // account funded
        let (value%4#0: uint64, check%4#0: bool) = ((acct_params_get AcctTotalNumByteSlice) account#0)
        (assert check%4#0) // account funded
        let (value%5#0: uint64, check%5#0: bool) = ((acct_params_get AcctTotalExtraAppPages) account#0)
        (assert check%5#0) // account funded
        let (value%6#0: uint64, check%6#0: bool) = ((acct_params_get AcctTotalAppsCreated) account#0)
        (assert check%6#0) // account funded
        let (value%7#0: uint64, check%7#0: bool) = ((acct_params_get AcctTotalAppsOptedIn) account#0)
        (assert check%7#0) // account funded
        let (value%8#0: uint64, check%8#0: bool) = ((acct_params_get AcctTotalAssetsCreated) account#0)
        (assert check%8#0) // account funded
        let (value%9#0: uint64, check%9#0: bool) = ((acct_params_get AcctTotalAssets) account#0)
        (assert check%9#0) // account funded
        let (value%10#0: uint64, check%10#0: bool) = ((acct_params_get AcctTotalBoxes) account#0)
        (assert check%10#0) // account funded
        let (value%11#0: uint64, check%11#0: bool) = ((acct_params_get AcctTotalBoxBytes) account#0)
        (assert check%11#0) // account funded
        let tmp%0#0: uint64 = (global CurrentApplicationID)
        let tmp%1#0: bool = (app_opted_in account#0 tmp%0#0)
        let (tmp%2#0: uint64, tmp%3#0: bool) = ((asset_holding_get AssetBalance) account#0 asset#0)
        return reinterpret_bytes[32]%0#0 value%0#0 value%1#0 reinterpret_bytes[32]%1#0 value%3#0 value%4#0 value%5#0 value%6#0 value%7#0 value%8#0 value%9#0 value%10#0 value%11#0 tmp%1#0 tmp%3#0

subroutine tests/approvals/accounts.algo.ts::AccountsContract.otherAccount() -> void:
    block@0: // L30
        return 

subroutine tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 