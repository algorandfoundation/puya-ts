main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let required_budget_with_buffer#0: uint64 = (+ required_budget#0 10u)
        goto block@1
    block@1: // while_top_L20
        let tmp%0#0: uint64 = (global OpcodeBudget)
        let tmp%1#0: bool = (> required_budget_with_buffer#0 tmp%0#0)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%2#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%2#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__() -> bool:
    block@0: // L8
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getAccountInfo(account,asset)(byte[32],uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)" => block@2, method "otherAccount()void" => block@3, * => block@4}
    block@2: // getAccountInfo_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%8#0: bytes[32] = ((txnas Accounts) tmp%7#0)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%9#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let tmp%10#0: uint64 = ((txnas Assets) tmp%9#0)
        let (elements_to_encode%0#0: bytes[32], elements_to_encode%1#0: uint64, elements_to_encode%2#0: uint64, elements_to_encode%3#0: bytes[32], elements_to_encode%4#0: uint64, elements_to_encode%5#0: uint64, elements_to_encode%6#0: uint64, elements_to_encode%7#0: uint64, elements_to_encode%8#0: uint64, elements_to_encode%9#0: uint64, elements_to_encode%10#0: uint64, elements_to_encode%11#0: uint64, elements_to_encode%12#0: uint64, elements_to_encode%13#0: bool, elements_to_encode%14#0: bool) = tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(tmp%8#0, tmp%10#0)
        let length%0#0: uint64 = (len elements_to_encode%0#0)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%2#0)
        let length%1#0: uint64 = (len elements_to_encode%3#0)
        let lengths_equal%1#0: bool = (== length%1#0 32u)
        (assert lengths_equal%1#0) // invalid size
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%4#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%5#0)
        let val_as_bytes%4#0: bytes[8] = (itob elements_to_encode%6#0)
        let val_as_bytes%5#0: bytes[8] = (itob elements_to_encode%7#0)
        let val_as_bytes%6#0: bytes[8] = (itob elements_to_encode%8#0)
        let val_as_bytes%7#0: bytes[8] = (itob elements_to_encode%9#0)
        let val_as_bytes%8#0: bytes[8] = (itob elements_to_encode%10#0)
        let val_as_bytes%9#0: bytes[8] = (itob elements_to_encode%11#0)
        let val_as_bytes%10#0: bytes[8] = (itob elements_to_encode%12#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u elements_to_encode%13#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u elements_to_encode%14#0)
        let current_tail_offset%0#0: uint64 = 153u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 elements_to_encode%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 elements_to_encode%3#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 val_as_bytes%3#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%4#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%5#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 val_as_bytes%6#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%7#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 val_as_bytes%8#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 val_as_bytes%9#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 val_as_bytes%10#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_bool%0#0)
        let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
        let encoded_tuple_buffer%15#0: bytes = (setbit encoded_tuple_buffer%14#0 1217u is_true%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%15#0)
        (log tmp%11#0)
        return 1u
    block@3: // otherAccount_route_L30
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        tests/approvals/accounts.algo.ts::AccountsContract.otherAccount()
        return 1u
    block@4: // switch_case_default_L8
        goto block@5
    block@5: // switch_case_next_L8
        goto block@10
    block@6: // bare_routing_L8
        let tmp%16#0: uint64 = (txn OnCompletion)
        switch tmp%16#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L8
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (== tmp%17#0 0u)
        (assert tmp%18#0) // can only call when creating
        tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L8
        goto block@9
    block@9: // switch_case_next_L8
        goto block@10
    block@10: // after_if_else_L8
        return 0u

subroutine tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(account: bytes[32], asset: uint64) -> <bytes[32], uint64, uint64, bytes[32], uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, bool, bool>:
    block@0: // L9
        _puya_lib.util.ensure_budget(1400u, 0u)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let (value%1#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) account#0)
        (assert check%1#0) // account funded
        let (value%2#0: bytes[32], check%2#0: bool) = ((acct_params_get AcctAuthAddr) account#0)
        (assert check%2#0) // account funded
        let (value%3#0: uint64, check%3#0: bool) = ((acct_params_get AcctTotalNumUint) account#0)
        (assert check%3#0) // account funded
        let (value%4#0: uint64, check%4#0: bool) = ((acct_params_get AcctTotalNumByteSlice) account#0)
        (assert check%4#0) // account funded
        let (value%5#0: uint64, check%5#0: bool) = ((acct_params_get AcctTotalExtraAppPages) account#0)
        (assert check%5#0) // account funded
        let (value%6#0: uint64, check%6#0: bool) = ((acct_params_get AcctTotalAppsCreated) account#0)
        (assert check%6#0) // account funded
        let (value%7#0: uint64, check%7#0: bool) = ((acct_params_get AcctTotalAppsOptedIn) account#0)
        (assert check%7#0) // account funded
        let (value%8#0: uint64, check%8#0: bool) = ((acct_params_get AcctTotalAssetsCreated) account#0)
        (assert check%8#0) // account funded
        let (value%9#0: uint64, check%9#0: bool) = ((acct_params_get AcctTotalAssets) account#0)
        (assert check%9#0) // account funded
        let (value%10#0: uint64, check%10#0: bool) = ((acct_params_get AcctTotalBoxes) account#0)
        (assert check%10#0) // account funded
        let (value%11#0: uint64, check%11#0: bool) = ((acct_params_get AcctTotalBoxBytes) account#0)
        (assert check%11#0) // account funded
        let tmp%0#0: uint64 = (global CurrentApplicationID)
        let tmp%1#0: bool = (app_opted_in account#0 tmp%0#0)
        let (tmp%2#0: uint64, tmp%3#0: bool) = ((asset_holding_get AssetBalance) account#0 asset#0)
        return account#0 value%0#0 value%1#0 value%2#0 value%3#0 value%4#0 value%5#0 value%6#0 value%7#0 value%8#0 value%9#0 value%10#0 value%11#0 tmp%1#0 tmp%3#0

subroutine tests/approvals/accounts.algo.ts::AccountsContract.otherAccount() -> void:
    block@0: // L30
        return 

subroutine tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 