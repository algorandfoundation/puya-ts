main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine tests/approvals/accounts.algo.ts::AccountsContract.__puya_arc4_router__() -> bool:
    block@0: // L8
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L8
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L8
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getAccountInfo(address,uint64)(byte[32],uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)" => block@3, method "otherAccount()void" => block@4, * => block@5}
    block@3: // getAccountInfo_route_L9
        tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo[routing]()
        goto block@5
    block@4: // otherAccount_route_L30
        tests/approvals/accounts.algo.ts::AccountsContract.otherAccount[routing]()
        goto block@5
    block@5: // switch_case_next_L8
        goto block@7
    block@6: // create_NoOp_L8
        goto block@7
    block@7: // after_if_else_L8
        goto block@9
    block@8: // __algots__.defaultCreate_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate()
        exit 1u
    block@9: // after_if_else_L8
        exit 0u

subroutine tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo[routing]() -> void:
    block@0: // L9
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%2#0: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1) = tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(tmp%0#0, tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/accounts.algo.ts::AccountsContract.otherAccount[routing]() -> void:
    block@0: // L30
        tests/approvals/accounts.algo.ts::AccountsContract.otherAccount()
        exit 1u

subroutine tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(account: account, asset: uint64) -> Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1):
    block@0: // L9
        _puya_lib.util.ensure_budget(1400u, 0u)
        let reinterpret_bytes[32]%0#0: bytes[32] = account#0
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let (value%1#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) account#0)
        (assert check%1#0) // account funded
        let (value%2#0: account, check%2#0: bool) = ((acct_params_get AcctAuthAddr) account#0)
        (assert check%2#0) // account funded
        let reinterpret_bytes[32]%1#0: bytes[32] = value%2#0
        let (value%3#0: uint64, check%3#0: bool) = ((acct_params_get AcctTotalNumUint) account#0)
        (assert check%3#0) // account funded
        let (value%4#0: uint64, check%4#0: bool) = ((acct_params_get AcctTotalNumByteSlice) account#0)
        (assert check%4#0) // account funded
        let (value%5#0: uint64, check%5#0: bool) = ((acct_params_get AcctTotalExtraAppPages) account#0)
        (assert check%5#0) // account funded
        let (value%6#0: uint64, check%6#0: bool) = ((acct_params_get AcctTotalAppsCreated) account#0)
        (assert check%6#0) // account funded
        let (value%7#0: uint64, check%7#0: bool) = ((acct_params_get AcctTotalAppsOptedIn) account#0)
        (assert check%7#0) // account funded
        let (value%8#0: uint64, check%8#0: bool) = ((acct_params_get AcctTotalAssetsCreated) account#0)
        (assert check%8#0) // account funded
        let (value%9#0: uint64, check%9#0: bool) = ((acct_params_get AcctTotalAssets) account#0)
        (assert check%9#0) // account funded
        let (value%10#0: uint64, check%10#0: bool) = ((acct_params_get AcctTotalBoxes) account#0)
        (assert check%10#0) // account funded
        let (value%11#0: uint64, check%11#0: bool) = ((acct_params_get AcctTotalBoxBytes) account#0)
        (assert check%11#0) // account funded
        let tmp%0#0: uint64 = (global CurrentApplicationID)
        let tmp%1#0: bool = (app_opted_in account#0 tmp%0#0)
        let (tmp%2#0: uint64, tmp%3#0: bool) = ((asset_holding_get AssetBalance) account#0 asset#0)
        let tmp%4#0: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1) = bytes_encode<(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1)>(reinterpret_bytes[32]%0#0, value%0#0, value%1#0, reinterpret_bytes[32]%1#0, value%3#0, value%4#0, value%5#0, value%6#0, value%7#0, value%8#0, value%9#0, value%10#0, value%11#0, tmp%1#0, tmp%3#0)
        return tmp%4#0

subroutine tests/approvals/accounts.algo.ts::AccountsContract.otherAccount() -> void:
    block@0: // L30
        return 

subroutine tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 