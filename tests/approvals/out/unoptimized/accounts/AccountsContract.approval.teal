#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 32
    bytecblock 0x068101
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/accounts.algo.ts:8
    // export class AccountsContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@9
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/accounts.algo.ts:8
    // export class AccountsContract extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@7
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/accounts.algo.ts:8
    // export class AccountsContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x0adee59f // method "getAccountInfo(address,uint64)(byte[32],uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)"
    pushbytes 0xf62943d1 // method "otherAccount()void"
    uncover 2
    match main_getAccountInfo_route@4 main_otherAccount_route@5
    b main_switch_case_next@6

main_switch_case_next@6:
    b main_after_if_else@8

main_after_if_else@8:
    b main_after_if_else@10

main_after_if_else@10:
    // tests/approvals/accounts.algo.ts:8
    // export class AccountsContract extends Contract {
    err

main_otherAccount_route@5:
    // tests/approvals/accounts.algo.ts:30
    // public otherAccount() {
    callsub otherAccount
    b main_switch_case_next@6

main_getAccountInfo_route@4:
    // tests/approvals/accounts.algo.ts:9
    // public getAccountInfo(account: Account, asset: Asset) {
    callsub getAccountInfo
    b main_switch_case_next@6

main_create_NoOp@7:
    b main_after_if_else@8

main___algots__.defaultCreate@9:
    // tests/approvals/accounts.algo.ts:8
    // export class AccountsContract extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    b ensure_budget_block@0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +
    b ensure_budget_while_top@1

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@6
    b ensure_budget_while_body@2

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_0 // 0x068101
    itxn_field ApprovalProgram
    bytec_0 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo[routing]() -> void:
getAccountInfo:
    b getAccountInfo_block@0

getAccountInfo_block@0:
    // tests/approvals/accounts.algo.ts:9
    // public getAccountInfo(account: Account, asset: Asset) {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    callsub tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/accounts.algo.ts::AccountsContract.otherAccount[routing]() -> void:
otherAccount:
    b otherAccount_block@0

otherAccount_block@0:
    // tests/approvals/accounts.algo.ts:30
    // public otherAccount() {
    callsub tests/approvals/accounts.algo.ts::AccountsContract.otherAccount
    intc_1 // 1
    return


// tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo(account: bytes, asset: uint64) -> bytes:
tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo:
    // tests/approvals/accounts.algo.ts:9
    // public getAccountInfo(account: Account, asset: Asset) {
    proto 2 1
    b tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo_block@0

tests/approvals/accounts.algo.ts::AccountsContract.getAccountInfo_block@0:
    // tests/approvals/accounts.algo.ts:10
    // ensureBudget(1400)
    pushint 1400 // 1400
    intc_0 // 0
    callsub ensure_budget
    // tests/approvals/accounts.algo.ts:12
    // bytes: account.bytes,
    frame_dig -2
    // tests/approvals/accounts.algo.ts:13
    // balance: account.balance,
    frame_dig -2
    acct_params_get AcctBalance
    cover 1
    cover 2
    assert // account funded
    // tests/approvals/accounts.algo.ts:14
    // minBalance: account.minBalance,
    frame_dig -2
    acct_params_get AcctMinBalance
    cover 1
    cover 3
    assert // account funded
    // tests/approvals/accounts.algo.ts:15
    // authAddress: account.authAddress.bytes,
    frame_dig -2
    acct_params_get AcctAuthAddr
    assert // account funded
    cover 2
    // tests/approvals/accounts.algo.ts:16
    // totalNumUint: account.totalNumUint,
    frame_dig -2
    acct_params_get AcctTotalNumUint
    cover 1
    cover 5
    assert // account funded
    // tests/approvals/accounts.algo.ts:17
    // totalNumByteSlice: account.totalNumByteSlice,
    frame_dig -2
    acct_params_get AcctTotalNumByteSlice
    cover 1
    cover 6
    assert // account funded
    // tests/approvals/accounts.algo.ts:18
    // totalExtraAppPages: account.totalExtraAppPages,
    frame_dig -2
    acct_params_get AcctTotalExtraAppPages
    cover 1
    cover 7
    assert // account funded
    // tests/approvals/accounts.algo.ts:19
    // totalAppsCreated: account.totalAppsCreated,
    frame_dig -2
    acct_params_get AcctTotalAppsCreated
    cover 1
    cover 8
    assert // account funded
    // tests/approvals/accounts.algo.ts:20
    // totalAppsOptedIn: account.totalAppsOptedIn,
    frame_dig -2
    acct_params_get AcctTotalAppsOptedIn
    cover 1
    cover 9
    assert // account funded
    // tests/approvals/accounts.algo.ts:21
    // totalAssetsCreated: account.totalAssetsCreated,
    frame_dig -2
    acct_params_get AcctTotalAssetsCreated
    cover 1
    cover 10
    assert // account funded
    // tests/approvals/accounts.algo.ts:22
    // totalAssets: account.totalAssets,
    frame_dig -2
    acct_params_get AcctTotalAssets
    cover 1
    cover 11
    assert // account funded
    // tests/approvals/accounts.algo.ts:23
    // totalBoxes: account.totalBoxes,
    frame_dig -2
    acct_params_get AcctTotalBoxes
    cover 1
    cover 12
    assert // account funded
    // tests/approvals/accounts.algo.ts:24
    // totalBoxBytes: account.totalBoxBytes,
    frame_dig -2
    acct_params_get AcctTotalBoxBytes
    cover 1
    cover 13
    assert // account funded
    // tests/approvals/accounts.algo.ts:25
    // isOptInApp: account.isOptedIn(Global.currentApplicationId),
    global CurrentApplicationID
    frame_dig -2
    uncover 1
    app_opted_in
    cover 13
    // tests/approvals/accounts.algo.ts:26
    // isOptInAsset: account.isOptedIn(asset),
    frame_dig -2
    frame_dig -1
    asset_holding_get AssetBalance
    cover 15
    cover 15
    // tests/approvals/accounts.algo.ts:11-27
    // return {
    //   bytes: account.bytes,
    //   balance: account.balance,
    //   minBalance: account.minBalance,
    //   authAddress: account.authAddress.bytes,
    //   totalNumUint: account.totalNumUint,
    //   totalNumByteSlice: account.totalNumByteSlice,
    //   totalExtraAppPages: account.totalExtraAppPages,
    //   totalAppsCreated: account.totalAppsCreated,
    //   totalAppsOptedIn: account.totalAppsOptedIn,
    //   totalAssetsCreated: account.totalAssetsCreated,
    //   totalAssets: account.totalAssets,
    //   totalBoxes: account.totalBoxes,
    //   totalBoxBytes: account.totalBoxBytes,
    //   isOptInApp: account.isOptedIn(Global.currentApplicationId),
    //   isOptInAsset: account.isOptedIn(asset),
    // }
    dup
    len
    intc_2 // 32
    ==
    assert // invalid size
    pushbytes 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 2
    itob
    concat
    dig 1
    len
    intc_2 // 32
    ==
    assert // invalid size
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    pushbytes 0x00
    intc_0 // 0
    uncover 3
    setbit
    intc_1 // 1
    uncover 3
    setbit
    concat
    uncover 1
    retsub


// tests/approvals/accounts.algo.ts::AccountsContract.otherAccount() -> void:
tests/approvals/accounts.algo.ts::AccountsContract.otherAccount:
    b tests/approvals/accounts.algo.ts::AccountsContract.otherAccount_block@0

tests/approvals/accounts.algo.ts::AccountsContract.otherAccount_block@0:
    retsub


// tests/approvals/accounts.algo.ts::AccountsContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
