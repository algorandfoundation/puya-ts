{
    "name": "MyContract",
    "structs": {
        "XY": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "YX": [
            {
                "name": "y",
                "type": "uint64"
            },
            {
                "name": "x",
                "type": "uint64"
            }
        ],
        "getAnonResult": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getXY",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "XY"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getYX",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "YX"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAnon",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "getAnonResult"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "XY",
                    "name": "x"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "YX",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testing",
            "args": [],
            "returns": {
                "type": "((uint64,uint64),(uint64,uint64),(uint64,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        157,
                        162,
                        170,
                        175
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        74,
                        145,
                        196,
                        227,
                        258
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        343
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        300
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        79,
                        150,
                        201,
                        232,
                        263
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEIJgIABBUffHUxGyITQQEINhoAgATwIiiwgATZCFdbgARXex/8gATcdfgdgAQEDi5OTwWOBQC6AJsAfABJAAIiQzEZIhJEMRgiE0SIAQpOBU4ETgNOAkwWTBZMKExQTFBOAhZMFkwoTFBMUE8CFk8DFkwoTFBMUChPA1BPAlBMUClMULAjQv+4MRkiEkQxGCITRDYaAUkiJFgXTCRJWBc2GgJJIiRYF0wkSVgXTwNPA08DTwOIAIcjQv+FMRkiEkQxGCITRIgAcUwWTBZMKExQTFApTFCwI0L/ZjEZIhJEMRgiE0SIAExMFkwWTChMUExQKUxQsCNC/0cxGSISRDEYIhNEiAApTBZMFkwoTFBMUClMULAjQv8oMRkiTI4BAANC/xwxGCISRIgATiNC/xEjgQKJgW+B3gGJgQOBBImKBACL/Yv+EkEAC4v8i/8SQQADI0SJIkL/+oj/1EyI/9ROAoj/1UiI/9FOAkhMTwNPBU8ETwVPBU8FiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}