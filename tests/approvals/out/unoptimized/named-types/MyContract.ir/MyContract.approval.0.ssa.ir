main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__() -> bool:
    block@0: // L14
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getXY()(uint64,uint64)" => block@2, method "getYX()(uint64,uint64)" => block@3, method "getAnon()(uint64,uint64)" => block@4, method "test((uint64,uint64),(uint64,uint64))void" => block@5, method "testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))" => block@6, * => block@7}
    block@2: // getXY_route_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getXY()
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%1#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%7#0)
        return 1u
    block@3: // getYX_route_L22
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let (elements_to_encode%2#0: uint64, elements_to_encode%3#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getYX()
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%3#0)
        let current_tail_offset%1#0: uint64 = 16u
        let encoded_tuple_buffer%3#0: bytes[0] = 0x
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%5#0)
        (log tmp%12#0)
        return 1u
    block@4: // getAnon_route_L29
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let (elements_to_encode%4#0: uint64, elements_to_encode%5#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getAnon()
        let val_as_bytes%4#0: bytes[8] = (itob elements_to_encode%4#0)
        let val_as_bytes%5#0: bytes[8] = (itob elements_to_encode%5#0)
        let current_tail_offset%2#0: uint64 = 16u
        let encoded_tuple_buffer%6#0: bytes[0] = 0x
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%4#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%5#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%8#0)
        (log tmp%17#0)
        return 1u
    block@5: // test_route_L36
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_bytes[16]%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 reinterpret_bytes[16]%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%0%0#0: uint64 = (btoi item1%0#0)
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 2)
        let item0%1#0: bytes = (extract3 reinterpret_bytes[16]%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item1%1#0: bytes = (extract3 reinterpret_bytes[16]%1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1%0#0: uint64 = (btoi item1%1#0)
        tests/approvals/named-types.algo.ts::MyContract.test(item0%0%0#0, item1%0%0#0, item0%1%0#0, item1%1%0#0)
        return 1u
    block@6: // testing_route_L40
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let (elements_to_encode%6#0: uint64, elements_to_encode%7#0: uint64, elements_to_encode%8#0: uint64, elements_to_encode%9#0: uint64, elements_to_encode%10#0: uint64, elements_to_encode%11#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.testing()
        let val_as_bytes%6#0: bytes[8] = (itob elements_to_encode%6#0)
        let val_as_bytes%7#0: bytes[8] = (itob elements_to_encode%7#0)
        let current_tail_offset%3#0: uint64 = 16u
        let encoded_tuple_buffer%9#0: bytes[0] = 0x
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%6#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 val_as_bytes%7#0)
        let val_as_bytes%8#0: bytes[8] = (itob elements_to_encode%8#0)
        let val_as_bytes%9#0: bytes[8] = (itob elements_to_encode%9#0)
        let current_tail_offset%4#0: uint64 = 16u
        let encoded_tuple_buffer%12#0: bytes[0] = 0x
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 val_as_bytes%8#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 val_as_bytes%9#0)
        let val_as_bytes%10#0: bytes[8] = (itob elements_to_encode%10#0)
        let val_as_bytes%11#0: bytes[8] = (itob elements_to_encode%11#0)
        let current_tail_offset%5#0: uint64 = 16u
        let encoded_tuple_buffer%15#0: bytes[0] = 0x
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 val_as_bytes%10#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 val_as_bytes%11#0)
        let current_tail_offset%6#0: uint64 = 48u
        let encoded_tuple_buffer%18#0: bytes[0] = 0x
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_tuple_buffer%11#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 encoded_tuple_buffer%14#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 encoded_tuple_buffer%17#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%21#0)
        (log tmp%26#0)
        return 1u
    block@7: // switch_case_default_L14
        goto block@8
    block@8: // switch_case_next_L14
        goto block@13
    block@9: // bare_routing_L14
        let tmp%27#0: uint64 = (txn OnCompletion)
        switch tmp%27#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L14
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (== tmp%28#0 0u)
        (assert tmp%29#0) // can only call when creating
        tests/approvals/named-types.algo.ts::MyContract.__algots__.defaultCreate()
        return 1u
    block@11: // switch_case_default_L14
        goto block@12
    block@12: // switch_case_next_L14
        goto block@13
    block@13: // after_if_else_L14
        return 0u

subroutine tests/approvals/named-types.algo.ts::MyContract.getXY() -> <uint64, uint64>:
    block@0: // L15
        return 1u 2u

subroutine tests/approvals/named-types.algo.ts::MyContract.getYX() -> <uint64, uint64>:
    block@0: // L22
        return 111u 222u

subroutine tests/approvals/named-types.algo.ts::MyContract.getAnon() -> <uint64, uint64>:
    block@0: // L29
        return 3u 4u

subroutine tests/approvals/named-types.algo.ts::MyContract.test(x.x: uint64, x.y: uint64, y.y: uint64, y.x: uint64) -> void:
    block@0: // L36
        let tmp%0#0: bool = (== x.y#0 y.y#0)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L37
        let tmp%1#0: bool = (== x.x#0 y.x#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L37
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L37
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L37
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/named-types.algo.ts::MyContract.testing() -> <uint64, uint64, uint64, uint64, uint64, uint64>:
    block@0: // L40
        let (a.x#0: uint64, a.y#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getXY()
        let (b.y#0: uint64, b.x#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getYX()
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getAnon()
        let (awst_tmp%2#0: uint64, awst_tmp%3#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getAnon()
        let (c.x#0: uint64, c.y#0: uint64) = (awst_tmp%0#0, awst_tmp%3#0)
        return a.x#0 a.y#0 b.y#0 b.x#0 c.x#0 c.y#0

subroutine tests/approvals/named-types.algo.ts::MyContract.__algots__.defaultCreate() -> void:
    block@0: // L14
        return 