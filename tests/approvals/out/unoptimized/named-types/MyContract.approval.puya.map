{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/named-types.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;AAaA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;AA0BE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtBF;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBE;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAGS;AACA;;AAFL;AASK;;AADA;;;AADL;AAQY;;AACA;;AAFZ;AAMF;;;AACE;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;;;;;;AAIU;;;AAAJ;AACI;;;AAAJ;;AACI;;;AAAA;AAAA;;;AAAA;;AAAA;AAAJ;AACN;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8"
    },
    "6": {
      "op": "bytecblock 0x 0x151f7c75"
    },
    "14": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "16": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "17": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0xf02228b0 // method \"getXY()(uint64,uint64)\"",
      "defined_out": [
        "Method(getXY()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(getXY()(uint64,uint64))"
      ]
    },
    "30": {
      "op": "pushbytes 0xd908575b // method \"getYX()(uint64,uint64)\"",
      "defined_out": [
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))"
      ]
    },
    "36": {
      "op": "pushbytes 0x577b1ffc // method \"getAnon()(uint64,uint64)\"",
      "defined_out": [
        "Method(getAnon()(uint64,uint64))",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "Method(getAnon()(uint64,uint64))"
      ]
    },
    "42": {
      "op": "pushbytes 0xdc75f81d // method \"test((uint64,uint64),(uint64,uint64))void\"",
      "defined_out": [
        "Method(getAnon()(uint64,uint64))",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "Method(test((uint64,uint64),(uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "Method(getAnon()(uint64,uint64))",
        "Method(test((uint64,uint64),(uint64,uint64))void)"
      ]
    },
    "48": {
      "op": "pushbytes 0x040e2e4e // method \"testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))\"",
      "defined_out": [
        "Method(getAnon()(uint64,uint64))",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "Method(test((uint64,uint64),(uint64,uint64))void)",
        "Method(testing()((uint64,uint64),(uint64,uint64),(uint64,uint64)))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "Method(getAnon()(uint64,uint64))",
        "Method(test((uint64,uint64),(uint64,uint64))void)",
        "Method(testing()((uint64,uint64),(uint64,uint64),(uint64,uint64)))"
      ]
    },
    "54": {
      "op": "uncover 5",
      "stack_out": [
        "Method(getXY()(uint64,uint64))",
        "Method(getYX()(uint64,uint64))",
        "Method(getAnon()(uint64,uint64))",
        "Method(test((uint64,uint64),(uint64,uint64))void)",
        "Method(testing()((uint64,uint64),(uint64,uint64),(uint64,uint64)))",
        "tmp%2#0"
      ]
    },
    "56": {
      "op": "match main_getXY_route@3 main_getYX_route@4 main_getAnon_route@5 main_test_route@6 main_testing_route@7",
      "stack_out": []
    },
    "68": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "69": {
      "block": "main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "70": {
      "block": "main_testing_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "72": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "74": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "75": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "78": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "79": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "80": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.testing",
      "op": "callsub testing",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0"
      ]
    },
    "83": {
      "op": "cover 5",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0"
      ]
    },
    "85": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ]
    },
    "87": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ]
    },
    "89": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "91": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "elements_to_encode%7#0",
        "elements_to_encode%6#0"
      ]
    },
    "92": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "elements_to_encode%7#0",
        "val_as_bytes%6#0"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "94": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "95": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%7#0",
        "val_as_bytes%6#0"
      ]
    },
    "96": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%7#0",
        "val_as_bytes%6#0",
        "0x"
      ]
    },
    "97": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%7#0",
        "0x",
        "val_as_bytes%6#0"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%7#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "101": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0"
      ]
    },
    "103": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%9#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "elements_to_encode%9#0",
        "val_as_bytes%8#0"
      ]
    },
    "104": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%8#0",
        "elements_to_encode%9#0"
      ]
    },
    "105": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "106": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%9#0",
        "val_as_bytes%8#0"
      ]
    },
    "107": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%9#0",
        "val_as_bytes%8#0",
        "0x"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%9#0",
        "0x",
        "val_as_bytes%8#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%9#0"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "112": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "elements_to_encode%10#0"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%10#0"
      ]
    },
    "115": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%10#0",
        "elements_to_encode%11#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%11#0",
        "val_as_bytes%10#0"
      ]
    },
    "119": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%11#0",
        "val_as_bytes%10#0",
        "0x"
      ]
    },
    "120": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%11#0",
        "0x",
        "val_as_bytes%10#0"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%16#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%16#0",
        "val_as_bytes%11#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%17#0",
        "0x"
      ]
    },
    "125": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%17#0",
        "0x",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%17#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_tuple_buffer%17#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "128": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0"
      ]
    },
    "133": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "0x151f7c75"
      ]
    },
    "134": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "136": {
      "op": "log",
      "stack_out": []
    },
    "137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "138": {
      "op": "b main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15"
    },
    "141": {
      "block": "main_test_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "143": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "NoOp"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "149": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "154": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ]
    },
    "155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "156": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "157": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%0#0"
      ]
    },
    "158": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%0%0#0"
      ]
    },
    "159": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "160": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "161": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0",
        "8",
        "8"
      ]
    },
    "162": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "167": {
      "op": "dup",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0"
      ]
    },
    "169": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "170": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0",
        "item0%1#0"
      ]
    },
    "171": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[16]%1#0",
        "item0%1%0#0"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "173": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0",
        "8"
      ]
    },
    "174": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0",
        "8",
        "8"
      ]
    },
    "175": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0",
        "item1%1#0"
      ]
    },
    "176": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0%0#0",
        "item1%1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0",
        "item1%1%0#0"
      ]
    },
    "177": {
      "op": "uncover 3",
      "stack_out": [
        "item1%0%0#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item0%0%0#0"
      ]
    },
    "179": {
      "op": "uncover 3",
      "stack_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "181": {
      "op": "uncover 3",
      "stack_out": [
        "item1%1%0#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0"
      ]
    },
    "183": {
      "op": "uncover 3",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item0%1%0#0",
        "item1%1%0#0"
      ]
    },
    "185": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.test",
      "op": "callsub test",
      "stack_out": []
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "b main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15"
    },
    "192": {
      "block": "main_getAnon_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "194": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "195": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "200": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "201": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "202": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getAnon",
      "op": "callsub getAnon",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0"
      ]
    },
    "206": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%4#0"
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "208": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%4#0"
      ]
    },
    "210": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%4#0",
        "0x"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%5#0",
        "0x",
        "val_as_bytes%4#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%5#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "215": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "0x151f7c75"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "218": {
      "op": "log",
      "stack_out": []
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "b main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15"
    },
    "223": {
      "block": "main_getYX_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "225": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "227": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "228": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "231": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getYX",
      "op": "callsub getYX",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "236": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "237": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "239": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%3#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "244": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "246": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x151f7c75"
      ]
    },
    "247": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "249": {
      "op": "log",
      "stack_out": []
    },
    "250": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "251": {
      "op": "b main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15"
    },
    "254": {
      "block": "main_getXY_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "256": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "257": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "258": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "259": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "261": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "262": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "264": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getXY",
      "op": "callsub getXY",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "268": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "270": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "271": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "272": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "276": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "277": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "280": {
      "op": "log",
      "stack_out": []
    },
    "281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "282": {
      "op": "b main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15"
    },
    "285": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "287": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%27#0"
      ]
    },
    "289": {
      "op": "match main___algots__.defaultCreate@11",
      "stack_out": []
    },
    "293": {
      "block": "main_switch_case_next@13",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "296": {
      "block": "main___algots__.defaultCreate@11",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "298": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0"
      ]
    },
    "299": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "300": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "301": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "304": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "b main_after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__@15"
    },
    "308": {
      "subroutine": "tests/approvals/named-types.algo.ts::MyContract.getXY",
      "params": {},
      "block": "getXY",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "309": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "1",
        "2"
      ]
    },
    "311": {
      "retsub": true,
      "op": "retsub"
    },
    "312": {
      "subroutine": "tests/approvals/named-types.algo.ts::MyContract.getYX",
      "params": {},
      "block": "getYX",
      "stack_in": [],
      "op": "pushint 111 // 111",
      "defined_out": [
        "111"
      ],
      "stack_out": [
        "111"
      ]
    },
    "314": {
      "op": "pushint 222 // 222",
      "defined_out": [
        "111",
        "222"
      ],
      "stack_out": [
        "111",
        "222"
      ]
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "subroutine": "tests/approvals/named-types.algo.ts::MyContract.getAnon",
      "params": {},
      "block": "getAnon",
      "stack_in": [],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "320": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "3",
        "4"
      ],
      "stack_out": [
        "3",
        "4"
      ]
    },
    "322": {
      "retsub": true,
      "op": "retsub"
    },
    "323": {
      "subroutine": "tests/approvals/named-types.algo.ts::MyContract.test",
      "params": {
        "x.x#0": "uint64",
        "x.y#0": "uint64",
        "y.y#0": "uint64",
        "y.x#0": "uint64"
      },
      "block": "test",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "326": {
      "op": "frame_dig -3",
      "defined_out": [
        "x.y#0 (copy)"
      ],
      "stack_out": [
        "x.y#0 (copy)"
      ]
    },
    "328": {
      "op": "frame_dig -2",
      "defined_out": [
        "x.y#0 (copy)",
        "y.y#0 (copy)"
      ],
      "stack_out": [
        "x.y#0 (copy)",
        "y.y#0 (copy)"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "331": {
      "op": "bz test_bool_false@3",
      "stack_out": []
    },
    "334": {
      "block": "test_and_contd@1",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "x.x#0 (copy)"
      ],
      "stack_out": [
        "x.x#0 (copy)"
      ]
    },
    "336": {
      "op": "frame_dig -1",
      "defined_out": [
        "x.x#0 (copy)",
        "y.x#0 (copy)"
      ],
      "stack_out": [
        "x.x#0 (copy)",
        "y.x#0 (copy)"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "339": {
      "op": "bz test_bool_false@3",
      "stack_out": []
    },
    "342": {
      "block": "test_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "343": {
      "block": "test_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "344": {
      "retsub": true,
      "op": "retsub"
    },
    "345": {
      "block": "test_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "346": {
      "op": "b test_bool_merge@4"
    },
    "349": {
      "subroutine": "tests/approvals/named-types.algo.ts::MyContract.testing",
      "params": {},
      "block": "testing",
      "stack_in": [],
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getXY",
      "op": "callsub getXY",
      "defined_out": [
        "a.x#0",
        "a.y#0"
      ],
      "stack_out": [
        "a.x#0",
        "a.y#0"
      ]
    },
    "352": {
      "op": "swap",
      "stack_out": [
        "a.y#0",
        "a.x#0"
      ]
    },
    "353": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getYX",
      "op": "callsub getYX",
      "defined_out": [
        "a.x#0",
        "a.y#0",
        "b.x#0",
        "b.y#0"
      ],
      "stack_out": [
        "a.y#0",
        "a.x#0",
        "b.y#0",
        "b.x#0"
      ]
    },
    "356": {
      "op": "cover 2",
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0"
      ]
    },
    "358": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getAnon",
      "op": "callsub getAnon",
      "defined_out": [
        "a.x#0",
        "a.y#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "b.x#0",
        "b.y#0"
      ],
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "361": {
      "op": "pop",
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0",
        "awst_tmp%0#0"
      ]
    },
    "362": {
      "callsub": "tests/approvals/named-types.algo.ts::MyContract.getAnon",
      "op": "callsub getAnon",
      "defined_out": [
        "a.x#0",
        "a.y#0",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0",
        "b.x#0",
        "b.y#0"
      ],
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "365": {
      "op": "cover 2",
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0",
        "awst_tmp%3#0",
        "awst_tmp%0#0",
        "awst_tmp%2#0"
      ]
    },
    "367": {
      "op": "pop",
      "defined_out": [
        "a.x#0",
        "a.y#0",
        "awst_tmp%3#0",
        "b.x#0",
        "b.y#0",
        "c.x#0"
      ],
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0",
        "awst_tmp%3#0",
        "c.x#0"
      ]
    },
    "368": {
      "op": "swap",
      "defined_out": [
        "a.x#0",
        "a.y#0",
        "b.x#0",
        "b.y#0",
        "c.x#0",
        "c.y#0"
      ],
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "a.x#0",
        "b.y#0",
        "c.x#0",
        "c.y#0"
      ]
    },
    "369": {
      "op": "uncover 3",
      "stack_out": [
        "a.y#0",
        "b.x#0",
        "b.y#0",
        "c.x#0",
        "c.y#0",
        "a.x#0"
      ]
    },
    "371": {
      "op": "uncover 5",
      "stack_out": [
        "b.x#0",
        "b.y#0",
        "c.x#0",
        "c.y#0",
        "a.x#0",
        "a.y#0"
      ]
    },
    "373": {
      "op": "uncover 4",
      "stack_out": [
        "b.x#0",
        "c.x#0",
        "c.y#0",
        "a.x#0",
        "a.y#0",
        "b.y#0"
      ]
    },
    "375": {
      "op": "uncover 5",
      "stack_out": [
        "c.x#0",
        "c.y#0",
        "a.x#0",
        "a.y#0",
        "b.y#0",
        "b.x#0"
      ]
    },
    "377": {
      "op": "uncover 5",
      "stack_out": [
        "c.y#0",
        "a.x#0",
        "a.y#0",
        "b.y#0",
        "b.x#0",
        "c.x#0"
      ]
    },
    "379": {
      "op": "uncover 5",
      "stack_out": [
        "a.x#0",
        "a.y#0",
        "b.y#0",
        "b.x#0",
        "c.x#0",
        "c.y#0"
      ]
    },
    "381": {
      "retsub": true,
      "op": "retsub"
    },
    "382": {
      "subroutine": "tests/approvals/named-types.algo.ts::MyContract.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}