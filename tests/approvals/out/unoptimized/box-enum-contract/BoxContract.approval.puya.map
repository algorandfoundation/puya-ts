{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/box-enum-contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;AAUG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJH;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAM2C;AAAvC;AAL4C;AAK5C;AAAA;AACiC;;AAAjC;AALsC;AAKtC;AAAA;;AAKwB;AAAjB;AAAA;AAXqC;AAWY;AAAA;AAAA;AAAA;AAAA;AAAjB;AAAhC;AAAP;AACwB;AAAjB;AAAA;AAX+B;AAWkB;AAAA;AAAA;AAAA;AAAA;AAAjB;AAAhC;AAAP;AAZ4C;AAcN;AAAA;AAAA;AAAA;AAAA;AAArB;AAbqB;AAa6B;AAAA;AAAA;AAAA;AAAA;AAArB;AAAvC;;AAAA;;AAAA;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"oca\" \"txn\""
    },
    "15": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "17": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "18": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "22": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "pushbytes 0xf26c6d42 // method \"store_enums()void\"",
      "defined_out": [
        "Method(store_enums()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_enums()void)"
      ]
    },
    "31": {
      "op": "pushbytes 0xef186cf7 // method \"read_enums()(uint64,uint64)\"",
      "defined_out": [
        "Method(read_enums()(uint64,uint64))",
        "Method(store_enums()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_enums()void)",
        "Method(read_enums()(uint64,uint64))"
      ]
    },
    "37": {
      "op": "uncover 2",
      "stack_out": [
        "Method(store_enums()void)",
        "Method(read_enums()(uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "39": {
      "op": "match main_store_enums_route@3 main_read_enums_route@4",
      "stack_out": []
    },
    "45": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "46": {
      "block": "main_after_inlined_tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "47": {
      "block": "main_read_enums_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "49": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "50": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "51": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "54": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "55": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "56": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "57": {
      "callsub": "tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums",
      "op": "callsub readEnums",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "60": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "67": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "68": {
      "op": "log",
      "stack_out": []
    },
    "69": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "b main_after_inlined_tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__@12"
    },
    "73": {
      "block": "main_store_enums_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "75": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "76": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "80": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "81": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "82": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "83": {
      "callsub": "tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums",
      "op": "callsub storeEnums"
    },
    "86": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "b main_after_inlined_tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__@12"
    },
    "90": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "92": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%13#0"
      ]
    },
    "94": {
      "op": "match main___algots__.defaultCreate@8",
      "stack_out": []
    },
    "98": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "101": {
      "block": "main___algots__.defaultCreate@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "105": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "106": {
      "callsub": "tests/approvals/box-enum-contract.algo.ts::BoxContract.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "109": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "110": {
      "op": "b main_after_inlined_tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__@12"
    },
    "113": {
      "subroutine": "tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums",
      "params": {},
      "block": "storeEnums",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "115": {
      "op": "bytec_0 // \"oca\"",
      "defined_out": [
        "\"oca\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"oca\""
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "\"oca\"",
        "new_box_value%0#0"
      ]
    },
    "117": {
      "op": "box_put",
      "stack_out": []
    },
    "118": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "120": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "121": {
      "op": "bytec_1 // \"txn\"",
      "defined_out": [
        "\"txn\"",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "\"txn\""
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "\"txn\"",
        "new_box_value%1#0"
      ]
    },
    "123": {
      "op": "box_put",
      "stack_out": []
    },
    "124": {
      "retsub": true,
      "op": "retsub"
    },
    "125": {
      "subroutine": "tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums",
      "params": {},
      "block": "readEnums",
      "stack_in": [],
      "op": "bytec_0 // \"oca\"",
      "defined_out": [
        "\"oca\""
      ],
      "stack_out": [
        "\"oca\""
      ]
    },
    "126": {
      "op": "box_get",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "127": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "op": "bytec_0 // \"oca\"",
      "stack_out": [
        "tmp%0#0",
        "\"oca\""
      ]
    },
    "129": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "131": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "132": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "133": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "134": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "136": {
      "op": "assert",
      "stack_out": []
    },
    "137": {
      "op": "bytec_1 // \"txn\"",
      "defined_out": [
        "\"txn\""
      ],
      "stack_out": [
        "\"txn\""
      ]
    },
    "138": {
      "op": "box_get",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "139": {
      "op": "pop",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "140": {
      "op": "bytec_1 // \"txn\"",
      "stack_out": [
        "tmp%4#0",
        "\"txn\""
      ]
    },
    "141": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "143": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "145": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%4#0",
        "maybe_value_converted%1#0"
      ]
    },
    "146": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "147": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "148": {
      "op": "assert",
      "stack_out": []
    },
    "149": {
      "op": "bytec_0 // \"oca\"",
      "stack_out": [
        "\"oca\""
      ]
    },
    "150": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "151": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "152": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ]
    },
    "153": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%2#0",
        "maybe_exists%2#0"
      ]
    },
    "154": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%2#0"
      ]
    },
    "155": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "156": {
      "op": "bytec_1 // \"txn\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "\"txn\""
      ]
    },
    "157": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value_converted%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_exists%3#0",
        "maybe_value_converted%3#0"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value_converted%3#0",
        "maybe_exists%3#0"
      ]
    },
    "161": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value_converted%3#0"
      ]
    },
    "162": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "163": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "165": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "170": {
      "retsub": true,
      "op": "retsub"
    },
    "171": {
      "subroutine": "tests/approvals/box-enum-contract.algo.ts::BoxContract.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}