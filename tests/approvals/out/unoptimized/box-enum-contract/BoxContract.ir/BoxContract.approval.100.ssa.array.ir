main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "store_enums()void" => block@4, method "read_enums()(uint64,uint64)" => block@5, * => block@6}
    block@4: // store_enums_route_L8
        tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums[routing]()
        goto block@6
    block@5: // read_enums_route_L14
        tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums[routing]()
        goto block@6
    block@6: // switch_case_next_L4
        goto block@8
    block@7: // create_NoOp_L4
        goto block@8
    block@8: // after_if_else_L4
        goto block@10
    block@9: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/box-enum-contract.algo.ts::BoxContract.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L4
        exit 0u
    block@11: // after_inlined_tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums[routing]() -> void:
    block@0: // L8
        tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums()
        exit 1u

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums[routing]() -> void:
    block@0: // L14
        let tmp%0#0: Encoded(uint64,uint64) = tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums() -> void:
    block@0: // L8
        let encoded_value%0#0: bytes[8] = (itob 1u)
        (box_put "oca" encoded_value%0#0)
        let encoded_value%1#0: bytes[8] = (itob 6u)
        (box_put "txn" encoded_value%1#0)
        return 

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums() -> Encoded(uint64,uint64):
    block@0: // L14
        let (tmp%0#0: bytes, tmp%1#0: bool) = (box_get "oca")
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "oca")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#0)
        let tmp%2#0: bytes[8] = (itob maybe_value_converted%0#0)
        let tmp%3#0: bool = (== tmp%0#0 tmp%2#0)
        (assert tmp%3#0)
        let (tmp%4#0: bytes, tmp%5#0: bool) = (box_get "txn")
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "txn")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let maybe_value_converted%1#0: uint64 = (btoi storage_value%1#0)
        let tmp%6#0: bytes[8] = (itob maybe_value_converted%1#0)
        let tmp%7#0: bool = (== tmp%4#0 tmp%6#0)
        (assert tmp%7#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "oca")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let maybe_value_converted%2#0: uint64 = (btoi storage_value%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob maybe_value_converted%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%8#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "txn")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let maybe_value_converted%3#0: uint64 = (btoi storage_value%3#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob maybe_value_converted%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%9#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%8#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%9#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%10#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        return tmp%10#0

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 