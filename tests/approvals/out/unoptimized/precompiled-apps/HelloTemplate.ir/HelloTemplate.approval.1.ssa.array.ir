main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/precompiled-apps.algo.ts::HelloTemplate.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L43
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@12
    block@4: // abi_routing_L43
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, method "delete()void" => block@6, method "update()void" => block@7, method "greet(string)string" => block@8, method "sendGreetings((string,string))string" => block@9, * => block@10}
    block@5: // create_route_L49
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        tests/approvals/precompiled-apps.algo.ts::HelloTemplate.create()
        let tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@6: // delete_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 DeleteApplication)
        (assert tmp%8#0) // OnCompletion is not DeleteApplication
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::HelloBase.delete()
        let tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@7: // update_route_L24
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 UpdateApplication)
        (assert tmp%12#0) // OnCompletion is not UpdateApplication
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::HelloBase.update()
        let tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@8: // greet_route_L27
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%19#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%20#0: string = tests/approvals/precompiled-apps.algo.ts::HelloBase.greet(tmp%19#0)
        let array%length%0#1: uint64 = (len tmp%20#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 tmp%20#0)
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let tmp%21#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%0#1
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // sendGreetings_route_L31
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%27#0: string = tests/approvals/precompiled-apps.algo.ts::HelloBase.sendGreetings(reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let array%length%1#1: uint64 = (len tmp%27#0)
        let array%as_bytes%1#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 tmp%27#0)
        let array%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = array%encoded_value%1#1
        let tmp%28#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%1#1
        let tmp%29#0: bytes = (concat 0x151f7c75 tmp%28#0)
        (log tmp%29#0)
        let tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@10: // switch_case_default_L43
        goto block@11
    block@11: // switch_case_next_L43
        goto block@13
    block@12: // bare_routing_L43
        goto block@13
    block@13: // after_if_else_L43
        let tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#0 <- block@5, tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#1 <- block@6, tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#2 <- block@7, tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#3 <- block@8, tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#4 <- block@9, tests/approvals/precompiled-apps.algo.ts::HelloTemplate.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/precompiled-apps.algo.ts::HelloTemplate.create() -> void:
    block@0: // L49
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.delete() -> void:
    block@0: // L21
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.update() -> void:
    block@0: // L24
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.greet(name: string) -> string:
    block@0: // L27
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: bytes = (concat "" maybe_value%0#0)
        let tmp%1#0: bytes = (concat tmp%0#0 " ")
        let tmp%2#0: bytes = (concat tmp%1#0 name#0)
        return tmp%2#0

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.sendGreetings(a: Encoded((len+utf8[]),(len+utf8[]))) -> string:
    block@0: // L31
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: bytes = (concat "" maybe_value%0#0)
        let tmp%1#0: bytes = (concat tmp%0#0 " ")
        let array%extract_uint16%0#1: uint64 = (extract_uint16 a#0 0u)
        let array%extract_uint16%1#1: uint64 = (extract_uint16 a#0 2u)
        let array%substring3%0#1: bytes = (substring3 a#0 array%extract_uint16%0#1 array%extract_uint16%1#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = array%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%2#0: bytes = (concat tmp%1#0 values%0#0)
        let array%extract_uint16%2#1: uint64 = (extract_uint16 a#0 2u)
        let array%len%0#1: uint64 = (len a#0)
        let array%substring3%1#1: bytes = (substring3 a#0 array%extract_uint16%2#1 array%len%0#1)
        let tuple_item%1#0: Encoded(len+utf8[]) = array%substring3%1#1
        let tmp%3#0: string = ((extract 2 0) tuple_item%1#0)
        let tmp%4#0: bytes = (concat tmp%2#0 tmp%3#0)
        return tmp%4#0

subroutine tests/approvals/precompiled-apps.algo.ts::HelloTemplate.constructor() -> void:
    block@0: // L44
        tests/approvals/precompiled-apps.algo.ts::HelloBase.constructor()
        (app_global_put "greeting" TemplateVar[string](TMPL_GREETING))
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.constructor() -> void:
    block@0: // L18
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L18
        (app_global_put "greeting" "")
        return 