{
    "name": "ReceivesTxns",
    "structs": {},
    "methods": [
        {
            "name": "getOne",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receivesAnyTxn",
            "args": [
                {
                    "type": "txn",
                    "name": "txn"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receivesAssetConfig",
            "args": [
                {
                    "type": "acfg",
                    "name": "assetCfg"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receivesAssetConfigAndPay",
            "args": [
                {
                    "type": "acfg",
                    "name": "assetCfg"
                },
                {
                    "type": "pay",
                    "name": "payTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        65,
                        103,
                        142,
                        168
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        201
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        70,
                        108,
                        147,
                        173
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        81,
                        118
                    ],
                    "errorMessage": "transaction type is acfg"
                },
                {
                    "pc": [
                        91
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEDJgEEFR98dTEbIhNBAKY2GgCABI9oku+ABJzYfeOABNNmyGmABIG2c1JPBI4EAGkATwAoAAIiQzEZIhJEMRgiE0QxFoECCUk4ECQSRDEWIwlJOBAjEkSIAMQjQv/ZMRkiEkQxGCITRDEWIwlJOBAkEkSIAKFJFRZXBgJMUChMULAjQv+yMRkiEkQxGCITRDEWIwmIADgWKExQsCNC/5gxGSISRDEYIhNEiAAgFihMULAjQv+CMRkiTI4BAANC/3YxGCISRIgAaCNC/2sjiYoBAYAASYv/OBBJJBJBABaL/zg8SYwAQQAFiwCMAImL/zghQv/2iwKBBhJBABaL/zg9SYwBQQAFiwGMAImL/zgYQv/2IowAiYoBAYv/OBeJigIAi/44ECQSRIv/OBAjEkSJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}