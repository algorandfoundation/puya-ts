{
    "name": "HelloTemplateCustomPrefix",
    "structs": {
        "Greeting": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "termination",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "greet",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sendGreetings",
            "args": [
                {
                    "type": "(string,string)",
                    "struct": "Greeting",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "greeting": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Z3JlZXRpbmc="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        156
                    ],
                    "errorMessage": "OnCompletion must be DeleteApplication && can only call when not creating"
                },
                {
                    "pc": [
                        50
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        139
                    ],
                    "errorMessage": "OnCompletion must be UpdateApplication && can only call when not creating"
                },
                {
                    "pc": [
                        327,
                        347
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        195,
                        252,
                        276
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        204
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        286
                    ],
                    "errorMessage": "invalid number of bytes for tests/approvals/precompiled-apps.algo.ts::Greeting"
                },
                {
                    "pc": [
                        243
                    ],
                    "errorMessage": "invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))"
                },
                {
                    "pc": [
                        267
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))"
                },
                {
                    "pc": [
                        239,
                        262
                    ],
                    "errorMessage": "invalid tuple encoding"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAEAAECBCYFCGdyZWV0aW5nAAQVH3x1ASAAQgAAMRhAAAlCAACIAXpCAABCAAA2GgCABCQ3jTyABKDoGHJPAo4CAGcAV0IAADEZIhJEMRgiE0EALUIAADYaAIAE0KKCAIAEUYC6IE8CjgIADQAHQgAAQgAAAIgAhUL/9ogAV0L/8DYaAIAETFxhuk8BjgEABkIAAEL/3ogAJEL/9zEZJRIxGCITEESIACRC/5wxGYEFEjEYIhMQRIgAC0L/i0IAAIgAiSNDQgAAiACFI0NCAACIAIEjQ0IAADYaAUkiWSMLJAhLARUSRFcCAIgAa0kVFlcGAk8BUCpPAVCwI0NCAAA2GgFJFU4BSSJZSSUSREsBTwFLA1IiWSMLJAglCEsBJFlJSwISREsCTwFPBFIiWSMLJAgISwEVEkSIADBJFRZXBgJPAVAqTwFQsCNDQgAAiUIAAIlCAACJigEBQgAAIihlRClPAVArUIv/UImKAQFCAAAiKGVEKU8BUCtQi/8iWYv/JFmL/08CTwJSVwIAUIv/JFmL/xWL/08CTwJSVwIAUIlCAACIAAUoJwRniUIAAEIAAEIAACgpZ4k=",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {
        "PRFX_GREETING": {
            "type": "AVMString"
        }
    }
}