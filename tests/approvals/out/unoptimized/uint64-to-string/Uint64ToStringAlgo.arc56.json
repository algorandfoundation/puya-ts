{
    "name": "Uint64ToStringAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        51
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        100
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        56
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDEwIDEyMwogICAgYnl0ZWNibG9jayAweDMwMzEzMjMzMzQzNTM2MzczODM5ICIxMjMiCgptYWluX2Jsb2NrQDA6CgptYWluX2Jsb2NrQDE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdWludDY0LXRvLXN0cmluZy5hbGdvLnRzOjQKICAgIC8vIGNsYXNzIFVpbnQ2NFRvU3RyaW5nQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDYKCm1haW5fYWJpX3JvdXRpbmdAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy91aW50NjQtdG8tc3RyaW5nLmFsZ28udHM6NAogICAgLy8gY2xhc3MgVWludDY0VG9TdHJpbmdBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgcHVzaGJ5dGVzIDB4ZjY1ZjI0ZGYgLy8gbWV0aG9kICJ0ZXN0KHVpbnQ2NClzdHJpbmciCiAgICBzd2FwCiAgICBtYXRjaCBtYWluX3Rlc3Rfcm91dGVAMwoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDQ6CgptYWluX3N3aXRjaF9jYXNlX25leHRANToKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy91aW50NjQtdG8tc3RyaW5nLmFsZ28udHM6NAogICAgLy8gY2xhc3MgVWludDY0VG9TdHJpbmdBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKCm1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvdWludDY0LXRvLXN0cmluZy5hbGdvLnRzOjpVaW50NjRUb1N0cmluZ0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMTE6CiAgICByZXR1cm4KCm1haW5fdGVzdF9yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czo1CiAgICAvLyB0ZXN0KHg6IHVpbnQ2NCk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdWludDY0LXRvLXN0cmluZy5hbGdvLnRzOjQKICAgIC8vIGNsYXNzIFVpbnQ2NFRvU3RyaW5nQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHRlc3RzL2FwcHJvdmFscy91aW50NjQtdG8tc3RyaW5nLmFsZ28udHM6NQogICAgLy8gdGVzdCh4OiB1aW50NjQpOiBzdHJpbmcgewogICAgY2FsbHN1YiB0ZXN0CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czo6VWludDY0VG9TdHJpbmdBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDExCgptYWluX2JhcmVfcm91dGluZ0A2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czo0CiAgICAvLyBjbGFzcyBVaW50NjRUb1N0cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gMAogICAgc3dhcAogICAgbWF0Y2ggbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVANwoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDg6CgptYWluX3N3aXRjaF9jYXNlX25leHRAOToKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDEwCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czo0CiAgICAvLyBjbGFzcyBVaW50NjRUb1N0cmluZ0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgID09CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZQogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy91aW50NjQtdG8tc3RyaW5nLmFsZ28udHM6OlVpbnQ2NFRvU3RyaW5nQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMQoKCi8vIHB1eWEtdHM6Oml0b2EoaTogdWludDY0KSAtPiBieXRlczoKaXRvYToKICAgIHByb3RvIDEgMQoKaXRvYV9ibG9ja0AwOgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMTAKICAgIDwKICAgIGJ6IGl0b2FfZWxzZV9ib2R5QDIKCml0b2FfaWZfYm9keUAxOgogICAgYnl0ZWNfMCAvLyAweDMwMzEzMjMzMzQzNTM2MzczODM5CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MwogICAgcmV0c3ViCgppdG9hX2Vsc2VfYm9keUAyOgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMTAKICAgIC8KICAgIGNhbGxzdWIgaXRvYQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMTAKICAgICUKICAgIGJ5dGVjXzAgLy8gMHgzMDMxMzIzMzM0MzUzNjM3MzgzOQogICAgc3dhcAogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy91aW50NjQtdG8tc3RyaW5nLmFsZ28udHM6OlVpbnQ2NFRvU3RyaW5nQWxnby50ZXN0KHg6IHVpbnQ2NCkgLT4gYnl0ZXM6CnRlc3Q6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdWludDY0LXRvLXN0cmluZy5hbGdvLnRzOjUKICAgIC8vIHRlc3QoeDogdWludDY0KTogc3RyaW5nIHsKICAgIHByb3RvIDEgMQoKdGVzdF9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czo4CiAgICAvLyBhc3NlcnQoeS50b1N0cmluZygpID09PSAnMTIzJykKICAgIGludGNfMyAvLyAxMjMKICAgIGNhbGxzdWIgaXRvYQogICAgYnl0ZWNfMSAvLyAiMTIzIgogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czoxMAogICAgLy8gYXNzZXJ0KGAke3l9YCA9PT0gJzEyMycpCiAgICBpbnRjXzMgLy8gMTIzCiAgICBjYWxsc3ViIGl0b2EKICAgIHB1c2hieXRlcyAiIgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vICIxMjMiCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvdWludDY0LXRvLXN0cmluZy5hbGdvLnRzOjEyCiAgICAvLyByZXR1cm4geC50b1N0cmluZygpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgaXRvYQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3VpbnQ2NC10by1zdHJpbmcuYWxnby50czo6VWludDY0VG9TdHJpbmdBbGdvLl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZSgpIC0+IHZvaWQ6Cl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZToKCl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZV9ibG9ja0AwOgogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEKeyYCCjAxMjM0NTY3ODkDMTIzMRsiE0EANjYaAIAE9l8k30yOAQACIkMxGSISRDEYIhNENhoBF4gATUkVFlcGAkxQgAQVH3x1TFCwI0L/2TEZIkyOAQADQv/NMRgiEkSIAEAjQv/CigEBi/8kDEEABiiL/yNYiYv/JAqI/+mL/yQYKEwjWFCJigEBJYj/2CkSRCWI/9GAAExQKRJEi/+I/8WJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}