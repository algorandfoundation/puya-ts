#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1
    bytecblock 0x 0x068101
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0

main_block@1:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x2a337771 // method "test(uint64)void"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/mutable-arrays.algo.ts:5
    // test(length: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/mutable-arrays.algo.ts:5
    // test(length: uint64) {
    callsub test
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__@11


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@7

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_2 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_default@5:

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test(length: uint64) -> void:
test:
    // tests/approvals/mutable-arrays.algo.ts:5
    // test(length: uint64) {
    proto 1 0
    // tests/approvals/mutable-arrays.algo.ts:6
    // ensureBudget(2000)
    pushint 2000 // 2000
    intc_0 // 0
    callsub ensure_budget
    // tests/approvals/mutable-arrays.algo.ts:7
    // const ma = new MutableArray<uint64>()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    // tests/approvals/mutable-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    intc_0 // 0

test_while_top@1:
    // tests/approvals/mutable-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    frame_dig 1
    frame_dig -1
    <
    bz test_after_while@4

test_while_body@2:
    // tests/approvals/mutable-arrays.algo.ts:9
    // ma.push(i)
    frame_dig 1
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    frame_dig 0
    dup
    cover 2
    loads
    swap
    concat // on error: max array length exceeded
    stores

test_block@3:
    // tests/approvals/mutable-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b test_while_top@1

test_after_while@4:

test_block@5:
    // tests/approvals/mutable-arrays.algo.ts:12
    // assert(ma.length === length)
    frame_dig 0
    dup
    loads
    len
    intc_1 // 8
    /
    frame_dig -1
    ==
    assert
    // tests/approvals/mutable-arrays.algo.ts:13
    // assert(length, 'has length')
    frame_dig -1
    assert // has length
    // tests/approvals/mutable-arrays.algo.ts:14
    // const popped = ma.pop()
    dup
    loads
    dup
    len
    intc_1 // 8
    -
    dup
    intc_1 // 8
    /
    swap
    dig 2
    intc_0 // 0
    uncover 2
    extract3
    cover 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    swap
    uncover 2
    swap
    stores
    // tests/approvals/mutable-arrays.algo.ts:15
    // assert(length, 'has length')
    frame_dig -1
    assert // has length
    // tests/approvals/mutable-arrays.algo.ts:17
    // assert(popped === length - 1)
    frame_dig -1
    intc_2 // 1
    -
    ==
    assert
    retsub


// tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_0 // 0
    setbit // on error: no available slots
    store 0
    retsub
