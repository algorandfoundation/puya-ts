{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/mutable-arrays.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AACE;;;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACE;;;AACe;;;AAAb;AAAA;;;AACW;;;AAAA;AAAA;AAAA;AACU;AAAG;;AAAA;;AAAA;AAAxB;;;AACU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA;AAAA;;;;;AAI7B;;AAAA;AAAA;AAAG;AAAA;AAAA;AAAH;;AAAA;AAAP;AACA;;AAAA;AACe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACf;;AAAA;AAEkB;;AAAS;AAAT;AAAX;AAAP;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1"
    },
    "6": {
      "op": "bytecblock 0x 0x068101"
    },
    "13": {
      "op": "pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
      "defined_out": [
        "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      ],
      "stack_out": [
        "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      ]
    },
    "47": {
      "op": "store 0",
      "stack_out": []
    },
    "49": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "51": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "52": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "53": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "56": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "59": {
      "op": "pushbytes 0x2a337771 // method \"test(uint64)void\"",
      "defined_out": [
        "Method(test(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test(uint64)void)"
      ]
    },
    "65": {
      "op": "swap",
      "stack_out": [
        "Method(test(uint64)void)",
        "tmp%2#0"
      ]
    },
    "66": {
      "op": "match main_test_route@3",
      "stack_out": []
    },
    "70": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "block": "main_after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "72": {
      "block": "main_test_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "74": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "76": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "79": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "80": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "81": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "82": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "85": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "86": {
      "callsub": "tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test",
      "op": "callsub test",
      "stack_out": []
    },
    "89": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "b main_after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__@11"
    },
    "93": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "95": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%8#0"
      ]
    },
    "97": {
      "op": "match main___algots__.defaultCreate@7",
      "stack_out": []
    },
    "101": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "104": {
      "block": "main___algots__.defaultCreate@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "106": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "108": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "109": {
      "callsub": "tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "112": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "b main_after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__@11"
    },
    "116": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "119": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "121": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "123": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "124": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0",
        "required_budget_with_buffer#0"
      ]
    },
    "128": {
      "op": "<",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "129": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "132": {
      "block": "ensure_budget_while_body@2",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_begin"
    },
    "133": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "135": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "137": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "139": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "141": {
      "op": "bytec_1 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "142": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "144": {
      "op": "bytec_1 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "145": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "148": {
      "op": "intc_2 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1"
      ]
    },
    "149": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "1",
        "fee_source#0 (copy)"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1",
        "fee_source#0 (copy)"
      ]
    },
    "151": {
      "op": "match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "157": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "158": {
      "op": "b ensure_budget_while_top@1"
    },
    "161": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "163": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "165": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "168": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "169": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "171": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "174": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "175": {
      "subroutine": "tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test",
      "params": {
        "length#0": "uint64"
      },
      "block": "test",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "178": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000"
      ],
      "stack_out": [
        "2000"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "2000"
      ],
      "stack_out": [
        "2000",
        "0"
      ]
    },
    "182": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "185": {
      "callsub": "_puya_lib.mem.new_slot",
      "op": "callsub _puya_lib.mem.new_slot",
      "defined_out": [
        "slot%0#0"
      ],
      "stack_out": [
        "slot%0#0"
      ]
    },
    "188": {
      "op": "dup",
      "defined_out": [
        "slot%0#0",
        "slot%0#0 (copy)"
      ],
      "stack_out": [
        "slot%0#0",
        "slot%0#0 (copy)"
      ]
    },
    "189": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "slot%0#0",
        "slot%0#0 (copy)"
      ],
      "stack_out": [
        "slot%0#0",
        "slot%0#0 (copy)",
        "0x"
      ]
    },
    "190": {
      "op": "stores",
      "defined_out": [
        "ma#0"
      ],
      "stack_out": [
        "ma#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0"
      ]
    },
    "192": {
      "block": "test_while_top@1",
      "stack_in": [
        "ma#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0"
      ]
    },
    "194": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "196": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "bz test_after_while@3",
      "stack_out": [
        "ma#0",
        "i#0"
      ]
    },
    "200": {
      "block": "test_while_body@2",
      "stack_in": [
        "ma#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0"
      ]
    },
    "202": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "203": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "i#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "array%sub_item%0#1"
      ]
    },
    "204": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "array%sub_item%0#1",
        "i#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "array%sub_item%0#1",
        "0x"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "0x",
        "array%sub_item%0#1"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "i#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "array%encoded%0#1"
      ]
    },
    "207": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "208": {
      "op": "swap",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "i#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "encoded%1#0"
      ]
    },
    "210": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded%1#0",
        "i#0",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "encoded%1#0",
        "ma#0"
      ]
    },
    "212": {
      "op": "dup",
      "defined_out": [
        "encoded%1#0",
        "i#0",
        "ma#0",
        "ma#0 (copy)"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "encoded%1#0",
        "ma#0 (copy)",
        "ma#0 (copy)"
      ]
    },
    "213": {
      "op": "cover 2",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "ma#0",
        "encoded%1#0",
        "ma#0 (copy)"
      ]
    },
    "215": {
      "op": "loads",
      "defined_out": [
        "encoded%1#0",
        "i#0",
        "ma#0",
        "slot_contents%0#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "ma#0",
        "encoded%1#0",
        "slot_contents%0#0"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "ma#0",
        "slot_contents%0#0",
        "encoded%1#0"
      ]
    },
    "217": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "extended%0#0",
        "i#0",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "ma#0",
        "extended%0#0"
      ]
    },
    "218": {
      "op": "stores",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0"
      ]
    },
    "219": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "i#0",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "220": {
      "op": "+",
      "stack_out": [
        "ma#0",
        "i#0",
        "i#0"
      ]
    },
    "221": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0"
      ]
    },
    "223": {
      "op": "b test_while_top@1"
    },
    "226": {
      "block": "test_after_while@3",
      "stack_in": [
        "ma#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0"
      ]
    },
    "228": {
      "op": "dup",
      "defined_out": [
        "ma#0",
        "ma#0 (copy)"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "ma#0 (copy)"
      ]
    },
    "229": {
      "op": "loads",
      "defined_out": [
        "ma#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%1#0"
      ]
    },
    "230": {
      "op": "len",
      "defined_out": [
        "array%bytes_len%0#1",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%bytes_len%0#1"
      ]
    },
    "231": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "array%bytes_len%0#1",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%bytes_len%0#1",
        "8"
      ]
    },
    "232": {
      "op": "/",
      "defined_out": [
        "ma#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "tmp%1#0"
      ]
    },
    "233": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "ma#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "tmp%1#0",
        "length#0 (copy)"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "ma#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "tmp%2#0"
      ]
    },
    "236": {
      "op": "assert",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0"
      ]
    },
    "237": {
      "op": "frame_dig -1",
      "defined_out": [
        "ma#0",
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "reinterpret_bool%0#0"
      ]
    },
    "239": {
      "error": "has length",
      "op": "assert // has length",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0"
      ]
    },
    "240": {
      "op": "dup",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "ma#0 (copy)"
      ]
    },
    "241": {
      "op": "loads",
      "defined_out": [
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0"
      ]
    },
    "242": {
      "op": "dup",
      "defined_out": [
        "ma#0",
        "slot_contents%2#0",
        "slot_contents%2#0 (copy)"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "slot_contents%2#0 (copy)"
      ]
    },
    "243": {
      "op": "len",
      "defined_out": [
        "array%array_bytes_length%0#1",
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_bytes_length%0#1"
      ]
    },
    "244": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_bytes_length%0#1",
        "8"
      ]
    },
    "245": {
      "op": "-",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "246": {
      "op": "dup",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)",
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)"
      ]
    },
    "247": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)",
        "8"
      ]
    },
    "248": {
      "op": "/",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_new_length%0#1",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "250": {
      "op": "dig 2",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_new_length%0#1",
        "array%array_bytes_new_length%0#1",
        "slot_contents%2#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "ma#0",
        "slot_contents%2#0",
        "slot_contents%2#0 (copy)"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_new_length%0#1",
        "array%array_bytes_new_length%0#1",
        "slot_contents%2#0 (copy)",
        "0"
      ]
    },
    "253": {
      "op": "uncover 2",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_new_length%0#1",
        "slot_contents%2#0 (copy)",
        "0",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "255": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%array_new_length%0#1",
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "slot_contents%2#0",
        "array%array_new_length%0#1",
        "array%array_contents%1#1"
      ]
    },
    "256": {
      "op": "cover 2",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "slot_contents%2#0",
        "array%array_new_length%0#1"
      ]
    },
    "258": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "slot_contents%2#0",
        "array%array_new_length%0#1",
        "8"
      ]
    },
    "259": {
      "op": "*",
      "defined_out": [
        "array%array_contents%1#1",
        "array%bytes_index%0#1",
        "ma#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "slot_contents%2#0",
        "array%bytes_index%0#1"
      ]
    },
    "260": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "slot_contents%2#0",
        "array%bytes_index%0#1",
        "8"
      ]
    },
    "261": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%value%0#1",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "array%value%0#1"
      ]
    },
    "262": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "array%value%0#1",
        "0"
      ]
    },
    "263": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "array%value%0#1",
        "0",
        "8"
      ]
    },
    "264": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%sub_item%1#1",
        "ma#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "array%array_contents%1#1",
        "array%sub_item%1#1"
      ]
    },
    "265": {
      "op": "btoi",
      "defined_out": [
        "ma#0",
        "new_contents%0#0",
        "popped_item.0%0#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "new_contents%0#0",
        "popped_item.0%0#0"
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "ma#0",
        "i#0",
        "ma#0",
        "popped_item.0%0#0",
        "new_contents%0#0"
      ]
    },
    "267": {
      "op": "uncover 2",
      "stack_out": [
        "ma#0",
        "i#0",
        "popped_item.0%0#0",
        "new_contents%0#0",
        "ma#0"
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "ma#0",
        "i#0",
        "popped_item.0%0#0",
        "ma#0",
        "new_contents%0#0"
      ]
    },
    "270": {
      "op": "stores",
      "defined_out": [
        "ma#0",
        "popped#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "popped#0"
      ]
    },
    "271": {
      "op": "frame_dig -1",
      "defined_out": [
        "ma#0",
        "popped#0",
        "reinterpret_bool%1#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "popped#0",
        "reinterpret_bool%1#0"
      ]
    },
    "273": {
      "error": "has length",
      "op": "assert // has length",
      "stack_out": [
        "ma#0",
        "i#0",
        "popped#0"
      ]
    },
    "274": {
      "op": "frame_dig -1",
      "stack_out": [
        "ma#0",
        "i#0",
        "popped#0",
        "length#0 (copy)"
      ]
    },
    "276": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "length#0 (copy)",
        "ma#0",
        "popped#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "popped#0",
        "length#0 (copy)",
        "1"
      ]
    },
    "277": {
      "op": "-",
      "defined_out": [
        "ma#0",
        "popped#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "popped#0",
        "tmp%3#0"
      ]
    },
    "278": {
      "op": "==",
      "defined_out": [
        "ma#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "ma#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "279": {
      "op": "assert",
      "stack_out": [
        "ma#0",
        "i#0"
      ]
    },
    "280": {
      "retsub": true,
      "op": "retsub"
    },
    "281": {
      "subroutine": "tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "282": {
      "subroutine": "_puya_lib.mem.new_slot",
      "params": {},
      "block": "_puya_lib.mem.new_slot",
      "stack_in": [],
      "op": "load 0",
      "defined_out": [
        "slot_allocations"
      ],
      "stack_out": [
        "slot_allocations"
      ]
    },
    "284": {
      "op": "bitlen",
      "defined_out": [
        "free_slot#0"
      ],
      "stack_out": [
        "free_slot#0"
      ]
    },
    "285": {
      "op": "load 0",
      "stack_out": [
        "free_slot#0",
        "slot_allocations"
      ]
    },
    "287": {
      "op": "pushint 256 // 256",
      "defined_out": [
        "256",
        "free_slot#0",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "256"
      ]
    },
    "290": {
      "op": "dig 2",
      "defined_out": [
        "256",
        "free_slot#0",
        "free_slot#0 (copy)",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "256",
        "free_slot#0 (copy)"
      ]
    },
    "292": {
      "op": "-",
      "defined_out": [
        "free_slot#0",
        "free_slot_idx",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "free_slot_idx"
      ]
    },
    "293": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "free_slot#0",
        "free_slot_idx",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "free_slot_idx",
        "0"
      ]
    },
    "294": {
      "error": "no available slots",
      "op": "setbit // on error: no available slots",
      "defined_out": [
        "free_slot#0",
        "new_slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "new_slot_allocations"
      ]
    },
    "295": {
      "op": "store 0",
      "stack_out": [
        "free_slot#0"
      ]
    },
    "297": {
      "retsub": true,
      "op": "retsub"
    }
  }
}