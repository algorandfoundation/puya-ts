{
    "name": "MutableArraysAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        76
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        108
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        81
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        240,
                        274
                    ],
                    "errorMessage": "has length"
                },
                {
                    "pc": [
                        216
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        295
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAgBJgIAAwaBAYAgf/////////////////////////////////////////81ADEbIhNBACU2GgCABCozd3FMjgEAAiJDMRkiEkQxGCITRDYaAReIAFYkQv/qMRkiTI4BAANC/94xGCISRIgAqiRC/9OKAgCL/oEKCDIMiwAMQQAqsYEGshCBBbIZKbIeKbIfIiSL/44CAAsABLNC/9syALIBQv/1IrIBQv/viYoBAIHQDyKI/7uIAF9JKD8iiwGL/wxBABuLARYoTFAoTFCLAElOAj5MUD+LASQIjAFC/92LAEk+FSMKi/8SRIv/REk+SRUjCUkjCkxLAiJPAlhOAiMLI1giI1gXTE8CTD+L/0SL/yQJEkSJiTQAkzQAgYACSwIJIlQ1AIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}