main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L6
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@4}
    block@3: // test_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/ops.algo.ts::MyContract.test()
        let tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L6
        goto block@5
    block@5: // switch_case_next_L6
        goto block@10
    block@6: // bare_routing_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L6
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate()
        let tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L6
        goto block@9
    block@9: // switch_case_next_L6
        goto block@10
    block@10: // after_if_else_L6
        let tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/ops.algo.ts::MyContract.test() -> void:
    block@0: // L7
        let tmp%0#0: bytes = (bzero 8u)
        let a#0: bytes = (b~ tmp%0#0)
        let b#0: uint64 = (btoi a#0)
        let tmp%1#0: bool = (== b#0 18446744073709551615u)
        (assert tmp%1#0)
        let c#0: uint64 = (shr b#0 32u)
        let tmp%2#0: bool = (== c#0 4294967295u)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let tmp%4#0: uint64 = ((gtxns ApplicationID) tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: bytes = ((txnas ApplicationArgs) 0u)
        let tmp%8#0: bool = (== tmp%7#0 method "test()void")
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (txn GroupIndex)
        let tmp%10#0: bytes = ((gtxnsas ApplicationArgs) tmp%9#0 0u)
        let tmp%11#0: bool = (== tmp%10#0 method "test()void")
        (assert tmp%11#0)
        return 

subroutine tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 