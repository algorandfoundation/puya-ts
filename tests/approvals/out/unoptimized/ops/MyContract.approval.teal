#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock 0xa78000de
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/ops.algo.ts:6
    // class MyContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@5
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/ops.algo.ts:6
    // class MyContract extends Contract {
    txna ApplicationArgs 0
    bytec_0 // method "test()void"
    uncover 1
    match main_test_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // tests/approvals/ops.algo.ts:6
    // class MyContract extends Contract {
    err

main_test_route@3:
    // tests/approvals/ops.algo.ts:7
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub test
    b main_switch_case_next@4

main___algots__.defaultCreate@5:
    // tests/approvals/ops.algo.ts:6
    // class MyContract extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/ops.algo.ts::MyContract.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/ops.algo.ts:7
    // test() {
    callsub tests/approvals/ops.algo.ts::MyContract.test
    intc_1 // 1
    return


// tests/approvals/ops.algo.ts::MyContract.test() -> void:
tests/approvals/ops.algo.ts::MyContract.test:
    b tests/approvals/ops.algo.ts::MyContract.test_block@0

tests/approvals/ops.algo.ts::MyContract.test_block@0:
    // tests/approvals/ops.algo.ts:8
    // const a = bzero(8).bitwiseInvert()
    pushint 8 // 8
    bzero
    b~
    // tests/approvals/ops.algo.ts:9
    // const b = op2.btoi(a)
    btoi
    // tests/approvals/ops.algo.ts:10
    // assert(b === 2 ** 64 - 1)
    dup
    pushint 18446744073709551615 // 18446744073709551615
    ==
    assert
    // tests/approvals/ops.algo.ts:12
    // const c = op.shr(b, 32)
    pushint 32 // 32
    shr
    // tests/approvals/ops.algo.ts:14
    // assert(c === 2 ** 32 - 1)
    pushint 4294967295 // 4294967295
    ==
    assert
    // tests/approvals/ops.algo.ts:16
    // assert(GTxn.applicationId(Txn.groupIndex) === Txn.applicationId)
    txn GroupIndex
    gtxns ApplicationID
    txn ApplicationID
    ==
    assert
    // tests/approvals/ops.algo.ts:18
    // assert(Txn.applicationArgs(0) === methodSelector('test()void'))
    intc_0 // 0
    txnas ApplicationArgs
    bytec_0 // method "test()void"
    ==
    assert
    // tests/approvals/ops.algo.ts:19
    // assert(GTxn.applicationArgs(Txn.groupIndex, 0) === methodSelector(MyContract.prototype.test))
    txn GroupIndex
    intc_0 // 0
    gtxnsas ApplicationArgs
    bytec_0 // method "test()void"
    ==
    assert
    retsub


// tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
