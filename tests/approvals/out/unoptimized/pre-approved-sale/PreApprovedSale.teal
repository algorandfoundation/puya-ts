#pragma version 11
#pragma typetrack false

// tests/approvals/pre-approved-sale.algo.ts::program() -> uint64:
main:
    intcblock 1 0 TMPL_PRICE TMPL_ASSET
    bytecblock TMPL_SELLER
    b main_block@0

main_block@0:
    // tests/approvals/pre-approved-sale.algo.ts:16
    // const payTxn = gtxn.PaymentTxn(0)
    intc_1 // 0
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/pre-approved-sale.algo.ts:17
    // const assetTxn = gtxn.AssetTransferTxn(1)
    intc_0 // 1
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    // tests/approvals/pre-approved-sale.algo.ts:16
    // const payTxn = gtxn.PaymentTxn(0)
    intc_1 // 0
    // tests/approvals/pre-approved-sale.algo.ts:18-21
    // assertMatch(payTxn, {
    //   receiver: seller,
    //   amount: price,
    // })
    gtxns Receiver
    // tests/approvals/pre-approved-sale.algo.ts:19
    // receiver: seller,
    bytec_0 // TMPL_SELLER
    // tests/approvals/pre-approved-sale.algo.ts:18-21
    // assertMatch(payTxn, {
    //   receiver: seller,
    //   amount: price,
    // })
    ==
    // tests/approvals/pre-approved-sale.algo.ts:16
    // const payTxn = gtxn.PaymentTxn(0)
    intc_1 // 0
    // tests/approvals/pre-approved-sale.algo.ts:18-21
    // assertMatch(payTxn, {
    //   receiver: seller,
    //   amount: price,
    // })
    gtxns Amount
    // tests/approvals/pre-approved-sale.algo.ts:20
    // amount: price,
    intc_2 // TMPL_PRICE
    // tests/approvals/pre-approved-sale.algo.ts:18-21
    // assertMatch(payTxn, {
    //   receiver: seller,
    //   amount: price,
    // })
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/pre-approved-sale.algo.ts:17
    // const assetTxn = gtxn.AssetTransferTxn(1)
    intc_0 // 1
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    gtxns AssetAmount
    // tests/approvals/pre-approved-sale.algo.ts:24
    // assetAmount: Uint64(1),
    intc_0 // 1
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    ==
    // tests/approvals/pre-approved-sale.algo.ts:17
    // const assetTxn = gtxn.AssetTransferTxn(1)
    intc_0 // 1
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    gtxns Sender
    // tests/approvals/pre-approved-sale.algo.ts:25
    // sender: seller,
    bytec_0 // TMPL_SELLER
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    ==
    &&
    // tests/approvals/pre-approved-sale.algo.ts:17
    // const assetTxn = gtxn.AssetTransferTxn(1)
    intc_0 // 1
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    gtxns XferAsset
    // tests/approvals/pre-approved-sale.algo.ts:26
    // xferAsset: asset,
    intc_3 // TMPL_ASSET
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    ==
    &&
    // tests/approvals/pre-approved-sale.algo.ts:17
    // const assetTxn = gtxn.AssetTransferTxn(1)
    intc_0 // 1
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    gtxns AssetCloseTo
    // tests/approvals/pre-approved-sale.algo.ts:27
    // assetCloseTo: Global.zeroAddress,
    global ZeroAddress
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    ==
    &&
    // tests/approvals/pre-approved-sale.algo.ts:17
    // const assetTxn = gtxn.AssetTransferTxn(1)
    intc_0 // 1
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    gtxns RekeyTo
    // tests/approvals/pre-approved-sale.algo.ts:28
    // rekeyTo: Global.zeroAddress,
    global ZeroAddress
    // tests/approvals/pre-approved-sale.algo.ts:23-29
    // assertMatch(assetTxn, {
    //   assetAmount: Uint64(1),
    //   sender: seller,
    //   xferAsset: asset,
    //   assetCloseTo: Global.zeroAddress,
    //   rekeyTo: Global.zeroAddress,
    // })
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/pre-approved-sale.algo.ts:31
    // return true
    intc_0 // 1
    return
