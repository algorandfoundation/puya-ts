{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/pre-approved-sale.algo.ts"
  ],
  "mappings": "AAWmB;AAAT;AACQ;AAAR;AACQ;AAAR;AAEyB;AAE/B;;AAAA;AAAA;;;AAF+B;AAE/B;;AAAA;;AAAA;AAAA;;;;AAAA;AADuC;AAMvC;;AACsB;AADtB;AAAA;;;AANuC;AAMvC;;AAAA;;AAAA;AAAA;;;AANuC;AAMvC;;AAAA;;AAAA;AAAA;;;AANuC;AAMvC;;AAIuB;;AAJvB;AAAA;;;AANuC;AAMvC;;AAKkB;;AALlB;AAAA;;;;AAAA;AAQO;AAAP;;;;;;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "bytec_0 // TMPL_SELLER",
      "defined_out": [
        "seller#0"
      ],
      "stack_out": [
        "seller#0"
      ]
    },
    "1": {
      "op": "dup",
      "defined_out": [
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "seller#0"
      ]
    },
    "2": {
      "op": "intc_2 // TMPL_PRICE",
      "defined_out": [
        "price#0",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "seller#0",
        "price#0"
      ]
    },
    "3": {
      "op": "swap",
      "defined_out": [
        "price#0",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "seller#0"
      ]
    },
    "4": {
      "op": "intc_3 // TMPL_ASSET",
      "defined_out": [
        "asset#0",
        "price#0",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "seller#0",
        "asset#0"
      ]
    },
    "5": {
      "op": "swap",
      "defined_out": [
        "asset#0",
        "price#0",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "seller#0"
      ]
    },
    "6": {
      "op": "intc_1 // 0",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "seller#0",
        "0"
      ]
    },
    "7": {
      "op": "gtxns Receiver",
      "defined_out": [
        "asset#0",
        "price#0",
        "seller#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "seller#0",
        "tmp%0#0"
      ]
    },
    "9": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "price#0",
        "seller#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%1#0"
      ]
    },
    "10": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "13": {
      "block": "main_and_contd@1",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "0"
      ]
    },
    "14": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%2#0"
      ]
    },
    "16": {
      "op": "dig 2",
      "defined_out": [
        "price#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%2#0",
        "price#0"
      ]
    },
    "18": {
      "op": "==",
      "defined_out": [
        "price#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%3#0"
      ]
    },
    "19": {
      "op": "bz main_bool_false@3",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "22": {
      "block": "main_bool_true@2",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "and_result%0#0"
      ]
    },
    "23": {
      "block": "main_bool_merge@4",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "24": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "1"
      ]
    },
    "25": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%4#0"
      ]
    },
    "27": {
      "op": "intc_0 // 1",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%4#0",
        "1"
      ]
    },
    "28": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%5#0"
      ]
    },
    "29": {
      "op": "bz main_bool_false@10",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "32": {
      "block": "main_and_contd@5",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "1"
      ]
    },
    "33": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%6#0"
      ]
    },
    "35": {
      "op": "dig 3",
      "defined_out": [
        "seller#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%6#0",
        "seller#0"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "seller#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%7#0"
      ]
    },
    "38": {
      "op": "bz main_bool_false@10",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "41": {
      "block": "main_and_contd@6",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "1"
      ]
    },
    "42": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%8#0"
      ]
    },
    "44": {
      "op": "dig 1",
      "defined_out": [
        "asset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%8#0",
        "asset#0"
      ]
    },
    "46": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "bz main_bool_false@10",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "50": {
      "block": "main_and_contd@7",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "1"
      ]
    },
    "51": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%10#0"
      ]
    },
    "53": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "55": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%12#0"
      ]
    },
    "56": {
      "op": "bz main_bool_false@10",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "59": {
      "block": "main_and_contd@8",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "1"
      ]
    },
    "60": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%13#0"
      ]
    },
    "62": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "64": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "tmp%15#0"
      ]
    },
    "65": {
      "op": "bz main_bool_false@10",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "68": {
      "block": "main_bool_true@9",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "and_result%1#0"
      ]
    },
    "69": {
      "block": "main_bool_merge@11",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "70": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "1"
      ]
    },
    "71": {
      "op": "return",
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0"
      ]
    },
    "72": {
      "block": "main_bool_false@10",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "and_result%1#0"
      ]
    },
    "73": {
      "op": "b main_bool_merge@11"
    },
    "76": {
      "block": "main_bool_false@3",
      "stack_in": [
        "seller#0",
        "price#0",
        "asset#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "seller#0",
        "price#0",
        "asset#0",
        "and_result%0#0"
      ]
    },
    "77": {
      "op": "b main_bool_merge@4"
    }
  }
}