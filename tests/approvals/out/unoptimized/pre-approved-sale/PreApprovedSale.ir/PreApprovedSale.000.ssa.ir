main tests/approvals/pre-approved-sale.algo.ts::program:
    block@0: // L11
        let seller#0: bytes[32] = TemplateVar[bytes[32]](TMPL_SELLER)
        let price#0: uint64 = TemplateVar[uint64](TMPL_PRICE)
        let asset#0: uint64 = TemplateVar[uint64](TMPL_ASSET)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let payTxn#0: uint64 = 0u
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) 1u)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let assetTxn#0: uint64 = 1u
        let tmp%0#0: bytes[32] = ((gtxns Receiver) payTxn#0)
        let tmp%1#0: bool = (== tmp%0#0 seller#0)
        goto tmp%1#0 ? block@1 : block@3
    block@1: // and_contd_L18
        let tmp%2#0: uint64 = ((gtxns Amount) payTxn#0)
        let tmp%3#0: bool = (== tmp%2#0 price#0)
        goto tmp%3#0 ? block@2 : block@3
    block@2: // bool_true_L18
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L18
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L18
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%4#0: uint64 = ((gtxns AssetAmount) assetTxn#0)
        let tmp%5#0: bool = (== tmp%4#0 1u)
        goto tmp%5#0 ? block@5 : block@10
    block@5: // and_contd_L23
        let tmp%6#0: bytes[32] = ((gtxns Sender) assetTxn#0)
        let tmp%7#0: bool = (== tmp%6#0 seller#0)
        goto tmp%7#0 ? block@6 : block@10
    block@6: // and_contd_L23
        let tmp%8#0: uint64 = ((gtxns XferAsset) assetTxn#0)
        let tmp%9#0: bool = (== tmp%8#0 asset#0)
        goto tmp%9#0 ? block@7 : block@10
    block@7: // and_contd_L23
        let tmp%10#0: bytes[32] = ((gtxns AssetCloseTo) assetTxn#0)
        let tmp%11#0: bytes[32] = (global ZeroAddress)
        let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
        goto tmp%12#0 ? block@8 : block@10
    block@8: // and_contd_L23
        let tmp%13#0: bytes[32] = ((gtxns RekeyTo) assetTxn#0)
        let tmp%14#0: bytes[32] = (global ZeroAddress)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        goto tmp%15#0 ? block@9 : block@10
    block@9: // bool_true_L23
        let and_result%1#0: bool = 1u
        goto block@11
    block@10: // bool_false_L23
        let and_result%1#1: bool = 0u
        goto block@11
    block@11: // bool_merge_L23
        let and_result%1#2: bool = φ(and_result%1#0 <- block@9, and_result%1#1 <- block@10)
        (assert and_result%1#2) // assert target is match for conditions
        return 1u