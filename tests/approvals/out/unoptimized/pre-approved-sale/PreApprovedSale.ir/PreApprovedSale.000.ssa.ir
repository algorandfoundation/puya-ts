main tests/approvals/pre-approved-sale.algo.ts::program:
    block@0: // L11
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let payTxn#0: uint64 = 0u
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) 1u)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let assetTxn#0: uint64 = 1u
        let tmp%0#0: account = ((gtxns Receiver) payTxn#0)
        let tmp%1#0: bool = (== tmp%0#0 TemplateVar[account](TMPL_SELLER))
        let tmp%2#0: uint64 = ((gtxns Amount) payTxn#0)
        let tmp%3#0: bool = (== tmp%2#0 TemplateVar[uint64](TMPL_PRICE))
        let tmp%4#0: bool = (&& tmp%1#0 tmp%3#0)
        (assert tmp%4#0) // assert target is match for conditions
        let tmp%5#0: uint64 = ((gtxns AssetAmount) assetTxn#0)
        let tmp%6#0: bool = (== tmp%5#0 1u)
        let tmp%7#0: account = ((gtxns Sender) assetTxn#0)
        let tmp%8#0: bool = (== tmp%7#0 TemplateVar[account](TMPL_SELLER))
        let tmp%9#0: bool = (&& tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = ((gtxns XferAsset) assetTxn#0)
        let tmp%11#0: bool = (== tmp%10#0 TemplateVar[uint64](TMPL_ASSET))
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        let tmp%13#0: account = ((gtxns AssetCloseTo) assetTxn#0)
        let tmp%14#0: account = (global ZeroAddress)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        let tmp%16#0: bool = (&& tmp%12#0 tmp%15#0)
        let tmp%17#0: account = ((gtxns RekeyTo) assetTxn#0)
        let tmp%18#0: account = (global ZeroAddress)
        let tmp%19#0: bool = (== tmp%17#0 tmp%18#0)
        let tmp%20#0: bool = (&& tmp%16#0 tmp%19#0)
        (assert tmp%20#0) // assert target is match for conditions
        return 1u