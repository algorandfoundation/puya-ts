main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L60
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L60
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testTuple()void" => block@3, * => block@4}
    block@3: // testTuple_route_L69
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/global-state.algo.ts::TestTuple.testTuple()
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L60
        goto block@5
    block@5: // switch_case_next_L60
        goto block@10
    block@6: // bare_routing_L60
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L60
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate()
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L60
        goto block@9
    block@9: // switch_case_next_L60
        goto block@10
    block@10: // after_if_else_L60
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#0 <- block@3, tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#1 <- block@7, tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/global-state.algo.ts::TestTuple.testTuple() -> void:
    block@0: // L69
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%1#1: Encoded((len+utf8[]),uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded_bit%0#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%1#1 aggregate%encoded_bit%0#1)
        let aggregate%encoded%3#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%2#1 aggregate%tail%0#1)
        let tmp%0#0: Encoded((len+utf8[]),uint64,bool1) = aggregate%encoded%3#1
        (app_global_put "t1" tmp%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%0#0) // check GlobalState exists
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#1: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%1#0: bool = (== values%0#0 "hello")
        (assert tmp%1#0) // Tuple value should be set
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%1#0) // check GlobalState exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%1#0 2u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%0#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%2#0: bool = (== values%1#0 123u)
        (assert tmp%2#0) // Tuple value should be set
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%2#0) // check GlobalState exists
        let aggregate%get_bit%0#1: uint64 = (getbit maybe_value%2#0 80u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#1
        let values%2#0: bool = (getbit tuple_item%2#0 0u)
        let tmp%3#0: bool = (== values%2#0 1u)
        (assert tmp%3#0) // Tuple value should be set
        let aggregate%length%1#1: uint64 = (len "b")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "b")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%1#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 67u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%4#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%value_len%0#1: uint64 = (len 456b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 456b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let aggregate%encoded%5#1: Encoded((len+utf8[]),uint512) = (concat aggregate%encoded%4#1 aggregate%as_Encoded(uint512)%0#1)
        let aggregate%encoded_bit%1#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%6#1: Encoded((len+utf8[]),uint512,bool1) = (concat aggregate%encoded%5#1 aggregate%encoded_bit%1#1)
        let aggregate%encoded%7#1: Encoded((len+utf8[]),uint512,bool1) = (concat aggregate%encoded%6#1 aggregate%tail%1#1)
        let tmp%4#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%encoded%7#1
        let aggregate%length%2#1: uint64 = (len "a")
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "a")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%8#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%2#1 tmp%4#0)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%9#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat aggregate%encoded%8#1 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%10#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat aggregate%encoded%9#1 aggregate%tail%3#1)
        let tmp%5#0: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = aggregate%encoded%10#1
        (app_global_put "t2" tmp%5#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%3#0) // check GlobalState exists
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let aggregate%substring3%1#1: bytes = (substring3 maybe_value%3#0 aggregate%extract_uint16%1#1 aggregate%extract_uint16%2#1)
        let tuple_item%3#0: Encoded(len+utf8[]) = aggregate%substring3%1#1
        let values%3#0: string = ((extract 2 0) tuple_item%3#0)
        let tmp%6#0: bool = (== values%3#0 "a")
        (assert tmp%6#0) // Tuple value should be set
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%4#0) // check GlobalState exists
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let aggregate%len%1#1: uint64 = (len maybe_value%4#0)
        let aggregate%substring3%2#1: bytes = (substring3 maybe_value%4#0 aggregate%extract_uint16%3#1 aggregate%len%1#1)
        let tuple_item%4#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%substring3%2#1
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 tuple_item%4#0 0u)
        let aggregate%len%2#1: uint64 = (len tuple_item%4#0)
        let aggregate%substring3%3#1: bytes = (substring3 tuple_item%4#0 aggregate%extract_uint16%4#1 aggregate%len%2#1)
        let tuple_item%5#0: Encoded(len+utf8[]) = aggregate%substring3%3#1
        let values%4#0: string = ((extract 2 0) tuple_item%5#0)
        let tmp%7#0: bool = (== values%4#0 "b")
        (assert tmp%7#0) // Tuple value should be set
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%5#0) // check GlobalState exists
        let aggregate%extract_uint16%5#1: uint64 = (extract_uint16 maybe_value%5#0 2u)
        let aggregate%len%3#1: uint64 = (len maybe_value%5#0)
        let aggregate%substring3%4#1: bytes = (substring3 maybe_value%5#0 aggregate%extract_uint16%5#1 aggregate%len%3#1)
        let tuple_item%6#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%substring3%4#1
        let aggregate%extract%1#1: bytes = (extract3 tuple_item%6#0 2u 64u)
        let tuple_item%7#0: Encoded(uint512) = aggregate%extract%1#1
        let values%5#0: biguint = tuple_item%7#0
        let tmp%8#0: bool = (b== values%5#0 456b)
        (assert tmp%8#0) // Tuple value should be set
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%6#0) // check GlobalState exists
        let aggregate%extract_uint16%6#1: uint64 = (extract_uint16 maybe_value%6#0 2u)
        let aggregate%len%4#1: uint64 = (len maybe_value%6#0)
        let aggregate%substring3%5#1: bytes = (substring3 maybe_value%6#0 aggregate%extract_uint16%6#1 aggregate%len%4#1)
        let tuple_item%8#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%substring3%5#1
        let aggregate%get_bit%1#1: uint64 = (getbit tuple_item%8#0 528u)
        let tuple_item%9#0: bool = aggregate%get_bit%1#1
        let values%6#0: bool = (getbit tuple_item%9#0 0u)
        let tmp%9#0: bool = (== values%6#0 1u)
        (assert tmp%9#0) // Tuple value should be set
        let aggregate%length%3#1: uint64 = (len "hello")
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%4#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%as_bytes%8#1: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded%11#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%4#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%12#1: Encoded((len+utf8[]),uint64) = (concat aggregate%encoded%11#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded_bit%2#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%13#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%12#1 aggregate%encoded_bit%2#1)
        let aggregate%encoded%14#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%13#1 aggregate%tail%4#1)
        let encoded_for_storage%0#0: Encoded((len+utf8[]),uint64,bool1) = aggregate%encoded%14#1
        (app_global_put "t3" encoded_for_storage%0#0)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%7#0) // check GlobalState exists
        let aggregate%extract_uint16%7#1: uint64 = (extract_uint16 maybe_value%7#0 0u)
        let aggregate%len%5#1: uint64 = (len maybe_value%7#0)
        let aggregate%substring3%6#1: bytes = (substring3 maybe_value%7#0 aggregate%extract_uint16%7#1 aggregate%len%5#1)
        let aggregate%item0%0#1: bytes = ((extract 2 0) aggregate%substring3%6#1)
        let tmp%10#0: string = aggregate%item0%0#1
        let tmp%13#0: bool = (== tmp%10#0 "hello")
        (assert tmp%13#0) // Object value should be set
        let (maybe_value%8#0: bytes, maybe_exists%8#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%8#0) // check GlobalState exists
        let aggregate%extract%3#1: bytes = (extract3 maybe_value%8#0 2u 8u)
        let aggregate%item1%1#1: uint64 = (btoi aggregate%extract%3#1)
        let tmp%15#0: uint64 = aggregate%item1%1#1
        let tmp%17#0: bool = (== tmp%15#0 123u)
        (assert tmp%17#0) // Object value should be set
        let (maybe_value%9#0: bytes, maybe_exists%9#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%9#0) // check GlobalState exists
        let aggregate%get_bit%4#1: uint64 = (getbit maybe_value%9#0 80u)
        let aggregate%item2%2#1: bool = (getbit aggregate%get_bit%4#1 0u)
        let tmp%20#0: bool = aggregate%item2%2#1
        let tmp%21#0: bool = (== tmp%20#0 1u)
        (assert tmp%21#0) // Object value should be set
        let aggregate%length%4#1: uint64 = (len "a")
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 "a")
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let aggregate%tail%5#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%4#1)
        let aggregate%data_length%5#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%4#1)
        let aggregate%current_tail_offset%5#1: uint64 = (+ 4u aggregate%data_length%5#1)
        let aggregate%as_bytes%10#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%15#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%5#1)
        let aggregate%length%5#1: uint64 = (len "b")
        let aggregate%as_bytes%11#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%11#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 "b")
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%5#1
        let aggregate%tail%6#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%5#1)
        let aggregate%as_bytes%12#1: bytes[8] = (itob 67u)
        let aggregate%offset_as_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded%16#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%6#1)
        let aggregate%value_len%1#1: uint64 = (len 456b)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| 456b aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint512)%1#1: Encoded(uint512) = aggregate%arc4_encoded%1#1
        let aggregate%encoded%17#1: Encoded((len+utf8[]),uint512) = (concat aggregate%encoded%16#1 aggregate%as_Encoded(uint512)%1#1)
        let aggregate%encoded_bit%3#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%18#1: Encoded((len+utf8[]),uint512,bool1) = (concat aggregate%encoded%17#1 aggregate%encoded_bit%3#1)
        let aggregate%encoded%19#1: Encoded((len+utf8[]),uint512,bool1) = (concat aggregate%encoded%18#1 aggregate%tail%6#1)
        let aggregate%tail%7#1: bytes = (concat aggregate%tail%5#1 aggregate%encoded%19#1)
        let aggregate%as_bytes%13#1: bytes[8] = (itob aggregate%current_tail_offset%5#1)
        let aggregate%offset_as_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%13#1)
        let aggregate%encoded%20#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat aggregate%encoded%15#1 aggregate%offset_as_uint16%7#1)
        let aggregate%encoded%21#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat aggregate%encoded%20#1 aggregate%tail%7#1)
        let tmp%22#0: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = aggregate%encoded%21#1
        (app_global_put "t4" tmp%22#0)
        let (maybe_value%10#0: bytes, maybe_exists%10#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%10#0) // check GlobalState exists
        let aggregate%extract_uint16%10#1: uint64 = (extract_uint16 maybe_value%10#0 0u)
        let aggregate%extract_uint16%11#1: uint64 = (extract_uint16 maybe_value%10#0 2u)
        let aggregate%substring3%9#1: bytes = (substring3 maybe_value%10#0 aggregate%extract_uint16%10#1 aggregate%extract_uint16%11#1)
        let tuple_item%10#0: Encoded(len+utf8[]) = aggregate%substring3%9#1
        let values%7#0: string = ((extract 2 0) tuple_item%10#0)
        let tmp%23#0: bool = (== values%7#0 "a")
        (assert tmp%23#0) // Tuple value should be set
        let (maybe_value%11#0: bytes, maybe_exists%11#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%11#0) // check GlobalState exists
        let aggregate%extract_uint16%12#1: uint64 = (extract_uint16 maybe_value%11#0 2u)
        let aggregate%len%8#1: uint64 = (len maybe_value%11#0)
        let aggregate%substring3%10#1: bytes = (substring3 maybe_value%11#0 aggregate%extract_uint16%12#1 aggregate%len%8#1)
        let tuple_item%11#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%substring3%10#1
        let aggregate%extract_uint16%13#1: uint64 = (extract_uint16 tuple_item%11#0 0u)
        let aggregate%len%9#1: uint64 = (len tuple_item%11#0)
        let aggregate%substring3%11#1: bytes = (substring3 tuple_item%11#0 aggregate%extract_uint16%13#1 aggregate%len%9#1)
        let aggregate%item0%3#1: bytes = ((extract 2 0) aggregate%substring3%11#1)
        let values%8#0: string = aggregate%item0%3#1
        let tmp%24#0: bool = (== values%8#0 "b")
        (assert tmp%24#0) // Tuple value should be set
        let (maybe_value%12#0: bytes, maybe_exists%12#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%12#0) // check GlobalState exists
        let aggregate%extract_uint16%14#1: uint64 = (extract_uint16 maybe_value%12#0 2u)
        let aggregate%len%10#1: uint64 = (len maybe_value%12#0)
        let aggregate%substring3%12#1: bytes = (substring3 maybe_value%12#0 aggregate%extract_uint16%14#1 aggregate%len%10#1)
        let tuple_item%12#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%substring3%12#1
        let aggregate%extract%6#1: bytes = (extract3 tuple_item%12#0 2u 64u)
        let values%12#0: biguint = aggregate%extract%6#1
        let tmp%25#0: bool = (b== values%12#0 456b)
        (assert tmp%25#0) // Tuple value should be set
        let (maybe_value%13#0: bytes, maybe_exists%13#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%13#0) // check GlobalState exists
        let aggregate%extract_uint16%16#1: uint64 = (extract_uint16 maybe_value%13#0 2u)
        let aggregate%len%12#1: uint64 = (len maybe_value%13#0)
        let aggregate%substring3%14#1: bytes = (substring3 maybe_value%13#0 aggregate%extract_uint16%16#1 aggregate%len%12#1)
        let tuple_item%13#0: Encoded((len+utf8[]),uint512,bool1) = aggregate%substring3%14#1
        let aggregate%get_bit%7#1: uint64 = (getbit tuple_item%13#0 528u)
        let aggregate%item2%5#1: bool = (getbit aggregate%get_bit%7#1 0u)
        let values%16#0: bool = aggregate%item2%5#1
        let tmp%26#0: bool = (== values%16#0 1u)
        (assert tmp%26#0) // Tuple value should be set
        let aggregate%length%6#1: uint64 = (len 0x576f726c64)
        let aggregate%as_bytes%14#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%14#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 0x576f726c64)
        let aggregate%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#1
        let aggregate%length%7#1: uint64 = (len "hello")
        let aggregate%as_bytes%15#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%15#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%7#1: Encoded(len+utf8[]) = aggregate%encoded_value%7#1
        let aggregate%tail%8#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%7#1)
        let aggregate%data_length%8#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%7#1)
        let aggregate%current_tail_offset%8#1: uint64 = (+ 13u aggregate%data_length%8#1)
        let aggregate%as_bytes%16#1: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%16#1)
        let aggregate%encoded%22#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%8#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%23#1: Encoded((len+utf8[]),uint64) = (concat aggregate%encoded%22#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded_bit%4#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%24#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%23#1 aggregate%encoded_bit%4#1)
        let aggregate%tail%9#1: bytes = (concat aggregate%tail%8#1 encoded%0#0)
        let aggregate%as_bytes%17#1: bytes[8] = (itob aggregate%current_tail_offset%8#1)
        let aggregate%offset_as_uint16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%17#1)
        let aggregate%encoded%25#1: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = (concat aggregate%encoded%24#1 aggregate%offset_as_uint16%9#1)
        let aggregate%encoded%26#1: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = (concat aggregate%encoded%25#1 aggregate%tail%9#1)
        let tmp%27#0: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = aggregate%encoded%26#1
        (app_global_put "t5" tmp%27#0)
        let (maybe_value%14#0: bytes, maybe_exists%14#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%14#0) // check GlobalState exists
        let aggregate%extract_uint16%18#1: uint64 = (extract_uint16 maybe_value%14#0 0u)
        let aggregate%extract_uint16%19#1: uint64 = (extract_uint16 maybe_value%14#0 11u)
        let aggregate%substring3%16#1: bytes = (substring3 maybe_value%14#0 aggregate%extract_uint16%18#1 aggregate%extract_uint16%19#1)
        let tuple_item%14#0: Encoded(len+utf8[]) = aggregate%substring3%16#1
        let values%17#0: string = ((extract 2 0) tuple_item%14#0)
        let tmp%28#0: bool = (== values%17#0 "hello")
        (assert tmp%28#0) // Mutable object value should be set
        let (maybe_value%15#0: bytes, maybe_exists%15#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%15#0) // check GlobalState exists
        let aggregate%extract%8#1: bytes = (extract3 maybe_value%15#0 2u 8u)
        let tuple_item%15#0: Encoded(uint64) = aggregate%extract%8#1
        let values%18#0: uint64 = (btoi tuple_item%15#0)
        let tmp%29#0: bool = (== values%18#0 123u)
        (assert tmp%29#0) // Mutable object value should be set
        let (maybe_value%16#0: bytes, maybe_exists%16#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%16#0) // check GlobalState exists
        let aggregate%get_bit%8#1: uint64 = (getbit maybe_value%16#0 80u)
        let tuple_item%16#0: bool = aggregate%get_bit%8#1
        let values%19#0: bool = (getbit tuple_item%16#0 0u)
        let tmp%30#0: bool = (== values%19#0 1u)
        (assert tmp%30#0) // Mutable object value should be set
        let (maybe_value%17#0: bytes, maybe_exists%17#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%17#0) // check GlobalState exists
        let aggregate%extract_uint16%20#1: uint64 = (extract_uint16 maybe_value%17#0 11u)
        let aggregate%len%14#1: uint64 = (len maybe_value%17#0)
        let aggregate%substring3%17#1: bytes = (substring3 maybe_value%17#0 aggregate%extract_uint16%20#1 aggregate%len%14#1)
        let tuple_item%17#0: Encoded(len+utf8[]) = aggregate%substring3%17#1
        let tmp%31#0: string = ((extract 2 0) tuple_item%17#0)
        let tmp%32#0: bool = (== tmp%31#0 "World")
        (assert tmp%32#0) // Mutable object value should be set
        return 

subroutine tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate() -> void:
    block@0: // L60
        return 