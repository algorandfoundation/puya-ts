contract TestContract
{
  globals {
    ["noInitial"]: bytes
    ["noInitialInt"]: uint64
    ["testState"]: uint64
    ["TESTSTATE"]: uint64
    ["baseTestState"]: string
  }
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    assert(STATE_EXISTS(GlobalState["testState"]), comment=State should have value)
    assert(GlobalState["testState"] == 2, comment=Value should equal 2)
    GlobalState["testState"]: uint64 = btoi(txnas<ApplicationArgs>(0))
    GlobalState["noInitial"]: bytes = "abc"
    return True
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  constructor(): void
  {
    super.constructor()
    GlobalState["testState"]: uint64 = 2
    GlobalState["TESTSTATE"]: uint64 = 5
    assert(GlobalState["baseTestState"] == "testing 123", comment=Base class state should be initialized after super call)
    GlobalState["noInitialInt"]: uint64 = 72057594037927936 * GlobalState["testState"]
  }
  
  BaseTestContract::constructor(): void
  {
    super.constructor()
    GlobalState["baseTestState"]: string = "testing 123"
  }
  
  BaseContract::constructor(): void
  {
  }
  
}
contract TestArc4
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  setState(key: string, value: uint64): void
  {
    proxy: state_key = reinterpret_cast<state_key>(reinterpret_cast<bytes>(key))
    GlobalState[proxy]: uint64 = value
  }
  
  deleteState(key: string): void
  {
    STATE_DELETE(GlobalState[reinterpret_cast<state_key>(reinterpret_cast<bytes>(key))])
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}
contract TestTuple
{
  globals {
    ["t1"]: arc4.tuple<string,uint64,bool>
    ["t2"]: arc4.tuple<string,arc4.tuple<string,biguint,bool>>
    ["t3"]: object
    ["t4"]: arc4.tuple<string,object>
    ["t5"]: tests/approvals/global-state.algo.ts::Data
  }
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  testTuple(): void
  {
    GlobalState["t1"]: arc4.tuple<string,uint64,bool> = ARC4_ENCODE(#[#["hello", 123, True].0, #["hello", 123, True].1, #["hello", 123, True].2], wtype=arc4.tuple<string,uint64,bool>)
    assert(GlobalState["t1"].0 == "hello", comment=Tuple value should be set)
    assert(GlobalState["t1"].1 == 123, comment=Tuple value should be set)
    assert(GlobalState["t1"].2 == True, comment=Tuple value should be set)
    GlobalState["t2"]: arc4.tuple<string,arc4.tuple<string,biguint,bool>> = ARC4_ENCODE(#[#["a", #["b", 456, True]].0, ARC4_ENCODE(#[#["a", #["b", 456, True]].1.0, #["a", #["b", 456, True]].1.1, #["a", #["b", 456, True]].1.2], wtype=arc4.tuple<string,biguint,bool>)], wtype=arc4.tuple<string,arc4.tuple<string,biguint,bool>>)
    assert(GlobalState["t2"].0 == "a", comment=Tuple value should be set)
    assert(GlobalState["t2"].1.0 == "b", comment=Tuple value should be set)
    assert(GlobalState["t2"].1.1 == 456, comment=Tuple value should be set)
    assert(GlobalState["t2"].1.2 == True, comment=Tuple value should be set)
    GlobalState["t3"]: object = new object(a=($0 = #{ a: ($1 = #{ a: "hello", b: 123, c: True }).a, b: $1.b, c: $1.c }).a, b=$0.b, c=$0.c)
    assert(GlobalState["t3"].a == "hello", comment=Object value should be set)
    assert(GlobalState["t3"].b == 123, comment=Object value should be set)
    assert(GlobalState["t3"].c == True, comment=Object value should be set)
    GlobalState["t4"]: arc4.tuple<string,object> = ARC4_ENCODE(#[#["a", #{ a: ($2 = #{ a: "b", b: 456, c: True }).a, b: $2.b, c: $2.c }].0, new object(a=($3 = #["a", #{ a: $2.a, b: $2.b, c: $2.c }].1).a, b=$3.b, c=$3.c)], wtype=arc4.tuple<string,object>)
    assert(GlobalState["t4"].0 == "a", comment=Tuple value should be set)
    assert(GlobalState["t4"].1.a == "b", comment=Tuple value should be set)
    assert(GlobalState["t4"].1.b == 456, comment=Tuple value should be set)
    assert(GlobalState["t4"].1.c == True, comment=Tuple value should be set)
    GlobalState["t5"]: tests/approvals/global-state.algo.ts::Data = new tests/approvals/global-state.algo.ts::Data(a=($4 = #{ a: ($5 = #{ a: "hello", b: 123, c: True, d: "World" }).a, b: $5.b, c: $5.c, d: $5.d }).a, b=$4.b, c=$4.c, d=$4.d)
    assert(GlobalState["t5"].a == "hello", comment=Mutable object value should be set)
    assert(GlobalState["t5"].b == 123, comment=Mutable object value should be set)
    assert(GlobalState["t5"].c == True, comment=Mutable object value should be set)
    assert(ARC4_DECODE(GlobalState["t5"].d) == "World", comment=Mutable object value should be set)
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}