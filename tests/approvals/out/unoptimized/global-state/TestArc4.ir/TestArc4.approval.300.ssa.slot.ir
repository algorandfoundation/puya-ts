main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L44
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L44
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L44
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "setState(string,uint64)void" => block@4, method "deleteState(string)void" => block@5, * => block@6}
    block@4: // setState_route_L46
        tests/approvals/global-state.algo.ts::TestArc4.setState[routing]()
        goto block@6
    block@5: // deleteState_route_L52
        tests/approvals/global-state.algo.ts::TestArc4.deleteState[routing]()
        goto block@6
    block@6: // switch_case_next_L44
        goto block@8
    block@7: // create_NoOp_L44
        goto block@8
    block@8: // after_if_else_L44
        goto block@10
    block@9: // __algots__.defaultCreate_L44
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/global-state.algo.ts::TestArc4.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L44
        exit 0u
    block@11: // after_inlined_tests/approvals/global-state.algo.ts::TestArc4.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/global-state.algo.ts::TestArc4.setState[routing]() -> void:
    block@0: // L46
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        tests/approvals/global-state.algo.ts::TestArc4.setState(tmp%1#0, tmp%3#0)
        exit 1u

subroutine tests/approvals/global-state.algo.ts::TestArc4.deleteState[routing]() -> void:
    block@0: // L52
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        tests/approvals/global-state.algo.ts::TestArc4.deleteState(tmp%1#0)
        exit 1u

subroutine tests/approvals/global-state.algo.ts::TestArc4.setState(key: string, value: uint64) -> void:
    block@0: // L46
        let proxy#0: bytes = key#0
        (app_global_put proxy#0 value#0)
        return 

subroutine tests/approvals/global-state.algo.ts::TestArc4.deleteState(key: string) -> void:
    block@0: // L52
        (app_global_del key#0)
        return 

subroutine tests/approvals/global-state.algo.ts::TestArc4.__algots__.defaultCreate() -> void:
    block@0: // L44
        return 