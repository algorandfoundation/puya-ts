{
    "name": "TestTuple",
    "structs": {
        "Data": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            },
            {
                "name": "d",
                "type": "string"
            }
        ],
        "object": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testTuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "(string,uint64,bool)",
                    "key": "dDE="
                },
                "t2": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDI="
                },
                "t3": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "dDM="
                },
                "t4": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDQ="
                },
                "t5": {
                    "keyType": "AVMString",
                    "valueType": "Data",
                    "key": "dDU="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        761,
                        774,
                        787,
                        812
                    ],
                    "errorMessage": "Mutable object value should be set"
                },
                {
                    "pc": [
                        448,
                        461,
                        474
                    ],
                    "errorMessage": "Object value should be set"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        166,
                        179,
                        192,
                        304,
                        339,
                        364,
                        390,
                        586,
                        621,
                        646,
                        672
                    ],
                    "errorMessage": "Tuple value should be set"
                },
                {
                    "pc": [
                        101
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        78
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        148,
                        171,
                        184,
                        285,
                        309,
                        344,
                        369,
                        430,
                        453,
                        466,
                        567,
                        591,
                        626,
                        651,
                        741,
                        766,
                        779,
                        792
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        245,
                        527
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAIBeyYMAAVoZWxsbwFhAWICAcgBAAJ0MgJ0NAJ0NQJ0MQJ0MwVXb3JsZDEbIhNBACE2GgCABBJUd/VMjgEAAiJDMRkiEkQxGCITRIgAGyRC/+4xGSJMjgEAA0L/4jEYIhJEiALFJEL/1ykVFlcGAilQKExQgQsWVwYCKExQJRZQJwUiJFRQTFAnCUxnIicJZURJIllMSRVMTwJPAlJXAgApEkQiJwllRCOBCFgXJRJEIicJZUSBUFMiUyQSRCoVFlcGAipQKEsBUEwVgQQIgQQWVwYCKExQKxUWVwYCK1AoTFCBQxZXBgIoTFAnBBWBQA5EgUCvJwSrUCcFIiRUUExQTwNMUE8CFlcGAk8CTFBMUCcGTGciJwZlREkiWUxJI1lMTwJPAlJXAgAqEkQiJwZlREkjWUxJFUxPAk8CUkkiWUxJFUxPAk8CUlcCACsSRCInBmVESSNZTEkVTE8CTwJSI4FAWCcEqEQiJwZlREkjWUxJFUxPAk8CUoGQBFMiUyQSRCkVFlcGAilQKExQgQsWVwYCKExQJRZQJwUiJFRQTFAnCkxnIicKZURJIllMSRVMTwJPAlJXAgApEkQiJwplRCOBCFgXJRJEIicKZUSBUFMiUyQSRCoVFlcGAipQKEsBUEwVgQQIgQQWVwYCKExQKxUWVwYCK1AoTFCBQxZXBgIoTFAnBBWBQA5EgUCvJwSrUCcFIiRUUExQTwNMUE8CFlcGAk8CTFBMUCcHTGciJwdlREkiWUxJI1lMTwJPAlJXAgAqEkQiJwdlREkjWUxJFUxPAk8CUkkiWUxJFUxPAk8CUlcCACsSRCInB2VESSNZTEkVTE8CTwJSI4FAWCcEqEQiJwdlREkjWUxJFUxPAk8CUoGQBFMiUyQSRCcLFRZXBgInC1ApFRZXBgIpUChLAVBMFYENCIENFlcGAihMUCUWUCcFIiRUUE8CTwNQTE8CFlcGAlBMUCcITGciJwhlREkiWUxJgQtZTE8CTwJSVwIAKRJEIicIZUQjgQhYFyUSRCInCGVEgVBTIlMkEkQiJwhlREmBC1lMSRVMTwJPAlJXAgAnCxJEiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}