{
    "name": "TestTuple",
    "structs": {
        "Object3DB88FFD": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ],
        "Data": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            },
            {
                "name": "d",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testTuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "(string,uint64,bool)",
                    "key": "dDE="
                },
                "t2": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDI="
                },
                "t3": {
                    "keyType": "AVMString",
                    "valueType": "Object3DB88FFD",
                    "key": "dDM="
                },
                "t4": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDQ="
                },
                "t5": {
                    "keyType": "AVMString",
                    "valueType": "Data",
                    "key": "dDU="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        724,
                        737,
                        748,
                        773
                    ],
                    "errorMessage": "Mutable object value should be set"
                },
                {
                    "pc": [
                        428,
                        441,
                        452
                    ],
                    "errorMessage": "Object value should be set"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        163,
                        176,
                        187,
                        290,
                        325,
                        349,
                        373,
                        555,
                        590,
                        614,
                        638
                    ],
                    "errorMessage": "Tuple value should be set"
                },
                {
                    "pc": [
                        101
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        78
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        145,
                        168,
                        181,
                        270,
                        295,
                        330,
                        354,
                        410,
                        433,
                        446,
                        535,
                        560,
                        595,
                        619,
                        704,
                        729,
                        742,
                        753
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        210,
                        475
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAIBeyYMBWhlbGxvAAFiAgHIAWEBAAJ0MgJ0NAJ0NQJ0MQJ0MwVXb3JsZDEbIhNBACE2GgCABBJUd/VMjgEAAiJDMRkiEkQxGCITRIgAGyRC/+4xGSJMjgEAA0L/4jEYIhJEiAKeJEL/1ygVFlcGAihQgQsWVwYCKUxQJRZQJwUiJFRQTFAnCUxnIicJZURJIllMSRVMTwJPAlJXAgAoEkQiJwllRCOBCFgXJRJEIicJZUSBUFMkEkQqFRZXBgIqUIFDFlcGAilMUCsVgUAORIFAryurUCcFIiRUUExQJwQVFlcGAicEUIEEFlcGAilMUExJFYEECBZXBgJPAkxQTFBMUCcGTGciJwZlREkiWUxJI1lMTwJPAlJXAgAnBBJEIicGZURJI1lMSRVMTwJPAlJJIllMSRVMTwJPAlJXAgAqEkQiJwZlREkjWUxJFUxPAk8CUiOBQFgrqEQiJwZlREkjWUxJFUxPAk8CUoGQBFMkEkQoFRZXBgIoUIELFlcGAilMUCUWUCcFIiRUUExQJwpMZyInCmVESSJZTEkVTE8CTwJSVwIAKBJEIicKZUQjgQhYFyUSRCInCmVEgVBTJBJEKhUWVwYCKlCBQxZXBgIpTFArFYFADkSBQK8rq1AnBSIkVFBMUCcEFRZXBgInBFCBBBZXBgIpTFBMSRWBBAgWVwYCTwJMUExQTFAnB0xnIicHZURJIllMSSNZTE8CTwJSVwIAJwQSRCInB2VESSNZTEkVTE8CTwJSSSJZTEkVTE8CTwJSVwIAKhJEIicHZURJI1lMSRVMTwJPAlIjgUBYK6hEIicHZURJI1lMSRVMTwJPAlKBkARTJBJEJwsVFlcGAicLUCgVFlcGAihQgQ0WVwYCKUxQTEkVgQ0ITCUWTwNMUCcFIiRUUE8CFlcGAlBMUExQJwhMZyInCGVESSJZTEmBC1lMTwJPAlJXAgAoEkQiJwhlRCOBCFgXJRJEIicIZUSBUFMkEkQiJwhlREmBC1lMSRVMTwJPAlJXAgAnCxJEiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}