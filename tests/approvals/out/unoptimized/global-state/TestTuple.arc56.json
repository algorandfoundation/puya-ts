{
    "name": "TestTuple",
    "structs": {
        "Object3DB88FFD": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ],
        "Data": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            },
            {
                "name": "d",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testTuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "(string,uint64,bool)",
                    "key": "dDE="
                },
                "t2": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDI="
                },
                "t3": {
                    "keyType": "AVMString",
                    "valueType": "Object3DB88FFD",
                    "key": "dDM="
                },
                "t4": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDQ="
                },
                "t5": {
                    "keyType": "AVMString",
                    "valueType": "Data",
                    "key": "dDU="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        796,
                        809,
                        820,
                        847
                    ],
                    "errorMessage": "Mutable object value should be set"
                },
                {
                    "pc": [
                        473,
                        486,
                        497
                    ],
                    "errorMessage": "Object value should be set"
                },
                {
                    "pc": [
                        109
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        93
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        185,
                        198,
                        209,
                        322,
                        361,
                        387,
                        413,
                        610,
                        649,
                        675,
                        701
                    ],
                    "errorMessage": "Tuple value should be set"
                },
                {
                    "pc": [
                        165,
                        190,
                        203,
                        300,
                        327,
                        366,
                        392,
                        453,
                        478,
                        491,
                        588,
                        615,
                        654,
                        680,
                        774,
                        801,
                        814,
                        825
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        233,
                        521
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAEAAIBeyYMBWhlbGxvAAFiAgHIAWEBAAJ0MgJ0NAJ0NQJ0MQJ0MwVXb3JsZEIAAEIAADEbIhNBAClCAAA2GgCABBJUd/VPAY4BAAdCAABCAAAAMRkiEjEYIhMQRIgAEkL/7DEZIhIxGCISEESIAuAkQ0IAAIgAAiRDQgAAKBUWVwYCKFCBCxZXBgIpTwFQJRZQJwUiJFRQTwFQJwlPAWciJwllREkiWU4BSRVOAU8CTwJSVwIAKBJEIicJZUQjgQhYFyUSRCInCWVEgVBTJBJEKhUWVwYCKlCBQxZXBgIpTwFQKxWBQA5EgUCvK6tQJwUiJFRQTwFQJwQVFlcGAicEUIEEFlcGAilPAVBOAUkVgQQIFlcGAk8CTwFQTwFQTwFQJwZPAWciJwZlREkiWU4BSSNZTwFPAk8CUlcCACcEEkQiJwZlREkjWU4BSRVOAU8CTwJSSSJZTgFJFU4BTwJPAlJXAgAqEkQiJwZlREkjWU4BSRVOAU8CTwJSI4FAWCuoRCInBmVESSNZTgFJFU4BTwJPAlKBkARTJBJEKBUWVwYCKFCBCxZXBgIpTwFQJRZQJwUiJFRQTwFQJwpPAWciJwplREkiWU4BSRVOAU8CTwJSVwIAKBJEIicKZUQjgQhYFyUSRCInCmVEgVBTJBJEKhUWVwYCKlCBQxZXBgIpTwFQKxWBQA5EgUCvK6tQJwUiJFRQTwFQJwQVFlcGAicEUIEEFlcGAilPAVBOAUkVgQQIFlcGAk8CTwFQTwFQTwFQJwdPAWciJwdlREkiWU4BSSNZTwFPAk8CUlcCACcEEkQiJwdlREkjWU4BSRVOAU8CTwJSSSJZTgFJFU4BTwJPAlJXAgAqEkQiJwdlREkjWU4BSRVOAU8CTwJSI4FAWCuoRCInB2VESSNZTgFJFU4BTwJPAlKBkARTJBJEJwsVFlcGAicLUCgVFlcGAihQgQ0WVwYCKU8BUE4BSRWBDQhOASUWTwNPAVAnBSIkVFBPAhZXBgJQTwFQTwFQJwhPAWciJwhlREkiWU4BSYELWU8BTwJPAlJXAgAoEkQiJwhlRCOBCFgXJRJEIicIZUSBUFMkEkQiJwhlREmBC1lOAUkVTgFPAk8CUlcCACcLEkSJQgAAiQ==",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}