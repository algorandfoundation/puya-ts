{
    "name": "TestTuple",
    "structs": {
        "object": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testTuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "(string,uint64,bool)",
                    "key": "dDE="
                },
                "t2": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDI="
                },
                "t3": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "dDM="
                },
                "t4": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        64
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        158,
                        172,
                        185,
                        295,
                        330,
                        353,
                        379,
                        438,
                        452,
                        465,
                        576,
                        611,
                        634,
                        660
                    ],
                    "errorMessage": "Tuple value should be set"
                },
                {
                    "pc": [
                        92
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        69
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        140,
                        163,
                        177,
                        275,
                        300,
                        335,
                        358,
                        420,
                        443,
                        457,
                        556,
                        581,
                        616,
                        639
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        210,
                        518
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAIBQCYKAAVoZWxsbwFiAgHIAWECdDICdDQBAAJ0MQJ0MzEbIhNBACE2GgCABBJUd/VMjgEAAiJDMRkiEkQxGCITRIgAGyRC/+4xGSJMjgEAA0L/4jEYIhJEiAI2JEL/1ykVFlcGAilQKExQgQsWVwYCKExQgXsWUCcHIiRUUExQJwhMZyInCGVESSJZTEkVTE8CTwJSVwIAKRJEIicIZUQjgQhYF4F7EkQiJwhlRIFQUyJTJBJEKhUWVwYCKlAoTFCBQxZXBgIoTFArFSUORCWvK6tQJwciJFRQTFAnBBUWVwYCJwRQKEsBUEwVgQQIgQQWVwYCKExQTwJPA1BMTwIWVwYCUExQJwVMZyInBWVESSJZTEkjWUxPAk8CUlcCACcEEkQiJwVlREkjWUxJFUxPAk8CUkkiWUxJFUxPAk8CUlcCACoSRCInBWVESSNZTEkVTE8CTwJSIyVYK6hEIicFZURJI1lMSRVMTwJPAlKBkARTIlMkEkQpFRZXBgIpUChMUIELFlcGAihMUIF7FlAnByIkVFBMUCcJTGciJwllREkiWUxJFUxPAk8CUlcCACkSRCInCWVEI4EIWBeBexJEIicJZUSBUFMiUyQSRCcEFRZXBgInBFAoSwFQTBWBBAiBBBZXBgIoTFAqFRZXBgIqUChMUIFDFlcGAihMUCsVJQ5EJa8rq1AnByIkVFBMUE8DTFBPAhZXBgJPAkxQTFAnBkxnIicGZURJIllMSSNZTE8CTwJSVwIAJwQSRCInBmVESSNZTEkVTE8CTwJSSSJZTEkVTE8CTwJSVwIAKhJEIicGZURJI1lMSRVMTwJPAlIjJVgrqEQiJwZlREkjWUxJFUxPAk8CUoGQBFMiUyQSRImJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}