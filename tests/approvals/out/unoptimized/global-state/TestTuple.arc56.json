{
    "name": "TestTuple",
    "structs": {
        "object": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testTuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "(string,uint64,bool)",
                    "key": "dDE="
                },
                "t2": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDI="
                },
                "t3": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "dDM="
                },
                "t4": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        199,
                        436,
                        580,
                        817
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        64
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        179,
                        207,
                        239,
                        355,
                        405,
                        443,
                        488,
                        560,
                        588,
                        620,
                        736,
                        786,
                        824,
                        869
                    ],
                    "errorMessage": "Tuple value should be set"
                },
                {
                    "pc": [
                        92
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        69
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        176,
                        203,
                        236,
                        352,
                        401,
                        439,
                        485,
                        557,
                        584,
                        617,
                        733,
                        782,
                        820,
                        866
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        263,
                        644
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAIBQCYKAAEABWhlbGxvAWEBYgIByAJ0MgJ0NAJ0MQJ0MzEbIhNBACE2GgCABBJUd/VMjgEAAiJDMRkiEkQxGCITRIgAGyRC/+4xGSJMjgEAA0L/4jEYIhJEiAM/JEL/14oAACJHDChHDCoVFlcGAipQgXsWKSIkVIELFlcGAihMUE8CUExQTFAnCExnIicIZUlOAk4CTEEC/osbSSJZTEkVTE8CTwJSVwIAixpEKhJEIicIZUlOAowNjABBAtWLACOBCFgXiw1EgXsSRCInCGVJTgKMEowFQQK1iwWBUFMpIk8CVCJTixJEJBJEKxUWVwYCK1AnBBUWVwYCJwRQJwUVJQ5EJa8nBaspIiRUgUMWVwYCKExQTwJQTFBMUIEEFlcGAihMUEsCFYEECBZXBgJQTwJQTFAnBkxnIicGZUlOAowTjAZBAkOLBkkiWUxJI1lMTwJPAlJXAgCLE0QrEkQiJwZlSU4CjBSMB0ECGYsHSSNZTEkVTE8CTwJSSSJZTEkVTE8CTwJSVwIAixREJwQSRCInBmVJTgKMFYwIQQHjiwhJI1lMSRVMTwJPAlIjJViLFUQnBahEIicGZUlOAowWjAlBAbmLCUkjWUxJFUxPAk8CUoGQBFMpIk8CVCJTixZEJBJEKhUWVwYCKlCBexYpIiRUgQsWVwYCKExQTwJQTFBMUCcJTGciJwllSU4CjBeMCkEBZYsKSSJZTEkVTE8CTwJSVwIAixdEKhJEIicJZUlOAowYjAtBATyLCyOBCFgXixhEgXsSRCInCWVJTgKMGYwMQQEciwyBUFMpIk8CVCJTixlEJBJEKxUWVwYCK1AnBBUWVwYCJwRQJwUVJQ5EJa8nBaspIiRUgUMWVwYCKExQTwJQTFBMUIEEFlcGAihMUEsCFYEECBZXBgJQTwJQTFAnB0xnIicHZUlOAowOjAFBAKqLAUkiWUxJI1lMTwJPAlJXAgCLDkQrEkQiJwdlSU4CjA+MAkEAgIsCSSNZTEkVTE8CTwJSSSJZTEkVTE8CTwJSVwIAiw9EJwQSRCInB2VJTgKMEIwDQQBKiwNJI1lMSRVMTwJPAlIjJViLEEQnBahEIicHZUlOAowRjARBACCLBEkjWUxJFUxPAk8CUoGQBFMpIk8CVCJTixFEJBJEiShC//UiQv/DIkL/mSJC/2QoQv7sKEL+xyJC/qgoQv5cIkL+KiJC/gAiQv3LKEL9UyhC/S4iQv0PiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}