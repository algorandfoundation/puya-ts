#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 2 1 123
    bytecblock "hello" 0x "b" 0x01c8 "a" 0x00 "t2" "t4" "t5" "t1" "t3" "World"
    bytec_1 // ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/global-state.algo.ts:59
    // export class TestTuple extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/global-state.algo.ts:59
    // export class TestTuple extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x125477f5 // method "testTuple()void"
    uncover 1
    match main_testTuple_route@3
    b main_switch_case_default@4

main_switch_case_default@4:
    b main_switch_case_next@5

main_switch_case_next@5:
    b main_after_if_else@10

main_after_if_else@10:
    // tests/approvals/global-state.algo.ts:59
    // export class TestTuple extends Contract {
    intc_0 // 0
    bury 1
    b main_after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__@11

main_after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__@11:
    return

main_testTuple_route@3:
    // tests/approvals/global-state.algo.ts:68
    // testTuple() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testTuple
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/global-state.algo.ts:59
    // export class TestTuple extends Contract {
    txn OnCompletion
    intc_0 // 0
    uncover 1
    match main___algots__.defaultCreate@7
    b main_switch_case_default@8

main_switch_case_default@8:
    b main_switch_case_next@9

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/global-state.algo.ts:59
    // export class TestTuple extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__@11


// tests/approvals/global-state.algo.ts::TestTuple.testTuple() -> void:
testTuple:
    b testTuple_block@0

testTuple_block@0:
    // tests/approvals/global-state.algo.ts:69
    // this.t1.value = ['hello', 123, true]
    bytec_0 // "hello"
    len
    itob
    extract 6 2
    bytec_0 // "hello"
    concat
    pushint 11 // 11
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    intc_3 // 123
    itob
    concat
    bytec 5 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    concat
    uncover 1
    concat
    // tests/approvals/global-state.algo.ts:60
    // t1 = GlobalState<[string, uint64, boolean]>()
    bytec 9 // "t1"
    // tests/approvals/global-state.algo.ts:69
    // this.t1.value = ['hello', 123, true]
    uncover 1
    app_global_put
    // tests/approvals/global-state.algo.ts:70
    // assert(this.t1.value[0] === 'hello', 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:60
    // t1 = GlobalState<[string, uint64, boolean]>()
    bytec 9 // "t1"
    // tests/approvals/global-state.algo.ts:70
    // assert(this.t1.value[0] === 'hello', 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec_0 // "hello"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:71
    // assert(this.t1.value[1] === 123, 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:60
    // t1 = GlobalState<[string, uint64, boolean]>()
    bytec 9 // "t1"
    // tests/approvals/global-state.algo.ts:71
    // assert(this.t1.value[1] === 123, 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 2
    pushint 8 // 8
    extract3
    btoi
    intc_3 // 123
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:72
    // assert(this.t1.value[2] === true, 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:60
    // t1 = GlobalState<[string, uint64, boolean]>()
    bytec 9 // "t1"
    // tests/approvals/global-state.algo.ts:72
    // assert(this.t1.value[2] === true, 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    pushint 80 // 80
    getbit
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:74
    // this.t2.value = ['a', ['b', 456n, true]]
    bytec_2 // "b"
    len
    itob
    extract 6 2
    bytec_2 // "b"
    concat
    pushint 67 // 67
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    bytec_3 // 0x01c8
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec_3 // 0x01c8
    b|
    concat
    bytec 5 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    concat
    uncover 1
    concat
    bytec 4 // "a"
    len
    itob
    extract 6 2
    bytec 4 // "a"
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    uncover 1
    concat
    // tests/approvals/global-state.algo.ts:61
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    bytec 6 // "t2"
    // tests/approvals/global-state.algo.ts:74
    // this.t2.value = ['a', ['b', 456n, true]]
    uncover 1
    app_global_put
    // tests/approvals/global-state.algo.ts:75
    // assert(this.t2.value[0] === 'a', 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:61
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    bytec 6 // "t2"
    // tests/approvals/global-state.algo.ts:75
    // assert(this.t2.value[0] === 'a', 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_1 // 2
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec 4 // "a"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:76
    // assert(this.t2.value[1][0] === 'b', 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:61
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    bytec 6 // "t2"
    // tests/approvals/global-state.algo.ts:76
    // assert(this.t2.value[1][0] === 'b', 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec_2 // "b"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:77
    // assert(this.t2.value[1][1] === 456n, 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:61
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    bytec 6 // "t2"
    // tests/approvals/global-state.algo.ts:77
    // assert(this.t2.value[1][1] === 456n, 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_1 // 2
    pushint 64 // 64
    extract3
    bytec_3 // 0x01c8
    b==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:78
    // assert(this.t2.value[1][2] === true, 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:61
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    bytec 6 // "t2"
    // tests/approvals/global-state.algo.ts:78
    // assert(this.t2.value[1][2] === true, 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    pushint 528 // 528
    getbit
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:80
    // this.t3.value = { a: 'hello', b: 123, c: true }
    bytec_0 // "hello"
    len
    itob
    extract 6 2
    bytec_0 // "hello"
    concat
    pushint 11 // 11
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    intc_3 // 123
    itob
    concat
    bytec 5 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    concat
    uncover 1
    concat
    // tests/approvals/global-state.algo.ts:63
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    bytec 10 // "t3"
    // tests/approvals/global-state.algo.ts:80
    // this.t3.value = { a: 'hello', b: 123, c: true }
    uncover 1
    app_global_put
    // tests/approvals/global-state.algo.ts:81
    // assert(this.t3.value.a === 'hello', 'Object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:63
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    bytec 10 // "t3"
    // tests/approvals/global-state.algo.ts:81
    // assert(this.t3.value.a === 'hello', 'Object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec_0 // "hello"
    ==
    assert // Object value should be set
    // tests/approvals/global-state.algo.ts:82
    // assert(this.t3.value.b === 123, 'Object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:63
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    bytec 10 // "t3"
    // tests/approvals/global-state.algo.ts:82
    // assert(this.t3.value.b === 123, 'Object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 2
    pushint 8 // 8
    extract3
    btoi
    intc_3 // 123
    ==
    assert // Object value should be set
    // tests/approvals/global-state.algo.ts:83
    // assert(this.t3.value.c === true, 'Object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:63
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    bytec 10 // "t3"
    // tests/approvals/global-state.algo.ts:83
    // assert(this.t3.value.c === true, 'Object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    pushint 80 // 80
    getbit
    intc_2 // 1
    ==
    assert // Object value should be set
    // tests/approvals/global-state.algo.ts:85
    // this.t4.value = ['a', { a: 'b', b: 456n, c: true }]
    bytec_2 // "b"
    len
    itob
    extract 6 2
    bytec_2 // "b"
    concat
    pushint 67 // 67
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    bytec_3 // 0x01c8
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec_3 // 0x01c8
    b|
    concat
    bytec 5 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    concat
    uncover 1
    concat
    bytec 4 // "a"
    len
    itob
    extract 6 2
    bytec 4 // "a"
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    uncover 1
    concat
    // tests/approvals/global-state.algo.ts:64
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    bytec 7 // "t4"
    // tests/approvals/global-state.algo.ts:85
    // this.t4.value = ['a', { a: 'b', b: 456n, c: true }]
    uncover 1
    app_global_put
    // tests/approvals/global-state.algo.ts:86
    // assert(this.t4.value[0] === 'a', 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:64
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    bytec 7 // "t4"
    // tests/approvals/global-state.algo.ts:86
    // assert(this.t4.value[0] === 'a', 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_1 // 2
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec 4 // "a"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:87
    // assert(this.t4.value[1].a === 'b', 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:64
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    bytec 7 // "t4"
    // tests/approvals/global-state.algo.ts:87
    // assert(this.t4.value[1].a === 'b', 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec_2 // "b"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:88
    // assert(this.t4.value[1].b === 456n, 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:64
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    bytec 7 // "t4"
    // tests/approvals/global-state.algo.ts:88
    // assert(this.t4.value[1].b === 456n, 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_1 // 2
    pushint 64 // 64
    extract3
    bytec_3 // 0x01c8
    b==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:89
    // assert(this.t4.value[1].c === true, 'Tuple value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:64
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    bytec 7 // "t4"
    // tests/approvals/global-state.algo.ts:89
    // assert(this.t4.value[1].c === true, 'Tuple value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    pushint 528 // 528
    getbit
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:91
    // this.t5.value = { a: 'hello', b: 123, c: true, d: new arc4.Str('World') }
    bytec 11 // "World"
    len
    itob
    extract 6 2
    bytec 11 // "World"
    concat
    bytec_0 // "hello"
    len
    itob
    extract 6 2
    bytec_0 // "hello"
    concat
    pushint 13 // 13
    itob
    extract 6 2
    bytec_1 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 13 // 13
    +
    cover 1
    intc_3 // 123
    itob
    uncover 3
    uncover 1
    concat
    bytec 5 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    concat
    uncover 2
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    // tests/approvals/global-state.algo.ts:66
    // t5 = GlobalState<Data>()
    bytec 8 // "t5"
    // tests/approvals/global-state.algo.ts:91
    // this.t5.value = { a: 'hello', b: 123, c: true, d: new arc4.Str('World') }
    uncover 1
    app_global_put
    // tests/approvals/global-state.algo.ts:92
    // assert(this.t5.value.a === 'hello', 'Mutable object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:66
    // t5 = GlobalState<Data>()
    bytec 8 // "t5"
    // tests/approvals/global-state.algo.ts:92
    // assert(this.t5.value.a === 'hello', 'Mutable object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    pushint 11 // 11
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec_0 // "hello"
    ==
    assert // Mutable object value should be set
    // tests/approvals/global-state.algo.ts:93
    // assert(this.t5.value.b === 123, 'Mutable object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:66
    // t5 = GlobalState<Data>()
    bytec 8 // "t5"
    // tests/approvals/global-state.algo.ts:93
    // assert(this.t5.value.b === 123, 'Mutable object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 2
    pushint 8 // 8
    extract3
    btoi
    intc_3 // 123
    ==
    assert // Mutable object value should be set
    // tests/approvals/global-state.algo.ts:94
    // assert(this.t5.value.c === true, 'Mutable object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:66
    // t5 = GlobalState<Data>()
    bytec 8 // "t5"
    // tests/approvals/global-state.algo.ts:94
    // assert(this.t5.value.c === true, 'Mutable object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    pushint 80 // 80
    getbit
    intc_2 // 1
    ==
    assert // Mutable object value should be set
    // tests/approvals/global-state.algo.ts:95
    // assert(this.t5.value.d.native === 'World', 'Mutable object value should be set')
    intc_0 // 0
    // tests/approvals/global-state.algo.ts:66
    // t5 = GlobalState<Data>()
    bytec 8 // "t5"
    // tests/approvals/global-state.algo.ts:95
    // assert(this.t5.value.d.native === 'World', 'Mutable object value should be set')
    app_global_get_ex
    assert // check GlobalState exists
    dup
    pushint 11 // 11
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    bytec 11 // "World"
    ==
    assert // Mutable object value should be set
    retsub


// tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
