{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "run",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_side_effects",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_non_trivial_termination_of_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "evalCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXZhbENvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        118,
                        156,
                        179
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        613
                    ],
                    "errorMessage": "Only two functions should be evaluated"
                },
                {
                    "pc": [
                        216
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        123,
                        161,
                        184
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        566,
                        610
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAAEDAiYGCWV2YWxDb3VudAAEaG1tbQH/CGRzZnNkZnNkDXNkZmduYmZnZGZkZGYpQgAAQgAAMRsiE0EAgkIAADYaAIAEpv+USoAEl9TPAIAEqBpHq08DjgMATQA2ABBCAABCAABCAAAiRQFCAABDMRkiEkQxGCITRDYaARc2GgIXiAINFoAEFR98dU8BULAjRQFC/9kxGSISRDEYIhNENhoBF4gBlyNFAUL/wjEZIhJEMRgiE0SIACYjRQFC/68xGSJPAY4BAAlCAABCAABC/5cxGCISRIgB5iNFAUL/j0IAACOIAGAkEkQliABZJBJEJIgAUiMSRIEEiABKJBJEI4gAfoELEkQliAB2gQwSRCSIAG6BChJEgQSIAGWBDhJEgQWIAFyBMhJEKogAtEQriACvRCcEiACpRCcFiACjRCmIAJ4URImKAQFCAACL/yMSQQAOQgAAQgAAQgAAQgAAJImL/yUSQQAGQgAAQv/ui/+BBBJBAAZCAABC/+NCAAAjiYoBAUIAAIEKi/8jEkEAG0IAAEIAAEIAAEIAAIEKi/8IjABCAACLAE8BiYv/JRJBAAZCAABC/+GL/4EEEkEABkIAAEL/1ov/gQUSQQAQQgAAQgAAgQqL/wuMAEIAAEL/xYoBAUIAAIv/KhJBABFCAABCAABCAABCAABCAAAjiYv/KxJBAAZCAABC/+uL/ycEEkEABkIAAEL/4Iv/JwUSQQAGQgAAQv/VIomKAQFCAAAiKGVEIwgoTwFni/+JigEAQgAAKCJni/8jCYj/3Yv/EkEAEUIAAEIAAEIAACIoZUQlEkSJi/+I/8GL/xJBAAlCAABCAABC/+SL/yMIiP+ri/8SQQAJQgAAQgAAQv/OQv/LigIBQgAAi/4jEkEAGEIAAEIAAIv/JRgiEkEABkIAAIv/iYv+iUIAAIv/i/4LiUIAAIk=",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}