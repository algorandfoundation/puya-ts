{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "run",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        66
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        94
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        71
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQADAiYEBGhtbW0B/whkc2ZzZGZzZA1zZGZnbmJmZ2RmZGRmMRsjE0EAITYaAIAEpv+USkyOAQACI0MxGSMSRDEYIxNEiAAbIkL/7jEZI0yOAQADQv/iMRgjEkSIANoiQv/XigAAIogAXyQSRCWIAFgkEkQkiABRIhJEgQSIAEkkEkQiiABdgQsSRCWIAFWBDBJEJIgATYEKEkSBBIgARIEOEkSBBYgAO4EyEkQoiABoRCmIAGNEKogAXkQriABZRIAAiABTFESJigEBIiWBBIv/jgMABwAEAAIiiSSJQv/7Qv/6igEBgQoiJYEEgQWL/44EABsAGAAOAASLAEyJgQqL/wuMAEL/8oEKi/8IjABC/+hC//NC//qKAQEoKSori/+OBAAKAAcABAACI4kiiUL/+0L/+kL/+ooAAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 2,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}