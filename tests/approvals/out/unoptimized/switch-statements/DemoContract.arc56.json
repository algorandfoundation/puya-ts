{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "run",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_side_effects",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_non_trivial_termination_of_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "evalCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXZhbENvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        93,
                        140,
                        167
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        485
                    ],
                    "errorMessage": "Only two functions should be evaluated"
                },
                {
                    "pc": [
                        195
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        98,
                        145,
                        172
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        451,
                        482
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        107,
                        117,
                        154
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEDAiYFCWV2YWxDb3VudARobW1tAf8IZHNmc2Rmc2QNc2RmZ25iZmdkZmRkZjEbIhNBAHw2GgCABKb/lEqABJfUzwCABKgaR6tPA44DAEwAMQACIkMxGSISRDEYIhNENhoBSRWBCBJEFzYaAkkVgQgSRBeIAY4WgAQVH3x1TFCwI0L/0DEZIhJEMRgiE0Q2GgFJFYEIEkQXiAEtI0L/tTEZIhJEMRgiE0SIABsjQv+kMRkiTI4BAANC/5gxGCISRIgBYCNC/40jiABgJBJEJYgAWSQSRCSIAFIjEkSBBIgASiQSRCOIAGaBCxJEJYgAXoEMEkQkiABWgQoSRIEEiABNgQ4SRIEFiABEgTISRCmIAHpEKogAdUQriABwRCcEiABqRIAAiABkFESJigEBi/8jEkEAAiSJi/8lEkEAA0L/9Iv/gQQSQQADQv/pI4mKAQGBCov/IxJBAAuBCov/CIwAiwBMiYv/JRJBAANC/+uL/4EEEkEAA0L/4Iv/gQUSQQAHgQqL/wuMAEL/1YoBAYv/KRJBAAIjiYv/KhJBAANC//SL/ysSQQADQv/qi/8nBBJBAANC/98iiYoBASIoZUQjCChMZ4v/iYoBACgiZ4v/IwmI/+SL/xJBAAgiKGVEJRJEiYv/iP/Ri/8SQQADQv/qi/8jCIj/wYv/EkEAA0L/2kL/14oCAYv+IxJBAA+L/yUYIhJBAAOL/4mL/omL/4v+C4mJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}