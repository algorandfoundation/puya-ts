main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@8
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "run()void" => block@4, method "test_side_effects(uint64)void" => block@5, method "test_non_trivial_termination_of_clause(uint64,uint64)uint64" => block@6, * => block@7}
    block@4: // run_route_L5
        tests/approvals/switch-statements.algo.ts::DemoContract.run[routing]()
        goto block@7
    block@5: // test_side_effects_route_L68
        tests/approvals/switch-statements.algo.ts::DemoContract.test_side_effects[routing]()
        goto block@7
    block@6: // test_non_trivial_termination_of_clause_route_L83
        tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause[routing]()
        goto block@7
    block@7: // switch_case_next_L4
        goto block@9
    block@8: // create_NoOp_L4
        goto block@9
    block@9: // after_if_else_L4
        goto block@11
    block@10: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/switch-statements.algo.ts::DemoContract.__algots__.defaultCreate()
        exit 1u
    block@11: // after_if_else_L4
        exit 0u
    block@12: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.run[routing]() -> void:
    block@0: // L5
        tests/approvals/switch-statements.algo.ts::DemoContract.run()
        exit 1u

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_side_effects[routing]() -> void:
    block@0: // L68
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/switch-statements.algo.ts::DemoContract.test_side_effects(tmp%0#0)
        exit 1u

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause[routing]() -> void:
    block@0: // L83
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%2#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause(tmp%0#0, tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.run() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64(1u)
        let tmp%1#0: bool = (== tmp%0#0 3u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64(2u)
        let tmp%3#0: bool = (== tmp%2#0 3u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64(3u)
        let tmp%5#0: bool = (== tmp%4#0 1u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64(4u)
        let tmp%7#0: bool = (== tmp%6#0 3u)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_break(1u)
        let tmp%9#0: bool = (== tmp%8#0 11u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_break(2u)
        let tmp%11#0: bool = (== tmp%10#0 12u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_break(3u)
        let tmp%13#0: bool = (== tmp%12#0 10u)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_break(4u)
        let tmp%15#0: bool = (== tmp%14#0 14u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.test_break(5u)
        let tmp%17#0: bool = (== tmp%16#0 50u)
        (assert tmp%17#0)
        let tmp%18#0: bool = tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes("hmmm")
        (assert tmp%18#0)
        let tmp%19#0: bool = tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes(0xff)
        (assert tmp%19#0)
        let tmp%20#0: bool = tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes(ZHNmc2Rmc2Q=)
        (assert tmp%20#0)
        let tmp%21#0: bool = tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes(ONSGMZ3OMJTGOZDGMRSGM)
        (assert tmp%21#0)
        let tmp%22#0: bool = tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes(0x)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0)
        return 

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64(x: uint64) -> uint64:
    block@0: // L24
        let tmp%0#0: bool = (== x#0 1u)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // if_body_L26
        goto block@2
    block@2: // L26
        goto block@5
    block@3: // after_if_else_L26
        let tmp%1#0: bool = (== x#0 2u)
        goto tmp%1#0 ? block@4 : block@6
    block@4: // if_body_L27
        goto block@5
    block@5: // L27
        goto block@8
    block@6: // after_if_else_L27
        let tmp%2#0: bool = (== x#0 4u)
        goto tmp%2#0 ? block@7 : block@9
    block@7: // if_body_L28
        goto block@8
    block@8: // L28
        return 3u
    block@9: // after_if_else_L28
        goto block@10
    block@10: // L30
        goto block@11
    block@11: // L30
        return 1u

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_break(x: uint64) -> uint64:
    block@0: // L36
        let i#0: uint64 = 10u
        let tmp%0#0: bool = (== x#0 1u)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // if_body_L39
        goto block@2
    block@2: // L39
        goto block@5
    block@3: // after_if_else_L39
        let tmp%1#0: bool = (== x#0 2u)
        goto tmp%1#0 ? block@4 : block@6
    block@4: // if_body_L40
        goto block@5
    block@5: // L40
        goto block@8
    block@6: // after_if_else_L40
        let tmp%2#0: bool = (== x#0 4u)
        goto tmp%2#0 ? block@7 : block@9
    block@7: // if_body_L41
        goto block@8
    block@8: // L41
        let tmp%3#0: uint64 = (+ 10u x#0)
        let i#2: uint64 = tmp%3#0
        goto block@13
    block@9: // after_if_else_L41
        let tmp%4#0: bool = (== x#0 5u)
        goto tmp%4#0 ? block@10 : block@12
    block@10: // if_body_L44
        goto block@11
    block@11: // L44
        let tmp%5#0: uint64 = (* 10u x#0)
        let i#4: uint64 = tmp%5#0
        goto block@12
    block@12: // after_if_else_L44
        let i#7: uint64 = φ(i#0 <- block@9, i#4 <- block@11)
        goto block@13
    block@13: // L38
        let i#5: uint64 = φ(i#2 <- block@8, i#7 <- block@12)
        return i#5

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes(x: bytes) -> bool:
    block@0: // L50
        let tmp%0#0: bool = (== x#0 "hmmm")
        goto tmp%0#0 ? block@1 : block@3
    block@1: // if_body_L52
        goto block@2
    block@2: // L52
        goto block@5
    block@3: // after_if_else_L52
        let tmp%1#0: bool = (== x#0 0xff)
        goto tmp%1#0 ? block@4 : block@6
    block@4: // if_body_L53
        goto block@5
    block@5: // L53
        goto block@8
    block@6: // after_if_else_L53
        let tmp%2#0: bool = (== x#0 ZHNmc2Rmc2Q=)
        goto tmp%2#0 ? block@7 : block@9
    block@7: // if_body_L54
        goto block@8
    block@8: // L54
        goto block@11
    block@9: // after_if_else_L54
        let tmp%3#0: bool = (== x#0 ONSGMZ3OMJTGOZDGMRSGM)
        goto tmp%3#0 ? block@10 : block@12
    block@10: // if_body_L55
        goto block@11
    block@11: // L55
        return 1u
    block@12: // after_if_else_L55
        return 0u

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n: uint64) -> uint64:
    block@0: // L63
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "evalCount")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "evalCount" tmp%0#0)
        return n#0

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_side_effects(n: uint64) -> void:
    block@0: // L68
        (app_global_put "evalCount" 0u)
        let tmp%0#0: uint64 = (- n#0 1u)
        let tmp%1#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(tmp%0#0)
        let tmp%2#0: bool = (== n#0 tmp%1#0)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // if_body_L72
        goto block@2
    block@2: // L72
        goto block@10
    block@3: // after_if_else_L72
        let tmp%3#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n#0)
        let tmp%4#0: bool = (== n#0 tmp%3#0)
        goto tmp%4#0 ? block@4 : block@6
    block@4: // if_body_L74
        goto block@5
    block@5: // L74
        goto block@10
    block@6: // after_if_else_L74
        let tmp%5#0: uint64 = (+ n#0 1u)
        let tmp%6#0: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(tmp%5#0)
        let tmp%7#0: bool = (== n#0 tmp%6#0)
        goto tmp%7#0 ? block@7 : block@9
    block@7: // if_body_L76
        goto block@8
    block@8: // L76
        goto block@10
    block@9: // after_if_else_L76
        goto block@10
    block@10: // L71
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "evalCount")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%8#0: bool = (== maybe_value%0#0 2u)
        (assert tmp%8#0) // Only two functions should be evaluated
        return 

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause(n: uint64, y: uint64) -> uint64:
    block@0: // L83
        let tmp%0#0: bool = (== n#0 1u)
        goto tmp%0#0 ? block@1 : block@5
    block@1: // if_body_L85
        goto block@2
    block@2: // L85
        let tmp%1#0: uint64 = (% y#0 2u)
        let tmp%2#0: bool = (== tmp%1#0 0u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L86
        return y#0
    block@4: // else_body_L88
        return n#0
    block@5: // after_if_else_L85
        goto block@6
    block@6: // L91
        let tmp%3#0: uint64 = (* y#0 n#0)
        return tmp%3#0

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 