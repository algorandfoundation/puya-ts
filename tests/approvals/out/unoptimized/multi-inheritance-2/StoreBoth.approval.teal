#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_if_body@1

main_if_body@1:
    callsub constructor
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // tests/approvals/multi-inheritance-2.algo.ts:21
    // class StoreBoth extends classes(StoreString, StoreUint64) {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@11
    b main_abi_routing@4

main_abi_routing@4:
    // tests/approvals/multi-inheritance-2.algo.ts:21
    // class StoreBoth extends classes(StoreString, StoreUint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@9
    b main_call_NoOp@5

main_call_NoOp@5:
    // tests/approvals/multi-inheritance-2.algo.ts:21
    // class StoreBoth extends classes(StoreString, StoreUint64) {
    txna ApplicationArgs 0
    pushbytes 0xcf362d69 // method "test(string,uint64)void"
    pushbytes 0x48f26e85 // method "setStore(string)void"
    uncover 2
    match main_test_route@6 main_setStore_route@7
    b main_switch_case_next@8

main_switch_case_next@8:
    b main_after_if_else@10

main_after_if_else@10:
    b main_after_if_else@12

main_after_if_else@12:
    // tests/approvals/multi-inheritance-2.algo.ts:21
    // class StoreBoth extends classes(StoreString, StoreUint64) {
    err

main_setStore_route@7:
    // tests/approvals/multi-inheritance-2.algo.ts:8
    // setStore(value: string) {
    callsub setStore
    b main_switch_case_next@8

main_test_route@6:
    // tests/approvals/multi-inheritance-2.algo.ts:22
    // test(theString: string, theUint: uint64) {
    callsub test
    b main_switch_case_next@8

main_create_NoOp@9:
    b main_after_if_else@10

main___algots__.defaultCreate@11:
    // tests/approvals/multi-inheritance-2.algo.ts:21
    // class StoreBoth extends classes(StoreString, StoreUint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/multi-inheritance-2.algo.ts:22
    // test(theString: string, theUint: uint64) {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    callsub tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test
    intc_1 // 1
    return


// tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore[routing]() -> void:
setStore:
    b setStore_block@0

setStore_block@0:
    // tests/approvals/multi-inheritance-2.algo.ts:8
    // setStore(value: string) {
    txna ApplicationArgs 1
    extract 2 0
    callsub tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore
    intc_1 // 1
    return


// tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test(theString: bytes, theUint: uint64) -> void:
tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test:
    // tests/approvals/multi-inheritance-2.algo.ts:22
    // test(theString: string, theUint: uint64) {
    proto 2 0
    b tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test_block@0

tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test_block@0:
    // tests/approvals/multi-inheritance-2.algo.ts:24
    // this.setStore(theString)
    frame_dig -2
    callsub tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore
    // tests/approvals/multi-inheritance-2.algo.ts:27
    // super.class(StoreUint64).setStore(theUint)
    frame_dig -1
    callsub tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore
    retsub


// tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(value: bytes) -> void:
tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore:
    // tests/approvals/multi-inheritance-2.algo.ts:8
    // setStore(value: string) {
    proto 1 0
    b tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore_block@0

tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore_block@0:
    // tests/approvals/multi-inheritance-2.algo.ts:6
    // stringStore = GlobalState<string>()
    pushbytes "stringStore"
    // tests/approvals/multi-inheritance-2.algo.ts:9
    // this.stringStore.value = value
    frame_dig -1
    app_global_put
    retsub


// tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore(value: uint64) -> void:
tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore:
    // tests/approvals/multi-inheritance-2.algo.ts:16
    // setStore(value: uint64) {
    proto 1 0
    b tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore_block@0

tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore_block@0:
    // tests/approvals/multi-inheritance-2.algo.ts:14
    // uint64Store = GlobalState<uint64>()
    pushbytes "uint64Store"
    // tests/approvals/multi-inheritance-2.algo.ts:17
    // this.uint64Store.value = value
    frame_dig -1
    app_global_put
    retsub


// tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub


// polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance-2.algo.ts::StoreString,tests/approvals/multi-inheritance-2.algo.ts::StoreUint64>.constructor() -> void:
constructor:
    b constructor_block@0

constructor_block@0:
    b constructor_block@1

constructor_block@1:
    b constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2

constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2:
    b constructor_block@3

constructor_block@3:
    b constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@4

constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@4:
    retsub
