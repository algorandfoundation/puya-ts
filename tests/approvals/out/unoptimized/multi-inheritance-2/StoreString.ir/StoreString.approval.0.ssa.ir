main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/multi-inheritance-2.algo.ts::StoreString.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.__puya_arc4_router__() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "setStore(string)void" => block@2, * => block@3}
    block@2: // setStore_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: string = decode<string>(reinterpret_Encoded(len+utf8[])%0#0)
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(tmp%7#0)
        return 1u
    block@3: // switch_case_default_L5
        goto block@4
    block@4: // switch_case_next_L5
        goto block@9
    block@5: // bare_routing_L5
        let tmp%8#0: uint64 = (txn OnCompletion)
        switch tmp%8#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L5
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        (assert tmp%10#0) // can only call when creating
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L5
        goto block@8
    block@8: // switch_case_next_L5
        goto block@9
    block@9: // after_if_else_L5
        return 0u

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(value: string) -> void:
    block@0: // L8
        (app_global_put "stringStore" value#0)
        return 

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.__algots__.defaultCreate() -> void:
    block@0: // L5
        return 