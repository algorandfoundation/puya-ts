main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L5
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "setStore(string)void" => block@3, * => block@4}
    block@3: // setStore_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore[routing]()
        goto block@4
    block@4: // switch_case_next_L5
        goto block@6
    block@5: // __algots__.defaultCreate_L5
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.__algots__.defaultCreate()
        exit 1u
    block@6: // after_if_else_L5
        exit 0u
    block@7: // after_inlined_tests/approvals/multi-inheritance-2.algo.ts::StoreString.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore[routing]() -> void:
    block@0: // L8
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(tmp%1#0)
        exit 1u

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(value: string) -> void:
    block@0: // L8
        (app_global_put "stringStore" value#0)
        return 

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.__algots__.defaultCreate() -> void:
    block@0: // L5
        return 