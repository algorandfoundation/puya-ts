{
    "name": "MutableObjectDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            }
        ],
        "Point": [
            {
                "name": "y",
                "type": "uint64"
            },
            {
                "name": "x",
                "type": "uint64"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "VectorPoint": [
            {
                "name": "v",
                "type": "Vector"
            },
            {
                "name": "p",
                "type": "Point"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNestedObjects",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "struct": "VectorPoint",
                    "name": "vp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMethodSelector",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAssertMatch",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArc4Encoding",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Point",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool)",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool)",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1021,
                        1038
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1010
                    ],
                    "errorMessage": "Encoded order should be swapped"
                },
                {
                    "pc": [
                        933
                    ],
                    "errorMessage": "For the purpose of this test, a should not equal b"
                },
                {
                    "pc": [
                        424,
                        431,
                        455,
                        461,
                        468,
                        474,
                        522,
                        528,
                        543,
                        549,
                        567,
                        573,
                        581,
                        587,
                        598,
                        604,
                        611,
                        617,
                        629,
                        635,
                        646,
                        652,
                        664,
                        667,
                        673,
                        676,
                        692,
                        695,
                        701,
                        704,
                        724,
                        727,
                        734,
                        737,
                        744,
                        747,
                        754,
                        757,
                        802,
                        817,
                        835,
                        841,
                        860,
                        865,
                        875,
                        881,
                        894,
                        902,
                        924,
                        930,
                        938,
                        944,
                        1025,
                        1042
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        1029,
                        1046
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        141,
                        164,
                        185,
                        212,
                        232,
                        253,
                        270,
                        290,
                        310,
                        348,
                        375
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        829,
                        888,
                        899,
                        907
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        403
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        146,
                        169,
                        190,
                        217,
                        237,
                        258,
                        275,
                        295,
                        315,
                        353,
                        380
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAgBECYHAAQVH3x1BAJFiAcEuiepugSV2C1vB3BsdWdpbnMIAAAAAAAAAAAxGyITQQFONhoAgASJOI3dgATvMi1tKoAEy4HeuCuABC9nClWABNTIH1uABPSDXCMnBIAEhrtkgYAEqbxh8U8LjgsA7ADRAKsAlwCDAHIAXQBJAC4AGQACIkMxGSISRDEYIhNENhoBVwIAiAN8JEL/6DEZIhJEMRgiE0SIA1opTFCwJEL/0zEZIhJEMRgiE0Q2GgFXAgCIAywpTFCwJEL/uDEZIhJEMRgiE0Q2GgGIArUkQv+kMRkiEkQxGCITRDYaAReIAhckQv+PMRkiEkQxGCITRIgB+CRC/34xGSISRDEYIhNENhoBiAF3JEL/ajEZIhJEMRgiE0Q2GgGIANUkQv9WMRkiEkQxGCITRDYaATYaAhc2GgMXTwJPAk8CiACYKUxQsCRC/zAxGSISRDEYIhNENhoBNhoCiABVKUxQsCRC/xUxGSISRDEYIhNEiAAbJEL/BDEZIkyOAQADQv74MRgiEkSIAqIkQv7tIhYkFkwoTFBMUEkiI1gXFrBJI0lYFxawIhYkFkwoTFBMUBJEiYoCAYv+IiNYF4v/IiNYFwiL/iNJWBeL/yNJWBcITBZMFkwoTFBMUImKAwGL/haL/SJPAl2M/Yv/Fov9I08CXUmM/YmKAQCL/yIjWBeL/yNJWBdMFkwWTChMUExQSSIjWBdMSSNJWBdPAhZMFkwoTFBMUEyL/yIjWBdLASIjWBcSRIv/I0lYF0sBI0lYFxJEi/8SREkiI1gXi/8iI1gXEkRJI0lYF4v/I0lYFxJESYv/EkRJIiNYF0xJI0lYF08CTE4CSwEiI1gXEkQjSVgXEkSJigEAi/8iJVgiI1gXi/8iJVgjSVgXTBZMFkwoTFBMUIv/JUlYI0lYF4v/JUlYIiNYFxZMFkwoTFBMUEwoTFBMUEkiJVgiI1gXFrBJIiVYI0lYFxawSSVJWCNJWBcWsEklSVgiI1gXFrCL/xJEiSpJEkQnBEkSRCtJEkSJigEAIov/gQILSRZMFkwoTFBMUEkjSVgXi/+BAgsSQQBkiwEiI1gXi/+BAgsSQQBVJESLAUkjSVgXTEkiI1gXTwIWTBZMKExQTFBJjABMIiNYF0wjSVgXEkEAJosBI0lYF4sAIiNYFxJBABYkRIsBSSNJWBeL/w1EIiNYF4v/DUSJIkL/5yJC/6iKAQCL/yNJWBeL/yIjWBcTRIv/I0lYF4v/IiNYF0wWTBZMKExQTFCL/0xJFSNLAQ8jSwJPAk1LAkxPAlJMSRUiSwEPIksCTwJNTCNLAQ8jTwJPAk1PAk8CTwJSUBJEiYoBAScFi/9QvkRJJSNYFyINRImABG1haW6+REklI1gXIg1EiYoBACiACAAAAAAAAAABUCcGUCcGUIABAFAnBYv/UEy/iYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}