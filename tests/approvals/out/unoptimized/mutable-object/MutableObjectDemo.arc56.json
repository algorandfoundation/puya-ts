{
    "name": "MutableObjectDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Point": [
            {
                "name": "y",
                "type": "uint64"
            },
            {
                "name": "x",
                "type": "uint64"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "VectorPoint": [
            {
                "name": "v",
                "type": "Vector"
            },
            {
                "name": "p",
                "type": "Point"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNestedObjects",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "struct": "VectorPoint",
                    "name": "vp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMethodSelector",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAssertMatch",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArc4Encoding",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Point",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1133,
                        1150
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1122
                    ],
                    "errorMessage": "Encoded order should be swapped"
                },
                {
                    "pc": [
                        1047
                    ],
                    "errorMessage": "For the purpose of this test, a should not equal b"
                },
                {
                    "pc": [
                        1141,
                        1158
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        156,
                        179,
                        200,
                        227,
                        247,
                        268,
                        285,
                        305,
                        325,
                        363,
                        390
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        485,
                        633,
                        688,
                        900,
                        959,
                        1012,
                        1021,
                        1029
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        418
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        161,
                        184,
                        205,
                        232,
                        252,
                        273,
                        290,
                        310,
                        330,
                        368,
                        395
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1175
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAgQASYJAAQVH3x1CAAAAAAAAAABBAJFiAcEuiepugQ4FPkqB3BsdWdpbnMEp4AA3ggAAAAAAAAAADEbIhNBAU82GgCABIk4jd2ABO8yLW0rgATLgd64JwSABC9nClWABNTIH1uABPSDXCMnBYAEAHpMsIAEqbxh8U8LjgsA7ADRAKsAlwCDAHIAXQBJAC4AGQACIkMxGSISRDEYIhNENhoBVwIAiAPdJUL/6DEZIhJEMRgiE0SIA7spTFCwJUL/0zEZIhJEMRgiE0Q2GgFXAgCIA40pTFCwJUL/uDEZIhJEMRgiE0Q2GgGIAxglQv+kMRkiEkQxGCITRDYaAReIApElQv+PMRkiEkQxGCITRIgCcSVC/34xGSISRDEYIhNENhoBiAGnJUL/ajEZIhJEMRgiE0Q2GgGIAOslQv9WMRkiEkQxGCITRDYaATYaAhc2GgMXTwJPAk8CiACuKUxQsCVC/zAxGSISRDEYIhNENhoBNhoCiABtKUxQsCVC/xUxGSISRDEYIhNEiAAbJUL/BDEZIkyOAQADQv74MRgiEkSIAyElQv7tIhYoTFAlFlBJIiNYFxawSSNJWBcWsCIWKExQJRZQSwEiI1gXTEkiI1gXTwISTgJMI0lYF0wjSVgXEhBEiYoCAYv+IiNYF4v/IiNYFwiL/iNJWBeL/yNJWBcITBYoTFBMFlCJigMBi/4Wi/0iTwJdjP2L/xaL/SNPAl1JjP2JigEAi/9JIiNYF0xJI0lYF08CFihMUEwWUEyL/yIjWBdLASIjWBcSRIv/I0lYF0sBI0lYFxJEi/8iI1gXSwEiI1gXEkyL/yNJWBdMI0lYFxIQREkiI1gXi/8iI1gXEkRJI0lYF4v/I0lYFxJESSIjWBeL/yIjWBcSTEkjSVgXi/8jSVgXEk8CEERJIiNYF0xJI0lYF08CTE4CSwEiI1gXEkQjSVgXEkSJigEAi/8iJFgiI1gXi/8iJFgjSVgXTBYoTFBMFlCL/yRJWCNJWBeL/yRJWCIjWBdMFihMUEwWUChPAlBMUEkiJFgiI1gXFrBJIiRYI0lYFxawSSRJWCIjWBcWsEkkSVgjSVgXFrBJIiRYIiNYF4v/IiRYIiNYFxJMSSIkWCNJWBeL/yIkWCNJWBcSTwIQTEkkSVgjSVgXi/8kSVgiI1gXEkwkSVgiI1gXi/8kSVgjSVgXEhAQRIkrSRJEJwVJEkQnBEkSRImKAQCL/4ECC0kWKExQTBZQSSNJWBeL/4ECCxJMSSIjWBeL/4ECCxJPAhBESSNJWBdMSSIjWBdPAhYoTFBMFlBLASIjWBdMSSNJWBdPAhJOAksBI0lYF0wiI1gXEk8CEERJI0lYF4v/DUQiI1gXi/8NRImKAQCL/yNJWBeL/yIjWBcTRIv/I0lYF4v/IiNYF0wWKExQTBZQi/9MSRUjSwEPI0sCTwJNSwJMTwJSTEkVIksBDyJLAk8CTUwjSwEPI08CTwJNTwJPAk8CUlASRImKAQEnBov/UL5ESSQjWBciDUSJgARtYWluvkRJJCNYFyINRImKAQCAAQAiSVQnBxWBBBJEKCcHUCpQKlAlFlcGAkxQKCpQJwhQJwhQTwJQgRsWVwYCUExQJwaL/1BJvEhMv4mJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}