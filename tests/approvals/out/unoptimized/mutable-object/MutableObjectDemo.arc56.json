{
    "name": "MutableObjectDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Point": [
            {
                "name": "y",
                "type": "uint64"
            },
            {
                "name": "x",
                "type": "uint64"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "VectorPoint": [
            {
                "name": "v",
                "type": "Vector"
            },
            {
                "name": "p",
                "type": "Point"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNestedObjects",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "struct": "VectorPoint",
                    "name": "vp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMethodSelector",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAssertMatch",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArc4Encoding",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Point",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1260,
                        1280
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1246
                    ],
                    "errorMessage": "Encoded order should be swapped"
                },
                {
                    "pc": [
                        1164
                    ],
                    "errorMessage": "For the purpose of this test, a should not equal b"
                },
                {
                    "pc": [
                        1268,
                        1288
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        179,
                        204,
                        228,
                        258,
                        280,
                        303,
                        322,
                        344,
                        366,
                        407,
                        437
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        551,
                        717,
                        773,
                        1000,
                        1068,
                        1126,
                        1135,
                        1143
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        474
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        184,
                        209,
                        233,
                        263,
                        285,
                        308,
                        327,
                        349,
                        371,
                        412,
                        442
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1308
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAECAAQASYJAAQVH3x1BAJFiAcEuiepugQ4FPkqCAAAAAAAAAABB3BsdWdpbnMEp4AA3ggAAAAAAAAAAChCAABCAAAxGyMTQQF5QgAANhoAgASJOI3dgATvMi1tKoAEy4HeuCuABC9nClWABNTIH1uABPSDXCMnBIAEAHpMsIAEqbxh8U8LjgsBEgD0AMsAtQCfAIwAdQBfAEEAKQAQQgAAQgAAQgAAI0UBQgAAQzEZIxJEMRgjE0Q2GgFXAgCIBEglRQFC/+YxGSMSRDEYIxNEiAQhKU8BULAlRQFC/84xGSMSRDEYIxNENhoBVwIAiAPtKU8BULAlRQFC/7AxGSMSRDEYIxNENhoBiANrJUUBQv+aMRkjEkQxGCMTRDYaAReIAtclRQFC/4MxGSMSRDEYIxNEiAKyJUUBQv9wMRkjEkQxGCMTRDYaAYgB2SVFAUL/WjEZIxJEMRgjE0Q2GgGIAQ8lRQFC/0QxGSMSRDEYIxNENhoBNhoCFzYaAxdPAk8CTwKIAM0pTwFQsCVFAUL/GzEZIxJEMRgjE0Q2GgE2GgKIAIMpTwFQsCVFAUL+/TEZIxJEMRgjE0SIACYlRQFC/uoxGSNPAY4BAAlCAABCAABC/tIxGCMSRIgDdCVFAUL+ykIAACMWKE8BUCUWUEkjIlgXFrBJIiJYFxawIxYoTwFQJRZQSwEjIlgXTgFJIyJYF08CEk4CTwEiIlgXTwEiIlgXEhBEiYoCAUIAAIv+IyJYF4v/IyJYFwiL/iIiWBeL/yIiWBcITwEWKE8BUE8BFlCJigMBQgAAi/4Wi/0jTwJdjP2L/xaL/SJPAl1JjP2JigEAQgAAi/9JIyJYF04BSSIiWBdPAhYoTwFQTwEWUE4Bi/8jIlgXSwEjIlgXEkSL/yIiWBdLASIiWBcSRIv/IyJYF0sBIyJYFxJOAYv/IiJYF08BIiJYFxIQREkjIlgXi/8jIlgXEkRJIiJYF4v/IiJYFxJESSMiWBeL/yMiWBcSTgFJIiJYF4v/IiJYFxJPAhBESSMiWBdOAUkiIlgXTwJOAU4CSwEjIlgXEkQiIlgXEkSJigEAQgAAi/8jJFgjIlgXi/8jJFgiIlgXTwEWKE8BUE8BFlCL/yQkWCIiWBeL/yQkWCMiWBdPARYoTwFQTwEWUChPAlBPAVBJIyRYIyJYFxawSSMkWCIiWBcWsEkkJFgjIlgXFrBJJCRYIiJYFxawSSMkWCMiWBeL/yMkWCMiWBcSTgFJIyRYIiJYF4v/IyRYIiJYFxJPAhBOAUkkJFgiIlgXi/8kJFgjIlgXEk4BJCRYIyJYF4v/JCRYIiJYFxIQEESJQgAAKioSRCcEJwQSRCsrEkSJigEAQgAAi/+BAgtJFihPAVBPARZQSSIiWBeL/4ECCxJOAUkjIlgXi/+BAgsSTwIQREkiIlgXTgFJIyJYF08CFihPAVBPARZQSwEjIlgXTgFJIiJYF08CEk4CSwEiIlgXTwEjIlgXEk8CEERJIiJYF4v/DUQjIlgXi/8NRImKAQBCAACL/yIiWBeL/yMiWBcTRIv/IiJYF4v/IyJYF08BFihPAVBPARZQi/9OAUkVIksBDyJLAk8CTUsCTwFPAlJOAUkVI0sBDyNLAk8CTU4BIksBDyJPAk8CTU8CTwJPAlJQEkSJigEBQgAAJwaL/1C+REkkIlgXIw1EiUIAAIAEbWFpbr5ESSQiWBcjDUSJigEAQgAAgAEAIyNUJwcVgQQSRCgnB1AnBVAnBVAlFlcGAk8BUCgnBVAnCFAnCFBPAlCBGxZXBgJQTwFQJwaL/1BJvEhPAb+JQgAAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}