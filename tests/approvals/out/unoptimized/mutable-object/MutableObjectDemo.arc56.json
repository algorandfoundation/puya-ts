{
    "name": "MutableObjectDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Point": [
            {
                "name": "y",
                "type": "uint64"
            },
            {
                "name": "x",
                "type": "uint64"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "VectorPoint": [
            {
                "name": "v",
                "type": "Vector"
            },
            {
                "name": "p",
                "type": "Point"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNestedObjects",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "struct": "VectorPoint",
                    "name": "vp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMethodSelector",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAssertMatch",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArc4Encoding",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Point",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1199,
                        1219
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1185
                    ],
                    "errorMessage": "Encoded order should be swapped"
                },
                {
                    "pc": [
                        1103
                    ],
                    "errorMessage": "For the purpose of this test, a should not equal b"
                },
                {
                    "pc": [
                        1207,
                        1227
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        81
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        490,
                        656,
                        712,
                        939,
                        1007,
                        1065,
                        1074,
                        1082
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1247
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAECAAQASYJAAQVH3x1BAJFiAcEuiepugQ4FPkqCAAAAAAAAAABB3BsdWdpbnMEp4AA3ggAAAAAAAAAAEIAAEIAADEbIxNBALJCAAAxGSMSRDEYIxNBAKBCAAA2GgCABIk4jd2ABO8yLW0qgATLgd64K4AEL2cKVYAE1MgfW4AE9INcIycEgAQAekywgASpvGHxTwuOCwBGAEAAOgA0AC4AKAAiABwAFgAQAApCAABCAABCAAAAiADfQv/ziADMQv/tiACzQv/niACiQv/hiACQQv/biACCQv/ViABxQv/PiABgQv/JiAA8Qv/DiAAjQv+9iAAVQv+3Qv+3MRkjEjEYIxIQRIgEDCVDQgAAiACWJUNCAAA2GgE2GgKIAM0pTwFQsCVDQgAANhoBNhoCFzYaAxdPAk8CTwKIANspTwFQsCVDQgAANhoBiADpJUNCAAA2GgGIAZIlQ0IAAIgCTSVDQgAANhoBF4gCUyVDQgAANhoBiALFJUNCAAA2GgFXAgCIAx4pTwFQsCVDQgAAiAMnKU8BULAlQ0IAADYaAVcCAIgDKCVDQgAAIxYoTwFQJRZQSSMiWBcWsEkiIlgXFrAjFihPAVAlFlBLASMiWBdOAUkjIlgXTwISTgJPASIiWBdPASIiWBcSEESJigIBQgAAi/4jIlgXi/8jIlgXCIv+IiJYF4v/IiJYFwhPARYoTwFQTwEWUImKAwFCAACL/haL/SNPAl2M/Yv/Fov9Ik8CXUmM/YmKAQBCAACL/0kjIlgXTgFJIiJYF08CFihPAVBPARZQTgGL/yMiWBdLASMiWBcSRIv/IiJYF0sBIiJYFxJEi/8jIlgXSwEjIlgXEk4Bi/8iIlgXTwEiIlgXEhBESSMiWBeL/yMiWBcSREkiIlgXi/8iIlgXEkRJIyJYF4v/IyJYFxJOAUkiIlgXi/8iIlgXEk8CEERJIyJYF04BSSIiWBdPAk4BTgJLASMiWBcSRCIiWBcSRImKAQBCAACL/yMkWCMiWBeL/yMkWCIiWBdPARYoTwFQTwEWUIv/JCRYIiJYF4v/JCRYIyJYF08BFihPAVBPARZQKE8CUE8BUEkjJFgjIlgXFrBJIyRYIiJYFxawSSQkWCMiWBcWsEkkJFgiIlgXFrBJIyRYIyJYF4v/IyRYIyJYFxJOAUkjJFgiIlgXi/8jJFgiIlgXEk8CEE4BSSQkWCIiWBeL/yQkWCMiWBcSTgEkJFgjIlgXi/8kJFgiIlgXEhAQRIlCAAAqKhJEJwQnBBJEKysSRImKAQBCAACL/4ECC0kWKE8BUE8BFlBJIiJYF4v/gQILEk4BSSMiWBeL/4ECCxJPAhBESSIiWBdOAUkjIlgXTwIWKE8BUE8BFlBLASMiWBdOAUkiIlgXTwISTgJLASIiWBdPASMiWBcSTwIQREkiIlgXi/8NRCMiWBeL/w1EiYoBAEIAAIv/IiJYF4v/IyJYFxNEi/8iIlgXi/8jIlgXTwEWKE8BUE8BFlCL/04BSRUiSwEPIksCTwJNSwJPAU8CUk4BSRUjSwEPI0sCTwJNTgEiSwEPIk8CTwJNTwJPAk8CUlASRImKAQFCAAAnBov/UL5ESSQiWBcjDUSJQgAAgARtYWluvkRJJCJYFyMNRImKAQBCAACAAQAjI1QnBxWBBBJEKCcHUCcFUCcFUCUWVwYCTwFQKCcFUCcIUCcIUE8CUIEbFlcGAlBPAVAnBov/UEm8SE8Bv4lCAACJ",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}