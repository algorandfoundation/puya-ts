#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1 16
    bytecblock 0x 0x151f7c75 0x02458807 0xba27a9ba 0x95d82d6f "plugins" 0x0000000000000000

main_block@0:

main_block@1:
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@16

main_abi_routing@2:
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x89388ddd // method "testVectorCreationAndEquality()void"
    pushbytes 0xef322d6d // method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)"
    bytec_2 // method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)"
    pushbytes 0xcb81deb8 // method "implicitCastingAndSpreading((uint64,uint64))void"
    bytec_3 // method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void"
    pushbytes 0x2f670a55 // method "testMethodSelector()void"
    pushbytes 0xd4c81f5b // method "testAssertMatch(uint64)void"
    pushbytes 0xf4835c23 // method "testArc4Encoding((uint64,uint64))void"
    bytec 4 // method "getPlugin(string)(uint64,uint64,uint64,bool)"
    pushbytes 0x86bb6481 // method "getMain()(uint64,uint64,uint64,bool)"
    pushbytes 0xa9bc61f1 // method "setPlugin(string)void"
    uncover 11
    match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_mutateVector_route@5 main_implicitCastingAndSpreading_route@6 main_testNestedObjects_route@7 main_testMethodSelector_route@8 main_testAssertMatch_route@9 main_testArc4Encoding_route@10 main_getPlugin_route@11 main_getMain_route@12 main_setPlugin_route@13

main_switch_case_default@14:

main_switch_case_next@15:

main_after_if_else@20:
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21:
    return

main_setPlugin_route@13:
    // tests/approvals/mutable-object.algo.ts:116
    // public setPlugin(key: string) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:116
    // public setPlugin(key: string) {
    callsub setPlugin
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_getMain_route@12:
    // tests/approvals/mutable-object.algo.ts:106
    // public getMain() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getMain
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_getPlugin_route@11:
    // tests/approvals/mutable-object.algo.ts:100
    // public getPlugin(key: string): PluginInfo {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:100
    // public getPlugin(key: string): PluginInfo {
    callsub getPlugin
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_testArc4Encoding_route@10:
    // tests/approvals/mutable-object.algo.ts:85
    // testArc4Encoding(p: Point) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/mutable-object.algo.ts:85
    // testArc4Encoding(p: Point) {
    callsub testArc4Encoding
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_testAssertMatch_route@9:
    // tests/approvals/mutable-object.algo.ts:68
    // testAssertMatch(x: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/mutable-object.algo.ts:68
    // testAssertMatch(x: uint64) {
    callsub testAssertMatch
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_testMethodSelector_route@8:
    // tests/approvals/mutable-object.algo.ts:56
    // public testMethodSelector() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testMethodSelector
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_testNestedObjects_route@7:
    // tests/approvals/mutable-object.algo.ts:45
    // public testNestedObjects(vp: VectorPoint) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/mutable-object.algo.ts:45
    // public testNestedObjects(vp: VectorPoint) {
    callsub testNestedObjects
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_implicitCastingAndSpreading_route@6:
    // tests/approvals/mutable-object.algo.ts:34
    // public implicitCastingAndSpreading(v1: Vector) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/mutable-object.algo.ts:34
    // public implicitCastingAndSpreading(v1: Vector) {
    callsub implicitCastingAndSpreading
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_mutateVector_route@5:
    // tests/approvals/mutable-object.algo.ts:28
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/approvals/mutable-object.algo.ts:28
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    uncover 2
    uncover 2
    uncover 2
    callsub mutateVector
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_addVectors_route@4:
    // tests/approvals/mutable-object.algo.ts:21
    // public addVectors(v1: Vector, v2: Vector) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/mutable-object.algo.ts:21
    // public addVectors(v1: Vector, v2: Vector) {
    callsub addVectors
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_testVectorCreationAndEquality_route@3:
    // tests/approvals/mutable-object.algo.ts:13
    // public testVectorCreationAndEquality() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testVectorCreationAndEquality
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21

main_bare_routing@16:
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@17

main_switch_case_default@18:

main_switch_case_next@19:
    b main_after_if_else@20

main___algots__.defaultCreate@17:
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__@21


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality() -> void:
testVectorCreationAndEquality:

testVectorCreationAndEquality_block@0:
    // tests/approvals/mutable-object.algo.ts:14
    // const v1 = new Vector({ x: 0, y: 1 })
    intc_0 // 0
    itob
    intc_2 // 1
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:15
    // log(v1.x)
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    log
    // tests/approvals/mutable-object.algo.ts:16
    // log(v1.y)
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    log
    // tests/approvals/mutable-object.algo.ts:17
    // const v2 = new Vector({ y: 1, x: 0 })
    intc_0 // 0
    itob
    intc_2 // 1
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:18
    // assert(v1 === v2)
    ==
    assert
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(v1: bytes, v2: bytes) -> bytes:
addVectors:
    // tests/approvals/mutable-object.algo.ts:21
    // public addVectors(v1: Vector, v2: Vector) {
    proto 2 1

addVectors_block@0:
    // tests/approvals/mutable-object.algo.ts:23
    // x: v1.x + v2.x,
    frame_dig -2
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    +
    // tests/approvals/mutable-object.algo.ts:24
    // y: v1.y + v2.y,
    frame_dig -2
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    +
    // tests/approvals/mutable-object.algo.ts:23
    // x: v1.x + v2.x,
    swap
    itob
    swap
    // tests/approvals/mutable-object.algo.ts:24
    // y: v1.y + v2.y,
    itob
    swap
    // tests/approvals/mutable-object.algo.ts:22-25
    // return new Vector({
    //   x: v1.x + v2.x,
    //   y: v1.y + v2.y,
    // })
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(v1: bytes, newX: uint64, newY: uint64) -> bytes:
mutateVector:
    // tests/approvals/mutable-object.algo.ts:28
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    proto 3 1

mutateVector_block@0:
    // tests/approvals/mutable-object.algo.ts:29
    // v1.x = newX
    frame_dig -2
    itob
    frame_dig -3
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -3
    // tests/approvals/mutable-object.algo.ts:30
    // v1.y = newY
    frame_dig -1
    itob
    frame_dig -3
    intc_1 // 8
    uncover 2
    replace3
    dup
    frame_bury -3
    // tests/approvals/mutable-object.algo.ts:31
    // return v1
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(v1: bytes) -> void:
implicitCastingAndSpreading:
    // tests/approvals/mutable-object.algo.ts:34
    // public implicitCastingAndSpreading(v1: Vector) {
    proto 1 0

implicitCastingAndSpreading_block@0:
    // tests/approvals/mutable-object.algo.ts:35
    // const v2 = new Vector(v1)
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    itob
    swap
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:36
    // const v3 = new Vector({ ...v2 })
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    uncover 2
    itob
    swap
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    swap
    // tests/approvals/mutable-object.algo.ts:37
    // assert(v1.x === v2.x)
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dig 1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:38
    // assert(v1.y === v2.y)
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    dig 1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:39
    // assert(v1 === v2)
    frame_dig -1
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:40
    // assert(v3.x === v1.x)
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:41
    // assert(v3.y === v1.y)
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:42
    // assert(v3 === v1)
    frame_dig -1
    ==
    assert
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(vp: bytes) -> void:
testNestedObjects:
    // tests/approvals/mutable-object.algo.ts:45
    // public testNestedObjects(vp: VectorPoint) {
    proto 1 0

testNestedObjects_block@0:
    // tests/approvals/mutable-object.algo.ts:46
    // const v1 = new Vector({ x: vp.v.x, y: vp.v.y })
    frame_dig -1
    intc_0 // 0
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_0 // 0
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    itob
    swap
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:47
    // const p1 = new Point({ x: vp.p.x, y: vp.p.y })
    frame_dig -1
    intc_3 // 16
    dup
    extract3 // on error: Index access is out of bounds
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_3 // 16
    dup
    extract3 // on error: Index access is out of bounds
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    swap
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:48
    // const vp1 = new VectorPoint({ v: v1.copy(), p: p1.copy() })
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:49
    // log(vp1.v.x)
    dup
    intc_0 // 0
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    log
    // tests/approvals/mutable-object.algo.ts:50
    // log(vp1.v.y)
    dup
    intc_0 // 0
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    log
    // tests/approvals/mutable-object.algo.ts:51
    // log(vp1.p.x)
    dup
    intc_3 // 16
    dup
    extract3 // on error: Index access is out of bounds
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    log
    // tests/approvals/mutable-object.algo.ts:52
    // log(vp1.p.y)
    dup
    intc_3 // 16
    dup
    extract3 // on error: Index access is out of bounds
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    log
    // tests/approvals/mutable-object.algo.ts:53
    // assert(vp1 === vp)
    frame_dig -1
    ==
    assert
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testMethodSelector() -> void:
testMethodSelector:

testMethodSelector_block@0:
    // tests/approvals/mutable-object.algo.ts:58
    // methodSelector(MutableObjectDemo.prototype.mutateVector) ===
    bytec_2 // method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)"
    // tests/approvals/mutable-object.algo.ts:59
    // methodSelector('mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)'),
    dup
    // tests/approvals/mutable-object.algo.ts:58-59
    // methodSelector(MutableObjectDemo.prototype.mutateVector) ===
    //   methodSelector('mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)'),
    ==
    // tests/approvals/mutable-object.algo.ts:57-60
    // assert(
    //   methodSelector(MutableObjectDemo.prototype.mutateVector) ===
    //     methodSelector('mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)'),
    // )
    assert
    // tests/approvals/mutable-object.algo.ts:61
    // assert(methodSelector(MutableObjectDemo.prototype.getPlugin) === methodSelector('getPlugin(string)(uint64,uint64,uint64,bool)'))
    bytec 4 // method "getPlugin(string)(uint64,uint64,uint64,bool)"
    dup
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:63
    // methodSelector(MutableObjectDemo.prototype.testNestedObjects) ===
    bytec_3 // method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void"
    // tests/approvals/mutable-object.algo.ts:64
    // methodSelector('testNestedObjects(((uint64,uint64),(uint64,uint64)))void'),
    dup
    // tests/approvals/mutable-object.algo.ts:63-64
    // methodSelector(MutableObjectDemo.prototype.testNestedObjects) ===
    //   methodSelector('testNestedObjects(((uint64,uint64),(uint64,uint64)))void'),
    ==
    // tests/approvals/mutable-object.algo.ts:62-65
    // assert(
    //   methodSelector(MutableObjectDemo.prototype.testNestedObjects) ===
    //     methodSelector('testNestedObjects(((uint64,uint64),(uint64,uint64)))void'),
    // )
    assert
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(x: uint64) -> void:
testAssertMatch:
    // tests/approvals/mutable-object.algo.ts:68
    // testAssertMatch(x: uint64) {
    proto 1 0
    intc_0 // 0

testAssertMatch_block@0:
    // tests/approvals/mutable-object.algo.ts:71
    // y: (b = x * 2),
    frame_dig -1
    pushint 2 // 2
    *
    // tests/approvals/mutable-object.algo.ts:72
    // x: b,
    dup
    itob
    swap
    // tests/approvals/mutable-object.algo.ts:71
    // y: (b = x * 2),
    itob
    swap
    // tests/approvals/mutable-object.algo.ts:70-73
    // const obj: Vector = new Vector({
    //   y: (b = x * 2),
    //   x: b,
    // })
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dup
    // tests/approvals/mutable-object.algo.ts:74-77
    // assertMatch(obj, {
    //   y: x * 2,
    //   x: x * 2,
    // })
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    // tests/approvals/mutable-object.algo.ts:75
    // y: x * 2,
    frame_dig -1
    pushint 2 // 2
    *
    // tests/approvals/mutable-object.algo.ts:74-77
    // assertMatch(obj, {
    //   y: x * 2,
    //   x: x * 2,
    // })
    ==
    bz testAssertMatch_bool_false@3

testAssertMatch_and_contd@1:
    // tests/approvals/mutable-object.algo.ts:74-77
    // assertMatch(obj, {
    //   y: x * 2,
    //   x: x * 2,
    // })
    frame_dig 1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    // tests/approvals/mutable-object.algo.ts:76
    // x: x * 2,
    frame_dig -1
    pushint 2 // 2
    *
    // tests/approvals/mutable-object.algo.ts:74-77
    // assertMatch(obj, {
    //   y: x * 2,
    //   x: x * 2,
    // })
    ==
    bz testAssertMatch_bool_false@3

testAssertMatch_bool_true@2:
    intc_2 // 1

testAssertMatch_bool_merge@4:
    // tests/approvals/mutable-object.algo.ts:74-77
    // assertMatch(obj, {
    //   y: x * 2,
    //   x: x * 2,
    // })
    assert // assert target is match for conditions
    // tests/approvals/mutable-object.algo.ts:78
    // const v = new Point({ y: obj.y, x: obj.x })
    frame_dig 1
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    uncover 2
    itob
    swap
    itob
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dup
    frame_bury 0
    // tests/approvals/mutable-object.algo.ts:80
    // assertMatch(obj, { x: v.x, y: v.y })
    swap
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    ==
    bz testAssertMatch_bool_false@7

testAssertMatch_and_contd@5:
    // tests/approvals/mutable-object.algo.ts:80
    // assertMatch(obj, { x: v.x, y: v.y })
    frame_dig 1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig 0
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    ==
    bz testAssertMatch_bool_false@7

testAssertMatch_bool_true@6:
    intc_2 // 1

testAssertMatch_bool_merge@8:
    // tests/approvals/mutable-object.algo.ts:80
    // assertMatch(obj, { x: v.x, y: v.y })
    assert // assert target is match for conditions
    // tests/approvals/mutable-object.algo.ts:81
    // assertMatch(obj, { y: { greaterThan: x } })
    frame_dig 1
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    >
    assert // assert target is match for conditions
    // tests/approvals/mutable-object.algo.ts:82
    // assertMatch(obj, { x: { greaterThan: x } })
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    >
    assert // assert target is match for conditions
    retsub

testAssertMatch_bool_false@7:
    intc_0 // 0
    b testAssertMatch_bool_merge@8

testAssertMatch_bool_false@3:
    intc_0 // 0
    b testAssertMatch_bool_merge@4


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(p: bytes) -> void:
testArc4Encoding:
    // tests/approvals/mutable-object.algo.ts:85
    // testArc4Encoding(p: Point) {
    proto 1 0

testArc4Encoding_block@0:
    // tests/approvals/mutable-object.algo.ts:86
    // assert(p.x !== p.y, 'For the purpose of this test, a should not equal b')
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    !=
    assert // For the purpose of this test, a should not equal b
    // tests/approvals/mutable-object.algo.ts:88
    // x: p.x,
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    // tests/approvals/mutable-object.algo.ts:89
    // y: p.y,
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    // tests/approvals/mutable-object.algo.ts:88
    // x: p.x,
    swap
    itob
    swap
    // tests/approvals/mutable-object.algo.ts:89
    // y: p.y,
    itob
    swap
    // tests/approvals/mutable-object.algo.ts:87-90
    // const obj: Vector = new Vector({
    //   x: p.x,
    //   y: p.y,
    // })
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:91
    // const pEncoded = encodeArc4(p)
    frame_dig -1
    swap
    // tests/approvals/mutable-object.algo.ts:93
    // assert(pEncoded === objEncoded.slice(8).concat(objEncoded.slice(0, 8)), 'Encoded order should be swapped')
    dup
    len
    intc_1 // 8
    dig 1
    >=
    intc_1 // 8
    dig 2
    uncover 2
    select
    dig 2
    swap
    uncover 2
    substring3
    swap
    dup
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    swap
    intc_1 // 8
    dig 1
    >=
    intc_1 // 8
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    concat
    ==
    assert // Encoded order should be swapped
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(key: bytes) -> bytes:
getPlugin:
    // tests/approvals/mutable-object.algo.ts:100
    // public getPlugin(key: string): PluginInfo {
    proto 1 1

getPlugin_block@0:
    // tests/approvals/mutable-object.algo.ts:96
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec 5 // "plugins"
    frame_dig -1
    concat
    // tests/approvals/mutable-object.algo.ts:101
    // const value = this.plugins(key).value.copy()
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:102
    // assert(value.lastCalled.native > 0, 'Last called not zero')
    dup
    intc_3 // 16
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_0 // 0
    >
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:103
    // return value
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain() -> bytes:
getMain:

getMain_block@0:
    // tests/approvals/mutable-object.algo.ts:98
    // plugin = Box<PluginInfo>({ key: 'main' })
    pushbytes "main"
    // tests/approvals/mutable-object.algo.ts:107
    // const value = this.plugin.value.copy()
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:108
    // assert(value.lastCalled.native > 0, 'Last called not zero')
    dup
    intc_3 // 16
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_0 // 0
    >
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:109
    // return value
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: bytes) -> void:
setPlugin:
    // tests/approvals/mutable-object.algo.ts:116
    // public setPlugin(key: string) {
    proto 1 0

setPlugin_block@0:
    // tests/approvals/mutable-object.algo.ts:117-129
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   // methods: new MutableArray(
    //   //   new MethodInfo({
    //   //     selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //     cooldown: new arc4.UintN64(1),
    //   //     lastCalled: new arc4.UintN64(1),
    //   //   }),
    //   // ),
    // })
    bytec_0 // 0x
    // tests/approvals/mutable-object.algo.ts:118
    // lastValidRound: new arc4.UintN64(1),
    pushbytes 0x0000000000000001
    // tests/approvals/mutable-object.algo.ts:117-129
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   // methods: new MutableArray(
    //   //   new MethodInfo({
    //   //     selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //     cooldown: new arc4.UintN64(1),
    //   //     lastCalled: new arc4.UintN64(1),
    //   //   }),
    //   // ),
    // })
    concat
    // tests/approvals/mutable-object.algo.ts:119
    // cooldown: new arc4.UintN64(),
    bytec 6 // 0x0000000000000000
    // tests/approvals/mutable-object.algo.ts:117-129
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   // methods: new MutableArray(
    //   //   new MethodInfo({
    //   //     selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //     cooldown: new arc4.UintN64(1),
    //   //     lastCalled: new arc4.UintN64(1),
    //   //   }),
    //   // ),
    // })
    concat
    // tests/approvals/mutable-object.algo.ts:120
    // lastCalled: new arc4.UintN64(),
    bytec 6 // 0x0000000000000000
    // tests/approvals/mutable-object.algo.ts:117-129
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   // methods: new MutableArray(
    //   //   new MethodInfo({
    //   //     selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //     cooldown: new arc4.UintN64(1),
    //   //     lastCalled: new arc4.UintN64(1),
    //   //   }),
    //   // ),
    // })
    concat
    // tests/approvals/mutable-object.algo.ts:121
    // adminPrivileges: new arc4.Bool(false),
    pushbytes 0x00
    // tests/approvals/mutable-object.algo.ts:117-129
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   // methods: new MutableArray(
    //   //   new MethodInfo({
    //   //     selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //     cooldown: new arc4.UintN64(1),
    //   //     lastCalled: new arc4.UintN64(1),
    //   //   }),
    //   // ),
    // })
    concat
    // tests/approvals/mutable-object.algo.ts:96
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec 5 // "plugins"
    frame_dig -1
    concat
    // tests/approvals/mutable-object.algo.ts:117-129
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   // methods: new MutableArray(
    //   //   new MethodInfo({
    //   //     selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //     cooldown: new arc4.UintN64(1),
    //   //     lastCalled: new arc4.UintN64(1),
    //   //   }),
    //   // ),
    // })
    swap
    box_put
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
