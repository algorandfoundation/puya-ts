main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L10
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@12
    block@2: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "getPlugin(string)(uint64,uint64,uint64,bool)" => block@7, method "getMain()(uint64,uint64,uint64,bool)" => block@8, method "setPlugin(string)void" => block@9, * => block@10}
    block@3: // testVectorCreationAndEquality_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality()
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@4: // addVectors_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 2)
        let tmp%11#0: bytes[16] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(reinterpret_bytes[16]%0#0, reinterpret_bytes[16]%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@5: // mutateVector_route_L26
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_bytes[16]%2#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%18#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%19#0: bytes[16] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(reinterpret_bytes[16]%2#0, tmp%17#0, tmp%18#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
        (log tmp%20#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@6: // implicitCastingAndSpreading_route_L32
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_bytes[16]%3#0: bytes[16] = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(reinterpret_bytes[16]%3#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@7: // getPlugin_route_L45
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let tmp%29#0: bytes = (txna ApplicationArgs 1)
        let tmp%30#0: bytes = ((extract 2 0) tmp%29#0)
        let tmp%31#0: bytes[25] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(tmp%30#0)
        let tmp%32#0: bytes = (concat 0x151f7c75 tmp%31#0)
        (log tmp%32#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@8: // getMain_route_L51
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let tmp%37#0: bytes[25] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain()
        let tmp%38#0: bytes = (concat 0x151f7c75 tmp%37#0)
        (log tmp%38#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@9: // setPlugin_route_L61
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (== tmp%39#0 NoOp)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        let tmp%42#0: bool = (!= tmp%41#0 0u)
        (assert tmp%42#0) // can only call when not creating
        let tmp%43#0: bytes = (txna ApplicationArgs 1)
        let tmp%44#0: bytes = ((extract 2 0) tmp%43#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(tmp%44#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@10: // switch_case_default_L10
        goto block@11
    block@11: // switch_case_next_L10
        goto block@16
    block@12: // bare_routing_L10
        let tmp%45#0: uint64 = (txn OnCompletion)
        switch tmp%45#0 {0u => block@13, * => block@14}
    block@13: // __algots__.defaultCreate_L10
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (== tmp%46#0 0u)
        (assert tmp%47#0) // can only call when creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate()
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@14: // switch_case_default_L10
        goto block@15
    block@15: // switch_case_next_L10
        goto block@16
    block@16: // after_if_else_L10
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8: bool = 0u
        goto block@17
    block@17: // after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7 <- block@13, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8 <- block@16)
        return tmp%0#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality() -> void:
    block@0: // L11
        let val_as_bytes%0#0: bytes[8] = (itob 0u)
        let val_as_bytes%1#0: bytes[8] = (itob 0u)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let v1#0: bytes[16] = encoded_tuple_buffer%2#0
        let encoded%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let tmp%1#0: bytes[8] = (itob tmp%0#0)
        (log tmp%1#0)
        let encoded%1#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%1#0)
        let tmp%3#0: bytes[8] = (itob tmp%2#0)
        (log tmp%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob 0u)
        let val_as_bytes%3#0: bytes[8] = (itob 0u)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let v2#0: bytes[16] = encoded_tuple_buffer%5#0
        let tmp%4#0: bool = (== v1#0 v2#0)
        (assert tmp%4#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(v1: bytes[16], v2: bytes[16]) -> bytes[16]:
    block@0: // L19
        let encoded%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let encoded%1#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%1#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let encoded%2#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%2#0)
        let encoded%3#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%4#0: uint64 = (btoi encoded%3#0)
        let tmp%5#0: uint64 = (+ tmp%3#0 tmp%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%5#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        return encoded_tuple_buffer%2#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(v1: bytes[16], newX: uint64, newY: uint64) -> bytes[16]:
    block@0: // L26
        let assigned_value%0#0: uint64 = newX#0
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%0#0)
        let encoded%0#0: bytes[8] = val_as_bytes%0#0
        let updated_data%0#0: bytes = (replace3 v1#0 0u encoded%0#0)
        let v1#1: bytes[16] = updated_data%0#0
        let assigned_value%1#0: uint64 = newY#0
        let val_as_bytes%1#0: bytes[8] = (itob assigned_value%1#0)
        let encoded%1#0: bytes[8] = val_as_bytes%1#0
        let updated_data%1#0: bytes = (replace3 v1#1 8u encoded%1#0)
        let v1#2: bytes[16] = updated_data%1#0
        return v1#2

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(v1: bytes[16]) -> void:
    block@0: // L32
        let item0%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob item0%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob item1%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let v2#0: bytes[16] = encoded_tuple_buffer%2#0
        let encoded%0#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let encoded%1#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%0#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let v3#0: bytes[16] = encoded_tuple_buffer%5#0
        let encoded%2#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%2#0)
        let encoded%3#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%3#0)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let encoded%4#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%5#0: uint64 = (btoi encoded%4#0)
        let encoded%5#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%6#0: uint64 = (btoi encoded%5#0)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let encoded%6#0: bytes = (extract3 v3#0 0u 8u) // on error: Index access is out of bounds
        let tmp%8#0: uint64 = (btoi encoded%6#0)
        let encoded%7#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%9#0: uint64 = (btoi encoded%7#0)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0)
        let encoded%8#0: bytes = (extract3 v3#0 8u 8u) // on error: Index access is out of bounds
        let tmp%11#0: uint64 = (btoi encoded%8#0)
        let encoded%9#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi encoded%9#0)
        let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(key: bytes) -> bytes[25]:
    block@0: // L45
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // Box must have value
        let copy%0#0: bytes = maybe_value%0#0
        let value#0: bytes[25] = copy%0#0
        let tmp%0#0: bytes = (extract3 value#0 16u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bool = (> tmp%1#0 0u)
        (assert tmp%2#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain() -> bytes[25]:
    block@0: // L51
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let copy%0#0: bytes = maybe_value%0#0
        let value#0: bytes[25] = copy%0#0
        let tmp%0#0: bytes = (extract3 value#0 16u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bool = (> tmp%1#0 0u)
        (assert tmp%2#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: bytes) -> void:
    block@0: // L61
        let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x0000000000000001)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x0000000000000000)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x0000000000000000)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 0x00)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_put box_prefixed_key%0#0 encoded_tuple_buffer%4#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate() -> void:
    block@0: // L10
        return 