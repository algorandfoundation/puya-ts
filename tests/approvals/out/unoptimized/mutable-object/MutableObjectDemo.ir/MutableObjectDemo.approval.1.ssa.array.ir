main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L12
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" => block@7, method "testMethodSelector()void" => block@8, method "testAssertMatch(uint64)void" => block@9, method "testArc4Encoding((uint64,uint64))void" => block@10, method "getPlugin(string)(uint64,uint64,uint64,bool)" => block@11, method "getMain()(uint64,uint64,uint64,bool)" => block@12, method "setPlugin(string)void" => block@13, * => block@14}
    block@3: // testVectorCreationAndEquality_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality()
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@21
    block@4: // addVectors_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 2)
        let tmp%11#0: bytes[16] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(reinterpret_bytes[16]%0#0, reinterpret_bytes[16]%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@21
    block@5: // mutateVector_route_L28
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_bytes[16]%2#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%18#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%19#0: bytes[16] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(reinterpret_bytes[16]%2#0, tmp%17#0, tmp%18#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
        (log tmp%20#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@21
    block@6: // implicitCastingAndSpreading_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_bytes[16]%3#0: bytes[16] = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(reinterpret_bytes[16]%3#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@21
    block@7: // testNestedObjects_route_L49
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_bytes[32]%0#0: bytes[32] = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(reinterpret_bytes[32]%0#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@21
    block@8: // testMethodSelector_route_L60
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testMethodSelector()
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@21
    block@9: // testAssertMatch_route_L72
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%37#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(tmp%37#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@21
    block@10: // testArc4Encoding_route_L89
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let reinterpret_bytes[16]%4#0: bytes[16] = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(reinterpret_bytes[16]%4#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@21
    block@11: // getPlugin_route_L104
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let tmp%46#0: bytes = (txna ApplicationArgs 1)
        let tmp%47#0: bytes = ((extract 2 0) tmp%46#0)
        let tmp%48#0: bytes[25] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(tmp%47#0)
        let tmp%49#0: bytes = (concat 0x151f7c75 tmp%48#0)
        (log tmp%49#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@21
    block@12: // getMain_route_L110
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (== tmp%50#0 NoOp)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        let tmp%53#0: bool = (!= tmp%52#0 0u)
        (assert tmp%53#0) // can only call when not creating
        let tmp%54#0: bytes[25] = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain()
        let tmp%55#0: bytes = (concat 0x151f7c75 tmp%54#0)
        (log tmp%55#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@21
    block@13: // setPlugin_route_L120
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (== tmp%56#0 NoOp)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        let tmp%59#0: bool = (!= tmp%58#0 0u)
        (assert tmp%59#0) // can only call when not creating
        let tmp%60#0: bytes = (txna ApplicationArgs 1)
        let tmp%61#0: bytes = ((extract 2 0) tmp%60#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(tmp%61#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@21
    block@14: // switch_case_default_L12
        goto block@15
    block@15: // switch_case_next_L12
        goto block@20
    block@16: // bare_routing_L12
        let tmp%62#0: uint64 = (txn OnCompletion)
        switch tmp%62#0 {0u => block@17, * => block@18}
    block@17: // __algots__.defaultCreate_L12
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (== tmp%63#0 0u)
        (assert tmp%64#0) // can only call when creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate()
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11: bool = 1u
        goto block@21
    block@18: // switch_case_default_L12
        goto block@19
    block@19: // switch_case_next_L12
        goto block@20
    block@20: // after_if_else_L12
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12: bool = 0u
        goto block@21
    block@21: // after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11 <- block@17, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12 <- block@20)
        return tmp%0#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality() -> void:
    block@0: // L13
        let val_as_bytes%0#0: bytes[8] = (itob 0u)
        let val_as_bytes%1#0: bytes[8] = (itob 1u)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let v1#0: bytes[16] = encoded_tuple_buffer%2#0
        let encoded%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let tmp%1#0: bytes[8] = (itob tmp%0#0)
        (log tmp%1#0)
        let encoded%1#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%1#0)
        let tmp%3#0: bytes[8] = (itob tmp%2#0)
        (log tmp%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob 0u)
        let val_as_bytes%3#0: bytes[8] = (itob 1u)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let v2#0: bytes[16] = encoded_tuple_buffer%5#0
        let tmp%4#0: bool = (== v1#0 v2#0)
        (assert tmp%4#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(v1: bytes[16], v2: bytes[16]) -> bytes[16]:
    block@0: // L21
        let encoded%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let encoded%1#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%1#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let encoded%2#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%2#0)
        let encoded%3#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%4#0: uint64 = (btoi encoded%3#0)
        let tmp%5#0: uint64 = (+ tmp%3#0 tmp%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%5#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        return encoded_tuple_buffer%2#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(v1: bytes[16], newX: uint64, newY: uint64) -> bytes[16]:
    block@0: // L28
        let assigned_value%0#0: uint64 = newX#0
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%0#0)
        let encoded%0#0: bytes[8] = val_as_bytes%0#0
        let updated_data%0#0: bytes = (replace3 v1#0 0u encoded%0#0)
        let v1#1: bytes[16] = updated_data%0#0
        let assigned_value%1#0: uint64 = newY#0
        let val_as_bytes%1#0: bytes[8] = (itob assigned_value%1#0)
        let encoded%1#0: bytes[8] = val_as_bytes%1#0
        let updated_data%1#0: bytes = (replace3 v1#1 8u encoded%1#0)
        let v1#2: bytes[16] = updated_data%1#0
        return v1#2

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(v1: bytes[16]) -> void:
    block@0: // L34
        let item0%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob item0%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob item1%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let v2#0: bytes[16] = encoded_tuple_buffer%2#0
        let encoded%0#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let encoded%1#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%0#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let v3#0: bytes[16] = encoded_tuple_buffer%5#0
        let encoded%2#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%2#0)
        let encoded%3#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%3#0)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let encoded%4#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%5#0: uint64 = (btoi encoded%4#0)
        let encoded%5#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%6#0: uint64 = (btoi encoded%5#0)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== v1#0 v2#0)
        (assert tmp%8#0)
        let encoded%6#0: bytes = (extract3 v3#0 0u 8u) // on error: Index access is out of bounds
        let tmp%9#0: uint64 = (btoi encoded%6#0)
        let encoded%7#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%10#0: uint64 = (btoi encoded%7#0)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let encoded%8#0: bytes = (extract3 v3#0 8u 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi encoded%8#0)
        let encoded%9#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%13#0: uint64 = (btoi encoded%9#0)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== v3#0 v1#0)
        (assert tmp%15#0)
        let item0%2#0: bytes = (extract3 v3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3#0: uint64 = (btoi item0%2#0)
        let item1%2#0: bytes = (extract3 v3#0 8u 8u) // on error: Index access is out of bounds
        let item1%3#0: uint64 = (btoi item1%2#0)
        let x#0: uint64 = item0%3#0
        let y#0: uint64 = item1%3#0
        let encoded%10#0: bytes = (extract3 v3#0 0u 8u) // on error: Index access is out of bounds
        let tmp%16#0: uint64 = (btoi encoded%10#0)
        let tmp%17#0: bool = (== x#0 tmp%16#0)
        (assert tmp%17#0)
        let encoded%11#0: bytes = (extract3 v3#0 8u 8u) // on error: Index access is out of bounds
        let tmp%18#0: uint64 = (btoi encoded%11#0)
        let tmp%19#0: bool = (== y#0 tmp%18#0)
        (assert tmp%19#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(vp: bytes[32]) -> void:
    block@0: // L49
        let tmp%0#0: bytes = (extract3 vp#0 0u 16u) // on error: Index access is out of bounds
        let encoded%0#0: bytes = (extract3 tmp%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%0#0)
        let tmp%2#0: bytes = (extract3 vp#0 0u 16u) // on error: Index access is out of bounds
        let encoded%1#0: bytes = (extract3 tmp%2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%1#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let v1#0: bytes[16] = encoded_tuple_buffer%2#0
        let tmp%4#0: bytes = (extract3 vp#0 16u 16u) // on error: Index access is out of bounds
        let encoded%2#0: bytes = (extract3 tmp%4#0 8u 8u) // on error: Index access is out of bounds
        let tmp%5#0: uint64 = (btoi encoded%2#0)
        let tmp%6#0: bytes = (extract3 vp#0 16u 16u) // on error: Index access is out of bounds
        let encoded%3#0: bytes = (extract3 tmp%6#0 0u 8u) // on error: Index access is out of bounds
        let tmp%7#0: uint64 = (btoi encoded%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%7#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%5#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let p1#0: bytes[16] = encoded_tuple_buffer%5#0
        let copy%0#0: bytes[16] = v1#0
        let copy%1#0: bytes[16] = p1#0
        let encoded_tuple_buffer%7#0: bytes = (concat 0x copy%0#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 copy%1#0)
        let vp1#0: bytes[32] = encoded_tuple_buffer%8#0
        let tmp%8#0: bytes = (extract3 vp1#0 0u 16u) // on error: Index access is out of bounds
        let encoded%4#0: bytes = (extract3 tmp%8#0 0u 8u) // on error: Index access is out of bounds
        let tmp%9#0: uint64 = (btoi encoded%4#0)
        let tmp%10#0: bytes[8] = (itob tmp%9#0)
        (log tmp%10#0)
        let tmp%11#0: bytes = (extract3 vp1#0 0u 16u) // on error: Index access is out of bounds
        let encoded%5#0: bytes = (extract3 tmp%11#0 8u 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi encoded%5#0)
        let tmp%13#0: bytes[8] = (itob tmp%12#0)
        (log tmp%13#0)
        let tmp%14#0: bytes = (extract3 vp1#0 16u 16u) // on error: Index access is out of bounds
        let encoded%6#0: bytes = (extract3 tmp%14#0 8u 8u) // on error: Index access is out of bounds
        let tmp%15#0: uint64 = (btoi encoded%6#0)
        let tmp%16#0: bytes[8] = (itob tmp%15#0)
        (log tmp%16#0)
        let tmp%17#0: bytes = (extract3 vp1#0 16u 16u) // on error: Index access is out of bounds
        let encoded%7#0: bytes = (extract3 tmp%17#0 0u 8u) // on error: Index access is out of bounds
        let tmp%18#0: uint64 = (btoi encoded%7#0)
        let tmp%19#0: bytes[8] = (itob tmp%18#0)
        (log tmp%19#0)
        let tmp%20#0: bool = (== vp1#0 vp#0)
        (assert tmp%20#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testMethodSelector() -> void:
    block@0: // L60
        let tmp%0#0: bool = (== method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)")
        (assert tmp%0#0)
        let tmp%1#0: bool = (== method "getPlugin(string)(uint64,uint64,uint64,bool)" method "getPlugin(string)(uint64,uint64,uint64,bool)")
        (assert tmp%1#0)
        let tmp%2#0: bool = (== method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void")
        (assert tmp%2#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(x: uint64) -> void:
    block@0: // L72
        let b#0: uint64 = (* x#0 2u)
        let val_as_bytes%0#0: bytes[8] = (itob b#0)
        let val_as_bytes%1#0: bytes[8] = (itob b#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let obj#0: bytes[16] = encoded_tuple_buffer%2#0
        let encoded%0#0: bytes = (extract3 obj#0 8u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let tmp%1#0: uint64 = (* x#0 2u)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // and_contd_L78
        let encoded%1#0: bytes = (extract3 obj#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%1#0)
        let tmp%4#0: uint64 = (* x#0 2u)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L78
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L78
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L78
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let encoded%2#0: bytes = (extract3 obj#0 8u 8u) // on error: Index access is out of bounds
        let tmp%6#0: uint64 = (btoi encoded%2#0)
        let encoded%3#0: bytes = (extract3 obj#0 0u 8u) // on error: Index access is out of bounds
        let tmp%7#0: uint64 = (btoi encoded%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%7#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let v#0: bytes[16] = encoded_tuple_buffer%5#0
        let encoded%4#0: bytes = (extract3 obj#0 0u 8u) // on error: Index access is out of bounds
        let tmp%8#0: uint64 = (btoi encoded%4#0)
        let encoded%5#0: bytes = (extract3 v#0 8u 8u) // on error: Index access is out of bounds
        let tmp%9#0: uint64 = (btoi encoded%5#0)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        goto tmp%10#0 ? block@5 : block@7
    block@5: // and_contd_L84
        let encoded%6#0: bytes = (extract3 obj#0 8u 8u) // on error: Index access is out of bounds
        let tmp%11#0: uint64 = (btoi encoded%6#0)
        let encoded%7#0: bytes = (extract3 v#0 0u 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi encoded%7#0)
        let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
        goto tmp%13#0 ? block@6 : block@7
    block@6: // bool_true_L84
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L84
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L84
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // assert target is match for conditions
        let encoded%8#0: bytes = (extract3 obj#0 8u 8u) // on error: Index access is out of bounds
        let tmp%14#0: uint64 = (btoi encoded%8#0)
        let tmp%15#0: bool = (> tmp%14#0 x#0)
        (assert tmp%15#0) // assert target is match for conditions
        let encoded%9#0: bytes = (extract3 obj#0 0u 8u) // on error: Index access is out of bounds
        let tmp%16#0: uint64 = (btoi encoded%9#0)
        let tmp%17#0: bool = (> tmp%16#0 x#0)
        (assert tmp%17#0) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(p: bytes[16]) -> void:
    block@0: // L89
        let encoded%0#0: bytes = (extract3 p#0 8u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let encoded%1#0: bytes = (extract3 p#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%1#0)
        let tmp%2#0: bool = (!= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // For the purpose of this test, a should not equal b
        let encoded%2#0: bytes = (extract3 p#0 8u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%2#0)
        let encoded%3#0: bytes = (extract3 p#0 0u 8u) // on error: Index access is out of bounds
        let tmp%4#0: uint64 = (btoi encoded%3#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%4#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let obj#0: bytes[16] = encoded_tuple_buffer%2#0
        let pEncoded#0: bytes = p#0
        let objEncoded#0: bytes = obj#0
        let length%0#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%5#0: bytes = (substring3 objEncoded#0 bounded_index%0#0 length%0#0)
        let length%1#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%1#0)
        let bounded_index%1#0: uint64 = (select 0u length%1#0 is_out_of_bounds%1#0)
        let is_out_of_bounds%2#0: bool = (>= 8u length%1#0)
        let bounded_index%2#0: uint64 = (select 8u length%1#0 is_out_of_bounds%2#0)
        let tmp%6#0: bytes = (substring3 objEncoded#0 bounded_index%1#0 bounded_index%2#0)
        let tmp%7#0: bytes = (concat tmp%5#0 tmp%6#0)
        let tmp%8#0: bool = (== pEncoded#0 tmp%7#0)
        (assert tmp%8#0) // Encoded order should be swapped
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(key: bytes) -> bytes[25]:
    block@0: // L104
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // Box must have value
        let copy%0#0: bytes = maybe_value%0#0
        let value#0: bytes[25] = copy%0#0
        let tmp%0#0: bytes = (extract3 value#0 16u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bool = (> tmp%1#0 0u)
        (assert tmp%2#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain() -> bytes[25]:
    block@0: // L110
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let copy%0#0: bytes = maybe_value%0#0
        let value#0: bytes[25] = copy%0#0
        let tmp%0#0: bytes = (extract3 value#0 16u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bool = (> tmp%1#0 0u)
        (assert tmp%2#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: bytes) -> void:
    block@0: // L120
        let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x0000000000000001)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x0000000000000000)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x0000000000000000)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 0x00)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_put box_prefixed_key%0#0 encoded_tuple_buffer%4#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate() -> void:
    block@0: // L12
        return 