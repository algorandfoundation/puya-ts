{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/extract-bytes.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAMc;AAAG;AAAb;;;AACO;;AAAP;AAGF;;;AACS;;AAAQ;AAAR;AAAP;AACO;;AAAS;AAAT;AAAP;AACgB;AACT;;;AAAwB;AAAxB;AAAP;AADgB;AAET;AAAA;;AAAA;AAFS;AAET;;AAAA;;AAAA;AAA0B;AAA1B;AAAP;AAFgB;AAIE;AAAG;AAAd;AAA2B;AAA3B;AAAP;AAJgB;AAKT;;AAAA;AAAA;AAA+B;AAA/B;AAAP;AALgB;AAOT;;AAAA;;AAAA;AAAgC;;AAAhC;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/extract-bytes.algo.ts::ExtractBytesAlgo.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 2 0"
    },
    "5": {
      "op": "bytecblock \"abcdefg\" \"cdefg\" \"cd\""
    },
    "24": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "25": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "2"
      ],
      "stack_out": [
        "2",
        "0"
      ]
    },
    "26": {
      "callsub": "tests/approvals/extract-bytes.algo.ts::ExtractBytesAlgo.test",
      "op": "callsub test",
      "stack_out": []
    },
    "29": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "31": {
      "op": "return",
      "stack_out": []
    },
    "32": {
      "subroutine": "tests/approvals/extract-bytes.algo.ts::ExtractBytesAlgo.test",
      "params": {
        "two#0": "uint64",
        "zero#0": "uint64"
      },
      "block": "test",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "35": {
      "op": "frame_dig -2",
      "defined_out": [
        "two#0 (copy)"
      ],
      "stack_out": [
        "two#0 (copy)"
      ]
    },
    "37": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "two#0 (copy)"
      ],
      "stack_out": [
        "two#0 (copy)",
        "2"
      ]
    },
    "38": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "error": "Param two should be 2",
      "op": "assert // Param two should be 2",
      "stack_out": []
    },
    "40": {
      "op": "frame_dig -1",
      "defined_out": [
        "zero#0 (copy)"
      ],
      "stack_out": [
        "zero#0 (copy)"
      ]
    },
    "42": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "zero#0 (copy)"
      ],
      "stack_out": [
        "zero#0 (copy)",
        "0"
      ]
    },
    "43": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "44": {
      "error": "Param zero should be 0",
      "op": "assert // Param zero should be 0",
      "stack_out": []
    },
    "45": {
      "op": "bytec_0 // \"abcdefg\"",
      "defined_out": [
        "\"abcdefg\""
      ],
      "stack_out": [
        "\"abcdefg\""
      ]
    },
    "46": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "bytec_1 // \"cdefg\"",
      "defined_out": [
        "\"cdefg\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"cdefg\""
      ]
    },
    "50": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "51": {
      "op": "assert",
      "stack_out": []
    },
    "52": {
      "op": "bytec_0 // \"abcdefg\"",
      "stack_out": [
        "\"abcdefg\""
      ]
    },
    "53": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "54": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%4#0",
        "two#0 (copy)"
      ]
    },
    "56": {
      "op": "-",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "57": {
      "op": "bytec_0 // \"abcdefg\"",
      "stack_out": [
        "tmp%5#0",
        "\"abcdefg\""
      ]
    },
    "58": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%5#0",
        "\"abcdefg\"",
        "two#0 (copy)"
      ]
    },
    "60": {
      "op": "uncover 2",
      "stack_out": [
        "\"abcdefg\"",
        "two#0 (copy)",
        "tmp%5#0"
      ]
    },
    "62": {
      "op": "extract3",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "63": {
      "op": "bytec_1 // \"cdefg\"",
      "stack_out": [
        "tmp%6#0",
        "\"cdefg\""
      ]
    },
    "64": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "65": {
      "op": "assert",
      "stack_out": []
    },
    "66": {
      "op": "bytec_0 // \"abcdefg\"",
      "stack_out": [
        "\"abcdefg\""
      ]
    },
    "67": {
      "op": "intc_0 // 2",
      "stack_out": [
        "\"abcdefg\"",
        "2"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "\"abcdefg\"",
        "2",
        "2"
      ]
    },
    "69": {
      "op": "extract3",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "70": {
      "op": "bytec_2 // \"cd\"",
      "defined_out": [
        "\"cd\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"cd\""
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "72": {
      "op": "assert",
      "stack_out": []
    },
    "73": {
      "op": "bytec_0 // \"abcdefg\"",
      "stack_out": [
        "\"abcdefg\""
      ]
    },
    "74": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"abcdefg\"",
        "two#0 (copy)"
      ]
    },
    "76": {
      "op": "dup",
      "stack_out": [
        "\"abcdefg\"",
        "two#0 (copy)",
        "two#0 (copy)"
      ]
    },
    "77": {
      "op": "extract3",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "78": {
      "op": "bytec_2 // \"cd\"",
      "stack_out": [
        "tmp%10#0",
        "\"cd\""
      ]
    },
    "79": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "80": {
      "op": "assert",
      "stack_out": []
    },
    "81": {
      "op": "bytec_0 // \"abcdefg\"",
      "stack_out": [
        "\"abcdefg\""
      ]
    },
    "82": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"abcdefg\"",
        "two#0 (copy)"
      ]
    },
    "84": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"abcdefg\"",
        "two#0 (copy)",
        "zero#0 (copy)"
      ]
    },
    "86": {
      "op": "extract3",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "87": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "\"\""
      ]
    },
    "89": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "90": {
      "op": "assert",
      "stack_out": []
    },
    "91": {
      "retsub": true,
      "op": "retsub"
    }
  }
}