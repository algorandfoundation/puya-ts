{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/for-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;AA4BE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5BF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA4BE;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApBF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAoBE;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AATF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AASE;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AACE;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACE;;;AACqB;AACV;;AAAW;;AAAA;;AAAA;AAApB;;;AACE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAD4B;;AAAA;AAAA;;;;;AAG9B;AAGF;;;AACqB;AACV;;AAAW;;AAAA;;AAAA;AAApB;;;AACE;;AAAA;;AAAA;AAAA;AAAA;;AACY;;AAAR;AAAJ;;;AAIF;AAN8B;;AAAA;;AAAA;AAAA;;;;;;;;AAShC;;;AACqB;AACV;;AAAW;;AAAA;;AAAA;AAApB;;;AACM;;AAAI;;AAAJ;AAAU;AAAV;AAAJ;;;AAD4B;;AAAA;;AAAA;AAAA;;;;;AAE5B;;AAAA;;AAAA;AAAA;;;;;AAEF;AAEF;;;;;AACqB;AACH;;AAAW;;AAAA;;AAAA;AAApB;;;AACI;;AAAA;;AAAW;;AAAA;;AAAA;AAApB;;;AACW;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AAEI;AAAA;;AAAA;AAAJ;;;AAGJ;;AAAA;;AAAA;AANgC;;AAAA;;AAAA;AAAA;;;;;AADK;;AAAA;;AAAA;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "15": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "19": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "pushbytes 0xf8654f73 // method \"test_for_loop(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_for_loop(uint64,uint64,uint64)uint64)"
      ]
    },
    "28": {
      "op": "pushbytes 0x287f4c02 // method \"test_for_loop_break(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)"
      ]
    },
    "34": {
      "op": "pushbytes 0x4bd7778c // method \"test_for_loop_continue(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_continue(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_continue(uint64,uint64,uint64)uint64)"
      ]
    },
    "40": {
      "op": "pushbytes 0x33675e06 // method \"test_for_loop_labelled(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_continue(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_labelled(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_continue(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_labelled(uint64,uint64,uint64)uint64)"
      ]
    },
    "46": {
      "op": "uncover 4",
      "stack_out": [
        "Method(test_for_loop(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_break(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_continue(uint64,uint64,uint64)uint64)",
        "Method(test_for_loop_labelled(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "48": {
      "op": "match main_test_for_loop_route@3 main_test_for_loop_break_route@4 main_test_for_loop_continue_route@5 main_test_for_loop_labelled_route@6",
      "stack_out": []
    },
    "58": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "59": {
      "block": "main_after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "60": {
      "block": "main_test_for_loop_labelled_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "62": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "NoOp"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "64": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "67": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "68": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "69": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "70": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "73": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "74": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "77": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "78": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "81": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "82": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0",
        "tmp%31#0"
      ]
    },
    "84": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%33#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "86": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "88": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled",
      "op": "callsub test_for_loop_labelled",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "91": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "95": {
      "op": "log",
      "stack_out": []
    },
    "96": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "b main_after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__@14"
    },
    "100": {
      "block": "main_test_for_loop_continue_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "102": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "104": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "105": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "107": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "108": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "113": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "114": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "117": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "118": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "121": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "122": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0",
        "tmp%23#0"
      ]
    },
    "124": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "126": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "128": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue",
      "op": "callsub test_for_loop_continue",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "131": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "132": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "133": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "134": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "135": {
      "op": "log",
      "stack_out": []
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "b main_after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__@14"
    },
    "140": {
      "block": "main_test_for_loop_break_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "142": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "148": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "149": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "150": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "153": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "154": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "157": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "161": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "162": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%15#0"
      ]
    },
    "164": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%17#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "166": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "168": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break",
      "op": "callsub test_for_loop_break",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "172": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "175": {
      "op": "log",
      "stack_out": []
    },
    "176": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "b main_after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__@14"
    },
    "180": {
      "block": "main_test_for_loop_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "182": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "183": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "187": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "188": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "190": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "193": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "194": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "197": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "198": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "201": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "202": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "204": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "206": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "208": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop",
      "op": "callsub test_for_loop",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "211": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "212": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "215": {
      "op": "log",
      "stack_out": []
    },
    "216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "b main_after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__@14"
    },
    "220": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "222": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%35#0"
      ]
    },
    "224": {
      "op": "match main___algots__.defaultCreate@10",
      "stack_out": []
    },
    "228": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "231": {
      "block": "main___algots__.defaultCreate@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "233": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "0"
      ]
    },
    "234": {
      "op": "==",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "235": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "236": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "239": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "240": {
      "op": "b main_after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__@14"
    },
    "243": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "246": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "247": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "249": {
      "block": "test_for_loop_while_top@1",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "251": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "253": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "bz test_for_loop_after_while@3",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "257": {
      "block": "test_for_loop_while_body@2",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "259": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "262": {
      "op": "cover 2",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0",
        "i#0 (copy)"
      ]
    },
    "264": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0"
      ]
    },
    "265": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "267": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "step#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "step#0 (copy)"
      ]
    },
    "269": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "270": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "272": {
      "op": "b test_for_loop_while_top@1"
    },
    "275": {
      "block": "test_for_loop_after_while@3",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "276": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop_break",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "280": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "282": {
      "block": "test_for_loop_break_while_top@1",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "284": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "286": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "287": {
      "op": "bz test_for_loop_break_after_while@5",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "290": {
      "block": "test_for_loop_break_while_body@2",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "292": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "294": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "295": {
      "op": "dup",
      "stack_out": [
        "total#0",
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "296": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "298": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0",
        "10"
      ]
    },
    "300": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%1#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "301": {
      "op": "bz test_for_loop_break_after_if_else@4",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "304": {
      "block": "test_for_loop_break_block@6",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "305": {
      "block": "test_for_loop_break_after_if_else@4",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "307": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "step#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "step#0 (copy)"
      ]
    },
    "309": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "310": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "312": {
      "op": "b test_for_loop_break_while_top@1"
    },
    "315": {
      "block": "test_for_loop_break_after_while@5",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "b test_for_loop_break_block@6"
    },
    "318": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop_continue",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "321": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "322": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "324": {
      "block": "test_for_loop_continue_while_top@1",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "326": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "328": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "bz test_for_loop_continue_after_while@6",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "332": {
      "block": "test_for_loop_continue_while_body@2",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "334": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "336": {
      "op": "%",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%1#0",
        "0"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "339": {
      "op": "bz test_for_loop_continue_after_if_else@4",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "342": {
      "block": "test_for_loop_continue_block@5",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "344": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "step#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "step#0 (copy)"
      ]
    },
    "346": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "347": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "349": {
      "op": "b test_for_loop_continue_while_top@1"
    },
    "352": {
      "block": "test_for_loop_continue_after_if_else@4",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "354": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "356": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "357": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "359": {
      "op": "b test_for_loop_continue_block@5"
    },
    "362": {
      "block": "test_for_loop_continue_after_while@6",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "363": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop_labelled",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "366": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "j#0"
      ]
    },
    "368": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0"
      ]
    },
    "369": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "371": {
      "block": "test_for_loop_labelled_while_top@1",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "373": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "375": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "376": {
      "op": "bz test_for_loop_labelled_after_while@8",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "379": {
      "block": "test_for_loop_labelled_while_body@2",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0"
      ]
    },
    "381": {
      "op": "frame_bury 0",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "383": {
      "block": "test_for_loop_labelled_while_top@3",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0"
      ]
    },
    "385": {
      "op": "frame_dig -2",
      "defined_out": [
        "j#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "stop#0 (copy)"
      ]
    },
    "387": {
      "op": "<",
      "defined_out": [
        "j#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "388": {
      "op": "bz test_for_loop_labelled_after_while@7",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "391": {
      "block": "test_for_loop_labelled_while_body@4",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "393": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "394": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "j#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "j#0"
      ]
    },
    "396": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "j#0",
        "j#0 (copy)"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "j#0 (copy)",
        "j#0 (copy)"
      ]
    },
    "397": {
      "op": "cover 3",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "i#0",
        "i#0 (copy)",
        "j#0 (copy)"
      ]
    },
    "399": {
      "op": "+",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "400": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "i#0",
        "tmp%2#0",
        "total#0"
      ]
    },
    "402": {
      "op": "+",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "i#0",
        "total#0"
      ]
    },
    "403": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "j#0",
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "i#0"
      ]
    },
    "405": {
      "op": "*",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "406": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "j#0",
        "stop#0 (copy)",
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "tmp%3#0",
        "stop#0 (copy)"
      ]
    },
    "408": {
      "op": ">",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%4#0",
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "409": {
      "op": "bz test_for_loop_labelled_after_if_else@6",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "412": {
      "block": "test_for_loop_labelled_block@9",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "414": {
      "op": "frame_bury 0"
    },
    "416": {
      "retsub": true,
      "op": "retsub"
    },
    "417": {
      "block": "test_for_loop_labelled_after_if_else@6",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0"
      ]
    },
    "419": {
      "op": "frame_dig -1",
      "defined_out": [
        "j#0",
        "step#0 (copy)"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0",
        "step#0 (copy)"
      ]
    },
    "421": {
      "op": "+",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "j#0"
      ]
    },
    "422": {
      "op": "frame_bury 0",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "424": {
      "op": "b test_for_loop_labelled_while_top@3"
    },
    "427": {
      "block": "test_for_loop_labelled_after_while@7",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "429": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "step#0 (copy)"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0",
        "step#0 (copy)"
      ]
    },
    "431": {
      "op": "+",
      "stack_out": [
        "j#0",
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "432": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "j#0",
        "total#0",
        "i#0"
      ]
    },
    "434": {
      "op": "b test_for_loop_labelled_while_top@1"
    },
    "437": {
      "block": "test_for_loop_labelled_after_while@8",
      "stack_in": [
        "j#0",
        "total#0",
        "i#0"
      ],
      "op": "b test_for_loop_labelled_block@9"
    },
    "440": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}