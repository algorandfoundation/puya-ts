main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/while-loops.algo.ts::DemoContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/while-loops.algo.ts::DemoContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testWhile(uint64)uint64" => block@2, * => block@3}
    block@2: // testWhile_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/while-loops.algo.ts::DemoContract.testWhile[routing]()
        goto block@3
    block@3: // switch_case_next_L4
        goto block@5
    block@4: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/while-loops.algo.ts::DemoContract.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L4
        exit 0u

subroutine tests/approvals/while-loops.algo.ts::DemoContract.testWhile[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: uint64 = tests/approvals/while-loops.algo.ts::DemoContract.testWhile(tmp%0#0)
        let tmp%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/while-loops.algo.ts::DemoContract.testWhile(stop: uint64) -> uint64:
    block@0: // L5
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L7
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // while_body_L7
        let tmp%1#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%1#0
        goto block@1
    block@3: // after_while_L7
        return i#1

subroutine tests/approvals/while-loops.algo.ts::DemoContract.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 