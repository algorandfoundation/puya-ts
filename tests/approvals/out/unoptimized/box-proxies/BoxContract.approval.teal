#pragma version 10
#pragma typetrack false

// tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4
    bytecblock 0x "A" "abc" 0xffffffff "one" "two" "three"
    b main_block@0

main_block@0:
    // tests/approvals/box-proxies.algo.ts:113
    // if (Txn.applicationId.id !== 0) {
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_after_if_else@2
    b main_if_body@1

main_if_body@1:
    // tests/approvals/box-proxies.algo.ts:108
    // boxOne = Box<string>({ key: 'one' })
    bytec 4 // "one"
    // tests/approvals/box-proxies.algo.ts:114
    // testBox(this.boxOne, 'aaaaaargh')
    pushbytes "aaaaaargh"
    callsub testBox
    // tests/approvals/box-proxies.algo.ts:116
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    pushint 256456 // 256456
    itob
    // tests/approvals/box-proxies.algo.ts:109
    // boxMapTwo = BoxMap<string, bytes>({ keyPrefix: 'two' })
    bytec 5 // "two"
    // tests/approvals/box-proxies.algo.ts:116
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    pushbytes "what?"
    uncover 2
    callsub testBoxMap
    // tests/approvals/box-proxies.algo.ts:110
    // boxRefThree = Box<bytes>({ key: 'three' })
    bytec 6 // "three"
    // tests/approvals/box-proxies.algo.ts:118
    // testBoxRef(this.boxRefThree, 99)
    pushint 99 // 99
    callsub testBoxRef
    b main_after_if_else@2

main_after_if_else@2:
    // tests/approvals/box-proxies.algo.ts:120
    // return true
    intc_1 // 1
    return


// tests/approvals/box-proxies.algo.ts::testBox(box: bytes, value: bytes) -> void:
testBox:
    // tests/approvals/box-proxies.algo.ts:21
    // function testBox(box: Box<string>, value: string) {
    proto 2 0
    intc_0 // 0
    intc_0 // 0
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b testBox_block@0

testBox_block@0:
    // tests/approvals/box-proxies.algo.ts:22
    // box.value = value
    frame_dig -2
    box_del
    pop
    frame_dig -2
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:23
    // boxA.value = value
    bytec_1 // "A"
    box_del
    pop
    bytec_1 // "A"
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:25
    // assert(box.key === Bytes('one'))
    frame_dig -2
    bytec 4 // "one"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:26
    // assert(boxA.key === Bytes('A'))
    bytec_1 // "A"
    bytec_1 // "A"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:28
    // assert(box.value === boxA.value)
    frame_dig -2
    box_get
    assert // Box must have value
    bytec_1 // "A"
    box_get
    assert // Box must have value
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:30
    // assert(box.exists && boxA.exists)
    frame_dig -2
    box_len
    bz testBox_bool_false@3
    b testBox_and_contd@1

testBox_and_contd@1:
    // tests/approvals/box-proxies.algo.ts:30
    // assert(box.exists && boxA.exists)
    bytec_1 // "A"
    box_len
    cover 1
    frame_bury 2
    bz testBox_bool_false@3
    b testBox_bool_true@2

testBox_bool_true@2:
    intc_1 // 1
    frame_bury 5
    b testBox_bool_merge@4

testBox_bool_merge@4:
    // tests/approvals/box-proxies.algo.ts:30
    // assert(box.exists && boxA.exists)
    frame_dig 5
    assert
    // tests/approvals/box-proxies.algo.ts:32
    // assert(box.length)
    frame_dig -2
    box_len
    assert // Box must have value
    assert
    // tests/approvals/box-proxies.algo.ts:34
    // assert(box.delete(), 'delete failed')
    frame_dig -2
    box_del
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:35
    // const isBoxADeleted = boxA.delete()
    bytec_1 // "A"
    box_del
    // tests/approvals/box-proxies.algo.ts:36
    // assert(isBoxADeleted, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:37
    // assert(!box.exists && !boxA.exists)
    frame_dig -2
    box_len
    cover 1
    frame_bury 3
    bnz testBox_bool_false@7
    b testBox_and_contd@5

testBox_and_contd@5:
    // tests/approvals/box-proxies.algo.ts:37
    // assert(!box.exists && !boxA.exists)
    bytec_1 // "A"
    box_len
    cover 1
    frame_bury 4
    bnz testBox_bool_false@7
    b testBox_bool_true@6

testBox_bool_true@6:
    intc_1 // 1
    frame_bury 6
    b testBox_bool_merge@8

testBox_bool_merge@8:
    // tests/approvals/box-proxies.algo.ts:37
    // assert(!box.exists && !boxA.exists)
    frame_dig 6
    assert
    // tests/approvals/box-proxies.algo.ts:40
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    bytec_1 // "A"
    box_get
    cover 1
    pushbytes "O"
    uncover 1
    uncover 2
    select
    frame_dig -2
    box_get
    cover 1
    pushbytes "O"
    uncover 1
    uncover 2
    select
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:42
    // let [, e] = box.maybe()
    frame_dig -2
    box_get
    cover 1
    frame_bury 0
    // tests/approvals/box-proxies.algo.ts:43
    // assert(!e)
    !
    assert
    // tests/approvals/box-proxies.algo.ts:44
    // box.value = value
    frame_dig -2
    box_del
    pop
    frame_dig -2
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:45
    // ;[, e] = box.maybe()
    frame_dig -2
    box_get
    cover 1
    frame_bury 1
    // tests/approvals/box-proxies.algo.ts:46
    // assert(e)
    assert
    retsub

testBox_bool_false@7:
    intc_0 // 0
    frame_bury 6
    b testBox_bool_merge@8

testBox_bool_false@3:
    intc_0 // 0
    frame_bury 5
    b testBox_bool_merge@4


// tests/approvals/box-proxies.algo.ts::testBoxMap(box: bytes, key: bytes, value: bytes) -> void:
testBoxMap:
    // tests/approvals/box-proxies.algo.ts:51
    // function testBoxMap(box: BoxMap<string, bytes>, key: string, value: bytes) {
    proto 3 0
    b testBoxMap_block@0

testBoxMap_block@0:
    // tests/approvals/box-proxies.algo.ts:52
    // box(key).value = value
    frame_dig -3
    frame_dig -2
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:53
    // boxMap(key).value = value
    bytec_0 // ""
    frame_dig -2
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:55
    // const boxMapItem = boxMap(key)
    bytec_0 // ""
    frame_dig -2
    concat
    // tests/approvals/box-proxies.algo.ts:57
    // assert(boxMapItem.exists)
    box_len
    assert
    // tests/approvals/box-proxies.algo.ts:59
    // assert(box.keyPrefix === Bytes('two'))
    frame_dig -3
    bytec 5 // "two"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:60
    // assert(boxMap.keyPrefix === Bytes(''))
    bytec_0 // ""
    bytec_0 // ""
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:62
    // assert(box(key).length)
    frame_dig -3
    frame_dig -2
    concat
    box_len
    assert // Box must have value
    assert
    // tests/approvals/box-proxies.algo.ts:64
    // assert(box(key).maybe()[1])
    frame_dig -3
    frame_dig -2
    concat
    box_get
    assert
    // tests/approvals/box-proxies.algo.ts:66
    // assert(box(key).value === boxMap(key).value)
    frame_dig -3
    frame_dig -2
    concat
    box_get
    assert // Box must have value
    bytec_0 // ""
    frame_dig -2
    concat
    box_get
    assert // Box must have value
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:68
    // const isBoxDeleted = box(key).delete()
    frame_dig -3
    frame_dig -2
    concat
    box_del
    // tests/approvals/box-proxies.algo.ts:69
    // assert(isBoxDeleted, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:71
    // assert(box(`${key}x`).get({ default: Bytes('b') }) === boxMap(`${key}x`).get({ default: Bytes('b') }))
    bytec_0 // ""
    frame_dig -2
    concat
    pushbytes "x"
    concat
    frame_dig -3
    uncover 1
    concat
    box_get
    cover 1
    pushbytes "b"
    uncover 1
    uncover 2
    select
    bytec_0 // ""
    frame_dig -2
    concat
    pushbytes "x"
    concat
    bytec_0 // ""
    uncover 1
    concat
    box_get
    cover 1
    pushbytes "b"
    uncover 1
    uncover 2
    select
    ==
    assert
    retsub


// tests/approvals/box-proxies.algo.ts::testBoxRef(box: bytes, length: uint64) -> void:
testBoxRef:
    // tests/approvals/box-proxies.algo.ts:76
    // function testBoxRef(box: Box<bytes>, length: uint64) {
    proto 2 0
    intc_0 // 0
    bytec_0 // ""
    bytec_0 // ""
    b testBoxRef_block@0

testBoxRef_block@0:
    // tests/approvals/box-proxies.algo.ts:77
    // assert(box.key === Bytes('three'))
    frame_dig -2
    bytec 6 // "three"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:78
    // assert(boxRef.key === Bytes('abc'))
    bytec_2 // "abc"
    bytec_2 // "abc"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:80
    // if (!boxRef.exists) {
    bytec_2 // "abc"
    box_len
    bnz testBoxRef_else_body@2
    b testBoxRef_if_body@1

testBoxRef_if_body@1:
    // tests/approvals/box-proxies.algo.ts:81
    // boxRef.create({ size: 1000 })
    bytec_2 // "abc"
    pushint 1000 // 1000
    box_create
    pop
    b testBoxRef_after_if_else@5

testBoxRef_after_if_else@5:
    // tests/approvals/box-proxies.algo.ts:85
    // if (box.exists) {
    frame_dig -2
    box_len
    cover 1
    frame_bury 1
    bz testBoxRef_else_body@7
    b testBoxRef_if_body@6

testBoxRef_if_body@6:
    // tests/approvals/box-proxies.algo.ts:86
    // box.resize(4)
    frame_dig -2
    intc_2 // 4
    box_resize
    b testBoxRef_after_if_else@8

testBoxRef_after_if_else@8:
    // tests/approvals/box-proxies.algo.ts:91
    // box.value = someBytes
    frame_dig -2
    box_del
    pop
    frame_dig -2
    bytec_3 // 0xffffffff
    box_put
    // tests/approvals/box-proxies.algo.ts:93
    // assert(box.get({ default: Bytes() }) === Bytes.fromHex('FFFFFFFF'))
    frame_dig -2
    box_get
    cover 1
    bytec_0 // 0x
    uncover 1
    uncover 2
    select
    bytec_3 // 0xffffffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:95
    // const maybeBox = box.maybe()
    frame_dig -2
    box_get
    cover 1
    frame_bury 0
    // tests/approvals/box-proxies.algo.ts:96
    // assert(maybeBox[1])
    assert
    // tests/approvals/box-proxies.algo.ts:98
    // assert(box.value === Bytes.fromHex('FFFFFFFF'))
    frame_dig -2
    box_get
    assert // Box must have value
    bytec_3 // 0xffffffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:99
    // box.splice(1, 1, Bytes.fromHex('00'))
    frame_dig -2
    intc_1 // 1
    intc_1 // 1
    pushbytes 0x00
    box_splice
    // tests/approvals/box-proxies.algo.ts:100
    // assert(box.value === Bytes.fromHex('FF00FFFF'))
    frame_dig -2
    box_get
    assert // Box must have value
    pushbytes 0xff00ffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:102
    // const x = box.delete()
    frame_dig -2
    box_del
    // tests/approvals/box-proxies.algo.ts:103
    // assert(x, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:104
    // assert(!box.exists)
    frame_dig -2
    box_len
    cover 1
    frame_bury 2
    !
    assert
    retsub

testBoxRef_else_body@7:
    // tests/approvals/box-proxies.algo.ts:88
    // box.create({ size: 4 })
    frame_dig -2
    intc_2 // 4
    box_create
    pop
    b testBoxRef_after_if_else@8

testBoxRef_else_body@2:
    // tests/approvals/box-proxies.algo.ts:82
    // } else if (boxRef.length !== length) {
    bytec_2 // "abc"
    box_len
    assert // Box must have value
    frame_dig -1
    !=
    bz testBoxRef_after_if_else@4
    b testBoxRef_if_body@3

testBoxRef_if_body@3:
    // tests/approvals/box-proxies.algo.ts:83
    // boxRef.resize(length)
    bytec_2 // "abc"
    frame_dig -1
    box_resize
    b testBoxRef_after_if_else@4

testBoxRef_after_if_else@4:
    b testBoxRef_after_if_else@5
