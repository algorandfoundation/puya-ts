#pragma version 10
#pragma typetrack false

// tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram() -> uint64:
main:
    intcblock 1 0 4
    bytecblock "A" 0x "abc" 0xffffffff "one" "two" "three"

main_block@0:
    // tests/approvals/box-proxies.algo.ts:94
    // if (Txn.applicationId.id !== 0) {
    txn ApplicationID
    intc_1 // 0
    !=
    bz main_after_if_else@2

main_if_body@1:
    // tests/approvals/box-proxies.algo.ts:89
    // boxOne = Box<string>({ key: 'one' })
    bytec 4 // "one"
    // tests/approvals/box-proxies.algo.ts:95
    // testBox(this.boxOne, 'aaaaaargh')
    pushbytes "aaaaaargh"
    callsub testBox
    // tests/approvals/box-proxies.algo.ts:97
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    pushint 256456 // 256456
    itob
    // tests/approvals/box-proxies.algo.ts:90
    // boxMapTwo = BoxMap<string, bytes>({ keyPrefix: 'two' })
    bytec 5 // "two"
    // tests/approvals/box-proxies.algo.ts:97
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    pushbytes "what?"
    uncover 2
    callsub testBoxMap
    // tests/approvals/box-proxies.algo.ts:91
    // boxRefThree = BoxRef({ key: 'three' })
    bytec 6 // "three"
    // tests/approvals/box-proxies.algo.ts:99
    // testBoxRef(this.boxRefThree, 99)
    pushint 99 // 99
    callsub testBoxRef

main_after_if_else@2:
    // tests/approvals/box-proxies.algo.ts:101
    // return true
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::testBox(box: bytes, value: bytes) -> void:
testBox:
    // tests/approvals/box-proxies.algo.ts:6
    // function testBox(box: Box<string>, value: string) {
    proto 2 0

testBox_block@0:
    // tests/approvals/box-proxies.algo.ts:7
    // box.value = value
    frame_dig -2
    box_del
    pop
    frame_dig -2
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:8
    // boxA.value = value
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:8
    // boxA.value = value
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:10
    // assert(box.key === Bytes('one'))
    frame_dig -2
    bytec 4 // "one"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:11
    // assert(boxA.key === Bytes('A'))
    bytec_0 // "A"
    dup
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:13
    // assert(box.value === boxA.value)
    frame_dig -2
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:13
    // assert(box.value === boxA.value)
    box_get
    assert // Box must have value
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:15
    // assert(box.exists && boxA.exists)
    frame_dig -2
    box_len
    bury 1
    bz testBox_bool_false@3

testBox_and_contd@1:
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:15
    // assert(box.exists && boxA.exists)
    box_len
    bury 1
    bz testBox_bool_false@3

testBox_bool_true@2:
    intc_0 // 1

testBox_bool_merge@4:
    // tests/approvals/box-proxies.algo.ts:15
    // assert(box.exists && boxA.exists)
    assert
    // tests/approvals/box-proxies.algo.ts:17
    // assert(box.length)
    frame_dig -2
    box_len
    assert // Box must have value
    assert
    // tests/approvals/box-proxies.algo.ts:19
    // assert(box.delete(), 'delete failed')
    frame_dig -2
    box_del
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:20
    // const isBoxADeleted = boxA.delete()
    box_del
    // tests/approvals/box-proxies.algo.ts:21
    // assert(isBoxADeleted, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:22
    // assert(!box.exists && !boxA.exists)
    frame_dig -2
    box_len
    bury 1
    bnz testBox_bool_false@7

testBox_and_contd@5:
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:22
    // assert(!box.exists && !boxA.exists)
    box_len
    bury 1
    bnz testBox_bool_false@7

testBox_bool_true@6:
    intc_0 // 1

testBox_bool_merge@8:
    // tests/approvals/box-proxies.algo.ts:22
    // assert(!box.exists && !boxA.exists)
    assert
    // tests/approvals/box-proxies.algo.ts:5
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_0 // "A"
    // tests/approvals/box-proxies.algo.ts:25
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    box_get
    swap
    // tests/approvals/box-proxies.algo.ts:24
    // const defaultVal = 'O'
    pushbytes "O"
    // tests/approvals/box-proxies.algo.ts:25
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    swap
    uncover 2
    select
    frame_dig -2
    box_get
    swap
    // tests/approvals/box-proxies.algo.ts:24
    // const defaultVal = 'O'
    pushbytes "O"
    // tests/approvals/box-proxies.algo.ts:25
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    swap
    uncover 2
    select
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:27
    // let [, e] = box.maybe()
    frame_dig -2
    box_get
    bury 1
    // tests/approvals/box-proxies.algo.ts:28
    // assert(!e)
    !
    assert
    // tests/approvals/box-proxies.algo.ts:29
    // box.value = value
    frame_dig -2
    box_del
    pop
    frame_dig -2
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:30
    // ;[, e] = box.maybe()
    frame_dig -2
    box_get
    bury 1
    // tests/approvals/box-proxies.algo.ts:31
    // assert(e)
    assert
    retsub

testBox_bool_false@7:
    intc_1 // 0
    b testBox_bool_merge@8

testBox_bool_false@3:
    intc_1 // 0
    b testBox_bool_merge@4


// tests/approvals/box-proxies.algo.ts::testBoxMap(box: bytes, key: bytes, value: bytes) -> void:
testBoxMap:
    // tests/approvals/box-proxies.algo.ts:36
    // function testBoxMap(box: BoxMap<string, bytes>, key: string, value: bytes) {
    proto 3 0

testBoxMap_block@0:
    // tests/approvals/box-proxies.algo.ts:37
    // box.set(key, value)
    frame_dig -3
    frame_dig -2
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:34
    // const boxMap = BoxMap<string, bytes>({ keyPrefix: '' })
    bytec_1 // ""
    // tests/approvals/box-proxies.algo.ts:38
    // boxMap.set(key, value)
    frame_dig -2
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:40
    // assert(box.keyPrefix === Bytes('two'))
    frame_dig -3
    bytec 5 // "two"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:41
    // assert(boxMap.keyPrefix === Bytes(''))
    bytec_1 // ""
    dup
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:43
    // assert(box.length(key))
    frame_dig -3
    frame_dig -2
    concat
    box_len
    assert // Box must have value
    assert
    // tests/approvals/box-proxies.algo.ts:45
    // assert(box.maybe(key)[1])
    frame_dig -3
    frame_dig -2
    concat
    box_get
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:47
    // assert(box.get(key) === boxMap.get(key))
    frame_dig -3
    frame_dig -2
    concat
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:34
    // const boxMap = BoxMap<string, bytes>({ keyPrefix: '' })
    bytec_1 // ""
    // tests/approvals/box-proxies.algo.ts:47
    // assert(box.get(key) === boxMap.get(key))
    frame_dig -2
    concat
    box_get
    assert // Box must have value
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:49
    // const isBoxDeleted = box.delete(key)
    frame_dig -3
    frame_dig -2
    concat
    box_del
    // tests/approvals/box-proxies.algo.ts:50
    // assert(isBoxDeleted, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:52
    // assert(box.get(`${key}x`, { default: Bytes('b') }) === boxMap.get(`${key}x`, { default: Bytes('b') }))
    bytec_1 // ""
    frame_dig -2
    concat
    pushbytes "x"
    concat
    frame_dig -3
    swap
    concat
    box_get
    swap
    pushbytes "b"
    swap
    uncover 2
    select
    bytec_1 // ""
    frame_dig -2
    concat
    pushbytes "x"
    concat
    // tests/approvals/box-proxies.algo.ts:34
    // const boxMap = BoxMap<string, bytes>({ keyPrefix: '' })
    bytec_1 // ""
    // tests/approvals/box-proxies.algo.ts:52
    // assert(box.get(`${key}x`, { default: Bytes('b') }) === boxMap.get(`${key}x`, { default: Bytes('b') }))
    swap
    concat
    box_get
    swap
    pushbytes "b"
    swap
    uncover 2
    select
    ==
    assert
    retsub


// tests/approvals/box-proxies.algo.ts::testBoxRef(box: bytes, length: uint64) -> void:
testBoxRef:
    // tests/approvals/box-proxies.algo.ts:57
    // function testBoxRef(box: BoxRef, length: uint64) {
    proto 2 0

testBoxRef_block@0:
    // tests/approvals/box-proxies.algo.ts:58
    // assert(box.key === Bytes('three'))
    frame_dig -2
    bytec 6 // "three"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:59
    // assert(boxRef.key === Bytes('abc'))
    bytec_2 // "abc"
    dup
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:55
    // const boxRef = BoxRef({ key: 'abc' })
    bytec_2 // "abc"
    // tests/approvals/box-proxies.algo.ts:61
    // if (!boxRef.exists) {
    box_len
    bury 1
    bnz testBoxRef_else_body@2

testBoxRef_if_body@1:
    // tests/approvals/box-proxies.algo.ts:55
    // const boxRef = BoxRef({ key: 'abc' })
    bytec_2 // "abc"
    // tests/approvals/box-proxies.algo.ts:62
    // boxRef.create({ size: 1000 })
    pushint 1000 // 1000
    box_create
    pop

testBoxRef_after_if_else@5:
    // tests/approvals/box-proxies.algo.ts:66
    // if (box.exists) {
    frame_dig -2
    box_len
    bury 1
    bz testBoxRef_else_body@7

testBoxRef_if_body@6:
    // tests/approvals/box-proxies.algo.ts:67
    // box.resize(4)
    frame_dig -2
    intc_2 // 4
    box_resize

testBoxRef_after_if_else@8:
    // tests/approvals/box-proxies.algo.ts:72
    // box.put(someBytes)
    frame_dig -2
    // tests/approvals/box-proxies.algo.ts:71
    // const someBytes = Bytes.fromHex('FFFFFFFF')
    bytec_3 // 0xffffffff
    // tests/approvals/box-proxies.algo.ts:72
    // box.put(someBytes)
    box_put
    // tests/approvals/box-proxies.algo.ts:74
    // assert(box.get({ default: Bytes() }) === Bytes.fromHex('FFFFFFFF'))
    frame_dig -2
    box_get
    swap
    bytec_1 // 0x
    swap
    uncover 2
    select
    bytec_3 // 0xffffffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:76
    // const maybeBox = box.maybe()
    frame_dig -2
    box_get
    bury 1
    // tests/approvals/box-proxies.algo.ts:77
    // assert(maybeBox[1])
    assert
    // tests/approvals/box-proxies.algo.ts:79
    // assert(box.value === Bytes.fromHex('FFFFFFFF'))
    frame_dig -2
    box_get
    assert // Box must have value
    bytec_3 // 0xffffffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:80
    // box.splice(1, 1, Bytes.fromHex('00'))
    frame_dig -2
    intc_0 // 1
    dup
    pushbytes 0x00
    box_splice
    // tests/approvals/box-proxies.algo.ts:81
    // assert(box.value === Bytes.fromHex('FF00FFFF'))
    frame_dig -2
    box_get
    assert // Box must have value
    pushbytes 0xff00ffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:83
    // const x = box.delete()
    frame_dig -2
    box_del
    // tests/approvals/box-proxies.algo.ts:84
    // assert(x, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:85
    // assert(!box.exists)
    frame_dig -2
    box_len
    bury 1
    !
    assert
    retsub

testBoxRef_else_body@7:
    // tests/approvals/box-proxies.algo.ts:69
    // box.create({ size: 4 })
    frame_dig -2
    intc_2 // 4
    box_create
    pop
    b testBoxRef_after_if_else@8

testBoxRef_else_body@2:
    // tests/approvals/box-proxies.algo.ts:55
    // const boxRef = BoxRef({ key: 'abc' })
    bytec_2 // "abc"
    // tests/approvals/box-proxies.algo.ts:63
    // } else if (boxRef.length !== length) {
    box_len
    assert // Box must have value
    frame_dig -1
    !=
    bz testBoxRef_after_if_else@4

testBoxRef_if_body@3:
    // tests/approvals/box-proxies.algo.ts:55
    // const boxRef = BoxRef({ key: 'abc' })
    bytec_2 // "abc"
    // tests/approvals/box-proxies.algo.ts:64
    // boxRef.resize(length)
    frame_dig -1
    box_resize

testBoxRef_after_if_else@4:
    b testBoxRef_after_if_else@5
