{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/box-proxies.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AA4EY;;AAAqB;AAAzB;AAAJ;;;AAL0B;;;;;AAMH;;;;;;;;;;;AAArB;;;AAEyC;;;;AAAL;AAPO;;;;;AAOhB;;;;;;;AAA3B;;AAAA;;;AANwB;;;;;;;AAQK;;AAA7B;;;AAEK;AAAP;AA9EJ;;;AACE;;AAAA;;AAAA;;AAAA;;AAAA;AAFoC;AAGpC;;AAHoC;AAGpC;;AAAA;AAEW;;AAAA;AAAA;AALyB;AAKV;AAAA;AAAnB;AAAP;AAEW;;AAAA;AAAA;;AAAJ;;;AAP6B;AAOV;AAAA;;AAAnB;;;;AAAP;AAEW;;AAAA;AAAA;AAAX;AAEI;;AAAA;;AAXgC;AAY/B;;AACO;;AAAA;AAAA;;AAAL;;;AAb6B;AAaR;AAAA;;AAAN;;;;AAAtB;AAboC;AAgB7B;AAAA;AADY;AACZ;AAAA;;AAAA;AAAsC;;AAAA;AAAA;AAD1B;AAC0B;AAAA;;AAAA;AAAtC;AAAP;AAEY;;AAAA;AAAA;;AACL;AAAP;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACS;;AAAA;AAAA;;AACT;;;;;;;;;;AAKF;;;AACM;;AAAA;;AAAA;AAAJ;AAAA;;AAAA;;AAAA;AAHgD;AAIzC;;AAAA;AAAP;AAAA;;AAAA;;AAAA;AAEW;;AAAA;;AAAA;AAAJ;AAAA;AAAP;AAEW;;AAAA;;AAAA;AAAJ;AAAA;;AAAP;AAEW;;AAAA;;AAAA;AAAA;AAAA;AAVqC;AAUjB;;AAAA;AAAA;AAAA;AAAxB;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;AAEe;AAAA;;AAAA;AAAA;;;AAAA;AAAJ;;AAAA;AAAA;AAAJ;AAAA;AAAoC;;;AAApC;AAAA;;AAAA;AAA2D;AAAA;;AAAA;AAAA;;;AAAA;AAdlB;AAcc;AAAA;AAAP;AAAA;AAAuC;;;AAAvC;AAAA;;AAAA;AAAhD;AAAP;;AAKF;;;AAF6B;AAGf;AAAA;;AAAR;;;AAHuB;AAIH;;;AAAtB;;AAIM;;AAAA;AAAA;;AAAR;;;AACE;;AAAW;AAAX;AAKF;;AADkB;;AAClB;AAEiB;;AAAA;AAAA;;AACjB;AAEW;;AAAA;AAAA;AAAU;;AAAd;AAAP;AACA;;AAAW;AAAG;AAAG;;;AAAjB;AACW;;AAAA;AAAA;AAAU;;;;;;AAAd;AAAP;;AAVE;;AAAmB;AAAnB;;;;;AAXyB;AAKT;AAAA;AAAP;;AAAA;AAAJ;;;AALoB;AAMzB;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4"
    },
    "6": {
      "op": "bytecblock \"A\" \"\" \"abc\" \"O\" 0xffffffff"
    },
    "22": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "24": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "25": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "26": {
      "op": "bz main_after_if_else@2",
      "stack_out": []
    },
    "29": {
      "block": "main_if_body@1",
      "stack_in": [],
      "op": "pushbytes \"one\"",
      "defined_out": [
        "\"one\""
      ],
      "stack_out": [
        "\"one\""
      ]
    },
    "34": {
      "op": "pushbytes \"aaaaaargh\"",
      "defined_out": [
        "\"aaaaaargh\"",
        "\"one\""
      ],
      "stack_out": [
        "\"one\"",
        "\"aaaaaargh\""
      ]
    },
    "45": {
      "callsub": "tests/approvals/box-proxies.algo.ts::testBox",
      "op": "callsub testBox",
      "stack_out": []
    },
    "48": {
      "op": "pushint 256456 // 256456",
      "defined_out": [
        "256456"
      ],
      "stack_out": [
        "256456"
      ]
    },
    "52": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "53": {
      "op": "pushbytes \"two\"",
      "defined_out": [
        "\"two\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"two\""
      ]
    },
    "58": {
      "op": "pushbytes \"what?\"",
      "defined_out": [
        "\"two\"",
        "\"what?\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"two\"",
        "\"what?\""
      ]
    },
    "65": {
      "op": "uncover 2",
      "stack_out": [
        "\"two\"",
        "\"what?\"",
        "tmp%2#0"
      ]
    },
    "67": {
      "callsub": "tests/approvals/box-proxies.algo.ts::testBoxMap",
      "op": "callsub testBoxMap",
      "stack_out": []
    },
    "70": {
      "op": "pushbytes \"three\"",
      "defined_out": [
        "\"three\""
      ],
      "stack_out": [
        "\"three\""
      ]
    },
    "77": {
      "op": "pushint 99 // 99",
      "defined_out": [
        "\"three\"",
        "99"
      ],
      "stack_out": [
        "\"three\"",
        "99"
      ]
    },
    "79": {
      "callsub": "tests/approvals/box-proxies.algo.ts::testBoxRef",
      "op": "callsub testBoxRef",
      "stack_out": []
    },
    "82": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "83": {
      "op": "return",
      "stack_out": []
    },
    "84": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::testBox",
      "params": {
        "box#0": "bytes",
        "value#0": "bytes"
      },
      "block": "testBox",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "87": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "89": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "90": {
      "op": "pop",
      "stack_out": []
    },
    "91": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "93": {
      "op": "frame_dig -1",
      "defined_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "95": {
      "op": "box_put",
      "stack_out": []
    },
    "96": {
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "97": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "98": {
      "op": "pop",
      "stack_out": []
    },
    "99": {
      "op": "bytec_0 // \"A\"",
      "stack_out": [
        "\"A\""
      ]
    },
    "100": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"A\"",
        "value#0 (copy)"
      ]
    },
    "102": {
      "op": "box_put",
      "stack_out": []
    },
    "103": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "105": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "106": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "107": {
      "op": "bytec_0 // \"A\"",
      "stack_out": [
        "maybe_value%0#0",
        "\"A\""
      ]
    },
    "108": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "109": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "assert",
      "stack_out": []
    },
    "112": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "114": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "115": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "117": {
      "op": "bz testBox_bool_false@3",
      "stack_out": []
    },
    "120": {
      "block": "testBox_and_contd@1",
      "stack_in": [],
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "121": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "122": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "124": {
      "op": "bz testBox_bool_false@3",
      "stack_out": []
    },
    "127": {
      "block": "testBox_bool_true@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "128": {
      "block": "testBox_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "129": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "131": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "132": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "133": {
      "op": "assert",
      "stack_out": []
    },
    "134": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "136": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "137": {
      "op": "pop",
      "stack_out": []
    },
    "138": {
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "139": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "140": {
      "op": "pop",
      "stack_out": []
    },
    "141": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "143": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "144": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%4#0"
      ]
    },
    "146": {
      "op": "bnz testBox_bool_false@7",
      "stack_out": []
    },
    "149": {
      "block": "testBox_and_contd@5",
      "stack_in": [],
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "150": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "151": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%5#0"
      ]
    },
    "153": {
      "op": "bnz testBox_bool_false@7",
      "stack_out": []
    },
    "156": {
      "block": "testBox_bool_true@6",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "157": {
      "block": "testBox_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "158": {
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "159": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "161": {
      "op": "bytec_3 // \"O\"",
      "defined_out": [
        "\"O\"",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "\"O\""
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%6#0",
        "\"O\"",
        "maybe_value%6#0"
      ]
    },
    "163": {
      "op": "uncover 2",
      "stack_out": [
        "\"O\"",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "165": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "166": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "box#0 (copy)"
      ]
    },
    "168": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "169": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "170": {
      "op": "bytec_3 // \"O\"",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "\"O\""
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%7#0",
        "\"O\"",
        "maybe_value%7#0"
      ]
    },
    "172": {
      "op": "uncover 2",
      "stack_out": [
        "state_get%0#0",
        "\"O\"",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "174": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%1#0"
      ]
    },
    "175": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "assert",
      "stack_out": []
    },
    "177": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "179": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "180": {
      "op": "bury 1",
      "defined_out": [
        "e#0"
      ],
      "stack_out": [
        "e#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "183": {
      "op": "assert",
      "stack_out": []
    },
    "184": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "186": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "187": {
      "op": "pop",
      "stack_out": []
    },
    "188": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "190": {
      "op": "frame_dig -1",
      "defined_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "192": {
      "op": "box_put",
      "stack_out": []
    },
    "193": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "195": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "196": {
      "op": "bury 1",
      "stack_out": [
        "e#0"
      ]
    },
    "198": {
      "op": "assert",
      "stack_out": []
    },
    "199": {
      "retsub": true,
      "op": "retsub"
    },
    "200": {
      "block": "testBox_bool_false@7",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "201": {
      "op": "b testBox_bool_merge@8"
    },
    "204": {
      "block": "testBox_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "205": {
      "op": "b testBox_bool_merge@4"
    },
    "208": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::testBoxMap",
      "params": {
        "box#0": "bytes",
        "key#0": "bytes",
        "value#0": "bytes"
      },
      "block": "testBoxMap",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "211": {
      "op": "frame_dig -3",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "213": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "217": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "218": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "219": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ]
    },
    "221": {
      "op": "box_put",
      "stack_out": []
    },
    "222": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "\"\""
      ]
    },
    "223": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "226": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "227": {
      "op": "box_del",
      "stack_out": [
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "228": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "229": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ]
    },
    "231": {
      "op": "box_put",
      "stack_out": []
    },
    "232": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "234": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "237": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "238": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "239": {
      "op": "assert",
      "stack_out": []
    },
    "240": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "242": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "244": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "245": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "246": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "248": {
      "op": "assert",
      "stack_out": []
    },
    "249": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "251": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "254": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "255": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "256": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "maybe_value%1#0",
        "\"\""
      ]
    },
    "257": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%5#0"
      ]
    },
    "260": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "261": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "263": {
      "op": "assert",
      "stack_out": []
    },
    "264": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "266": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "269": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "270": {
      "op": "pop",
      "stack_out": []
    },
    "271": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "\"\""
      ]
    },
    "272": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "275": {
      "op": "pushbytes \"x\"",
      "defined_out": [
        "\"x\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"x\""
      ]
    },
    "278": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "279": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%9#0",
        "box#0 (copy)"
      ]
    },
    "281": {
      "op": "swap",
      "stack_out": [
        "box#0 (copy)",
        "tmp%9#0"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "283": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "285": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "\"b\""
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%3#0",
        "\"b\"",
        "maybe_value%3#0"
      ]
    },
    "289": {
      "op": "uncover 2",
      "stack_out": [
        "\"b\"",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "291": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "292": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "state_get%0#0",
        "\"\""
      ]
    },
    "293": {
      "op": "frame_dig -2",
      "stack_out": [
        "state_get%0#0",
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "295": {
      "op": "concat",
      "defined_out": [
        "state_get%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%11#0"
      ]
    },
    "296": {
      "op": "pushbytes \"x\"",
      "stack_out": [
        "state_get%0#0",
        "tmp%11#0",
        "\"x\""
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "state_get%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%12#0"
      ]
    },
    "300": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "state_get%0#0",
        "tmp%12#0",
        "\"\""
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "\"\"",
        "tmp%12#0"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "state_get%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%13#0"
      ]
    },
    "303": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "305": {
      "op": "pushbytes \"b\"",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "\"b\""
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%4#0",
        "\"b\"",
        "maybe_value%4#0"
      ]
    },
    "309": {
      "op": "uncover 2",
      "stack_out": [
        "state_get%0#0",
        "\"b\"",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "311": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%1#0"
      ]
    },
    "312": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "313": {
      "op": "assert",
      "stack_out": []
    },
    "314": {
      "retsub": true,
      "op": "retsub"
    },
    "315": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::testBoxRef",
      "params": {
        "box#0": "bytes",
        "length#0": "uint64"
      },
      "block": "testBoxRef",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "318": {
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "319": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "320": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "322": {
      "op": "bnz testBoxRef_else_body@2",
      "stack_out": []
    },
    "325": {
      "block": "testBoxRef_if_body@1",
      "stack_in": [],
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "326": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "\"abc\"",
        "1000"
      ],
      "stack_out": [
        "\"abc\"",
        "1000"
      ]
    },
    "329": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "330": {
      "op": "pop",
      "stack_out": []
    },
    "331": {
      "block": "testBoxRef_after_if_else@5",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "333": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "334": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "336": {
      "op": "bz testBoxRef_else_body@7",
      "stack_out": []
    },
    "339": {
      "block": "testBoxRef_if_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "341": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "4"
      ]
    },
    "342": {
      "op": "box_resize",
      "stack_out": []
    },
    "343": {
      "block": "testBoxRef_after_if_else@8",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "345": {
      "op": "bytec 4 // 0xffffffff",
      "defined_out": [
        "0xffffffff",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "0xffffffff"
      ]
    },
    "347": {
      "op": "box_put",
      "stack_out": []
    },
    "348": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "350": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "351": {
      "op": "bury 1",
      "defined_out": [
        "maybeBox.1#0"
      ],
      "stack_out": [
        "maybeBox.1#0"
      ]
    },
    "353": {
      "op": "assert",
      "stack_out": []
    },
    "354": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "356": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "357": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "358": {
      "op": "bytec 4 // 0xffffffff",
      "stack_out": [
        "maybe_value%3#0",
        "0xffffffff"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "361": {
      "op": "assert",
      "stack_out": []
    },
    "362": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "364": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "1"
      ]
    },
    "365": {
      "op": "dup",
      "stack_out": [
        "box#0 (copy)",
        "1",
        "1"
      ]
    },
    "366": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "1",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "1",
        "1",
        "0x00"
      ]
    },
    "369": {
      "op": "box_splice",
      "stack_out": []
    },
    "370": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "372": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "373": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "374": {
      "op": "pushbytes 0xff00ffff",
      "defined_out": [
        "0xff00ffff",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "0xff00ffff"
      ]
    },
    "380": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "381": {
      "op": "assert",
      "stack_out": []
    },
    "382": {
      "retsub": true,
      "op": "retsub"
    },
    "383": {
      "block": "testBoxRef_else_body@7",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "385": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "4"
      ]
    },
    "386": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "387": {
      "op": "pop",
      "stack_out": []
    },
    "388": {
      "op": "b testBoxRef_after_if_else@8"
    },
    "391": {
      "block": "testBoxRef_else_body@2",
      "stack_in": [],
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "392": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "393": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "394": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "length#0 (copy)"
      ]
    },
    "396": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "397": {
      "op": "bz testBoxRef_after_if_else@4",
      "stack_out": []
    },
    "400": {
      "block": "testBoxRef_if_body@3",
      "stack_in": [],
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "401": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"abc\"",
        "length#0 (copy)"
      ],
      "stack_out": [
        "\"abc\"",
        "length#0 (copy)"
      ]
    },
    "403": {
      "op": "box_resize",
      "stack_out": []
    },
    "404": {
      "block": "testBoxRef_after_if_else@4",
      "stack_in": [],
      "op": "b testBoxRef_after_if_else@5"
    }
  }
}