{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/box-proxies.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGY;;AAAqB;AAAzB;AAAJ;;;AAL0B;;AAMH;;;;;;;;;;;AAArB;;;AAEyC;;;;AAAL;AAPO;;AAOhB;;;;;;;AAA3B;;AAAA;;;AANwB;;AAQK;;AAA7B;;;AAEK;AAAP;AAnGJ;;;AACE;;AAAA;;AAAA;;AAAA;;AAAA;AAFoC;AAGpC;;AAHoC;AAGpC;;AAAA;AAEO;;AAAkB;;AAAlB;AAAP;AACY;AAAc;AAAnB;AAAP;AAEW;;AAAA;AAAA;AARyB;AAQV;AAAA;AAAnB;AAAP;AAEW;;AAAA;AAAA;;AAAJ;;;AAV6B;AAUV;AAAA;;AAAnB;;;;AAAP;AAEW;;AAAA;AAAA;AAAX;AAEW;;AAAA;AAAX;AAdoC;AAeT;AAC3B;AACY;;AAAA;AAAA;;AAAL;;;AAjB6B;AAiBR;AAAA;;AAAN;;;;AAAtB;AAjBoC;AAoB7B;AAAA;AADY;;;AACZ;AAAA;;AAAA;AAAsC;;AAAA;AAAA;AAD1B;;;AAC0B;AAAA;;AAAA;AAAtC;AAAP;AAEY;;AAAA;AAAA;;AACL;AAAP;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACS;;AAAA;AAAA;;AACT;;;;;;;;;;AAKF;;;AACE;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAHgD;AAAA;;AAAA;AAIhD;AAAA;;AAAA;;AAAA;AAJgD;AAM1C;;AAN0C;AAQ9B;AAAA;;AAAlB;AAEO;;AAAwB;;AAAxB;AAAP;AACc;AAAoB;AAA3B;AAAP;AAEO;;AAAA;;AAAA;AAAS;AAAA;AAAhB;AAEO;;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAA;AAAS;AAAA;AAjBgC;AAAA;;AAAA;AAiBV;AAAA;AAA/B;AAAP;AAEqB;;AAAA;;AAAA;AAAS;AAC9B;AAEW;AAAA;;AAAA;AAAA;;;AAAA;AAAJ;;AAAA;AAAA;AAAA;AAAA;AAAoC;;;AAApC;AAAA;;AAAA;AAAuD;AAAA;;AAAA;AAAA;;;AAAA;AAtBd;AAAA;AAAA;AAsBO;AAAA;AAAuC;;;AAAvC;AAAA;;AAAA;AAAhD;AAAP;;AAKF;;;AACS;;AAAkB;;AAAlB;AAAP;AACc;AAAc;AAArB;AAAP;AAJ2B;AAMf;AAAA;;AAAR;;;AANuB;AAOH;;;AAAtB;;AAIM;;AAAA;AAAA;;AAAR;;;AACE;;AAAW;AAAX;AAKF;;AADkB;AAClB;AAEO;;AAAA;AAAA;AAAmB;AAAnB;AAAA;;AAAA;AAAkC;AAAlC;AAAP;AAEiB;;AAAA;AAAA;;AACjB;AAEW;;AAAA;AAAA;AAAU;AAAd;AAAP;AACA;;AAAW;AAAG;AAAG;;;AAAjB;AACW;;AAAA;AAAA;AAAU;;;;;;AAAd;AAAP;AAEM;;AAAI;AACV;AACY;;AAAA;AAAA;;AAAL;AAAP;;AAhBE;;AAAmB;AAAnB;;;;;AAdyB;AAQT;AAAA;AAAP;;AAAA;AAAJ;;;AARoB;AASzB;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4"
    },
    "6": {
      "op": "bytecblock \"A\" 0x \"abc\" 0xffffffff \"one\" \"two\" \"three\""
    },
    "34": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "36": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "37": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "38": {
      "op": "bz main_after_if_else@2",
      "stack_out": []
    },
    "41": {
      "block": "main_if_body@1",
      "stack_in": [],
      "op": "bytec 4 // \"one\"",
      "defined_out": [
        "\"one\""
      ],
      "stack_out": [
        "\"one\""
      ]
    },
    "43": {
      "op": "pushbytes \"aaaaaargh\"",
      "defined_out": [
        "\"aaaaaargh\"",
        "\"one\""
      ],
      "stack_out": [
        "\"one\"",
        "\"aaaaaargh\""
      ]
    },
    "54": {
      "callsub": "tests/approvals/box-proxies.algo.ts::testBox",
      "op": "callsub testBox",
      "stack_out": []
    },
    "57": {
      "op": "pushint 256456 // 256456",
      "defined_out": [
        "256456"
      ],
      "stack_out": [
        "256456"
      ]
    },
    "61": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "62": {
      "op": "bytec 5 // \"two\"",
      "defined_out": [
        "\"two\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"two\""
      ]
    },
    "64": {
      "op": "pushbytes \"what?\"",
      "defined_out": [
        "\"two\"",
        "\"what?\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"two\"",
        "\"what?\""
      ]
    },
    "71": {
      "op": "uncover 2",
      "stack_out": [
        "\"two\"",
        "\"what?\"",
        "tmp%2#0"
      ]
    },
    "73": {
      "callsub": "tests/approvals/box-proxies.algo.ts::testBoxMap",
      "op": "callsub testBoxMap",
      "stack_out": []
    },
    "76": {
      "op": "bytec 6 // \"three\"",
      "defined_out": [
        "\"three\""
      ],
      "stack_out": [
        "\"three\""
      ]
    },
    "78": {
      "op": "pushint 99 // 99",
      "defined_out": [
        "\"three\"",
        "99"
      ],
      "stack_out": [
        "\"three\"",
        "99"
      ]
    },
    "80": {
      "callsub": "tests/approvals/box-proxies.algo.ts::testBoxRef",
      "op": "callsub testBoxRef",
      "stack_out": []
    },
    "83": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "84": {
      "op": "return",
      "stack_out": []
    },
    "85": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::testBox",
      "params": {
        "box#0": "bytes",
        "value#0": "bytes"
      },
      "block": "testBox",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "88": {
      "block": "testBox_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "90": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "91": {
      "op": "pop",
      "stack_out": []
    },
    "92": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "94": {
      "op": "frame_dig -1",
      "defined_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "96": {
      "op": "box_put",
      "stack_out": []
    },
    "97": {
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "98": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "99": {
      "op": "pop",
      "stack_out": []
    },
    "100": {
      "op": "bytec_0 // \"A\"",
      "stack_out": [
        "\"A\""
      ]
    },
    "101": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"A\"",
        "value#0 (copy)"
      ]
    },
    "103": {
      "op": "box_put",
      "stack_out": []
    },
    "104": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "106": {
      "op": "bytec 4 // \"one\"",
      "defined_out": [
        "\"one\"",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "\"one\""
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "assert",
      "stack_out": []
    },
    "110": {
      "op": "bytec_0 // \"A\"",
      "stack_out": [
        "\"A\""
      ]
    },
    "111": {
      "op": "dup",
      "stack_out": [
        "\"A\"",
        "\"A\""
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "113": {
      "op": "assert",
      "stack_out": []
    },
    "114": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "116": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "117": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "118": {
      "op": "bytec_0 // \"A\"",
      "stack_out": [
        "maybe_value%0#0",
        "\"A\""
      ]
    },
    "119": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "120": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "122": {
      "op": "assert",
      "stack_out": []
    },
    "123": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "125": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "126": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "128": {
      "op": "bz testBox_bool_false@3",
      "stack_out": []
    },
    "131": {
      "block": "testBox_and_contd@1",
      "stack_in": [],
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "132": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "133": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "135": {
      "op": "bz testBox_bool_false@3",
      "stack_out": []
    },
    "138": {
      "block": "testBox_bool_true@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "139": {
      "block": "testBox_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "140": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "142": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "143": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "144": {
      "op": "assert",
      "stack_out": []
    },
    "145": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "147": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "148": {
      "error": "delete failed",
      "op": "assert // delete failed",
      "stack_out": []
    },
    "149": {
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "150": {
      "op": "box_del",
      "defined_out": [
        "isBoxADeleted#0"
      ],
      "stack_out": [
        "isBoxADeleted#0"
      ]
    },
    "151": {
      "error": "delete failed",
      "op": "assert // delete failed",
      "stack_out": []
    },
    "152": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "154": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "155": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%4#0"
      ]
    },
    "157": {
      "op": "bnz testBox_bool_false@7",
      "stack_out": []
    },
    "160": {
      "block": "testBox_and_contd@5",
      "stack_in": [],
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "161": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "162": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%5#0"
      ]
    },
    "164": {
      "op": "bnz testBox_bool_false@7",
      "stack_out": []
    },
    "167": {
      "block": "testBox_bool_true@6",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "168": {
      "block": "testBox_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "169": {
      "op": "bytec_0 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "170": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "172": {
      "op": "pushbytes \"O\"",
      "defined_out": [
        "\"O\"",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "\"O\""
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%6#0",
        "\"O\"",
        "maybe_value%6#0"
      ]
    },
    "176": {
      "op": "uncover 2",
      "stack_out": [
        "\"O\"",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "178": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "179": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "box#0 (copy)"
      ]
    },
    "181": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "182": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "183": {
      "op": "pushbytes \"O\"",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "\"O\""
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%7#0",
        "\"O\"",
        "maybe_value%7#0"
      ]
    },
    "187": {
      "op": "uncover 2",
      "stack_out": [
        "state_get%0#0",
        "\"O\"",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "189": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%1#0"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": []
    },
    "192": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "194": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "195": {
      "op": "bury 1",
      "defined_out": [
        "e#0"
      ],
      "stack_out": [
        "e#0"
      ]
    },
    "197": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "198": {
      "op": "assert",
      "stack_out": []
    },
    "199": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "201": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "202": {
      "op": "pop",
      "stack_out": []
    },
    "203": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "205": {
      "op": "frame_dig -1",
      "defined_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "207": {
      "op": "box_put",
      "stack_out": []
    },
    "208": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "210": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "211": {
      "op": "bury 1",
      "stack_out": [
        "e#0"
      ]
    },
    "213": {
      "op": "assert",
      "stack_out": []
    },
    "214": {
      "retsub": true,
      "op": "retsub"
    },
    "215": {
      "block": "testBox_bool_false@7",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "216": {
      "op": "b testBox_bool_merge@8"
    },
    "219": {
      "block": "testBox_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "220": {
      "op": "b testBox_bool_merge@4"
    },
    "223": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::testBoxMap",
      "params": {
        "box#0": "bytes",
        "key#0": "bytes",
        "value#0": "bytes"
      },
      "block": "testBoxMap",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "226": {
      "block": "testBoxMap_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "228": {
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "232": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "233": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ]
    },
    "236": {
      "op": "box_put",
      "stack_out": []
    },
    "237": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "\"\""
      ]
    },
    "238": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "241": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "242": {
      "op": "box_del",
      "stack_out": [
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "243": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "244": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ]
    },
    "246": {
      "op": "box_put",
      "stack_out": []
    },
    "247": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "\"\""
      ]
    },
    "248": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "boxMapItem#0"
      ],
      "stack_out": [
        "boxMapItem#0"
      ]
    },
    "251": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "252": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "254": {
      "op": "assert",
      "stack_out": []
    },
    "255": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "257": {
      "op": "bytec 5 // \"two\"",
      "defined_out": [
        "\"two\"",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "\"two\""
      ]
    },
    "259": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "260": {
      "op": "assert",
      "stack_out": []
    },
    "261": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "\"\""
      ]
    },
    "262": {
      "op": "dup",
      "stack_out": [
        "\"\"",
        "\"\""
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "264": {
      "op": "assert",
      "stack_out": []
    },
    "265": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "267": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "270": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "271": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "272": {
      "op": "assert",
      "stack_out": []
    },
    "273": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "275": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "277": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "278": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "279": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "281": {
      "op": "assert",
      "stack_out": []
    },
    "282": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "284": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "287": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "288": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "289": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "maybe_value%2#0",
        "\"\""
      ]
    },
    "290": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%2#0",
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%7#0"
      ]
    },
    "293": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "294": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "295": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "296": {
      "op": "assert",
      "stack_out": []
    },
    "297": {
      "op": "frame_dig -3",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "299": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "301": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "302": {
      "op": "box_del",
      "defined_out": [
        "isBoxDeleted#0"
      ],
      "stack_out": [
        "isBoxDeleted#0"
      ]
    },
    "303": {
      "error": "delete failed",
      "op": "assert // delete failed",
      "stack_out": []
    },
    "304": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "\"\""
      ]
    },
    "305": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "307": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "308": {
      "op": "pushbytes \"x\"",
      "defined_out": [
        "\"x\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"x\""
      ]
    },
    "311": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "312": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%11#0",
        "box#0 (copy)"
      ]
    },
    "314": {
      "op": "swap",
      "stack_out": [
        "box#0 (copy)",
        "tmp%11#0"
      ]
    },
    "315": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "316": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "318": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "\"b\""
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%4#0",
        "\"b\"",
        "maybe_value%4#0"
      ]
    },
    "322": {
      "op": "uncover 2",
      "stack_out": [
        "\"b\"",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "324": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "325": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "state_get%0#0",
        "\"\""
      ]
    },
    "326": {
      "op": "frame_dig -2",
      "stack_out": [
        "state_get%0#0",
        "\"\"",
        "key#0 (copy)"
      ]
    },
    "328": {
      "op": "concat",
      "defined_out": [
        "state_get%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%13#0"
      ]
    },
    "329": {
      "op": "pushbytes \"x\"",
      "stack_out": [
        "state_get%0#0",
        "tmp%13#0",
        "\"x\""
      ]
    },
    "332": {
      "op": "concat",
      "defined_out": [
        "state_get%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%14#0"
      ]
    },
    "333": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "state_get%0#0",
        "tmp%14#0",
        "\"\""
      ]
    },
    "334": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "\"\"",
        "tmp%14#0"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "state_get%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%15#0"
      ]
    },
    "336": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "338": {
      "op": "pushbytes \"b\"",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "\"b\""
      ]
    },
    "341": {
      "op": "swap",
      "stack_out": [
        "state_get%0#0",
        "maybe_exists%5#0",
        "\"b\"",
        "maybe_value%5#0"
      ]
    },
    "342": {
      "op": "uncover 2",
      "stack_out": [
        "state_get%0#0",
        "\"b\"",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "344": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%1#0"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "346": {
      "op": "assert",
      "stack_out": []
    },
    "347": {
      "retsub": true,
      "op": "retsub"
    },
    "348": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::testBoxRef",
      "params": {
        "box#0": "bytes",
        "length#0": "uint64"
      },
      "block": "testBoxRef",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "351": {
      "block": "testBoxRef_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "353": {
      "op": "bytec 6 // \"three\"",
      "defined_out": [
        "\"three\"",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "\"three\""
      ]
    },
    "355": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "op": "assert",
      "stack_out": []
    },
    "357": {
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "358": {
      "op": "dup",
      "stack_out": [
        "\"abc\"",
        "\"abc\""
      ]
    },
    "359": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "360": {
      "op": "assert",
      "stack_out": []
    },
    "361": {
      "op": "bytec_2 // \"abc\"",
      "stack_out": [
        "\"abc\""
      ]
    },
    "362": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "363": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "365": {
      "op": "bnz testBoxRef_else_body@2",
      "stack_out": []
    },
    "368": {
      "block": "testBoxRef_if_body@1",
      "stack_in": [],
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "369": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "\"abc\"",
        "1000"
      ],
      "stack_out": [
        "\"abc\"",
        "1000"
      ]
    },
    "372": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "373": {
      "op": "pop",
      "stack_out": []
    },
    "374": {
      "block": "testBoxRef_after_if_else@5",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "376": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "377": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "379": {
      "op": "bz testBoxRef_else_body@7",
      "stack_out": []
    },
    "382": {
      "block": "testBoxRef_if_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "384": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "4"
      ]
    },
    "385": {
      "op": "box_resize",
      "stack_out": []
    },
    "386": {
      "block": "testBoxRef_after_if_else@8",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "388": {
      "op": "bytec_3 // 0xffffffff",
      "defined_out": [
        "0xffffffff",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "0xffffffff"
      ]
    },
    "389": {
      "op": "box_put",
      "stack_out": []
    },
    "390": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "392": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "393": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "394": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "0x"
      ]
    },
    "395": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "0x",
        "maybe_value%2#0"
      ]
    },
    "396": {
      "op": "uncover 2",
      "stack_out": [
        "0x",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "398": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "399": {
      "op": "bytec_3 // 0xffffffff",
      "stack_out": [
        "state_get%0#0",
        "0xffffffff"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "401": {
      "op": "assert",
      "stack_out": []
    },
    "402": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "404": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "405": {
      "op": "bury 1",
      "defined_out": [
        "maybeBox.1#0"
      ],
      "stack_out": [
        "maybeBox.1#0"
      ]
    },
    "407": {
      "op": "assert",
      "stack_out": []
    },
    "408": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "410": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "411": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "412": {
      "op": "bytec_3 // 0xffffffff",
      "stack_out": [
        "maybe_value%4#0",
        "0xffffffff"
      ]
    },
    "413": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "414": {
      "op": "assert",
      "stack_out": []
    },
    "415": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "417": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "1"
      ]
    },
    "418": {
      "op": "dup",
      "stack_out": [
        "box#0 (copy)",
        "1",
        "1"
      ]
    },
    "419": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "1",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "1",
        "1",
        "0x00"
      ]
    },
    "422": {
      "op": "box_splice",
      "stack_out": []
    },
    "423": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "425": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "426": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "427": {
      "op": "pushbytes 0xff00ffff",
      "defined_out": [
        "0xff00ffff",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "0xff00ffff"
      ]
    },
    "433": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "434": {
      "op": "assert",
      "stack_out": []
    },
    "435": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "437": {
      "op": "box_del",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "438": {
      "error": "delete failed",
      "op": "assert // delete failed",
      "stack_out": []
    },
    "439": {
      "op": "frame_dig -2",
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "441": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "442": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%6#0"
      ]
    },
    "444": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "445": {
      "op": "assert",
      "stack_out": []
    },
    "446": {
      "retsub": true,
      "op": "retsub"
    },
    "447": {
      "block": "testBoxRef_else_body@7",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "449": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)",
        "4"
      ]
    },
    "450": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "451": {
      "op": "pop",
      "stack_out": []
    },
    "452": {
      "op": "b testBoxRef_after_if_else@8"
    },
    "455": {
      "block": "testBoxRef_else_body@2",
      "stack_in": [],
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "456": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "457": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "458": {
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "length#0 (copy)"
      ]
    },
    "460": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "461": {
      "op": "bz testBoxRef_after_if_else@4",
      "stack_out": []
    },
    "464": {
      "block": "testBoxRef_if_body@3",
      "stack_in": [],
      "op": "bytec_2 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "465": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"abc\"",
        "length#0 (copy)"
      ],
      "stack_out": [
        "\"abc\"",
        "length#0 (copy)"
      ]
    },
    "467": {
      "op": "box_resize",
      "stack_out": []
    },
    "468": {
      "block": "testBoxRef_after_if_else@4",
      "stack_in": [],
      "op": "b testBoxRef_after_if_else@5"
    }
  }
}