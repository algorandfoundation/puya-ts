{
    "name": "TupleBox",
    "structs": {
        "object": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ],
        "BoxMap2": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBoxMap",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "key": "dDE="
                },
                "box2": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "dDI="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "prefix": "dG0x"
                },
                "boxMap2": {
                    "keyType": "AVMString",
                    "valueType": "BoxMap2",
                    "prefix": "dG0y"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        154,
                        162,
                        244,
                        267,
                        289,
                        359,
                        382,
                        404,
                        589,
                        614,
                        638,
                        656,
                        681,
                        705
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        86,
                        103
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        91,
                        108
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAUCASYMAWEFaGVsbG8ABXdvcmxkAnQxAnQyA3RtMQN0bTIBAANhYmMDZGVmAWIxGyITQQA7NhoAgAT8GcRugASfHxjlTwKOAgATAAIiQzEZIhJEMRgiE0SIAVElQv/uMRkiEkQxGCITRIgAGyVC/90xGSJMjgEAA0L/0TEYIhJEiAL4JUL/xicEgQq5SCcFgRS5SCcEvUSBChJEJwW9RIEUEkQnBL1FAUQnBb1FAUQpFRZXBgIpUCpLAVBMFSMIIxZXBgIqTFArFRZXBgIrUE8DTFBPAhZXBgJPAkxQJwgiJVRQTFAnBLxIJwRMvycEvkRJIllMSSRZTE8CTwJSVwIAKRJEJwS+REkkWUxJFUxPAk8CUlcCACsSRCcEvkSBIFNEKRUWVwYCKVAqSwFQTBUjCCMWVwYCKkxQKxUWVwYCK1BPA0xQTwIWVwYCTwJMUCcIIiVUUExQJwW8SCcFTL8nBb5ESSJZTEkkWUxPAk8CUlcCACkSRCcFvkRJJFlMSRVMTwJPAlJXAgArEkQnBb5EgSBTRCcEvEgnBL1FARREJwW8SCcFvUUBFESJJwYoUL1FARREJwcoUL1FARREKRUWVwYCKVAqSwFQTBUjCCMWVwYCKkxQKxUWVwYCK1BPA0xQTwIWVwYCTwJMUCcIIiVUUExQJwYoUEm8SEy/KRUWVwYCKVAqSwFQTBUjCCMWVwYCKkxQKxUWVwYCK1BPA0xQTwIWVwYCTwJMUCcIIiVUUExQJwcoUEm8SEy/JwYoUL1FAUQnBihQvkRJIllMSSRZTE8CTwJSVwIAKRJEJwYoUL5ESSRZTEkVTE8CTwJSVwIAKxJEJwYoUL5EgSBTRCcHKFC9RQFEJwcoUL5ESSJZTEkkWUxPAk8CUlcCACkSRCcHKFC+REkkWUxJFUxPAk8CUlcCACsSRCcHKFC+RIEgU0QnCRUWVwYCJwlQKksBUEwVIwgjFlcGAipMUCcKFRZXBgInClBPA0xQTwIWVwYCTwJMUCcIIklUUExQJwYnC1BJvEhMvycGJwtQvUUBRCcJFRZXBgInCVAqSwFQTBUjCCMWVwYCKkxQJwoVFlcGAicKUE8DTFBPAhZXBgJPAkxQJwgiSVRQTFAnBycLUEm8SEy/JwcnC1C9RQFEJwYoULxIJwYoUL1FARREJwcoULxIJwcoUL1FARREiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}