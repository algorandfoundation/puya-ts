{
    "name": "TupleBox",
    "structs": {
        "ObjectB8AC7445": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ],
        "BoxMap2": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBoxMap",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "key": "dDE="
                },
                "box2": {
                    "keyType": "AVMString",
                    "valueType": "ObjectB8AC7445",
                    "key": "dDI="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "prefix": "dG0x"
                },
                "boxMap2": {
                    "keyType": "AVMString",
                    "valueType": "BoxMap2",
                    "prefix": "dG0y"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        178,
                        186,
                        262,
                        286,
                        309,
                        381,
                        406,
                        430,
                        613,
                        640,
                        666,
                        682,
                        709,
                        735
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        69
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        137
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAAUCASYLAWEFaGVsbG8Fd29ybGQCdDECdDIDdG0xA3RtMgEAA2FiYwNkZWYBYkIAAEIAADEbIhNBAEJCAAAxGSISRDEYIhNBADBCAAA2GgCABPwZxG6ABJ8fGOVPAo4CABAACkIAAEIAAEIAAACIACNC//OIABVC/+1C/+0xGSISMRgiEhBEiAMMJUNCAACIAAolQ0IAAIgBJyVDigAAQgAAK4EKuUgnBIEUuUgrvUSBChJEJwS9RIEUEkQrvUQnBL1EKRUWVwYCKVAjFlcGAoAATwFQTgFJFSMIKhUWVwYCKlBOARZXBgJPA08BUCcHIiVUUE8CUE8BUCu8SCtPAb8rvkRJIllOAUkkWU8BTwJPAlJXAgApEkQrvkRJJFlOAUkVTgFPAk8CUlcCACoSRCu+RIEgU0QpFRZXBgIpUCMWVwYCgABPAVBOAUkVIwgqFRZXBgIqUE4BFlcGAk8DTwFQJwciJVRQTwJQTwFQJwS8SCcETwG/JwS+REkiWU4BSSRZTwFPAk8CUlcCACkSRCcEvkRJJFlOAUkVTgFPAk8CUlcCACoSRCcEvkSBIFNEK7xIK70URCcEvEgnBL0URImKAABCAAAnBShQvRREJwYoUL0URCkVFlcGAilQIxZXBgKAAE8BUE4BSRUjCCoVFlcGAipQTgEWVwYCTwNPAVAnByIlVFBPAlBPAVAnBShQSbxITwG/KRUWVwYCKVAjFlcGAoAATwFQTgFJFSMIKhUWVwYCKlBOARZXBgJPA08BUCcHIiVUUE8CUE8BUCcGKFBJvEhPAb8nBShQvUQnBShQvkRJIllOAUkkWU8BTwJPAlJXAgApEkQnBShQvkRJJFlOAUkVTgFPAk8CUlcCACoSRCcFKFC+RIEgU0QnBihQvUQnBihQvkRJIllOAUkkWU8BTwJPAlJXAgApEkQnBihQvkRJJFlOAUkVTgFPAk8CUlcCACoSRCcGKFC+RIEgU0QnCBUWVwYCJwhQIxZXBgKAAE8BUE4BSRUjCCcJFRZXBgInCVBOARZXBgJPA08BUCcHIiJUUE8CUE8BUCcFJwpQSbxITwG/JwUnClC9RCcIFRZXBgInCFAjFlcGAoAATwFQTgFJFSMIJwkVFlcGAicJUE4BFlcGAk8DTwFQJwciIlRQTwJQTwFQJwYnClBJvEhPAb8nBicKUL1EJwUoULxIJwUoUL0URCcGKFC8SCcGKFC9FESJQgAAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}