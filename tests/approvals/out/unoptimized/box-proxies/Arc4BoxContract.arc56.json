{
    "name": "Arc4BoxContract",
    "structs": {
        "DynamicArrayInAStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "arr2",
                "type": "uint64[]"
            }
        ],
        "LargeStruct": [
            {
                "name": "a",
                "type": "byte[1024]"
            },
            {
                "name": "b",
                "type": "byte[1024]"
            },
            {
                "name": "c",
                "type": "byte[1024]"
            },
            {
                "name": "d",
                "type": "byte[1024]"
            },
            {
                "name": "e",
                "type": "uint64"
            },
            {
                "name": "f",
                "type": "byte[1024]"
            },
            {
                "name": "g",
                "type": "byte[1024]"
            },
            {
                "name": "h",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "setBoxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkKeys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createManyInts",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setManyInts",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sumManyInts",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBoxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "indirectExtractAndReplace",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "readBoxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxesExist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sliceBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBoxRef",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createBools",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBool",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sumBools",
            "args": [
                {
                    "type": "uint64",
                    "name": "stopAtTotal"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "boxA": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym94QQ=="
                },
                "boxB": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "boxC": {
                    "keyType": "AVMString",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "boxD": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94RA=="
                },
                "boxRef": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94UmVm"
                },
                "boxLarge": {
                    "keyType": "AVMString",
                    "valueType": "LargeStruct",
                    "key": "Ym94TGFyZ2U="
                },
                "manyInts": {
                    "keyType": "AVMString",
                    "valueType": "uint64[513]",
                    "key": "bWFueUludHM="
                },
                "dynamicBox": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "ZHluYW1pY0JveA=="
                },
                "dynamicArrStruct": {
                    "keyType": "AVMString",
                    "valueType": "DynamicArrayInAStruct",
                    "key": "ZHluYW1pY0FyclN0cnVjdA=="
                },
                "tooManyBools": {
                    "keyType": "AVMString",
                    "valueType": "bool[33000]",
                    "key": "dG9vTWFueUJvb2xz"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        2146
                    ],
                    "errorMessage": "Blob exists"
                },
                {
                    "pc": [
                        475,
                        489,
                        882,
                        920,
                        924,
                        935,
                        947,
                        954,
                        962,
                        971,
                        982,
                        995,
                        998,
                        1019,
                        1111,
                        1180,
                        1197,
                        1201,
                        1233,
                        1330,
                        1407,
                        1479,
                        1528,
                        1566,
                        1713,
                        1747,
                        1753,
                        1756,
                        1849,
                        1913,
                        1981,
                        1994,
                        2007,
                        2020,
                        2149,
                        2197,
                        2244
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        137
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        387
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1492
                    ],
                    "errorMessage": "box a key ok"
                },
                {
                    "pc": [
                        1498
                    ],
                    "errorMessage": "box b key ok"
                },
                {
                    "pc": [
                        1502
                    ],
                    "errorMessage": "box c key ok"
                },
                {
                    "pc": [
                        1506
                    ],
                    "errorMessage": "box large key ok"
                },
                {
                    "pc": [
                        932
                    ],
                    "errorMessage": "direct reference should match copy"
                },
                {
                    "pc": [
                        2345
                    ],
                    "errorMessage": "expected ManyInts to exceed max bytes size"
                },
                {
                    "pc": [
                        2054,
                        2171
                    ],
                    "errorMessage": "has data"
                },
                {
                    "pc": [
                        1542,
                        1592,
                        1986,
                        1999,
                        2012,
                        2026,
                        2205,
                        2211
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        517
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint8[])"
                },
                {
                    "pc": [
                        535
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        790
                    ],
                    "errorMessage": "invalid number of bytes for bool8"
                },
                {
                    "pc": [
                        501,
                        573,
                        582,
                        781,
                        808
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        2042,
                        2046
                    ],
                    "errorMessage": "no data"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAGAQACCIAg6IECJhAEYmxvYgVCT1hfQwhib3hMYXJnZQRib3hBAWIEYm94RAFkBBUffHUIbWFueUludHMCNDIMdG9vTWFueUJvb2xzATAFSGVsbG8FaGVsbG8GYm94UmVmAwaBAUIAADEYQAAJQgAAiAilQgAAQgAAMRsjE0EA+EIAADEZIxJEMRgjE0EA5kIAADYaAIAEJ/draYAEkSNheoAE9yY5SIAECby6XoAEeg09yIAEfQObQ4AEO8Oy+YAE3N5hTYAE4TkXIYAEaDtcZIAEpaYm/oAEkDnt3oAEKLLiQYAEjc7Xm4AEHHf0lk8Pjg8AXgBYAFIATABGAEAAOgA0AC4AKAAiABwAFgAQAApCAABCAABCAAAAiAH+Qv/ziAHdQv/tiAHPQv/niAHBQv/hiAGzQv/biAGlQv/ViAFyQv/PiAEiQv/JiAEUQv/DiAEGQv+9iADxQv+3iADRQv+xiADDQv+riAC1Qv+liAB3Qv+fQv+fMRkjEjEYIxIQRIgHjyJDigIAQgAAi/6BCghCAAAyDIsADEEAMkIAALGBBrIQgQWyGScPsh4nD7IfIyKL/44CAA4AB0IAALNC/9MyALIBQv/1I7IBQv/viYoBAUIAAIv/vkQXIgiJigEBQgAAi/+9RIlCAAA2GgFJFSUSRBc2GgJJI1kiCyQISwEVEkRXAgA2GgNJI1kiCyQISwEVEkRPAk8CTwKIARUiQ0IAAIgDpSJDQgAAiAOzIkNCAAA2GgFJFSUSRBc2GgJJFSUSRBeIA6QiQ0IAAIgDuhYnB08BULAiQ0IAAIgD6iJDQgAAiARCIkNCAACIBFVOA04DTgEWgABPAVBOAUkVFlcGAk8BUIEUFlcGAk8CTwFQTgFJFYEUCBZXBgJPAk8BUE8CFlBPAVBPAVAnB08BULAiQ0IAAIgEL04DTgJOAYABACNPAlQiTwJUJE8CVIEDTwJUgABPAVAnB08BULAiQ0IAAIgELiJDQgAAiASvIkNCAACIBPgiQ0IAAIgFgCJDQgAANhoBSRUlEkQXNhoCSRUiEkQjU4gFcCJDQgAANhoBSRUlEkQXiAWEFicHTwFQsCJDigMAQgAAi/4VFlcGAov+UIv9FitPAb8nBLxIJwRLAb8pvEgpi/+/SVcCACcFvEgnBU8BvyqBkDC5SCq+RIEqFk8BIQRPAl0qTwG/gYAIgQQLKk8BgAgAAAAAAAAAKrsnBL5EJwS+RCNZTwEjWRJEK75EF4EDCBYrTwG/K71EJRJEJwS9REsBFRJEKb1Ei/8VEkQnBb1ESwFXAgAVEkQpvkQjIliL/yMiWBJEKb5EKb5EFSIJIliL/xUiCYv/TwEiWBJEKb5ESRUjSwEPI0sCTwJNTgEiSwEPIksCTwJNCUlLAgxPAUsCTwJNTwJPAk8CUov/FSNLAQ8jSwJPAk1OASJLAQ8iSwJPAk0JSUsCDE8BSwJPAk2L/08CTwJSEkQpvkRJFSNLAQ8jSwJPAk1OASRLAQ8kTwJPAk1PAk8CTwJSi/8VI0sBDyNLAk8CTU4BJEsBDyRPAk8CTYv/TwJPAlISRCcFvkQjIlhLAVcCACMiWBJEJwW+RCcFvkQVIgkiWEsBVwIATgFLAlcCABUiCU8CTwEiWBJEJwW+REkVI0sBDyNLAk8CTU4BIksBDyJLAk8CTQlJSwIMTwFLAk8CTU8CTwJPAlJLAVcCAEkVI0sBDyNLAk8CTU4BIksBDyJLAk8CTQlJSwIMTwFLAk8CTU8CTwJPAlISRCcFvkRJFSNLAQ8jSwJPAk1OAYEFSwEPgQVPAk8CTU8CTwJPAlJLAVcCAEkVI0sBDyNLAk8CTU4BgQVLAQ+BBU8CTwJNTwJPAk8CUhJEJwW+REkVI0sBDyNLAk8CTU4BJEsBDyRPAk8CTU8CTwJPAlJPAVcCAEkVI0sBDyNLAk8CTU4BJEsBDyRPAk8CTU8CTwJPAlISRCq9RIGQMBJEiUIAACsrEkQnBCcEEkQpKRJEKioSRIlCAAAnCIGIILlIiYoCAEIAACcIvkSL/xaL/iULTwJPAU8CXScITwG/iYoAAUIAAIGEUiOI+28jJwi+RCNCAACLAoGBBAxBAB9CAACLAiULiwFPASVYF4sACIwAQgAAiwIiCIwCQv/YiUIAACu8SCcEvEgpvEgrvk4BF4EqTwFPAk2BKhJEJwS+TgGABAACNDJPAU8CTVcCACcJEkQnCRUWVwYCJwlQKb5OAU8CTwFPAk1XAgAnCRJEK75OARdOARREIxJEKrxIiUIAACq+REkhBCVYFyIIFk8BIQRPAl0qTwG/iUIAACuI+wQiCScEvkRXAgApvkQqvkQhBCVYF08DTwNPA08DiYoABEIAACu9JwS9TgFOAim9TgFOAyq9TgFOBE8DTwNPA08DTwdPB08HTweJQgAAJwu8SCcLgBNUZXN0aW5nIHRlc3RpbmcgMTIzvycLvkRJFSNLAQ8jSwJPAk1OAYEHSwEPgQdPAk8CTU8CTwJPAlKAB1Rlc3RpbmcSRCcMFRZXBgInDFApvEgpTwG/Kb5ESRUkSwEPJEsCTwJNTgGBCksBD4EKTwJPAk1PAk8CTwJSJwwSRIlCAACAAIABAFCAAQFQgAECUIABA1AnBk8BvycGvkQjIgsiWBcjEkQnBr5EIiILIlgXIhJEJwa+RCQiCyJYFyQSRCcGvkSBAyILIlgXgQMSRImKAABCAAAovRREKL0URCiBILlEKL1EMQAyCk4BKCNLArsogcA+0ygjI0sE0iiBQCcNuycNFYFACCgjTwK6SwJLAlAnDVASRCi8SCgoEkQovhREgAASRCi+TgFLAk8BTwJNSwESRE8BUCi8SChPAb8ovUQovUSBQBJEKIj5coFAEkQnDoEguUgnDr1EJw68SIlCAAAnCoGdILlIiYoCAEIAACcKvkSL/4v+IQUMRIv+IQUMRE8Bi/5PAlQnCk8Bv4mKAQGAAEIAAIHIZSOI+MkjJwq+RCNCAACLAyEFDEEAQkIAAIsCiwNTiwGMAEEADEIAAIsBIgiMAEIAAIsAi/8SQQAPQgAAiwCMAUIAAIsBjACJQgAAiwMiCIwDiwCMAUL/tkL/6EIAAIlCAABCAABCAACBiCAhBA1EiQ==",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}