#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 2 8 4096 33000
    bytecblock "blob" "BOX_C" "boxLarge" "boxA" "b" "boxD" "d" 0x151f7c75 "manyInts" "42" "tooManyBools" "0" "Hello" "hello" "boxRef" 0x068101
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_if_body@1

main_if_body@1:
    callsub constructor
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // tests/approvals/box-proxies.algo.ts:342
    // class Arc4BoxContract extends arc4.Contract {
    txn NumAppArgs
    intc_1 // 0
    !=
    bz main___algots__.defaultCreate@24
    b main_abi_routing@4

main_abi_routing@4:
    // tests/approvals/box-proxies.algo.ts:342
    // class Arc4BoxContract extends arc4.Contract {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    bz main_create_NoOp@22
    b main_call_NoOp@5

main_call_NoOp@5:
    // tests/approvals/box-proxies.algo.ts:342
    // class Arc4BoxContract extends arc4.Contract {
    txna ApplicationArgs 0
    pushbytes 0x27f76b69 // method "setBoxes(uint64,byte[],string)void"
    pushbytes 0x9123617a // method "checkKeys()void"
    pushbytes 0xf7263948 // method "createManyInts()void"
    pushbytes 0x09bcba5e // method "setManyInts(uint64,uint64)void"
    pushbytes 0x7a0d3dc8 // method "sumManyInts()uint64"
    pushbytes 0x7d039b43 // method "deleteBoxes()void"
    pushbytes 0x3bc3b2f9 // method "indirectExtractAndReplace()void"
    pushbytes 0xdcde614d // method "readBoxes()(uint64,byte[],string,uint64)"
    pushbytes 0xe1391721 // method "boxesExist()(bool,bool,bool,bool)"
    pushbytes 0x683b5c64 // method "sliceBox()void"
    pushbytes 0xa5a626fe // method "arc4Box()void"
    pushbytes 0x9039edde // method "testBoxRef()void"
    pushbytes 0x28b2e241 // method "createBools()void"
    pushbytes 0x8dced79b // method "setBool(uint64,bool)void"
    pushbytes 0x1c77f496 // method "sumBools(uint64)uint64"
    uncover 15
    match main_setBoxes_route@6 main_checkKeys_route@7 main_createManyInts_route@8 main_setManyInts_route@9 main_sumManyInts_route@10 main_deleteBoxes_route@11 main_indirectExtractAndReplace_route@12 main_readBoxes_route@13 main_boxesExist_route@14 main_sliceBox_route@15 main_arc4Box_route@16 main_testBoxRef_route@17 main_createBools_route@18 main_setBool_route@19 main_sumBools_route@20
    b main_switch_case_next@21

main_switch_case_next@21:
    b main_after_if_else@23

main_after_if_else@23:
    b main_after_if_else@25

main_after_if_else@25:
    // tests/approvals/box-proxies.algo.ts:342
    // class Arc4BoxContract extends arc4.Contract {
    err

main_sumBools_route@20:
    // tests/approvals/box-proxies.algo.ts:512
    // sumBools(stopAtTotal: uint64): uint64 {
    callsub sumBools
    b main_switch_case_next@21

main_setBool_route@19:
    // tests/approvals/box-proxies.algo.ts:508
    // setBool(index: uint64, value: boolean) {
    callsub setBool
    b main_switch_case_next@21

main_createBools_route@18:
    // tests/approvals/box-proxies.algo.ts:504
    // createBools() {
    callsub createBools
    b main_switch_case_next@21

main_testBoxRef_route@17:
    // tests/approvals/box-proxies.algo.ts:465
    // testBoxRef() {
    callsub testBoxRef
    b main_switch_case_next@21

main_arc4Box_route@16:
    // tests/approvals/box-proxies.algo.ts:456
    // arc4Box() {
    callsub arc4Box
    b main_switch_case_next@21

main_sliceBox_route@15:
    // tests/approvals/box-proxies.algo.ts:447
    // sliceBox() {
    callsub sliceBox
    b main_switch_case_next@21

main_boxesExist_route@14:
    // tests/approvals/box-proxies.algo.ts:443
    // boxesExist(): readonly [boolean, boolean, boolean, boolean] {
    callsub boxesExist
    b main_switch_case_next@21

main_readBoxes_route@13:
    // tests/approvals/box-proxies.algo.ts:439
    // readBoxes(): readonly [uint64, bytes, arc4.Str, uint64] {
    callsub readBoxes
    b main_switch_case_next@21

main_indirectExtractAndReplace_route@12:
    // tests/approvals/box-proxies.algo.ts:433
    // indirectExtractAndReplace() {
    callsub indirectExtractAndReplace
    b main_switch_case_next@21

main_deleteBoxes_route@11:
    // tests/approvals/box-proxies.algo.ts:420
    // deleteBoxes() {
    callsub deleteBoxes
    b main_switch_case_next@21

main_sumManyInts_route@10:
    // tests/approvals/box-proxies.algo.ts:411
    // sumManyInts() {
    callsub sumManyInts
    b main_switch_case_next@21

main_setManyInts_route@9:
    // tests/approvals/box-proxies.algo.ts:407
    // setManyInts(index: uint64, value: uint64) {
    callsub setManyInts
    b main_switch_case_next@21

main_createManyInts_route@8:
    // tests/approvals/box-proxies.algo.ts:403
    // createManyInts() {
    callsub createManyInts
    b main_switch_case_next@21

main_checkKeys_route@7:
    // tests/approvals/box-proxies.algo.ts:396
    // checkKeys() {
    callsub checkKeys
    b main_switch_case_next@21

main_setBoxes_route@6:
    // tests/approvals/box-proxies.algo.ts:361
    // setBoxes(a: uint64, b: bytes, c: arc4.Str) {
    callsub setBoxes
    b main_switch_case_next@21

main_create_NoOp@22:
    b main_after_if_else@23

main___algots__.defaultCreate@24:
    // tests/approvals/box-proxies.algo.ts:342
    // class Arc4BoxContract extends arc4.Contract {
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_0 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    b ensure_budget_block@0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +
    b ensure_budget_while_top@1

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@6
    b ensure_budget_while_body@2

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 15 // 0x068101
    itxn_field ApprovalProgram
    bytec 15 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    intc_0 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_1 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// tests/approvals/box-proxies.algo.ts::getBoxValuePlus1(box: bytes) -> uint64:
getBoxValuePlus1:
    // tests/approvals/box-proxies.algo.ts:527
    // function getBoxValuePlus1(box: Box<uint64>): uint64 {
    proto 1 1
    b getBoxValuePlus1_block@0

getBoxValuePlus1_block@0:
    // tests/approvals/box-proxies.algo.ts:528
    // return Uint64(box.value + 1)
    frame_dig -1
    box_get
    assert // Box must have value
    btoi
    intc_0 // 1
    +
    retsub


// tests/approvals/box-proxies.algo.ts::getBoxRefLength(ref: bytes) -> uint64:
getBoxRefLength:
    // tests/approvals/box-proxies.algo.ts:531
    // function getBoxRefLength(ref: Box<bytes>): uint64 {
    proto 1 1
    b getBoxRefLength_block@0

getBoxRefLength_block@0:
    // tests/approvals/box-proxies.algo.ts:532
    // return ref.length
    frame_dig -1
    box_len
    assert // Box must have value
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes[routing]() -> void:
setBoxes:
    b setBoxes_block@0

setBoxes_block@0:
    // tests/approvals/box-proxies.algo.ts:361
    // setBoxes(a: uint64, b: bytes, c: arc4.Str) {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    uncover 2
    uncover 2
    uncover 2
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys[routing]() -> void:
checkKeys:
    b checkKeys_block@0

checkKeys_block@0:
    // tests/approvals/box-proxies.algo.ts:396
    // checkKeys() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts[routing]() -> void:
createManyInts:
    b createManyInts_block@0

createManyInts_block@0:
    // tests/approvals/box-proxies.algo.ts:403
    // createManyInts() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts[routing]() -> void:
setManyInts:
    b setManyInts_block@0

setManyInts_block@0:
    // tests/approvals/box-proxies.algo.ts:407
    // setManyInts(index: uint64, value: uint64) {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts[routing]() -> void:
sumManyInts:
    b sumManyInts_block@0

sumManyInts_block@0:
    // tests/approvals/box-proxies.algo.ts:411
    // sumManyInts() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts
    itob
    bytec 7 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes[routing]() -> void:
deleteBoxes:
    b deleteBoxes_block@0

deleteBoxes_block@0:
    // tests/approvals/box-proxies.algo.ts:420
    // deleteBoxes() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace[routing]() -> void:
indirectExtractAndReplace:
    b indirectExtractAndReplace_block@0

indirectExtractAndReplace_block@0:
    // tests/approvals/box-proxies.algo.ts:433
    // indirectExtractAndReplace() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes[routing]() -> void:
readBoxes:
    b readBoxes_block@0

readBoxes_block@0:
    // tests/approvals/box-proxies.algo.ts:439
    // readBoxes(): readonly [uint64, bytes, arc4.Str, uint64] {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes
    cover 3
    cover 3
    cover 1
    itob
    pushbytes 0x
    uncover 1
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 20 // 20
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 20 // 20
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 2
    itob
    concat
    uncover 1
    concat
    uncover 1
    concat
    bytec 7 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist[routing]() -> void:
boxesExist:
    b boxesExist_block@0

boxesExist_block@0:
    // tests/approvals/box-proxies.algo.ts:443
    // boxesExist(): readonly [boolean, boolean, boolean, boolean] {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist
    cover 3
    cover 2
    cover 1
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_0 // 1
    uncover 2
    setbit
    intc_2 // 2
    uncover 2
    setbit
    pushint 3 // 3
    uncover 2
    setbit
    pushbytes 0x
    uncover 1
    concat
    bytec 7 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox[routing]() -> void:
sliceBox:
    b sliceBox_block@0

sliceBox_block@0:
    // tests/approvals/box-proxies.algo.ts:447
    // sliceBox() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box[routing]() -> void:
arc4Box:
    b arc4Box_block@0

arc4Box_block@0:
    // tests/approvals/box-proxies.algo.ts:456
    // arc4Box() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef[routing]() -> void:
testBoxRef:
    b testBoxRef_block@0

testBoxRef_block@0:
    // tests/approvals/box-proxies.algo.ts:465
    // testBoxRef() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools[routing]() -> void:
createBools:
    b createBools_block@0

createBools_block@0:
    // tests/approvals/box-proxies.algo.ts:504
    // createBools() {
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool[routing]() -> void:
setBool:
    b setBool_block@0

setBool_block@0:
    // tests/approvals/box-proxies.algo.ts:508
    // setBool(index: uint64, value: boolean) {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_1 // 0
    getbit
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools[routing]() -> void:
sumBools:
    b sumBools_block@0

sumBools_block@0:
    // tests/approvals/box-proxies.algo.ts:512
    // sumBools(stopAtTotal: uint64): uint64 {
    txna ApplicationArgs 1
    btoi
    callsub tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools
    itob
    bytec 7 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes(a: uint64, b: bytes, c: bytes) -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes:
    // tests/approvals/box-proxies.algo.ts:361
    // setBoxes(a: uint64, b: bytes, c: arc4.Str) {
    proto 3 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes_block@0:
    // tests/approvals/box-proxies.algo.ts:362
    // const dynamicBytes = new arc4.DynamicBytes(b)
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    // tests/approvals/box-proxies.algo.ts:363
    // this.boxA.value = a
    frame_dig -3
    itob
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:363
    // this.boxA.value = a
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:364
    // this.boxB.value = dynamicBytes
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:364
    // this.boxB.value = dynamicBytes
    dig 1
    box_put
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:365
    // this.boxC.value = c
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:365
    // this.boxC.value = c
    frame_dig -1
    box_put
    // tests/approvals/box-proxies.algo.ts:366
    // this.boxD.value = dynamicBytes.native
    dup
    extract 2 0
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:366
    // this.boxD.value = dynamicBytes.native
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:366
    // this.boxD.value = dynamicBytes.native
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:367
    // this.boxLarge.create()
    pushint 6160 // 6160
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:368
    // this.boxLarge.value.e = 42
    box_get
    assert // Box must have value
    pushint 42 // 42
    itob
    uncover 1
    intc 4 // 4096
    uncover 2
    replace3
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:368
    // this.boxLarge.value.e = 42
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:369
    // this.boxLarge.replace(sizeOf<Bytes1024>() * 4, new arc4.Uint64(42).bytes)
    pushint 1024 // 1024
    pushint 4 // 4
    *
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:369
    // this.boxLarge.replace(sizeOf<Bytes1024>() * 4, new arc4.Uint64(42).bytes)
    uncover 1
    pushbytes 0x000000000000002a
    box_replace
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:371
    // const bValue = clone(this.boxB.value)
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:372
    // assert(this.boxB.value.length === bValue.length, 'direct reference should match copy')
    box_get
    assert // Box must have value
    intc_1 // 0
    extract_uint16
    uncover 1
    intc_1 // 0
    extract_uint16
    ==
    assert // direct reference should match copy
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:373
    // this.boxA.value += 3
    box_get
    assert // Box must have value
    btoi
    pushint 3 // 3
    +
    itob
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:373
    // this.boxA.value += 3
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:376
    // assert(this.boxA.length === 8)
    box_len
    assert // Box must have value
    intc_3 // 8
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:377
    // assert(this.boxB.length === dynamicBytes.bytes.length)
    box_len
    assert // Box must have value
    dig 1
    len
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:378
    // assert(this.boxC.length === c.bytes.length)
    box_len
    assert // Box must have value
    frame_dig -1
    len
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:379
    // assert(this.boxD.length === dynamicBytes.native.length)
    box_len
    assert // Box must have value
    dig 1
    extract 2 0
    len
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:382
    // assert(this.boxC.value.bytes.at(0) === c.bytes.at(0))
    box_get
    assert // Box must have value
    intc_1 // 0
    intc_0 // 1
    extract3
    frame_dig -1
    intc_1 // 0
    intc_0 // 1
    extract3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:383
    // assert(this.boxC.value.bytes.at(-1) === c.bytes.at(-1))
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:383
    // assert(this.boxC.value.bytes.at(-1) === c.bytes.at(-1))
    box_get
    assert // Box must have value
    len
    intc_0 // 1
    -
    intc_0 // 1
    extract3
    frame_dig -1
    len
    intc_0 // 1
    -
    frame_dig -1
    uncover 1
    intc_0 // 1
    extract3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:384
    // assert(this.boxC.value.bytes.slice(0, -1) === c.bytes.slice(0, -1))
    box_get
    assert // Box must have value
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:385
    // assert(this.boxC.value.bytes.slice(0, 2) === c.bytes.slice(0, 2))
    box_get
    assert // Box must have value
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:388
    // assert(this.boxD.value.at(0) === dynamicBytes.native.at(0))
    box_get
    assert // Box must have value
    intc_1 // 0
    intc_0 // 1
    extract3
    dig 1
    extract 2 0
    intc_1 // 0
    intc_0 // 1
    extract3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:389
    // assert(this.boxD.value.at(-1) === dynamicBytes.native.at(-1))
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:389
    // assert(this.boxD.value.at(-1) === dynamicBytes.native.at(-1))
    box_get
    assert // Box must have value
    len
    intc_0 // 1
    -
    intc_0 // 1
    extract3
    dig 1
    extract 2 0
    cover 1
    dig 2
    extract 2 0
    len
    intc_0 // 1
    -
    uncover 2
    uncover 1
    intc_0 // 1
    extract3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:390
    // assert(this.boxD.value.slice(0, -1) === dynamicBytes.native.slice(0, -1))
    box_get
    assert // Box must have value
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    dig 1
    extract 2 0
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:391
    // assert(this.boxD.value.slice(0, 5) === dynamicBytes.native.slice(0, 5))
    box_get
    assert // Box must have value
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    pushint 5 // 5
    dig 1
    >=
    pushint 5 // 5
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    dig 1
    extract 2 0
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    pushint 5 // 5
    dig 1
    >=
    pushint 5 // 5
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 5 // "boxD"
    // tests/approvals/box-proxies.algo.ts:392
    // assert(this.boxD.value.slice(0, Uint64(2)) === dynamicBytes.native.slice(0, Uint64(2)))
    box_get
    assert // Box must have value
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    uncover 1
    extract 2 0
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:393
    // assert(this.boxLarge.length === sizeOf<LargeStruct>())
    box_len
    assert // Box must have value
    pushint 6160 // 6160
    ==
    assert
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys_block@0:
    // tests/approvals/box-proxies.algo.ts:397
    // assert(this.boxA.key === Bytes('boxA'), 'box a key ok')
    bytec_3 // "boxA"
    bytec_3 // "boxA"
    ==
    assert // box a key ok
    // tests/approvals/box-proxies.algo.ts:398
    // assert(this.boxB.key === Bytes('b'), 'box b key ok')
    bytec 4 // "b"
    bytec 4 // "b"
    ==
    assert // box b key ok
    // tests/approvals/box-proxies.algo.ts:399
    // assert(this.boxC.key === Bytes('BOX_C'), 'box c key ok')
    bytec_1 // "BOX_C"
    bytec_1 // "BOX_C"
    ==
    assert // box c key ok
    // tests/approvals/box-proxies.algo.ts:400
    // assert(this.boxLarge.key === Bytes('boxLarge'), 'box large key ok')
    bytec_2 // "boxLarge"
    bytec_2 // "boxLarge"
    ==
    assert // box large key ok
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts_block@0:
    // tests/approvals/box-proxies.algo.ts:350
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:404
    // this.manyInts.create()
    pushint 4104 // 4104
    box_create
    pop
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts(index: uint64, value: uint64) -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts:
    // tests/approvals/box-proxies.algo.ts:407
    // setManyInts(index: uint64, value: uint64) {
    proto 2 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts_block@0:
    // tests/approvals/box-proxies.algo.ts:350
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:408
    // this.manyInts.value[index] = value
    box_get
    assert // Box must have value
    frame_dig -1
    itob
    frame_dig -2
    intc_3 // 8
    *
    uncover 2
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    // tests/approvals/box-proxies.algo.ts:350
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:408
    // this.manyInts.value[index] = value
    uncover 1
    box_put
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts() -> uint64:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts:
    // tests/approvals/box-proxies.algo.ts:411
    // sumManyInts() {
    proto 0 1
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_block@0:
    // tests/approvals/box-proxies.algo.ts:412
    // ensureBudget(10_500)
    pushint 10500 // 10500
    intc_1 // 0
    callsub ensure_budget
    // tests/approvals/box-proxies.algo.ts:413
    // let total = Uint64(0)
    intc_1 // 0
    // tests/approvals/box-proxies.algo.ts:350
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:414
    // for (const val of this.manyInts.value) {
    box_get
    assert // Box must have value
    intc_1 // 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_header@1

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_header@1:
    // tests/approvals/box-proxies.algo.ts:414
    // for (const val of this.manyInts.value) {
    frame_dig 2
    pushint 513 // 513
    <
    bz tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_after_for@4
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_body@2

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_body@2:
    // tests/approvals/box-proxies.algo.ts:414
    // for (const val of this.manyInts.value) {
    frame_dig 2
    intc_3 // 8
    *
    frame_dig 1
    uncover 1
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // tests/approvals/box-proxies.algo.ts:415
    // total = total + val
    frame_dig 0
    +
    frame_bury 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_footer@3

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_footer@3:
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_for_header@1

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts_after_for@4:
    // tests/approvals/box-proxies.algo.ts:417
    // return total
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes_block@0:
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:421
    // this.boxA.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:422
    // this.boxB.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:423
    // this.boxC.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:424
    // assert(this.boxA.get({ default: Uint64(42) }) === 42)
    box_get
    cover 1
    btoi
    pushint 42 // 42
    uncover 1
    uncover 2
    select
    pushint 42 // 42
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:425
    // assert(this.boxB.get({ default: new arc4.DynamicBytes(Bytes('42')) }).native === Bytes('42'))
    box_get
    cover 1
    pushbytes 0x00023432
    uncover 1
    uncover 2
    select
    extract 2 0
    bytec 9 // "42"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:426
    // assert(this.boxC.get({ default: new arc4.Str('42') }).native === '42')
    bytec 9 // "42"
    len
    itob
    extract 6 2
    bytec 9 // "42"
    concat
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:426
    // assert(this.boxC.get({ default: new arc4.Str('42') }).native === '42')
    box_get
    cover 1
    uncover 2
    uncover 1
    uncover 2
    select
    extract 2 0
    bytec 9 // "42"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:428
    // const [a, aExists] = this.boxA.maybe()
    box_get
    cover 1
    btoi
    cover 1
    // tests/approvals/box-proxies.algo.ts:429
    // assert(!aExists)
    !
    assert
    // tests/approvals/box-proxies.algo.ts:430
    // assert(a === 0)
    intc_1 // 0
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:431
    // this.boxLarge.delete()
    box_del
    pop
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace_block@0:
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:434
    // const large = clone(this.boxLarge.value)
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:435
    // large.e += 1
    dup
    intc 4 // 4096
    intc_3 // 8
    extract3
    btoi
    intc_0 // 1
    +
    itob
    uncover 1
    intc 4 // 4096
    uncover 2
    replace3
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:436
    // this.boxLarge.value = clone(large)
    uncover 1
    box_put
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes() -> uint64, bytes, bytes, uint64:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes_block@0:
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:440
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    callsub getBoxValuePlus1
    intc_0 // 1
    -
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:440
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    box_get
    assert // Box must have value
    extract 2 0
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:440
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:440
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    box_get
    assert // Box must have value
    intc 4 // 4096
    intc_3 // 8
    extract3
    btoi
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist() -> uint64, uint64, uint64, uint64:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist:
    // tests/approvals/box-proxies.algo.ts:443
    // boxesExist(): readonly [boolean, boolean, boolean, boolean] {
    proto 0 4
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist_block@0:
    // tests/approvals/box-proxies.algo.ts:343
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:444
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    // tests/approvals/box-proxies.algo.ts:344
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:444
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    cover 1
    cover 2
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:444
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    cover 1
    cover 3
    // tests/approvals/box-proxies.algo.ts:349
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:444
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    cover 1
    cover 4
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox_block@0:
    // tests/approvals/box-proxies.algo.ts:449
    // box0.value = Bytes('Testing testing 123')
    bytec 11 // "0"
    box_del
    pop
    bytec 11 // "0"
    pushbytes "Testing testing 123"
    box_put
    // tests/approvals/box-proxies.algo.ts:450
    // assert(box0.value.slice(0, 7) === Bytes('Testing'))
    bytec 11 // "0"
    box_get
    assert // Box must have value
    dup
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    pushint 7 // 7
    dig 1
    >=
    pushint 7 // 7
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    pushbytes "Testing"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:452
    // this.boxC.value = new arc4.Str('Hello')
    bytec 12 // "Hello"
    len
    itob
    extract 6 2
    bytec 12 // "Hello"
    concat
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:452
    // this.boxC.value = new arc4.Str('Hello')
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:452
    // this.boxC.value = new arc4.Str('Hello')
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:345
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:453
    // assert(this.boxC.value.bytes.slice(2, 10) === Bytes('Hello'))
    box_get
    assert // Box must have value
    dup
    len
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    dig 2
    uncover 2
    select
    cover 1
    pushint 10 // 10
    dig 1
    >=
    pushint 10 // 10
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    bytec 12 // "Hello"
    ==
    assert
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box_block@0:
    // tests/approvals/box-proxies.algo.ts:458
    // boxD.value = new arc4.StaticArray(new arc4.Uint8(0), new arc4.Uint8(1), new arc4.Uint8(2), new arc4.Uint8(3))
    pushbytes 0x
    pushbytes 0x00
    concat
    pushbytes 0x01
    concat
    pushbytes 0x02
    concat
    pushbytes 0x03
    concat
    bytec 6 // "d"
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:459
    // assert(boxD.value[0].asUint64() === 0)
    bytec 6 // "d"
    box_get
    assert // Box must have value
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:460
    // assert(boxD.value[1].asUint64() === 1)
    bytec 6 // "d"
    box_get
    assert // Box must have value
    intc_0 // 1
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: index access is out of bounds
    btoi
    intc_0 // 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:461
    // assert(boxD.value[2].asUint64() === 2)
    bytec 6 // "d"
    box_get
    assert // Box must have value
    intc_2 // 2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 2
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:462
    // assert(boxD.value[3].asUint64() === 3)
    bytec 6 // "d"
    box_get
    assert // Box must have value
    pushint 3 // 3
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    assert
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef:
    // tests/approvals/box-proxies.algo.ts:465
    // testBoxRef() {
    proto 0 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef_block@0:
    // tests/approvals/box-proxies.algo.ts:468
    // assert(!boxRef1.exists, 'no data')
    bytec_0 // "blob"
    box_len
    !
    assert // no data
    // tests/approvals/box-proxies.algo.ts:470
    // assert(!boxRef2.exists, 'no data')
    bytec_0 // "blob"
    box_len
    !
    assert // no data
    // tests/approvals/box-proxies.algo.ts:473
    // assert(boxRef1.create({ size: Uint64(32) }))
    bytec_0 // "blob"
    pushint 32 // 32
    box_create
    assert
    // tests/approvals/box-proxies.algo.ts:474
    // assert(boxRef1.exists, 'has data')
    bytec_0 // "blob"
    box_len
    assert // has data
    // tests/approvals/box-proxies.algo.ts:476
    // const senderBytes = Txn.sender.bytes
    txn Sender
    // tests/approvals/box-proxies.algo.ts:477
    // const appAddress = Global.currentApplicationAddress.bytes
    global CurrentApplicationAddress
    cover 1
    // tests/approvals/box-proxies.algo.ts:479
    // boxRef1.replace(0, senderBytes)
    bytec_0 // "blob"
    intc_1 // 0
    dig 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:480
    // boxRef1.resize(8000)
    bytec_0 // "blob"
    pushint 8000 // 8000
    box_resize
    // tests/approvals/box-proxies.algo.ts:481
    // boxRef1.splice(0, 0, appAddress)
    bytec_0 // "blob"
    intc_1 // 0
    intc_1 // 0
    dig 4
    box_splice
    // tests/approvals/box-proxies.algo.ts:482
    // boxRef1.replace(64, value3)
    bytec_0 // "blob"
    pushint 64 // 64
    bytec 13 // "hello"
    box_replace
    // tests/approvals/box-proxies.algo.ts:483
    // const prefix = boxRef1.extract(0, 32 * 2 + value3.length)
    bytec 13 // "hello"
    len
    pushint 64 // 64
    +
    bytec_0 // "blob"
    intc_1 // 0
    uncover 2
    box_extract
    // tests/approvals/box-proxies.algo.ts:484
    // assert(prefix === appAddress.concat(senderBytes).concat(value3))
    dig 2
    dig 2
    concat
    bytec 13 // "hello"
    concat
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:486
    // boxRef1.delete()
    bytec_0 // "blob"
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:487
    // assert(boxRef1.key === Bytes('blob'))
    bytec_0 // "blob"
    bytec_0 // "blob"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:489
    // const [value, exists] = boxRef1.maybe()
    bytec_0 // "blob"
    box_get
    // tests/approvals/box-proxies.algo.ts:490
    // assert(!exists)
    !
    assert
    // tests/approvals/box-proxies.algo.ts:491
    // assert(value === Bytes(''))
    pushbytes ""
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:492
    // assert(boxRef1.get({ default: senderBytes }) === senderBytes)
    bytec_0 // "blob"
    box_get
    cover 1
    dig 2
    uncover 1
    uncover 2
    select
    dig 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:494
    // boxRef1.value = senderBytes.concat(appAddress)
    uncover 1
    concat
    bytec_0 // "blob"
    box_del
    pop
    bytec_0 // "blob"
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:495
    // assert(boxRef1.exists, 'Blob exists')
    bytec_0 // "blob"
    box_len
    assert // Blob exists
    // tests/approvals/box-proxies.algo.ts:496
    // assert(boxRef1.length === 64)
    bytec_0 // "blob"
    box_len
    assert // Box must have value
    pushint 64 // 64
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:497
    // assert(getBoxRefLength(boxRef1) === 64)
    bytec_0 // "blob"
    callsub getBoxRefLength
    pushint 64 // 64
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:348
    // boxRef = Box<bytes>({ key: 'boxRef' })
    bytec 14 // "boxRef"
    // tests/approvals/box-proxies.algo.ts:499
    // this.boxRef.create({ size: Uint64(32) })
    pushint 32 // 32
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:348
    // boxRef = Box<bytes>({ key: 'boxRef' })
    bytec 14 // "boxRef"
    // tests/approvals/box-proxies.algo.ts:500
    // assert(this.boxRef.exists, 'has data')
    box_len
    assert // has data
    // tests/approvals/box-proxies.algo.ts:348
    // boxRef = Box<bytes>({ key: 'boxRef' })
    bytec 14 // "boxRef"
    // tests/approvals/box-proxies.algo.ts:501
    // this.boxRef.delete()
    box_del
    pop
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools() -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools_block@0:
    // tests/approvals/box-proxies.algo.ts:354
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 10 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:505
    // this.tooManyBools.create()
    pushint 4125 // 4125
    box_create
    pop
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool(index: uint64, value: uint64) -> void:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool:
    // tests/approvals/box-proxies.algo.ts:508
    // setBool(index: uint64, value: boolean) {
    proto 2 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool_block@0:
    // tests/approvals/box-proxies.algo.ts:354
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 10 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:509
    // this.tooManyBools.value[index] = value
    box_get
    assert // Box must have value
    frame_dig -1
    frame_dig -2
    intc 5 // 33000
    <
    assert // index access is out of bounds
    frame_dig -2
    intc 5 // 33000
    <
    assert // index access is out of bounds
    uncover 1
    frame_dig -2
    uncover 2
    setbit
    // tests/approvals/box-proxies.algo.ts:354
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 10 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:509
    // this.tooManyBools.value[index] = value
    uncover 1
    box_put
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools(stopAtTotal: uint64) -> uint64:
tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools:
    // tests/approvals/box-proxies.algo.ts:512
    // sumBools(stopAtTotal: uint64): uint64 {
    proto 1 1
    pushbytes ""
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_block@0

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_block@0:
    // tests/approvals/box-proxies.algo.ts:513
    // ensureBudget(13_000)
    pushint 13000 // 13000
    intc_1 // 0
    callsub ensure_budget
    // tests/approvals/box-proxies.algo.ts:514
    // let total: uint64 = 0
    intc_1 // 0
    // tests/approvals/box-proxies.algo.ts:354
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 10 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:515
    // for (const value of this.tooManyBools.value) {
    box_get
    assert // Box must have value
    intc_1 // 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_header@1

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_header@1:
    // tests/approvals/box-proxies.algo.ts:515
    // for (const value of this.tooManyBools.value) {
    frame_dig 3
    intc 5 // 33000
    <
    bz tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_for@8
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_body@2

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_body@2:
    // tests/approvals/box-proxies.algo.ts:515
    // for (const value of this.tooManyBools.value) {
    frame_dig 2
    frame_dig 3
    getbit
    frame_dig 1
    frame_bury 0
    // tests/approvals/box-proxies.algo.ts:516
    // if (value) {
    bz tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_if_else@4
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_if_body@3

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_if_body@3:
    // tests/approvals/box-proxies.algo.ts:517
    // total += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 0
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_if_else@4

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_if_else@4:
    // tests/approvals/box-proxies.algo.ts:519
    // if (total === stopAtTotal) {
    frame_dig 0
    frame_dig -1
    ==
    bz tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_if_else@6
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_if_body@5

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_if_body@5:
    frame_dig 0
    frame_bury 1
    // tests/approvals/box-proxies.algo.ts:520
    // break
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_block@9

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_block@9:
    // tests/approvals/box-proxies.algo.ts:523
    // return total
    frame_dig 1
    frame_bury 0
    retsub

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_if_else@6:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_footer@7

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_footer@7:
    frame_dig 3
    intc_0 // 1
    +
    frame_bury 3
    frame_dig 0
    frame_bury 1
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_for_header@1

tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_after_for@8:
    b tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools_block@9


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub


// tests/approvals/box-proxies.algo.ts::Arc4BoxContract.constructor() -> void:
constructor:
    b constructor_block@0

constructor_block@0:
    // tests/approvals/box-proxies.algo.ts:357
    // super()
    b constructor_block@1

constructor_block@1:
    // tests/approvals/box-proxies.algo.ts:357
    // super()
    b constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2

constructor_after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor@2:
    // tests/approvals/box-proxies.algo.ts:358
    // assert(sizeOf<ManyInts>() > 4096, 'expected ManyInts to exceed max bytes size')
    pushint 4104 // 4104
    intc 4 // 4096
    >
    assert // expected ManyInts to exceed max bytes size
    retsub
