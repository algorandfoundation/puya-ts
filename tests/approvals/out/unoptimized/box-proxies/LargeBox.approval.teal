#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 64 1 10 200
    bytecblock "large" 0x068101
    pushbytes ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    uncover 1
    match main_test_route@3
    b main_switch_case_default@4

main_switch_case_default@4:
    b main_switch_case_next@5

main_switch_case_next@5:
    b main_after_if_else@10

main_after_if_else@10:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    intc_0 // 0
    bury 1
    b main_after_inlined_tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__@11

main_after_inlined_tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__@11:
    return

main_test_route@3:
    // tests/approvals/box-proxies.algo.ts:271
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn OnCompletion
    intc_0 // 0
    uncover 1
    match main___algots__.defaultCreate@7
    b main_switch_case_default@8

main_switch_case_default@8:
    b main_switch_case_next@9

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    bury 1
    b main_after_inlined_tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__@11


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    b ensure_budget_block@0

ensure_budget_block@0:
    frame_dig -2
    intc_3 // 10
    +
    b ensure_budget_while_top@1

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@7
    b ensure_budget_while_body@2

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_2 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_default@5

ensure_budget_switch_case_default@5:
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// tests/approvals/box-proxies.algo.ts::LargeBox.test() -> void:
test:
    // tests/approvals/box-proxies.algo.ts:271
    // test() {
    proto 0 0
    b test_block@0

test_block@0:
    // tests/approvals/box-proxies.algo.ts:272
    // ensureBudget(7000)
    pushint 7000 // 7000
    intc_0 // 0
    callsub ensure_budget
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:273
    // this.box.create()
    pushint 12800 // 12800
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:274
    // assert(this.box.length === 200 * 64, 'Box should be created with the correct size')
    box_len
    assert // Box must have value
    pushint 12800 // 12800
    ==
    assert // Box should be created with the correct size
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:275
    // assert(this.box.value.length === 200, 'Box value should be an array of 200 items')
    box_get
    assert // Box must have value
    intc 4 // 200
    intc 4 // 200
    ==
    assert // Box value should be an array of 200 items
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    box_get
    assert // Box must have value
    intc_0 // 0
    b test_for_header@1

test_for_header@1:
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    frame_dig 2
    intc 4 // 200
    <
    bz test_after_for@4
    b test_for_body@2

test_for_body@2:
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    frame_dig 2
    dup
    intc_1 // 64
    *
    frame_dig 1
    uncover 1
    intc_1 // 64
    extract3 // on error: index access is out of bounds
    // tests/approvals/box-proxies.algo.ts:277
    // const x = clone(v)
    cover 1
    // tests/approvals/box-proxies.algo.ts:279
    // x.balance = index + 10
    dup
    intc_3 // 10
    +
    itob
    uncover 2
    pushint 32 // 32
    uncover 2
    replace3
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:281
    // this.box.value[index] = clone(x)
    box_get
    assert // Box must have value
    dig 2
    intc_1 // 64
    *
    uncover 2
    replace3 // on error: index access is out of bounds
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:281
    // this.box.value[index] = clone(x)
    uncover 1
    box_put
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:283
    // assert(this.box.value[index].balance === index + 10)
    box_get
    assert // Box must have value
    dig 1
    intc_1 // 64
    *
    intc_1 // 64
    extract3 // on error: index access is out of bounds
    pushint 32 // 32
    pushint 8 // 8
    extract3
    btoi
    uncover 1
    intc_3 // 10
    +
    ==
    assert
    b test_for_footer@3

test_for_footer@3:
    frame_dig 2
    intc_2 // 1
    +
    frame_bury 2
    b test_for_header@1

test_after_for@4:
    retsub


// tests/approvals/box-proxies.algo.ts::LargeBox.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
