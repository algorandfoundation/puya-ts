main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L268
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L268
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@4}
    block@3: // test_route_L271
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::LargeBox.test()
        let tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L268
        goto block@5
    block@5: // switch_case_next_L268
        goto block@10
    block@6: // bare_routing_L268
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L268
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/box-proxies.algo.ts::LargeBox.__algots__.defaultCreate()
        let tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L268
        goto block@9
    block@9: // switch_case_next_L268
        goto block@10
    block@10: // after_if_else_L268
        let tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#1 <- block@7, tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine tests/approvals/box-proxies.algo.ts::LargeBox.test() -> void:
    block@0: // L271
        _puya_lib.util.ensure_budget(7000u, 0u)
        (box_create "large" 12800u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "large")
        (assert check%0#0) // Box must have value
        let tmp%0#0: bool = (== value%0#0 12800u)
        (assert tmp%0#0) // Box should be created with the correct size
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "large")
        (assert aggregate%box_get%1#0) // Box must have value
        let tmp%2#0: bool = (== 200u 200u)
        (assert tmp%2#0) // Box value should be an array of 200 items
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "large")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L276
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 200u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L276
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 64u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%1#0 aggregate%bytes_offset%0#0 64u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = aggregate%encoded_element%0#0
        let temp.1#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = array_item%0#0
        let temp.0#0: uint64 = item_index_internal%0#1
        let index#0: uint64 = temp.0#0
        let v#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = temp.1#0
        let x#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = v#0
        let tmp%3#0: uint64 = (+ index#0 10u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 x#0 32u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = aggregate%updated_data%0#0
        let x#1: Encoded(uint8[32],uint64,uint64,uint64,uint64) = updated_tuple%0#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "large")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%write_offset%0#0: uint64 = (* index#0 64u)
        let aggregate%updated_array%0#0: bytes = (replace3 storage_value%2#0 aggregate%write_offset%0#0 x#1) // on error: index access is out of bounds
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64,uint64,uint64)[200]) = aggregate%updated_array%0#0
        (box_put "large" updated_array%0#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "large")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let aggregate%bytes_offset%2#0: uint64 = (* index#0 64u)
        let aggregate%encoded_element%2#0: bytes = (extract3 storage_value%3#0 aggregate%bytes_offset%2#0 64u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = aggregate%encoded_element%2#0
        let aggregate%extract%1#0: bytes = (extract3 array_item%1#0 32u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%1#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%4#0: uint64 = (+ index#0 10u)
        let tmp%5#0: bool = (== values%0#0 tmp%4#0)
        (assert tmp%5#0)
        goto block@3
    block@3: // for_footer_L276
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L276
        return 

subroutine tests/approvals/box-proxies.algo.ts::LargeBox.__algots__.defaultCreate() -> void:
    block@0: // L268
        return 