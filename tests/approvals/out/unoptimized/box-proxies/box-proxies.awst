subroutine testBox(box: box_key, str: string): void
{
  value: readonlytuple[string, bytes] = <tuple>[str, "a"]
  Box[box].value: readonlytuple[string, bytes] = value
  Box["A"].value: readonlytuple[string, bytes] = value
  assert(reinterpret_cast<bytes>(box) == "one")
  assert("A" == "A")
  assert(Box[box].value.0 == Box["A"].value.0)
  assert(Box[box].value.1 == Box["A"].value.1)
  assert(STATE_EXISTS(Box[box].value) and STATE_EXISTS(Box["A"].value))
  assert(Boolean(checked_maybe(box_len(box), comment=Box must have value)))
  assert(STATE_DELETE(Box[box].value), comment=delete failed)
  isBoxADeleted: bool = STATE_DELETE(Box["A"].value)
  assert(isBoxADeleted, comment=delete failed)
  assert(!STATE_EXISTS(Box[box].value) and !STATE_EXISTS(Box["A"].value))
  defaultVal: readonlytuple[string, bytes] = <tuple>["O", "0"]
  assert(STATE_GET(Box["A"].value, default=defaultVal).0 == STATE_GET(Box[box].value, default=defaultVal).0)
  assert(STATE_GET(Box["A"].value, default=defaultVal).1 == STATE_GET(Box[box].value, default=defaultVal).1)
  <tuple>[_, e]: readonlytuple[readonlytuple[string, bytes], bool] = STATE_GET_EX(Box[box].value)
  assert(!e)
  Box[box].value: readonlytuple[string, bytes] = value
  <tuple>[_₁, e]: readonlytuple[readonlytuple[string, bytes], bool] = STATE_GET_EX(Box[box].value)
  assert(e)
}
subroutine testBoxMap(box: box_key, key: string, value: bytes): void
{
  Box[concat(box, reinterpret_cast<bytes>(key))].value: bytes = value
  Box[concat("", reinterpret_cast<bytes>(key))].value: bytes = value
  boxMapItem: box_key = concat("", reinterpret_cast<bytes>(key))
  assert(STATE_EXISTS(Box[boxMapItem].value))
  assert(reinterpret_cast<bytes>(box) == "two")
  assert("" == "")
  assert(Boolean(checked_maybe(box_len(concat(box, reinterpret_cast<bytes>(key))), comment=Box must have value)))
  assert(STATE_GET_EX(Box[concat(box, reinterpret_cast<bytes>(key))].value).1)
  assert(Box[concat(box, reinterpret_cast<bytes>(key))].value == Box[concat("", reinterpret_cast<bytes>(key))].value)
  isBoxDeleted: bool = STATE_DELETE(Box[concat(box, reinterpret_cast<bytes>(key))].value)
  assert(isBoxDeleted, comment=delete failed)
  assert(STATE_GET(Box[concat(box, reinterpret_cast<bytes>("" + key + "x"))].value, default="b") == STATE_GET(Box[concat("", reinterpret_cast<bytes>("" + key + "x"))].value, default="b"))
}
subroutine testBoxRef(box: box_key, length: uint64): void
{
  assert(reinterpret_cast<bytes>(box) == "three")
  assert("abc" == "abc")
  if (!STATE_EXISTS(Box["abc"].value)) {
    box_create("abc", 1000)
  } else {
    if (checked_maybe(box_len("abc"), comment=Box must have value) != length) {
      box_resize("abc", length)
    }
  }
  if (STATE_EXISTS(Box[box].value)) {
    box_resize(box, 4)
  } else {
    box_create(box, 4)
  }
  box_put(box, 0xffffffff)
  assert(STATE_GET(Box[box].value, default=0x) == 0xffffffff)
  maybeBox: readonlytuple[bytes, bool] = STATE_GET_EX(Box[box].value)
  assert(maybeBox.1)
  assert(Box[box].value == 0xffffffff)
  box_splice(box, 1, 1, 0x00)
  assert(Box[box].value == 0xff00ffff)
  x: bool = STATE_DELETE(Box[box].value)
  assert(x, comment=delete failed)
  assert(!STATE_EXISTS(Box[box].value))
}
contract BoxContract
{
  boxes {
    ["one"]: readonlytuple[string, bytes]
    ["two"]: string => bytes
    ["three"]: bytes
  }
  approvalProgram(): bool
  {
    if (reinterpret_cast<uint64>(txn<ApplicationID>()) != 0) {
      tests/approvals/box-proxies.algo.ts::testBox("one", "aaaaaargh")
      tests/approvals/box-proxies.algo.ts::testBoxMap("two", "what?", itob(256456))
      tests/approvals/box-proxies.algo.ts::testBoxRef("three", 99)
    }
    return True
  }
  
  clearProgram(): bool
  {
    return True
  }
  
}
contract BoxNotExist
{
  approvalProgram(): bool
  {
    if (reinterpret_cast<uint64>(txn<ApplicationID>()) != 0) {
      if ((#0 = reinterpret_cast<string>(txnas<ApplicationArgs>(0))) == "box") {
        #switch₁ᶜ₀:
        return Box["abc"].value
      }
      if (#0 == "boxmap") {
        #switch₁ᶜ₁:
        return Box[concat("a", "bc")].value
      }
      if (#0 == "createbox") {
        #switch₁ᶜ₂:
        Box["abc"].value: bool = True
        return True
      }
    }
    return True
  }
  
  clearProgram(): bool
  {
    return True
  }
  
}
contract BoxCreate
{
  boxes {
    ["bool"]: bool
    ["arc4b"]: arc4.bool
    ["a"]: string
    ["b"]: uint64
    ["c"]: arc4.static_array<arc4.uint32>
    ["d"]: arc4.dynamic_array<arc4.uint8>
    ["e"]: arc4.tuple<uint8,uint8,bool,bool>
  }
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  createBoxes(): void
  {
    box_create("a", 10)
    assert(checked_maybe(box_len("a"), comment=Box must have value) == 10)
    box_create("b", 8)
    assert(checked_maybe(box_len("b"), comment=Box must have value) == 8)
    box_create("c", 40)
    assert(checked_maybe(box_len("c"), comment=Box must have value) == 40)
    box_create("d", 2)
    assert(checked_maybe(box_len("d"), comment=Box must have value) == 2)
    box_create("e", 3)
    assert(checked_maybe(box_len("e"), comment=Box must have value) == 3)
    box_create("bool", 8)
    assert(checked_maybe(box_len("bool"), comment=Box must have value) == 8)
    box_create("arc4b", 1)
    assert(checked_maybe(box_len("arc4b"), comment=Box must have value) == 1)
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}
contract BoxMapTest
{
  boxes {
    [""]: account => string
  }
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}