#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/box-proxies.algo.ts:238
    // class BoxToRefTest extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@5
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/box-proxies.algo.ts:238
    // class BoxToRefTest extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    uncover 1
    match main_test_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // tests/approvals/box-proxies.algo.ts:238
    // class BoxToRefTest extends Contract {
    err

main_test_route@3:
    // tests/approvals/box-proxies.algo.ts:241
    // test() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub test
    b main_switch_case_next@4

main___algots__.defaultCreate@5:
    // tests/approvals/box-proxies.algo.ts:238
    // class BoxToRefTest extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/box-proxies.algo.ts::BoxToRefTest.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/box-proxies.algo.ts:241
    // test() {
    callsub tests/approvals/box-proxies.algo.ts::BoxToRefTest.test
    intc_1 // 1
    return


// tests/approvals/box-proxies.algo.ts::BoxToRefTest.test() -> void:
tests/approvals/box-proxies.algo.ts::BoxToRefTest.test:
    b tests/approvals/box-proxies.algo.ts::BoxToRefTest.test_block@0

tests/approvals/box-proxies.algo.ts::BoxToRefTest.test_block@0:
    // tests/approvals/box-proxies.algo.ts:242
    // const boxForCaller = this.boxMap(Txn.sender)
    txn Sender
    // tests/approvals/box-proxies.algo.ts:239
    // boxMap = BoxMap<Account, StaticArray<Uint8, 4>>({ keyPrefix: '' })
    pushbytes ""
    uncover 1
    concat
    // tests/approvals/box-proxies.algo.ts:244
    // boxForCaller.create()
    dup
    pushint 4 // 4
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:246
    // const boxRef = boxForCaller
    dup
    // tests/approvals/box-proxies.algo.ts:248
    // boxRef.replace(0, new Uint8(123).bytes)
    intc_0 // 0
    pushbytes 0x7b
    box_replace
    // tests/approvals/box-proxies.algo.ts:250
    // assert(boxForCaller.value[0].asUint64() === 123, 'First array item in box should be 123')
    box_get
    assert // Box must have value
    intc_0 // 0
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    btoi
    pushint 123 // 123
    ==
    assert // First array item in box should be 123
    retsub


// tests/approvals/box-proxies.algo.ts::BoxToRefTest.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
