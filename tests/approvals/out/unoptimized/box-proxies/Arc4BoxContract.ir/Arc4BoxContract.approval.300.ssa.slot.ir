main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.constructor()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L340
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@24
    block@4: // abi_routing_L340
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@5 : block@22
    block@5: // call_NoOp_L340
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "setBoxes(uint64,byte[],string)void" => block@6, method "checkKeys()void" => block@7, method "createManyInts()void" => block@8, method "setManyInts(uint64,uint64)void" => block@9, method "sumManyInts()uint64" => block@10, method "deleteBoxes()void" => block@11, method "indirectExtractAndReplace()void" => block@12, method "readBoxes()(uint64,byte[],string,uint64)" => block@13, method "boxesExist()(bool,bool,bool,bool)" => block@14, method "sliceBox()void" => block@15, method "arc4Box()void" => block@16, method "testBoxRef()void" => block@17, method "createBools()void" => block@18, method "setBool(uint64,bool)void" => block@19, method "sumBools(uint64)uint64" => block@20, * => block@21}
    block@6: // setBoxes_route_L359
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes[routing]()
        goto block@21
    block@7: // checkKeys_route_L394
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys[routing]()
        goto block@21
    block@8: // createManyInts_route_L401
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts[routing]()
        goto block@21
    block@9: // setManyInts_route_L405
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts[routing]()
        goto block@21
    block@10: // sumManyInts_route_L409
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts[routing]()
        goto block@21
    block@11: // deleteBoxes_route_L418
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes[routing]()
        goto block@21
    block@12: // indirectExtractAndReplace_route_L431
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace[routing]()
        goto block@21
    block@13: // readBoxes_route_L437
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes[routing]()
        goto block@21
    block@14: // boxesExist_route_L441
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist[routing]()
        goto block@21
    block@15: // sliceBox_route_L445
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox[routing]()
        goto block@21
    block@16: // arc4Box_route_L454
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box[routing]()
        goto block@21
    block@17: // testBoxRef_route_L463
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef[routing]()
        goto block@21
    block@18: // createBools_route_L502
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools[routing]()
        goto block@21
    block@19: // setBool_route_L506
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool[routing]()
        goto block@21
    block@20: // sumBools_route_L510
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools[routing]()
        goto block@21
    block@21: // switch_case_next_L340
        goto block@23
    block@22: // create_NoOp_L340
        goto block@23
    block@23: // after_if_else_L340
        goto block@25
    block@24: // __algots__.defaultCreate_L340
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.__algots__.defaultCreate()
        exit 1u
    block@25: // after_if_else_L340
        exit 0u
    block@26: // after_inlined_tests/approvals/box-proxies.algo.ts::Arc4BoxContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine tests/approvals/box-proxies.algo.ts::getBoxValuePlus1(box: bytes) -> uint64:
    block@0: // L525
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box#0)
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#0)
        let tmp%0#0: uint64 = (+ maybe_value_converted%0#0 1u)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::getBoxRefLength(ref: bytes) -> uint64:
    block@0: // L529
        let (value%0#0: uint64, check%0#0: bool) = (box_len ref#0)
        (assert check%0#0) // Box must have value
        return value%0#0

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes[routing]() -> void:
    block@0: // L359
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%4#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%1#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%4#0
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes(tmp%1#0, tmp%3#0, as_Encoded(len+utf8[])%0#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys[routing]() -> void:
    block@0: // L394
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts[routing]() -> void:
    block@0: // L401
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts[routing]() -> void:
    block@0: // L405
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint64)%1#0)
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts(tmp%1#0, tmp%3#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts[routing]() -> void:
    block@0: // L409
        let tmp%0#0: uint64 = tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes[routing]() -> void:
    block@0: // L418
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace[routing]() -> void:
    block@0: // L431
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes[routing]() -> void:
    block@0: // L437
        let (tmp%0#0: uint64, tmp%1#0: bytes, tmp%2#0: Encoded(len+utf8[]), tmp%3#0: uint64) = tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 20u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 20u aggregate%data_length%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%2#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64)%0#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = aggregate%concat%1#0
        let tmp%4#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist[routing]() -> void:
    block@0: // L441
        let (tmp%0#0: bool, tmp%1#0: bool, tmp%2#0: bool, tmp%3#0: bool) = tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist()
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%0#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%1#0)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u tmp%2#0)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u tmp%3#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%set_bit%2#0)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%head%0#0
        let tmp%4#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox[routing]() -> void:
    block@0: // L445
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box[routing]() -> void:
    block@0: // L454
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef[routing]() -> void:
    block@0: // L463
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools[routing]() -> void:
    block@0: // L502
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool[routing]() -> void:
    block@0: // L506
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.bool
        let as_Encoded(bool8)%0#0: Encoded(bool8) = tmp%2#0
        let aggregate%get_bit%0#0: bool = (getbit as_Encoded(bool8)%0#0 0u)
        let tmp%3#0: bool = aggregate%get_bit%0#0
        tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool(tmp%1#0, tmp%3#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools[routing]() -> void:
    block@0: // L510
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: uint64 = tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools(tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBoxes(a: uint64, b: bytes, c: Encoded(len+utf8[])) -> void:
    block@0: // L359
        let aggregate%length%0#0: uint64 = (len b#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let dynamicBytes#0: Encoded(len+uint8[]) = tmp%0#0
        let encoded_value%0#0: bytes[8] = (itob a#0)
        (box_put "boxA" encoded_value%0#0)
        (box_del "b")
        (box_put "b" dynamicBytes#0)
        (box_del "BOX_C")
        (box_put "BOX_C" c#0)
        let tmp%1#0: bytes = ((extract 2 0) dynamicBytes#0)
        (box_del "boxD")
        (box_put "boxD" tmp%1#0)
        (box_create "boxLarge" 6160u)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "boxLarge")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%0#0 4096u encoded_value%1#0)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = aggregate%updated_data%0#0
        (box_put "boxLarge" updated_tuple%0#0)
        let tmp%2#0: uint64 = (* 1024u 4u)
        (box_replace "boxLarge" tmp%2#0 0x000000000000002a)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "b")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let bValue#0: Encoded(len+uint8[]) = storage_value%1#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "b")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 storage_value%2#0 0u) // on error: invalid array length header
        let tmp%3#0: uint64 = aggregate%array_length%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 bValue#0 0u) // on error: invalid array length header
        let tmp%4#0: uint64 = aggregate%array_length%1#0
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // direct reference should match copy
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "boxA")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%3#0)
        let tmp%6#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%6#0)
        (box_put "boxA" encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "boxA")
        (assert check%0#0) // Box must have value
        let tmp%7#0: bool = (== value%0#0 8u)
        (assert tmp%7#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        (assert check%1#0) // Box must have value
        let tmp%8#0: uint64 = (len dynamicBytes#0)
        let tmp%9#0: bool = (== value%1#0 tmp%8#0)
        (assert tmp%9#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len "BOX_C")
        (assert check%2#0) // Box must have value
        let tmp%10#0: uint64 = (len c#0)
        let tmp%11#0: bool = (== value%2#0 tmp%10#0)
        (assert tmp%11#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "boxD")
        (assert check%3#0) // Box must have value
        let tmp%12#0: bytes = ((extract 2 0) dynamicBytes#0)
        let tmp%13#0: uint64 = (len tmp%12#0)
        let tmp%14#0: bool = (== value%3#0 tmp%13#0)
        (assert tmp%14#0)
        let (aggregate%box_get%8#0: bytes, aggregate%box_get%9#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%9#0) // Box must have value
        let storage_value%4#0: bytes = aggregate%box_get%8#0
        let extract%0#0: bytes = (extract3 storage_value%4#0 0u 1u)
        let extract%1#0: bytes = (extract3 c#0 0u 1u)
        let tmp%15#0: bool = (== extract%0#0 extract%1#0)
        (assert tmp%15#0)
        let (aggregate%box_get%10#0: bytes, aggregate%box_get%11#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%11#0) // Box must have value
        let storage_value%5#0: bytes = aggregate%box_get%10#0
        let (aggregate%box_get%12#0: bytes, aggregate%box_get%13#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%13#0) // Box must have value
        let storage_value%6#0: bytes = aggregate%box_get%12#0
        let tmp%16#0: uint64 = (len storage_value%6#0)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let extract%2#0: bytes = (extract3 storage_value%5#0 tmp%17#0 1u)
        let tmp%18#0: uint64 = (len c#0)
        let tmp%19#0: uint64 = (- tmp%18#0 1u)
        let extract%3#0: bytes = (extract3 c#0 tmp%19#0 1u)
        let tmp%20#0: bool = (== extract%2#0 extract%3#0)
        (assert tmp%20#0)
        let (aggregate%box_get%14#0: bytes, aggregate%box_get%15#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%15#0) // Box must have value
        let storage_value%7#0: bytes = aggregate%box_get%14#0
        let length%0#0: uint64 = (len storage_value%7#0)
        let is_out_of_bounds%0#0: bool = (>= 0u length%0#0)
        let bounded_index%0#0: uint64 = (select 0u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 1u length%0#0)
        let bounded_offset%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%1#0)
        let bounded_index%1#0: uint64 = (- length%0#0 bounded_offset%0#0)
        let end_before_start%0#0: bool = (< bounded_index%1#0 bounded_index%0#0)
        let end%0#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0)
        let tmp%21#0: bytes = (substring3 storage_value%7#0 bounded_index%0#0 end%0#0)
        let length%1#0: uint64 = (len c#0)
        let is_out_of_bounds%2#0: bool = (>= 0u length%1#0)
        let bounded_index%2#0: uint64 = (select 0u length%1#0 is_out_of_bounds%2#0)
        let is_out_of_bounds%3#0: bool = (>= 1u length%1#0)
        let bounded_offset%1#0: uint64 = (select 1u length%1#0 is_out_of_bounds%3#0)
        let bounded_index%3#0: uint64 = (- length%1#0 bounded_offset%1#0)
        let end_before_start%1#0: bool = (< bounded_index%3#0 bounded_index%2#0)
        let end%1#0: uint64 = (select bounded_index%3#0 bounded_index%2#0 end_before_start%1#0)
        let tmp%22#0: bytes = (substring3 c#0 bounded_index%2#0 end%1#0)
        let tmp%23#0: bool = (== tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        let (aggregate%box_get%16#0: bytes, aggregate%box_get%17#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%17#0) // Box must have value
        let storage_value%8#0: bytes = aggregate%box_get%16#0
        let length%2#0: uint64 = (len storage_value%8#0)
        let is_out_of_bounds%4#0: bool = (>= 0u length%2#0)
        let bounded_index%4#0: uint64 = (select 0u length%2#0 is_out_of_bounds%4#0)
        let is_out_of_bounds%5#0: bool = (>= 2u length%2#0)
        let bounded_index%5#0: uint64 = (select 2u length%2#0 is_out_of_bounds%5#0)
        let tmp%24#0: bytes = (substring3 storage_value%8#0 bounded_index%4#0 bounded_index%5#0)
        let length%3#0: uint64 = (len c#0)
        let is_out_of_bounds%6#0: bool = (>= 0u length%3#0)
        let bounded_index%6#0: uint64 = (select 0u length%3#0 is_out_of_bounds%6#0)
        let is_out_of_bounds%7#0: bool = (>= 2u length%3#0)
        let bounded_index%7#0: uint64 = (select 2u length%3#0 is_out_of_bounds%7#0)
        let tmp%25#0: bytes = (substring3 c#0 bounded_index%6#0 bounded_index%7#0)
        let tmp%26#0: bool = (== tmp%24#0 tmp%25#0)
        (assert tmp%26#0)
        let (aggregate%box_get%18#0: bytes, aggregate%box_get%19#0: bool) = (box_get "boxD")
        (assert aggregate%box_get%19#0) // Box must have value
        let storage_value%9#0: bytes = aggregate%box_get%18#0
        let extract%4#0: bytes = (extract3 storage_value%9#0 0u 1u)
        let tmp%27#0: bytes = ((extract 2 0) dynamicBytes#0)
        let extract%5#0: bytes = (extract3 tmp%27#0 0u 1u)
        let tmp%28#0: bool = (== extract%4#0 extract%5#0)
        (assert tmp%28#0)
        let (aggregate%box_get%20#0: bytes, aggregate%box_get%21#0: bool) = (box_get "boxD")
        (assert aggregate%box_get%21#0) // Box must have value
        let storage_value%10#0: bytes = aggregate%box_get%20#0
        let (aggregate%box_get%22#0: bytes, aggregate%box_get%23#0: bool) = (box_get "boxD")
        (assert aggregate%box_get%23#0) // Box must have value
        let storage_value%11#0: bytes = aggregate%box_get%22#0
        let tmp%29#0: uint64 = (len storage_value%11#0)
        let tmp%30#0: uint64 = (- tmp%29#0 1u)
        let extract%6#0: bytes = (extract3 storage_value%10#0 tmp%30#0 1u)
        let tmp%31#0: bytes = ((extract 2 0) dynamicBytes#0)
        let tmp%32#0: bytes = ((extract 2 0) dynamicBytes#0)
        let tmp%33#0: uint64 = (len tmp%32#0)
        let tmp%34#0: uint64 = (- tmp%33#0 1u)
        let extract%7#0: bytes = (extract3 tmp%31#0 tmp%34#0 1u)
        let tmp%35#0: bool = (== extract%6#0 extract%7#0)
        (assert tmp%35#0)
        let (aggregate%box_get%24#0: bytes, aggregate%box_get%25#0: bool) = (box_get "boxD")
        (assert aggregate%box_get%25#0) // Box must have value
        let storage_value%12#0: bytes = aggregate%box_get%24#0
        let length%4#0: uint64 = (len storage_value%12#0)
        let is_out_of_bounds%8#0: bool = (>= 0u length%4#0)
        let bounded_index%8#0: uint64 = (select 0u length%4#0 is_out_of_bounds%8#0)
        let is_out_of_bounds%9#0: bool = (>= 1u length%4#0)
        let bounded_offset%2#0: uint64 = (select 1u length%4#0 is_out_of_bounds%9#0)
        let bounded_index%9#0: uint64 = (- length%4#0 bounded_offset%2#0)
        let end_before_start%2#0: bool = (< bounded_index%9#0 bounded_index%8#0)
        let end%2#0: uint64 = (select bounded_index%9#0 bounded_index%8#0 end_before_start%2#0)
        let tmp%36#0: bytes = (substring3 storage_value%12#0 bounded_index%8#0 end%2#0)
        let tmp%37#0: bytes = ((extract 2 0) dynamicBytes#0)
        let length%5#0: uint64 = (len tmp%37#0)
        let is_out_of_bounds%10#0: bool = (>= 0u length%5#0)
        let bounded_index%10#0: uint64 = (select 0u length%5#0 is_out_of_bounds%10#0)
        let is_out_of_bounds%11#0: bool = (>= 1u length%5#0)
        let bounded_offset%3#0: uint64 = (select 1u length%5#0 is_out_of_bounds%11#0)
        let bounded_index%11#0: uint64 = (- length%5#0 bounded_offset%3#0)
        let end_before_start%3#0: bool = (< bounded_index%11#0 bounded_index%10#0)
        let end%3#0: uint64 = (select bounded_index%11#0 bounded_index%10#0 end_before_start%3#0)
        let tmp%38#0: bytes = (substring3 tmp%37#0 bounded_index%10#0 end%3#0)
        let tmp%39#0: bool = (== tmp%36#0 tmp%38#0)
        (assert tmp%39#0)
        let (aggregate%box_get%26#0: bytes, aggregate%box_get%27#0: bool) = (box_get "boxD")
        (assert aggregate%box_get%27#0) // Box must have value
        let storage_value%13#0: bytes = aggregate%box_get%26#0
        let length%6#0: uint64 = (len storage_value%13#0)
        let is_out_of_bounds%12#0: bool = (>= 0u length%6#0)
        let bounded_index%12#0: uint64 = (select 0u length%6#0 is_out_of_bounds%12#0)
        let is_out_of_bounds%13#0: bool = (>= 5u length%6#0)
        let bounded_index%13#0: uint64 = (select 5u length%6#0 is_out_of_bounds%13#0)
        let tmp%40#0: bytes = (substring3 storage_value%13#0 bounded_index%12#0 bounded_index%13#0)
        let tmp%41#0: bytes = ((extract 2 0) dynamicBytes#0)
        let length%7#0: uint64 = (len tmp%41#0)
        let is_out_of_bounds%14#0: bool = (>= 0u length%7#0)
        let bounded_index%14#0: uint64 = (select 0u length%7#0 is_out_of_bounds%14#0)
        let is_out_of_bounds%15#0: bool = (>= 5u length%7#0)
        let bounded_index%15#0: uint64 = (select 5u length%7#0 is_out_of_bounds%15#0)
        let tmp%42#0: bytes = (substring3 tmp%41#0 bounded_index%14#0 bounded_index%15#0)
        let tmp%43#0: bool = (== tmp%40#0 tmp%42#0)
        (assert tmp%43#0)
        let (aggregate%box_get%28#0: bytes, aggregate%box_get%29#0: bool) = (box_get "boxD")
        (assert aggregate%box_get%29#0) // Box must have value
        let storage_value%14#0: bytes = aggregate%box_get%28#0
        let length%8#0: uint64 = (len storage_value%14#0)
        let is_out_of_bounds%16#0: bool = (>= 0u length%8#0)
        let bounded_index%16#0: uint64 = (select 0u length%8#0 is_out_of_bounds%16#0)
        let is_out_of_bounds%17#0: bool = (>= 2u length%8#0)
        let bounded_index%17#0: uint64 = (select 2u length%8#0 is_out_of_bounds%17#0)
        let tmp%44#0: bytes = (substring3 storage_value%14#0 bounded_index%16#0 bounded_index%17#0)
        let tmp%45#0: bytes = ((extract 2 0) dynamicBytes#0)
        let length%9#0: uint64 = (len tmp%45#0)
        let is_out_of_bounds%18#0: bool = (>= 0u length%9#0)
        let bounded_index%18#0: uint64 = (select 0u length%9#0 is_out_of_bounds%18#0)
        let is_out_of_bounds%19#0: bool = (>= 2u length%9#0)
        let bounded_index%19#0: uint64 = (select 2u length%9#0 is_out_of_bounds%19#0)
        let tmp%46#0: bytes = (substring3 tmp%45#0 bounded_index%18#0 bounded_index%19#0)
        let tmp%47#0: bool = (== tmp%44#0 tmp%46#0)
        (assert tmp%47#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "boxLarge")
        (assert check%4#0) // Box must have value
        let tmp%48#0: bool = (== value%4#0 6160u)
        (assert tmp%48#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.checkKeys() -> void:
    block@0: // L394
        let tmp%0#0: bool = (== "boxA" "boxA")
        (assert tmp%0#0) // box a key ok
        let tmp%1#0: bool = (== "b" "b")
        (assert tmp%1#0) // box b key ok
        let tmp%2#0: bool = (== "BOX_C" "BOX_C")
        (assert tmp%2#0) // box c key ok
        let tmp%3#0: bool = (== "boxLarge" "boxLarge")
        (assert tmp%3#0) // box large key ok
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createManyInts() -> void:
    block@0: // L401
        (box_create "manyInts" 4104u)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setManyInts(index: uint64, value: uint64) -> void:
    block@0: // L405
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "manyInts")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%write_offset%0#0: uint64 = (* index#0 8u)
        let aggregate%updated_array%0#0: bytes = (replace3 storage_value%0#0 aggregate%write_offset%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded(uint64[513]) = aggregate%updated_array%0#0
        (box_put "manyInts" updated_array%0#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumManyInts() -> uint64:
    block@0: // L409
        _puya_lib.util.ensure_budget(10500u, 0u)
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "manyInts")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L412
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 513u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L412
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let temp#0: uint64 = values%0#0
        let val#0: uint64 = temp#0
        let tmp%0#0: uint64 = (+ total#1 val#0)
        let total#2: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L412
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L412
        return total#1

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.deleteBoxes() -> void:
    block@0: // L418
        (box_del "boxA")
        (box_del "b")
        (box_del "BOX_C")
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "boxA")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select 0x00023432 maybe_value%1#0 maybe_exists%1#0)
        let tmp%1#0: bytes = ((extract 2 0) state_get%1#0)
        let tmp%2#0: bool = (== tmp%1#0 "42")
        (assert tmp%2#0)
        let aggregate%length%0#0: uint64 = (len "42")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "42")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "BOX_C")
        let state_get%2#0: bytes = (select tmp%3#0 maybe_value%2#0 maybe_exists%2#0)
        let tmp%4#0: string = ((extract 2 0) state_get%2#0)
        let tmp%5#0: bool = (== tmp%4#0 "42")
        (assert tmp%5#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "boxA")
        let maybe_value_converted%1#0: uint64 = (btoi maybe_value%3#0)
        let a#0: uint64 = maybe_value_converted%1#0
        let aExists#0: bool = maybe_exists%3#0
        let tmp%6#0: bool = (! aExists#0)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== a#0 0u)
        (assert tmp%7#0)
        (box_del "boxLarge")
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.indirectExtractAndReplace() -> void:
    block@0: // L431
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "boxLarge")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let large#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 large#0 4096u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 large#0 4096u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = aggregate%updated_data%0#0
        let large#1: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = updated_tuple%0#0
        (box_put "boxLarge" large#1)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.readBoxes() -> <uint64, bytes, Encoded(len+utf8[]), uint64>:
    block@0: // L437
        let tmp%0#0: uint64 = tests/approvals/box-proxies.algo.ts::getBoxValuePlus1("boxA")
        let tmp%1#0: uint64 = (- tmp%0#0 1u)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "b")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let tmp%2#0: bytes = ((extract 2 0) storage_value%0#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "boxLarge")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%2#0 4096u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        return tmp%1#0 tmp%2#0 storage_value%1#0 values%0#0

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.boxesExist() -> <bool, bool, bool, bool>:
    block@0: // L441
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "boxA")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "BOX_C")
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "boxLarge")
        return maybe_exists%0#0 maybe_exists%1#0 maybe_exists%2#0 maybe_exists%3#0

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sliceBox() -> void:
    block@0: // L445
        (box_del "0")
        (box_put "0" "Testing testing 123")
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "0")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let length%0#0: uint64 = (len storage_value%0#0)
        let is_out_of_bounds%0#0: bool = (>= 0u length%0#0)
        let bounded_index%0#0: uint64 = (select 0u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 7u length%0#0)
        let bounded_index%1#0: uint64 = (select 7u length%0#0 is_out_of_bounds%1#0)
        let tmp%0#0: bytes = (substring3 storage_value%0#0 bounded_index%0#0 bounded_index%1#0)
        let tmp%1#0: bool = (== tmp%0#0 "Testing")
        (assert tmp%1#0)
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        (box_del "BOX_C")
        (box_put "BOX_C" tmp%2#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let length%1#0: uint64 = (len storage_value%1#0)
        let is_out_of_bounds%2#0: bool = (>= 2u length%1#0)
        let bounded_index%2#0: uint64 = (select 2u length%1#0 is_out_of_bounds%2#0)
        let is_out_of_bounds%3#0: bool = (>= 10u length%1#0)
        let bounded_index%3#0: uint64 = (select 10u length%1#0 is_out_of_bounds%3#0)
        let tmp%3#0: bytes = (substring3 storage_value%1#0 bounded_index%2#0 bounded_index%3#0)
        let tmp%4#0: bool = (== tmp%3#0 "Hello")
        (assert tmp%4#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.arc4Box() -> void:
    block@0: // L454
        let aggregate%head%0#0: bytes = (concat 0x 0x00)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x01)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x02)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x03)
        let aggregate%as_Encoded(uint8[4])%0#0: Encoded(uint8[4]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#0
        (box_put "d" encoded_array%0#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "d")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%0#0 aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#0
        let tmp%0#0: uint64 = (btoi array_item%0#0)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "d")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 1u)
        let aggregate%encoded_element%1#0: bytes = (extract3 storage_value%1#0 aggregate%bytes_offset%1#0 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%1#0
        let tmp%2#0: uint64 = (btoi array_item%1#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "d")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 1u)
        let aggregate%encoded_element%2#0: bytes = (extract3 storage_value%2#0 aggregate%bytes_offset%2#0 1u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8) = aggregate%encoded_element%2#0
        let tmp%4#0: uint64 = (btoi array_item%2#0)
        let tmp%5#0: bool = (== tmp%4#0 2u)
        (assert tmp%5#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "d")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 1u)
        let aggregate%encoded_element%3#0: bytes = (extract3 storage_value%3#0 aggregate%bytes_offset%3#0 1u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint8) = aggregate%encoded_element%3#0
        let tmp%6#0: uint64 = (btoi array_item%3#0)
        let tmp%7#0: bool = (== tmp%6#0 3u)
        (assert tmp%7#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.testBoxRef() -> void:
    block@0: // L463
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "blob")
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0) // no data
        let tmp%2#0: bool = (box_create "blob" 32u)
        (assert tmp%2#0)
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "blob")
        (assert maybe_exists%2#0) // has data
        let reinterpret_bytes[32]%0#0: bytes[32] = (txn Sender)
        let senderBytes#0: bytes[32] = reinterpret_bytes[32]%0#0
        let reinterpret_bytes[32]%1#0: bytes[32] = (global CurrentApplicationAddress)
        let appAddress#0: bytes[32] = reinterpret_bytes[32]%1#0
        (box_replace "blob" 0u senderBytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u appAddress#0)
        (box_replace "blob" 64u "hello")
        let tmp%3#0: uint64 = (len "hello")
        let tmp%4#0: uint64 = (+ 64u tmp%3#0)
        let tmp%5#0: bytes = (box_extract "blob" 0u tmp%4#0)
        let prefix#0: bytes = tmp%5#0
        let tmp%6#0: bytes = (concat appAddress#0 senderBytes#0)
        let tmp%7#0: bytes = (concat tmp%6#0 "hello")
        let tmp%8#0: bool = (== prefix#0 tmp%7#0)
        (assert tmp%8#0)
        (box_del "blob")
        let tmp%9#0: bool = (== "blob" "blob")
        (assert tmp%9#0)
        let (maybe_value%0#0: bytes, maybe_exists%3#0: bool) = (box_get "blob")
        let value#0: bytes = maybe_value%0#0
        let exists#0: bool = maybe_exists%3#0
        let tmp%10#0: bool = (! exists#0)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== value#0 "")
        (assert tmp%11#0)
        let (maybe_value%1#0: bytes, maybe_exists%4#0: bool) = (box_get "blob")
        let state_get%0#0: bytes = (select senderBytes#0 maybe_value%1#0 maybe_exists%4#0)
        let tmp%12#0: bool = (== state_get%0#0 senderBytes#0)
        (assert tmp%12#0)
        let tmp%13#0: bytes = (concat senderBytes#0 appAddress#0)
        (box_del "blob")
        (box_put "blob" tmp%13#0)
        let (_%3#0: uint64, maybe_exists%5#0: bool) = (box_len "blob")
        (assert maybe_exists%5#0) // Blob exists
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        (assert check%0#0) // Box must have value
        let tmp%14#0: bool = (== value%0#0 64u)
        (assert tmp%14#0)
        let tmp%15#0: uint64 = tests/approvals/box-proxies.algo.ts::getBoxRefLength("blob")
        let tmp%16#0: bool = (== tmp%15#0 64u)
        (assert tmp%16#0)
        (box_create "boxRef" 32u)
        let (_%4#0: uint64, maybe_exists%6#0: bool) = (box_len "boxRef")
        (assert maybe_exists%6#0) // has data
        (box_del "boxRef")
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.createBools() -> void:
    block@0: // L502
        (box_create "tooManyBools" 4125u)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.setBool(index: uint64, value: bool) -> void:
    block@0: // L506
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tooManyBools")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%as_Encoded(bool1)%0#0: Encoded(bool1) = value#0
        let encoded_value%0#0: Encoded(bool1) = aggregate%as_Encoded(bool1)%0#0
        let aggregate%lt%0#0: bool = (< index#0 33000u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%lt%1#0: bool = (< index#0 33000u)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%updated_target%0#0: bytes = (setbit storage_value%0#0 index#0 encoded_value%0#0)
        let updated_array%0#0: Encoded(bool1[33000]) = aggregate%updated_target%0#0
        (box_put "tooManyBools" updated_array%0#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.sumBools(stopAtTotal: uint64) -> uint64:
    block@0: // L510
        _puya_lib.util.ensure_budget(13000u, 0u)
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tooManyBools")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L513
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@7)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@7)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 33000u)
        goto continue_looping%0#0 ? block@2 : block@8
    block@2: // for_body_L513
        let aggregate%get_bit%0#0: bool = (getbit storage_value%0#0 item_index_internal%0#1)
        let array_item%0#0: bool = aggregate%get_bit%0#0
        let values%0#0: bool = array_item%0#0
        let temp#0: bool = values%0#0
        let value#0: bool = temp#0
        goto value#0 ? block@3 : block@4
    block@3: // if_body_L514
        let tmp%0#0: uint64 = (+ total#1 1u)
        let total#2: uint64 = tmp%0#0
        goto block@4
    block@4: // after_if_else_L514
        let total#3: uint64 = φ(total#1 <- block@2, total#2 <- block@3)
        let tmp%1#0: bool = (== total#3 stopAtTotal#0)
        goto tmp%1#0 ? block@5 : block@6
    block@5: // if_body_L517
        goto block@9
    block@6: // after_if_else_L517
        goto block@7
    block@7: // for_footer_L513
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@8: // after_for_L513
        goto block@9
    block@9: // L513
        let total#4: uint64 = φ(total#3 <- block@5, total#1 <- block@8)
        return total#4

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.__algots__.defaultCreate() -> void:
    block@0: // L340
        return 

subroutine tests/approvals/box-proxies.algo.ts::Arc4BoxContract.constructor() -> void:
    block@0: // L354
        goto block@1
    block@1: // L1
        goto block@2
    block@2: // after_inlined_@algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor_L354
        let tmp%0#0: bool = (> 4104u 4096u)
        (assert tmp%0#0) // expected ManyInts to exceed max bytes size
        return 