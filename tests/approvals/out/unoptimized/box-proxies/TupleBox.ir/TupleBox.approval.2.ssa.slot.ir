main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L158
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L158
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testBox()void" => block@3, method "testBoxMap()void" => block@4, * => block@5}
    block@3: // testBox_route_L164
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::TupleBox.testBox()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testBoxMap_route_L190
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L158
        goto block@6
    block@6: // switch_case_next_L158
        goto block@11
    block@7: // bare_routing_L158
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L158
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        tests/approvals/box-proxies.algo.ts::TupleBox.__algots__.defaultCreate()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L158
        goto block@10
    block@10: // switch_case_next_L158
        goto block@11
    block@11: // after_if_else_L158
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1 <- block@4, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2 <- block@8, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBox() -> void:
    block@0: // L164
        (box_create "t1" 10u)
        (box_create "t2" 20u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "t1")
        (assert check%0#0) // Box must have value
        let tmp%0#0: bool = (== value%0#0 10u)
        (assert tmp%0#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "t2")
        (assert check%1#0) // Box must have value
        let tmp%1#0: bool = (== value%1#0 20u)
        (assert tmp%1#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "t1")
        (assert maybe_exists%0#0)
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "t2")
        (assert maybe_exists%1#0)
        (box_del "t1")
        let length%0#0: uint64 = (len "hello")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "hello")
        let length%1#0: uint64 = (len "world")
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "world")
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_bytes%2#0: bytes[8] = (itob 5u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 5u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_bool%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%1#0)
        (box_put "t1" encoded_tuple_buffer%5#0)
        let (maybe_value%0#0: bytes, maybe_exists%2#0: bool) = (box_get "t1")
        (assert maybe_exists%2#0) // Box must have value
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 2 0) item0%0#0)
        let tmp%2#0: bool = (== item0%1#0 "hello")
        (assert tmp%2#0)
        let (maybe_value%1#0: bytes, maybe_exists%3#0: bool) = (box_get "t1")
        (assert maybe_exists%3#0) // Box must have value
        let item_start_offset%3#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let item_end_offset%3#0: uint64 = (len maybe_value%1#0)
        let item1%2#0: bytes = (substring3 maybe_value%1#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%3#0: bool = (== item1%3#0 "world")
        (assert tmp%3#0)
        let (maybe_value%2#0: bytes, maybe_exists%4#0: bool) = (box_get "t1")
        (assert maybe_exists%4#0) // Box must have value
        let is_true%2#0: uint64 = (getbit maybe_value%2#0 32u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let item2%2#0: bool = (getbit encoded_bool%3#0 0u)
        (assert item2%2#0)
        (box_del "t2")
        let length%2#0: uint64 = (len "hello")
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 "hello")
        let length%3#0: uint64 = (len "world")
        let as_bytes%5#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 "world")
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_bytes%6#0: bytes[8] = (itob 5u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%7#0: bytes = (concat 0x offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%4#0: uint64 = (+ 5u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 offset_as_uint16%3#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 encoded_bool%4#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_value%2#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 encoded_value%3#0)
        (box_put "t2" encoded_tuple_buffer%11#0)
        let (maybe_value%3#0: bytes, maybe_exists%5#0: bool) = (box_get "t2")
        (assert maybe_exists%5#0) // Box must have value
        let item_start_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item0%6#0: bytes = (substring3 maybe_value%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let item0%7#0: bytes = ((extract 2 0) item0%6#0)
        let tmp%4#0: bool = (== item0%7#0 "hello")
        (assert tmp%4#0)
        let (maybe_value%4#0: bytes, maybe_exists%6#0: bool) = (box_get "t2")
        (assert maybe_exists%6#0) // Box must have value
        let item_start_offset%9#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item_end_offset%9#0: uint64 = (len maybe_value%4#0)
        let item1%8#0: bytes = (substring3 maybe_value%4#0 item_start_offset%9#0 item_end_offset%9#0)
        let item1%9#0: bytes = ((extract 2 0) item1%8#0)
        let tmp%5#0: bool = (== item1%9#0 "world")
        (assert tmp%5#0)
        let (maybe_value%5#0: bytes, maybe_exists%7#0: bool) = (box_get "t2")
        (assert maybe_exists%7#0) // Box must have value
        let is_true%5#0: uint64 = (getbit maybe_value%5#0 32u)
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u is_true%5#0)
        let item2%5#0: bool = (getbit encoded_bool%7#0 0u)
        (assert item2%5#0)
        (box_del "t1")
        let (_%2#0: uint64, maybe_exists%8#0: bool) = (box_len "t1")
        let tmp%6#0: bool = (! maybe_exists%8#0)
        (assert tmp%6#0)
        (box_del "t2")
        let (_%3#0: uint64, maybe_exists%9#0: bool) = (box_len "t2")
        let tmp%7#0: bool = (! maybe_exists%9#0)
        (assert tmp%7#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap() -> void:
    block@0: // L190
        let tmp%0#0: bytes = (concat "tm1" "a")
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len tmp%0#0)
        let tmp%1#0: bool = (! maybe_exists%0#0)
        (assert tmp%1#0)
        let tmp%2#0: bytes = (concat "tm2" "a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len tmp%2#0)
        let tmp%3#0: bool = (! maybe_exists%1#0)
        (assert tmp%3#0)
        let tmp%4#0: bytes = (concat "tm1" "a")
        (box_del tmp%4#0)
        let length%0#0: uint64 = (len "hello")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "hello")
        let length%1#0: uint64 = (len "world")
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "world")
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_bytes%2#0: bytes[8] = (itob 5u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 5u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_bool%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%1#0)
        (box_put tmp%4#0 encoded_tuple_buffer%5#0)
        let tmp%5#0: bytes = (concat "tm2" "a")
        (box_del tmp%5#0)
        let length%2#0: uint64 = (len "hello")
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 "hello")
        let length%3#0: uint64 = (len "world")
        let as_bytes%5#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 "world")
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 1u)
        let as_bytes%6#0: bytes[8] = (itob 5u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%7#0: bytes = (concat 0x offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%4#0: uint64 = (+ 5u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 offset_as_uint16%3#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 encoded_bool%1#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_value%2#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 encoded_value%3#0)
        (box_put tmp%5#0 encoded_tuple_buffer%11#0)
        let tmp%6#0: bytes = (concat "tm1" "a")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len tmp%6#0)
        (assert maybe_exists%2#0)
        let tmp%7#0: bytes = (concat "tm1" "a")
        let (maybe_value%0#0: bytes, maybe_exists%3#0: bool) = (box_get tmp%7#0)
        (assert maybe_exists%3#0) // Box must have value
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 2 0) item0%0#0)
        let tmp%8#0: bool = (== item0%1#0 "hello")
        (assert tmp%8#0)
        let tmp%9#0: bytes = (concat "tm1" "a")
        let (maybe_value%1#0: bytes, maybe_exists%4#0: bool) = (box_get tmp%9#0)
        (assert maybe_exists%4#0) // Box must have value
        let item_start_offset%3#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let item_end_offset%3#0: uint64 = (len maybe_value%1#0)
        let item1%2#0: bytes = (substring3 maybe_value%1#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%10#0: bool = (== item1%3#0 "world")
        (assert tmp%10#0)
        let tmp%11#0: bytes = (concat "tm1" "a")
        let (maybe_value%2#0: bytes, maybe_exists%5#0: bool) = (box_get tmp%11#0)
        (assert maybe_exists%5#0) // Box must have value
        let is_true%2#0: uint64 = (getbit maybe_value%2#0 32u)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let item2%2#0: bool = (getbit encoded_bool%4#0 0u)
        (assert item2%2#0)
        let tmp%12#0: bytes = (concat "tm2" "a")
        let (_%3#0: uint64, maybe_exists%6#0: bool) = (box_len tmp%12#0)
        (assert maybe_exists%6#0)
        let tmp%13#0: bytes = (concat "tm2" "a")
        let (maybe_value%3#0: bytes, maybe_exists%7#0: bool) = (box_get tmp%13#0)
        (assert maybe_exists%7#0) // Box must have value
        let item_start_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item0%6#0: bytes = (substring3 maybe_value%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let item0%7#0: bytes = ((extract 2 0) item0%6#0)
        let tmp%14#0: bool = (== item0%7#0 "hello")
        (assert tmp%14#0)
        let tmp%15#0: bytes = (concat "tm2" "a")
        let (maybe_value%4#0: bytes, maybe_exists%8#0: bool) = (box_get tmp%15#0)
        (assert maybe_exists%8#0) // Box must have value
        let item_start_offset%9#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item_end_offset%9#0: uint64 = (len maybe_value%4#0)
        let item1%8#0: bytes = (substring3 maybe_value%4#0 item_start_offset%9#0 item_end_offset%9#0)
        let item1%9#0: bytes = ((extract 2 0) item1%8#0)
        let tmp%16#0: bool = (== item1%9#0 "world")
        (assert tmp%16#0)
        let tmp%17#0: bytes = (concat "tm2" "a")
        let (maybe_value%5#0: bytes, maybe_exists%9#0: bool) = (box_get tmp%17#0)
        (assert maybe_exists%9#0) // Box must have value
        let is_true%5#0: uint64 = (getbit maybe_value%5#0 32u)
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u is_true%5#0)
        let item2%5#0: bool = (getbit encoded_bool%7#0 0u)
        (assert item2%5#0)
        let tmp%18#0: bytes = (concat "tm1" "b")
        (box_del tmp%18#0)
        let length%4#0: uint64 = (len "abc")
        let as_bytes%8#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 "abc")
        let length%5#0: uint64 = (len "def")
        let as_bytes%9#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 "def")
        let encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_bytes%10#0: bytes[8] = (itob 5u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_tuple_buffer%13#0: bytes = (concat 0x offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%7#0: uint64 = (+ 5u data_length%4#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 offset_as_uint16%5#0)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 encoded_bool%8#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 encoded_value%4#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 encoded_value%5#0)
        (box_put tmp%18#0 encoded_tuple_buffer%17#0)
        let tmp%19#0: bytes = (concat "tm1" "b")
        let (_%4#0: uint64, maybe_exists%10#0: bool) = (box_len tmp%19#0)
        (assert maybe_exists%10#0)
        let tmp%20#0: bytes = (concat "tm2" "b")
        (box_del tmp%20#0)
        let length%6#0: uint64 = (len "abc")
        let as_bytes%12#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 "abc")
        let length%7#0: uint64 = (len "def")
        let as_bytes%13#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 "def")
        let encoded_bool%9#0: bytes[1] = (setbit 0x00 0u 0u)
        let as_bytes%14#0: bytes[8] = (itob 5u)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded_tuple_buffer%19#0: bytes = (concat 0x offset_as_uint16%6#0)
        let data_length%6#0: uint64 = (len encoded_value%6#0)
        let current_tail_offset%10#0: uint64 = (+ 5u data_length%6#0)
        let as_bytes%15#0: bytes[8] = (itob current_tail_offset%10#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 offset_as_uint16%7#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 encoded_bool%9#0)
        let encoded_tuple_buffer%22#0: bytes = (concat encoded_tuple_buffer%21#0 encoded_value%6#0)
        let encoded_tuple_buffer%23#0: bytes = (concat encoded_tuple_buffer%22#0 encoded_value%7#0)
        (box_put tmp%20#0 encoded_tuple_buffer%23#0)
        let tmp%21#0: bytes = (concat "tm2" "b")
        let (_%5#0: uint64, maybe_exists%11#0: bool) = (box_len tmp%21#0)
        (assert maybe_exists%11#0)
        let tmp%22#0: bytes = (concat "tm1" "a")
        (box_del tmp%22#0)
        let tmp%23#0: bytes = (concat "tm1" "a")
        let (_%6#0: uint64, maybe_exists%12#0: bool) = (box_len tmp%23#0)
        let tmp%24#0: bool = (! maybe_exists%12#0)
        (assert tmp%24#0)
        let tmp%25#0: bytes = (concat "tm2" "a")
        (box_del tmp%25#0)
        let tmp%26#0: bytes = (concat "tm2" "a")
        let (_%7#0: uint64, maybe_exists%13#0: bool) = (box_len tmp%26#0)
        let tmp%27#0: bool = (! maybe_exists%13#0)
        (assert tmp%27#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.__algots__.defaultCreate() -> void:
    block@0: // L158
        return 