main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L159
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L159
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testBox()void" => block@3, method "testBoxMap()void" => block@4, * => block@5}
    block@3: // testBox_route_L165
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::TupleBox.testBox()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testBoxMap_route_L191
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L159
        goto block@6
    block@6: // switch_case_next_L159
        goto block@11
    block@7: // bare_routing_L159
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L159
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        tests/approvals/box-proxies.algo.ts::TupleBox.__algots__.defaultCreate()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L159
        goto block@10
    block@10: // switch_case_next_L159
        goto block@11
    block@11: // after_if_else_L159
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1 <- block@4, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2 <- block@8, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBox() -> void:
    block@0: // L165
        (box_create "t1" 10u)
        (box_create "t2" 20u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "t1")
        (assert check%0#0) // Box must have value
        let tmp%0#0: bool = (== value%0#0 10u)
        (assert tmp%0#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "t2")
        (assert check%1#0) // Box must have value
        let tmp%1#0: bool = (== value%1#0 20u)
        (assert tmp%1#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "t1")
        (assert maybe_exists%0#0)
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "t2")
        (assert maybe_exists%1#0)
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 5u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%length%1#1: uint64 = (len "world")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "world")
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded_bit%0#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%1#1 aggregate%encoded_bit%0#1)
        let aggregate%encoded%3#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%2#1 aggregate%tail%1#1)
        let tmp%2#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%encoded%3#1
        (box_del "t1")
        (box_put "t1" tmp%2#0)
        let (aggregate%box_get%0#1: bytes, aggregate%box_get%1#1: bool) = (box_get "t1")
        (assert aggregate%box_get%1#1) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#1
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 storage_value%0#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 storage_value%0#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 storage_value%0#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%3#0: bool = (== values%0#0 "hello")
        (assert tmp%3#0)
        let (aggregate%box_get%2#1: bytes, aggregate%box_get%3#1: bool) = (box_get "t1")
        (assert aggregate%box_get%3#1) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#1
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 storage_value%1#0 2u)
        let aggregate%len%0#1: uint64 = (len storage_value%1#0)
        let aggregate%substring3%1#1: bytes = (substring3 storage_value%1#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%1#1
        let values%1#0: bytes = ((extract 2 0) tuple_item%1#0)
        let tmp%4#0: bool = (== values%1#0 "world")
        (assert tmp%4#0)
        let (aggregate%box_get%4#1: bytes, aggregate%box_get%5#1: bool) = (box_get "t1")
        (assert aggregate%box_get%5#1) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#1
        let aggregate%get_bit%0#1: uint64 = (getbit storage_value%2#0 32u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#1
        let values%2#0: bool = (getbit tuple_item%2#0 0u)
        (assert values%2#0)
        (box_del "t2")
        let aggregate%length%2#1: uint64 = (len "hello")
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 5u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%4#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%length%3#1: uint64 = (len "world")
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 "world")
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%2#1 aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%5#1: Encoded((len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%4#1 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded_bit%1#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%6#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%5#1 aggregate%encoded_bit%1#1)
        let aggregate%encoded%7#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%6#1 aggregate%tail%3#1)
        let encoded_for_storage%0#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%encoded%7#1
        (box_put "t2" encoded_for_storage%0#0)
        let (aggregate%box_get%6#1: bytes, aggregate%box_get%7#1: bool) = (box_get "t2")
        (assert aggregate%box_get%7#1) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#1
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 storage_value%3#0 0u)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 storage_value%3#0 2u)
        let aggregate%substring3%2#1: bytes = (substring3 storage_value%3#0 aggregate%extract_uint16%3#1 aggregate%extract_uint16%4#1)
        let aggregate%item0%0#1: bytes = ((extract 2 0) aggregate%substring3%2#1)
        let tmp%5#0: string = aggregate%item0%0#1
        let tmp%8#0: bool = (== tmp%5#0 "hello")
        (assert tmp%8#0)
        let (aggregate%box_get%8#1: bytes, aggregate%box_get%9#1: bool) = (box_get "t2")
        (assert aggregate%box_get%9#1) // Box must have value
        let storage_value%4#0: bytes = aggregate%box_get%8#1
        let aggregate%extract_uint16%8#1: uint64 = (extract_uint16 storage_value%4#0 2u)
        let aggregate%len%2#1: uint64 = (len storage_value%4#0)
        let aggregate%substring3%5#1: bytes = (substring3 storage_value%4#0 aggregate%extract_uint16%8#1 aggregate%len%2#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%5#1)
        let tmp%10#0: bytes = aggregate%item1%1#1
        let tmp%12#0: bool = (== tmp%10#0 "world")
        (assert tmp%12#0)
        let (aggregate%box_get%10#1: bytes, aggregate%box_get%11#1: bool) = (box_get "t2")
        (assert aggregate%box_get%11#1) // Box must have value
        let storage_value%5#0: bytes = aggregate%box_get%10#1
        let aggregate%get_bit%3#1: uint64 = (getbit storage_value%5#0 32u)
        let aggregate%item2%2#1: bool = (getbit aggregate%get_bit%3#1 0u)
        let tmp%15#0: bool = aggregate%item2%2#1
        (assert tmp%15#0)
        (box_del "t1")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "t1")
        let tmp%16#0: bool = (! maybe_exists%2#0)
        (assert tmp%16#0)
        (box_del "t2")
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "t2")
        let tmp%17#0: bool = (! maybe_exists%3#0)
        (assert tmp%17#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap() -> void:
    block@0: // L191
        let box_prefixed_key%0#0: bytes = (concat "tm1" "a")
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0)
        let box_prefixed_key%1#0: bytes = (concat "tm2" "a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len box_prefixed_key%1#0)
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0)
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 5u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%length%1#1: uint64 = (len "world")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "world")
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded_bit%0#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%1#1 aggregate%encoded_bit%0#1)
        let aggregate%encoded%3#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%2#1 aggregate%tail%1#1)
        let tmp%2#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%encoded%3#1
        let box_prefixed_key%2#0: bytes = (concat "tm1" "a")
        (box_del box_prefixed_key%2#0)
        (box_put box_prefixed_key%2#0 tmp%2#0)
        let box_prefixed_key%3#0: bytes = (concat "tm2" "a")
        (box_del box_prefixed_key%3#0)
        let aggregate%length%2#1: uint64 = (len "hello")
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 5u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%4#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%length%3#1: uint64 = (len "world")
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 "world")
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%2#1 aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%5#1: Encoded((len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%4#1 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded_bit%1#1: bytes = (setbit 0x00 0u 1u)
        let aggregate%encoded%6#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%5#1 aggregate%encoded_bit%1#1)
        let aggregate%encoded%7#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%6#1 aggregate%tail%3#1)
        let encoded_for_storage%0#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%encoded%7#1
        (box_put box_prefixed_key%3#0 encoded_for_storage%0#0)
        let box_prefixed_key%4#0: bytes = (concat "tm1" "a")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len box_prefixed_key%4#0)
        (assert maybe_exists%2#0)
        let box_prefixed_key%5#0: bytes = (concat "tm1" "a")
        let (aggregate%box_get%0#1: bytes, aggregate%box_get%1#1: bool) = (box_get box_prefixed_key%5#0)
        (assert aggregate%box_get%1#1) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#1
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 storage_value%0#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 storage_value%0#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 storage_value%0#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%3#0: bool = (== values%0#0 "hello")
        (assert tmp%3#0)
        let box_prefixed_key%6#0: bytes = (concat "tm1" "a")
        let (aggregate%box_get%2#1: bytes, aggregate%box_get%3#1: bool) = (box_get box_prefixed_key%6#0)
        (assert aggregate%box_get%3#1) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#1
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 storage_value%1#0 2u)
        let aggregate%len%0#1: uint64 = (len storage_value%1#0)
        let aggregate%substring3%1#1: bytes = (substring3 storage_value%1#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%1#1
        let values%1#0: bytes = ((extract 2 0) tuple_item%1#0)
        let tmp%4#0: bool = (== values%1#0 "world")
        (assert tmp%4#0)
        let box_prefixed_key%7#0: bytes = (concat "tm1" "a")
        let (aggregate%box_get%4#1: bytes, aggregate%box_get%5#1: bool) = (box_get box_prefixed_key%7#0)
        (assert aggregate%box_get%5#1) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#1
        let aggregate%get_bit%0#1: uint64 = (getbit storage_value%2#0 32u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#1
        let values%2#0: bool = (getbit tuple_item%2#0 0u)
        (assert values%2#0)
        let box_prefixed_key%8#0: bytes = (concat "tm2" "a")
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len box_prefixed_key%8#0)
        (assert maybe_exists%3#0)
        let box_prefixed_key%9#0: bytes = (concat "tm2" "a")
        let (aggregate%box_get%6#1: bytes, aggregate%box_get%7#1: bool) = (box_get box_prefixed_key%9#0)
        (assert aggregate%box_get%7#1) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#1
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 storage_value%3#0 0u)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 storage_value%3#0 2u)
        let aggregate%substring3%2#1: bytes = (substring3 storage_value%3#0 aggregate%extract_uint16%3#1 aggregate%extract_uint16%4#1)
        let aggregate%item0%0#1: bytes = ((extract 2 0) aggregate%substring3%2#1)
        let tmp%5#0: string = aggregate%item0%0#1
        let tmp%8#0: bool = (== tmp%5#0 "hello")
        (assert tmp%8#0)
        let box_prefixed_key%10#0: bytes = (concat "tm2" "a")
        let (aggregate%box_get%8#1: bytes, aggregate%box_get%9#1: bool) = (box_get box_prefixed_key%10#0)
        (assert aggregate%box_get%9#1) // Box must have value
        let storage_value%4#0: bytes = aggregate%box_get%8#1
        let aggregate%extract_uint16%8#1: uint64 = (extract_uint16 storage_value%4#0 2u)
        let aggregate%len%2#1: uint64 = (len storage_value%4#0)
        let aggregate%substring3%5#1: bytes = (substring3 storage_value%4#0 aggregate%extract_uint16%8#1 aggregate%len%2#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%5#1)
        let tmp%10#0: bytes = aggregate%item1%1#1
        let tmp%12#0: bool = (== tmp%10#0 "world")
        (assert tmp%12#0)
        let box_prefixed_key%11#0: bytes = (concat "tm2" "a")
        let (aggregate%box_get%10#1: bytes, aggregate%box_get%11#1: bool) = (box_get box_prefixed_key%11#0)
        (assert aggregate%box_get%11#1) // Box must have value
        let storage_value%5#0: bytes = aggregate%box_get%10#1
        let aggregate%get_bit%3#1: uint64 = (getbit storage_value%5#0 32u)
        let aggregate%item2%2#1: bool = (getbit aggregate%get_bit%3#1 0u)
        let tmp%15#0: bool = aggregate%item2%2#1
        (assert tmp%15#0)
        let aggregate%length%4#1: uint64 = (len "abc")
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 "abc")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let aggregate%tail%4#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%data_length%4#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%current_tail_offset%4#1: uint64 = (+ 5u aggregate%data_length%4#1)
        let aggregate%as_bytes%9#1: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded%8#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%4#1)
        let aggregate%length%5#1: uint64 = (len "def")
        let aggregate%as_bytes%10#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 "def")
        let aggregate%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = aggregate%encoded_value%5#1
        let aggregate%tail%5#1: bytes = (concat aggregate%tail%4#1 aggregate%as_Encoded(len+uint8[])%2#1)
        let aggregate%as_bytes%11#1: bytes[8] = (itob aggregate%current_tail_offset%4#1)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%11#1)
        let aggregate%encoded%9#1: Encoded((len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%8#1 aggregate%offset_as_uint16%5#1)
        let aggregate%encoded_bit%2#1: bytes = (setbit 0x00 0u 0u)
        let aggregate%encoded%10#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%9#1 aggregate%encoded_bit%2#1)
        let aggregate%encoded%11#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%10#1 aggregate%tail%5#1)
        let tmp%16#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%encoded%11#1
        let box_prefixed_key%12#0: bytes = (concat "tm1" "b")
        (box_del box_prefixed_key%12#0)
        (box_put box_prefixed_key%12#0 tmp%16#0)
        let box_prefixed_key%13#0: bytes = (concat "tm1" "b")
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len box_prefixed_key%13#0)
        (assert maybe_exists%4#0)
        let box_prefixed_key%14#0: bytes = (concat "tm2" "b")
        (box_del box_prefixed_key%14#0)
        let aggregate%length%6#1: uint64 = (len "abc")
        let aggregate%as_bytes%12#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 "abc")
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let aggregate%tail%6#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%data_length%6#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%current_tail_offset%6#1: uint64 = (+ 5u aggregate%data_length%6#1)
        let aggregate%as_bytes%13#1: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%13#1)
        let aggregate%encoded%12#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%6#1)
        let aggregate%length%7#1: uint64 = (len "def")
        let aggregate%as_bytes%14#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%14#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 "def")
        let aggregate%as_Encoded(len+uint8[])%3#1: Encoded(len+uint8[]) = aggregate%encoded_value%7#1
        let aggregate%tail%7#1: bytes = (concat aggregate%tail%6#1 aggregate%as_Encoded(len+uint8[])%3#1)
        let aggregate%as_bytes%15#1: bytes[8] = (itob aggregate%current_tail_offset%6#1)
        let aggregate%offset_as_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%15#1)
        let aggregate%encoded%13#1: Encoded((len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%12#1 aggregate%offset_as_uint16%7#1)
        let aggregate%encoded_bit%3#1: bytes = (setbit 0x00 0u 0u)
        let aggregate%encoded%14#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%13#1 aggregate%encoded_bit%3#1)
        let aggregate%encoded%15#1: Encoded((len+utf8[]),(len+uint8[]),bool1) = (concat aggregate%encoded%14#1 aggregate%tail%7#1)
        let encoded_for_storage%1#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%encoded%15#1
        (box_put box_prefixed_key%14#0 encoded_for_storage%1#0)
        let box_prefixed_key%15#0: bytes = (concat "tm2" "b")
        let (_%5#0: uint64, maybe_exists%5#0: bool) = (box_len box_prefixed_key%15#0)
        (assert maybe_exists%5#0)
        let box_prefixed_key%16#0: bytes = (concat "tm1" "a")
        (box_del box_prefixed_key%16#0)
        let box_prefixed_key%17#0: bytes = (concat "tm1" "a")
        let (_%6#0: uint64, maybe_exists%6#0: bool) = (box_len box_prefixed_key%17#0)
        let tmp%17#0: bool = (! maybe_exists%6#0)
        (assert tmp%17#0)
        let box_prefixed_key%18#0: bytes = (concat "tm2" "a")
        (box_del box_prefixed_key%18#0)
        let box_prefixed_key%19#0: bytes = (concat "tm2" "a")
        let (_%7#0: uint64, maybe_exists%7#0: bool) = (box_len box_prefixed_key%19#0)
        let tmp%18#0: bool = (! maybe_exists%7#0)
        (assert tmp%18#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.__algots__.defaultCreate() -> void:
    block@0: // L159
        return 