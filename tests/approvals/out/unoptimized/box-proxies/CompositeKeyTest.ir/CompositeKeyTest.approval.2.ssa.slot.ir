main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L238
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L238
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((uint64,uint64),string)void" => block@3, * => block@4}
    block@3: // test_route_L241
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_bytes[16]%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 reinterpret_bytes[16]%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
        tests/approvals/box-proxies.algo.ts::CompositeKeyTest.test(item0%1#0, item1%1#0, tmp%8#0)
        let tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L238
        goto block@5
    block@5: // switch_case_next_L238
        goto block@10
    block@6: // bare_routing_L238
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L238
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__algots__.defaultCreate()
        let tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L238
        goto block@9
    block@9: // switch_case_next_L238
        goto block@10
    block@10: // after_if_else_L238
        let tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#1 <- block@7, tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::CompositeKeyTest.test(key.a: uint64, key.b: uint64, val: bytes) -> void:
    block@0: // L241
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_tuple_buffer%2#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 val#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__algots__.defaultCreate() -> void:
    block@0: // L238
        return 