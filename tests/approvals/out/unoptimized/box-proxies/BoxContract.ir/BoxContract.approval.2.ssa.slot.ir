main tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram:
    block@0: // L101
        let tmp%0#0: uint64 = (txn ApplicationID)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L102
        tests/approvals/box-proxies.algo.ts::testBox("one", "aaaaaargh")
        let tmp%2#0: bytes = (itob 256456u)
        tests/approvals/box-proxies.algo.ts::testBoxMap("two", "what?", tmp%2#0)
        tests/approvals/box-proxies.algo.ts::testBoxRef("three", 99u)
        goto block@2
    block@2: // after_if_else_L102
        return 1u

subroutine tests/approvals/box-proxies.algo.ts::testBox(box: bytes, str: bytes) -> void:
    block@0: // L7
        let value.0#0: bytes = str#0
        let length%0#0: uint64 = (len value.0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 value.0#0)
        let length%1#0: uint64 = (len "a")
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "a")
        let as_bytes%2#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%1#0)
        (box_del box#0)
        (box_put box#0 encoded_tuple_buffer%4#0)
        let length%2#0: uint64 = (len value.0#0)
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 value.0#0)
        let length%3#0: uint64 = (len "a")
        let as_bytes%5#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 "a")
        let as_bytes%6#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%6#0: bytes = (concat 0x offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%4#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 offset_as_uint16%3#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 encoded_value%2#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 encoded_value%3#0)
        (box_del "A")
        (box_put "A" encoded_tuple_buffer%9#0)
        let tmp%0#0: bool = (== box#0 "one")
        (assert tmp%0#0)
        let tmp%1#0: bool = (== "A" "A")
        (assert tmp%1#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L15
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 2 0) item0%0#0)
        let ternary_result%0.0#0: bytes = item0%1#0
        goto block@3
    block@2: // ternary_false_L15
        let ternary_result%0.0#1: bytes = undefined
        goto block@3
    block@3: // ternary_merge_L15
        let ternary_result%0.0#2: bytes = φ(ternary_result%0.0#0 <- block@1, ternary_result%0.0#1 <- block@2)
        (assert maybe_exists%0#0) // Box must have value
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "A")
        goto maybe_exists%1#0 ? block@4 : block@5
    block@4: // ternary_true_L15
        let item_start_offset%2#0: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let item_end_offset%2#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let item0%2#0: bytes = (substring3 maybe_value%1#0 item_start_offset%2#0 item_end_offset%2#0)
        let item0%3#0: bytes = ((extract 2 0) item0%2#0)
        let ternary_result%1.0#0: bytes = item0%3#0
        goto block@6
    block@5: // ternary_false_L15
        let ternary_result%1.0#1: bytes = undefined
        goto block@6
    block@6: // ternary_merge_L15
        let ternary_result%1.0#2: bytes = φ(ternary_result%1.0#0 <- block@4, ternary_result%1.0#1 <- block@5)
        (assert maybe_exists%1#0) // Box must have value
        let tmp%2#0: bool = (== ternary_result%0.0#2 ternary_result%1.0#2)
        (assert tmp%2#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get box#0)
        goto maybe_exists%2#0 ? block@7 : block@8
    block@7: // ternary_true_L16
        let item_start_offset%5#0: uint64 = (extract_uint16 maybe_value%2#0 2u)
        let item_end_offset%5#0: uint64 = (len maybe_value%2#0)
        let item1%4#0: bytes = (substring3 maybe_value%2#0 item_start_offset%5#0 item_end_offset%5#0)
        let item1%5#0: bytes = ((extract 2 0) item1%4#0)
        let ternary_result%2.1#0: bytes = item1%5#0
        goto block@9
    block@8: // ternary_false_L16
        let ternary_result%2.1#1: bytes = undefined
        goto block@9
    block@9: // ternary_merge_L16
        let ternary_result%2.1#2: bytes = φ(ternary_result%2.1#0 <- block@7, ternary_result%2.1#1 <- block@8)
        (assert maybe_exists%2#0) // Box must have value
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "A")
        goto maybe_exists%3#0 ? block@10 : block@11
    block@10: // ternary_true_L16
        let item_start_offset%7#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item_end_offset%7#0: uint64 = (len maybe_value%3#0)
        let item1%6#0: bytes = (substring3 maybe_value%3#0 item_start_offset%7#0 item_end_offset%7#0)
        let item1%7#0: bytes = ((extract 2 0) item1%6#0)
        let ternary_result%3.1#0: bytes = item1%7#0
        goto block@12
    block@11: // ternary_false_L16
        let ternary_result%3.1#1: bytes = undefined
        goto block@12
    block@12: // ternary_merge_L16
        let ternary_result%3.1#2: bytes = φ(ternary_result%3.1#0 <- block@10, ternary_result%3.1#1 <- block@11)
        (assert maybe_exists%3#0) // Box must have value
        let tmp%3#0: bool = (== ternary_result%2.1#2 ternary_result%3.1#2)
        (assert tmp%3#0)
        let (_%0#0: uint64, maybe_exists%4#0: bool) = (box_len box#0)
        goto maybe_exists%4#0 ? block@13 : block@15
    block@13: // and_contd_L18
        let (_%1#0: uint64, maybe_exists%5#0: bool) = (box_len "A")
        goto maybe_exists%5#0 ? block@14 : block@15
    block@14: // bool_true_L18
        let and_result%0#0: bool = 1u
        goto block@16
    block@15: // bool_false_L18
        let and_result%0#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L18
        let and_result%0#2: bool = φ(and_result%0#0 <- block@14, and_result%0#1 <- block@15)
        (assert and_result%0#2)
        let (value%0#0: uint64, check%0#0: bool) = (box_len box#0)
        (assert check%0#0) // Box must have value
        let reinterpret_bool%0#0: bool = value%0#0
        (assert reinterpret_bool%0#0)
        let tmp%4#0: bool = (box_del box#0)
        (assert tmp%4#0) // delete failed
        let isBoxADeleted#0: bool = (box_del "A")
        (assert isBoxADeleted#0) // delete failed
        let (_%2#0: uint64, maybe_exists%6#0: bool) = (box_len box#0)
        goto maybe_exists%6#0 ? block@19 : block@17
    block@17: // and_contd_L25
        let (_%3#0: uint64, maybe_exists%7#0: bool) = (box_len "A")
        goto maybe_exists%7#0 ? block@19 : block@18
    block@18: // bool_true_L25
        let and_result%1#0: bool = 1u
        goto block@20
    block@19: // bool_false_L25
        let and_result%1#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L25
        let and_result%1#2: bool = φ(and_result%1#0 <- block@18, and_result%1#1 <- block@19)
        (assert and_result%1#2)
        let (maybe_value%4#0: bytes, maybe_exists%8#0: bool) = (box_get "A")
        goto maybe_exists%8#0 ? block@21 : block@22
    block@21: // ternary_true_L28
        let item_start_offset%8#0: uint64 = (extract_uint16 maybe_value%4#0 0u)
        let item_end_offset%8#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item0%8#0: bytes = (substring3 maybe_value%4#0 item_start_offset%8#0 item_end_offset%8#0)
        let item0%9#0: bytes = ((extract 2 0) item0%8#0)
        let ternary_result%4.0#0: bytes = item0%9#0
        goto block@23
    block@22: // ternary_false_L28
        let ternary_result%4.0#1: bytes = undefined
        goto block@23
    block@23: // ternary_merge_L28
        let ternary_result%4.0#2: bytes = φ(ternary_result%4.0#0 <- block@21, ternary_result%4.0#1 <- block@22)
        goto maybe_exists%8#0 ? block@24 : block@25
    block@24: // ternary_true_L28
        let ternary_result%5.0#0: bytes = ternary_result%4.0#2
        goto block@26
    block@25: // ternary_false_L28
        let ternary_result%5.0#1: bytes = "O"
        goto block@26
    block@26: // ternary_merge_L28
        let ternary_result%5.0#2: bytes = φ(ternary_result%5.0#0 <- block@24, ternary_result%5.0#1 <- block@25)
        let (maybe_value%5#0: bytes, maybe_exists%9#0: bool) = (box_get box#0)
        goto maybe_exists%9#0 ? block@27 : block@28
    block@27: // ternary_true_L28
        let item_start_offset%10#0: uint64 = (extract_uint16 maybe_value%5#0 0u)
        let item_end_offset%10#0: uint64 = (extract_uint16 maybe_value%5#0 2u)
        let item0%10#0: bytes = (substring3 maybe_value%5#0 item_start_offset%10#0 item_end_offset%10#0)
        let item0%11#0: bytes = ((extract 2 0) item0%10#0)
        let ternary_result%6.0#0: bytes = item0%11#0
        goto block@29
    block@28: // ternary_false_L28
        let ternary_result%6.0#1: bytes = undefined
        goto block@29
    block@29: // ternary_merge_L28
        let ternary_result%6.0#2: bytes = φ(ternary_result%6.0#0 <- block@27, ternary_result%6.0#1 <- block@28)
        goto maybe_exists%9#0 ? block@30 : block@31
    block@30: // ternary_true_L28
        let ternary_result%7.0#0: bytes = ternary_result%6.0#2
        goto block@32
    block@31: // ternary_false_L28
        let ternary_result%7.0#1: bytes = "O"
        goto block@32
    block@32: // ternary_merge_L28
        let ternary_result%7.0#2: bytes = φ(ternary_result%7.0#0 <- block@30, ternary_result%7.0#1 <- block@31)
        let tmp%5#0: bool = (== ternary_result%5.0#2 ternary_result%7.0#2)
        (assert tmp%5#0)
        let (maybe_value%6#0: bytes, maybe_exists%10#0: bool) = (box_get "A")
        goto maybe_exists%10#0 ? block@33 : block@34
    block@33: // ternary_true_L29
        let item_start_offset%13#0: uint64 = (extract_uint16 maybe_value%6#0 2u)
        let item_end_offset%13#0: uint64 = (len maybe_value%6#0)
        let item1%12#0: bytes = (substring3 maybe_value%6#0 item_start_offset%13#0 item_end_offset%13#0)
        let item1%13#0: bytes = ((extract 2 0) item1%12#0)
        let ternary_result%8.1#0: bytes = item1%13#0
        goto block@35
    block@34: // ternary_false_L29
        let ternary_result%8.1#1: bytes = undefined
        goto block@35
    block@35: // ternary_merge_L29
        let ternary_result%8.1#2: bytes = φ(ternary_result%8.1#0 <- block@33, ternary_result%8.1#1 <- block@34)
        goto maybe_exists%10#0 ? block@36 : block@37
    block@36: // ternary_true_L29
        let ternary_result%9.1#0: bytes = ternary_result%8.1#2
        goto block@38
    block@37: // ternary_false_L29
        let ternary_result%9.1#1: bytes = "0"
        goto block@38
    block@38: // ternary_merge_L29
        let ternary_result%9.1#2: bytes = φ(ternary_result%9.1#0 <- block@36, ternary_result%9.1#1 <- block@37)
        let (maybe_value%7#0: bytes, maybe_exists%11#0: bool) = (box_get box#0)
        goto maybe_exists%11#0 ? block@39 : block@40
    block@39: // ternary_true_L29
        let item_start_offset%15#0: uint64 = (extract_uint16 maybe_value%7#0 2u)
        let item_end_offset%15#0: uint64 = (len maybe_value%7#0)
        let item1%14#0: bytes = (substring3 maybe_value%7#0 item_start_offset%15#0 item_end_offset%15#0)
        let item1%15#0: bytes = ((extract 2 0) item1%14#0)
        let ternary_result%10.1#0: bytes = item1%15#0
        goto block@41
    block@40: // ternary_false_L29
        let ternary_result%10.1#1: bytes = undefined
        goto block@41
    block@41: // ternary_merge_L29
        let ternary_result%10.1#2: bytes = φ(ternary_result%10.1#0 <- block@39, ternary_result%10.1#1 <- block@40)
        goto maybe_exists%11#0 ? block@42 : block@43
    block@42: // ternary_true_L29
        let ternary_result%11.1#0: bytes = ternary_result%10.1#2
        goto block@44
    block@43: // ternary_false_L29
        let ternary_result%11.1#1: bytes = "0"
        goto block@44
    block@44: // ternary_merge_L29
        let ternary_result%11.1#2: bytes = φ(ternary_result%11.1#0 <- block@42, ternary_result%11.1#1 <- block@43)
        let tmp%6#0: bool = (== ternary_result%9.1#2 ternary_result%11.1#2)
        (assert tmp%6#0)
        let (maybe_value%8#0: bytes, maybe_exists%12#0: bool) = (box_get box#0)
        goto maybe_exists%12#0 ? block@45 : block@46
    block@45: // ternary_true_L31
        goto block@47
    block@46: // ternary_false_L31
        goto block@47
    block@47: // ternary_merge_L31
        let e#0: bool = maybe_exists%12#0
        let tmp%7#0: bool = (! e#0)
        (assert tmp%7#0)
        let length%4#0: uint64 = (len value.0#0)
        let as_bytes%8#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 value.0#0)
        let length%5#0: uint64 = (len "a")
        let as_bytes%9#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 "a")
        let as_bytes%10#0: bytes[8] = (itob 4u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_tuple_buffer%11#0: bytes = (concat 0x offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%7#0: uint64 = (+ 4u data_length%4#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%5#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 encoded_value%4#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_value%5#0)
        (box_del box#0)
        (box_put box#0 encoded_tuple_buffer%14#0)
        let (maybe_value%9#0: bytes, maybe_exists%13#0: bool) = (box_get box#0)
        goto maybe_exists%13#0 ? block@48 : block@49
    block@48: // ternary_true_L34
        goto block@50
    block@49: // ternary_false_L34
        goto block@50
    block@50: // ternary_merge_L34
        let e#1: bool = maybe_exists%13#0
        (assert e#1)
        return 

subroutine tests/approvals/box-proxies.algo.ts::testBoxMap(box: bytes, key: bytes, value: bytes) -> void:
    block@0: // L40
        let tmp%0#0: bytes = (concat box#0 key#0)
        (box_del tmp%0#0)
        (box_put tmp%0#0 value#0)
        let tmp%1#0: bytes = (concat "" key#0)
        (box_del tmp%1#0)
        (box_put tmp%1#0 value#0)
        let boxMapItem#0: bytes = (concat "" key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len boxMapItem#0)
        (assert maybe_exists%0#0)
        let tmp%2#0: bool = (== box#0 "two")
        (assert tmp%2#0)
        let tmp%3#0: bool = (== "" "")
        (assert tmp%3#0)
        let tmp%4#0: bytes = (concat box#0 key#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len tmp%4#0)
        (assert check%0#0) // Box must have value
        let reinterpret_bool%0#0: bool = value%0#0
        (assert reinterpret_bool%0#0)
        let tmp%5#0: bytes = (concat box#0 key#0)
        let (maybe_value%0#0: bytes, maybe_exists%1#0: bool) = (box_get tmp%5#0)
        (assert maybe_exists%1#0)
        let tmp%6#0: bytes = (concat box#0 key#0)
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (box_get tmp%6#0)
        (assert maybe_exists%2#0) // Box must have value
        let tmp%7#0: bytes = (concat "" key#0)
        let (maybe_value%2#0: bytes, maybe_exists%3#0: bool) = (box_get tmp%7#0)
        (assert maybe_exists%3#0) // Box must have value
        let tmp%8#0: bool = (== maybe_value%1#0 maybe_value%2#0)
        (assert tmp%8#0)
        let tmp%9#0: bytes = (concat box#0 key#0)
        let isBoxDeleted#0: bool = (box_del tmp%9#0)
        (assert isBoxDeleted#0) // delete failed
        let tmp%10#0: bytes = (concat "" key#0)
        let tmp%11#0: bytes = (concat tmp%10#0 "x")
        let tmp%12#0: bytes = (concat box#0 tmp%11#0)
        let (maybe_value%3#0: bytes, maybe_exists%4#0: bool) = (box_get tmp%12#0)
        let state_get%0#0: bytes = (select "b" maybe_value%3#0 maybe_exists%4#0)
        let tmp%13#0: bytes = (concat "" key#0)
        let tmp%14#0: bytes = (concat tmp%13#0 "x")
        let tmp%15#0: bytes = (concat "" tmp%14#0)
        let (maybe_value%4#0: bytes, maybe_exists%5#0: bool) = (box_get tmp%15#0)
        let state_get%1#0: bytes = (select "b" maybe_value%4#0 maybe_exists%5#0)
        let tmp%16#0: bool = (== state_get%0#0 state_get%1#0)
        (assert tmp%16#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::testBoxRef(box: bytes, length: uint64) -> void:
    block@0: // L65
        let tmp%0#0: bool = (== box#0 "three")
        (assert tmp%0#0)
        let tmp%1#0: bool = (== "abc" "abc")
        (assert tmp%1#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "abc")
        goto maybe_exists%0#0 ? block@2 : block@1
    block@1: // if_body_L69
        (box_create "abc" 1000u)
        goto block@5
    block@2: // else_body_L71
        let (value%0#0: uint64, check%0#0: bool) = (box_len "abc")
        (assert check%0#0) // Box must have value
        let tmp%2#0: bool = (!= value%0#0 length#0)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L71
        (box_resize "abc" length#0)
        goto block@4
    block@4: // after_if_else_L71
        goto block@5
    block@5: // after_if_else_L69
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len box#0)
        goto maybe_exists%1#0 ? block@6 : block@7
    block@6: // if_body_L74
        (box_resize box#0 4u)
        goto block@8
    block@7: // else_body_L76
        (box_create box#0 4u)
        goto block@8
    block@8: // after_if_else_L74
        (box_put box#0 0xffffffff)
        let (maybe_value%0#0: bytes, maybe_exists%2#0: bool) = (box_get box#0)
        let state_get%0#0: bytes = (select 0x maybe_value%0#0 maybe_exists%2#0)
        let tmp%3#0: bool = (== state_get%0#0 0xffffffff)
        (assert tmp%3#0)
        let (maybe_value%1#0: bytes, maybe_exists%3#0: bool) = (box_get box#0)
        let maybeBox.1#0: bool = maybe_exists%3#0
        (assert maybeBox.1#0)
        let (maybe_value%2#0: bytes, maybe_exists%4#0: bool) = (box_get box#0)
        (assert maybe_exists%4#0) // Box must have value
        let tmp%4#0: bool = (== maybe_value%2#0 0xffffffff)
        (assert tmp%4#0)
        (box_splice box#0 1u 1u 0x00)
        let (maybe_value%3#0: bytes, maybe_exists%5#0: bool) = (box_get box#0)
        (assert maybe_exists%5#0) // Box must have value
        let tmp%5#0: bool = (== maybe_value%3#0 0xff00ffff)
        (assert tmp%5#0)
        let x#0: bool = (box_del box#0)
        (assert x#0) // delete failed
        let (_%2#0: uint64, maybe_exists%6#0: bool) = (box_len box#0)
        let tmp%6#0: bool = (! maybe_exists%6#0)
        (assert tmp%6#0)
        return 