{
    "name": "LocalStateDemo",
    "structs": {
        "Data": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            },
            {
                "name": "d",
                "type": "string"
            }
        ],
        "object": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ],
        "getStateResult": [
            {
                "name": "localUint",
                "type": "uint64"
            },
            {
                "name": "localUint2",
                "type": "uint64"
            },
            {
                "name": "localBytes",
                "type": "byte[]"
            },
            {
                "name": "localBytes2",
                "type": "byte[]"
            },
            {
                "name": "localEncoded",
                "type": "uint64[10]"
            },
            {
                "name": "localTuple",
                "type": "(uint64,byte[])"
            },
            {
                "name": "localObject",
                "type": "object"
            },
            {
                "name": "localMutableObject",
                "type": "Data"
            }
        ]
    },
    "methods": [
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setState",
            "args": [
                {
                    "type": "(uint64,byte[])",
                    "struct": "object",
                    "name": "p"
                },
                {
                    "type": "uint64[10]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getState",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))",
                "struct": "getStateResult"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clearState",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 2,
                "bytes": 6
            }
        },
        "keys": {
            "global": {},
            "local": {
                "localUint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bDE="
                },
                "localUint2": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxVaW50Mg=="
                },
                "localBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YjE="
                },
                "localBytes2": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCeXRlczI="
                },
                "localEncoded": {
                    "keyType": "AVMString",
                    "valueType": "uint64[10]",
                    "key": "bG9jYWxFbmNvZGVk"
                },
                "localTuple": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])",
                    "key": "bG9jYWxUdXBsZQ=="
                },
                "localObject": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "bG9jYWxPYmplY3Q="
                },
                "localMutableObject": {
                    "keyType": "AVMString",
                    "valueType": "Data",
                    "key": "bG9jYWxNdXRhYmxlT2JqZWN0"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        152,
                        169,
                        366
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        416
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        444
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        157,
                        174,
                        371,
                        421
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        650,
                        656,
                        662,
                        669,
                        676,
                        683,
                        690,
                        718
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEICiYKAAJsMQpsb2NhbFVpbnQyAmIxC2xvY2FsQnl0ZXMyDGxvY2FsRW5jb2RlZApsb2NhbFR1cGxlC2xvY2FsT2JqZWN0EmxvY2FsTXV0YWJsZU9iamVjdAVoZWxsbzEbIhNBAUI2GgCABCkxTZWABKrvy0OABA6ixGmABBEXBTRPBI4EAQoA2AATAAIiQzEZIhJEMRgiE0SIAkEjQv/uMRkiEkQxGCITRIgB004ITgdOBk4FTgROA04CTBYoTFBMFlBMSRUWVwYCTFAoSwFQTgIVgWoITgKBahZXBgJQTgJLAxUWVwYCTwRQTEsBUEwVSwIITgJMFlcGAk8DTFBPA1BMSwNQTgNPAhVLAghOA0wWVwYCUE4CTwMWKExQSwQVFlcGAk8FUChMUCUWVwYCTwJMUExQTEsBUEwVSwIITE8CFlcGAk8DTFBMTwNQTE8CFlcGAlBMUIAEFR98dUxQsCNC/ykxGSISRDEYIhNENhoBSSIkWBdMSSRZTEkVTE8CTwJSVwIANhoCTwJPAk8CiAAtI0L+9zEZIxJEMRgiE0SIABsjQv7mMRkiTI4BAANC/toxGCISRIgBSCNC/s+JigMAi/2L/kwxAClLAmYxACpLAmYxACtLA2YxACcESwNmi/8xACcFTwJmSRYoTFBMSwIVFlcGAksDUChMUCUWVwYCTwNMUExQMQAnBk8CZjEATEkWKExQSwMVFlcGAksEUChMUCUWVwYCTwJMUExQTwInB08CZicJFRZXBgInCVBMFihMUEsCFRZXBgJPA1AoSwFQTBWBDQiBDRZXBgJPA0xQgAEAIiNUUE8CTwNQTE8CFlcGAlBMUDEAJwhPAmaJMQAiKWNEMQAiKmNEMQAiK2NEMQAiJwRjRDEAIicFY0QxACInBmNEMQAiJwdjREkiJFgXTEkkWUxJFUxPAk8CUlcCADEAIicIY0RPCE8ITwhPCE8ITwhPCE8ITwiJMQApaDEAKmgxACtoMQAnBGgxACcFaDEAJwZoMQAnB2gxACcIaImJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}