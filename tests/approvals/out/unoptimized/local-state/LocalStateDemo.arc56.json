{
    "name": "LocalStateDemo",
    "structs": {
        "Object98E334B2": [
            {
                "name": "localUint",
                "type": "uint64"
            },
            {
                "name": "localUint2",
                "type": "uint64"
            },
            {
                "name": "localBytes",
                "type": "byte[]"
            },
            {
                "name": "localBytes2",
                "type": "byte[]"
            },
            {
                "name": "localEncoded",
                "type": "uint64[10]"
            },
            {
                "name": "localTuple",
                "type": "(uint64,byte[])"
            },
            {
                "name": "localObject",
                "type": "ReadonlyObjectEFF43F36"
            },
            {
                "name": "localMutableObject",
                "type": "Data"
            }
        ],
        "ObjectEFF43F36": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ],
        "ReadonlyObjectEFF43F36": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ],
        "Data": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            },
            {
                "name": "d",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setState",
            "args": [
                {
                    "type": "(uint64,byte[])",
                    "struct": "ObjectEFF43F36",
                    "name": "p"
                },
                {
                    "type": "uint64[10]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getState",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))",
                "struct": "Object98E334B2"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clearState",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 2,
                "bytes": 6
            }
        },
        "keys": {
            "global": {},
            "local": {
                "localUint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bDE="
                },
                "localUint2": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxVaW50Mg=="
                },
                "localBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YjE="
                },
                "localBytes2": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCeXRlczI="
                },
                "localEncoded": {
                    "keyType": "AVMString",
                    "valueType": "uint64[10]",
                    "key": "bG9jYWxFbmNvZGVk"
                },
                "localTuple": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])",
                    "key": "bG9jYWxUdXBsZQ=="
                },
                "localObject": {
                    "keyType": "AVMString",
                    "valueType": "ReadonlyObjectEFF43F36",
                    "key": "bG9jYWxPYmplY3Q="
                },
                "localMutableObject": {
                    "keyType": "AVMString",
                    "valueType": "Data",
                    "key": "bG9jYWxNdXRhYmxlT2JqZWN0"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        152,
                        169,
                        195
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        218
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        246
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        157,
                        174,
                        200,
                        223
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        463,
                        469,
                        475,
                        485,
                        495,
                        502,
                        535,
                        571
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEICiYKAAJsMQpsb2NhbFVpbnQyAmIxC2xvY2FsQnl0ZXMyDGxvY2FsRW5jb2RlZApsb2NhbFR1cGxlC2xvY2FsT2JqZWN0EmxvY2FsTXV0YWJsZU9iamVjdAVoZWxsbzEbIhNBAHw2GgCABCkxTZWABKrvy0OABA6ixGmABBEXBTRPBI4EAEQALQATAAIiQzEZIhJEMRgiE0SIAkwjQv/uMRkiEkQxGCITRIgBGIAEFR98dUxQsCNC/9QxGSISRDEYIhNENhoBNhoCiAAtI0L/vTEZIxJEMRgiE0SIABsjQv+sMRkiTI4BAANC/6AxGCISRIgCGSNC/5WJigIAi/4iJFgXi/4kWYv+FYv+TwJPAlJXAgBMMQApSwJmMQAqSwJmMQArSwNmMQAnBEsDZjEAJwWL/2YxAE4CSRYoTFBMSwIVFlcGAksDUCUWVwYCTwNMUExQTwMnBk8CZjEATEkWKExQSwMVFlcGAksEUCUWVwYCTwJMUExQTwInB08CZicJFRZXBgInCVBOAhYoTFBLARUWVwYCTwJQgQ0WVwYCTwJMUExJFYENCIABACIjVE8DTFBMFlcGAlBMUExQMQAnCE8CZokxACIpY0QxACIqY0QxACIrY0QxACInBGNMTgREMQAiJwVjTE4FRDEAIicGY0RJIiRYF0xJJFlMSRVMTwJPAlJXAgBMTgROBDEAIicHY0RJIiRYF0xJJFlMSRVMTwJPAlJXAgBMTgdOBzEAIicIY0xOCkRPAhYoTFBPAhZQSwEVFlcGAk8CUIFqFlcGAk8CTFBMSRWBaghLBRUWVwYCTwZQSwEWVwYCTwRMUEsBFU8DCExPCFBMTwQWKExQSwUVFlcGAk8GUCUWVwYCTwJMUExQSwEWVwYCTwNMUE4CSRVPAghPBRYoTFBLBhUWVwYCTwdQJRZXBgJPAkxQTFBLARZXBgJPBExQTgJJFU8CCBZXBgJPAkxQTwRQTwNQTwJQTFBMUIkxACloMQAqaDEAK2gxACcEaDEAJwVoMQAnBmgxACcHaDEAJwhoiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}