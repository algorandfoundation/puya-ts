#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8 10
    bytecblock 0x "l1" "localUint2" "b1" "localBytes2" "localEncoded" "localTuple" "localObject"

main_block@0:

main_block@1:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@9

main_abi_routing@2:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x29314d95 // method "optIn()void"
    pushbytes 0xaaefcb43 // method "setState((uint64,byte[]),uint64[10])void"
    pushbytes 0xa88a06d9 // method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]))"
    pushbytes 0x11170534 // method "clearState()void"
    uncover 4
    match main_optIn_route@3 main_setState_route@4 main_getState_route@5 main_clearState_route@6

main_switch_case_default@7:

main_switch_case_next@8:

main_after_if_else@13:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__@14:
    return

main_clearState_route@6:
    // tests/approvals/local-state.algo.ts:41
    // public clearState() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub clearState
    intc_1 // 1
    b main_after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__@14

main_getState_route@5:
    // tests/approvals/local-state.algo.ts:29
    // public getState() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getState
    cover 8
    cover 7
    cover 6
    cover 5
    cover 8
    cover 3
    cover 2
    swap
    itob
    cover 7
    itob
    cover 7
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 7
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 7
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    intc_3 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    cover 2
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    intc_3 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    bytec_0 // 0x
    uncover 3
    concat
    uncover 3
    concat
    pushint 104 // 104
    itob
    extract 6 2
    concat
    dig 3
    len
    pushint 104 // 104
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    dig 5
    len
    uncover 2
    +
    swap
    uncover 6
    concat
    swap
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    itob
    extract 6 2
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__@14

main_setState_route@4:
    // tests/approvals/local-state.algo.ts:19
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    // tests/approvals/local-state.algo.ts:19
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    uncover 2
    uncover 2
    uncover 2
    callsub setState
    intc_1 // 1
    b main_after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__@14

main_optIn_route@3:
    // tests/approvals/local-state.algo.ts:16
    // @abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub optIn
    intc_1 // 1
    b main_after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__@14

main_bare_routing@9:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@10

main_switch_case_default@11:

main_switch_case_next@12:
    b main_after_if_else@13

main___algots__.defaultCreate@10:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__@14


// tests/approvals/local-state.algo.ts::LocalStateDemo.optIn() -> void:
optIn:

optIn_block@0:
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p.a: uint64, p.b: bytes, c: bytes) -> void:
setState:
    // tests/approvals/local-state.algo.ts:19
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    proto 3 0

setState_block@0:
    // tests/approvals/local-state.algo.ts:19
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    frame_dig -3
    frame_dig -2
    swap
    // tests/approvals/local-state.algo.ts:20
    // this.localUint(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_1 // "l1"
    // tests/approvals/local-state.algo.ts:20
    // this.localUint(Txn.sender).value = a
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:21
    // this.localUint2(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_2 // "localUint2"
    // tests/approvals/local-state.algo.ts:21
    // this.localUint2(Txn.sender).value = a
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:22
    // this.localBytes(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_3 // "b1"
    // tests/approvals/local-state.algo.ts:22
    // this.localBytes(Txn.sender).value = b
    dig 3
    app_local_put
    // tests/approvals/local-state.algo.ts:23
    // this.localBytes2(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec 4 // "localBytes2"
    // tests/approvals/local-state.algo.ts:23
    // this.localBytes2(Txn.sender).value = b
    dig 3
    app_local_put
    // tests/approvals/local-state.algo.ts:24
    // this.localEncoded(Txn.sender).value = c.copy()
    frame_dig -1
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 5 // "localEncoded"
    // tests/approvals/local-state.algo.ts:24
    // this.localEncoded(Txn.sender).value = c.copy()
    uncover 2
    app_local_put
    // tests/approvals/local-state.algo.ts:25
    // this.localTuple(Txn.sender).value = [a, b]
    txn Sender
    cover 2
    dup
    itob
    swap
    dig 2
    len
    itob
    extract 6 2
    dig 3
    concat
    swap
    bytec_0 // 0x
    uncover 3
    concat
    intc_3 // 10
    itob
    extract 6 2
    concat
    uncover 2
    concat
    uncover 3
    // tests/approvals/local-state.algo.ts:13
    // localTuple = LocalState<[uint64, bytes]>()
    bytec 6 // "localTuple"
    // tests/approvals/local-state.algo.ts:25
    // this.localTuple(Txn.sender).value = [a, b]
    uncover 2
    app_local_put
    // tests/approvals/local-state.algo.ts:26
    // this.localObject(Txn.sender).value = { a, b }
    txn Sender
    swap
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    intc_3 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // tests/approvals/local-state.algo.ts:14
    // localObject = LocalState<{ a: uint64; b: bytes }>()
    bytec 7 // "localObject"
    // tests/approvals/local-state.algo.ts:26
    // this.localObject(Txn.sender).value = { a, b }
    uncover 2
    app_local_put
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> uint64, uint64, bytes, bytes, bytes, uint64, bytes, uint64, bytes:
getState:
    // tests/approvals/local-state.algo.ts:29
    // public getState() {
    proto 0 9
    intc_0 // 0
    dup
    bytec_0 // ""
    dupn 2

getState_block@0:
    // tests/approvals/local-state.algo.ts:31
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_1 // "l1"
    // tests/approvals/local-state.algo.ts:31
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:32
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_2 // "localUint2"
    // tests/approvals/local-state.algo.ts:32
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:33
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_3 // "b1"
    // tests/approvals/local-state.algo.ts:33
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:34
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec 4 // "localBytes2"
    // tests/approvals/local-state.algo.ts:34
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:35
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 5 // "localEncoded"
    // tests/approvals/local-state.algo.ts:35
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:36
    // localTuple: this.localTuple(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:13
    // localTuple = LocalState<[uint64, bytes]>()
    bytec 6 // "localTuple"
    // tests/approvals/local-state.algo.ts:36
    // localTuple: this.localTuple(Txn.sender).value,
    app_local_get_ex
    dup
    cover 2
    cover 2
    swap
    bz getState_ternary_false@2

getState_ternary_true@1:
    // tests/approvals/local-state.algo.ts:36
    // localTuple: this.localTuple(Txn.sender).value,
    frame_dig 11
    dup
    intc_0 // 0
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    frame_bury 3
    frame_bury 1

getState_ternary_merge@3:
    // tests/approvals/local-state.algo.ts:36
    // localTuple: this.localTuple(Txn.sender).value,
    frame_dig 10
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:37
    // localObject: this.localObject(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:14
    // localObject = LocalState<{ a: uint64; b: bytes }>()
    bytec 7 // "localObject"
    // tests/approvals/local-state.algo.ts:37
    // localObject: this.localObject(Txn.sender).value,
    app_local_get_ex
    dup
    cover 2
    frame_bury 2
    frame_bury 0
    bz getState_ternary_false@5

getState_ternary_true@4:
    // tests/approvals/local-state.algo.ts:37
    // localObject: this.localObject(Txn.sender).value,
    frame_dig 0
    dup
    intc_0 // 0
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    frame_bury 4

getState_ternary_merge@6:
    // tests/approvals/local-state.algo.ts:37
    // localObject: this.localObject(Txn.sender).value,
    frame_dig 2
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:30-38
    // return {
    //   localUint: this.localUint(Txn.sender).value,
    //   localUint2: this.localUint2(Txn.sender).value,
    //   localBytes: this.localBytes(Txn.sender).value,
    //   localBytes2: this.localBytes2(Txn.sender).value,
    //   localEncoded: this.localEncoded(Txn.sender).value.copy(),
    //   localTuple: this.localTuple(Txn.sender).value,
    //   localObject: this.localObject(Txn.sender).value,
    // }
    frame_dig 5
    frame_dig 6
    frame_dig 7
    frame_dig 8
    frame_dig 9
    frame_dig 3
    frame_dig 1
    frame_dig 4
    uncover 8
    frame_bury 8
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub

getState_ternary_false@5:
    // tests/approvals/local-state.algo.ts:37
    // localObject: this.localObject(Txn.sender).value,
    bytec_0 // ""
    frame_bury 4
    intc_0 // 0
    b getState_ternary_merge@6

getState_ternary_false@2:
    // tests/approvals/local-state.algo.ts:36
    // localTuple: this.localTuple(Txn.sender).value,
    bytec_0 // ""
    frame_bury 3
    intc_0 // 0
    frame_bury 1
    b getState_ternary_merge@3


// tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
clearState:

clearState_block@0:
    // tests/approvals/local-state.algo.ts:42
    // this.localUint(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_1 // "l1"
    // tests/approvals/local-state.algo.ts:42
    // this.localUint(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:43
    // this.localUint2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_2 // "localUint2"
    // tests/approvals/local-state.algo.ts:43
    // this.localUint2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:44
    // this.localBytes(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_3 // "b1"
    // tests/approvals/local-state.algo.ts:44
    // this.localBytes(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:45
    // this.localBytes2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec 4 // "localBytes2"
    // tests/approvals/local-state.algo.ts:45
    // this.localBytes2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:46
    // this.localEncoded(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 5 // "localEncoded"
    // tests/approvals/local-state.algo.ts:46
    // this.localEncoded(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:47
    // this.localTuple(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:13
    // localTuple = LocalState<[uint64, bytes]>()
    bytec 6 // "localTuple"
    // tests/approvals/local-state.algo.ts:47
    // this.localTuple(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:48
    // this.localObject(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:14
    // localObject = LocalState<{ a: uint64; b: bytes }>()
    bytec 7 // "localObject"
    // tests/approvals/local-state.algo.ts:48
    // this.localObject(Txn.sender).delete()
    app_local_del
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
