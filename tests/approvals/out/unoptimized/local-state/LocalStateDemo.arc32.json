{
    "hints": {
        "optIn()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "setState((uint64,byte[]),uint64[10])void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "p": {
                    "name": "ObjectEFF43F36",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ObjectE4D9E83F",
                    "elements": [
                        [
                            "localUint",
                            "uint64"
                        ],
                        [
                            "localUint2",
                            "uint64"
                        ],
                        [
                            "localBytes",
                            "byte[]"
                        ],
                        [
                            "localBytes2",
                            "byte[]"
                        ],
                        [
                            "localEncoded",
                            "uint64[10]"
                        ],
                        [
                            "localTuple",
                            "(uint64,byte[])"
                        ],
                        [
                            "localObject",
                            "(uint64,byte[])"
                        ],
                        [
                            "localMutableObject",
                            "(uint64,byte[],bool,string)"
                        ]
                    ]
                }
            }
        },
        "clearState()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeDynamicLocalState(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "readDynamicLocalState(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 6,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "localBytes": {
                    "type": "bytes",
                    "key": "b1"
                },
                "localBytes2": {
                    "type": "bytes",
                    "key": "localBytes2"
                },
                "localEncoded": {
                    "type": "bytes",
                    "key": "localEncoded"
                },
                "localMutableObject": {
                    "type": "bytes",
                    "key": "localMutableObject"
                },
                "localObject": {
                    "type": "bytes",
                    "key": "localObject"
                },
                "localTuple": {
                    "type": "bytes",
                    "key": "localTuple"
                },
                "localUint": {
                    "type": "uint64",
                    "key": "l1"
                },
                "localUint2": {
                    "type": "uint64",
                    "key": "localUint2"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "LocalStateDemo",
        "methods": [
            {
                "name": "optIn",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setState",
                "args": [
                    {
                        "type": "(uint64,byte[])",
                        "name": "p"
                    },
                    {
                        "type": "uint64[10]",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))"
                }
            },
            {
                "name": "clearState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "writeDynamicLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "- The dynamic key to store the value under"
                    },
                    {
                        "type": "string",
                        "name": "value",
                        "desc": "- The string value to store"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string",
                    "desc": "The stored string value"
                },
                "desc": "Writes a value to local state using a dynamic key.\nDemonstrates dynamic key-value storage in local state."
            },
            {
                "name": "readDynamicLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "- The dynamic key to read the value from"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string",
                    "desc": "The stored string value for the given key"
                },
                "desc": "Reads a value from local state using a dynamic key."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}