contract LocalStateDemo
{
  locals {
    ["l1"]: uint64
    ["localUint2"]: uint64
    ["b1"]: bytes
    ["localBytes2"]: bytes
    ["localEncoded"]: arc4.static_array<arc4.uint64>
    ["localTuple"]: readonly [uint64, bytes]
    ["localObject"]: Readonly<object>{ a: uint64, b: bytes }
    ["localMutableObject"]: tests/approvals/local-state.algo.ts::Data
  }
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  optIn(): void
  {
  }
  
  setState(p: object, c: arc4.static_array<arc4.uint64>): void
  {
    #[a, b]: readonly [uint64, bytes] = #[p.a, p.b]
    LocalState[txn<Sender>()]["l1"]: uint64 = a
    LocalState[txn<Sender>()]["localUint2"]: uint64 = a
    LocalState[txn<Sender>()]["b1"]: bytes = b
    LocalState[txn<Sender>()]["localBytes2"]: bytes = b
    LocalState[txn<Sender>()]["localEncoded"]: arc4.static_array<arc4.uint64> = copy(c)
    LocalState[txn<Sender>()]["localTuple"]: readonly [uint64, bytes] = #[#[a, b].0, #[a, b].1]
    LocalState[txn<Sender>()]["localObject"]: Readonly<object>{ a: uint64, b: bytes } = #{ a: ($0 = #{ a: a, b: b }).a, b: $0.b }
    LocalState[txn<Sender>()]["localMutableObject"]: tests/approvals/local-state.algo.ts::Data = new tests/approvals/local-state.algo.ts::Data(a=($1 = #{ a: a, b: b, c: True, d: "hello" }).a, b=$1.b, c=$1.c, d=$1.d)
  }
  
  getState(): object
  {
    return new object(localUint=LocalState[txn<Sender>()]["l1"], localUint2=LocalState[txn<Sender>()]["localUint2"], localBytes=LocalState[txn<Sender>()]["b1"], localBytes2=LocalState[txn<Sender>()]["localBytes2"], localEncoded=copy(LocalState[txn<Sender>()]["localEncoded"]), localTuple=LocalState[txn<Sender>()]["localTuple"], localObject=LocalState[txn<Sender>()]["localObject"], localMutableObject=copy(LocalState[txn<Sender>()]["localMutableObject"]))
  }
  
  clearState(): void
  {
    STATE_DELETE(LocalState[txn<Sender>()]["l1"])
    STATE_DELETE(LocalState[txn<Sender>()]["localUint2"])
    STATE_DELETE(LocalState[txn<Sender>()]["b1"])
    STATE_DELETE(LocalState[txn<Sender>()]["localBytes2"])
    STATE_DELETE(LocalState[txn<Sender>()]["localEncoded"])
    STATE_DELETE(LocalState[txn<Sender>()]["localTuple"])
    STATE_DELETE(LocalState[txn<Sender>()]["localObject"])
    STATE_DELETE(LocalState[txn<Sender>()]["localMutableObject"])
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}