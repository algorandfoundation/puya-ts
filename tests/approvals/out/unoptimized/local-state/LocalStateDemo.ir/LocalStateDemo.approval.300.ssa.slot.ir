main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L8
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, method "setState((uint64,byte[]),uint64[10])void" => block@4, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))" => block@5, method "clearState()void" => block@6, * => block@7}
    block@3: // optIn_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.optIn()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // setState_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64[10])%0#0: Encoded(uint64[10]) = (txna ApplicationArgs 2)
        tests/approvals/local-state.algo.ts::LocalStateDemo.setState(reinterpret_Encoded(uint64,(len+uint8[]))%0#0, reinterpret_Encoded(uint64[10])%0#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getState_route_L32
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let tmp%15#0: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = tests/approvals/local-state.algo.ts::LocalStateDemo.getState()
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // clearState_route_L45
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.clearState()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@7: // switch_case_default_L8
        goto block@8
    block@8: // switch_case_next_L8
        goto block@13
    block@9: // bare_routing_L8
        let tmp%21#0: uint64 = (txn OnCompletion)
        switch tmp%21#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L8
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (== tmp%22#0 0u)
        (assert tmp%23#0) // can only call when creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.__algots__.defaultCreate()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@11: // switch_case_default_L8
        goto block@12
    block@12: // switch_case_next_L8
        goto block@13
    block@13: // after_if_else_L8
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.optIn() -> void:
    block@0: // L18
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p: Encoded(uint64,(len+uint8[])), c: Encoded(uint64[10])) -> void:
    block@0: // L21
        let aggregate%extract%0#1: bytes = (extract3 p#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#1: uint64 = (len p#0)
        let aggregate%substring3%0#1: bytes = (substring3 p#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%0#1
        let values%1#0: bytes = ((extract 2 0) tuple_item%1#0)
        let a#0: uint64 = values%0#0
        let b#0: bytes = values%1#0
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 "l1" a#0)
        let tmp%1#0: account = (txn Sender)
        (app_local_put tmp%1#0 "localUint2" a#0)
        let tmp%2#0: account = (txn Sender)
        (app_local_put tmp%2#0 "b1" b#0)
        let tmp%3#0: account = (txn Sender)
        (app_local_put tmp%3#0 "localBytes2" b#0)
        let tmp%4#0: account = (txn Sender)
        (app_local_put tmp%4#0 "localEncoded" c#0)
        let tmp%5#0: account = (txn Sender)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%length%0#1: uint64 = (len b#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 b#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%1#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%2#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%1#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded(uint64,(len+uint8[])) = aggregate%encoded%2#1
        (app_local_put tmp%5#0 "localTuple" encoded_for_storage%0#0)
        let tmp%6#0: account = (txn Sender)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%3#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%1#1: uint64 = (len b#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%1#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%4#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%3#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%5#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%4#1 aggregate%tail%1#1)
        let encoded_for_storage%1#0: Encoded(uint64,(len+uint8[])) = aggregate%encoded%5#1
        (app_local_put tmp%6#0 "localObject" encoded_for_storage%1#0)
        let aggregate%length%2#1: uint64 = (len 0x68656c6c6f)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x68656c6c6f)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%length%3#1: uint64 = (len b#0)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 b#0)
        let aggregate%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%2#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%2#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 13u aggregate%data_length%2#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%7#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%6#1 aggregate%offset_as_uint16%2#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%encoded%8#1: Encoded(uint64,(len+uint8[]),bool1) = (concat aggregate%encoded%7#1 aggregate%encoded_bool%0#1)
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%2#1 encoded%0#0)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%9#1: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = (concat aggregate%encoded%8#1 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%10#1: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = (concat aggregate%encoded%9#1 aggregate%tail%3#1)
        let tmp%7#0: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = aggregate%encoded%10#1
        let tmp%8#0: account = (txn Sender)
        (app_local_put tmp%8#0 "localMutableObject" tmp%7#0)
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))):
    block@0: // L32
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#0: account = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#0 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#0 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#0: account = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#0 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#0: account = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#0 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let tmp%5#0: account = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#0 0u "localTuple")
        (assert maybe_exists%5#0) // check LocalState exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%5#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%5#0 8u)
        let aggregate%len%0#1: uint64 = (len maybe_value%5#0)
        let aggregate%substring3%0#1: bytes = (substring3 maybe_value%5#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%0#1)
        let tmp%6#0: uint64 = aggregate%item0%0#1
        let tmp%7#0: bytes = aggregate%item1%0#1
        let tmp%8#0: account = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%8#0 0u "localObject")
        (assert maybe_exists%6#0) // check LocalState exists
        let aggregate%extract%1#1: bytes = (extract3 maybe_value%6#0 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%1#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let aggregate%len%1#1: uint64 = (len maybe_value%6#0)
        let aggregate%substring3%1#1: bytes = (substring3 maybe_value%6#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let tmp%9#0: uint64 = aggregate%item0%1#1
        let tmp%10#0: bytes = aggregate%item1%1#1
        let tmp%11#0: account = (txn Sender)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_local_get_ex tmp%11#0 0u "localMutableObject")
        (assert maybe_exists%7#0) // check LocalState exists
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob maybe_value%0#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob maybe_value%1#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%0#1: uint64 = (len maybe_value%2#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 maybe_value%2#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 106u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 106u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%2#1: Encoded(uint64,uint64,(len+uint8[])) = (concat aggregate%encoded%1#1 aggregate%offset_as_uint16%0#1)
        let aggregate%length%1#1: uint64 = (len maybe_value%3#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 maybe_value%3#0)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%data_length%1#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%3#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[])) = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%4#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10]) = (concat aggregate%encoded%3#1 maybe_value%4#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%5#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%length%2#1: uint64 = (len tmp%7#0)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 tmp%7#0)
        let aggregate%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%6#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%5#1 aggregate%offset_as_uint16%2#1)
        let aggregate%encoded%7#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%6#1 aggregate%tail%2#1)
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%1#1 aggregate%encoded%7#1)
        let aggregate%data_length%3#1: uint64 = (len aggregate%encoded%7#1)
        let aggregate%current_tail_offset%3#1: uint64 = (+ aggregate%current_tail_offset%1#1 aggregate%data_length%3#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%current_tail_offset%1#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%8#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[]))) = (concat aggregate%encoded%4#1 aggregate%offset_as_uint16%3#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%9#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%3#1)
        let aggregate%length%3#1: uint64 = (len tmp%10#0)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 tmp%10#0)
        let aggregate%as_Encoded(len+uint8[])%3#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%4#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%3#1)
        let aggregate%as_bytes%8#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded%10#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%9#1 aggregate%offset_as_uint16%4#1)
        let aggregate%encoded%11#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%10#1 aggregate%tail%4#1)
        let aggregate%tail%5#1: bytes = (concat aggregate%tail%3#1 aggregate%encoded%11#1)
        let aggregate%data_length%5#1: uint64 = (len aggregate%encoded%11#1)
        let aggregate%current_tail_offset%5#1: uint64 = (+ aggregate%current_tail_offset%3#1 aggregate%data_length%5#1)
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%current_tail_offset%3#1)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded%12#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[]))) = (concat aggregate%encoded%8#1 aggregate%offset_as_uint16%5#1)
        let aggregate%tail%6#1: bytes = (concat aggregate%tail%5#1 maybe_value%7#0)
        let aggregate%as_bytes%10#1: bytes[8] = (itob aggregate%current_tail_offset%5#1)
        let aggregate%offset_as_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%13#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = (concat aggregate%encoded%12#1 aggregate%offset_as_uint16%6#1)
        let aggregate%encoded%14#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = (concat aggregate%encoded%13#1 aggregate%tail%6#1)
        let tmp%12#0: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = aggregate%encoded%14#1
        return tmp%12#0

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
    block@0: // L45
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 "l1")
        let tmp%1#0: account = (txn Sender)
        (app_local_del tmp%1#0 "localUint2")
        let tmp%2#0: account = (txn Sender)
        (app_local_del tmp%2#0 "b1")
        let tmp%3#0: account = (txn Sender)
        (app_local_del tmp%3#0 "localBytes2")
        let tmp%4#0: account = (txn Sender)
        (app_local_del tmp%4#0 "localEncoded")
        let tmp%5#0: account = (txn Sender)
        (app_local_del tmp%5#0 "localTuple")
        let tmp%6#0: account = (txn Sender)
        (app_local_del tmp%6#0 "localObject")
        let tmp%7#0: account = (txn Sender)
        (app_local_del tmp%7#0 "localMutableObject")
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 