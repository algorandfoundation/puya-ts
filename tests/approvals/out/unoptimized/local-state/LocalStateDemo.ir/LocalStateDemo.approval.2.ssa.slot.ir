main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L8
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, method "setState((uint64,byte[]),uint64[10])void" => block@4, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))" => block@5, method "clearState()void" => block@6, * => block@7}
    block@3: // optIn_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.optIn()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // setState_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: bytes = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 tmp%11#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%11#0 8u)
        let item_end_offset%0#0: uint64 = (len tmp%11#0)
        let item1%0#0: bytes = (substring3 tmp%11#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%1#0: bytes = ((extract 2 0) item1%0#0)
        let reinterpret_bytes[80]%0#0: bytes[80] = (txna ApplicationArgs 2)
        tests/approvals/local-state.algo.ts::LocalStateDemo.setState(item0%1#0, item1%1#0, reinterpret_bytes[80]%0#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getState_route_L32
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64, elements_to_encode%2#0: bytes, elements_to_encode%3#0: bytes, elements_to_encode%4#0: bytes[80], elements_to_encode%5#0: uint64, elements_to_encode%6#0: bytes, elements_to_encode%7#0: uint64, elements_to_encode%8#0: bytes, elements_to_encode%9#0: bytes) = tests/approvals/local-state.algo.ts::LocalStateDemo.getState()
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%1#0)
        let length%0#0: uint64 = (len elements_to_encode%2#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%2#0)
        let length%1#0: uint64 = (len elements_to_encode%3#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 elements_to_encode%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%5#0)
        let length%2#0: uint64 = (len elements_to_encode%6#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 elements_to_encode%6#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%2#0)
        let as_bytes%3#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%7#0)
        let length%3#0: uint64 = (len elements_to_encode%8#0)
        let as_bytes%4#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 elements_to_encode%8#0)
        let encoded_tuple_buffer%5#0: bytes = (concat 0x val_as_bytes%3#0)
        let as_bytes%5#0: bytes[8] = (itob 10u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%3#0)
        let encoded_tuple_buffer%9#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%1#0)
        let as_bytes%6#0: bytes[8] = (itob 106u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%5#0: uint64 = (+ 106u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%3#0)
        let data_length%3#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%6#0: uint64 = (+ current_tail_offset%5#0 data_length%3#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 elements_to_encode%4#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len encoded_tuple_buffer%3#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%4#0)
        let as_bytes%9#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 offset_as_uint16%5#0)
        let data_length%5#0: uint64 = (len encoded_tuple_buffer%7#0)
        let current_tail_offset%8#0: uint64 = (+ current_tail_offset%7#0 data_length%5#0)
        let as_bytes%10#0: bytes[8] = (itob current_tail_offset%8#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 offset_as_uint16%6#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 encoded_value%0#0)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 encoded_value%1#0)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_tuple_buffer%3#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 encoded_tuple_buffer%7#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 elements_to_encode%9#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%21#0)
        (log tmp%16#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // clearState_route_L45
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.clearState()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@7: // switch_case_default_L8
        goto block@8
    block@8: // switch_case_next_L8
        goto block@13
    block@9: // bare_routing_L8
        let tmp%21#0: uint64 = (txn OnCompletion)
        switch tmp%21#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L8
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (== tmp%22#0 0u)
        (assert tmp%23#0) // can only call when creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.__algots__.defaultCreate()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@11: // switch_case_default_L8
        goto block@12
    block@12: // switch_case_next_L8
        goto block@13
    block@13: // after_if_else_L8
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.optIn() -> void:
    block@0: // L18
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p.a: uint64, p.b: bytes, c: bytes[80]) -> void:
    block@0: // L21
        let a#0: uint64 = p.a#0
        let b#0: bytes = p.b#0
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_put tmp%0#0 "l1" a#0)
        let tmp%1#0: bytes[32] = (txn Sender)
        (app_local_put tmp%1#0 "localUint2" a#0)
        let tmp%2#0: bytes[32] = (txn Sender)
        (app_local_put tmp%2#0 "b1" b#0)
        let tmp%3#0: bytes[32] = (txn Sender)
        (app_local_put tmp%3#0 "localBytes2" b#0)
        let copy%0#0: bytes[80] = c#0
        let tmp%4#0: bytes[32] = (txn Sender)
        (app_local_put tmp%4#0 "localEncoded" copy%0#0)
        let tmp%5#0: bytes[32] = (txn Sender)
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let length%0#0: uint64 = (len b#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 b#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        (app_local_put tmp%5#0 "localTuple" encoded_tuple_buffer%3#0)
        let tmp%6#0: bytes[32] = (txn Sender)
        let val_as_bytes%1#0: bytes[8] = (itob a#0)
        let length%1#0: uint64 = (len b#0)
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        let encoded_tuple_buffer%5#0: bytes = (concat 0x val_as_bytes%1#0)
        let as_bytes%3#0: bytes[8] = (itob 10u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
        (app_local_put tmp%6#0 "localObject" encoded_tuple_buffer%7#0)
        let val_as_bytes%2#0: bytes[8] = (itob a#0)
        let length%2#0: uint64 = (len b#0)
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 b#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_tuple_buffer%9#0: bytes = (concat 0x val_as_bytes%2#0)
        let as_bytes%5#0: bytes[8] = (itob 13u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%5#0: uint64 = (+ 13u data_length%2#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 encoded_bool%0#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%3#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 encoded_value%2#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 0x000568656c6c6f)
        let tmp%7#0: bytes[32] = (txn Sender)
        (app_local_put tmp%7#0 "localMutableObject" encoded_tuple_buffer%14#0)
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> <uint64, uint64, bytes, bytes, bytes[80], uint64, bytes, uint64, bytes, bytes>:
    block@0: // L32
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#0: bytes[32] = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#0 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#0: bytes[32] = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#0 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#0: bytes[32] = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#0 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#0: bytes[32] = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#0 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let copy%0#0: bytes = maybe_value%4#0
        let tmp%5#0: bytes[32] = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#0 0u "localTuple")
        (assert maybe_exists%5#0) // check LocalState exists
        let item0%0#0: bytes = (extract3 maybe_value%5#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%5#0 8u)
        let item_end_offset%0#0: uint64 = (len maybe_value%5#0)
        let item1%0#0: bytes = (substring3 maybe_value%5#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%1#0: bytes = ((extract 2 0) item1%0#0)
        let tmp%6#0: bytes[32] = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%6#0 0u "localObject")
        (assert maybe_exists%6#0) // check LocalState exists
        let item0%2#0: bytes = (extract3 maybe_value%6#0 0u 8u) // on error: Index access is out of bounds
        let item0%3#0: uint64 = (btoi item0%2#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let item_end_offset%1#0: uint64 = (len maybe_value%6#0)
        let item1%2#0: bytes = (substring3 maybe_value%6#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%3#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%7#0: bytes[32] = (txn Sender)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_local_get_ex tmp%7#0 0u "localMutableObject")
        (assert maybe_exists%7#0) // check LocalState exists
        let copy%1#0: bytes = maybe_value%7#0
        return maybe_value%0#0 maybe_value%1#0 maybe_value%2#0 maybe_value%3#0 copy%0#0 item0%1#0 item1%1#0 item0%3#0 item1%3#0 copy%1#0

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
    block@0: // L45
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_del tmp%0#0 "l1")
        let tmp%1#0: bytes[32] = (txn Sender)
        (app_local_del tmp%1#0 "localUint2")
        let tmp%2#0: bytes[32] = (txn Sender)
        (app_local_del tmp%2#0 "b1")
        let tmp%3#0: bytes[32] = (txn Sender)
        (app_local_del tmp%3#0 "localBytes2")
        let tmp%4#0: bytes[32] = (txn Sender)
        (app_local_del tmp%4#0 "localEncoded")
        let tmp%5#0: bytes[32] = (txn Sender)
        (app_local_del tmp%5#0 "localTuple")
        let tmp%6#0: bytes[32] = (txn Sender)
        (app_local_del tmp%6#0 "localObject")
        let tmp%7#0: bytes[32] = (txn Sender)
        (app_local_del tmp%7#0 "localMutableObject")
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 