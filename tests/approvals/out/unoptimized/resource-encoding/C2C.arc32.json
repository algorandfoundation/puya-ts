{
    "hints": {
        "testCallToIndex(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testCallToValue(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testCallToEchoResource()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCA4IDEgNgogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4IDB4MDEKICAgIGIgbWFpbl9ibG9ja0AwCgptYWluX2Jsb2NrQDA6CiAgICBiIG1haW5fYmxvY2tAMQoKbWFpbl9ibG9ja0AxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjIKICAgIC8vIGNsYXNzIEMyQyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGJ6IG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEwCiAgICBiIG1haW5fYWJpX3JvdXRpbmdAMgoKbWFpbl9hYmlfcm91dGluZ0AyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjIKICAgIC8vIGNsYXNzIEMyQyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGJ6IG1haW5fY3JlYXRlX05vT3BAOAogICAgYiBtYWluX2NhbGxfTm9PcEAzCgptYWluX2NhbGxfTm9PcEAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjIKICAgIC8vIGNsYXNzIEMyQyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIHB1c2hieXRlcyAweDEzNGM3NmE4IC8vIG1ldGhvZCAidGVzdENhbGxUb0luZGV4KGFkZHJlc3MsdWludDY0KXZvaWQiCiAgICBwdXNoYnl0ZXMgMHgwZmVmZDZmNyAvLyBtZXRob2QgInRlc3RDYWxsVG9WYWx1ZShhZGRyZXNzLHVpbnQ2NCl2b2lkIgogICAgcHVzaGJ5dGVzIDB4ZTdiYzBmNTIgLy8gbWV0aG9kICJ0ZXN0Q2FsbFRvRWNob1Jlc291cmNlKCl2b2lkIgogICAgdW5jb3ZlciAzCiAgICBtYXRjaCBtYWluX3Rlc3RDYWxsVG9JbmRleF9yb3V0ZUA0IG1haW5fdGVzdENhbGxUb1ZhbHVlX3JvdXRlQDUgbWFpbl90ZXN0Q2FsbFRvRWNob1Jlc291cmNlX3JvdXRlQDYKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDcKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEA3OgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAOQoKbWFpbl9hZnRlcl9pZl9lbHNlQDk6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQoKbWFpbl9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjIKICAgIC8vIGNsYXNzIEMyQyBleHRlbmRzIENvbnRyYWN0IHsKICAgIGVycgoKbWFpbl90ZXN0Q2FsbFRvRWNob1Jlc291cmNlX3JvdXRlQDY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4MQogICAgLy8gdGVzdENhbGxUb0VjaG9SZXNvdXJjZSgpIHsKICAgIGNhbGxzdWIgdGVzdENhbGxUb0VjaG9SZXNvdXJjZQogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRANwoKbWFpbl90ZXN0Q2FsbFRvVmFsdWVfcm91dGVANToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjcyCiAgICAvLyB0ZXN0Q2FsbFRvVmFsdWUoYWNjb3VudDogQWNjb3VudCwgYXBwSWQ6IEFwcGxpY2F0aW9uKSB7CiAgICBjYWxsc3ViIHRlc3RDYWxsVG9WYWx1ZQogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRANwoKbWFpbl90ZXN0Q2FsbFRvSW5kZXhfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjYzCiAgICAvLyB0ZXN0Q2FsbFRvSW5kZXgoYWNjb3VudDogQWNjb3VudCwgYXBwSWQ6IEFwcGxpY2F0aW9uKSB7CiAgICBjYWxsc3ViIHRlc3RDYWxsVG9JbmRleAogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRANwoKbWFpbl9jcmVhdGVfTm9PcEA4OgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAOQoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMTA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo2MgogICAgLy8gY2xhc3MgQzJDIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb0luZGV4W3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdENhbGxUb0luZGV4OgogICAgYiB0ZXN0Q2FsbFRvSW5kZXhfYmxvY2tAMAoKdGVzdENhbGxUb0luZGV4X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo2MwogICAgLy8gdGVzdENhbGxUb0luZGV4KGFjY291bnQ6IEFjY291bnQsIGFwcElkOiBBcHBsaWNhdGlvbikgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9JbmRleAogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb1ZhbHVlW3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdENhbGxUb1ZhbHVlOgogICAgYiB0ZXN0Q2FsbFRvVmFsdWVfYmxvY2tAMAoKdGVzdENhbGxUb1ZhbHVlX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo3MgogICAgLy8gdGVzdENhbGxUb1ZhbHVlKGFjY291bnQ6IEFjY291bnQsIGFwcElkOiBBcHBsaWNhdGlvbikgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9WYWx1ZQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb0VjaG9SZXNvdXJjZVtyb3V0aW5nXSgpIC0+IHZvaWQ6CnRlc3RDYWxsVG9FY2hvUmVzb3VyY2U6CiAgICBiIHRlc3RDYWxsVG9FY2hvUmVzb3VyY2VfYmxvY2tAMAoKdGVzdENhbGxUb0VjaG9SZXNvdXJjZV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6ODEKICAgIC8vIHRlc3RDYWxsVG9FY2hvUmVzb3VyY2UoKSB7CiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb0VjaG9SZXNvdXJjZQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb0luZGV4KGFjY291bnQ6IGJ5dGVzLCBhcHBJZDogdWludDY0KSAtPiB2b2lkOgp0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9JbmRleDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjYzCiAgICAvLyB0ZXN0Q2FsbFRvSW5kZXgoYWNjb3VudDogQWNjb3VudCwgYXBwSWQ6IEFwcGxpY2F0aW9uKSB7CiAgICBwcm90byAyIDAKICAgIGIgdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvSW5kZXhfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvSW5kZXhfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjY0LTY4CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXMxIH0gPSBhYmlDYWxsKHsKICAgIC8vICAgbWV0aG9kOiBCeUluZGV4LnByb3RvdHlwZS50ZXN0RXhwbGljaXRJbmRleCwKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthY2NvdW50XSwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo2NgogICAgLy8gYXBwSWQsCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjY3CiAgICAvLyBhcmdzOiBbYWNjb3VudF0sCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgQWNjb3VudHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjY0LTY4CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXMxIH0gPSBhYmlDYWxsKHsKICAgIC8vICAgbWV0aG9kOiBCeUluZGV4LnByb3RvdHlwZS50ZXN0RXhwbGljaXRJbmRleCwKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthY2NvdW50XSwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHgzNDM1OWZiNiAvLyBtZXRob2QgInRlc3RFeHBsaWNpdEluZGV4KGFjY291bnQpdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjXzIgLy8gMHgwMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjQtNjgKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlczEgfSA9IGFiaUNhbGwoewogICAgLy8gICBtZXRob2Q6IEJ5SW5kZXgucHJvdG90eXBlLnRlc3RFeHBsaWNpdEluZGV4LAogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2FjY291bnRdLAogICAgLy8gfSkKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvSW5kZXhfbmV4dF90eG5AMQoKdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvSW5kZXhfbmV4dF90eG5AMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjY0LTY4CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXMxIH0gPSBhYmlDYWxsKHsKICAgIC8vICAgbWV0aG9kOiBCeUluZGV4LnByb3RvdHlwZS50ZXN0RXhwbGljaXRJbmRleCwKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthY2NvdW50XSwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBjb3ZlciAxCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGJ0b2kKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjcwCiAgICAvLyBhc3NlcnQocmVzMSA9PT0gYWNjb3VudC5iYWxhbmNlKQogICAgZnJhbWVfZGlnIC0yCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvVmFsdWUoYWNjb3VudDogYnl0ZXMsIGFwcElkOiB1aW50NjQpIC0+IHZvaWQ6CnRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb1ZhbHVlOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzIKICAgIC8vIHRlc3RDYWxsVG9WYWx1ZShhY2NvdW50OiBBY2NvdW50LCBhcHBJZDogQXBwbGljYXRpb24pIHsKICAgIHByb3RvIDIgMAogICAgYiB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9WYWx1ZV9ibG9ja0AwCgp0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9WYWx1ZV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzMtNzYKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlczEgfSA9IGFiaUNhbGw8dHlwZW9mIEJ5VmFsdWUucHJvdG90eXBlLnRlc3RFeHBsaWNpdFZhbHVlPih7CiAgICAvLyAgIGFwcElkLAogICAgLy8gICBhcmdzOiBbYWNjb3VudF0sCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzQKICAgIC8vIGFwcElkLAogICAgZnJhbWVfZGlnIC0xCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo3NQogICAgLy8gYXJnczogW2FjY291bnRdLAogICAgZnJhbWVfZGlnIC0yCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo3My03NgogICAgLy8gY29uc3QgeyByZXR1cm5WYWx1ZTogcmVzMSB9ID0gYWJpQ2FsbDx0eXBlb2YgQnlWYWx1ZS5wcm90b3R5cGUudGVzdEV4cGxpY2l0VmFsdWU+KHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthY2NvdW50XSwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHhkNzMwOGExMyAvLyBtZXRob2QgInRlc3RFeHBsaWNpdFZhbHVlKGFkZHJlc3MpdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvVmFsdWVfbmV4dF90eG5AMQoKdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvVmFsdWVfbmV4dF90eG5AMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjczLTc2CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXMxIH0gPSBhYmlDYWxsPHR5cGVvZiBCeVZhbHVlLnByb3RvdHlwZS50ZXN0RXhwbGljaXRWYWx1ZT4oewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2FjY291bnRdLAogICAgLy8gfSkKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIGNvdmVyIDEKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgYnRvaQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzgKICAgIC8vIGFzc2VydChyZXMxID09PSBhY2NvdW50LmJhbGFuY2UpCiAgICBmcmFtZV9kaWcgLTIKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9FY2hvUmVzb3VyY2UoKSAtPiB2b2lkOgp0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9FY2hvUmVzb3VyY2U6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4MQogICAgLy8gdGVzdENhbGxUb0VjaG9SZXNvdXJjZSgpIHsKICAgIHByb3RvIDAgMAogICAgYnl0ZWNfMSAvLyAiIgogICAgYnl0ZWNfMSAvLyAiIgogICAgYiB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9FY2hvUmVzb3VyY2VfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvRWNob1Jlc291cmNlX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4NAogICAgLy8gY29uc3QgYXBwSWQgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6ODIKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoRWNob1Jlc291cmNlKQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRXh0cmFQcm9ncmFtUGFnZXMKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIExvY2FsTnVtVWludAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgTG9jYWxOdW1CeXRlU2xpY2UKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEdsb2JhbE51bUJ5dGVTbGljZQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtVWludAogICAgcHVzaGJ5dGVzIGJhc2U2NChDMElBQUlFQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzEgLy8gMHgKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDeUFFQUFFQ0F5WUNCQlVmZkhVQVFnQUFRZ0FBTVJzaUUwRUFRa0lBQURFWkloSkVNUmdpRTBFQU1FSUFBRFlhQUlBRWQrS05kSUFFVFRjQ2RrOENqZ0lBRUFBS1FnQUFRZ0FBUWdBQUFJZ0FRRUwvODRnQUZVTC83VUwvN1RFWkloSXhHQ0lTRUVTSUFLUWpRMElBQURZYUFSZkFNRFlhQWhmQU1qWWFBeGZBSEU4Q1R3SlBBb2dBSlNoUEFWQ3dJME5DQUFBMkdnRVhOaG9DRnpZYUEwOENUd0pQQW9nQU9paFBBVkN3STBPS0F3RkNBQUFqd0JvWHdEQ0wvUkpFSk1BYUY4QXlpLzRTUkNYQUdoZkFISXYvRWtTTC9SWXBUd0ZRaS80V1VJdi9VSW1LQXdGQ0FBQWp3Qm9YaS8wU1JDVEFHaGVML2hKRUpjQWFpLzhTUkl2OUZpbFBBVkNML2haUWkvOVFpVUlBQUlrPSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGJ5dGVjXzEgLy8gMHgKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjg0CiAgICAvLyBjb25zdCBhcHBJZCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvRWNob1Jlc291cmNlX25leHRfdHhuQDEKCnRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb0VjaG9SZXNvdXJjZV9uZXh0X3R4bkAxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6ODQKICAgIC8vIGNvbnN0IGFwcElkID0gY29tcGlsZWQuYmFyZUNyZWF0ZSgpLmNyZWF0ZWRBcHAKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBcHBsaWNhdGlvbklECiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjg1LTkxCiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkuY3JlYXRlZEFzc2V0CiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4OQogICAgLy8gYXNzZXROYW1lOiAnVEVTVCcsCiAgICBwdXNoYnl0ZXMgIlRFU1QiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6ODgKICAgIC8vIHVuaXROYW1lOiAnVCcsCiAgICBwdXNoYnl0ZXMgIlQiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjg3CiAgICAvLyB0b3RhbDogMSwKICAgIGludGNfMiAvLyAxCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjg1LTkwCiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9FY2hvUmVzb3VyY2VfbmV4dF90eG5AMgoKdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvRWNob1Jlc291cmNlX25leHRfdHhuQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4NS05MQogICAgLy8gY29uc3QgYXNzZXQgPSBpdHhuCiAgICAvLyAgIC5hc3NldENvbmZpZyh7CiAgICAvLyAgICAgdG90YWw6IDEsCiAgICAvLyAgICAgdW5pdE5hbWU6ICdUJywKICAgIC8vICAgICBhc3NldE5hbWU6ICdURVNUJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpLmNyZWF0ZWRBc3NldAogICAgaXR4bl9zdWJtaXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjkxCiAgICAvLyAuc3VibWl0KCkuY3JlYXRlZEFzc2V0CiAgICBpdHhuIENyZWF0ZWRBc3NldElECiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4NS05MQogICAgLy8gY29uc3QgYXNzZXQgPSBpdHhuCiAgICAvLyAgIC5hc3NldENvbmZpZyh7CiAgICAvLyAgICAgdG90YWw6IDEsCiAgICAvLyAgICAgdW5pdE5hbWU6ICdUJywKICAgIC8vICAgICBhc3NldE5hbWU6ICdURVNUJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpLmNyZWF0ZWRBc3NldAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjkzLTk2CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiBpbmRleGVzIH0gPSBjb21waWxlZC5jYWxsLmVjaG9SZXNvdXJjZUJ5SW5kZXgoewogICAgLy8gICBhcmdzOiBbYXNzZXQsIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlcl0sCiAgICAvLyAgIGFwcElkLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjk1CiAgICAvLyBhcHBJZCwKICAgIGZyYW1lX2RpZyAwCiAgICBjb3ZlciAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo5NAogICAgLy8gYXJnczogW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBjb3ZlciAxCiAgICB0eG4gU2VuZGVyCiAgICBpdHhuX2ZpZWxkIEFjY291bnRzCiAgICBpdHhuX2ZpZWxkIEFzc2V0cwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjkzLTk2CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiBpbmRleGVzIH0gPSBjb21waWxlZC5jYWxsLmVjaG9SZXNvdXJjZUJ5SW5kZXgoewogICAgLy8gICBhcmdzOiBbYXNzZXQsIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlcl0sCiAgICAvLyAgIGFwcElkLAogICAgLy8gfSkKICAgIHB1c2hieXRlcyAweDc3ZTI4ZDc0IC8vIG1ldGhvZCAiZWNob1Jlc291cmNlQnlJbmRleChhc3NldCxhcHBsaWNhdGlvbixhY2NvdW50KSh1aW50NjQsdWludDY0LGFkZHJlc3MpIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hieXRlcyAweDAwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWNfMiAvLyAweDAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWNfMiAvLyAweDAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OTMtOTYKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IGluZGV4ZXMgfSA9IGNvbXBpbGVkLmNhbGwuZWNob1Jlc291cmNlQnlJbmRleCh7CiAgICAvLyAgIGFyZ3M6IFthc3NldCwgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyXSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvRWNob1Jlc291cmNlX25leHRfdHhuQDMKCnRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpDMkMudGVzdENhbGxUb0VjaG9SZXNvdXJjZV9uZXh0X3R4bkAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OTMtOTYKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IGluZGV4ZXMgfSA9IGNvbXBpbGVkLmNhbGwuZWNob1Jlc291cmNlQnlJbmRleCh7CiAgICAvLyAgIGFyZ3M6IFthc3NldCwgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyXSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgY292ZXIgMQogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo5NwogICAgLy8gYXNzZXJ0TWF0Y2goaW5kZXhlcywgW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdKQogICAgcHVzaGludCAzIC8vIDMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgaW50Y18xIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciA0CiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgZGlnIDEKICAgIGludGNfMSAvLyA4CiAgICBpbnRjXzEgLy8gOAogICAgZXh0cmFjdDMKICAgIGJ0b2kKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgPT0KICAgICYmCiAgICB1bmNvdmVyIDEKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGV4dHJhY3QzCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo5OS0xMDIKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlc291cmNlcyB9ID0gY29tcGlsZWQuY2FsbC5lY2hvUmVzb3VyY2VCeVZhbHVlKHsKICAgIC8vICAgYXJnczogW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoxMDEKICAgIC8vIGFwcElkLAogICAgZnJhbWVfZGlnIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjEwMAogICAgLy8gYXJnczogW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdLAogICAgdW5jb3ZlciAxCiAgICBpdG9iCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIGl0b2IKICAgIHR4biBTZW5kZXIKICAgIHVuY292ZXIgMgogICAgY292ZXIgMQogICAgY292ZXIgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OTktMTAyCiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXNvdXJjZXMgfSA9IGNvbXBpbGVkLmNhbGwuZWNob1Jlc291cmNlQnlWYWx1ZSh7CiAgICAvLyAgIGFyZ3M6IFthc3NldCwgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyXSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgcHVzaGJ5dGVzIDB4NGQzNzAyNzYgLy8gbWV0aG9kICJlY2hvUmVzb3VyY2VCeVZhbHVlKHVpbnQ2NCx1aW50NjQsYWRkcmVzcykodWludDY0LHVpbnQ2NCxhZGRyZXNzKSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18zIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLnRlc3RDYWxsVG9FY2hvUmVzb3VyY2VfbmV4dF90eG5ANAoKdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkMyQy50ZXN0Q2FsbFRvRWNob1Jlc291cmNlX25leHRfdHhuQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo5OS0xMDIKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlc291cmNlcyB9ID0gY29tcGlsZWQuY2FsbC5lY2hvUmVzb3VyY2VCeVZhbHVlKHsKICAgIC8vICAgYXJnczogW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBjb3ZlciAxCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjEwNAogICAgLy8gYXNzZXJ0TWF0Y2gocmVzb3VyY2VzLCBbYXNzZXQsIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlcl0pCiAgICBwdXNoaW50IDMgLy8gMwogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzEgLy8gOAogICAgZXh0cmFjdDMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAxCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgZGlnIDEKICAgIGludGNfMSAvLyA4CiAgICBpbnRjXzEgLy8gOAogICAgZXh0cmFjdDMKICAgIGJ0b2kKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgPT0KICAgICYmCiAgICB1bmNvdmVyIDEKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGV4dHJhY3QzCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QzJDLl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZSgpIC0+IHZvaWQ6Cl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZToKICAgIGIgX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlX2Jsb2NrQDAKCl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZV9ibG9ja0AwOgogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "C2C",
        "methods": [
            {
                "name": "testCallToIndex",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    },
                    {
                        "type": "uint64",
                        "name": "appId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testCallToValue",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    },
                    {
                        "type": "uint64",
                        "name": "appId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testCallToEchoResource",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}