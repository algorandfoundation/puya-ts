main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L38
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L38
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L38
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)" => block@4, method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)" => block@5, * => block@6}
    block@4: // echoResourceByIndex_route_L39
        tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByIndex[routing]()
        goto block@6
    block@5: // echoResourceByValue_route_L50
        tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByValue[routing]()
        goto block@6
    block@6: // switch_case_next_L38
        goto block@8
    block@7: // create_NoOp_L38
        goto block@8
    block@8: // after_if_else_L38
        goto block@10
    block@9: // __algots__.defaultCreate_L38
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/resource-encoding.algo.ts::EchoResource.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L38
        exit 0u
    block@11: // after_inlined_tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByIndex[routing]() -> void:
    block@0: // L39
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%1#0: uint64 = ((txnas Assets) tmp%0#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%3#0: uint64 = ((txnas Applications) tmp%2#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let tmp%5#0: account = ((txnas Accounts) tmp%4#0)
        let tmp%6#0: Encoded(uint64,uint64,uint8[32]) = tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByIndex(tmp%1#0, tmp%3#0, tmp%5#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
        (log tmp%7#0)
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByValue[routing]() -> void:
    block@0: // L50
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 3)
        let tmp%2#0: account = reinterpret_Encoded(uint8[32])%0#0
        let tmp%3#0: Encoded(uint64,uint64,uint8[32]) = tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByValue(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByIndex(asset: uint64, app: uint64, acc: account) -> Encoded(uint64,uint64,uint8[32]):
    block@0: // L39
        let tmp%0#0: bytes = ((txnas ApplicationArgs) 1u)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let assetIdx#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = ((txnas Assets) assetIdx#0)
        let tmp%3#0: bool = (== asset#0 tmp%2#0)
        (assert tmp%3#0) // expected asset to be passed by index
        let tmp%4#0: bytes = ((txnas ApplicationArgs) 2u)
        let tmp%5#0: uint64 = (btoi tmp%4#0)
        let appIdx#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = ((txnas Applications) appIdx#0)
        let tmp%7#0: bool = (== app#0 tmp%6#0)
        (assert tmp%7#0) // expected application to be passed by index
        let tmp%8#0: bytes = ((txnas ApplicationArgs) 3u)
        let tmp%9#0: uint64 = (btoi tmp%8#0)
        let accIdx#0: uint64 = tmp%9#0
        let tmp%10#0: account = ((txnas Accounts) accIdx#0)
        let tmp%11#0: bool = (== acc#0 tmp%10#0)
        (assert tmp%11#0) // expected account to be passed by index
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob app#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = acc#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0: Encoded(uint64,uint64,uint8[32]) = aggregate%head%2#0
        let tmp%12#0: Encoded(uint64,uint64,uint8[32]) = aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0
        return tmp%12#0

subroutine tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByValue(asset: uint64, app: uint64, acc: account) -> Encoded(uint64,uint64,uint8[32]):
    block@0: // L50
        let tmp%0#0: bytes = ((txnas ApplicationArgs) 1u)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let assetId#0: uint64 = tmp%1#0
        let tmp%2#0: bool = (== asset#0 assetId#0)
        (assert tmp%2#0) // expected asset to be passed by value
        let tmp%3#0: bytes = ((txnas ApplicationArgs) 2u)
        let tmp%4#0: uint64 = (btoi tmp%3#0)
        let appId#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (== app#0 appId#0)
        (assert tmp%5#0) // expected application to be passed by value
        let tmp%6#0: bytes = ((txnas ApplicationArgs) 3u)
        let address#0: bytes = tmp%6#0
        let reinterpret_account%0#0: account = address#0
        let tmp%7#0: bool = (== acc#0 reinterpret_account%0#0)
        (assert tmp%7#0) // expected account to be passed by value
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob app#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = acc#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0: Encoded(uint64,uint64,uint8[32]) = aggregate%head%2#0
        let tmp%8#0: Encoded(uint64,uint64,uint8[32]) = aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0
        return tmp%8#0

subroutine tests/approvals/resource-encoding.algo.ts::EchoResource.__algots__.defaultCreate() -> void:
    block@0: // L38
        return 