{
    "name": "Foreign",
    "structs": {},
    "methods": [
        {
            "name": "testExplicitForeign",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testImplicitValue",
            "args": [
                {
                    "type": "address",
                    "name": "account",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Should implicitly use 'value' encoding inherited from the compiler options (and not inherit from the base contract)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBaseForeign",
            "args": [
                {
                    "type": "account",
                    "name": "account",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Should inherit encoding from contract decorator",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        56,
                        84,
                        109
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        163,
                        172,
                        181
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        148
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        61,
                        89,
                        114
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUKCm1haW5fYmxvY2tAMDoKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI3CiAgICAvLyBjbGFzcyBGb3JlaWduIGV4dGVuZHMgQmFzZUZvcmVpZ24gewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAoKbWFpbl9hYmlfcm91dGluZ0AyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjcKICAgIC8vIGNsYXNzIEZvcmVpZ24gZXh0ZW5kcyBCYXNlRm9yZWlnbiB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBwdXNoYnl0ZXMgMHgxMTVmZjM0MiAvLyBtZXRob2QgInRlc3RFeHBsaWNpdEZvcmVpZ24oYWNjb3VudCl1aW50NjQiCiAgICBwdXNoYnl0ZXMgMHgxMjljMzMyMSAvLyBtZXRob2QgInRlc3RJbXBsaWNpdFZhbHVlKGFkZHJlc3MpdWludDY0IgogICAgcHVzaGJ5dGVzIDB4ZDAyNGFiOGUgLy8gbWV0aG9kICJ0ZXN0QmFzZUZvcmVpZ24oYWNjb3VudCl1aW50NjQiCiAgICB1bmNvdmVyIDMKICAgIG1hdGNoIG1haW5fdGVzdEV4cGxpY2l0Rm9yZWlnbl9yb3V0ZUAzIG1haW5fdGVzdEltcGxpY2l0VmFsdWVfcm91dGVANCBtYWluX3Rlc3RCYXNlRm9yZWlnbl9yb3V0ZUA1CgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRANjoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEA3OgoKbWFpbl9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjcKICAgIC8vIGNsYXNzIEZvcmVpZ24gZXh0ZW5kcyBCYXNlRm9yZWlnbiB7CiAgICBpbnRjXzAgLy8gMAoKbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEzOgogICAgcmV0dXJuCgptYWluX3Rlc3RCYXNlRm9yZWlnbl9yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MTAKICAgIC8vIEBhYmltZXRob2QoeyByZXNvdXJjZUVuY29kaW5nOiAnZm9yZWlnbl9pbmRleCcgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI3CiAgICAvLyBjbGFzcyBGb3JlaWduIGV4dGVuZHMgQmFzZUZvcmVpZ24gewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjEwCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVzb3VyY2VFbmNvZGluZzogJ2ZvcmVpZ25faW5kZXgnIH0pCiAgICBjYWxsc3ViIHRlc3RCYXNlRm9yZWlnbgogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEzCgptYWluX3Rlc3RJbXBsaWNpdFZhbHVlX3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czozNwogICAgLy8gdGVzdEltcGxpY2l0VmFsdWUoYWNjb3VudDogQWNjb3VudCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjcKICAgIC8vIGNsYXNzIEZvcmVpZ24gZXh0ZW5kcyBCYXNlRm9yZWlnbiB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czozNwogICAgLy8gdGVzdEltcGxpY2l0VmFsdWUoYWNjb3VudDogQWNjb3VudCkgewogICAgY2FsbHN1YiB0ZXN0SW1wbGljaXRWYWx1ZQogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEzCgptYWluX3Rlc3RFeHBsaWNpdEZvcmVpZ25fcm91dGVAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI4CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVzb3VyY2VFbmNvZGluZzogJ2ZvcmVpZ25faW5kZXgnIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoyNwogICAgLy8gY2xhc3MgRm9yZWlnbiBleHRlbmRzIEJhc2VGb3JlaWduIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoyOAogICAgLy8gQGFiaW1ldGhvZCh7IHJlc291cmNlRW5jb2Rpbmc6ICdmb3JlaWduX2luZGV4JyB9KQogICAgY2FsbHN1YiB0ZXN0RXhwbGljaXRGb3JlaWduCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkZvcmVpZ24uX19wdXlhX2FyYzRfcm91dGVyX19AMTMKCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoyNwogICAgLy8gY2xhc3MgRm9yZWlnbiBleHRlbmRzIEJhc2VGb3JlaWduIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICBtYXRjaCBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA5CgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRAMTA6CgptYWluX3N3aXRjaF9jYXNlX25leHRAMTE6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMgoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI3CiAgICAvLyBjbGFzcyBGb3JlaWduIGV4dGVuZHMgQmFzZUZvcmVpZ24gewogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICA9PQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBfX2FsZ290c19fLmRlZmF1bHRDcmVhdGUKICAgIGludGNfMSAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6Rm9yZWlnbi5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMwoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLnRlc3RFeHBsaWNpdEZvcmVpZ24oYWNjb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKdGVzdEV4cGxpY2l0Rm9yZWlnbjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI4LTI5CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVzb3VyY2VFbmNvZGluZzogJ2ZvcmVpZ25faW5kZXgnIH0pCiAgICAvLyB0ZXN0RXhwbGljaXRGb3JlaWduKGFjY291bnQ6IEFjY291bnQpIHsKICAgIHByb3RvIDEgMQoKdGVzdEV4cGxpY2l0Rm9yZWlnbl9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MzAKICAgIC8vIHJldHVybiBhY2NvdW50LmJhbGFuY2UKICAgIGZyYW1lX2RpZyAtMQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLnRlc3RJbXBsaWNpdFZhbHVlKGFjY291bnQ6IGJ5dGVzKSAtPiB1aW50NjQ6CnRlc3RJbXBsaWNpdFZhbHVlOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MzcKICAgIC8vIHRlc3RJbXBsaWNpdFZhbHVlKGFjY291bnQ6IEFjY291bnQpIHsKICAgIHByb3RvIDEgMQoKdGVzdEltcGxpY2l0VmFsdWVfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjM4CiAgICAvLyByZXR1cm4gYWNjb3VudC5iYWxhbmNlCiAgICBmcmFtZV9kaWcgLTEKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6QmFzZUZvcmVpZ24udGVzdEJhc2VGb3JlaWduKGFjY291bnQ6IGJ5dGVzKSAtPiB1aW50NjQ6CnRlc3RCYXNlRm9yZWlnbjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjEwLTExCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVzb3VyY2VFbmNvZGluZzogJ2ZvcmVpZ25faW5kZXgnIH0pCiAgICAvLyB0ZXN0QmFzZUZvcmVpZ24oYWNjb3VudDogQWNjb3VudCkgewogICAgcHJvdG8gMSAxCgp0ZXN0QmFzZUZvcmVpZ25fYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjEyCiAgICAvLyByZXR1cm4gYWNjb3VudC5iYWxhbmNlCiAgICBmcmFtZV9kaWcgLTEKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6Rm9yZWlnbi5fX2FsZ290c19fLmRlZmF1bHRDcmVhdGUoKSAtPiB2b2lkOgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGU6CgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMDoKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmAQQVH3x1MRsiE0EAcjYaAIAEEV/zQoAEEpwzIYAE0CSrjk8DjgMANwAeAAIiQzEZIhJEMRgiE0Q2GgEXwByIAGcWKExQsCNC/+MxGSISRDEYIhNENhoBiABFFihMULAjQv/KMRkiEkQxGCITRDYaARfAHIgAIBYoTFCwI0L/rjEZIkyOAQADQv+iMRgiEkSIAB8jQv+XigEBi/9zAESJigEBi/9zAESJigEBi/9zAESJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}