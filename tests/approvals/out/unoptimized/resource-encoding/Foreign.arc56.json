{
    "name": "Foreign",
    "structs": {},
    "methods": [
        {
            "name": "testExplicitForeign",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testImplicitValue",
            "args": [
                {
                    "type": "address",
                    "name": "account",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Should implicitly use 'value' encoding inherited from the compiler options (and not inherit from the base contract)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBaseForeign",
            "args": [
                {
                    "type": "account",
                    "name": "account",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Should inherit encoding from contract decorator",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        56,
                        84,
                        109
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        163,
                        172,
                        181
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        148
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        61,
                        89,
                        114
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUKCm1haW5fYmxvY2tAMDoKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI3CiAgICAvLyBjbGFzcyBGb3JlaWduIGV4dGVuZHMgQmFzZUZvcmVpZ24gewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAoKbWFpbl9hYmlfcm91dGluZ0AyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjcKICAgIC8vIGNsYXNzIEZvcmVpZ24gZXh0ZW5kcyBCYXNlRm9yZWlnbiB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBwdXNoYnl0ZXMgMHgxMTVmZjM0MiAvLyBtZXRob2QgInRlc3RFeHBsaWNpdEZvcmVpZ24oYWNjb3VudCl1aW50NjQiCiAgICBwdXNoYnl0ZXMgMHgxMjljMzMyMSAvLyBtZXRob2QgInRlc3RJbXBsaWNpdFZhbHVlKGFkZHJlc3MpdWludDY0IgogICAgcHVzaGJ5dGVzIDB4ZDAyNGFiOGUgLy8gbWV0aG9kICJ0ZXN0QmFzZUZvcmVpZ24oYWNjb3VudCl1aW50NjQiCiAgICB1bmNvdmVyIDMKICAgIG1hdGNoIG1haW5fdGVzdEV4cGxpY2l0Rm9yZWlnbl9yb3V0ZUAzIG1haW5fdGVzdEltcGxpY2l0VmFsdWVfcm91dGVANCBtYWluX3Rlc3RCYXNlRm9yZWlnbl9yb3V0ZUA1CgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRANjoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEA3OgoKbWFpbl9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjcKICAgIC8vIGNsYXNzIEZvcmVpZ24gZXh0ZW5kcyBCYXNlRm9yZWlnbiB7CiAgICBpbnRjXzAgLy8gMAoKbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEzOgogICAgcmV0dXJuCgptYWluX3Rlc3RCYXNlRm9yZWlnbl9yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MTEKICAgIC8vIHRlc3RCYXNlRm9yZWlnbihhY2NvdW50OiBBY2NvdW50KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoyNwogICAgLy8gY2xhc3MgRm9yZWlnbiBleHRlbmRzIEJhc2VGb3JlaWduIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoxMQogICAgLy8gdGVzdEJhc2VGb3JlaWduKGFjY291bnQ6IEFjY291bnQpIHsKICAgIGNhbGxzdWIgdGVzdEJhc2VGb3JlaWduCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkZvcmVpZ24uX19wdXlhX2FyYzRfcm91dGVyX19AMTMKCm1haW5fdGVzdEltcGxpY2l0VmFsdWVfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjM3CiAgICAvLyB0ZXN0SW1wbGljaXRWYWx1ZShhY2NvdW50OiBBY2NvdW50KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czoyNwogICAgLy8gY2xhc3MgRm9yZWlnbiBleHRlbmRzIEJhc2VGb3JlaWduIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjM3CiAgICAvLyB0ZXN0SW1wbGljaXRWYWx1ZShhY2NvdW50OiBBY2NvdW50KSB7CiAgICBjYWxsc3ViIHRlc3RJbXBsaWNpdFZhbHVlCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkZvcmVpZ24uX19wdXlhX2FyYzRfcm91dGVyX19AMTMKCm1haW5fdGVzdEV4cGxpY2l0Rm9yZWlnbl9yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjgKICAgIC8vIEBhYmltZXRob2QoeyByZXNvdXJjZUVuY29kaW5nOiAnZm9yZWlnbl9pbmRleCcgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI3CiAgICAvLyBjbGFzcyBGb3JlaWduIGV4dGVuZHMgQmFzZUZvcmVpZ24gewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI4CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVzb3VyY2VFbmNvZGluZzogJ2ZvcmVpZ25faW5kZXgnIH0pCiAgICBjYWxsc3ViIHRlc3RFeHBsaWNpdEZvcmVpZ24KICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo6Rm9yZWlnbi5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMwoKbWFpbl9iYXJlX3JvdXRpbmdAODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjI3CiAgICAvLyBjbGFzcyBGb3JlaWduIGV4dGVuZHMgQmFzZUZvcmVpZ24gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIG1hdGNoIG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDkKCm1haW5fc3dpdGNoX2Nhc2VfZGVmYXVsdEAxMDoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEAxMToKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDEyCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjcKICAgIC8vIGNsYXNzIEZvcmVpZ24gZXh0ZW5kcyBCYXNlRm9yZWlnbiB7CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgID09CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZQogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEzCgoKLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkZvcmVpZ24udGVzdEV4cGxpY2l0Rm9yZWlnbihhY2NvdW50OiBieXRlcykgLT4gdWludDY0Ogp0ZXN0RXhwbGljaXRGb3JlaWduOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MjgtMjkKICAgIC8vIEBhYmltZXRob2QoeyByZXNvdXJjZUVuY29kaW5nOiAnZm9yZWlnbl9pbmRleCcgfSkKICAgIC8vIHRlc3RFeHBsaWNpdEZvcmVpZ24oYWNjb3VudDogQWNjb3VudCkgewogICAgcHJvdG8gMSAxCgp0ZXN0RXhwbGljaXRGb3JlaWduX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czozMAogICAgLy8gcmV0dXJuIGFjY291bnQuYmFsYW5jZQogICAgZnJhbWVfZGlnIC0xCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6OkZvcmVpZ24udGVzdEltcGxpY2l0VmFsdWUoYWNjb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKdGVzdEltcGxpY2l0VmFsdWU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czozNwogICAgLy8gdGVzdEltcGxpY2l0VmFsdWUoYWNjb3VudDogQWNjb3VudCkgewogICAgcHJvdG8gMSAxCgp0ZXN0SW1wbGljaXRWYWx1ZV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MzgKICAgIC8vIHJldHVybiBhY2NvdW50LmJhbGFuY2UKICAgIGZyYW1lX2RpZyAtMQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpCYXNlRm9yZWlnbi50ZXN0QmFzZUZvcmVpZ24oYWNjb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKdGVzdEJhc2VGb3JlaWduOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MTEKICAgIC8vIHRlc3RCYXNlRm9yZWlnbihhY2NvdW50OiBBY2NvdW50KSB7CiAgICBwcm90byAxIDEKCnRlc3RCYXNlRm9yZWlnbl9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6MTIKICAgIC8vIHJldHVybiBhY2NvdW50LmJhbGFuY2UKICAgIGZyYW1lX2RpZyAtMQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjpGb3JlaWduLl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZSgpIC0+IHZvaWQ6Cl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZToKCl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZV9ibG9ja0AwOgogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmAQQVH3x1MRsiE0EAcjYaAIAEEV/zQoAEEpwzIYAE0CSrjk8DjgMANwAeAAIiQzEZIhJEMRgiE0Q2GgEXwByIAGcWKExQsCNC/+MxGSISRDEYIhNENhoBiABFFihMULAjQv/KMRkiEkQxGCITRDYaARfAHIgAIBYoTFCwI0L/rjEZIkyOAQADQv+iMRgiEkSIAB8jQv+XigEBi/9zAESJigEBi/9zAESJigEBi/9zAESJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}