{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[1024]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        154,
                        174,
                        195,
                        218,
                        264,
                        285,
                        328,
                        349,
                        373,
                        390,
                        410,
                        427,
                        448,
                        469
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2073
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        704,
                        862,
                        957,
                        1069,
                        1148,
                        1464,
                        1607,
                        1621,
                        1810,
                        1916
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        501
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        159,
                        179,
                        200,
                        223,
                        269,
                        290,
                        333,
                        354,
                        378,
                        395,
                        415,
                        432,
                        453,
                        474
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        644,
                        660,
                        678,
                        696,
                        715,
                        734,
                        785,
                        801,
                        819,
                        837,
                        853,
                        897,
                        913,
                        931,
                        949,
                        1009,
                        1025,
                        1043,
                        1061,
                        1088,
                        1104,
                        1122,
                        1140,
                        1282,
                        1298,
                        1316,
                        1334,
                        1350,
                        1367,
                        1385,
                        1403,
                        1419,
                        1437,
                        1455,
                        1527,
                        1536,
                        1553,
                        1567,
                        1583,
                        1599,
                        1617,
                        1725,
                        1740,
                        1756,
                        1772,
                        1787,
                        1803,
                        1882,
                        1904,
                        2032,
                        2060,
                        2070
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        750,
                        1167,
                        1195,
                        1245,
                        1672,
                        1690
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgOCAwIDEgNAogICAgYnl0ZWNibG9jayAweCAweDAwMDAwMDdiIDB4MTUxZjdjNzUgMHgwMAoKbWFpbl9ibG9ja0AwOgoKbWFpbl9ibG9ja0AxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgTmF0aXZlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDE5CgptYWluX2FiaV9yb3V0aW5nQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgcHVzaGJ5dGVzIDB4MGY0YzExY2EgLy8gbWV0aG9kICJidWlsZEFycmF5KCl1aW50NjRbXSIKICAgIHB1c2hieXRlcyAweGFhYTI5ZjcwIC8vIG1ldGhvZCAiYXJyYXlGcm9tQ3RvcigpdWludDY0W10iCiAgICBwdXNoYnl0ZXMgMHhlMmQ1ZTAzNSAvLyBtZXRob2QgImJ1aWxkUmVhZG9ubHkoKXVpbnQ2NFtdIgogICAgcHVzaGJ5dGVzIDB4MTNhNTg4YzggLy8gbWV0aG9kICJkb1RoaW5ncygpdm9pZCIKICAgIHB1c2hieXRlcyAweGFkMzNhODdiIC8vIG1ldGhvZCAiZml4ZWRBcnJheSh1aW50NjRbMTAyNF0pdm9pZCIKICAgIHB1c2hieXRlcyAweDc4N2I1MGIyIC8vIG1ldGhvZCAiYXJjNEludGVyb3AoKXZvaWQiCiAgICBwdXNoYnl0ZXMgMHhlYjg3YTA2NCAvLyBtZXRob2QgInN0cnVjdHMoKHVpbnQ2NCx1aW50NjQpKSh1aW50NjQsdWludDY0KVtdIgogICAgcHVzaGJ5dGVzIDB4YmM2MWQ2YjggLy8gbWV0aG9kICJib29sZWFucygpYm9vbFtdIgogICAgcHVzaGJ5dGVzIDB4OGY1NDQ0NzMgLy8gbWV0aG9kICJib29sZWFuc1N0YXRpYygpKGJvb2wsYm9vbCxib29sKSIKICAgIHB1c2hieXRlcyAweDQzZTdlZTQ1IC8vIG1ldGhvZCAiYXJjNEJvb2xlYW5zKClib29sW10iCiAgICBwdXNoYnl0ZXMgMHhjYmUzYTRmOCAvLyBtZXRob2QgImFyYzRCb29sZWFuc1N0YXRpYygpKGJvb2wsYm9vbCxib29sKSIKICAgIHB1c2hieXRlcyAweDE0M2YyMjNiIC8vIG1ldGhvZCAiYWxpYXNpbmcodWludDY0W10sdWludDY0W10pdm9pZCIKICAgIHB1c2hieXRlcyAweGQ5ODk1NDQyIC8vIG1ldGhvZCAicmVjZWl2ZU11dGFibGUodWludDY0W10pdm9pZCIKICAgIHB1c2hieXRlcyAweGUyMTNmNWI2IC8vIG1ldGhvZCAicmVjZWl2ZVJlYWRvbmx5KHVpbnQ2NFtdKXZvaWQiCiAgICB1bmNvdmVyIDE0CiAgICBtYXRjaCBtYWluX2J1aWxkQXJyYXlfcm91dGVAMyBtYWluX2FycmF5RnJvbUN0b3Jfcm91dGVANCBtYWluX2J1aWxkUmVhZG9ubHlfcm91dGVANSBtYWluX2RvVGhpbmdzX3JvdXRlQDYgbWFpbl9maXhlZEFycmF5X3JvdXRlQDcgbWFpbl9hcmM0SW50ZXJvcF9yb3V0ZUA4IG1haW5fc3RydWN0c19yb3V0ZUA5IG1haW5fYm9vbGVhbnNfcm91dGVAMTAgbWFpbl9ib29sZWFuc1N0YXRpY19yb3V0ZUAxMSBtYWluX2FyYzRCb29sZWFuc19yb3V0ZUAxMiBtYWluX2FyYzRCb29sZWFuc1N0YXRpY19yb3V0ZUAxMyBtYWluX2FsaWFzaW5nX3JvdXRlQDE0IG1haW5fcmVjZWl2ZU11dGFibGVfcm91dGVAMTUgbWFpbl9yZWNlaXZlUmVhZG9ubHlfcm91dGVAMTYKCm1haW5fc3dpdGNoX2Nhc2VfZGVmYXVsdEAxNzoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEAxODoKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAoKbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQ6CiAgICByZXR1cm4KCm1haW5fcmVjZWl2ZVJlYWRvbmx5X3JvdXRlQDE2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMzAKICAgIC8vIHJlY2VpdmVSZWFkb25seShhOiByZWFkb25seSB1aW50NjRbXSkge30KICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEzMAogICAgLy8gcmVjZWl2ZVJlYWRvbmx5KGE6IHJlYWRvbmx5IHVpbnQ2NFtdKSB7fQogICAgY2FsbHN1YiByZWNlaXZlUmVhZG9ubHkKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDI0CgptYWluX3JlY2VpdmVNdXRhYmxlX3JvdXRlQDE1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMjYKICAgIC8vIHJlY2VpdmVNdXRhYmxlKGE6IHVpbnQ2NFtdKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMjYKICAgIC8vIHJlY2VpdmVNdXRhYmxlKGE6IHVpbnQ2NFtdKSB7CiAgICBjYWxsc3ViIHJlY2VpdmVNdXRhYmxlCiAgICBwb3AKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDI0CgptYWluX2FsaWFzaW5nX3JvdXRlQDE0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDAKICAgIC8vIGFsaWFzaW5nKG11dGFibGU6IHVpbnQ2NFtdLCByZWFkT25seTogcmVhZG9ubHkgdWludDY0W10pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwMAogICAgLy8gYWxpYXNpbmcobXV0YWJsZTogdWludDY0W10sIHJlYWRPbmx5OiByZWFkb25seSB1aW50NjRbXSkgewogICAgY2FsbHN1YiBhbGlhc2luZwogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQKCm1haW5fYXJjNEJvb2xlYW5zU3RhdGljX3JvdXRlQDEzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5NgogICAgLy8gYXJjNEJvb2xlYW5zU3RhdGljKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmM0Qm9vbGVhbnNTdGF0aWMKICAgIGNvdmVyIDIKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgc3dhcAogICAgaW50Y18yIC8vIDEKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBzd2FwCiAgICBwdXNoaW50IDIgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQKCm1haW5fYXJjNEJvb2xlYW5zX3JvdXRlQDEyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5MgogICAgLy8gYXJjNEJvb2xlYW5zKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmM0Qm9vbGVhbnMKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDI0CgptYWluX2Jvb2xlYW5zU3RhdGljX3JvdXRlQDExOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4OAogICAgLy8gYm9vbGVhbnNTdGF0aWMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGJvb2xlYW5zU3RhdGljCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICBieXRlY18zIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICBpbnRjXzIgLy8gMQogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AyNAoKbWFpbl9ib29sZWFuc19yb3V0ZUAxMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6ODQKICAgIC8vIGJvb2xlYW5zKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBib29sZWFucwogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQKCm1haW5fc3RydWN0c19yb3V0ZUA5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3NQogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3NQogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICBjYWxsc3ViIHN0cnVjdHMKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDI0CgptYWluX2FyYzRJbnRlcm9wX3JvdXRlQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYyCiAgICAvLyBhcmM0SW50ZXJvcCgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgYXJjNEludGVyb3AKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDI0CgptYWluX2ZpeGVkQXJyYXlfcm91dGVANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTQKICAgIC8vIGZpeGVkQXJyYXkoeTogRml4ZWRBcnJheTx1aW50NjQsIDEwMjQ+KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1NAogICAgLy8gZml4ZWRBcnJheSh5OiBGaXhlZEFycmF5PHVpbnQ2NCwgMTAyND4pIHsKICAgIGNhbGxzdWIgZml4ZWRBcnJheQogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQKCm1haW5fZG9UaGluZ3Nfcm91dGVANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTkKICAgIC8vIGRvVGhpbmdzKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkb1RoaW5ncwogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQKCm1haW5fYnVpbGRSZWFkb25seV9yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNQogICAgLy8gYnVpbGRSZWFkb25seSgpOiBSZWFkb25seUFycmF5PHVpbnQ2ND4gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBidWlsZFJlYWRvbmx5CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AyNAoKbWFpbl9hcnJheUZyb21DdG9yX3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExCiAgICAvLyBhcnJheUZyb21DdG9yKCk6IEFycmF5PHVpbnQ2ND4gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcnJheUZyb21DdG9yCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AyNAoKbWFpbl9idWlsZEFycmF5X3JvdXRlQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcKICAgIC8vIGJ1aWxkQXJyYXkoKTogQXJyYXk8dWludDY0PiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGJ1aWxkQXJyYXkKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDI0CgptYWluX2JhcmVfcm91dGluZ0AxOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gMAogICAgc3dhcAogICAgbWF0Y2ggbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMjAKCm1haW5fc3dpdGNoX2Nhc2VfZGVmYXVsdEAyMToKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMjoKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDIzCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAyMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIDAKICAgID09CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZQogICAgaW50Y18yIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMjQKCgovLyBfcHV5YV9saWIuYXJjNC5keW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplKGFycmF5OiBieXRlcywgZml4ZWRfYnl0ZV9zaXplOiB1aW50NjQpIC0+IGJ5dGVzLCBieXRlczoKZHluYW1pY19hcnJheV9wb3BfZml4ZWRfc2l6ZToKICAgIHByb3RvIDIgMgoKZHluYW1pY19hcnJheV9wb3BfZml4ZWRfc2l6ZV9ibG9ja0AwOgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMAogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBkdXAKICAgIGxlbgogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICBkdXAyCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QzCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJ1aWxkQXJyYXkoKSAtPiBieXRlczoKYnVpbGRBcnJheToKCmJ1aWxkQXJyYXlfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6OAogICAgLy8gcmV0dXJuIFsxLCAyLCAzLCA0XQogICAgaW50Y18yIC8vIDEKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGludCAyIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDQKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDQKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcnJheUZyb21DdG9yKCkgLT4gYnl0ZXM6CmFycmF5RnJvbUN0b3I6CgphcnJheUZyb21DdG9yX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyCiAgICAvLyByZXR1cm4gbmV3IEFycmF5PHVpbnQ2ND4oMSwgMiwgMykKICAgIGludGNfMiAvLyAxCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4CiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYnVpbGRSZWFkb25seSgpIC0+IGJ5dGVzOgpidWlsZFJlYWRvbmx5OgoKYnVpbGRSZWFkb25seV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNgogICAgLy8gcmV0dXJuIFsxLCAyLCAzLCA0XQogICAgaW50Y18yIC8vIDEKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGludCAyIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDQKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDQKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5kb1RoaW5ncygpIC0+IHZvaWQ6CmRvVGhpbmdzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxOQogICAgLy8gZG9UaGluZ3MoKSB7CiAgICBwcm90byAwIDAKICAgIGludGNfMSAvLyAwCgpkb1RoaW5nc19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMAogICAgLy8gbGV0IGFyciA9IHRoaXMuYnVpbGRBcnJheSgpCiAgICBjYWxsc3ViIGJ1aWxkQXJyYXkKICAgIGR1cAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNF0pCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMyAvLyA0CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA2Cgpkb1RoaW5nc19hbmRfY29udGRAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjIKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBpbnRjXzEgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAxCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA2Cgpkb1RoaW5nc19hbmRfY29udGRAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjIKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBpbnRjXzIgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA2Cgpkb1RoaW5nc19hbmRfY29udGRAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjIKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDIgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA2Cgpkb1RoaW5nc19hbmRfY29udGRANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjIKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyA0CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA2Cgpkb1RoaW5nc19ib29sX3RydWVANToKICAgIGludGNfMiAvLyAxCgpkb1RoaW5nc19ib29sX21lcmdlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIyCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjI1CiAgICAvLyBhc3NlcnQoYXJyWzBdID09PSAxKQogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjYKICAgIC8vIGFzc2VydChhcnIuYXQoLTEpISA9PT0gNCkKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gMQogICAgLQogICAgZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjkKICAgIC8vIGFyci5wdXNoKFVpbnQ2NCg1KSkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIHN3YXAKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozMQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNCwgNV0pCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUAxNAoKZG9UaGluZ3NfYW5kX2NvbnRkQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjMxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0LCA1XSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMQogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VAMTQKCmRvVGhpbmdzX2FuZF9jb250ZEA5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozMQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNCwgNV0pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDE0Cgpkb1RoaW5nc19hbmRfY29udGRAMTA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjMxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0LCA1XSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgcHVzaGludCAyIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VAMTQKCmRvVGhpbmdzX2FuZF9jb250ZEAxMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDQsIDVdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyA0CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUAxNAoKZG9UaGluZ3NfYW5kX2NvbnRkQDEyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozMQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNCwgNV0pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMyAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDE0Cgpkb1RoaW5nc19ib29sX3RydWVAMTM6CiAgICBpbnRjXzIgLy8gMQoKZG9UaGluZ3NfYm9vbF9tZXJnZUAxNToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDQsIDVdKQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzQKICAgIC8vIGNvbnN0IHRvcCA9IGFyci5wb3AoKSEKICAgIGZyYW1lX2RpZyAxCiAgICBpbnRjXzAgLy8gOAogICAgY2FsbHN1YiBkeW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplCiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozNQogICAgLy8gYXNzZXJ0KHRvcCA9PT0gNSkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM3CiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDQKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDIxCgpkb1RoaW5nc19hbmRfY29udGRAMTY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM3CiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMQogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VAMjEKCmRvVGhpbmdzX2FuZF9jb250ZEAxNzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzcKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBpbnRjXzIgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUAyMQoKZG9UaGluZ3NfYW5kX2NvbnRkQDE4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozNwogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNF0pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDIxCgpkb1RoaW5nc19hbmRfY29udGRAMTk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM3CiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzMgLy8gNAogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VAMjEKCmRvVGhpbmdzX2Jvb2xfdHJ1ZUAyMDoKICAgIGludGNfMiAvLyAxCgpkb1RoaW5nc19ib29sX21lcmdlQDIyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozNwogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNF0pCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0MAogICAgLy8gYXJyWzFdID0gMTAKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGl0b2IKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0MgogICAgLy8gY29uc3QgYXJyMiA9IGFyci53aXRoKDEsIDUpCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXRvYgogICAgaW50Y18yIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBwdXNoaW50IDIgLy8gMgogICAgKwogICAgZGlnIDIKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0NAogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMTAsIDMsIDRdKQogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzMgLy8gNAogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VAMjgKCmRvVGhpbmdzX2FuZF9jb250ZEAyMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NDQKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0XSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMQogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VAMjgKCmRvVGhpbmdzX2FuZF9jb250ZEAyNDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NDQKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0XSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18yIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUAyOAoKZG9UaGluZ3NfYW5kX2NvbnRkQDI1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0NAogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMTAsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDIgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUAyOAoKZG9UaGluZ3NfYW5kX2NvbnRkQDI2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0NAogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMTAsIDMsIDRdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyA0CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUAyOAoKZG9UaGluZ3NfYm9vbF90cnVlQDI3OgogICAgaW50Y18yIC8vIDEKCmRvVGhpbmdzX2Jvb2xfbWVyZ2VAMjk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ0CiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAxMCwgMywgNF0pCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0NQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyMiwgWzEsIDUsIDMsIDRdKQogICAgZnJhbWVfZGlnIDAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDQKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDM1Cgpkb1RoaW5nc19hbmRfY29udGRAMzA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ1CiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDEKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDM1Cgpkb1RoaW5nc19hbmRfY29udGRAMzE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ1CiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDM1Cgpkb1RoaW5nc19hbmRfY29udGRAMzI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ1CiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDM1Cgpkb1RoaW5nc19hbmRfY29udGRAMzM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ1CiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDQKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDM1Cgpkb1RoaW5nc19ib29sX3RydWVAMzQ6CiAgICBpbnRjXzIgLy8gMQoKZG9UaGluZ3NfYm9vbF9tZXJnZUAzNjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NDUKICAgIC8vIGFzc2VydE1hdGNoKGFycjIsIFsxLCA1LCAzLCA0XSkKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ4CiAgICAvLyBjb25zdCB0MTogW3VpbnQ2NCwgdWludDY0XSA9IFsxMiwgMTNdCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMTMgLy8gMTMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ5CiAgICAvLyBhcnIgPSBhcnIuY29uY2F0KGFycikuY29uY2F0KDExKS5jb25jYXQodDEpCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGludGNfMCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICBkaWcgMQogICAgc3dhcAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGRpZyAxCiAgICBpbnRjXzEgLy8gMAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIGludGNfMCAvLyA4CiAgICBkdXAKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoaW50IDIgLy8gMgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICBleHRyYWN0IDIgMAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGludGNfMCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjUxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAxMCwgMywgNCwgMSwgMTAsIDMsIDQsIDExLCAxMiwgMTNdKQogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDExIC8vIDExCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA0OQoKZG9UaGluZ3NfYW5kX2NvbnRkQDM3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1MQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMTAsIDMsIDQsIDEsIDEwLCAzLCA0LCAxMSwgMTIsIDEzXSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMQogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VANDkKCmRvVGhpbmdzX2FuZF9jb250ZEAzODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMCAvLyAxMAogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VANDkKCmRvVGhpbmdzX2FuZF9jb250ZEAzOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDQ5Cgpkb1RoaW5nc19hbmRfY29udGRANDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjUxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAxMCwgMywgNCwgMSwgMTAsIDMsIDQsIDExLCAxMiwgMTNdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyA0CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA0OQoKZG9UaGluZ3NfYW5kX2NvbnRkQDQxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1MQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMTAsIDMsIDQsIDEsIDEwLCAzLCA0LCAxMSwgMTIsIDEzXSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18zIC8vIDQKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMQogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VANDkKCmRvVGhpbmdzX2FuZF9jb250ZEA0MjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMCAvLyAxMAogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VANDkKCmRvVGhpbmdzX2FuZF9jb250ZEA0MzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgNiAvLyA2CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBieiBkb1RoaW5nc19ib29sX2ZhbHNlQDQ5Cgpkb1RoaW5nc19hbmRfY29udGRANDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjUxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAxMCwgMywgNCwgMSwgMTAsIDMsIDQsIDExLCAxMiwgMTNdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBwdXNoaW50IDcgLy8gNwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyA0CiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA0OQoKZG9UaGluZ3NfYW5kX2NvbnRkQDQ1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1MQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMTAsIDMsIDQsIDEsIDEwLCAzLCA0LCAxMSwgMTIsIDEzXSkKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18wIC8vIDgKICAgIGR1cAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VANDkKCmRvVGhpbmdzX2FuZF9jb250ZEA0NjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgOSAvLyA5CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgIGJ6IGRvVGhpbmdzX2Jvb2xfZmFsc2VANDkKCmRvVGhpbmdzX2FuZF9jb250ZEA0NzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgYnogZG9UaGluZ3NfYm9vbF9mYWxzZUA0OQoKZG9UaGluZ3NfYm9vbF90cnVlQDQ4OgogICAgaW50Y18yIC8vIDEKCmRvVGhpbmdzX2Jvb2xfbWVyZ2VANTA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjUxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAxMCwgMywgNCwgMSwgMTAsIDMsIDQsIDExLCAxMiwgMTNdKQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIHJldHN1YgoKZG9UaGluZ3NfYm9vbF9mYWxzZUA0OToKICAgIGludGNfMSAvLyAwCiAgICBiIGRvVGhpbmdzX2Jvb2xfbWVyZ2VANTAKCmRvVGhpbmdzX2Jvb2xfZmFsc2VAMzU6CiAgICBpbnRjXzEgLy8gMAogICAgYiBkb1RoaW5nc19ib29sX21lcmdlQDM2Cgpkb1RoaW5nc19ib29sX2ZhbHNlQDI4OgogICAgaW50Y18xIC8vIDAKICAgIGIgZG9UaGluZ3NfYm9vbF9tZXJnZUAyOQoKZG9UaGluZ3NfYm9vbF9mYWxzZUAyMToKICAgIGludGNfMSAvLyAwCiAgICBiIGRvVGhpbmdzX2Jvb2xfbWVyZ2VAMjIKCmRvVGhpbmdzX2Jvb2xfZmFsc2VAMTQ6CiAgICBpbnRjXzEgLy8gMAogICAgYiBkb1RoaW5nc19ib29sX21lcmdlQDE1Cgpkb1RoaW5nc19ib29sX2ZhbHNlQDY6CiAgICBpbnRjXzEgLy8gMAogICAgYiBkb1RoaW5nc19ib29sX21lcmdlQDcKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmZpeGVkQXJyYXkoeTogYnl0ZXMpIC0+IHZvaWQ6CmZpeGVkQXJyYXk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjU0CiAgICAvLyBmaXhlZEFycmF5KHk6IEZpeGVkQXJyYXk8dWludDY0LCAxMDI0PikgewogICAgcHJvdG8gMSAwCgpmaXhlZEFycmF5X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjU1CiAgICAvLyBjb25zdCB4ID0gbmV3IEZpeGVkQXJyYXk8dWludDY0LCA0PigxLCAyLCAzLCA0KQogICAgaW50Y18yIC8vIDEKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGludCAyIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDQKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjU2CiAgICAvLyB4WzBdID0gMAogICAgaW50Y18xIC8vIDAKICAgIGl0b2IKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBkdXAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTcKICAgIC8vIGFzc2VydCh4WzBdID09PSB5WzBdKQogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzEgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGZyYW1lX2RpZyAtMQogICAgc3dhcAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1OAogICAgLy8gYXNzZXJ0TWF0Y2goeCwgW3sgbGVzc1RoYW46IDEgfSwgMiwgMywgNF0pCiAgICBpbnRjXzMgLy8gNAogICAgZHVwCiAgICA9PQogICAgYnogZml4ZWRBcnJheV9ib29sX2ZhbHNlQDYKCmZpeGVkQXJyYXlfYW5kX2NvbnRkQDE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjU4CiAgICAvLyBhc3NlcnRNYXRjaCh4LCBbeyBsZXNzVGhhbjogMSB9LCAyLCAzLCA0XSkKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAxCiAgICA8CiAgICBieiBmaXhlZEFycmF5X2Jvb2xfZmFsc2VANgoKZml4ZWRBcnJheV9hbmRfY29udGRAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTgKICAgIC8vIGFzc2VydE1hdGNoKHgsIFt7IGxlc3NUaGFuOiAxIH0sIDIsIDMsIDRdKQogICAgaW50Y18yIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICBieiBmaXhlZEFycmF5X2Jvb2xfZmFsc2VANgoKZml4ZWRBcnJheV9hbmRfY29udGRAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTgKICAgIC8vIGFzc2VydE1hdGNoKHgsIFt7IGxlc3NUaGFuOiAxIH0sIDIsIDMsIDRdKQogICAgcHVzaGludCAyIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBieiBmaXhlZEFycmF5X2Jvb2xfZmFsc2VANgoKZml4ZWRBcnJheV9hbmRfY29udGRANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTgKICAgIC8vIGFzc2VydE1hdGNoKHgsIFt7IGxlc3NUaGFuOiAxIH0sIDIsIDMsIDRdKQogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDQKICAgID09CiAgICBieiBmaXhlZEFycmF5X2Jvb2xfZmFsc2VANgoKZml4ZWRBcnJheV9ib29sX3RydWVANToKICAgIGludGNfMiAvLyAxCgpmaXhlZEFycmF5X2Jvb2xfbWVyZ2VANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTgKICAgIC8vIGFzc2VydE1hdGNoKHgsIFt7IGxlc3NUaGFuOiAxIH0sIDIsIDMsIDRdKQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTkKICAgIC8vIGFzc2VydE1hdGNoKHksIHsgMTAyNDogeyBncmVhdGVyVGhhbkVxOiAwIH0gfSkKICAgIHB1c2hpbnQgMTAyNCAvLyAxMDI0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZnJhbWVfZGlnIC0xCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzEgLy8gMAogICAgPj0KICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICByZXRzdWIKCmZpeGVkQXJyYXlfYm9vbF9mYWxzZUA2OgogICAgaW50Y18xIC8vIDAKICAgIGIgZml4ZWRBcnJheV9ib29sX21lcmdlQDcKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFyYzRJbnRlcm9wKCkgLT4gdm9pZDoKYXJjNEludGVyb3A6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYyCiAgICAvLyBhcmM0SW50ZXJvcCgpIHsKICAgIHByb3RvIDAgMAoKYXJjNEludGVyb3BfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NjUKICAgIC8vIGNvbnN0IGRhMSA9IG5ldyBEeW5hbWljQXJyYXkodTEsIHUxKQogICAgYnl0ZWNfMCAvLyAweAogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDA3YgogICAgY29uY2F0CiAgICBwdXNoaW50IDIgLy8gMgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjY2CiAgICAvLyBjb25zdCBzYTEgPSBuZXcgU3RhdGljQXJyYXkodTEsIHUxKQogICAgYnl0ZWNfMCAvLyAweAogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDA3YgogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4CiAgICBjb25jYXQKICAgIHN3YXAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NjgKICAgIC8vIGxldCBhMSA9IFt1MSwgdTFdCiAgICBieXRlY18wIC8vIDB4CiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4CiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzAKICAgIC8vIGExID0gWy4uLmExLCAuLi5kYTEsIC4uLnNhMV0KICAgIHN3YXAKICAgIGV4dHJhY3QgMiAwCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIGxlbgogICAgaW50Y18zIC8vIDQKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgc3dhcAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGludGNfMyAvLyA0CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGR1cAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3MgogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICBieiBhcmM0SW50ZXJvcF9ib29sX2ZhbHNlQDgKCmFyYzRJbnRlcm9wX2FuZF9jb250ZEAxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3MgogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMyAvLyA0CiAgICAqCiAgICBpbnRjXzMgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICBieiBhcmM0SW50ZXJvcF9ib29sX2ZhbHNlQDgKCmFyYzRJbnRlcm9wX2FuZF9jb250ZEAyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3MgogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18yIC8vIDEKICAgIGludGNfMyAvLyA0CiAgICAqCiAgICBpbnRjXzMgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICBieiBhcmM0SW50ZXJvcF9ib29sX2ZhbHNlQDgKCmFyYzRJbnRlcm9wX2FuZF9jb250ZEAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3MgogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgcHVzaGludCAyIC8vIDIKICAgIGludGNfMyAvLyA0CiAgICAqCiAgICBpbnRjXzMgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICBieiBhcmM0SW50ZXJvcF9ib29sX2ZhbHNlQDgKCmFyYzRJbnRlcm9wX2FuZF9jb250ZEA0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3MgogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMyAvLyA0CiAgICAqCiAgICBpbnRjXzMgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICBieiBhcmM0SW50ZXJvcF9ib29sX2ZhbHNlQDgKCmFyYzRJbnRlcm9wX2FuZF9jb250ZEA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3MgogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18zIC8vIDQKICAgIGR1cAogICAgKgogICAgaW50Y18zIC8vIDQKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICA9PQogICAgYnogYXJjNEludGVyb3BfYm9vbF9mYWxzZUA4CgphcmM0SW50ZXJvcF9hbmRfY29udGRANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzIKICAgIC8vIGFzc2VydE1hdGNoKGExLCBbdTEsIHUxLCB1MSwgdTEsIHUxLCB1MV0pCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpbnRjXzMgLy8gNAogICAgKgogICAgaW50Y18zIC8vIDQKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICA9PQogICAgYnogYXJjNEludGVyb3BfYm9vbF9mYWxzZUA4CgphcmM0SW50ZXJvcF9ib29sX3RydWVANzoKICAgIGludGNfMiAvLyAxCgphcmM0SW50ZXJvcF9ib29sX21lcmdlQDk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcyCiAgICAvLyBhc3NlcnRNYXRjaChhMSwgW3UxLCB1MSwgdTEsIHUxLCB1MSwgdTFdKQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIHJldHN1YgoKYXJjNEludGVyb3BfYm9vbF9mYWxzZUA4OgogICAgaW50Y18xIC8vIDAKICAgIGIgYXJjNEludGVyb3BfYm9vbF9tZXJnZUA5CgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5zdHJ1Y3RzKHA6IGJ5dGVzKSAtPiBieXRlczoKc3RydWN0czoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzUKICAgIC8vIHN0cnVjdHMoeyB4LCB5IH06IFZlY3RvcikgewogICAgcHJvdG8gMSAxCgpzdHJ1Y3RzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjc1CiAgICAvLyBzdHJ1Y3RzKHsgeCwgeSB9OiBWZWN0b3IpIHsKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18xIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MwogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gOAogICAgZHVwCiAgICBleHRyYWN0MwogICAgYnRvaQogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBjb3ZlciAyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGNvdmVyIDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzgKICAgIC8vIG15VmVjdG9ycyA9IFt7IHgsIHkgfV0KICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4CiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgaW50Y18yIC8vIDEKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjgwCiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFt7IHgsIHkgfV0pCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyAxCiAgICA9PQogICAgYnogc3RydWN0c19ib29sX2ZhbHNlQDQKCnN0cnVjdHNfYW5kX2NvbnRkQDE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjgwCiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFt7IHgsIHkgfV0pCiAgICBmcmFtZV9kaWcgMgogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMSAvLyAwCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICAqCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAwCiAgICA9PQogICAgYnogc3RydWN0c19ib29sX2ZhbHNlQDQKCnN0cnVjdHNfYW5kX2NvbnRkQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjgwCiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFt7IHgsIHkgfV0pCiAgICBmcmFtZV9kaWcgMgogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMSAvLyAwCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICAqCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGludGNfMCAvLyA4CiAgICBkdXAKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICBmcmFtZV9kaWcgMQogICAgPT0KICAgIGJ6IHN0cnVjdHNfYm9vbF9mYWxzZUA0CgpzdHJ1Y3RzX2Jvb2xfdHJ1ZUAzOgogICAgaW50Y18yIC8vIDEKCnN0cnVjdHNfYm9vbF9tZXJnZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4MAogICAgLy8gYXNzZXJ0TWF0Y2gobXlWZWN0b3JzLCBbeyB4LCB5IH1dKQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6ODEKICAgIC8vIHJldHVybiBteVZlY3RvcnMKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKc3RydWN0c19ib29sX2ZhbHNlQDQ6CiAgICBpbnRjXzEgLy8gMAogICAgYiBzdHJ1Y3RzX2Jvb2xfbWVyZ2VANQoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYm9vbGVhbnMoKSAtPiBieXRlczoKYm9vbGVhbnM6Cgpib29sZWFuc19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4NQogICAgLy8gcmV0dXJuIFt0cnVlLCBmYWxzZSwgdHJ1ZV0KICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMiAvLyAxCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgaW50Y18yIC8vIDEKICAgIGludGNfMSAvLyAwCiAgICBzZXRiaXQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpbnRjXzIgLy8gMQogICAgc2V0Yml0CiAgICBwdXNoaW50IDMgLy8gMwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJvb2xlYW5zU3RhdGljKCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NDoKYm9vbGVhbnNTdGF0aWM6Cgpib29sZWFuc1N0YXRpY19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4OQogICAgLy8gcmV0dXJuIFt0cnVlLCBmYWxzZSwgdHJ1ZV0gYXMgY29uc3QKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzEgLy8gMAogICAgaW50Y18yIC8vIDEKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEJvb2xlYW5zKCkgLT4gYnl0ZXM6CmFyYzRCb29sZWFuczoKCmFyYzRCb29sZWFuc19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5MwogICAgLy8gcmV0dXJuIFtuZXcgQm9vbCh0cnVlKSwgbmV3IEJvb2woZmFsc2UpLCBuZXcgQm9vbCh0cnVlKV0KICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMiAvLyAxCiAgICBzZXRiaXQKICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgc2V0Yml0CiAgICBieXRlY18zIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzIgLy8gMQogICAgc2V0Yml0CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgc3dhcAogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgc3dhcAogICAgaW50Y18yIC8vIDEKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBzd2FwCiAgICBwdXNoaW50IDIgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4CiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEJvb2xlYW5zU3RhdGljKCkgLT4gYnl0ZXMsIGJ5dGVzLCBieXRlczoKYXJjNEJvb2xlYW5zU3RhdGljOgoKYXJjNEJvb2xlYW5zU3RhdGljX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjk3CiAgICAvLyByZXR1cm4gW25ldyBCb29sKHRydWUpLCBuZXcgQm9vbChmYWxzZSksIG5ldyBCb29sKHRydWUpXSBhcyBjb25zdAogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgaW50Y18yIC8vIDEKICAgIHNldGJpdAogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgZHVwCiAgICBzZXRiaXQKICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIGludGNfMiAvLyAxCiAgICBzZXRiaXQKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYWxpYXNpbmcobXV0YWJsZTogYnl0ZXMsIHJlYWRPbmx5OiBieXRlcykgLT4gdm9pZDoKYWxpYXNpbmc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwMAogICAgLy8gYWxpYXNpbmcobXV0YWJsZTogdWludDY0W10sIHJlYWRPbmx5OiByZWFkb25seSB1aW50NjRbXSkgewogICAgcHJvdG8gMiAwCgphbGlhc2luZ19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDkKICAgIC8vIGNvbnN0IG5lZWRDbG9uZTI6IHJlYWRvbmx5IHVpbnQ2NFtdID0gY2xvbmUobXV0YWJsZSkKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMTEKICAgIC8vIG11dGFibGVbMV0gKz0gMgogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgaW50Y18yIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDIgLy8gMgogICAgKwogICAgaXRvYgogICAgaW50Y18yIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBwdXNoaW50IDIgLy8gMgogICAgKwogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgLTIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTEzCiAgICAvLyBhc3NlcnQobXV0YWJsZVsxXSAhPT0gbmVlZENsb25lMlsxXSwgJ1RoZXNlIHNob3VsZCBub3QgbWF0Y2gnKQogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgc3dhcAogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMiAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgIT0KICAgIGFzc2VydCAvLyBUaGVzZSBzaG91bGQgbm90IG1hdGNoCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExNgogICAgLy8gdGhpcy5yZWNlaXZlTXV0YWJsZShtdXRhYmxlKQogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIHJlY2VpdmVNdXRhYmxlCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgLTIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTE4CiAgICAvLyB0aGlzLnJlY2VpdmVSZWFkb25seShtdXRhYmxlKQogICAgY2FsbHN1YiByZWNlaXZlUmVhZG9ubHkKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTIzCiAgICAvLyB0aGlzLnJlY2VpdmVSZWFkb25seShyZWFkT25seSkKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiByZWNlaXZlUmVhZG9ubHkKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZU11dGFibGUoYTogYnl0ZXMpIC0+IGJ5dGVzOgpyZWNlaXZlTXV0YWJsZToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTI2CiAgICAvLyByZWNlaXZlTXV0YWJsZShhOiB1aW50NjRbXSkgewogICAgcHJvdG8gMSAxCgpyZWNlaXZlTXV0YWJsZV9ibG9ja0AwOgogICAgZnJhbWVfZGlnIC0xCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyNwogICAgLy8gYVswXSA9IDEKICAgIGludGNfMiAvLyAxCiAgICBpdG9iCiAgICBpbnRjXzEgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIHB1c2hpbnQgMiAvLyAyCiAgICArCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGZyYW1lX2J1cnkgLTEKICAgIGludGNfMiAvLyAxCiAgICBieiByZWNlaXZlTXV0YWJsZV9hZnRlcl9pZl9lbHNlQDIKCnJlY2VpdmVNdXRhYmxlX2lmX2JvZHlAMToKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfYnVyeSAwCgpyZWNlaXZlTXV0YWJsZV9hZnRlcl9pZl9lbHNlQDI6CiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlUmVhZG9ubHkoYTogYnl0ZXMpIC0+IHZvaWQ6CnJlY2VpdmVSZWFkb25seToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTMwCiAgICAvLyByZWNlaXZlUmVhZG9ubHkoYTogcmVhZG9ubHkgdWludDY0W10pIHt9CiAgICBwcm90byAxIDAKCnJlY2VpdmVSZWFkb25seV9ibG9ja0AwOgogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5fX2FsZ290c19fLmRlZmF1bHRDcmVhdGUoKSAtPiB2b2lkOgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGU6CgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMDoKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAECAABBCYEAAQAAAB7BBUffHUBADEbIxNBAck2GgCABA9MEcqABKqin3CABOLV4DWABBOliMiABK0zqHuABHh7ULKABOuHoGSABLxh1riABI9URHOABEPn7kWABMvjpPiABBQ/IjuABNmJVEKABOIT9bZPDo4OAT0BKAETAQIA7gDdAMUAsACFAHAAQgArABYAAiNDMRkjEkQxGCMTRDYaAYgHpiRC/+sxGSMSRDEYIxNENhoBiAdxSCRC/9YxGSMSRDEYIxNENhoBNhoCiAcRJEL/vzEZIxJEMRgjE0SIBu1OAkwoTFBMI1NMJE8CVEwjU0yBAk8CVChQKkxQsCRC/5ExGSMSRDEYIxNEiAaSKkxQsCRC/3wxGSMSRDEYIxNEiAZ5TgJMKyNPAlQoTFAkTwJUgQJPAlQoUCpMULAkQv9RMRkjEkQxGCMTRIgGNSpMULAkQv88MRkjEkQxGCMTRDYaAYgFrypMULAkQv8kMRkjEkQxGCMTRIgE3SRC/xMxGSMSRDEYIxNENhoBiARAJEL+/zEZIxJEMRgjE0SIAMkkQv7uMRkjEkQxGCMTRIgAnipMULAkQv7ZMRkjEkQxGCMTRIgAcSpMULAkQv7EMRkjEkQxGCMTRIgAQipMULAkQv6vMRkjTI4BAANC/qMxGCMSRIgGVyRC/piKAgKL/iNZJAkWVwYAi/5MXABJFYv/CUqL/1hOAkwjTwJSiSQWKExQgQIWUIEDFlAlFlAlFlcGAkxQKFCJJBYoTFCBAhZQgQMWUIEDFlcGAkxQKFCJJBYoTFCBAhZQgQMWUCUWUCUWVwYCTFAoUImKAAAjiP+tSSNZJRJBA1OLAVcCACMiCyJYFyQSQQNDiwFXAgAkIgsiWBeBAhJBAzKLAVcCAIECIgsiWBeBAxJBAyCLAVcCAIEDIgsiWBclEkEDDyREiwFJVwIAIyILIlgXJBJESSNZJAlLAVcCAEwiCyJYFyUSRIEFFihMUChQSwFMUEwjWSQIFlcGAkwjTwJdSYwBI1mBBRJBAsKLAVcCACMiCyJYFyQSQQKyiwFXAgAkIgsiWBeBAhJBAqGLAVcCAIECIgsiWBeBAxJBAo+LAVcCAIEDIgsiWBclEkECfosBVwIAJSILIlgXgQUSQQJtJESLASKI/phMF0xJTgKMAYEFEkQjWSUSQQJOiwFXAgAjIgsiWBckEkECPosBVwIAJCILIlgXgQISQQItiwFXAgCBAiILIlgXgQMSQQIbiwFXAgCBAyILIlgXJRJBAgokRIEKFiQiC4ECCIsBTE8CXUmMAYEFFiQiC4ECCEsCTE8CXYwAI1klEkEB2osBVwIAIyILIlgXJBJBAcqLAVcCACQiCyJYF4EKEkEBuYsBVwIAgQIiCyJYF4EDEkEBp4sBVwIAgQMiCyJYFyUSQQGWJESLACNZJRJBAYeLAFcCACMiCyJYFyQSQQF3iwBXAgAkIgsiWBeBBRJBAWaLAFcCAIECIgsiWBeBAxJBAVSLAFcCAIEDIgsiWBclEkEBQyREgQwWKExQgQ0WUChQiwFJVwIAUElXAgAVIgoWVwYCTCNPAl2BCxYoTFAoUEsBTFBMI1kkCBZXBgJMI08CXUsBIyJYF0xPAiJJWBdPAhYoTFBMFlCBAhZXBgJMUChQVwIAUElXAgAVIgoWVwYCTCNPAl1JjAEjWYELEkEAwYsBVwIAIyILIlgXJBJBALGLAVcCACQiCyJYF4EKEkEAoIsBVwIAgQIiCyJYF4EDEkEAjosBVwIAgQMiCyJYFyUSQQB9iwFXAgAlIgsiWBckEkEAbYsBVwIAgQUiCyJYF4EKEkEAW4sBVwIAgQYiCyJYF4EDEkEASYsBVwIAgQciCyJYFyUSQQA4iwFXAgAiSQsiWBeBCxJBACeLAVcCAIEJIgsiWBeBDBJBABWLAVcCAIEKIgsiWBeBDRJBAAMkRIkjQv/6I0L+uiNC/mcjQv3zI0L9kCNC/O6KAQAkFihMUIECFlCBAxZQJRZQKFAjFiMiC08CTE8CXUkjIgsiWBcjIguL/0wiWBcSRCVJEkEATSMiC4sATCJYFyQMQQA/JCILiwBMIlgXgQISQQAwgQIiC4sATCJYF4EDEkEAIIEDIguLAEwiWBclEkEAESREgYAIIguL/0wiWBcjD0SJI0L/7IoAACgpUClQgQIWVwYCTFAoUCgpUClQKFBMKClQKVCBAhZXBgJMUChQTFcCAFBJVwIAFSUKFlcGAkwjTwJdTFBJVwIAFSUKFlcGAkwjTwJdSSNZgQYSQQBgiwBXAgAjJQslWCkSQQBRiwBXAgAkJQslWCkSQQBCiwBXAgCBAiULJVgpEkEAMosAVwIAgQMlCyVYKRJBACKLAFcCACVJCyVYKRJBABOLAFcCAIEFJQslWCkSQQADJESJI0L/+ooBAYv/IyJYF4v/IklYF0xJTgJOAklOAk4CFihMUEwWUChQKExQJBZXBgJMUChQSSNZJBJBADOLAlcCACOBEAuBEFgjIlgXiwASQQAdiwJXAgAjgRALgRBYIklYF4sBEkEAByREiwKMAIkjQv/2KyMkVChMUCQjVIECJFSBAxZXBgJMUChQiSQjJIkrIyRUKyNJVCsjJFRMKE8DUEwjU0wkTwJUTCNTTIECTwJUgQMWVwYCTFAoUIkrIyRUKyNJVCsjJFRPAk8CTwKJigIAi/5JVwIAJCILIlgXgQIIFiQiC4ECCIv+TE8CXUmM/lcCACQiCyJYF0xXAgAkIgsiWBcTRIv+iAAMSYz+iAAni/+IACKJigEBi/8kFiMiC4ECCIv/TE8CXYz/JEEABIv/jACLAEyJigEAiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}