{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "readonlyArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        199,
                        221,
                        245,
                        270,
                        318,
                        342,
                        387,
                        411,
                        438,
                        457,
                        479,
                        498,
                        522,
                        546,
                        570,
                        589
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        5926
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        972,
                        1238,
                        1433,
                        1542,
                        1673,
                        1781,
                        2148,
                        2354,
                        2452,
                        2656,
                        2996,
                        3414,
                        3667,
                        4064,
                        4489,
                        4873,
                        5004,
                        5018,
                        5131,
                        5197,
                        5269,
                        5385,
                        5656,
                        5757
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        626
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        204,
                        226,
                        250,
                        275,
                        323,
                        347,
                        392,
                        416,
                        443,
                        462,
                        484,
                        503,
                        527,
                        551,
                        575,
                        594
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        853,
                        875,
                        897,
                        919,
                        943,
                        966,
                        1162,
                        1184,
                        1206,
                        1230,
                        1252,
                        1278,
                        1333,
                        1355,
                        1377,
                        1401,
                        1425,
                        1466,
                        1488,
                        1510,
                        1534,
                        1557,
                        1572,
                        1596,
                        1618,
                        1641,
                        1665,
                        1698,
                        1722,
                        1747,
                        1773,
                        1905,
                        1927,
                        1950,
                        1974,
                        1998,
                        2021,
                        2045,
                        2069,
                        2092,
                        2116,
                        2140,
                        2254,
                        2276,
                        2298,
                        2322,
                        2346,
                        2407,
                        2420,
                        2433,
                        2447,
                        2476,
                        2500,
                        2524,
                        2549,
                        2574,
                        2599,
                        2624,
                        2649,
                        2716,
                        2738,
                        2760,
                        2784,
                        2808,
                        2832,
                        2855,
                        2878,
                        2900,
                        2923,
                        2946,
                        2969,
                        2991,
                        3056,
                        3078,
                        3100,
                        3124,
                        3148,
                        3172,
                        3195,
                        3219,
                        3242,
                        3266,
                        3289,
                        3313,
                        3337,
                        3361,
                        3385,
                        3408,
                        3479,
                        3501,
                        3523,
                        3546,
                        3569,
                        3592,
                        3615,
                        3639,
                        3661,
                        3732,
                        3754,
                        3776,
                        3799,
                        3822,
                        3845,
                        3869,
                        3893,
                        3916,
                        3939,
                        3963,
                        3987,
                        4011,
                        4035,
                        4058,
                        4131,
                        4153,
                        4176,
                        4200,
                        4224,
                        4247,
                        4271,
                        4295,
                        4318,
                        4342,
                        4366,
                        4390,
                        4413,
                        4436,
                        4460,
                        4483,
                        4541,
                        4563,
                        4586,
                        4610,
                        4634,
                        4657,
                        4681,
                        4705,
                        4728,
                        4752,
                        4776,
                        4800,
                        4823,
                        4846,
                        4868,
                        4909,
                        4930,
                        4940,
                        4957,
                        4970,
                        4983,
                        4998,
                        5014,
                        5061,
                        5080,
                        5105,
                        5121,
                        5167,
                        5187,
                        5222,
                        5237,
                        5250,
                        5264,
                        5281,
                        5293,
                        5306,
                        5320,
                        5336,
                        5351,
                        5364,
                        5379,
                        5392,
                        5535,
                        5558,
                        5581,
                        5605,
                        5629,
                        5652,
                        5718,
                        5743,
                        5875,
                        5891,
                        5906,
                        5923,
                        5965
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        782,
                        816,
                        998,
                        1113,
                        1295,
                        1808,
                        1842,
                        1861,
                        2176,
                        2210,
                        2369,
                        2672,
                        3012,
                        3435,
                        3688,
                        4080,
                        4490,
                        5462,
                        5488
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}