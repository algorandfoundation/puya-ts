{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "readonlyArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        46
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        310
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        5895
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        941,
                        1207,
                        1402,
                        1511,
                        1642,
                        1750,
                        2117,
                        2323,
                        2421,
                        2625,
                        2965,
                        3383,
                        3636,
                        4033,
                        4458,
                        4842,
                        4973,
                        4987,
                        5100,
                        5166,
                        5238,
                        5354,
                        5625,
                        5726
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        822,
                        844,
                        866,
                        888,
                        912,
                        935,
                        1131,
                        1153,
                        1175,
                        1199,
                        1221,
                        1247,
                        1302,
                        1324,
                        1346,
                        1370,
                        1394,
                        1435,
                        1457,
                        1479,
                        1503,
                        1526,
                        1541,
                        1565,
                        1587,
                        1610,
                        1634,
                        1667,
                        1691,
                        1716,
                        1742,
                        1874,
                        1896,
                        1919,
                        1943,
                        1967,
                        1990,
                        2014,
                        2038,
                        2061,
                        2085,
                        2109,
                        2223,
                        2245,
                        2267,
                        2291,
                        2315,
                        2376,
                        2389,
                        2402,
                        2416,
                        2445,
                        2469,
                        2493,
                        2518,
                        2543,
                        2568,
                        2593,
                        2618,
                        2685,
                        2707,
                        2729,
                        2753,
                        2777,
                        2801,
                        2824,
                        2847,
                        2869,
                        2892,
                        2915,
                        2938,
                        2960,
                        3025,
                        3047,
                        3069,
                        3093,
                        3117,
                        3141,
                        3164,
                        3188,
                        3211,
                        3235,
                        3258,
                        3282,
                        3306,
                        3330,
                        3354,
                        3377,
                        3448,
                        3470,
                        3492,
                        3515,
                        3538,
                        3561,
                        3584,
                        3608,
                        3630,
                        3701,
                        3723,
                        3745,
                        3768,
                        3791,
                        3814,
                        3838,
                        3862,
                        3885,
                        3908,
                        3932,
                        3956,
                        3980,
                        4004,
                        4027,
                        4100,
                        4122,
                        4145,
                        4169,
                        4193,
                        4216,
                        4240,
                        4264,
                        4287,
                        4311,
                        4335,
                        4359,
                        4382,
                        4405,
                        4429,
                        4452,
                        4510,
                        4532,
                        4555,
                        4579,
                        4603,
                        4626,
                        4650,
                        4674,
                        4697,
                        4721,
                        4745,
                        4769,
                        4792,
                        4815,
                        4837,
                        4878,
                        4899,
                        4909,
                        4926,
                        4939,
                        4952,
                        4967,
                        4983,
                        5030,
                        5049,
                        5074,
                        5090,
                        5136,
                        5156,
                        5191,
                        5206,
                        5219,
                        5233,
                        5250,
                        5262,
                        5275,
                        5289,
                        5305,
                        5320,
                        5333,
                        5348,
                        5361,
                        5504,
                        5527,
                        5550,
                        5574,
                        5598,
                        5621,
                        5687,
                        5712,
                        5844,
                        5860,
                        5875,
                        5892,
                        5934
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        654,
                        669,
                        692,
                        715
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint64[])"
                },
                {
                    "pc": [
                        529
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64)"
                },
                {
                    "pc": [
                        504
                    ],
                    "errorMessage": "invalid number of bytes for uint64[50]"
                },
                {
                    "pc": [
                        751,
                        785,
                        967,
                        1082,
                        1264,
                        1777,
                        1811,
                        1830,
                        2145,
                        2179,
                        2338,
                        2641,
                        2981,
                        3404,
                        3657,
                        4049,
                        4459,
                        5431,
                        5457
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgOCAyIDAgMQogICAgYnl0ZWNibG9jayAweCAweDAwMDAwMDdiIDB4MTUxZjdjNzUgMHgwMCAweDA2ODEwMQogICAgYiBtYWluX2Jsb2NrQDAKCm1haW5fYmxvY2tAMDoKICAgIGIgbWFpbl9ibG9ja0AxCgptYWluX2Jsb2NrQDE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGludGNfMiAvLyAwCiAgICAhPQogICAgYnogbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMjMKICAgIGIgbWFpbl9hYmlfcm91dGluZ0AyCgptYWluX2FiaV9yb3V0aW5nQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18yIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyAwCiAgICAhPQogICAgYnogbWFpbl9jcmVhdGVfTm9PcEAyMQogICAgYiBtYWluX2NhbGxfTm9PcEAzCgptYWluX2NhbGxfTm9PcEAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgTmF0aXZlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIHB1c2hieXRlcyAweDdkMzE4NTg5IC8vIG1ldGhvZCAicmVhZG9ubHlBcnJheSgpdm9pZCIKICAgIHB1c2hieXRlcyAweGIwYWM5MDY2IC8vIG1ldGhvZCAiYXJyYXlJbk9iamVjdCgpdm9pZCIKICAgIHB1c2hieXRlcyAweDBmNGMxMWNhIC8vIG1ldGhvZCAiYnVpbGRBcnJheSgpdWludDY0W10iCiAgICBwdXNoYnl0ZXMgMHhhYWEyOWY3MCAvLyBtZXRob2QgImFycmF5RnJvbUN0b3IoKXVpbnQ2NFtdIgogICAgcHVzaGJ5dGVzIDB4ZTJkNWUwMzUgLy8gbWV0aG9kICJidWlsZFJlYWRvbmx5KCl1aW50NjRbXSIKICAgIHB1c2hieXRlcyAweDEzYTU4OGM4IC8vIG1ldGhvZCAiZG9UaGluZ3MoKXZvaWQiCiAgICBwdXNoYnl0ZXMgMHhkNmVjYzFlNiAvLyBtZXRob2QgImZpeGVkQXJyYXkodWludDY0WzUwXSl2b2lkIgogICAgcHVzaGJ5dGVzIDB4Nzg3YjUwYjIgLy8gbWV0aG9kICJhcmM0SW50ZXJvcCgpdm9pZCIKICAgIHB1c2hieXRlcyAweGViODdhMDY0IC8vIG1ldGhvZCAic3RydWN0cygodWludDY0LHVpbnQ2NCkpKHVpbnQ2NCx1aW50NjQpW10iCiAgICBwdXNoYnl0ZXMgMHhiYzYxZDZiOCAvLyBtZXRob2QgImJvb2xlYW5zKClib29sW10iCiAgICBwdXNoYnl0ZXMgMHg4ZjU0NDQ3MyAvLyBtZXRob2QgImJvb2xlYW5zU3RhdGljKCkoYm9vbCxib29sLGJvb2wpIgogICAgcHVzaGJ5dGVzIDB4NDNlN2VlNDUgLy8gbWV0aG9kICJhcmM0Qm9vbGVhbnMoKWJvb2xbXSIKICAgIHB1c2hieXRlcyAweGNiZTNhNGY4IC8vIG1ldGhvZCAiYXJjNEJvb2xlYW5zU3RhdGljKCkoYm9vbCxib29sLGJvb2wpIgogICAgcHVzaGJ5dGVzIDB4MTQzZjIyM2IgLy8gbWV0aG9kICJhbGlhc2luZyh1aW50NjRbXSx1aW50NjRbXSl2b2lkIgogICAgcHVzaGJ5dGVzIDB4ZDk4OTU0NDIgLy8gbWV0aG9kICJyZWNlaXZlTXV0YWJsZSh1aW50NjRbXSl2b2lkIgogICAgcHVzaGJ5dGVzIDB4ZTIxM2Y1YjYgLy8gbWV0aG9kICJyZWNlaXZlUmVhZG9ubHkodWludDY0W10pdm9pZCIKICAgIHVuY292ZXIgMTYKICAgIG1hdGNoIG1haW5fcmVhZG9ubHlBcnJheV9yb3V0ZUA0IG1haW5fYXJyYXlJbk9iamVjdF9yb3V0ZUA1IG1haW5fYnVpbGRBcnJheV9yb3V0ZUA2IG1haW5fYXJyYXlGcm9tQ3Rvcl9yb3V0ZUA3IG1haW5fYnVpbGRSZWFkb25seV9yb3V0ZUA4IG1haW5fZG9UaGluZ3Nfcm91dGVAOSBtYWluX2ZpeGVkQXJyYXlfcm91dGVAMTAgbWFpbl9hcmM0SW50ZXJvcF9yb3V0ZUAxMSBtYWluX3N0cnVjdHNfcm91dGVAMTIgbWFpbl9ib29sZWFuc19yb3V0ZUAxMyBtYWluX2Jvb2xlYW5zU3RhdGljX3JvdXRlQDE0IG1haW5fYXJjNEJvb2xlYW5zX3JvdXRlQDE1IG1haW5fYXJjNEJvb2xlYW5zU3RhdGljX3JvdXRlQDE2IG1haW5fYWxpYXNpbmdfcm91dGVAMTcgbWFpbl9yZWNlaXZlTXV0YWJsZV9yb3V0ZUAxOCBtYWluX3JlY2VpdmVSZWFkb25seV9yb3V0ZUAxOQogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAMjAKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMDoKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDIyCgptYWluX2FmdGVyX2lmX2Vsc2VAMjI6CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAyNAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgTmF0aXZlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIGVycgoKbWFpbl9yZWNlaXZlUmVhZG9ubHlfcm91dGVAMTk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIyNQogICAgLy8gcmVjZWl2ZVJlYWRvbmx5KGE6IHJlYWRvbmx5IHVpbnQ2NFtdKSB7fQogICAgY2FsbHN1YiByZWNlaXZlUmVhZG9ubHkKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDIwCgptYWluX3JlY2VpdmVNdXRhYmxlX3JvdXRlQDE4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMjEKICAgIC8vIHJlY2VpdmVNdXRhYmxlKGE6IHVpbnQ2NFtdKSB7CiAgICBjYWxsc3ViIHJlY2VpdmVNdXRhYmxlCiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9hbGlhc2luZ19yb3V0ZUAxNzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTk1CiAgICAvLyBhbGlhc2luZyhtdXRhYmxlOiB1aW50NjRbXSwgcmVhZE9ubHk6IHJlYWRvbmx5IHVpbnQ2NFtdKSB7CiAgICBjYWxsc3ViIGFsaWFzaW5nCiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9hcmM0Qm9vbGVhbnNTdGF0aWNfcm91dGVAMTY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE5MQogICAgLy8gYXJjNEJvb2xlYW5zU3RhdGljKCkgewogICAgY2FsbHN1YiBhcmM0Qm9vbGVhbnNTdGF0aWMKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDIwCgptYWluX2FyYzRCb29sZWFuc19yb3V0ZUAxNToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTg3CiAgICAvLyBhcmM0Qm9vbGVhbnMoKSB7CiAgICBjYWxsc3ViIGFyYzRCb29sZWFucwogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAMjAKCm1haW5fYm9vbGVhbnNTdGF0aWNfcm91dGVAMTQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE4MwogICAgLy8gYm9vbGVhbnNTdGF0aWMoKSB7CiAgICBjYWxsc3ViIGJvb2xlYW5zU3RhdGljCiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9ib29sZWFuc19yb3V0ZUAxMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTc5CiAgICAvLyBib29sZWFucygpIHsKICAgIGNhbGxzdWIgYm9vbGVhbnMKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDIwCgptYWluX3N0cnVjdHNfcm91dGVAMTI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3MAogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICBjYWxsc3ViIHN0cnVjdHMKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDIwCgptYWluX2FyYzRJbnRlcm9wX3JvdXRlQDExOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNTcKICAgIC8vIGFyYzRJbnRlcm9wKCkgewogICAgY2FsbHN1YiBhcmM0SW50ZXJvcAogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAMjAKCm1haW5fZml4ZWRBcnJheV9yb3V0ZUAxMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTA5CiAgICAvLyBmaXhlZEFycmF5KHk6IEZpeGVkQXJyYXk8dWludDY0LCA1MD4pIHsKICAgIGNhbGxzdWIgZml4ZWRBcnJheQogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAMjAKCm1haW5fZG9UaGluZ3Nfcm91dGVAOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NDIKICAgIC8vIGRvVGhpbmdzKCkgewogICAgY2FsbHN1YiBkb1RoaW5ncwogICAgYiBtYWluX3N3aXRjaF9jYXNlX25leHRAMjAKCm1haW5fYnVpbGRSZWFkb25seV9yb3V0ZUA4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozOAogICAgLy8gYnVpbGRSZWFkb25seSgpOiBSZWFkb25seUFycmF5PHVpbnQ2ND4gewogICAgY2FsbHN1YiBidWlsZFJlYWRvbmx5CiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9hcnJheUZyb21DdG9yX3JvdXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM0CiAgICAvLyBhcnJheUZyb21DdG9yKCk6IEFycmF5PHVpbnQ2ND4gewogICAgY2FsbHN1YiBhcnJheUZyb21DdG9yCiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9idWlsZEFycmF5X3JvdXRlQDY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjMwCiAgICAvLyBidWlsZEFycmF5KCk6IEFycmF5PHVpbnQ2ND4gewogICAgY2FsbHN1YiBidWlsZEFycmF5CiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9hcnJheUluT2JqZWN0X3JvdXRlQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIwCiAgICAvLyBhcnJheUluT2JqZWN0KCkgewogICAgY2FsbHN1YiBhcnJheUluT2JqZWN0CiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAyMAoKbWFpbl9yZWFkb25seUFycmF5X3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcKICAgIC8vIHJlYWRvbmx5QXJyYXkoKSB7CiAgICBjYWxsc3ViIHJlYWRvbmx5QXJyYXkKICAgIGIgbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDIwCgptYWluX2NyZWF0ZV9Ob09wQDIxOgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMjIKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDIzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgTmF0aXZlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMiAvLyBOb09wCiAgICA9PQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBfX2FsZ290c19fLmRlZmF1bHRDcmVhdGUKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyBfcHV5YV9saWIudXRpbC5lbnN1cmVfYnVkZ2V0KHJlcXVpcmVkX2J1ZGdldDogdWludDY0LCBmZWVfc291cmNlOiB1aW50NjQpIC0+IHZvaWQ6CmVuc3VyZV9idWRnZXQ6CiAgICBwcm90byAyIDAKICAgIGIgZW5zdXJlX2J1ZGdldF9ibG9ja0AwCgplbnN1cmVfYnVkZ2V0X2Jsb2NrQDA6CiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgICsKICAgIGIgZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMQoKZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMToKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgIGZyYW1lX2RpZyAwCiAgICA8CiAgICBieiBlbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDYKICAgIGIgZW5zdXJlX2J1ZGdldF93aGlsZV9ib2R5QDIKCmVuc3VyZV9idWRnZXRfd2hpbGVfYm9keUAyOgogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjIDQgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlYyA0IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18zIC8vIDEKICAgIGZyYW1lX2RpZyAtMQogICAgbWF0Y2ggZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDMgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8xQDQKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDUKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA1OgogICAgaXR4bl9zdWJtaXQKICAgIGIgZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMQoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8xQDQ6CiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANQoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDM6CiAgICBpbnRjXzIgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDUKCmVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANjoKICAgIHJldHN1YgoKCi8vIF9wdXlhX2xpYi5hcmM0LmR5bmFtaWNfYXJyYXlfcG9wX2ZpeGVkX3NpemUoYXJyYXk6IGJ5dGVzLCBmaXhlZF9ieXRlX3NpemU6IHVpbnQ2NCkgLT4gYnl0ZXMsIGJ5dGVzOgpkeW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplOgogICAgcHJvdG8gMiAyCiAgICBiIGR5bmFtaWNfYXJyYXlfcG9wX2ZpeGVkX3NpemVfYmxvY2tAMAoKZHluYW1pY19hcnJheV9wb3BfZml4ZWRfc2l6ZV9ibG9ja0AwOgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMyAvLyAxCiAgICAtCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMAogICAgZnJhbWVfZGlnIC0yCiAgICB1bmNvdmVyIDEKICAgIHJlcGxhY2UyIDAKICAgIGR1cAogICAgbGVuCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGR1cDIKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdDMKICAgIGNvdmVyIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWFkb25seUFycmF5W3JvdXRpbmddKCkgLT4gdm9pZDoKcmVhZG9ubHlBcnJheToKICAgIGIgcmVhZG9ubHlBcnJheV9ibG9ja0AwCgpyZWFkb25seUFycmF5X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcKICAgIC8vIHJlYWRvbmx5QXJyYXkoKSB7CiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVhZG9ubHlBcnJheQogICAgaW50Y18zIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJyYXlJbk9iamVjdFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmFycmF5SW5PYmplY3Q6CiAgICBiIGFycmF5SW5PYmplY3RfYmxvY2tAMAoKYXJyYXlJbk9iamVjdF9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMAogICAgLy8gYXJyYXlJbk9iamVjdCgpIHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcnJheUluT2JqZWN0CiAgICBpbnRjXzMgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZEFycmF5W3JvdXRpbmddKCkgLT4gdm9pZDoKYnVpbGRBcnJheToKICAgIGIgYnVpbGRBcnJheV9ibG9ja0AwCgpidWlsZEFycmF5X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjMwCiAgICAvLyBidWlsZEFycmF5KCk6IEFycmF5PHVpbnQ2ND4gewogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJ1aWxkQXJyYXkKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18zIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJyYXlGcm9tQ3Rvcltyb3V0aW5nXSgpIC0+IHZvaWQ6CmFycmF5RnJvbUN0b3I6CiAgICBiIGFycmF5RnJvbUN0b3JfYmxvY2tAMAoKYXJyYXlGcm9tQ3Rvcl9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozNAogICAgLy8gYXJyYXlGcm9tQ3RvcigpOiBBcnJheTx1aW50NjQ+IHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcnJheUZyb21DdG9yCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJ1aWxkUmVhZG9ubHlbcm91dGluZ10oKSAtPiB2b2lkOgpidWlsZFJlYWRvbmx5OgogICAgYiBidWlsZFJlYWRvbmx5X2Jsb2NrQDAKCmJ1aWxkUmVhZG9ubHlfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzgKICAgIC8vIGJ1aWxkUmVhZG9ubHkoKTogUmVhZG9ubHlBcnJheTx1aW50NjQ+IHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZFJlYWRvbmx5CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmRvVGhpbmdzW3JvdXRpbmddKCkgLT4gdm9pZDoKZG9UaGluZ3M6CiAgICBiIGRvVGhpbmdzX2Jsb2NrQDAKCmRvVGhpbmdzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQyCiAgICAvLyBkb1RoaW5ncygpIHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5kb1RoaW5ncwogICAgaW50Y18zIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uZml4ZWRBcnJheVtyb3V0aW5nXSgpIC0+IHZvaWQ6CmZpeGVkQXJyYXk6CiAgICBiIGZpeGVkQXJyYXlfYmxvY2tAMAoKZml4ZWRBcnJheV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDkKICAgIC8vIGZpeGVkQXJyYXkoeTogRml4ZWRBcnJheTx1aW50NjQsIDUwPikgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgNDAwIC8vIDQwMAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDY0WzUwXQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmZpeGVkQXJyYXkKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFyYzRJbnRlcm9wW3JvdXRpbmddKCkgLT4gdm9pZDoKYXJjNEludGVyb3A6CiAgICBiIGFyYzRJbnRlcm9wX2Jsb2NrQDAKCmFyYzRJbnRlcm9wX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE1NwogICAgLy8gYXJjNEludGVyb3AoKSB7CiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEludGVyb3AKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnN0cnVjdHNbcm91dGluZ10oKSAtPiB2b2lkOgpzdHJ1Y3RzOgogICAgYiBzdHJ1Y3RzX2Jsb2NrQDAKCnN0cnVjdHNfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTcwCiAgICAvLyBzdHJ1Y3RzKHsgeCwgeSB9OiBWZWN0b3IpIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciAodWludDY0LHVpbnQ2NCkKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5zdHJ1Y3RzCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJvb2xlYW5zW3JvdXRpbmddKCkgLT4gdm9pZDoKYm9vbGVhbnM6CiAgICBiIGJvb2xlYW5zX2Jsb2NrQDAKCmJvb2xlYW5zX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3OQogICAgLy8gYm9vbGVhbnMoKSB7CiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYm9vbGVhbnMKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18zIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYm9vbGVhbnNTdGF0aWNbcm91dGluZ10oKSAtPiB2b2lkOgpib29sZWFuc1N0YXRpYzoKICAgIGIgYm9vbGVhbnNTdGF0aWNfYmxvY2tAMAoKYm9vbGVhbnNTdGF0aWNfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTgzCiAgICAvLyBib29sZWFuc1N0YXRpYygpIHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5ib29sZWFuc1N0YXRpYwogICAgY292ZXIgMgogICAgY292ZXIgMQogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzIgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMyAvLyAxCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzMgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnNbcm91dGluZ10oKSAtPiB2b2lkOgphcmM0Qm9vbGVhbnM6CiAgICBiIGFyYzRCb29sZWFuc19ibG9ja0AwCgphcmM0Qm9vbGVhbnNfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTg3CiAgICAvLyBhcmM0Qm9vbGVhbnMoKSB7CiAgICBjYWxsc3ViIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEJvb2xlYW5zCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMyAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFyYzRCb29sZWFuc1N0YXRpY1tyb3V0aW5nXSgpIC0+IHZvaWQ6CmFyYzRCb29sZWFuc1N0YXRpYzoKICAgIGIgYXJjNEJvb2xlYW5zU3RhdGljX2Jsb2NrQDAKCmFyYzRCb29sZWFuc1N0YXRpY19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxOTEKICAgIC8vIGFyYzRCb29sZWFuc1N0YXRpYygpIHsKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnNTdGF0aWMKICAgIGNvdmVyIDIKICAgIGludGNfMiAvLyAwCiAgICBnZXRiaXQKICAgIHVuY292ZXIgMQogICAgaW50Y18zIC8vIDEKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICBnZXRiaXQKICAgIHVuY292ZXIgMQogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzMgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hbGlhc2luZ1tyb3V0aW5nXSgpIC0+IHZvaWQ6CmFsaWFzaW5nOgogICAgYiBhbGlhc2luZ19ibG9ja0AwCgphbGlhc2luZ19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxOTUKICAgIC8vIGFsaWFzaW5nKG11dGFibGU6IHVpbnQ2NFtdLCByZWFkT25seTogcmVhZG9ubHkgdWludDY0W10pIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18xIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIChsZW4rdWludDY0W10pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMSAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciAobGVuK3VpbnQ2NFtdKQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFsaWFzaW5nCiAgICBpbnRjXzMgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlTXV0YWJsZVtyb3V0aW5nXSgpIC0+IHZvaWQ6CnJlY2VpdmVNdXRhYmxlOgogICAgYiByZWNlaXZlTXV0YWJsZV9ibG9ja0AwCgpyZWNlaXZlTXV0YWJsZV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMjEKICAgIC8vIHJlY2VpdmVNdXRhYmxlKGE6IHVpbnQ2NFtdKSB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMSAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciAobGVuK3VpbnQ2NFtdKQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnJlY2VpdmVNdXRhYmxlCiAgICBpbnRjXzMgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlUmVhZG9ubHlbcm91dGluZ10oKSAtPiB2b2lkOgpyZWNlaXZlUmVhZG9ubHk6CiAgICBiIHJlY2VpdmVSZWFkb25seV9ibG9ja0AwCgpyZWNlaXZlUmVhZG9ubHlfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjI1CiAgICAvLyByZWNlaXZlUmVhZG9ubHkoYTogcmVhZG9ubHkgdWludDY0W10pIHt9CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMSAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciAobGVuK3VpbnQ2NFtdKQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnJlY2VpdmVSZWFkb25seQogICAgaW50Y18zIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVhZG9ubHlBcnJheSgpIC0+IHZvaWQ6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVhZG9ubHlBcnJheToKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWFkb25seUFycmF5X2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVhZG9ubHlBcnJheV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4CiAgICAvLyBsZXQgbXlBcnJheTogcmVhZG9ubHkgdWludDY0W10gPSBbMSwgMiwgM10KICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgaW50Y18zIC8vIDEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18xIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMAogICAgLy8gbXlBcnJheSA9IG15QXJyYXkuY29uY2F0KFVpbnQ2NCg1KSkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIHVuY292ZXIgMQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBjb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMyAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMgogICAgLy8gbXlBcnJheSA9IFsuLi5teUFycmF5LCBVaW50NjQoNCldCiAgICBpbnRjXzMgLy8gMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdG9iCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE1CiAgICAvLyBteUFycmF5ID0gbXlBcnJheS53aXRoKDIsIDMpCiAgICBwdXNoaW50IDMgLy8gMwogICAgaXRvYgogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzEgLy8gMgogICAgKwogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3CiAgICAvLyBhc3NlcnRNYXRjaChteUFycmF5LCBbMSwgMiwgMywgNSwgNF0pCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyAxCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18zIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzEgLy8gMgogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMSAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJyYXlJbk9iamVjdCgpIC0+IHZvaWQ6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJyYXlJbk9iamVjdDoKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcnJheUluT2JqZWN0X2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJyYXlJbk9iamVjdF9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMi0yNQogICAgLy8gY29uc3QgcGVyc29uOiBQZXJzb24gPSB7CiAgICAvLyAgIG5hbWU6ICdBbGljZScsCiAgICAvLyAgIGZhdm91cml0ZU51bWJlcnM6IFsxMzM3XSwKICAgIC8vIH0KICAgIGludGNfMyAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyNAogICAgLy8gZmF2b3VyaXRlTnVtYmVyczogWzEzMzddLAogICAgcHVzaGludCAxMzM3IC8vIDEzMzcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjItMjUKICAgIC8vIGNvbnN0IHBlcnNvbjogUGVyc29uID0gewogICAgLy8gICBuYW1lOiAnQWxpY2UnLAogICAgLy8gICBmYXZvdXJpdGVOdW1iZXJzOiBbMTMzN10sCiAgICAvLyB9CiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjYKICAgIC8vIGNvbnN0IGxlbmd0aDogdWludDY0ID0gcGVyc29uLmZhdm91cml0ZU51bWJlcnMucHVzaCg0MikKICAgIHB1c2hpbnQgNDIgLy8gNDIKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBkaWcgMQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjcKICAgIC8vIGFzc2VydChsZW5ndGggPT09IDIpCiAgICBpbnRjXzEgLy8gMgogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZEFycmF5KCkgLT4gYnl0ZXM6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYnVpbGRBcnJheToKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZEFycmF5X2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYnVpbGRBcnJheV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozMQogICAgLy8gcmV0dXJuIFsxLCAyLCAzLCA0XQogICAgcHVzaGludCA0IC8vIDQKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBpbnRjXzMgLy8gMQogICAgaXRvYgogICAgY29uY2F0CiAgICBpbnRjXzEgLy8gMgogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoaW50IDMgLy8gMwogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoaW50IDQgLy8gNAogICAgaXRvYgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFycmF5RnJvbUN0b3IoKSAtPiBieXRlczoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcnJheUZyb21DdG9yOgogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFycmF5RnJvbUN0b3JfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcnJheUZyb21DdG9yX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM1CiAgICAvLyByZXR1cm4gbmV3IEFycmF5PHVpbnQ2ND4oMSwgMiwgMykKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgaW50Y18zIC8vIDEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18xIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZFJlYWRvbmx5KCkgLT4gYnl0ZXM6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYnVpbGRSZWFkb25seToKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZFJlYWRvbmx5X2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYnVpbGRSZWFkb25seV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czozOQogICAgLy8gcmV0dXJuIFsxLCAyLCAzLCA0XQogICAgcHVzaGludCA0IC8vIDQKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBpbnRjXzMgLy8gMQogICAgaXRvYgogICAgY29uY2F0CiAgICBpbnRjXzEgLy8gMgogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoaW50IDMgLy8gMwogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoaW50IDQgLy8gNAogICAgaXRvYgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmRvVGhpbmdzKCkgLT4gdm9pZDoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5kb1RoaW5nczoKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5kb1RoaW5nc19ibG9ja0AwCgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmRvVGhpbmdzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQzCiAgICAvLyBlbnN1cmVCdWRnZXQoMTQwMCkKICAgIHB1c2hpbnQgMTQwMCAvLyAxNDAwCiAgICBpbnRjXzIgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ0CiAgICAvLyBsZXQgYXJyID0gdGhpcy5idWlsZEFycmF5KCkKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5idWlsZEFycmF5CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ2CiAgICAvLyBhcnIucHVzaCg1KQogICAgcHVzaGludCA1IC8vIDUKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBkaWcgMQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ3CiAgICAvLyBhc3NlcnQoYXJyLnBvcCgpISA9PT0gNSkKICAgIGludGNfMCAvLyA4CiAgICBjYWxsc3ViIGR5bmFtaWNfYXJyYXlfcG9wX2ZpeGVkX3NpemUKICAgIGNvdmVyIDEKICAgIGJ0b2kKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ4CiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1MQogICAgLy8gYXNzZXJ0KGFyclswXSA9PT0gMSkKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTIKICAgIC8vIGFzc2VydChhcnIuYXQoLTEpISA9PT0gNCkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzMgLy8gMQogICAgLQogICAgZGlnIDEKICAgIGxlbgogICAgY292ZXIgMQogICAgZGlnIDIKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjU1CiAgICAvLyBhcnIucHVzaChVaW50NjQoNSkpCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweAogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzMgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTcKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDQsIDVdKQogICAgZHVwCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzMgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18xIC8vIDIKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2MAogICAgLy8gY29uc3QgdG9wID0gYXJyLnBvcCgpIQogICAgaW50Y18wIC8vIDgKICAgIGNhbGxzdWIgZHluYW1pY19hcnJheV9wb3BfZml4ZWRfc2l6ZQogICAgY292ZXIgMQogICAgYnRvaQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2MQogICAgLy8gYXNzZXJ0KHRvcCA9PT0gNSkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYzCiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2NgogICAgLy8gYXJyWzFdID0gMTAKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGl0b2IKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18xIC8vIDIKICAgICsKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAxCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2OAogICAgLy8gY29uc3QgYXJyMiA9IGFyci53aXRoKDEsIDUpCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXRvYgogICAgaW50Y18zIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzEgLy8gMgogICAgKwogICAgZGlnIDIKICAgIHVuY292ZXIgMQogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGNvdmVyIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzAKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0XSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBkaWcgMQogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGNvdmVyIDEKICAgIGRpZyAyCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyAxCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZGlnIDIKICAgIGxlbgogICAgY292ZXIgMQogICAgZGlnIDMKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkaWcgMgogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkaWcgMwogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGRpZyAyCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIHVuY292ZXIgMwogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjc0CiAgICAvLyBjb25zdCB0MTogW3VpbnQ2NCwgdWludDY0XSA9IFsxMiwgMTNdCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgcHVzaGludCAxMyAvLyAxMwogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjc1CiAgICAvLyBhcnIgPSBhcnIuY29uY2F0KGFycikuY29uY2F0KDExKS5jb25jYXQodDEpCiAgICBkaWcgMQogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgbGVuCiAgICBpbnRjXzAgLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBkaWcgMQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgbGVuCiAgICBpbnRjXzAgLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzYKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDUgLy8gNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDYgLy8gNgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA3IC8vIDcKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMCAvLyA4CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgOSAvLyA5CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzgKICAgIC8vIGxldCByQXJyMTogcmVhZG9ubHkgdWludDY0W10gPSBbMSwgMiwgM10KICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgaW50Y18zIC8vIDEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgaW50Y18xIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3OQogICAgLy8gckFycjEgPSByQXJyMS5jb25jYXQoVWludDY0KDQpKQogICAgcHVzaGludCA0IC8vIDQKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBkaWcgMQogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjgwCiAgICAvLyByQXJyMSA9IFsuLi5yQXJyMSwgVWludDY0KDUpXQogICAgaW50Y18zIC8vIDEKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXRvYgogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBsZW4KICAgIGludGNfMCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4MQogICAgLy8gYXNzZXJ0TWF0Y2gockFycjEsIFsxLCAyLCAzLCA0LCA1XSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDQgLy8gNAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6ODMKICAgIC8vIGNvbnN0IGZBcnIxID0gbmV3IEZpeGVkQXJyYXk8dWludDY0LCA0PigpCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBiemVybwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4NAogICAgLy8gY29uc3QgZkFycjIgPSBmQXJyMS5jb25jYXQoZkFycjEpCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBjb3ZlciAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjg1CiAgICAvLyBhc3NlcnRNYXRjaChmQXJyMSwgWzAsIDAsIDAsIDBdKQogICAgcHVzaGludCA0IC8vIDQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBkaWcgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgICYmCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGRpZyAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgJiYKICAgIGludGNfMSAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZGlnIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICAmJgogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBkaWcgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4NgogICAgLy8gYXNzZXJ0TWF0Y2goZkFycjIsIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSkKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyA4CiAgICA9PQogICAgY292ZXIgMQogICAgZGlnIDIKICAgIGxlbgogICAgY292ZXIgMQogICAgZGlnIDMKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkaWcgMgogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkaWcgMwogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18zIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGRpZyAyCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZGlnIDIKICAgIGxlbgogICAgY292ZXIgMQogICAgZGlnIDMKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkaWcgMgogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkaWcgMwogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA0IC8vIDQKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGRpZyAyCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDUgLy8gNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZGlnIDIKICAgIGxlbgogICAgY292ZXIgMQogICAgZGlnIDMKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNiAvLyA2CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkaWcgMgogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkaWcgMwogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA3IC8vIDcKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjg4CiAgICAvLyBjb25zdCBhcnIzID0gckFycjEuY29uY2F0KGZBcnIyKQogICAgZGlnIDEKICAgIGxlbgogICAgY292ZXIgMQogICAgdW5jb3ZlciAyCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBkaWcgMgogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjg5CiAgICAvLyBhc3NlcnRNYXRjaChhcnIzLCBbMSwgMiwgMywgNCwgNSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDQgLy8gNAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA1IC8vIDUKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNiAvLyA2CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDcgLy8gNwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18wIC8vIDgKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgOSAvLyA5CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDExIC8vIDExCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxMiAvLyAxMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjkxCiAgICAvLyBjb25zdCBhcnI0ID0gckFycjEuY29uY2F0KGFycikKICAgIGRpZyAyCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBkaWcgMgogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjkyCiAgICAvLyBhc3NlcnRNYXRjaChhcnI0LCBbMSwgMiwgMywgNCwgNSwgMSwgMTAsIDMsIDQsIDEsIDEwLCAzLCA0LCAxMSwgMTIsIDEzXSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA9PQogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzMgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18xIC8vIDIKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDUgLy8gNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyAxCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA2IC8vIDYKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA3IC8vIDcKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMCAvLyA4CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDkgLy8gOQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMyAvLyAxCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxMCAvLyAxMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDExIC8vIDExCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTQgLy8gMTQKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTUgLy8gMTUKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjk0CiAgICAvLyBjb25zdCBhcnI1ID0gZkFycjEuY29uY2F0KHJBcnIxKQogICAgcHVzaGludCA0IC8vIDQKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBkaWcgMQogICAgY29uY2F0CiAgICBkaWcgMgogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkaWcgMwogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBsZW4KICAgIGludGNfMCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5NQogICAgLy8gYXNzZXJ0TWF0Y2goYXJyNSwgWzAsIDAsIDAsIDAsIDEsIDIsIDMsIDQsIDVdKQogICAgZHVwCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgOSAvLyA5CiAgICA9PQogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDUgLy8gNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA2IC8vIDYKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNyAvLyA3CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgaW50Y18wIC8vIDgKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5NwogICAgLy8gY29uc3QgYXJyNiA9IGZBcnIxLmNvbmNhdChhcnIpCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIGRpZyAzCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGRpZyA0CiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjk4CiAgICAvLyBhc3NlcnRNYXRjaChhcnI2LCBbMCwgMCwgMCwgMCwgMSwgMTAsIDMsIDQsIDEsIDEwLCAzLCA0LCAxMSwgMTIsIDEzXSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDE1IC8vIDE1CiAgICA9PQogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDUgLy8gNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDYgLy8gNgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA3IC8vIDcKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMCAvLyA4CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDkgLy8gOQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDExIC8vIDExCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTMgLy8gMTMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTQgLy8gMTQKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwMAogICAgLy8gY29uc3QgYXJyNyA9IGFyci5jb25jYXQockFycjEpCiAgICBkaWcgMQogICAgbGVuCiAgICBjb3ZlciAxCiAgICB1bmNvdmVyIDIKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGRpZyAyCiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgbGVuCiAgICBpbnRjXzAgLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTAxCiAgICAvLyBhc3NlcnQoYXJyNy5sZW5ndGggPT09IDE2KQogICAgZHVwCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTAyCiAgICAvLyBhc3NlcnRNYXRjaChhcnI3LCBbMSwgMTAsIDMsIDQsIDEsIDEwLCAzLCA0LCAxMSwgMTIsIDEzLCAxLCAyLCAzLCA0LCA1XSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA9PQogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzMgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMCAvLyAxMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMSAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA0IC8vIDQKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzMgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMCAvLyAxMAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNiAvLyA2CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDcgLy8gNwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18wIC8vIDgKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDExIC8vIDExCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA5IC8vIDkKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxMCAvLyAxMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTMgLy8gMTMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDExIC8vIDExCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18xIC8vIDIKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDE0IC8vIDE0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxNSAvLyAxNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwNAogICAgLy8gY29uc3QgYXJyOCA9IGFyci5jb25jYXQoZkFycjEpCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwNQogICAgLy8gYXNzZXJ0KGFycjgubGVuZ3RoID09PSAxNSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDE1IC8vIDE1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwNgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyOCwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxMywgMCwgMCwgMCwgMF0pCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNSAvLyAxNQogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDUgLy8gNQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBwdXNoaW50IDYgLy8gNgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA3IC8vIDcKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMCAvLyA4CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgOSAvLyA5CiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxMSAvLyAxMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxMiAvLyAxMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCAxMyAvLyAxMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMTQgLy8gMTQKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5maXhlZEFycmF5KHk6IGJ5dGVzKSAtPiB2b2lkOgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmZpeGVkQXJyYXk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwOQogICAgLy8gZml4ZWRBcnJheSh5OiBGaXhlZEFycmF5PHVpbnQ2NCwgNTA+KSB7CiAgICBwcm90byAxIDAKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5maXhlZEFycmF5X2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uZml4ZWRBcnJheV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMTAKICAgIC8vIGNvbnN0IHggPSBuZXcgRml4ZWRBcnJheTx1aW50NjQsIDQ+KDEsIDIsIDMsIDQpCiAgICBpbnRjXzMgLy8gMQogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweAogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGludGNfMSAvLyAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTExCiAgICAvLyB4WzBdID0gMAogICAgaW50Y18yIC8vIDAKICAgIGl0b2IKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExNAogICAgLy8gYXNzZXJ0KHgyLmxlbmd0aCA9PT0gNTApCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExNwogICAgLy8gYXNzZXJ0KHgzLmxlbmd0aCA9PT0gMTIpCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExOQogICAgLy8gYXNzZXJ0KHhbMF0gPT09IHlbMF0pCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICB1bmNvdmVyIDEKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZnJhbWVfZGlnIC0xCiAgICB1bmNvdmVyIDEKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTIwCiAgICAvLyBhc3NlcnRNYXRjaCh4LCBbeyBsZXNzVGhhbjogMSB9LCAyLCAzLCA0XSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZGlnIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18zIC8vIDEKICAgIDwKICAgICYmCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGRpZyAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAyCiAgICA9PQogICAgJiYKICAgIGludGNfMSAvLyAyCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZGlnIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgcHVzaGludCAzIC8vIDMKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTIxCiAgICAvLyBhc3NlcnRNYXRjaCh5LCB7IDQ5OiB7IGdyZWF0ZXJUaGFuRXE6IDAgfSB9KQogICAgcHVzaGludCA0OSAvLyA0OQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGZyYW1lX2RpZyAtMQogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPj0KICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyMwogICAgLy8gY29uc3QgbXlWZWN0b3JzOiBGaXhlZEFycmF5PFZlY3RvciwgMj4gPSBuZXcgRml4ZWRBcnJheTxWZWN0b3IsIDI+KHsgeDogMSwgeTogMiB9LCB7IHg6IDMsIHk6IDQgfSkKICAgIGludGNfMyAvLyAxCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgaW50Y18xIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICBwdXNoaW50IDQgLy8gNAogICAgaXRvYgogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTI0LTEyNwogICAgLy8gYXNzZXJ0TWF0Y2gobXlWZWN0b3JzLCBbCiAgICAvLyAgIHsgeDogMSwgeTogMiB9LAogICAgLy8gICB7IHg6IDMsIHk6IDQgfSwKICAgIC8vIF0pCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18xIC8vIDIKICAgID09CiAgICBjb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgZGlnIDEKICAgIHVuY292ZXIgMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyNQogICAgLy8geyB4OiAxLCB5OiAyIH0sCiAgICBpbnRjXzMgLy8gMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMjQtMTI3CiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFsKICAgIC8vICAgeyB4OiAxLCB5OiAyIH0sCiAgICAvLyAgIHsgeDogMywgeTogNCB9LAogICAgLy8gXSkKICAgID09CiAgICBjb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgZGlnIDEKICAgIHVuY292ZXIgMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gOAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyNQogICAgLy8geyB4OiAxLCB5OiAyIH0sCiAgICBpbnRjXzEgLy8gMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMjQtMTI3CiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFsKICAgIC8vICAgeyB4OiAxLCB5OiAyIH0sCiAgICAvLyAgIHsgeDogMywgeTogNCB9LAogICAgLy8gXSkKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBpbnRjXzMgLy8gMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgZGlnIDEKICAgIHVuY292ZXIgMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyNgogICAgLy8geyB4OiAzLCB5OiA0IH0sCiAgICBwdXNoaW50IDMgLy8gMwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMjQtMTI3CiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFsKICAgIC8vICAgeyB4OiAxLCB5OiAyIH0sCiAgICAvLyAgIHsgeDogMywgeTogNCB9LAogICAgLy8gXSkKICAgID09CiAgICBjb3ZlciAxCiAgICBpbnRjXzMgLy8gMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gOAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyNgogICAgLy8geyB4OiAzLCB5OiA0IH0sCiAgICBwdXNoaW50IDQgLy8gNAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMjQtMTI3CiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFsKICAgIC8vICAgeyB4OiAxLCB5OiAyIH0sCiAgICAvLyAgIHsgeDogMywgeTogNCB9LAogICAgLy8gXSkKICAgID09CiAgICAmJgogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEyOQogICAgLy8gY29uc3QgbXlPYmplY3Q6IHsgYTogRml4ZWRBcnJheTxWZWN0b3IsIDE+IH0gPSB7IGE6IG5ldyBGaXhlZEFycmF5PFZlY3RvciwgMT4oeyB4OiA1LCB5OiA2IH0pIH0KICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICB1bmNvdmVyIDEKICAgIGNvbmNhdAogICAgcHVzaGludCA2IC8vIDYKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHVuY292ZXIgMQogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEzMAogICAgLy8gYXNzZXJ0TWF0Y2gobXlPYmplY3QuYSwgW3sgeDogNSwgeTogNiB9XSkKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzMgLy8gMQogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3QzCiAgICBpbnRjXzIgLy8gMAogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgIGNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0MwogICAgaW50Y18yIC8vIDAKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgICoKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgaW50Y18wIC8vIDgKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MwogICAgYnRvaQogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICAmJgogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEzMgogICAgLy8gY29uc3QgejEgPSBuZXcgRml4ZWRBcnJheTx1aW50NjQsIDQ+KCkKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGJ6ZXJvCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEzMwogICAgLy8gYXNzZXJ0KHoxLmxlbmd0aCA9PT0gNCkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMzQKICAgIC8vIGFzc2VydE1hdGNoKHoxLCBbMCwgMCwgMCwgMF0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBjb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICB1bmNvdmVyIDEKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgaW50Y18zIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBkaWcgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgICYmCiAgICBpbnRjXzEgLy8gMgogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGRpZyAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCiAgICA9PQogICAgJiYKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZGlnIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18yIC8vIDAKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTM1CiAgICAvLyB6MVswXSA9IDEKICAgIGludGNfMyAvLyAxCiAgICBpdG9iCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgICoKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAxCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMzYKICAgIC8vIHoxWzFdID0gMgogICAgaW50Y18xIC8vIDIKICAgIGl0b2IKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEzNwogICAgLy8gejFbMl0gPSAzCiAgICBwdXNoaW50IDMgLy8gMwogICAgaXRvYgogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMQogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTM4CiAgICAvLyB6MVszXSA9IDQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdG9iCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAxCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMzkKICAgIC8vIGFzc2VydE1hdGNoKHoxLCBbeyBsZXNzVGhhbkVxOiAxIH0sIDIsIDMsIDRdKQogICAgcHVzaGludCA0IC8vIDQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBkaWcgMQogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpbnRjXzMgLy8gMQogICAgPD0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgZGlnIDIKICAgIHVuY292ZXIgMQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18xIC8vIDIKICAgID09CiAgICAmJgogICAgaW50Y18xIC8vIDIKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBkaWcgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgICYmCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18wIC8vIDgKICAgICoKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNDEKICAgIC8vIGNvbnN0IHoyID0gbmV3IEZpeGVkQXJyYXk8Ym9vbGVhbiwgMz4oKQogICAgaW50Y18zIC8vIDEKICAgIGJ6ZXJvCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE0MgogICAgLy8gYXNzZXJ0KHoyWzBdID09PSBmYWxzZSkKICAgIGludGNfMiAvLyAwCiAgICBwdXNoaW50IDMgLy8gMwogICAgPAogICAgYXNzZXJ0IC8vIGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzIgLy8gMAogICAgZ2V0Yml0CiAgICBpbnRjXzIgLy8gMAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNDUKICAgIC8vIGFzc2VydCh6My5sZW5ndGggPT09IDQpCiAgICBwdXNoaW50IDQgLy8gNAogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTQ4CiAgICAvLyBhc3NlcnQoejQubGVuZ3RoID09PSA0KQogICAgcHVzaGludCA0IC8vIDQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE1MQogICAgLy8gYXNzZXJ0KHo1Lmxlbmd0aCA9PT0gNCkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNTQKICAgIC8vIGFzc2VydCh6Ni5sZW5ndGggPT09IDQpCiAgICBwdXNoaW50IDQgLy8gNAogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEludGVyb3AoKSAtPiB2b2lkOgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFyYzRJbnRlcm9wOgogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFyYzRJbnRlcm9wX2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEludGVyb3BfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTYwCiAgICAvLyBjb25zdCBkYTEgPSBuZXcgRHluYW1pY0FycmF5KHUxLCB1MSkKICAgIGludGNfMSAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDA3YgogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE2MQogICAgLy8gY29uc3Qgc2ExID0gbmV3IFN0YXRpY0FycmF5KHUxLCB1MSkKICAgIGJ5dGVjXzAgLy8gMHgKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDA3YgogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgIGNvbmNhdAogICAgY292ZXIgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNjMKICAgIC8vIGxldCBhMSA9IFt1MSwgdTFdCiAgICBpbnRjXzEgLy8gMgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDA3YgogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNjUKICAgIC8vIGExID0gWy4uLmExLCAuLi5kYTEsIC4uLnNhMV0KICAgIGRpZyAxCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBsZW4KICAgIHB1c2hpbnQgNCAvLyA0CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAxCiAgICBpbnRjXzIgLy8gMAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgdW5jb3ZlciAxCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGxlbgogICAgcHVzaGludCA0IC8vIDQKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE2NwogICAgLy8gYXNzZXJ0TWF0Y2goYTEsIFt1MSwgdTEsIHUxLCB1MSwgdTEsIHUxXSkKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDYgLy8gNgogICAgPT0KICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIGludGNfMiAvLyAwCiAgICBwdXNoaW50IDQgLy8gNAogICAgKgogICAgcHVzaGludCA0IC8vIDQKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18zIC8vIDEKICAgIHB1c2hpbnQgNCAvLyA0CiAgICAqCiAgICBwdXNoaW50IDQgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzEgLy8gMgogICAgcHVzaGludCA0IC8vIDQKICAgICoKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDA3YgogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGNvdmVyIDEKICAgIGR1cAogICAgbGVuCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBwdXNoaW50IDQgLy8gNAogICAgKgogICAgcHVzaGludCA0IC8vIDQKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDdiCiAgICA9PQogICAgdW5jb3ZlciAyCiAgICAmJgogICAgY292ZXIgMQogICAgZHVwCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA0IC8vIDQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICAqCiAgICBwdXNoaW50IDQgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgcHVzaGludCA1IC8vIDUKICAgIHB1c2hpbnQgNCAvLyA0CiAgICAqCiAgICBwdXNoaW50IDQgLy8gNAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwN2IKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uc3RydWN0cyhwOiBieXRlcykgLT4gYnl0ZXM6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uc3RydWN0czoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTcwCiAgICAvLyBzdHJ1Y3RzKHsgeCwgeSB9OiBWZWN0b3IpIHsKICAgIHByb3RvIDEgMQogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnN0cnVjdHNfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5zdHJ1Y3RzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3MAogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDgKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MwogICAgYnRvaQogICAgY292ZXIgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNzMKICAgIC8vIG15VmVjdG9ycyA9IFt7IHgsIHkgfV0KICAgIGR1cAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweAogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIGRpZyAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGludGNfMyAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAxCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTc1CiAgICAvLyBhc3NlcnRNYXRjaChteVZlY3RvcnMsIFt7IHgsIHkgfV0pCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDEKICAgID09CiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzIgLy8gMAogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICB1bmNvdmVyIDMKICAgID09CiAgICBjb3ZlciAxCiAgICBkdXAKICAgIGxlbgogICAgY292ZXIgMQogICAgZHVwCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzIgLy8gMAogICAgcHVzaGludCAxNiAvLyAxNgogICAgKgogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gOAogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzCiAgICBidG9pCiAgICB1bmNvdmVyIDQKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNzYKICAgIC8vIHJldHVybiBteVZlY3RvcnMKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYm9vbGVhbnMoKSAtPiBieXRlczoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5ib29sZWFuczoKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5ib29sZWFuc19ibG9ja0AwCgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJvb2xlYW5zX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE4MAogICAgLy8gcmV0dXJuIFt0cnVlLCBmYWxzZSwgdHJ1ZV0KICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18zIC8vIDEKICAgIHNldGJpdAogICAgaW50Y18zIC8vIDEKICAgIGludGNfMiAvLyAwCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAyCiAgICBpbnRjXzMgLy8gMQogICAgc2V0Yml0CiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYm9vbGVhbnNTdGF0aWMoKSAtPiB1aW50NjQsIHVpbnQ2NCwgdWludDY0Ogp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJvb2xlYW5zU3RhdGljOgogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmJvb2xlYW5zU3RhdGljX2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYm9vbGVhbnNTdGF0aWNfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTg0CiAgICAvLyByZXR1cm4gW3RydWUsIGZhbHNlLCB0cnVlXSBhcyBjb25zdAogICAgaW50Y18zIC8vIDEKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzMgLy8gMQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnMoKSAtPiBieXRlczoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnM6CiAgICBiIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEJvb2xlYW5zX2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYXJjNEJvb2xlYW5zX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE4OAogICAgLy8gcmV0dXJuIFtuZXcgQm9vbCh0cnVlKSwgbmV3IEJvb2woZmFsc2UpLCBuZXcgQm9vbCh0cnVlKV0KICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18yIC8vIDAKICAgIGludGNfMyAvLyAxCiAgICBzZXRiaXQKICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18yIC8vIDAKICAgIGludGNfMiAvLyAwCiAgICBzZXRiaXQKICAgIGJ5dGVjXzMgLy8gMHgwMAogICAgaW50Y18yIC8vIDAKICAgIGludGNfMyAvLyAxCiAgICBzZXRiaXQKICAgIGNvdmVyIDEKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY292ZXIgMgogICAgaW50Y18yIC8vIDAKICAgIGdldGJpdAogICAgdW5jb3ZlciAzCiAgICBpbnRjXzMgLy8gMQogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIHVuY292ZXIgMQogICAgaW50Y18yIC8vIDAKICAgIGdldGJpdAogICAgdW5jb3ZlciAxCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnNTdGF0aWMoKSAtPiBieXRlcywgYnl0ZXMsIGJ5dGVzOgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFyYzRCb29sZWFuc1N0YXRpYzoKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnNTdGF0aWNfYmxvY2tAMAoKdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hcmM0Qm9vbGVhbnNTdGF0aWNfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTkyCiAgICAvLyByZXR1cm4gW25ldyBCb29sKHRydWUpLCBuZXcgQm9vbChmYWxzZSksIG5ldyBCb29sKHRydWUpXSBhcyBjb25zdAogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18zIC8vIDEKICAgIHNldGJpdAogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18yIC8vIDAKICAgIHNldGJpdAogICAgYnl0ZWNfMyAvLyAweDAwCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18zIC8vIDEKICAgIHNldGJpdAogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5hbGlhc2luZyhtdXRhYmxlOiBieXRlcywgcmVhZE9ubHk6IGJ5dGVzKSAtPiB2b2lkOgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFsaWFzaW5nOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxOTUKICAgIC8vIGFsaWFzaW5nKG11dGFibGU6IHVpbnQ2NFtdLCByZWFkT25seTogcmVhZG9ubHkgdWludDY0W10pIHsKICAgIHByb3RvIDIgMAogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLmFsaWFzaW5nX2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYWxpYXNpbmdfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjA0CiAgICAvLyBjb25zdCBuZWVkQ2xvbmUyOiByZWFkb25seSB1aW50NjRbXSA9IGNsb25lKG11dGFibGUpCiAgICBmcmFtZV9kaWcgLTIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjA2CiAgICAvLyBtdXRhYmxlWzFdICs9IDIKICAgIGZyYW1lX2RpZyAtMgogICAgbGVuCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMSAvLyAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18xIC8vIDIKICAgICsKICAgIGl0b2IKICAgIGludGNfMyAvLyAxCiAgICBpbnRjXzAgLy8gOAogICAgKgogICAgaW50Y18xIC8vIDIKICAgICsKICAgIGZyYW1lX2RpZyAtMgogICAgdW5jb3ZlciAxCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0yCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIwOAogICAgLy8gYXNzZXJ0KG11dGFibGVbMV0gIT09IG5lZWRDbG9uZTJbMV0sICdUaGVzZSBzaG91bGQgbm90IG1hdGNoJykKICAgIGxlbgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzEgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzMgLy8gMQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGludGNfMCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGRpZyAxCiAgICBsZW4KICAgIGNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgaW50Y18xIC8vIDIKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgaW50Y18zIC8vIDEKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAhPQogICAgYXNzZXJ0IC8vIFRoZXNlIHNob3VsZCBub3QgbWF0Y2gKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjExCiAgICAvLyB0aGlzLnJlY2VpdmVNdXRhYmxlKG11dGFibGUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlTXV0YWJsZQogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0yCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIxMwogICAgLy8gdGhpcy5yZWNlaXZlUmVhZG9ubHkobXV0YWJsZSkKICAgIGNhbGxzdWIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlUmVhZG9ubHkKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjE4CiAgICAvLyB0aGlzLnJlY2VpdmVSZWFkb25seShyZWFkT25seSkKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnJlY2VpdmVSZWFkb25seQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlTXV0YWJsZShhOiBieXRlcykgLT4gYnl0ZXM6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZU11dGFibGU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIyMQogICAgLy8gcmVjZWl2ZU11dGFibGUoYTogdWludDY0W10pIHsKICAgIHByb3RvIDEgMQogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnJlY2VpdmVNdXRhYmxlX2Jsb2NrQDAKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZU11dGFibGVfYmxvY2tAMDoKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMjIKICAgIC8vIGFbMF0gPSAxCiAgICBpbnRjXzMgLy8gMQogICAgaXRvYgogICAgaW50Y18yIC8vIDAKICAgIGludGNfMCAvLyA4CiAgICAqCiAgICBpbnRjXzEgLy8gMgogICAgKwogICAgZnJhbWVfZGlnIC0xCiAgICB1bmNvdmVyIDEKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9idXJ5IC0xCiAgICBpbnRjXzMgLy8gMQogICAgYnogdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlTXV0YWJsZV9hZnRlcl9pZl9lbHNlQDIKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlTXV0YWJsZV9pZl9ib2R5QDEKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZU11dGFibGVfaWZfYm9keUAxOgogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlTXV0YWJsZV9hZnRlcl9pZl9lbHNlQDIKCnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZU11dGFibGVfYWZ0ZXJfaWZfZWxzZUAyOgogICAgZnJhbWVfZGlnIDAKICAgIHVuY292ZXIgMQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5yZWNlaXZlUmVhZG9ubHkoYTogYnl0ZXMpIC0+IHZvaWQ6CnRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZVJlYWRvbmx5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMjUKICAgIC8vIHJlY2VpdmVSZWFkb25seShhOiByZWFkb25seSB1aW50NjRbXSkge30KICAgIHByb3RvIDEgMAogICAgYiB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnJlY2VpdmVSZWFkb25seV9ibG9ja0AwCgp0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnJlY2VpdmVSZWFkb25seV9ibG9ja0AwOgogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5fX2FsZ290c19fLmRlZmF1bHRDcmVhdGUoKSAtPiB2b2lkOgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGU6CiAgICBiIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZV9ibG9ja0AwCgpfX2FsZ290c19fLmRlZmF1bHRDcmVhdGVfYmxvY2tAMDoKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}