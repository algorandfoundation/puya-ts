{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "readonlyArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        46
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        310
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        5834
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        880,
                        1146,
                        1341,
                        1450,
                        1581,
                        1689,
                        2056,
                        2262,
                        2360,
                        2564,
                        2904,
                        3322,
                        3575,
                        3972,
                        4397,
                        4781,
                        4912,
                        4926,
                        5039,
                        5105,
                        5177,
                        5293,
                        5564,
                        5665
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        761,
                        783,
                        805,
                        827,
                        851,
                        874,
                        1070,
                        1092,
                        1114,
                        1138,
                        1160,
                        1186,
                        1241,
                        1263,
                        1285,
                        1309,
                        1333,
                        1374,
                        1396,
                        1418,
                        1442,
                        1465,
                        1480,
                        1504,
                        1526,
                        1549,
                        1573,
                        1606,
                        1630,
                        1655,
                        1681,
                        1813,
                        1835,
                        1858,
                        1882,
                        1906,
                        1929,
                        1953,
                        1977,
                        2000,
                        2024,
                        2048,
                        2162,
                        2184,
                        2206,
                        2230,
                        2254,
                        2315,
                        2328,
                        2341,
                        2355,
                        2384,
                        2408,
                        2432,
                        2457,
                        2482,
                        2507,
                        2532,
                        2557,
                        2624,
                        2646,
                        2668,
                        2692,
                        2716,
                        2740,
                        2763,
                        2786,
                        2808,
                        2831,
                        2854,
                        2877,
                        2899,
                        2964,
                        2986,
                        3008,
                        3032,
                        3056,
                        3080,
                        3103,
                        3127,
                        3150,
                        3174,
                        3197,
                        3221,
                        3245,
                        3269,
                        3293,
                        3316,
                        3387,
                        3409,
                        3431,
                        3454,
                        3477,
                        3500,
                        3523,
                        3547,
                        3569,
                        3640,
                        3662,
                        3684,
                        3707,
                        3730,
                        3753,
                        3777,
                        3801,
                        3824,
                        3847,
                        3871,
                        3895,
                        3919,
                        3943,
                        3966,
                        4039,
                        4061,
                        4084,
                        4108,
                        4132,
                        4155,
                        4179,
                        4203,
                        4226,
                        4250,
                        4274,
                        4298,
                        4321,
                        4344,
                        4368,
                        4391,
                        4449,
                        4471,
                        4494,
                        4518,
                        4542,
                        4565,
                        4589,
                        4613,
                        4636,
                        4660,
                        4684,
                        4708,
                        4731,
                        4754,
                        4776,
                        4817,
                        4838,
                        4848,
                        4865,
                        4878,
                        4891,
                        4906,
                        4922,
                        4969,
                        4988,
                        5013,
                        5029,
                        5075,
                        5095,
                        5130,
                        5145,
                        5158,
                        5172,
                        5189,
                        5201,
                        5214,
                        5228,
                        5244,
                        5259,
                        5272,
                        5287,
                        5300,
                        5443,
                        5466,
                        5489,
                        5513,
                        5537,
                        5560,
                        5626,
                        5651,
                        5783,
                        5799,
                        5814,
                        5831,
                        5873
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        690,
                        724,
                        906,
                        1021,
                        1203,
                        1716,
                        1750,
                        1769,
                        2084,
                        2118,
                        2277,
                        2580,
                        2920,
                        3343,
                        3596,
                        3988,
                        4398,
                        5370,
                        5396
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}