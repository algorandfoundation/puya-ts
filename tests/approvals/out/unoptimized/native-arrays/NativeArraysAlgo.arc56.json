{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        162,
                        182,
                        203,
                        226,
                        268,
                        289,
                        330,
                        351,
                        375,
                        392,
                        412,
                        429,
                        450,
                        471,
                        492
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2534
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        785,
                        941,
                        1036,
                        1148,
                        1227,
                        1533,
                        1677,
                        1690,
                        1803,
                        1875,
                        1950,
                        2068,
                        2289,
                        2388
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        520
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        167,
                        187,
                        208,
                        231,
                        273,
                        294,
                        335,
                        356,
                        380,
                        397,
                        417,
                        434,
                        455,
                        476,
                        497
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        725,
                        741,
                        759,
                        777,
                        796,
                        815,
                        864,
                        880,
                        898,
                        916,
                        932,
                        976,
                        992,
                        1010,
                        1028,
                        1088,
                        1104,
                        1122,
                        1140,
                        1167,
                        1183,
                        1201,
                        1219,
                        1351,
                        1367,
                        1385,
                        1403,
                        1419,
                        1436,
                        1454,
                        1472,
                        1488,
                        1506,
                        1524,
                        1597,
                        1606,
                        1623,
                        1637,
                        1653,
                        1669,
                        1686,
                        1733,
                        1752,
                        1772,
                        1792,
                        1840,
                        1863,
                        1898,
                        1912,
                        1927,
                        1942,
                        2014,
                        2028,
                        2044,
                        2060,
                        2075,
                        2204,
                        2219,
                        2235,
                        2251,
                        2266,
                        2282,
                        2354,
                        2376,
                        2493,
                        2521,
                        2531
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        582,
                        678,
                        829,
                        1244,
                        1270,
                        1314,
                        2151,
                        2169
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}