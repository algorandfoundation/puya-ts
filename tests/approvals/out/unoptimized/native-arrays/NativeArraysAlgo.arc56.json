{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "readonlyArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        174,
                        194,
                        215,
                        238,
                        279,
                        300,
                        340,
                        361,
                        385,
                        402,
                        422,
                        439,
                        460,
                        481,
                        502,
                        519
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        5359
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        850,
                        1084,
                        1262,
                        1362,
                        1482,
                        1582,
                        1915,
                        2104,
                        2194,
                        2382,
                        2692,
                        3074,
                        3306,
                        3670,
                        4059,
                        4411,
                        4528,
                        4541,
                        4644,
                        4705,
                        4770,
                        4876,
                        5120,
                        5211
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        547
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        179,
                        199,
                        220,
                        243,
                        284,
                        305,
                        345,
                        366,
                        390,
                        407,
                        427,
                        444,
                        465,
                        486,
                        507,
                        524
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        761,
                        781,
                        801,
                        823,
                        844,
                        1014,
                        1034,
                        1054,
                        1076,
                        1097,
                        1121,
                        1170,
                        1190,
                        1210,
                        1232,
                        1254,
                        1292,
                        1312,
                        1332,
                        1354,
                        1411,
                        1431,
                        1452,
                        1474,
                        1505,
                        1527,
                        1550,
                        1574,
                        1692,
                        1712,
                        1733,
                        1755,
                        1777,
                        1798,
                        1820,
                        1842,
                        1863,
                        1885,
                        1907,
                        2012,
                        2032,
                        2052,
                        2074,
                        2096,
                        2152,
                        2164,
                        2176,
                        2189,
                        2216,
                        2238,
                        2260,
                        2283,
                        2306,
                        2329,
                        2352,
                        2375,
                        2436,
                        2456,
                        2476,
                        2498,
                        2520,
                        2542,
                        2563,
                        2584,
                        2604,
                        2625,
                        2646,
                        2667,
                        2687,
                        2746,
                        2766,
                        2786,
                        2808,
                        2830,
                        2852,
                        2873,
                        2895,
                        2916,
                        2938,
                        2959,
                        2981,
                        3003,
                        3025,
                        3047,
                        3068,
                        3134,
                        3154,
                        3174,
                        3195,
                        3216,
                        3237,
                        3258,
                        3280,
                        3300,
                        3366,
                        3386,
                        3406,
                        3427,
                        3448,
                        3469,
                        3491,
                        3513,
                        3534,
                        3555,
                        3577,
                        3599,
                        3621,
                        3643,
                        3664,
                        3731,
                        3751,
                        3772,
                        3794,
                        3816,
                        3837,
                        3859,
                        3881,
                        3902,
                        3924,
                        3946,
                        3968,
                        3989,
                        4010,
                        4032,
                        4053,
                        4107,
                        4127,
                        4148,
                        4170,
                        4192,
                        4213,
                        4235,
                        4257,
                        4278,
                        4300,
                        4322,
                        4344,
                        4365,
                        4386,
                        4406,
                        4460,
                        4469,
                        4484,
                        4496,
                        4508,
                        4522,
                        4537,
                        4579,
                        4596,
                        4619,
                        4634,
                        4676,
                        4695,
                        4726,
                        4740,
                        4752,
                        4765,
                        4830,
                        4844,
                        4856,
                        4870,
                        4883,
                        5010,
                        5031,
                        5052,
                        5074,
                        5095,
                        5116,
                        5174,
                        5197,
                        5310,
                        5340,
                        5356
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        676,
                        707,
                        871,
                        970,
                        1136,
                        1606,
                        1636,
                        1652,
                        1941,
                        1972,
                        2119,
                        2396,
                        2706,
                        3094,
                        3326,
                        3684,
                        4060,
                        4944,
                        4967
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}