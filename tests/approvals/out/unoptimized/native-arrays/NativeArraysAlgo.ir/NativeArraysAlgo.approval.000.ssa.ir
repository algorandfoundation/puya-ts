main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#1: bytes = tmp%8#0
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@19
    block@1: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "arrayInObject()void" => block@2, method "buildArray()uint64[]" => block@3, method "arrayFromCtor()uint64[]" => block@4, method "buildReadonly()uint64[]" => block@5, method "doThings()void" => block@6, method "fixedArray(uint64[50])void" => block@7, method "arc4Interop()void" => block@8, method "structs((uint64,uint64))(uint64,uint64)[]" => block@9, method "booleans()bool[]" => block@10, method "booleansStatic()(bool,bool,bool)" => block@11, method "arc4Booleans()bool[]" => block@12, method "arc4BooleansStatic()(bool,bool,bool)" => block@13, method "aliasing(uint64[],uint64[])void" => block@14, method "receiveMutable(uint64[])void" => block@15, method "receiveReadonly(uint64[])void" => block@16, * => block@17}
    block@2: // arrayInObject_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayInObject()
        return 1u
    block@3: // buildArray_route_L17
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        return 1u
    block@4: // arrayFromCtor_route_L21
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let tmp%17#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor()
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        return 1u
    block@5: // buildReadonly_route_L25
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let tmp%23#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly()
        let tmp%24#0: bytes = (concat 0x151f7c75 tmp%23#0)
        (log tmp%24#0)
        return 1u
    block@6: // doThings_route_L29
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        return 1u
    block@7: // fixedArray_route_L66
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        let reinterpret_Encoded(uint64[50])%0#0: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(reinterpret_Encoded(uint64[50])%0#0)
        return 1u
    block@8: // arc4Interop_route_L108
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop()
        return 1u
    block@9: // structs_route_L121
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%41#0: Encoded(len+(uint64,uint64)[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%42#0: bytes = (concat 0x151f7c75 tmp%41#0)
        (log tmp%42#0)
        return 1u
    block@10: // booleans_route_L130
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (== tmp%43#0 NoOp)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (!= tmp%45#0 0u)
        (assert tmp%46#0) // can only call when not creating
        let tmp%47#0: Encoded(len+bool1[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans()
        let tmp%48#0: bytes = (concat 0x151f7c75 tmp%47#0)
        (log tmp%48#0)
        return 1u
    block@11: // booleansStatic_route_L134
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (== tmp%49#0 NoOp)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (!= tmp%51#0 0u)
        (assert tmp%52#0) // can only call when not creating
        let (tmp%53#0: bool, tmp%54#0: bool, tmp%55#0: bool) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleansStatic()
        let tmp%56#0: Encoded(bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1)>(tmp%53#0, tmp%54#0, tmp%55#0)
        let tmp%57#0: bytes = (concat 0x151f7c75 tmp%56#0)
        (log tmp%57#0)
        return 1u
    block@12: // arc4Booleans_route_L138
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (== tmp%58#0 NoOp)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (!= tmp%60#0 0u)
        (assert tmp%61#0) // can only call when not creating
        let tmp%62#0: Encoded(len+bool1[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans()
        let tmp%63#0: bytes = (concat 0x151f7c75 tmp%62#0)
        (log tmp%63#0)
        return 1u
    block@13: // arc4BooleansStatic_route_L142
        let tmp%64#0: uint64 = (txn OnCompletion)
        let tmp%65#0: bool = (== tmp%64#0 NoOp)
        (assert tmp%65#0) // OnCompletion is not NoOp
        let tmp%66#0: uint64 = (txn ApplicationID)
        let tmp%67#0: bool = (!= tmp%66#0 0u)
        (assert tmp%67#0) // can only call when not creating
        let (tmp%68#0: Encoded(bool8), tmp%69#0: Encoded(bool8), tmp%70#0: Encoded(bool8)) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic()
        let tmp%71#0: Encoded(bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1)>(tmp%68#0, tmp%69#0, tmp%70#0)
        let tmp%72#0: bytes = (concat 0x151f7c75 tmp%71#0)
        (log tmp%72#0)
        return 1u
    block@14: // aliasing_route_L146
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (== tmp%73#0 NoOp)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        let tmp%76#0: bool = (!= tmp%75#0 0u)
        (assert tmp%76#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 2)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(reinterpret_Encoded(len+uint64[])%0#0, reinterpret_Encoded(len+uint64[])%1#0)
        return 1u
    block@15: // receiveMutable_route_L172
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (== tmp%77#0 NoOp)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        let tmp%80#0: bool = (!= tmp%79#0 0u)
        (assert tmp%80#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let receiveMutable%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(reinterpret_Encoded(len+uint64[])%2#0)
        return 1u
    block@16: // receiveReadonly_route_L176
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (== tmp%81#0 NoOp)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        let tmp%84#0: bool = (!= tmp%83#0 0u)
        (assert tmp%84#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%3#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(reinterpret_Encoded(len+uint64[])%3#0)
        return 1u
    block@17: // switch_case_default_L6
        goto block@18
    block@18: // switch_case_next_L6
        goto block@23
    block@19: // bare_routing_L6
        let tmp%85#0: uint64 = (txn OnCompletion)
        switch tmp%85#0 {0u => block@20, * => block@21}
    block@20: // __algots__.defaultCreate_L6
        let tmp%86#0: uint64 = (txn ApplicationID)
        let tmp%87#0: bool = (== tmp%86#0 0u)
        (assert tmp%87#0) // can only call when creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate()
        return 1u
    block@21: // switch_case_default_L6
        goto block@22
    block@22: // switch_case_next_L6
        goto block@23
    block@23: // after_if_else_L6
        return 0u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayInObject() -> void:
    block@0: // L7
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1337u)
        let (person.name#0: string, person.favouriteNumbers#0: Encoded(len+uint64[])) = ("Alice", encoded_array%0#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(42u)
        let concat%0#0: Encoded(len+uint64[]) = (concat person.favouriteNumbers#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 person.favouriteNumbers#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let person.favouriteNumbers#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let array_length%0#0: uint64 = (extract_uint16 person.favouriteNumbers#1 0u)
        let length#0: uint64 = array_length%0#0
        let tmp%1#0: bool = (== length#0 2u)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> Encoded(len+uint64[]):
    block@0: // L17
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u, 4u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor() -> Encoded(len+uint64[]):
    block@0: // L21
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly() -> Encoded(len+uint64[]):
    block@0: // L25
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u, 4u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L29
        let tmp%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let arr#0: Encoded(len+uint64[]) = tmp%0#0
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(5u)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arr#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let array_length%0#0: uint64 = (extract_uint16 arr#1 0u)
        let (tmp%2#0: bytes, tmp%3#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 8u)
        let tmp%4#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let arr#2: Encoded(len+uint64[]) = tmp%3#0
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%6#0: bool = (== array_length%1#0 4u)
        goto tmp%6#0 ? block@1 : block@6
    block@1: // and_contd_L34
        let array_item%0#0: Encoded(uint64) = extract_value(arr#2, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%7#0: bool = (== values%0#0 1u)
        goto tmp%7#0 ? block@2 : block@6
    block@2: // and_contd_L34
        let array_item%1#0: Encoded(uint64) = extract_value(arr#2, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%8#0: bool = (== values%1#0 2u)
        goto tmp%8#0 ? block@3 : block@6
    block@3: // and_contd_L34
        let array_item%2#0: Encoded(uint64) = extract_value(arr#2, 2u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%9#0: bool = (== values%2#0 3u)
        goto tmp%9#0 ? block@4 : block@6
    block@4: // and_contd_L34
        let array_item%3#0: Encoded(uint64) = extract_value(arr#2, 3u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%10#0: bool = (== values%3#0 4u)
        goto tmp%10#0 ? block@5 : block@6
    block@5: // bool_true_L34
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L34
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L34
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let array_item%4#0: Encoded(uint64) = extract_value(arr#2, 0u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%11#0: bool = (== values%4#0 1u)
        (assert tmp%11#0)
        let array_length%2#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%12#0: uint64 = (- array_length%2#0 1u)
        let array_item%5#0: Encoded(uint64) = extract_value(arr#2, tmp%12#0)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%13#0: bool = (== values%5#0 4u)
        (assert tmp%13#0)
        let tmp%14#0: Encoded(uint64[]) = bytes_encode<uint64[]>(5u)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 tmp%14#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr#2 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let arr#5: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%1#0
        let array_length%3#0: uint64 = (extract_uint16 arr#5 0u)
        let array_length%4#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%15#0: bool = (== array_length%4#0 5u)
        goto tmp%15#0 ? block@8 : block@14
    block@8: // and_contd_L43
        let array_item%6#0: Encoded(uint64) = extract_value(arr#5, 0u)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let tmp%16#0: bool = (== values%6#0 1u)
        goto tmp%16#0 ? block@9 : block@14
    block@9: // and_contd_L43
        let array_item%7#0: Encoded(uint64) = extract_value(arr#5, 1u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%17#0: bool = (== values%7#0 2u)
        goto tmp%17#0 ? block@10 : block@14
    block@10: // and_contd_L43
        let array_item%8#0: Encoded(uint64) = extract_value(arr#5, 2u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let tmp%18#0: bool = (== values%8#0 3u)
        goto tmp%18#0 ? block@11 : block@14
    block@11: // and_contd_L43
        let array_item%9#0: Encoded(uint64) = extract_value(arr#5, 3u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%19#0: bool = (== values%9#0 4u)
        goto tmp%19#0 ? block@12 : block@14
    block@12: // and_contd_L43
        let array_item%10#0: Encoded(uint64) = extract_value(arr#5, 4u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let tmp%20#0: bool = (== values%10#0 5u)
        goto tmp%20#0 ? block@13 : block@14
    block@13: // bool_true_L43
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L43
        let and_result%1#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L43
        let and_result%1#2: bool = φ(and_result%1#0 <- block@13, and_result%1#1 <- block@14)
        (assert and_result%1#2) // assert target is match for conditions
        let (tmp%21#0: bytes, tmp%22#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#5, 8u)
        let tmp%23#0: uint64 = decode_bytes<uint64>(tmp%21#0)
        let arr#8: Encoded(len+uint64[]) = tmp%22#0
        let top#0: uint64 = tmp%23#0
        let tmp%24#0: bool = (== top#0 5u)
        (assert tmp%24#0)
        let array_length%5#0: uint64 = (extract_uint16 arr#8 0u)
        let tmp%25#0: bool = (== array_length%5#0 4u)
        goto tmp%25#0 ? block@16 : block@21
    block@16: // and_contd_L49
        let array_item%11#0: Encoded(uint64) = extract_value(arr#8, 0u)
        let values%11#0: uint64 = decode_bytes<uint64>(array_item%11#0)
        let tmp%26#0: bool = (== values%11#0 1u)
        goto tmp%26#0 ? block@17 : block@21
    block@17: // and_contd_L49
        let array_item%12#0: Encoded(uint64) = extract_value(arr#8, 1u)
        let values%12#0: uint64 = decode_bytes<uint64>(array_item%12#0)
        let tmp%27#0: bool = (== values%12#0 2u)
        goto tmp%27#0 ? block@18 : block@21
    block@18: // and_contd_L49
        let array_item%13#0: Encoded(uint64) = extract_value(arr#8, 2u)
        let values%13#0: uint64 = decode_bytes<uint64>(array_item%13#0)
        let tmp%28#0: bool = (== values%13#0 3u)
        goto tmp%28#0 ? block@19 : block@21
    block@19: // and_contd_L49
        let array_item%14#0: Encoded(uint64) = extract_value(arr#8, 3u)
        let values%14#0: uint64 = decode_bytes<uint64>(array_item%14#0)
        let tmp%29#0: bool = (== values%14#0 4u)
        goto tmp%29#0 ? block@20 : block@21
    block@20: // bool_true_L49
        let and_result%2#0: bool = 1u
        goto block@22
    block@21: // bool_false_L49
        let and_result%2#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L49
        let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
        (assert and_result%2#2) // assert target is match for conditions
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(10u)
        let updated_array%0#0: Encoded(len+uint64[]) = replace_value(arr#8, 1u, encoded_value%0#0)
        let arr#11: Encoded(len+uint64[]) = updated_array%0#0
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(5u)
        let updated_array%1#0: Encoded(len+uint64[]) = replace_value(arr#11, 1u, encoded_value%1#0)
        let arr2#0: Encoded(len+uint64[]) = updated_array%1#0
        let array_length%6#0: uint64 = (extract_uint16 arr#11 0u)
        let tmp%30#0: bool = (== array_length%6#0 4u)
        goto tmp%30#0 ? block@23 : block@28
    block@23: // and_contd_L56
        let array_item%15#0: Encoded(uint64) = extract_value(arr#11, 0u)
        let values%15#0: uint64 = decode_bytes<uint64>(array_item%15#0)
        let tmp%31#0: bool = (== values%15#0 1u)
        goto tmp%31#0 ? block@24 : block@28
    block@24: // and_contd_L56
        let array_item%16#0: Encoded(uint64) = extract_value(arr#11, 1u)
        let values%16#0: uint64 = decode_bytes<uint64>(array_item%16#0)
        let tmp%32#0: bool = (== values%16#0 10u)
        goto tmp%32#0 ? block@25 : block@28
    block@25: // and_contd_L56
        let array_item%17#0: Encoded(uint64) = extract_value(arr#11, 2u)
        let values%17#0: uint64 = decode_bytes<uint64>(array_item%17#0)
        let tmp%33#0: bool = (== values%17#0 3u)
        goto tmp%33#0 ? block@26 : block@28
    block@26: // and_contd_L56
        let array_item%18#0: Encoded(uint64) = extract_value(arr#11, 3u)
        let values%18#0: uint64 = decode_bytes<uint64>(array_item%18#0)
        let tmp%34#0: bool = (== values%18#0 4u)
        goto tmp%34#0 ? block@27 : block@28
    block@27: // bool_true_L56
        let and_result%3#0: bool = 1u
        goto block@29
    block@28: // bool_false_L56
        let and_result%3#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L56
        let and_result%3#2: bool = φ(and_result%3#0 <- block@27, and_result%3#1 <- block@28)
        (assert and_result%3#2) // assert target is match for conditions
        let array_length%7#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%35#0: bool = (== array_length%7#0 4u)
        goto tmp%35#0 ? block@30 : block@35
    block@30: // and_contd_L57
        let array_item%19#0: Encoded(uint64) = extract_value(arr2#0, 0u)
        let values%19#0: uint64 = decode_bytes<uint64>(array_item%19#0)
        let tmp%36#0: bool = (== values%19#0 1u)
        goto tmp%36#0 ? block@31 : block@35
    block@31: // and_contd_L57
        let array_item%20#0: Encoded(uint64) = extract_value(arr2#0, 1u)
        let values%20#0: uint64 = decode_bytes<uint64>(array_item%20#0)
        let tmp%37#0: bool = (== values%20#0 5u)
        goto tmp%37#0 ? block@32 : block@35
    block@32: // and_contd_L57
        let array_item%21#0: Encoded(uint64) = extract_value(arr2#0, 2u)
        let values%21#0: uint64 = decode_bytes<uint64>(array_item%21#0)
        let tmp%38#0: bool = (== values%21#0 3u)
        goto tmp%38#0 ? block@33 : block@35
    block@33: // and_contd_L57
        let array_item%22#0: Encoded(uint64) = extract_value(arr2#0, 3u)
        let values%22#0: uint64 = decode_bytes<uint64>(array_item%22#0)
        let tmp%39#0: bool = (== values%22#0 4u)
        goto tmp%39#0 ? block@34 : block@35
    block@34: // bool_true_L57
        let and_result%4#0: bool = 1u
        goto block@36
    block@35: // bool_false_L57
        let and_result%4#1: bool = 0u
        goto block@36
    block@36: // bool_merge_L57
        let and_result%4#2: bool = φ(and_result%4#0 <- block@34, and_result%4#1 <- block@35)
        (assert and_result%4#2) // assert target is match for conditions
        let tmp%40#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(12u, 13u)
        let t1#0: Encoded(uint64,uint64) = tmp%40#0
        let array_length%8#0: uint64 = (extract_uint16 arr#11 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#11)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#11 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = replace%2#0
        let tmp%41#0: Encoded(uint64[]) = bytes_encode<uint64[]>(11u)
        let concat%3#0: Encoded(len+uint64[]) = (concat as_Encoded(len+uint64[])%2#0 tmp%41#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 as_Encoded(len+uint64[])%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = (replace3 concat%3#0 0u as_u16_bytes%3#0)
        let as_Encoded(len+uint64[])%3#0: Encoded(len+uint64[]) = replace%3#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(t1#0, 0)
        let values%23#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(t1#0, 1)
        let values%24#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(values%23#0, values%24#0)
        let array_length%9#0: uint64 = (extract_uint16 encoded_array%0#0 0u)
        let extract_to_end%2#0: bytes = ((extract 2 0) encoded_array%0#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat as_Encoded(len+uint64[])%3#0 extract_to_end%2#0) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let replace%4#0: bytes = (replace3 concat%4#0 0u as_u16_bytes%4#0)
        let as_Encoded(len+uint64[])%4#0: Encoded(len+uint64[]) = replace%4#0
        let arr#16: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%4#0
        let array_length%10#0: uint64 = (extract_uint16 arr#16 0u)
        let tmp%42#0: bool = (== array_length%10#0 11u)
        goto tmp%42#0 ? block@37 : block@49
    block@37: // and_contd_L63
        let array_item%23#0: Encoded(uint64) = extract_value(arr#16, 0u)
        let values%25#0: uint64 = decode_bytes<uint64>(array_item%23#0)
        let tmp%43#0: bool = (== values%25#0 1u)
        goto tmp%43#0 ? block@38 : block@49
    block@38: // and_contd_L63
        let array_item%24#0: Encoded(uint64) = extract_value(arr#16, 1u)
        let values%26#0: uint64 = decode_bytes<uint64>(array_item%24#0)
        let tmp%44#0: bool = (== values%26#0 10u)
        goto tmp%44#0 ? block@39 : block@49
    block@39: // and_contd_L63
        let array_item%25#0: Encoded(uint64) = extract_value(arr#16, 2u)
        let values%27#0: uint64 = decode_bytes<uint64>(array_item%25#0)
        let tmp%45#0: bool = (== values%27#0 3u)
        goto tmp%45#0 ? block@40 : block@49
    block@40: // and_contd_L63
        let array_item%26#0: Encoded(uint64) = extract_value(arr#16, 3u)
        let values%28#0: uint64 = decode_bytes<uint64>(array_item%26#0)
        let tmp%46#0: bool = (== values%28#0 4u)
        goto tmp%46#0 ? block@41 : block@49
    block@41: // and_contd_L63
        let array_item%27#0: Encoded(uint64) = extract_value(arr#16, 4u)
        let values%29#0: uint64 = decode_bytes<uint64>(array_item%27#0)
        let tmp%47#0: bool = (== values%29#0 1u)
        goto tmp%47#0 ? block@42 : block@49
    block@42: // and_contd_L63
        let array_item%28#0: Encoded(uint64) = extract_value(arr#16, 5u)
        let values%30#0: uint64 = decode_bytes<uint64>(array_item%28#0)
        let tmp%48#0: bool = (== values%30#0 10u)
        goto tmp%48#0 ? block@43 : block@49
    block@43: // and_contd_L63
        let array_item%29#0: Encoded(uint64) = extract_value(arr#16, 6u)
        let values%31#0: uint64 = decode_bytes<uint64>(array_item%29#0)
        let tmp%49#0: bool = (== values%31#0 3u)
        goto tmp%49#0 ? block@44 : block@49
    block@44: // and_contd_L63
        let array_item%30#0: Encoded(uint64) = extract_value(arr#16, 7u)
        let values%32#0: uint64 = decode_bytes<uint64>(array_item%30#0)
        let tmp%50#0: bool = (== values%32#0 4u)
        goto tmp%50#0 ? block@45 : block@49
    block@45: // and_contd_L63
        let array_item%31#0: Encoded(uint64) = extract_value(arr#16, 8u)
        let values%33#0: uint64 = decode_bytes<uint64>(array_item%31#0)
        let tmp%51#0: bool = (== values%33#0 11u)
        goto tmp%51#0 ? block@46 : block@49
    block@46: // and_contd_L63
        let array_item%32#0: Encoded(uint64) = extract_value(arr#16, 9u)
        let values%34#0: uint64 = decode_bytes<uint64>(array_item%32#0)
        let tmp%52#0: bool = (== values%34#0 12u)
        goto tmp%52#0 ? block@47 : block@49
    block@47: // and_contd_L63
        let array_item%33#0: Encoded(uint64) = extract_value(arr#16, 10u)
        let values%35#0: uint64 = decode_bytes<uint64>(array_item%33#0)
        let tmp%53#0: bool = (== values%35#0 13u)
        goto tmp%53#0 ? block@48 : block@49
    block@48: // bool_true_L63
        let and_result%5#0: bool = 1u
        goto block@50
    block@49: // bool_false_L63
        let and_result%5#1: bool = 0u
        goto block@50
    block@50: // bool_merge_L63
        let and_result%5#2: bool = φ(and_result%5#0 <- block@48, and_result%5#1 <- block@49)
        (assert and_result%5#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: Encoded(uint64[50])) -> void:
    block@0: // L66
        let encoded_array%0#0: Encoded(uint64[4]) = bytes_encode<uint64[4]>(1u, 2u, 3u, 4u)
        let x#0: Encoded(uint64[4]) = encoded_array%0#0
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(0u)
        let updated_array%0#0: Encoded(uint64[4]) = replace_value(x#0, 0u, encoded_value%0#0)
        let x#1: Encoded(uint64[4]) = updated_array%0#0
        let array_item%0#0: Encoded(uint64) = extract_value(x#1, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let array_item%1#0: Encoded(uint64) = extract_value(y#0, 0u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%0#0: bool = (== values%0#0 values%1#0)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== 4u 4u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // and_contd_L71
        let array_item%2#0: Encoded(uint64) = extract_value(x#1, 0u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%2#0: bool = (< values%2#0 1u)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // and_contd_L71
        let array_item%3#0: Encoded(uint64) = extract_value(x#1, 1u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%3#0: bool = (== values%3#0 2u)
        goto tmp%3#0 ? block@3 : block@6
    block@3: // and_contd_L71
        let array_item%4#0: Encoded(uint64) = extract_value(x#1, 2u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%4#0: bool = (== values%4#0 3u)
        goto tmp%4#0 ? block@4 : block@6
    block@4: // and_contd_L71
        let array_item%5#0: Encoded(uint64) = extract_value(x#1, 3u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%5#0: bool = (== values%5#0 4u)
        goto tmp%5#0 ? block@5 : block@6
    block@5: // bool_true_L71
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L71
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L71
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let array_item%6#0: Encoded(uint64) = extract_value(y#0, 49u)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let tmp%6#0: bool = (>= values%6#0 0u)
        (assert tmp%6#0) // assert target is match for conditions
        let tmp%7#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(1u, 2u)
        let tmp%8#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(3u, 4u)
        let encoded_array%1#0: Encoded((uint64,uint64)[2]) = bytes_encode<(uint64,uint64)[2]>(tmp%7#0, tmp%8#0)
        let myVectors#0: Encoded((uint64,uint64)[2]) = encoded_array%1#0
        let tmp%9#0: bool = (== 2u 2u)
        goto tmp%9#0 ? block@8 : block@13
    block@8: // and_contd_L75
        let array_item%7#0: Encoded(uint64,uint64) = extract_value(myVectors#0, 0u)
        let tuple_item%0#0: Encoded(uint64) = extract_value(array_item%7#0, 0)
        let values%7#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%10#0: bool = (== values%7#0 1u)
        goto tmp%10#0 ? block@9 : block@13
    block@9: // and_contd_L75
        let array_item%8#0: Encoded(uint64,uint64) = extract_value(myVectors#0, 0u)
        let tuple_item%1#0: Encoded(uint64) = extract_value(array_item%8#0, 1)
        let values%8#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%11#0: bool = (== values%8#0 2u)
        goto tmp%11#0 ? block@10 : block@13
    block@10: // and_contd_L75
        let array_item%9#0: Encoded(uint64,uint64) = extract_value(myVectors#0, 1u)
        let tuple_item%2#0: Encoded(uint64) = extract_value(array_item%9#0, 0)
        let values%9#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%12#0: bool = (== values%9#0 3u)
        goto tmp%12#0 ? block@11 : block@13
    block@11: // and_contd_L75
        let array_item%10#0: Encoded(uint64,uint64) = extract_value(myVectors#0, 1u)
        let tuple_item%3#0: Encoded(uint64) = extract_value(array_item%10#0, 1)
        let values%10#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%13#0: bool = (== values%10#0 4u)
        goto tmp%13#0 ? block@12 : block@13
    block@12: // bool_true_L75
        let and_result%1#0: bool = 1u
        goto block@14
    block@13: // bool_false_L75
        let and_result%1#1: bool = 0u
        goto block@14
    block@14: // bool_merge_L75
        let and_result%1#2: bool = φ(and_result%1#0 <- block@12, and_result%1#1 <- block@13)
        (assert and_result%1#2) // assert target is match for conditions
        let tmp%14#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(5u, 6u)
        let encoded_array%2#0: Encoded((uint64,uint64)[1]) = bytes_encode<(uint64,uint64)[1]>(tmp%14#0)
        let tmp%15#0: Encoded((uint64,uint64)[1]) = bytes_encode<((uint64,uint64)[1])>(encoded_array%2#0)
        let myObject#0: Encoded((uint64,uint64)[1]) = tmp%15#0
        let tuple_item%4#0: Encoded((uint64,uint64)[1]) = extract_value(myObject#0, 0)
        let tmp%16#0: bool = (== 1u 1u)
        goto tmp%16#0 ? block@15 : block@18
    block@15: // and_contd_L81
        let tuple_item%5#0: Encoded((uint64,uint64)[1]) = extract_value(myObject#0, 0)
        let array_item%11#0: Encoded(uint64,uint64) = extract_value(tuple_item%5#0, 0u)
        let tuple_item%6#0: Encoded(uint64) = extract_value(array_item%11#0, 0)
        let values%11#0: uint64 = decode_bytes<uint64>(tuple_item%6#0)
        let tmp%17#0: bool = (== values%11#0 5u)
        goto tmp%17#0 ? block@16 : block@18
    block@16: // and_contd_L81
        let tuple_item%7#0: Encoded((uint64,uint64)[1]) = extract_value(myObject#0, 0)
        let array_item%12#0: Encoded(uint64,uint64) = extract_value(tuple_item%7#0, 0u)
        let tuple_item%8#0: Encoded(uint64) = extract_value(array_item%12#0, 1)
        let values%12#0: uint64 = decode_bytes<uint64>(tuple_item%8#0)
        let tmp%18#0: bool = (== values%12#0 6u)
        goto tmp%18#0 ? block@17 : block@18
    block@17: // bool_true_L81
        let and_result%2#0: bool = 1u
        goto block@19
    block@18: // bool_false_L81
        let and_result%2#1: bool = 0u
        goto block@19
    block@19: // bool_merge_L81
        let and_result%2#2: bool = φ(and_result%2#0 <- block@17, and_result%2#1 <- block@18)
        (assert and_result%2#2) // assert target is match for conditions
        let tmp%19#0: Encoded(uint64[4]) = (bzero 32u)
        let z1#0: Encoded(uint64[4]) = tmp%19#0
        let tmp%20#0: bool = (== 4u 4u)
        (assert tmp%20#0)
        let tmp%21#0: bool = (== 4u 4u)
        goto tmp%21#0 ? block@20 : block@25
    block@20: // and_contd_L85
        let array_item%13#0: Encoded(uint64) = extract_value(z1#0, 0u)
        let values%13#0: uint64 = decode_bytes<uint64>(array_item%13#0)
        let tmp%22#0: bool = (== values%13#0 0u)
        goto tmp%22#0 ? block@21 : block@25
    block@21: // and_contd_L85
        let array_item%14#0: Encoded(uint64) = extract_value(z1#0, 1u)
        let values%14#0: uint64 = decode_bytes<uint64>(array_item%14#0)
        let tmp%23#0: bool = (== values%14#0 0u)
        goto tmp%23#0 ? block@22 : block@25
    block@22: // and_contd_L85
        let array_item%15#0: Encoded(uint64) = extract_value(z1#0, 2u)
        let values%15#0: uint64 = decode_bytes<uint64>(array_item%15#0)
        let tmp%24#0: bool = (== values%15#0 0u)
        goto tmp%24#0 ? block@23 : block@25
    block@23: // and_contd_L85
        let array_item%16#0: Encoded(uint64) = extract_value(z1#0, 3u)
        let values%16#0: uint64 = decode_bytes<uint64>(array_item%16#0)
        let tmp%25#0: bool = (== values%16#0 0u)
        goto tmp%25#0 ? block@24 : block@25
    block@24: // bool_true_L85
        let and_result%3#0: bool = 1u
        goto block@26
    block@25: // bool_false_L85
        let and_result%3#1: bool = 0u
        goto block@26
    block@26: // bool_merge_L85
        let and_result%3#2: bool = φ(and_result%3#0 <- block@24, and_result%3#1 <- block@25)
        (assert and_result%3#2) // assert target is match for conditions
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let updated_array%1#0: Encoded(uint64[4]) = replace_value(z1#0, 0u, encoded_value%1#0)
        let z1#3: Encoded(uint64[4]) = updated_array%1#0
        let encoded_value%2#0: Encoded(uint64) = bytes_encode<uint64>(2u)
        let updated_array%2#0: Encoded(uint64[4]) = replace_value(z1#3, 1u, encoded_value%2#0)
        let z1#4: Encoded(uint64[4]) = updated_array%2#0
        let encoded_value%3#0: Encoded(uint64) = bytes_encode<uint64>(3u)
        let updated_array%3#0: Encoded(uint64[4]) = replace_value(z1#4, 2u, encoded_value%3#0)
        let z1#5: Encoded(uint64[4]) = updated_array%3#0
        let encoded_value%4#0: Encoded(uint64) = bytes_encode<uint64>(4u)
        let updated_array%4#0: Encoded(uint64[4]) = replace_value(z1#5, 3u, encoded_value%4#0)
        let z1#6: Encoded(uint64[4]) = updated_array%4#0
        let tmp%26#0: bool = (== 4u 4u)
        goto tmp%26#0 ? block@27 : block@32
    block@27: // and_contd_L90
        let array_item%17#0: Encoded(uint64) = extract_value(z1#6, 0u)
        let values%17#0: uint64 = decode_bytes<uint64>(array_item%17#0)
        let tmp%27#0: bool = (<= values%17#0 1u)
        goto tmp%27#0 ? block@28 : block@32
    block@28: // and_contd_L90
        let array_item%18#0: Encoded(uint64) = extract_value(z1#6, 1u)
        let values%18#0: uint64 = decode_bytes<uint64>(array_item%18#0)
        let tmp%28#0: bool = (== values%18#0 2u)
        goto tmp%28#0 ? block@29 : block@32
    block@29: // and_contd_L90
        let array_item%19#0: Encoded(uint64) = extract_value(z1#6, 2u)
        let values%19#0: uint64 = decode_bytes<uint64>(array_item%19#0)
        let tmp%29#0: bool = (== values%19#0 3u)
        goto tmp%29#0 ? block@30 : block@32
    block@30: // and_contd_L90
        let array_item%20#0: Encoded(uint64) = extract_value(z1#6, 3u)
        let values%20#0: uint64 = decode_bytes<uint64>(array_item%20#0)
        let tmp%30#0: bool = (== values%20#0 4u)
        goto tmp%30#0 ? block@31 : block@32
    block@31: // bool_true_L90
        let and_result%4#0: bool = 1u
        goto block@33
    block@32: // bool_false_L90
        let and_result%4#1: bool = 0u
        goto block@33
    block@33: // bool_merge_L90
        let and_result%4#2: bool = φ(and_result%4#0 <- block@31, and_result%4#1 <- block@32)
        (assert and_result%4#2) // assert target is match for conditions
        let tmp%31#0: Encoded(bool1[3]) = (bzero 1u)
        let z2#0: Encoded(bool1[3]) = tmp%31#0
        let array_item%21#0: bool = extract_value(z2#0, 0u)
        let tmp%32#0: bool = (== array_item%21#0 0u)
        (assert tmp%32#0)
        let tmp%33#0: Encoded(uint64[2][4]) = (bzero 64u)
        let z3#0: Encoded(uint64[2][4]) = tmp%33#0
        let tmp%34#0: bool = (== 4u 4u)
        (assert tmp%34#0)
        let tmp%35#0: Encoded((uint64,uint64)[4]) = (bzero 64u)
        let z4#0: Encoded((uint64,uint64)[4]) = tmp%35#0
        let tmp%36#0: bool = (== 4u 4u)
        (assert tmp%36#0)
        let tmp%37#0: Encoded(uint64[4]) = (bzero 32u)
        let z5#0: Encoded(uint64[4]) = tmp%37#0
        let tmp%38#0: bool = (== 4u 4u)
        (assert tmp%38#0)
        let tmp%39#0: Encoded((uint64,bool1)[4]) = (bzero 36u)
        let z6#0: Encoded((uint64,bool1)[4]) = tmp%39#0
        let tmp%40#0: bool = (== 4u 4u)
        (assert tmp%40#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
    block@0: // L108
        let encoded_array%0#0: Encoded(len+uint32[]) = bytes_encode<(len+uint32[])>(0x0000007b, 0x0000007b)
        let da1#0: Encoded(len+uint32[]) = encoded_array%0#0
        let encoded_array%1#0: Encoded(uint32[2]) = bytes_encode<uint32[2]>(0x0000007b, 0x0000007b)
        let sa1#0: Encoded(uint32[2]) = encoded_array%1#0
        let encoded_array%2#0: Encoded(len+uint32[]) = bytes_encode<(len+uint32[])>(0x0000007b, 0x0000007b)
        let a1#0: Encoded(len+uint32[]) = encoded_array%2#0
        let array_length%0#0: uint64 = (extract_uint16 da1#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) da1#0)
        let concat%0#0: Encoded(len+uint32[]) = (concat a1#0 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 4u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint32[])%0#0: Encoded(len+uint32[]) = replace%0#0
        let concat%1#0: Encoded(len+uint32[]) = (concat as_Encoded(len+uint32[])%0#0 sa1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint32[])%1#0: Encoded(len+uint32[]) = replace%1#0
        let a1#1: Encoded(len+uint32[]) = as_Encoded(len+uint32[])%1#0
        let array_length%1#0: uint64 = (extract_uint16 a1#1 0u)
        let tmp%0#0: bool = (== array_length%1#0 6u)
        goto tmp%0#0 ? block@1 : block@8
    block@1: // and_contd_L118
        let array_item%0#0: Encoded(uint32) = extract_value(a1#1, 0u)
        let tmp%1#0: bool = (== array_item%0#0 0x0000007b)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // and_contd_L118
        let array_item%1#0: Encoded(uint32) = extract_value(a1#1, 1u)
        let tmp%2#0: bool = (== array_item%1#0 0x0000007b)
        goto tmp%2#0 ? block@3 : block@8
    block@3: // and_contd_L118
        let array_item%2#0: Encoded(uint32) = extract_value(a1#1, 2u)
        let tmp%3#0: bool = (== array_item%2#0 0x0000007b)
        goto tmp%3#0 ? block@4 : block@8
    block@4: // and_contd_L118
        let array_item%3#0: Encoded(uint32) = extract_value(a1#1, 3u)
        let tmp%4#0: bool = (== array_item%3#0 0x0000007b)
        goto tmp%4#0 ? block@5 : block@8
    block@5: // and_contd_L118
        let array_item%4#0: Encoded(uint32) = extract_value(a1#1, 4u)
        let tmp%5#0: bool = (== array_item%4#0 0x0000007b)
        goto tmp%5#0 ? block@6 : block@8
    block@6: // and_contd_L118
        let array_item%5#0: Encoded(uint32) = extract_value(a1#1, 5u)
        let tmp%6#0: bool = (== array_item%5#0 0x0000007b)
        goto tmp%6#0 ? block@7 : block@8
    block@7: // bool_true_L118
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L118
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L118
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: Encoded(uint64,uint64)) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L121
        let tuple_item%0#0: Encoded(uint64) = extract_value(p#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(p#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let x#0: uint64 = values%0#0
        let y#0: uint64 = values%1#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>()
        let myVectors#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(x#0, y#0)
        let encoded_array%1#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>(tmp%0#0)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = encoded_array%1#0
        let array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#0: bool = (== array_length%0#0 1u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // and_contd_L126
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(myVectors#1, 0u)
        let tuple_item%2#0: Encoded(uint64) = extract_value(array_item%0#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%2#0: bool = (== values%2#0 x#0)
        goto tmp%2#0 ? block@2 : block@4
    block@2: // and_contd_L126
        let array_item%1#0: Encoded(uint64,uint64) = extract_value(myVectors#1, 0u)
        let tuple_item%3#0: Encoded(uint64) = extract_value(array_item%1#0, 1)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%3#0: bool = (== values%3#0 y#0)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // bool_true_L126
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L126
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L126
        let and_result%0#2: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return myVectors#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans() -> Encoded(len+bool1[]):
    block@0: // L130
        let encoded_array%0#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(1u, 0u, 1u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleansStatic() -> <bool, bool, bool>:
    block@0: // L134
        return 1u 0u 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans() -> Encoded(len+bool1[]):
    block@0: // L138
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%2#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let encoded_array%0#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%0#0, tmp%1#0, tmp%2#0)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic() -> <Encoded(bool8), Encoded(bool8), Encoded(bool8)>:
    block@0: // L142
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%2#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        return tmp%0#0 tmp%1#0 tmp%2#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: Encoded(len+uint64[]), readOnly: Encoded(len+uint64[])) -> void:
    block@0: // L146
        let needClone#0: Encoded(len+uint64[]) = mutable#0
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(5u)
        let updated_array%0#0: Encoded(len+uint64[]) = replace_value(needClone#0, 0u, encoded_value%0#0)
        let needClone#1: Encoded(len+uint64[]) = updated_array%0#0
        let noNeedClone#0: Encoded(len+uint64[]) = readOnly#0
        let array_length%0#0: uint64 = (extract_uint16 mutable#0 0u)
        let needClone2#0: Encoded(len+uint64[]) = mutable#0
        let array_item%0#0: Encoded(uint64) = extract_value(mutable#0, 1u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 2u)
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let updated_array%1#0: Encoded(len+uint64[]) = replace_value(mutable#0, 1u, encoded_value%1#0)
        let mutable#1: Encoded(len+uint64[]) = updated_array%1#0
        let array_item%1#0: Encoded(uint64) = extract_value(mutable#1, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let array_item%2#0: Encoded(uint64) = extract_value(needClone2#0, 1u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%1#0: bool = (!= values%1#0 values%2#0)
        (assert tmp%1#0) // These should not match
        let receiveMutable%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(mutable#1)
        let mutable#2: Encoded(len+uint64[]) = receiveMutable%0#0
        let array_length%1#0: uint64 = (extract_uint16 mutable#2 0u)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(mutable#2)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(readOnly#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: Encoded(len+uint64[])) -> Encoded(len+uint64[]):
    block@0: // L172
        let a%is_original#0: bool = 1u
        let a%out#0: Encoded(len+uint64[]) = a#0
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let updated_array%0#0: Encoded(len+uint64[]) = replace_value(a#0, 0u, encoded_value%0#0)
        let a#1: Encoded(len+uint64[]) = updated_array%0#0
        goto a%is_original#0 ? block@1 : block@2
    block@1: // if_body_L1
        let a%out#1: Encoded(len+uint64[]) = a#1
        goto block@2
    block@2: // after_if_else_L1
        let a%out#2: Encoded(len+uint64[]) = φ(a%out#0 <- block@0, a%out#1 <- block@1)
        return a%out#2

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(a: Encoded(len+uint64[])) -> void:
    block@0: // L176
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 