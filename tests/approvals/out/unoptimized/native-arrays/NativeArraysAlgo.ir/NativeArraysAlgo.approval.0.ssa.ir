main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@2, method "doThings()void" => block@3, method "arc4Interop()void" => block@4, method "structs((uint64,uint64))(uint64,uint64)[]" => block@5, * => block@6}
    block@2: // buildArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        return 1u
    block@3: // doThings_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        return 1u
    block@4: // arc4Interop_route_L42
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop()
        return 1u
    block@5: // structs_route_L54
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_bytes[16]%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 reinterpret_bytes[16]%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%0%0#0: uint64 = (btoi item1%0#0)
        let tmp%21#0: (uint64,uint64)[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(item0%0%0#0, item1%0%0#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        return 1u
    block@6: // switch_case_default_L6
        goto block@7
    block@7: // switch_case_next_L6
        goto block@12
    block@8: // bare_routing_L6
        let tmp%23#0: uint64 = (txn OnCompletion)
        switch tmp%23#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L6
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (== tmp%24#0 0u)
        (assert tmp%25#0) // can only call when creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L6
        goto block@11
    block@11: // switch_case_next_L6
        goto block@12
    block@12: // after_if_else_L6
        return 0u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> uint64[]:
    block@0: // L7
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: uint64[] = encode<uint64>(1u, 2u, 3u, 4u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        return concat_result%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L11
        let arr#0: uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 4u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // and_contd_L14
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset%0#0: uint64 = (* 0u 8u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi arc4_item%0#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        goto tmp%3#0 ? block@2 : block@6
    block@2: // and_contd_L14
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let item_offset%1#0: uint64 = (* 1u 8u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 8u) // on error: Index access is out of bounds
        let tmp%4#0: uint64 = (btoi arc4_item%1#0)
        let tmp%5#0: bool = (== tmp%4#0 2u)
        goto tmp%5#0 ? block@3 : block@6
    block@3: // and_contd_L14
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#0)
        let item_offset%2#0: uint64 = (* 2u 8u)
        let arc4_item%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 8u) // on error: Index access is out of bounds
        let tmp%6#0: uint64 = (btoi arc4_item%2#0)
        let tmp%7#0: bool = (== tmp%6#0 3u)
        goto tmp%7#0 ? block@4 : block@6
    block@4: // and_contd_L14
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#0)
        let item_offset%3#0: uint64 = (* 3u 8u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 8u) // on error: Index access is out of bounds
        let tmp%8#0: uint64 = (btoi arc4_item%3#0)
        let tmp%9#0: bool = (== tmp%8#0 4u)
        goto tmp%9#0 ? block@5 : block@6
    block@5: // bool_true_L14
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L14
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L14
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: uint64[] = encode<uint64>(5u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%1#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) concat_result%0#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%2#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#3: uint64[] = concat_result%1#0
        let tmp%10#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%11#0: bool = (== tmp%10#0 5u)
        goto tmp%11#0 ? block@8 : block@14
    block@8: // and_contd_L19
        let array_head_and_tail%4#0: bytes = ((extract 2 0) arr#3)
        let item_offset%4#0: uint64 = (* 0u 8u)
        let arc4_item%4#0: bytes = (extract3 array_head_and_tail%4#0 item_offset%4#0 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi arc4_item%4#0)
        let tmp%13#0: bool = (== tmp%12#0 1u)
        goto tmp%13#0 ? block@9 : block@14
    block@9: // and_contd_L19
        let array_head_and_tail%5#0: bytes = ((extract 2 0) arr#3)
        let item_offset%5#0: uint64 = (* 1u 8u)
        let arc4_item%5#0: bytes = (extract3 array_head_and_tail%5#0 item_offset%5#0 8u) // on error: Index access is out of bounds
        let tmp%14#0: uint64 = (btoi arc4_item%5#0)
        let tmp%15#0: bool = (== tmp%14#0 2u)
        goto tmp%15#0 ? block@10 : block@14
    block@10: // and_contd_L19
        let array_head_and_tail%6#0: bytes = ((extract 2 0) arr#3)
        let item_offset%6#0: uint64 = (* 2u 8u)
        let arc4_item%6#0: bytes = (extract3 array_head_and_tail%6#0 item_offset%6#0 8u) // on error: Index access is out of bounds
        let tmp%16#0: uint64 = (btoi arc4_item%6#0)
        let tmp%17#0: bool = (== tmp%16#0 3u)
        goto tmp%17#0 ? block@11 : block@14
    block@11: // and_contd_L19
        let array_head_and_tail%7#0: bytes = ((extract 2 0) arr#3)
        let item_offset%7#0: uint64 = (* 3u 8u)
        let arc4_item%7#0: bytes = (extract3 array_head_and_tail%7#0 item_offset%7#0 8u) // on error: Index access is out of bounds
        let tmp%18#0: uint64 = (btoi arc4_item%7#0)
        let tmp%19#0: bool = (== tmp%18#0 4u)
        goto tmp%19#0 ? block@12 : block@14
    block@12: // and_contd_L19
        let array_head_and_tail%8#0: bytes = ((extract 2 0) arr#3)
        let item_offset%8#0: uint64 = (* 4u 8u)
        let arc4_item%8#0: bytes = (extract3 array_head_and_tail%8#0 item_offset%8#0 8u) // on error: Index access is out of bounds
        let tmp%20#0: uint64 = (btoi arc4_item%8#0)
        let tmp%21#0: bool = (== tmp%20#0 5u)
        goto tmp%21#0 ? block@13 : block@14
    block@13: // bool_true_L19
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L19
        let and_result%1#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L19
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@13, and_result%1#1 <- block@14)
        (assert and_result%1#2) // assert target is match for conditions
        let tmp%22#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%23#0: uint64 = (- tmp%22#0 1u)
        let array_head_and_tail%9#0: bytes = ((extract 2 0) arr#3)
        let item_offset%9#0: uint64 = (* tmp%23#0 8u)
        let arc4_item%9#0: bytes = (extract3 array_head_and_tail%9#0 item_offset%9#0 8u) // on error: Index access is out of bounds
        let top#0: uint64 = (btoi arc4_item%9#0)
        let tmp%24#0: bool = (== top#0 5u)
        (assert tmp%24#0)
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) array_data%1#0)
        let encoded%1#0: uint64[] = encode<uint64>(1u, 2u, 3u, 4u)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 encoded%1#0)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let arr#6: uint64[] = concat_result%2#0
        let tmp%25#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%26#0: bool = (== tmp%25#0 4u)
        goto tmp%26#0 ? block@16 : block@21
    block@16: // and_contd_L28
        let array_head_and_tail%10#0: bytes = ((extract 2 0) arr#6)
        let item_offset%10#0: uint64 = (* 0u 8u)
        let arc4_item%10#0: bytes = (extract3 array_head_and_tail%10#0 item_offset%10#0 8u) // on error: Index access is out of bounds
        let tmp%27#0: uint64 = (btoi arc4_item%10#0)
        let tmp%28#0: bool = (== tmp%27#0 1u)
        goto tmp%28#0 ? block@17 : block@21
    block@17: // and_contd_L28
        let array_head_and_tail%11#0: bytes = ((extract 2 0) arr#6)
        let item_offset%11#0: uint64 = (* 1u 8u)
        let arc4_item%11#0: bytes = (extract3 array_head_and_tail%11#0 item_offset%11#0 8u) // on error: Index access is out of bounds
        let tmp%29#0: uint64 = (btoi arc4_item%11#0)
        let tmp%30#0: bool = (== tmp%29#0 2u)
        goto tmp%30#0 ? block@18 : block@21
    block@18: // and_contd_L28
        let array_head_and_tail%12#0: bytes = ((extract 2 0) arr#6)
        let item_offset%12#0: uint64 = (* 2u 8u)
        let arc4_item%12#0: bytes = (extract3 array_head_and_tail%12#0 item_offset%12#0 8u) // on error: Index access is out of bounds
        let tmp%31#0: uint64 = (btoi arc4_item%12#0)
        let tmp%32#0: bool = (== tmp%31#0 3u)
        goto tmp%32#0 ? block@19 : block@21
    block@19: // and_contd_L28
        let array_head_and_tail%13#0: bytes = ((extract 2 0) arr#6)
        let item_offset%13#0: uint64 = (* 3u 8u)
        let arc4_item%13#0: bytes = (extract3 array_head_and_tail%13#0 item_offset%13#0 8u) // on error: Index access is out of bounds
        let tmp%33#0: uint64 = (btoi arc4_item%13#0)
        let tmp%34#0: bool = (== tmp%33#0 4u)
        goto tmp%34#0 ? block@20 : block@21
    block@20: // bool_true_L28
        let and_result%2#0: bool = 1u
        goto block@22
    block@21: // bool_false_L28
        let and_result%2#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L28
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
        (assert and_result%2#2) // assert target is match for conditions
        let val_as_bytes%0#0: bytes[8] = (itob 10u)
        let assigned_value%0#0: bytes[8] = val_as_bytes%0#0
        let array_length%0#0: uint64 = (extract_uint16 arr#6 0u)
        let index_is_in_bounds%0#0: bool = (< 1u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 arr#6 10u assigned_value%0#0)
        let arr#9: uint64[] = updated_target%0#0
        let tmp%35#0: uint64 = (extract_uint16 arr#9 0u)
        let tmp%36#0: bool = (== tmp%35#0 4u)
        goto tmp%36#0 ? block@23 : block@28
    block@23: // and_contd_L33
        let array_head_and_tail%14#0: bytes = ((extract 2 0) arr#9)
        let item_offset%14#0: uint64 = (* 0u 8u)
        let arc4_item%14#0: bytes = (extract3 array_head_and_tail%14#0 item_offset%14#0 8u) // on error: Index access is out of bounds
        let tmp%37#0: uint64 = (btoi arc4_item%14#0)
        let tmp%38#0: bool = (== tmp%37#0 1u)
        goto tmp%38#0 ? block@24 : block@28
    block@24: // and_contd_L33
        let array_head_and_tail%15#0: bytes = ((extract 2 0) arr#9)
        let item_offset%15#0: uint64 = (* 1u 8u)
        let arc4_item%15#0: bytes = (extract3 array_head_and_tail%15#0 item_offset%15#0 8u) // on error: Index access is out of bounds
        let tmp%39#0: uint64 = (btoi arc4_item%15#0)
        let tmp%40#0: bool = (== tmp%39#0 10u)
        goto tmp%40#0 ? block@25 : block@28
    block@25: // and_contd_L33
        let array_head_and_tail%16#0: bytes = ((extract 2 0) arr#9)
        let item_offset%16#0: uint64 = (* 2u 8u)
        let arc4_item%16#0: bytes = (extract3 array_head_and_tail%16#0 item_offset%16#0 8u) // on error: Index access is out of bounds
        let tmp%41#0: uint64 = (btoi arc4_item%16#0)
        let tmp%42#0: bool = (== tmp%41#0 3u)
        goto tmp%42#0 ? block@26 : block@28
    block@26: // and_contd_L33
        let array_head_and_tail%17#0: bytes = ((extract 2 0) arr#9)
        let item_offset%17#0: uint64 = (* 3u 8u)
        let arc4_item%17#0: bytes = (extract3 array_head_and_tail%17#0 item_offset%17#0 8u) // on error: Index access is out of bounds
        let tmp%43#0: uint64 = (btoi arc4_item%17#0)
        let tmp%44#0: bool = (== tmp%43#0 4u)
        goto tmp%44#0 ? block@27 : block@28
    block@27: // bool_true_L33
        let and_result%3#0: bool = 1u
        goto block@29
    block@28: // bool_false_L33
        let and_result%3#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L33
        let and_result%3#2: bool = Ï†(and_result%3#0 <- block@27, and_result%3#1 <- block@28)
        (assert and_result%3#2) // assert target is match for conditions
        let (t1.0#0: uint64, t1.1#0: uint64) = (12u, 13u)
        let expr_value_trimmed%4#0: bytes = ((extract 2 0) arr#9)
        let expr_value_trimmed%5#0: bytes = ((extract 2 0) arr#9)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%4#0 expr_value_trimmed%5#0)
        let byte_len%3#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%3#0 8u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let expr_value_trimmed%6#0: bytes = ((extract 2 0) concat_result%3#0)
        let encoded%2#0: uint64[] = encode<uint64>(11u)
        let concatenated%4#0: bytes = (concat expr_value_trimmed%6#0 encoded%2#0)
        let byte_len%4#0: uint64 = (len concatenated%4#0)
        let len_%4#0: uint64 = (/ byte_len%4#0 8u)
        let as_bytes%4#0: bytes[8] = (itob len_%4#0)
        let len_16_bit%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let concat_result%4#0: bytes = (concat len_16_bit%4#0 concatenated%4#0)
        let expr_value_trimmed%7#0: bytes = ((extract 2 0) concat_result%4#0)
        let encoded%3#0: uint64[] = encode<uint64>(t1.0#0, t1.1#0)
        let concatenated%5#0: bytes = (concat expr_value_trimmed%7#0 encoded%3#0)
        let byte_len%5#0: uint64 = (len concatenated%5#0)
        let len_%5#0: uint64 = (/ byte_len%5#0 8u)
        let as_bytes%5#0: bytes[8] = (itob len_%5#0)
        let len_16_bit%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let concat_result%5#0: bytes = (concat len_16_bit%5#0 concatenated%5#0)
        let arr#12: uint64[] = concat_result%5#0
        let tmp%45#0: uint64 = (extract_uint16 arr#12 0u)
        let tmp%46#0: bool = (== tmp%45#0 11u)
        goto tmp%46#0 ? block@30 : block@42
    block@30: // and_contd_L39
        let array_head_and_tail%18#0: bytes = ((extract 2 0) arr#12)
        let item_offset%18#0: uint64 = (* 0u 8u)
        let arc4_item%18#0: bytes = (extract3 array_head_and_tail%18#0 item_offset%18#0 8u) // on error: Index access is out of bounds
        let tmp%47#0: uint64 = (btoi arc4_item%18#0)
        let tmp%48#0: bool = (== tmp%47#0 1u)
        goto tmp%48#0 ? block@31 : block@42
    block@31: // and_contd_L39
        let array_head_and_tail%19#0: bytes = ((extract 2 0) arr#12)
        let item_offset%19#0: uint64 = (* 1u 8u)
        let arc4_item%19#0: bytes = (extract3 array_head_and_tail%19#0 item_offset%19#0 8u) // on error: Index access is out of bounds
        let tmp%49#0: uint64 = (btoi arc4_item%19#0)
        let tmp%50#0: bool = (== tmp%49#0 10u)
        goto tmp%50#0 ? block@32 : block@42
    block@32: // and_contd_L39
        let array_head_and_tail%20#0: bytes = ((extract 2 0) arr#12)
        let item_offset%20#0: uint64 = (* 2u 8u)
        let arc4_item%20#0: bytes = (extract3 array_head_and_tail%20#0 item_offset%20#0 8u) // on error: Index access is out of bounds
        let tmp%51#0: uint64 = (btoi arc4_item%20#0)
        let tmp%52#0: bool = (== tmp%51#0 3u)
        goto tmp%52#0 ? block@33 : block@42
    block@33: // and_contd_L39
        let array_head_and_tail%21#0: bytes = ((extract 2 0) arr#12)
        let item_offset%21#0: uint64 = (* 3u 8u)
        let arc4_item%21#0: bytes = (extract3 array_head_and_tail%21#0 item_offset%21#0 8u) // on error: Index access is out of bounds
        let tmp%53#0: uint64 = (btoi arc4_item%21#0)
        let tmp%54#0: bool = (== tmp%53#0 4u)
        goto tmp%54#0 ? block@34 : block@42
    block@34: // and_contd_L39
        let array_head_and_tail%22#0: bytes = ((extract 2 0) arr#12)
        let item_offset%22#0: uint64 = (* 4u 8u)
        let arc4_item%22#0: bytes = (extract3 array_head_and_tail%22#0 item_offset%22#0 8u) // on error: Index access is out of bounds
        let tmp%55#0: uint64 = (btoi arc4_item%22#0)
        let tmp%56#0: bool = (== tmp%55#0 1u)
        goto tmp%56#0 ? block@35 : block@42
    block@35: // and_contd_L39
        let array_head_and_tail%23#0: bytes = ((extract 2 0) arr#12)
        let item_offset%23#0: uint64 = (* 5u 8u)
        let arc4_item%23#0: bytes = (extract3 array_head_and_tail%23#0 item_offset%23#0 8u) // on error: Index access is out of bounds
        let tmp%57#0: uint64 = (btoi arc4_item%23#0)
        let tmp%58#0: bool = (== tmp%57#0 10u)
        goto tmp%58#0 ? block@36 : block@42
    block@36: // and_contd_L39
        let array_head_and_tail%24#0: bytes = ((extract 2 0) arr#12)
        let item_offset%24#0: uint64 = (* 6u 8u)
        let arc4_item%24#0: bytes = (extract3 array_head_and_tail%24#0 item_offset%24#0 8u) // on error: Index access is out of bounds
        let tmp%59#0: uint64 = (btoi arc4_item%24#0)
        let tmp%60#0: bool = (== tmp%59#0 3u)
        goto tmp%60#0 ? block@37 : block@42
    block@37: // and_contd_L39
        let array_head_and_tail%25#0: bytes = ((extract 2 0) arr#12)
        let item_offset%25#0: uint64 = (* 7u 8u)
        let arc4_item%25#0: bytes = (extract3 array_head_and_tail%25#0 item_offset%25#0 8u) // on error: Index access is out of bounds
        let tmp%61#0: uint64 = (btoi arc4_item%25#0)
        let tmp%62#0: bool = (== tmp%61#0 4u)
        goto tmp%62#0 ? block@38 : block@42
    block@38: // and_contd_L39
        let array_head_and_tail%26#0: bytes = ((extract 2 0) arr#12)
        let item_offset%26#0: uint64 = (* 8u 8u)
        let arc4_item%26#0: bytes = (extract3 array_head_and_tail%26#0 item_offset%26#0 8u) // on error: Index access is out of bounds
        let tmp%63#0: uint64 = (btoi arc4_item%26#0)
        let tmp%64#0: bool = (== tmp%63#0 11u)
        goto tmp%64#0 ? block@39 : block@42
    block@39: // and_contd_L39
        let array_head_and_tail%27#0: bytes = ((extract 2 0) arr#12)
        let item_offset%27#0: uint64 = (* 9u 8u)
        let arc4_item%27#0: bytes = (extract3 array_head_and_tail%27#0 item_offset%27#0 8u) // on error: Index access is out of bounds
        let tmp%65#0: uint64 = (btoi arc4_item%27#0)
        let tmp%66#0: bool = (== tmp%65#0 12u)
        goto tmp%66#0 ? block@40 : block@42
    block@40: // and_contd_L39
        let array_head_and_tail%28#0: bytes = ((extract 2 0) arr#12)
        let item_offset%28#0: uint64 = (* 10u 8u)
        let arc4_item%28#0: bytes = (extract3 array_head_and_tail%28#0 item_offset%28#0 8u) // on error: Index access is out of bounds
        let tmp%67#0: uint64 = (btoi arc4_item%28#0)
        let tmp%68#0: bool = (== tmp%67#0 13u)
        goto tmp%68#0 ? block@41 : block@42
    block@41: // bool_true_L39
        let and_result%4#0: bool = 1u
        goto block@43
    block@42: // bool_false_L39
        let and_result%4#1: bool = 0u
        goto block@43
    block@43: // bool_merge_L39
        let and_result%4#2: bool = Ï†(and_result%4#0 <- block@41, and_result%4#1 <- block@42)
        (assert and_result%4#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
    block@0: // L42
        let result%0#0: bytes = (concat 0x 0x0000007b)
        let result%1#0: bytes = (concat result%0#0 0x0000007b)
        let array_data%0#0: bytes = (concat 0x0002 result%1#0)
        let da1#0: bytes = array_data%0#0
        let result%2#0: bytes = (concat 0x 0x0000007b)
        let result%3#0: bytes = (concat result%2#0 0x0000007b)
        let array_data%1#0: bytes = (concat 0x result%3#0)
        let sa1#0: bytes[8] = array_data%1#0
        let array_data%2#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%2#0)
        let encoded%0#0: bytes[4][] = encode<bytes[4]>(0x0000007b, 0x0000007b)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 4u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let a1#0: bytes[4][] = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) a1#0)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) da1#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 expr_value_trimmed%2#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) concat_result%1#0)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 sa1#0)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 4u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let a1#1: bytes[4][] = concat_result%2#0
        let tmp%0#0: uint64 = (extract_uint16 a1#1 0u)
        let tmp%1#0: bool = (== tmp%0#0 6u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // and_contd_L51
        let array_head_and_tail%0#0: bytes = ((extract 2 0) a1#1)
        let item_offset%0#0: uint64 = (* 0u 4u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 4u) // on error: Index access is out of bounds
        let tmp%2#0: bool = (== arc4_item%0#0 0x0000007b)
        goto tmp%2#0 ? block@2 : block@8
    block@2: // and_contd_L51
        let array_head_and_tail%1#0: bytes = ((extract 2 0) a1#1)
        let item_offset%1#0: uint64 = (* 1u 4u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 4u) // on error: Index access is out of bounds
        let tmp%3#0: bool = (== arc4_item%1#0 0x0000007b)
        goto tmp%3#0 ? block@3 : block@8
    block@3: // and_contd_L51
        let array_head_and_tail%2#0: bytes = ((extract 2 0) a1#1)
        let item_offset%2#0: uint64 = (* 2u 4u)
        let arc4_item%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 4u) // on error: Index access is out of bounds
        let tmp%4#0: bool = (== arc4_item%2#0 0x0000007b)
        goto tmp%4#0 ? block@4 : block@8
    block@4: // and_contd_L51
        let array_head_and_tail%3#0: bytes = ((extract 2 0) a1#1)
        let item_offset%3#0: uint64 = (* 3u 4u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 4u) // on error: Index access is out of bounds
        let tmp%5#0: bool = (== arc4_item%3#0 0x0000007b)
        goto tmp%5#0 ? block@5 : block@8
    block@5: // and_contd_L51
        let array_head_and_tail%4#0: bytes = ((extract 2 0) a1#1)
        let item_offset%4#0: uint64 = (* 4u 4u)
        let arc4_item%4#0: bytes = (extract3 array_head_and_tail%4#0 item_offset%4#0 4u) // on error: Index access is out of bounds
        let tmp%6#0: bool = (== arc4_item%4#0 0x0000007b)
        goto tmp%6#0 ? block@6 : block@8
    block@6: // and_contd_L51
        let array_head_and_tail%5#0: bytes = ((extract 2 0) a1#1)
        let item_offset%5#0: uint64 = (* 5u 4u)
        let arc4_item%5#0: bytes = (extract3 array_head_and_tail%5#0 item_offset%5#0 4u) // on error: Index access is out of bounds
        let tmp%7#0: bool = (== arc4_item%5#0 0x0000007b)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // bool_true_L51
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L51
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L51
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p.x: uint64, p.y: uint64) -> (uint64,uint64)[]:
    block@0: // L54
        let x#0: uint64 = p.x#0
        let y#0: uint64 = p.y#0
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let myVectors#0: (uint64,uint64)[] = array_data%0#0
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%1#0)
        let encoded%0#0: (uint64,uint64)[] = encode<(uint64,uint64)>(x#0, y#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let myVectors#1: (uint64,uint64)[] = concat_result%0#0
        let tmp%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // and_contd_L59
        let array_head_and_tail%0#0: bytes = ((extract 2 0) myVectors#1)
        let item_offset%0#0: uint64 = (* 0u 16u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 arc4_item%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%0%0#0: uint64 = (btoi item1%0#0)
        let tmp%2#0: bool = (== item0%0%0#0 x#0)
        goto tmp%2#0 ? block@2 : block@4
    block@2: // and_contd_L59
        let array_head_and_tail%1#0: bytes = ((extract 2 0) myVectors#1)
        let item_offset%1#0: uint64 = (* 0u 16u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 16u) // on error: Index access is out of bounds
        let item0%1#0: bytes = (extract3 arc4_item%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item1%1#0: bytes = (extract3 arc4_item%1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1%0#0: uint64 = (btoi item1%1#0)
        let tmp%3#0: bool = (== item1%1%0#0 y#0)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // bool_true_L59
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L59
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L59
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return myVectors#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 