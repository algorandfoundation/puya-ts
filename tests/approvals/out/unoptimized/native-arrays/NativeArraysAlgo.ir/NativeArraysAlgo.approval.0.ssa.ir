main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@2, method "buildReadonly()uint64[]" => block@3, method "doThings()void" => block@4, * => block@5}
    block@2: // buildArray_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: encoded_uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        return 1u
    block@3: // buildReadonly_route_L10
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        let tmp%13#0: encoded_uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly()
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        return 1u
    block@4: // doThings_route_L15
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        return 1u
    block@5: // switch_case_default_L5
        goto block@6
    block@6: // switch_case_next_L5
        goto block@11
    block@7: // bare_routing_L5
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L5
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate()
        return 1u
    block@9: // switch_case_default_L5
        goto block@10
    block@10: // switch_case_next_L5
        goto block@11
    block@11: // after_if_else_L5
        return 0u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> encoded_uint64[]:
    block@0: // L6
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: encoded_uint64[] = encode<encoded_uint64>(1u, 2u, 3u, 4u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        return concat_result%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly() -> encoded_uint64[]:
    block@0: // L10
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: encoded_uint64[] = encode<encoded_uint64>(1u, 2u, 3u, 4u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        return concat_result%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L15
        let arr#0: encoded_uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate() -> void:
    block@0: // L5
        return 