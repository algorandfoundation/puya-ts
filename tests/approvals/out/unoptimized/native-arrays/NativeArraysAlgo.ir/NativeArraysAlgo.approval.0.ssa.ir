main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#1: bytes = tmp%8#0
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@16
    block@1: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@2, method "arrayFromCtor()uint64[]" => block@3, method "buildReadonly()uint64[]" => block@4, method "doThings()void" => block@5, method "fixedArray(uint64[1024])void" => block@6, method "arc4Interop()void" => block@7, method "structs((uint64,uint64))(uint64,uint64)[]" => block@8, method "booleans()bool[]" => block@9, method "booleansStatic()(bool,bool,bool)" => block@10, method "arc4Booleans()bool[]" => block@11, method "arc4BooleansStatic()(bool,bool,bool)" => block@12, method "aliasing(uint64[],uint64[])void" => block@13, * => block@14}
    block@2: // buildArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        return 1u
    block@3: // arrayFromCtor_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        let tmp%13#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor()
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        return 1u
    block@4: // buildReadonly_route_L15
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let tmp%19#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly()
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
        (log tmp%20#0)
        return 1u
    block@5: // doThings_route_L19
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        return 1u
    block@6: // fixedArray_route_L51
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded(uint64[1024])%0#0: Encoded(uint64[1024]) = (txna ApplicationArgs 1)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(reinterpret_Encoded(uint64[1024])%0#0)
        return 1u
    block@7: // arc4Interop_route_L59
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop()
        return 1u
    block@8: // structs_route_L72
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%37#0: uint64, tmp%38#0: uint64) = decode<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%39#0: Encoded(len+(uint64,uint64)[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(tmp%37#0, tmp%38#0)
        let tmp%40#0: bytes = (concat 0x151f7c75 tmp%39#0)
        (log tmp%40#0)
        return 1u
    block@9: // booleans_route_L81
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (== tmp%41#0 NoOp)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%44#0) // can only call when not creating
        let tmp%45#0: Encoded(len+bool1[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans()
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        return 1u
    block@10: // booleansStatic_route_L85
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (== tmp%47#0 NoOp)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%50#0) // can only call when not creating
        let (tmp%51#0: bool, tmp%52#0: bool, tmp%53#0: bool) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleansStatic()
        let tmp%54#0: Encoded(bool1,bool1,bool1) = encode<(bool1,bool1,bool1)>(tmp%51#0, tmp%52#0, tmp%53#0)
        let tmp%55#0: bytes = (concat 0x151f7c75 tmp%54#0)
        (log tmp%55#0)
        return 1u
    block@11: // arc4Booleans_route_L89
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (== tmp%56#0 NoOp)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        let tmp%59#0: bool = (!= tmp%58#0 0u)
        (assert tmp%59#0) // can only call when not creating
        let tmp%60#0: Encoded(len+bool1[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans()
        let tmp%61#0: bytes = (concat 0x151f7c75 tmp%60#0)
        (log tmp%61#0)
        return 1u
    block@12: // arc4BooleansStatic_route_L93
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (== tmp%62#0 NoOp)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        let tmp%65#0: bool = (!= tmp%64#0 0u)
        (assert tmp%65#0) // can only call when not creating
        let (tmp%66#0: Encoded(bool8), tmp%67#0: Encoded(bool8), tmp%68#0: Encoded(bool8)) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic()
        let tmp%69#0: Encoded(bool1,bool1,bool1) = encode<(bool1,bool1,bool1)>(tmp%66#0, tmp%67#0, tmp%68#0)
        let tmp%70#0: bytes = (concat 0x151f7c75 tmp%69#0)
        (log tmp%70#0)
        return 1u
    block@13: // aliasing_route_L97
        let tmp%71#0: uint64 = (txn OnCompletion)
        let tmp%72#0: bool = (== tmp%71#0 NoOp)
        (assert tmp%72#0) // OnCompletion is not NoOp
        let tmp%73#0: uint64 = (txn ApplicationID)
        let tmp%74#0: bool = (!= tmp%73#0 0u)
        (assert tmp%74#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 2)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(reinterpret_Encoded(len+uint64[])%0#0, reinterpret_Encoded(len+uint64[])%1#0)
        return 1u
    block@14: // switch_case_default_L6
        goto block@15
    block@15: // switch_case_next_L6
        goto block@20
    block@16: // bare_routing_L6
        let tmp%75#0: uint64 = (txn OnCompletion)
        switch tmp%75#0 {0u => block@17, * => block@18}
    block@17: // __algots__.defaultCreate_L6
        let tmp%76#0: uint64 = (txn ApplicationID)
        let tmp%77#0: bool = (== tmp%76#0 0u)
        (assert tmp%77#0) // can only call when creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate()
        return 1u
    block@18: // switch_case_default_L6
        goto block@19
    block@19: // switch_case_next_L6
        goto block@20
    block@20: // after_if_else_L6
        return 0u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> Encoded(len+uint64[]):
    block@0: // L7
        let encoded_array%0#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(1u, 2u, 3u, 4u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor() -> Encoded(len+uint64[]):
    block@0: // L11
        let encoded_array%0#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(1u, 2u, 3u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly() -> Encoded(len+uint64[]):
    block@0: // L15
        let encoded_array%0#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(1u, 2u, 3u, 4u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L19
        let tmp%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let arr#0: Encoded(len+uint64[]) = tmp%0#0
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== array_length%0#0 4u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // and_contd_L22
        let array_item%0#0: Encoded(uint64) = arr#0[0u]
        let tmp%2#0: uint64 = decode<uint64>(array_item%0#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        goto tmp%3#0 ? block@2 : block@6
    block@2: // and_contd_L22
        let array_item%1#0: Encoded(uint64) = arr#0[1u]
        let tmp%4#0: uint64 = decode<uint64>(array_item%1#0)
        let tmp%5#0: bool = (== tmp%4#0 2u)
        goto tmp%5#0 ? block@3 : block@6
    block@3: // and_contd_L22
        let array_item%2#0: Encoded(uint64) = arr#0[2u]
        let tmp%6#0: uint64 = decode<uint64>(array_item%2#0)
        let tmp%7#0: bool = (== tmp%6#0 3u)
        goto tmp%7#0 ? block@4 : block@6
    block@4: // and_contd_L22
        let array_item%3#0: Encoded(uint64) = arr#0[3u]
        let tmp%8#0: uint64 = decode<uint64>(array_item%3#0)
        let tmp%9#0: bool = (== tmp%8#0 4u)
        goto tmp%9#0 ? block@5 : block@6
    block@5: // bool_true_L22
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L22
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L22
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let array_item%4#0: Encoded(uint64) = arr#0[0u]
        let tmp%10#0: uint64 = decode<uint64>(array_item%4#0)
        let tmp%11#0: bool = (== tmp%10#0 1u)
        (assert tmp%11#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%12#0: uint64 = (- array_length%1#0 1u)
        let array_item%5#0: Encoded(uint64) = arr#0[tmp%12#0]
        let tmp%13#0: uint64 = decode<uint64>(array_item%5#0)
        let tmp%14#0: bool = (== tmp%13#0 4u)
        (assert tmp%14#0)
        let tmp%15#0: Encoded(uint64[]) = encode<uint64[]>(5u)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%15#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arr#3: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let array_length%2#0: uint64 = (extract_uint16 arr#3 0u)
        let array_length%3#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%16#0: bool = (== array_length%3#0 5u)
        goto tmp%16#0 ? block@8 : block@14
    block@8: // and_contd_L31
        let array_item%6#0: Encoded(uint64) = arr#3[0u]
        let tmp%17#0: uint64 = decode<uint64>(array_item%6#0)
        let tmp%18#0: bool = (== tmp%17#0 1u)
        goto tmp%18#0 ? block@9 : block@14
    block@9: // and_contd_L31
        let array_item%7#0: Encoded(uint64) = arr#3[1u]
        let tmp%19#0: uint64 = decode<uint64>(array_item%7#0)
        let tmp%20#0: bool = (== tmp%19#0 2u)
        goto tmp%20#0 ? block@10 : block@14
    block@10: // and_contd_L31
        let array_item%8#0: Encoded(uint64) = arr#3[2u]
        let tmp%21#0: uint64 = decode<uint64>(array_item%8#0)
        let tmp%22#0: bool = (== tmp%21#0 3u)
        goto tmp%22#0 ? block@11 : block@14
    block@11: // and_contd_L31
        let array_item%9#0: Encoded(uint64) = arr#3[3u]
        let tmp%23#0: uint64 = decode<uint64>(array_item%9#0)
        let tmp%24#0: bool = (== tmp%23#0 4u)
        goto tmp%24#0 ? block@12 : block@14
    block@12: // and_contd_L31
        let array_item%10#0: Encoded(uint64) = arr#3[4u]
        let tmp%25#0: uint64 = decode<uint64>(array_item%10#0)
        let tmp%26#0: bool = (== tmp%25#0 5u)
        goto tmp%26#0 ? block@13 : block@14
    block@13: // bool_true_L31
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L31
        let and_result%1#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L31
        let and_result%1#2: bool = φ(and_result%1#0 <- block@13, and_result%1#1 <- block@14)
        (assert and_result%1#2) // assert target is match for conditions
        let (tmp%27#0: bytes, tmp%28#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#3, 8u)
        let tmp%29#0: uint64 = decode<uint64>(tmp%27#0)
        let arr#6: Encoded(len+uint64[]) = tmp%28#0
        let top#0: uint64 = tmp%29#0
        let tmp%30#0: bool = (== top#0 5u)
        (assert tmp%30#0)
        let array_length%4#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%31#0: bool = (== array_length%4#0 4u)
        goto tmp%31#0 ? block@16 : block@21
    block@16: // and_contd_L37
        let array_item%11#0: Encoded(uint64) = arr#6[0u]
        let tmp%32#0: uint64 = decode<uint64>(array_item%11#0)
        let tmp%33#0: bool = (== tmp%32#0 1u)
        goto tmp%33#0 ? block@17 : block@21
    block@17: // and_contd_L37
        let array_item%12#0: Encoded(uint64) = arr#6[1u]
        let tmp%34#0: uint64 = decode<uint64>(array_item%12#0)
        let tmp%35#0: bool = (== tmp%34#0 2u)
        goto tmp%35#0 ? block@18 : block@21
    block@18: // and_contd_L37
        let array_item%13#0: Encoded(uint64) = arr#6[2u]
        let tmp%36#0: uint64 = decode<uint64>(array_item%13#0)
        let tmp%37#0: bool = (== tmp%36#0 3u)
        goto tmp%37#0 ? block@19 : block@21
    block@19: // and_contd_L37
        let array_item%14#0: Encoded(uint64) = arr#6[3u]
        let tmp%38#0: uint64 = decode<uint64>(array_item%14#0)
        let tmp%39#0: bool = (== tmp%38#0 4u)
        goto tmp%39#0 ? block@20 : block@21
    block@20: // bool_true_L37
        let and_result%2#0: bool = 1u
        goto block@22
    block@21: // bool_false_L37
        let and_result%2#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L37
        let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
        (assert and_result%2#2) // assert target is match for conditions
        let array_item%15#0: Encoded(uint64) = arr#6[1u]
        let tmp%40#0: uint64 = decode<uint64>(array_item%15#0)
        let encoded_value%0#0: Encoded(uint64) = encode<uint64>(10u)
        let updated_array%0#0: Encoded(len+uint64[]) = arr#6.update(1u, encoded_value%0#0)
        let arr#9: Encoded(len+uint64[]) = updated_array%0#0
        let array_length%5#0: uint64 = (extract_uint16 arr#9 0u)
        let tmp%41#0: bool = (== array_length%5#0 4u)
        goto tmp%41#0 ? block@23 : block@28
    block@23: // and_contd_L42
        let array_item%16#0: Encoded(uint64) = arr#9[0u]
        let tmp%42#0: uint64 = decode<uint64>(array_item%16#0)
        let tmp%43#0: bool = (== tmp%42#0 1u)
        goto tmp%43#0 ? block@24 : block@28
    block@24: // and_contd_L42
        let array_item%17#0: Encoded(uint64) = arr#9[1u]
        let tmp%44#0: uint64 = decode<uint64>(array_item%17#0)
        let tmp%45#0: bool = (== tmp%44#0 10u)
        goto tmp%45#0 ? block@25 : block@28
    block@25: // and_contd_L42
        let array_item%18#0: Encoded(uint64) = arr#9[2u]
        let tmp%46#0: uint64 = decode<uint64>(array_item%18#0)
        let tmp%47#0: bool = (== tmp%46#0 3u)
        goto tmp%47#0 ? block@26 : block@28
    block@26: // and_contd_L42
        let array_item%19#0: Encoded(uint64) = arr#9[3u]
        let tmp%48#0: uint64 = decode<uint64>(array_item%19#0)
        let tmp%49#0: bool = (== tmp%48#0 4u)
        goto tmp%49#0 ? block@27 : block@28
    block@27: // bool_true_L42
        let and_result%3#0: bool = 1u
        goto block@29
    block@28: // bool_false_L42
        let and_result%3#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L42
        let and_result%3#2: bool = φ(and_result%3#0 <- block@27, and_result%3#1 <- block@28)
        (assert and_result%3#2) // assert target is match for conditions
        let tmp%50#0: Encoded(uint64,uint64) = encode<(uint64,uint64)>(12u, 13u)
        let t1#0: Encoded(uint64,uint64) = tmp%50#0
        let array_length%6#0: uint64 = (extract_uint16 arr#9 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#9)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#9 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let tuple_item%0#0: Encoded(uint64) = t1#0[0]
        let values%0#0: uint64 = decode<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = t1#0[1]
        let values%1#0: uint64 = decode<uint64>(tuple_item%1#0)
        let encoded_array%0#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(values%0#0, values%1#0)
        let array_length%7#0: uint64 = (extract_uint16 encoded_array%0#0 0u)
        let extract_to_end%2#0: bytes = ((extract 2 0) encoded_array%0#0)
        let concat%2#0: Encoded(len+uint64[]) = (concat as_Encoded(len+uint64[])%1#0 extract_to_end%2#0) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%2#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = replace%2#0
        let arr#12: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%2#0
        let array_length%8#0: uint64 = (extract_uint16 arr#12 0u)
        let tmp%51#0: bool = (== array_length%8#0 11u)
        goto tmp%51#0 ? block@30 : block@42
    block@30: // and_contd_L48
        let array_item%20#0: Encoded(uint64) = arr#12[0u]
        let tmp%52#0: uint64 = decode<uint64>(array_item%20#0)
        let tmp%53#0: bool = (== tmp%52#0 1u)
        goto tmp%53#0 ? block@31 : block@42
    block@31: // and_contd_L48
        let array_item%21#0: Encoded(uint64) = arr#12[1u]
        let tmp%54#0: uint64 = decode<uint64>(array_item%21#0)
        let tmp%55#0: bool = (== tmp%54#0 10u)
        goto tmp%55#0 ? block@32 : block@42
    block@32: // and_contd_L48
        let array_item%22#0: Encoded(uint64) = arr#12[2u]
        let tmp%56#0: uint64 = decode<uint64>(array_item%22#0)
        let tmp%57#0: bool = (== tmp%56#0 3u)
        goto tmp%57#0 ? block@33 : block@42
    block@33: // and_contd_L48
        let array_item%23#0: Encoded(uint64) = arr#12[3u]
        let tmp%58#0: uint64 = decode<uint64>(array_item%23#0)
        let tmp%59#0: bool = (== tmp%58#0 4u)
        goto tmp%59#0 ? block@34 : block@42
    block@34: // and_contd_L48
        let array_item%24#0: Encoded(uint64) = arr#12[4u]
        let tmp%60#0: uint64 = decode<uint64>(array_item%24#0)
        let tmp%61#0: bool = (== tmp%60#0 1u)
        goto tmp%61#0 ? block@35 : block@42
    block@35: // and_contd_L48
        let array_item%25#0: Encoded(uint64) = arr#12[5u]
        let tmp%62#0: uint64 = decode<uint64>(array_item%25#0)
        let tmp%63#0: bool = (== tmp%62#0 10u)
        goto tmp%63#0 ? block@36 : block@42
    block@36: // and_contd_L48
        let array_item%26#0: Encoded(uint64) = arr#12[6u]
        let tmp%64#0: uint64 = decode<uint64>(array_item%26#0)
        let tmp%65#0: bool = (== tmp%64#0 3u)
        goto tmp%65#0 ? block@37 : block@42
    block@37: // and_contd_L48
        let array_item%27#0: Encoded(uint64) = arr#12[7u]
        let tmp%66#0: uint64 = decode<uint64>(array_item%27#0)
        let tmp%67#0: bool = (== tmp%66#0 4u)
        goto tmp%67#0 ? block@38 : block@42
    block@38: // and_contd_L48
        let array_item%28#0: Encoded(uint64) = arr#12[8u]
        let tmp%68#0: uint64 = decode<uint64>(array_item%28#0)
        let tmp%69#0: bool = (== tmp%68#0 11u)
        goto tmp%69#0 ? block@39 : block@42
    block@39: // and_contd_L48
        let array_item%29#0: Encoded(uint64) = arr#12[9u]
        let tmp%70#0: uint64 = decode<uint64>(array_item%29#0)
        let tmp%71#0: bool = (== tmp%70#0 12u)
        goto tmp%71#0 ? block@40 : block@42
    block@40: // and_contd_L48
        let array_item%30#0: Encoded(uint64) = arr#12[10u]
        let tmp%72#0: uint64 = decode<uint64>(array_item%30#0)
        let tmp%73#0: bool = (== tmp%72#0 13u)
        goto tmp%73#0 ? block@41 : block@42
    block@41: // bool_true_L48
        let and_result%4#0: bool = 1u
        goto block@43
    block@42: // bool_false_L48
        let and_result%4#1: bool = 0u
        goto block@43
    block@43: // bool_merge_L48
        let and_result%4#2: bool = φ(and_result%4#0 <- block@41, and_result%4#1 <- block@42)
        (assert and_result%4#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: Encoded(uint64[1024])) -> void:
    block@0: // L51
        let encoded_array%0#0: Encoded(uint64[4]) = encode<uint64[4]>(1u, 2u, 3u, 4u)
        let x#0: Encoded(uint64[4]) = encoded_array%0#0
        let array_item%0#0: Encoded(uint64) = x#0[0u]
        let tmp%0#0: uint64 = decode<uint64>(array_item%0#0)
        let encoded_value%0#0: Encoded(uint64) = encode<uint64>(0u)
        let updated_array%0#0: Encoded(uint64[4]) = x#0.update(0u, encoded_value%0#0)
        let x#1: Encoded(uint64[4]) = updated_array%0#0
        let array_item%1#0: Encoded(uint64) = x#1[0u]
        let tmp%1#0: uint64 = decode<uint64>(array_item%1#0)
        let array_item%2#0: Encoded(uint64) = y#0[0u]
        let tmp%2#0: uint64 = decode<uint64>(array_item%2#0)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== 4u 4u)
        goto tmp%4#0 ? block@1 : block@6
    block@1: // and_contd_L55
        let array_item%3#0: Encoded(uint64) = x#1[0u]
        let tmp%5#0: uint64 = decode<uint64>(array_item%3#0)
        let tmp%6#0: bool = (< tmp%5#0 1u)
        goto tmp%6#0 ? block@2 : block@6
    block@2: // and_contd_L55
        let array_item%4#0: Encoded(uint64) = x#1[1u]
        let tmp%7#0: uint64 = decode<uint64>(array_item%4#0)
        let tmp%8#0: bool = (== tmp%7#0 2u)
        goto tmp%8#0 ? block@3 : block@6
    block@3: // and_contd_L55
        let array_item%5#0: Encoded(uint64) = x#1[2u]
        let tmp%9#0: uint64 = decode<uint64>(array_item%5#0)
        let tmp%10#0: bool = (== tmp%9#0 3u)
        goto tmp%10#0 ? block@4 : block@6
    block@4: // and_contd_L55
        let array_item%6#0: Encoded(uint64) = x#1[3u]
        let tmp%11#0: uint64 = decode<uint64>(array_item%6#0)
        let tmp%12#0: bool = (== tmp%11#0 4u)
        goto tmp%12#0 ? block@5 : block@6
    block@5: // bool_true_L55
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L55
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L55
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let array_item%7#0: Encoded(uint64) = y#0[1024u]
        let tmp%13#0: uint64 = decode<uint64>(array_item%7#0)
        let tmp%14#0: bool = (>= tmp%13#0 0u)
        (assert tmp%14#0) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
    block@0: // L59
        let encoded_array%0#0: Encoded(len+uint32[]) = encode<(len+uint32[])>(0x0000007b, 0x0000007b)
        let da1#0: Encoded(len+uint32[]) = encoded_array%0#0
        let encoded_array%1#0: Encoded(uint32[2]) = encode<uint32[2]>(0x0000007b, 0x0000007b)
        let sa1#0: Encoded(uint32[2]) = encoded_array%1#0
        let encoded_array%2#0: Encoded(len+uint32[]) = encode<(len+uint32[])>(0x0000007b, 0x0000007b)
        let a1#0: Encoded(len+uint32[]) = encoded_array%2#0
        let array_length%0#0: uint64 = (extract_uint16 da1#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) da1#0)
        let concat%0#0: Encoded(len+uint32[]) = (concat a1#0 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 4u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint32[])%0#0: Encoded(len+uint32[]) = replace%0#0
        let concat%1#0: Encoded(len+uint32[]) = (concat as_Encoded(len+uint32[])%0#0 sa1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint32[])%1#0: Encoded(len+uint32[]) = replace%1#0
        let a1#1: Encoded(len+uint32[]) = as_Encoded(len+uint32[])%1#0
        let array_length%1#0: uint64 = (extract_uint16 a1#1 0u)
        let tmp%0#0: bool = (== array_length%1#0 6u)
        goto tmp%0#0 ? block@1 : block@8
    block@1: // and_contd_L69
        let array_item%0#0: Encoded(uint32) = a1#1[0u]
        let tmp%1#0: bool = (== array_item%0#0 0x0000007b)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // and_contd_L69
        let array_item%1#0: Encoded(uint32) = a1#1[1u]
        let tmp%2#0: bool = (== array_item%1#0 0x0000007b)
        goto tmp%2#0 ? block@3 : block@8
    block@3: // and_contd_L69
        let array_item%2#0: Encoded(uint32) = a1#1[2u]
        let tmp%3#0: bool = (== array_item%2#0 0x0000007b)
        goto tmp%3#0 ? block@4 : block@8
    block@4: // and_contd_L69
        let array_item%3#0: Encoded(uint32) = a1#1[3u]
        let tmp%4#0: bool = (== array_item%3#0 0x0000007b)
        goto tmp%4#0 ? block@5 : block@8
    block@5: // and_contd_L69
        let array_item%4#0: Encoded(uint32) = a1#1[4u]
        let tmp%5#0: bool = (== array_item%4#0 0x0000007b)
        goto tmp%5#0 ? block@6 : block@8
    block@6: // and_contd_L69
        let array_item%5#0: Encoded(uint32) = a1#1[5u]
        let tmp%6#0: bool = (== array_item%5#0 0x0000007b)
        goto tmp%6#0 ? block@7 : block@8
    block@7: // bool_true_L69
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L69
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L69
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p.x: uint64, p.y: uint64) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L72
        let x#0: uint64 = p.x#0
        let y#0: uint64 = p.y#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = encode<(len+(uint64,uint64)[])>()
        let myVectors#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        let encoded_array%1#0: Encoded(len+(uint64,uint64)[]) = encode<(len+(uint64,uint64)[])>(x#0, y#0)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = encoded_array%1#0
        let array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%0#0: bool = (== array_length%0#0 1u)
        goto tmp%0#0 ? block@1 : block@4
    block@1: // and_contd_L77
        let array_item%0#0: Encoded(uint64,uint64) = myVectors#1[0u]
        let (tmp%1#0: uint64, tmp%2#0: uint64) = decode<(uint64,uint64,)>(array_item%0#0)
        let tmp%3#0: bool = (== tmp%1#0 x#0)
        goto tmp%3#0 ? block@2 : block@4
    block@2: // and_contd_L77
        let array_item%1#0: Encoded(uint64,uint64) = myVectors#1[0u]
        let (tmp%4#0: uint64, tmp%5#0: uint64) = decode<(uint64,uint64,)>(array_item%1#0)
        let tmp%6#0: bool = (== tmp%5#0 y#0)
        goto tmp%6#0 ? block@3 : block@4
    block@3: // bool_true_L77
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L77
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L77
        let and_result%0#2: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return myVectors#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans() -> Encoded(len+bool1[]):
    block@0: // L81
        let encoded_array%0#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(1u, 0u, 1u)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleansStatic() -> <bool, bool, bool>:
    block@0: // L85
        return 1u 0u 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans() -> Encoded(len+bool1[]):
    block@0: // L89
        let tmp%0#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%1#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%2#0: Encoded(bool8) = encode<bool8>(1u)
        let encoded_array%0#0: Encoded(len+bool1[]) = encode<(len+bool1[])>(tmp%0#0, tmp%1#0, tmp%2#0)
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic() -> <Encoded(bool8), Encoded(bool8), Encoded(bool8)>:
    block@0: // L93
        let tmp%0#0: Encoded(bool8) = encode<bool8>(1u)
        let tmp%1#0: Encoded(bool8) = encode<bool8>(0u)
        let tmp%2#0: Encoded(bool8) = encode<bool8>(1u)
        return tmp%0#0 tmp%1#0 tmp%2#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(a: Encoded(len+uint64[]), b: Encoded(len+uint64[])) -> void:
    block@0: // L97
        let copy%0#0: Encoded(len+uint64[]) = a#0
        let needClone#0: Encoded(len+uint64[]) = copy%0#0
        let array_item%0#0: Encoded(uint64) = needClone#0[0u]
        let tmp%0#0: uint64 = decode<uint64>(array_item%0#0)
        let encoded_value%0#0: Encoded(uint64) = encode<uint64>(5u)
        let updated_array%0#0: Encoded(len+uint64[]) = needClone#0.update(0u, encoded_value%0#0)
        let needClone#1: Encoded(len+uint64[]) = updated_array%0#0
        let noNeedClone#0: Encoded(len+uint64[]) = b#0
        let needClone2#0: Encoded(len+uint64[]) = a#0
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 