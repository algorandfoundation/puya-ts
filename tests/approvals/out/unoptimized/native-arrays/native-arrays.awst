contract NativeArraysAlgo
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  readonlyArray(): void
  {
    myArray: arc4.dynamic_array<uint64> = new arc4.dynamic_array<uint64>(($0 = #[1, 2, 3]).0, $0.1, $0.2)
    myArray: arc4.dynamic_array<uint64> = convert_array(convert_array(myArray, wtype=arc4.dynamic_array<uint64>).concat(#[5]), wtype=arc4.dynamic_array<uint64>)
    myArray: arc4.dynamic_array<uint64> = convert_array(convert_array(myArray, wtype=arc4.dynamic_array<uint64>).concat(new arc4.dynamic_array<uint64>(4)), wtype=arc4.dynamic_array<uint64>)
    myArray: arc4.dynamic_array<uint64> = myArray.with(2, 3)
    assert(myArray.length == 5 and myArray[0] == 1 and myArray[1] == 2 and myArray[2] == 3 and myArray[3] == 5 and myArray[4] == 4, comment=assert target is match for conditions)
  }
  
  arrayInObject(): void
  {
    person: ReadonlyObject3BF4F995{ name: string, favouriteNumbers: arc4.dynamic_array<uint64> } = #{ name: ($1 = #{ name: ($2 = #{ name: ($3 = #["Alice", #[1337]]).0, favouriteNumbers: $3.1 }).name, favouriteNumbers: #[($4 = $2.favouriteNumbers).0] }).name, favouriteNumbers: new arc4.dynamic_array<uint64>(($5 = $1.favouriteNumbers).0) }
    length: uint64 = person.favouriteNumbers.push(...#[42]), person.favouriteNumbers.length
    assert(length == 2)
  }
  
  buildArray(): arc4.dynamic_array<uint64>
  {
    return new arc4.dynamic_array<uint64>(1, 2, 3, 4)
  }
  
  arrayFromCtor(): arc4.dynamic_array<uint64>
  {
    return new arc4.dynamic_array<uint64>(1, 2, 3)
  }
  
  buildReadonly(): arc4.dynamic_array<uint64>
  {
    return new arc4.dynamic_array<uint64>(1, 2, 3, 4)
  }
  
  doThings(): void
  {
    ensure_budget(1400, 0)
    arr: arc4.dynamic_array<uint64> = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
    arr.push(...#[5]), arr.length
    assert(arr.pop() == 5)
    assert(arr.length == 4 and arr[0] == 1 and arr[1] == 2 and arr[2] == 3 and arr[3] == 4, comment=assert target is match for conditions)
    assert(arr[0] == 1)
    assert(arr[arr.length - 1] == 4)
    arr.push(...#[5]), arr.length
    assert(arr.length == 5 and arr[0] == 1 and arr[1] == 2 and arr[2] == 3 and arr[3] == 4 and arr[4] == 5, comment=assert target is match for conditions)
    top: uint64 = arr.pop()
    assert(top == 5)
    assert(arr.length == 4 and arr[0] == 1 and arr[1] == 2 and arr[2] == 3 and arr[3] == 4, comment=assert target is match for conditions)
    arr[1]: uint64 = 10
    arr2: arc4.dynamic_array<uint64> = arr.with(1, 5)
    assert(arr.length == 4 and arr[0] == 1 and arr[1] == 10 and arr[2] == 3 and arr[3] == 4, comment=assert target is match for conditions)
    assert(arr2.length == 4 and arr2[0] == 1 and arr2[1] == 5 and arr2[2] == 3 and arr2[3] == 4, comment=assert target is match for conditions)
    t1: arc4.tuple<uint64,uint64> = ARC4_ENCODE(#[($6 = #[12, 13]).0, $6.1], wtype=arc4.tuple<uint64,uint64>)
    arr: arc4.dynamic_array<uint64> = arr.concat(arr).concat(#[11]).concat(t1)
    assert(arr.length == 11 and arr[0] == 1 and arr[1] == 10 and arr[2] == 3 and arr[3] == 4 and arr[4] == 1 and arr[5] == 10 and arr[6] == 3 and arr[7] == 4 and arr[8] == 11 and arr[9] == 12 and arr[10] == 13, comment=assert target is match for conditions)
    rArr1: arc4.dynamic_array<uint64> = new arc4.dynamic_array<uint64>(($7 = #[1, 2, 3]).0, $7.1, $7.2)
    rArr1: arc4.dynamic_array<uint64> = convert_array(convert_array(rArr1, wtype=arc4.dynamic_array<uint64>).concat(#[4]), wtype=arc4.dynamic_array<uint64>)
    rArr1: arc4.dynamic_array<uint64> = convert_array(convert_array(rArr1, wtype=arc4.dynamic_array<uint64>).concat(new arc4.dynamic_array<uint64>(5)), wtype=arc4.dynamic_array<uint64>)
    assert(rArr1.length == 5 and rArr1[0] == 1 and rArr1[1] == 2 and rArr1[2] == 3 and rArr1[3] == 4 and rArr1[4] == 5, comment=assert target is match for conditions)
    fArr1: arc4.static_array<uint64> = bzero(size_of(arc4.static_array<uint64>))
    fArr2: arc4.dynamic_array<uint64> = convert_array(fArr1, wtype=arc4.dynamic_array<uint64>).concat(fArr1)
    assert(fArr1.length == 4 and fArr1[0] == 0 and fArr1[1] == 0 and fArr1[2] == 0 and fArr1[3] == 0, comment=assert target is match for conditions)
    assert(fArr2.length == 8 and fArr2[0] == 0 and fArr2[1] == 0 and fArr2[2] == 0 and fArr2[3] == 0 and fArr2[4] == 0 and fArr2[5] == 0 and fArr2[6] == 0 and fArr2[7] == 0, comment=assert target is match for conditions)
    arr3: arc4.dynamic_array<uint64> = convert_array(rArr1, wtype=arc4.dynamic_array<uint64>).concat(fArr2)
    assert(arr3.length == 13 and arr3[0] == 1 and arr3[1] == 2 and arr3[2] == 3 and arr3[3] == 4 and arr3[4] == 5 and arr3[5] == 0 and arr3[6] == 0 and arr3[7] == 0 and arr3[8] == 0 and arr3[9] == 0 and arr3[10] == 0 and arr3[11] == 0 and arr3[12] == 0, comment=assert target is match for conditions)
    arr4: arc4.dynamic_array<uint64> = convert_array(rArr1, wtype=arc4.dynamic_array<uint64>).concat(arr)
    assert(arr4.length == 16 and arr4[0] == 1 and arr4[1] == 2 and arr4[2] == 3 and arr4[3] == 4 and arr4[4] == 5 and arr4[5] == 1 and arr4[6] == 10 and arr4[7] == 3 and arr4[8] == 4 and arr4[9] == 1 and arr4[10] == 10 and arr4[11] == 3 and arr4[12] == 4 and arr4[13] == 11 and arr4[14] == 12 and arr4[15] == 13, comment=assert target is match for conditions)
    arr5: arc4.dynamic_array<uint64> = convert_array(fArr1, wtype=arc4.dynamic_array<uint64>).concat(rArr1)
    assert(arr5.length == 9 and arr5[0] == 0 and arr5[1] == 0 and arr5[2] == 0 and arr5[3] == 0 and arr5[4] == 1 and arr5[5] == 2 and arr5[6] == 3 and arr5[7] == 4 and arr5[8] == 5, comment=assert target is match for conditions)
    arr6: arc4.dynamic_array<uint64> = convert_array(fArr1, wtype=arc4.dynamic_array<uint64>).concat(arr)
    assert(arr6.length == 15 and arr6[0] == 0 and arr6[1] == 0 and arr6[2] == 0 and arr6[3] == 0 and arr6[4] == 1 and arr6[5] == 10 and arr6[6] == 3 and arr6[7] == 4 and arr6[8] == 1 and arr6[9] == 10 and arr6[10] == 3 and arr6[11] == 4 and arr6[12] == 11 and arr6[13] == 12 and arr6[14] == 13, comment=assert target is match for conditions)
    arr7: arc4.dynamic_array<uint64> = arr.concat(rArr1)
    assert(arr7.length == 16)
    assert(arr7.length == 16 and arr7[0] == 1 and arr7[1] == 10 and arr7[2] == 3 and arr7[3] == 4 and arr7[4] == 1 and arr7[5] == 10 and arr7[6] == 3 and arr7[7] == 4 and arr7[8] == 11 and arr7[9] == 12 and arr7[10] == 13 and arr7[11] == 1 and arr7[12] == 2 and arr7[13] == 3 and arr7[14] == 4 and arr7[15] == 5, comment=assert target is match for conditions)
    arr8: arc4.dynamic_array<uint64> = arr.concat(fArr1)
    assert(arr8.length == 15)
    assert(arr8.length == 15 and arr8[0] == 1 and arr8[1] == 10 and arr8[2] == 3 and arr8[3] == 4 and arr8[4] == 1 and arr8[5] == 10 and arr8[6] == 3 and arr8[7] == 4 and arr8[8] == 11 and arr8[9] == 12 and arr8[10] == 13 and arr8[11] == 0 and arr8[12] == 0 and arr8[13] == 0 and arr8[14] == 0, comment=assert target is match for conditions)
  }
  
  fixedArray(y: arc4.static_array<uint64>): void
  {
    x: arc4.static_array<uint64> = new arc4.static_array<uint64>(1, 2, 3, 4)
    x[0]: uint64 = 0
    assert(x[0] == y[0])
    assert(x.length == 4 and x[0] < 1 and x[1] == 2 and x[2] == 3 and x[3] == 4, comment=assert target is match for conditions)
    assert(y[49] >= 0, comment=assert target is match for conditions)
    myVectors: arc4.static_array<tests/approvals/native-arrays.algo.ts::Vector> = new arc4.static_array<tests/approvals/native-arrays.algo.ts::Vector>(new tests/approvals/native-arrays.algo.ts::Vector(x=($8 = #{ x: ($9 = #[1, 2]).0, y: $9.1 }).x, y=$8.y), new tests/approvals/native-arrays.algo.ts::Vector(x=($10 = #{ x: ($11 = #[3, 4]).0, y: $11.1 }).x, y=$10.y))
    assert(myVectors.length == 2 and myVectors[0].x == 1 and myVectors[0].y == 2 and myVectors[1].x == 3 and myVectors[1].y == 4, comment=assert target is match for conditions)
    myObject: ObjectA721194C = new ObjectA721194C(a=($12 = #{ a: new arc4.static_array<tests/approvals/native-arrays.algo.ts::Vector>(new tests/approvals/native-arrays.algo.ts::Vector(x=($13 = #{ x: ($14 = #[5, 6]).0, y: $14.1 }).x, y=$13.y)) }).a)
    assert(myObject.a.length == 1 and myObject.a[0].x == 5 and myObject.a[0].y == 6, comment=assert target is match for conditions)
    z1: arc4.static_array<uint64> = bzero(size_of(arc4.static_array<uint64>))
    assert(z1.length == 4)
    assert(z1.length == 4 and z1[0] == 0 and z1[1] == 0 and z1[2] == 0 and z1[3] == 0, comment=assert target is match for conditions)
    z1[0]: uint64 = 1
    z1[1]: uint64 = 2
    z1[2]: uint64 = 3
    z1[3]: uint64 = 4
    assert(z1.length == 4 and z1[0] <= 1 and z1[1] == 2 and z1[2] == 3 and z1[3] == 4, comment=assert target is match for conditions)
    z2: arc4.static_array<bool> = bzero(size_of(arc4.static_array<bool>))
    assert(z2[0] == False)
    z3: arc4.static_array<arc4.static_array<uint64>> = bzero(size_of(arc4.static_array<arc4.static_array<uint64>>))
    assert(z3.length == 4)
    z4: arc4.static_array<tests/approvals/native-arrays.algo.ts::Vector> = bzero(size_of(arc4.static_array<tests/approvals/native-arrays.algo.ts::Vector>))
    assert(z4.length == 4)
    z5: arc4.static_array<arc4.uint64> = bzero(size_of(arc4.static_array<arc4.uint64>))
    assert(z5.length == 4)
    z6: arc4.static_array<arc4.tuple<uint64,bool>> = bzero(size_of(arc4.static_array<arc4.tuple<uint64,bool>>))
    assert(z6.length == 4)
  }
  
  arc4Interop(): void
  {
    da1: arc4.dynamic_array<arc4.uint32> = new arc4.dynamic_array<arc4.uint32>(123, 123)
    sa1: arc4.static_array<arc4.uint32> = new arc4.static_array<arc4.uint32>(123, 123)
    a1: arc4.dynamic_array<arc4.uint32> = new arc4.dynamic_array<arc4.uint32>(($15 = #[123, 123]).0, $15.1)
    a1: arc4.dynamic_array<arc4.uint32> = copy(a1).concat(copy(da1)).concat(copy(sa1))
    assert(a1.length == 6 and reinterpret_cast<bytes>(a1[0]) == reinterpret_cast<bytes>(123) and reinterpret_cast<bytes>(a1[1]) == reinterpret_cast<bytes>(123) and reinterpret_cast<bytes>(a1[2]) == reinterpret_cast<bytes>(123) and reinterpret_cast<bytes>(a1[3]) == reinterpret_cast<bytes>(123) and reinterpret_cast<bytes>(a1[4]) == reinterpret_cast<bytes>(123) and reinterpret_cast<bytes>(a1[5]) == reinterpret_cast<bytes>(123), comment=assert target is match for conditions)
  }
  
  structs(p: tests/approvals/native-arrays.algo.ts::Vector): arc4.dynamic_array<tests/approvals/native-arrays.algo.ts::Vector>
  {
    #[x, y]: readonly [uint64, uint64] = #[p.x, p.y]
    myVectors: arc4.dynamic_array<tests/approvals/native-arrays.algo.ts::Vector> = new arc4.dynamic_array<tests/approvals/native-arrays.algo.ts::Vector>()
    myVectors: arc4.dynamic_array<tests/approvals/native-arrays.algo.ts::Vector> = new arc4.dynamic_array<tests/approvals/native-arrays.algo.ts::Vector>(new tests/approvals/native-arrays.algo.ts::Vector(x=($16 = ($17 = #[#{ x: x, y: y }]).0).x, y=$16.y))
    assert(myVectors.length == 1 and myVectors[0].x == x and myVectors[0].y == y, comment=assert target is match for conditions)
    return myVectors
  }
  
  booleans(): arc4.dynamic_array<bool>
  {
    return new arc4.dynamic_array<bool>(True, False, True)
  }
  
  booleansStatic(): readonly [bool, bool, bool]
  {
    return #[True, False, True]
  }
  
  arc4Booleans(): arc4.dynamic_array<arc4.bool>
  {
    return new arc4.dynamic_array<arc4.bool>(True, False, True)
  }
  
  arc4BooleansStatic(): readonly [arc4.bool, arc4.bool, arc4.bool]
  {
    return #[True, False, True]
  }
  
  aliasing(mutable: arc4.dynamic_array<uint64>, readOnly: arc4.dynamic_array<uint64>): void
  {
    needClone: arc4.dynamic_array<uint64> = copy(mutable)
    needClone[0]: uint64 = 5
    noNeedClone: arc4.dynamic_array<uint64> = readOnly
    needClone2: arc4.dynamic_array<uint64> = convert_array(copy(mutable), wtype=arc4.dynamic_array<uint64>)
    mutable[1]: uint64 = mutable[1] + 2
    assert(mutable[1] != needClone2[1], comment=These should not match)
    tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(mutable)
    tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(convert_array(mutable, wtype=arc4.dynamic_array<uint64>))
    tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(readOnly)
  }
  
  receiveMutable(a: arc4.dynamic_array<uint64>): void
  {
    a[0]: uint64 = 1
  }
  
  receiveReadonly(a: arc4.dynamic_array<uint64>): void
  {
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}