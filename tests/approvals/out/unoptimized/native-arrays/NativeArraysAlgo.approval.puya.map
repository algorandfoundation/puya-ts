{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/native-arrays.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;AAgDE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhDF;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAZA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AA/BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAEY;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAG;;AAAA;AAAA;AAAA;AAAA;AAAH;AAAM;;AAAA;AAAA;AAAA;AAAA;AAAN;AAAS;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAR;AAGF;;;AACY;;;AAAN;AAEJ;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAAlB;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAA;;;;AAAA;AAGM;;AAAA;;;AAAgB;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAhB;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAN;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAAlB;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAA;;;;AAAA;AAGoB;;AAAA;AAAA;AAAA;AAAS;AAAb;AAAJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACG;;AAAR;AAAP;AAGO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAG;;AAAA;AAAA;AAAA;AAAA;AAAH;AAAM;;AAAA;AAAA;AAAA;AAAA;AAAN;AAAS;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAAlB;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAA;;;;AAAA;AAGkB;;AAAZ;AAAA;;AAAA;AAAA;AAAA;AAAS;AAAT;AAAA;AAAA;;AAAA;;AAAA;AAAN;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAAlB;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;;;;AAAA;AAIM;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AADwB;;AAAA;AAAA;AAAA;AAAA;AACJ;AAAA;AAAA;AADQ;;AAAA;AAAA;AAAA;AAAA;AACR;AAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAN;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAAlB;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AAA/B;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;;AAAlC;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;;AAAtC;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AAAzC;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;;AAAhD;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;;AAApD;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAGF;;;AAGc;AAFD;AAEC;AAFD;AAEC;AAAA;;;;AAAA;AAAA;AACA;AAHD;AAGC;AAHD;AAGC;AAAA;AAAA;AAAA;AAAN;AACI;AAAA;AAAA;AAAA;;;AAJC;AAAA;AAAA;AAID;AAAA;AAAA;AAJC;AAAA;AAAA;AAID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAEL;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAL;AAEA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AARW;AAQX;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AARW;AAQX;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AARW;AAQX;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AARW;AAQX;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AARW;AAQX;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AARW;AAQX;AAAA;;;;AAAA;;;;;;AAGF;;;AAAQ;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAGO;AAAA;AAAA;AAAA;;;AAAA;;AAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AACA;;AAAA;;AAAA;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 0 1 4"
    },
    "7": {
      "op": "bytecblock 0x 0x0000007b 0x0000 0x151f7c75"
    },
    "23": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "26": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "30": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "pushbytes 0x0f4c11ca // method \"buildArray()uint64[]\"",
      "defined_out": [
        "Method(buildArray()uint64[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(buildArray()uint64[])"
      ]
    },
    "39": {
      "op": "pushbytes 0x13a588c8 // method \"doThings()void\"",
      "defined_out": [
        "Method(buildArray()uint64[])",
        "Method(doThings()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(buildArray()uint64[])",
        "Method(doThings()void)"
      ]
    },
    "45": {
      "op": "pushbytes 0x787b50b2 // method \"arc4Interop()void\"",
      "defined_out": [
        "Method(arc4Interop()void)",
        "Method(buildArray()uint64[])",
        "Method(doThings()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(buildArray()uint64[])",
        "Method(doThings()void)",
        "Method(arc4Interop()void)"
      ]
    },
    "51": {
      "op": "pushbytes 0xeb87a064 // method \"structs((uint64,uint64))(uint64,uint64)[]\"",
      "defined_out": [
        "Method(arc4Interop()void)",
        "Method(buildArray()uint64[])",
        "Method(doThings()void)",
        "Method(structs((uint64,uint64))(uint64,uint64)[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(buildArray()uint64[])",
        "Method(doThings()void)",
        "Method(arc4Interop()void)",
        "Method(structs((uint64,uint64))(uint64,uint64)[])"
      ]
    },
    "57": {
      "op": "uncover 4",
      "stack_out": [
        "Method(buildArray()uint64[])",
        "Method(doThings()void)",
        "Method(arc4Interop()void)",
        "Method(structs((uint64,uint64))(uint64,uint64)[])",
        "tmp%2#0"
      ]
    },
    "59": {
      "op": "match main_buildArray_route@3 main_doThings_route@4 main_arc4Interop_route@5 main_structs_route@6",
      "stack_out": []
    },
    "69": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "block": "main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "71": {
      "block": "main_structs_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "73": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "75": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "78": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "79": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "80": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "81": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "84": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ]
    },
    "85": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "86": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "87": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%0#0"
      ]
    },
    "88": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%0%0#0"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "90": {
      "op": "intc_0 // 8",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "91": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0",
        "8",
        "8"
      ]
    },
    "92": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "93": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "94": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs",
      "op": "callsub structs",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "97": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "100": {
      "op": "log",
      "stack_out": []
    },
    "101": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@14"
    },
    "105": {
      "block": "main_arc4Interop_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "107": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "112": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "113": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "114": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "115": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop",
      "op": "callsub arc4Interop"
    },
    "118": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@14"
    },
    "122": {
      "block": "main_doThings_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "124": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "NoOp"
      ]
    },
    "125": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "126": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "129": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "130": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "132": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings",
      "op": "callsub doThings"
    },
    "135": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@14"
    },
    "139": {
      "block": "main_buildArray_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "141": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "146": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "147": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray",
      "op": "callsub buildArray",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "152": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "153": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "154": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "155": {
      "op": "log",
      "stack_out": []
    },
    "156": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "157": {
      "op": "b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@14"
    },
    "160": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "162": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%23#0"
      ]
    },
    "164": {
      "op": "match main___algots__.defaultCreate@10",
      "stack_out": []
    },
    "168": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "171": {
      "block": "main___algots__.defaultCreate@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "173": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "175": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "176": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "179": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@14"
    },
    "183": {
      "subroutine": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray",
      "params": {},
      "block": "buildArray",
      "stack_in": [],
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "184": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "185": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "186": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "189": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "1"
      ]
    },
    "190": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "0x"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%sub_item%0#1"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "194": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "195": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "196": {
      "op": "concat",
      "defined_out": [
        "array%data%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%0#1"
      ]
    },
    "197": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array%data%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "2"
      ]
    },
    "199": {
      "op": "itob",
      "defined_out": [
        "array%data%0#1",
        "array%sub_item%1#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "array%sub_item%1#1"
      ]
    },
    "200": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "array%sub_item%1#1",
        "0x"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "0x",
        "array%sub_item%1#1"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "array%data%0#1",
        "array%encoded%1#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "array%encoded%1#1"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%1#1"
      ]
    },
    "204": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "array%data%1#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%1#1",
        "3"
      ]
    },
    "206": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "207": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%1#1",
        "array%sub_item%2#1",
        "0x"
      ]
    },
    "208": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%1#1",
        "0x",
        "array%sub_item%2#1"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "array%encoded%2#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%1#1",
        "array%encoded%2#1"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%2#1"
      ]
    },
    "211": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "array%data%2#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%2#1",
        "4"
      ]
    },
    "212": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "213": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%2#1",
        "array%sub_item%3#1",
        "0x"
      ]
    },
    "214": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%2#1",
        "0x",
        "array%sub_item%3#1"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "array%encoded%3#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%data%2#1",
        "array%encoded%3#1"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "218": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "219": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "220": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "221": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "222": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "223": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "228": {
      "retsub": true,
      "op": "retsub"
    },
    "229": {
      "subroutine": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings",
      "params": {},
      "block": "doThings",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "232": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray",
      "op": "callsub buildArray",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0"
      ]
    },
    "235": {
      "op": "dup",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "236": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arr#0",
        "arr#0",
        "0"
      ]
    },
    "237": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%0#0"
      ]
    },
    "238": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%0#0",
        "4"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%1#0"
      ]
    },
    "240": {
      "op": "bz doThings_bool_false@6",
      "stack_out": [
        "arr#0"
      ]
    },
    "243": {
      "block": "doThings_and_contd@1",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "245": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%0#0"
      ]
    },
    "248": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "249": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "arr#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "0",
        "8"
      ]
    },
    "250": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "251": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "252": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%0#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%0#0"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%2#0"
      ]
    },
    "254": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%2#0",
        "1"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%3#0"
      ]
    },
    "256": {
      "op": "bz doThings_bool_false@6",
      "stack_out": [
        "arr#0"
      ]
    },
    "259": {
      "block": "doThings_and_contd@2",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "261": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%1#0"
      ]
    },
    "264": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "265": {
      "op": "intc_0 // 8",
      "defined_out": [
        "1",
        "8",
        "arr#0",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%1#0",
        "1",
        "8"
      ]
    },
    "266": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "267": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "8"
      ]
    },
    "268": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%1#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%1#0"
      ]
    },
    "269": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%4#0"
      ]
    },
    "270": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%4#0",
        "2"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%5#0"
      ]
    },
    "273": {
      "op": "bz doThings_bool_false@6",
      "stack_out": [
        "arr#0"
      ]
    },
    "276": {
      "block": "doThings_and_contd@3",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "278": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%2#0"
      ]
    },
    "281": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "2"
      ]
    },
    "283": {
      "op": "intc_0 // 8",
      "defined_out": [
        "2",
        "8",
        "arr#0",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "2",
        "8"
      ]
    },
    "284": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "285": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "8"
      ]
    },
    "286": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%2#0"
      ]
    },
    "287": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%6#0"
      ]
    },
    "288": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%6#0",
        "3"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%7#0"
      ]
    },
    "291": {
      "op": "bz doThings_bool_false@6",
      "stack_out": [
        "arr#0"
      ]
    },
    "294": {
      "block": "doThings_and_contd@4",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "296": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%3#0"
      ]
    },
    "299": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%3#0",
        "3"
      ]
    },
    "301": {
      "op": "intc_0 // 8",
      "defined_out": [
        "3",
        "8",
        "arr#0",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%3#0",
        "3",
        "8"
      ]
    },
    "302": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ]
    },
    "303": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "8"
      ]
    },
    "304": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%3#0"
      ]
    },
    "305": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%8#0"
      ]
    },
    "306": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%8#0",
        "4"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%9#0"
      ]
    },
    "308": {
      "op": "bz doThings_bool_false@6",
      "stack_out": [
        "arr#0"
      ]
    },
    "311": {
      "block": "doThings_bool_true@5",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%0#0"
      ]
    },
    "312": {
      "block": "doThings_bool_merge@7",
      "stack_in": [
        "arr#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "arr#0"
      ]
    },
    "313": {
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "315": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "318": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "arr#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "0x0000"
      ]
    },
    "319": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x0000",
        "arr#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "0x0000",
        "0x"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array_data%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "array_data%0#0"
      ]
    },
    "321": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "324": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "5"
      ]
    },
    "326": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "array%sub_item%0#1"
      ]
    },
    "327": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "array%sub_item%0#1",
        "0x"
      ]
    },
    "328": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "0x",
        "array%sub_item%0#1"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%encoded%0#1",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "array%encoded%0#1"
      ]
    },
    "330": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "332": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "encoded%0#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "encoded%0#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concatenated%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0"
      ]
    },
    "334": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "335": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "byte_len%0#0",
        "concatenated%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "336": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "arr#0",
        "byte_len%0#0",
        "concatenated%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "337": {
      "op": "/",
      "defined_out": [
        "arr#0",
        "concatenated%0#0",
        "expr_value_trimmed%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "338": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%0#0",
        "concatenated%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "339": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "concatenated%0#0",
        "expr_value_trimmed%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "342": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "343": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concat_result%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "concat_result%0#0"
      ]
    },
    "344": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%2#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "347": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%1#0"
      ]
    },
    "348": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "349": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "byte_len%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "350": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "351": {
      "op": "/",
      "defined_out": [
        "arr#0",
        "concatenated%1#0",
        "len_%1#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "352": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "353": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "356": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "357": {
      "op": "concat",
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "358": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0"
      ]
    },
    "359": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "361": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arr#0",
        "arr#0",
        "0"
      ]
    },
    "362": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%10#0"
      ]
    },
    "363": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "arr#0",
        "tmp%10#0",
        "5"
      ]
    },
    "365": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%11#0"
      ]
    },
    "366": {
      "op": "bz doThings_bool_false@14",
      "stack_out": [
        "arr#0"
      ]
    },
    "369": {
      "block": "doThings_and_contd@8",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "371": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%4#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%4#0"
      ]
    },
    "374": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "array_head_and_tail%4#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%4#0",
        "0"
      ]
    },
    "375": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "arr#0",
        "array_head_and_tail%4#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%4#0",
        "0",
        "8"
      ]
    },
    "376": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ]
    },
    "377": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0",
        "8"
      ]
    },
    "378": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%4#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%4#0"
      ]
    },
    "379": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%12#0"
      ]
    },
    "380": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%12#0",
        "1"
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%13#0"
      ]
    },
    "382": {
      "op": "bz doThings_bool_false@14",
      "stack_out": [
        "arr#0"
      ]
    },
    "385": {
      "block": "doThings_and_contd@9",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "387": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%5#0"
      ]
    },
    "390": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%5#0",
        "1"
      ]
    },
    "391": {
      "op": "intc_0 // 8",
      "defined_out": [
        "1",
        "8",
        "arr#0",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%5#0",
        "1",
        "8"
      ]
    },
    "392": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0"
      ]
    },
    "393": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0",
        "8"
      ]
    },
    "394": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%5#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%5#0"
      ]
    },
    "395": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%14#0"
      ]
    },
    "396": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%14#0",
        "2"
      ]
    },
    "398": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%15#0"
      ]
    },
    "399": {
      "op": "bz doThings_bool_false@14",
      "stack_out": [
        "arr#0"
      ]
    },
    "402": {
      "block": "doThings_and_contd@10",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "404": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%6#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%6#0"
      ]
    },
    "407": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%6#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%6#0",
        "2"
      ]
    },
    "409": {
      "op": "intc_0 // 8",
      "defined_out": [
        "2",
        "8",
        "arr#0",
        "array_head_and_tail%6#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%6#0",
        "2",
        "8"
      ]
    },
    "410": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%6#0",
        "item_offset%6#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%6#0",
        "item_offset%6#0"
      ]
    },
    "411": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "8"
      ]
    },
    "412": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%6#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%6#0"
      ]
    },
    "413": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%16#0"
      ]
    },
    "414": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%16#0",
        "3"
      ]
    },
    "416": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%17#0"
      ]
    },
    "417": {
      "op": "bz doThings_bool_false@14",
      "stack_out": [
        "arr#0"
      ]
    },
    "420": {
      "block": "doThings_and_contd@11",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "422": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%7#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%7#0"
      ]
    },
    "425": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "array_head_and_tail%7#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%7#0",
        "3"
      ]
    },
    "427": {
      "op": "intc_0 // 8",
      "defined_out": [
        "3",
        "8",
        "arr#0",
        "array_head_and_tail%7#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%7#0",
        "3",
        "8"
      ]
    },
    "428": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%7#0",
        "item_offset%7#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%7#0",
        "item_offset%7#0"
      ]
    },
    "429": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%7#0",
        "item_offset%7#0",
        "8"
      ]
    },
    "430": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%7#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%7#0"
      ]
    },
    "431": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%18#0"
      ]
    },
    "432": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%18#0",
        "4"
      ]
    },
    "433": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%19#0"
      ]
    },
    "434": {
      "op": "bz doThings_bool_false@14",
      "stack_out": [
        "arr#0"
      ]
    },
    "437": {
      "block": "doThings_and_contd@12",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "439": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%8#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%8#0"
      ]
    },
    "442": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "array_head_and_tail%8#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%8#0",
        "4"
      ]
    },
    "443": {
      "op": "intc_0 // 8",
      "defined_out": [
        "4",
        "8",
        "arr#0",
        "array_head_and_tail%8#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%8#0",
        "4",
        "8"
      ]
    },
    "444": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%8#0",
        "item_offset%8#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%8#0",
        "item_offset%8#0"
      ]
    },
    "445": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%8#0",
        "item_offset%8#0",
        "8"
      ]
    },
    "446": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%8#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%8#0"
      ]
    },
    "447": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%20#0"
      ]
    },
    "448": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%20#0",
        "5"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%21#0"
      ]
    },
    "451": {
      "op": "bz doThings_bool_false@14",
      "stack_out": [
        "arr#0"
      ]
    },
    "454": {
      "block": "doThings_bool_true@13",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%1#0"
      ]
    },
    "455": {
      "block": "doThings_bool_merge@15",
      "stack_in": [
        "arr#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "arr#0"
      ]
    },
    "456": {
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "458": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "459": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "460": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "tmp%22#0"
      ]
    },
    "461": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "tmp%22#0",
        "1"
      ]
    },
    "462": {
      "op": "-",
      "defined_out": [
        "arr#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "tmp%23#0"
      ]
    },
    "463": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "tmp%23#0",
        "arr#0"
      ]
    },
    "464": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%9#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%23#0",
        "array_head_and_tail%9#0"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%9#0",
        "tmp%23#0"
      ]
    },
    "468": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "arr#0",
        "array_head_and_tail%9#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%9#0",
        "tmp%23#0",
        "8"
      ]
    },
    "469": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%9#0",
        "item_offset%9#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%9#0",
        "item_offset%9#0"
      ]
    },
    "470": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%9#0",
        "item_offset%9#0",
        "8"
      ]
    },
    "471": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%9#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%9#0"
      ]
    },
    "472": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "top#0"
      ],
      "stack_out": [
        "arr#0",
        "top#0"
      ]
    },
    "473": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "top#0"
      ],
      "stack_out": [
        "arr#0",
        "top#0",
        "5"
      ]
    },
    "475": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%24#0"
      ]
    },
    "476": {
      "op": "assert",
      "stack_out": [
        "arr#0"
      ]
    },
    "477": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "0x0000"
      ]
    },
    "478": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x0000",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "0x0000",
        "0x"
      ]
    },
    "479": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array_data%1#0"
      ],
      "stack_out": [
        "arr#0",
        "array_data%1#0"
      ]
    },
    "480": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "483": {
      "op": "intc_2 // 1",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "1"
      ]
    },
    "484": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%sub_item%1#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%sub_item%1#1"
      ]
    },
    "485": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%sub_item%1#1",
        "0x"
      ]
    },
    "486": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "0x",
        "array%sub_item%1#1"
      ]
    },
    "487": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%encoded%1#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%encoded%1#1"
      ]
    },
    "488": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%encoded%1#1",
        "0x"
      ]
    },
    "489": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "0x",
        "array%encoded%1#1"
      ]
    },
    "490": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%1#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%1#1"
      ]
    },
    "491": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array%data%1#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%1#1",
        "2"
      ]
    },
    "493": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%data%1#1",
        "array%sub_item%2#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "494": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%1#1",
        "array%sub_item%2#1",
        "0x"
      ]
    },
    "495": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%1#1",
        "0x",
        "array%sub_item%2#1"
      ]
    },
    "496": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%1#1",
        "array%encoded%2#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%1#1",
        "array%encoded%2#1"
      ]
    },
    "497": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%2#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%2#1"
      ]
    },
    "498": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "array%data%2#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%2#1",
        "3"
      ]
    },
    "500": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%data%2#1",
        "array%sub_item%3#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "501": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%2#1",
        "array%sub_item%3#1",
        "0x"
      ]
    },
    "502": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%2#1",
        "0x",
        "array%sub_item%3#1"
      ]
    },
    "503": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%2#1",
        "array%encoded%3#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%2#1",
        "array%encoded%3#1"
      ]
    },
    "504": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%3#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%3#1"
      ]
    },
    "505": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "array%data%3#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%3#1",
        "4"
      ]
    },
    "506": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%data%3#1",
        "array%sub_item%4#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "507": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%3#1",
        "array%sub_item%4#1",
        "0x"
      ]
    },
    "508": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%3#1",
        "0x",
        "array%sub_item%4#1"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%3#1",
        "array%encoded%4#1",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "array%data%3#1",
        "array%encoded%4#1"
      ]
    },
    "510": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "encoded%1#0",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%3#0",
        "encoded%1#0"
      ]
    },
    "511": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%2#0"
      ]
    },
    "512": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "513": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "byte_len%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "514": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "8"
      ]
    },
    "515": {
      "op": "/",
      "defined_out": [
        "arr#0",
        "concatenated%2#0",
        "len_%2#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "516": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "517": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "521": {
      "op": "concat",
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "522": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0"
      ]
    },
    "523": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "525": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arr#0",
        "arr#0",
        "0"
      ]
    },
    "526": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%25#0"
      ]
    },
    "527": {
      "op": "intc_3 // 4",
      "stack_out": [
        "arr#0",
        "tmp%25#0",
        "4"
      ]
    },
    "528": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%26#0"
      ]
    },
    "529": {
      "op": "bz doThings_bool_false@21",
      "stack_out": [
        "arr#0"
      ]
    },
    "532": {
      "block": "doThings_and_contd@16",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "534": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%10#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%10#0"
      ]
    },
    "537": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "array_head_and_tail%10#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%10#0",
        "0"
      ]
    },
    "538": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "arr#0",
        "array_head_and_tail%10#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%10#0",
        "0",
        "8"
      ]
    },
    "539": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%10#0",
        "item_offset%10#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%10#0",
        "item_offset%10#0"
      ]
    },
    "540": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%10#0",
        "item_offset%10#0",
        "8"
      ]
    },
    "541": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%10#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%10#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%27#0"
      ]
    },
    "543": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%27#0",
        "1"
      ]
    },
    "544": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%28#0"
      ]
    },
    "545": {
      "op": "bz doThings_bool_false@21",
      "stack_out": [
        "arr#0"
      ]
    },
    "548": {
      "block": "doThings_and_contd@17",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "550": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%11#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%11#0"
      ]
    },
    "553": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%11#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%11#0",
        "1"
      ]
    },
    "554": {
      "op": "intc_0 // 8",
      "defined_out": [
        "1",
        "8",
        "arr#0",
        "array_head_and_tail%11#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%11#0",
        "1",
        "8"
      ]
    },
    "555": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%11#0",
        "item_offset%11#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%11#0",
        "item_offset%11#0"
      ]
    },
    "556": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%11#0",
        "item_offset%11#0",
        "8"
      ]
    },
    "557": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%11#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%11#0"
      ]
    },
    "558": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%29#0"
      ]
    },
    "559": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%29#0",
        "2"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%30#0"
      ]
    },
    "562": {
      "op": "bz doThings_bool_false@21",
      "stack_out": [
        "arr#0"
      ]
    },
    "565": {
      "block": "doThings_and_contd@18",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "567": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%12#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%12#0"
      ]
    },
    "570": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%12#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%12#0",
        "2"
      ]
    },
    "572": {
      "op": "intc_0 // 8",
      "defined_out": [
        "2",
        "8",
        "arr#0",
        "array_head_and_tail%12#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%12#0",
        "2",
        "8"
      ]
    },
    "573": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%12#0",
        "item_offset%12#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%12#0",
        "item_offset%12#0"
      ]
    },
    "574": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%12#0",
        "item_offset%12#0",
        "8"
      ]
    },
    "575": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%12#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%12#0"
      ]
    },
    "576": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%31#0"
      ]
    },
    "577": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%31#0",
        "3"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%32#0"
      ]
    },
    "580": {
      "op": "bz doThings_bool_false@21",
      "stack_out": [
        "arr#0"
      ]
    },
    "583": {
      "block": "doThings_and_contd@19",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "585": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%13#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%13#0"
      ]
    },
    "588": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "array_head_and_tail%13#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%13#0",
        "3"
      ]
    },
    "590": {
      "op": "intc_0 // 8",
      "defined_out": [
        "3",
        "8",
        "arr#0",
        "array_head_and_tail%13#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%13#0",
        "3",
        "8"
      ]
    },
    "591": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%13#0",
        "item_offset%13#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%13#0",
        "item_offset%13#0"
      ]
    },
    "592": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%13#0",
        "item_offset%13#0",
        "8"
      ]
    },
    "593": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%13#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%13#0"
      ]
    },
    "594": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%33#0"
      ]
    },
    "595": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%33#0",
        "4"
      ]
    },
    "596": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%34#0"
      ]
    },
    "597": {
      "op": "bz doThings_bool_false@21",
      "stack_out": [
        "arr#0"
      ]
    },
    "600": {
      "block": "doThings_bool_true@20",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%2#0"
      ]
    },
    "601": {
      "block": "doThings_bool_merge@22",
      "stack_in": [
        "arr#0",
        "and_result%2#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "arr#0"
      ]
    },
    "602": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10"
      ],
      "stack_out": [
        "arr#0",
        "10"
      ]
    },
    "604": {
      "op": "itob",
      "defined_out": [
        "assigned_value%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0"
      ]
    },
    "605": {
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0",
        "assigned_value%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0"
      ]
    },
    "607": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)",
        "assigned_value%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "608": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)",
        "assigned_value%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "609": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_length%0#0",
        "assigned_value%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0",
        "array_length%0#0"
      ]
    },
    "610": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_length%0#0",
        "assigned_value%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0",
        "array_length%0#0",
        "1"
      ]
    },
    "611": {
      "op": ">",
      "defined_out": [
        "arr#0",
        "assigned_value%0#0",
        "index_is_in_bounds%0#0"
      ],
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "612": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0"
      ]
    },
    "613": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "arr#0",
        "assigned_value%0#0",
        "arr#0",
        "10"
      ]
    },
    "615": {
      "op": "uncover 2",
      "stack_out": [
        "arr#0",
        "arr#0",
        "10",
        "assigned_value%0#0"
      ]
    },
    "617": {
      "op": "replace3",
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "618": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0"
      ]
    },
    "619": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "621": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arr#0",
        "arr#0",
        "0"
      ]
    },
    "622": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%35#0"
      ]
    },
    "623": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%35#0",
        "4"
      ]
    },
    "624": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%36#0"
      ]
    },
    "625": {
      "op": "bz doThings_bool_false@28",
      "stack_out": [
        "arr#0"
      ]
    },
    "628": {
      "block": "doThings_and_contd@23",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "630": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%14#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%14#0"
      ]
    },
    "633": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "array_head_and_tail%14#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%14#0",
        "0"
      ]
    },
    "634": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "arr#0",
        "array_head_and_tail%14#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%14#0",
        "0",
        "8"
      ]
    },
    "635": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%14#0",
        "item_offset%14#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%14#0",
        "item_offset%14#0"
      ]
    },
    "636": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%14#0",
        "item_offset%14#0",
        "8"
      ]
    },
    "637": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%14#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%14#0"
      ]
    },
    "638": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%37#0"
      ]
    },
    "639": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%37#0",
        "1"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%38#0"
      ]
    },
    "641": {
      "op": "bz doThings_bool_false@28",
      "stack_out": [
        "arr#0"
      ]
    },
    "644": {
      "block": "doThings_and_contd@24",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "646": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%15#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%15#0"
      ]
    },
    "649": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%15#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%15#0",
        "1"
      ]
    },
    "650": {
      "op": "intc_0 // 8",
      "defined_out": [
        "1",
        "8",
        "arr#0",
        "array_head_and_tail%15#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%15#0",
        "1",
        "8"
      ]
    },
    "651": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%15#0",
        "item_offset%15#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%15#0",
        "item_offset%15#0"
      ]
    },
    "652": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%15#0",
        "item_offset%15#0",
        "8"
      ]
    },
    "653": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%15#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%15#0"
      ]
    },
    "654": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%39#0"
      ]
    },
    "655": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arr#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%39#0",
        "10"
      ]
    },
    "657": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%40#0"
      ]
    },
    "658": {
      "op": "bz doThings_bool_false@28",
      "stack_out": [
        "arr#0"
      ]
    },
    "661": {
      "block": "doThings_and_contd@25",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "663": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%16#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%16#0"
      ]
    },
    "666": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%16#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%16#0",
        "2"
      ]
    },
    "668": {
      "op": "intc_0 // 8",
      "defined_out": [
        "2",
        "8",
        "arr#0",
        "array_head_and_tail%16#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%16#0",
        "2",
        "8"
      ]
    },
    "669": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%16#0",
        "item_offset%16#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%16#0",
        "item_offset%16#0"
      ]
    },
    "670": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%16#0",
        "item_offset%16#0",
        "8"
      ]
    },
    "671": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%16#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%16#0"
      ]
    },
    "672": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%41#0"
      ]
    },
    "673": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%41#0",
        "3"
      ]
    },
    "675": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%42#0"
      ]
    },
    "676": {
      "op": "bz doThings_bool_false@28",
      "stack_out": [
        "arr#0"
      ]
    },
    "679": {
      "block": "doThings_and_contd@26",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "681": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%17#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%17#0"
      ]
    },
    "684": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "array_head_and_tail%17#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%17#0",
        "3"
      ]
    },
    "686": {
      "op": "intc_0 // 8",
      "defined_out": [
        "3",
        "8",
        "arr#0",
        "array_head_and_tail%17#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%17#0",
        "3",
        "8"
      ]
    },
    "687": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%17#0",
        "item_offset%17#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%17#0",
        "item_offset%17#0"
      ]
    },
    "688": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%17#0",
        "item_offset%17#0",
        "8"
      ]
    },
    "689": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%17#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%17#0"
      ]
    },
    "690": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%43#0"
      ]
    },
    "691": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%43#0",
        "4"
      ]
    },
    "692": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%44#0"
      ]
    },
    "693": {
      "op": "bz doThings_bool_false@28",
      "stack_out": [
        "arr#0"
      ]
    },
    "696": {
      "block": "doThings_bool_true@27",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%3#0"
      ]
    },
    "697": {
      "block": "doThings_bool_merge@29",
      "stack_in": [
        "arr#0",
        "and_result%3#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "arr#0"
      ]
    },
    "698": {
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "700": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "701": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%4#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0",
        "expr_value_trimmed%4#0"
      ]
    },
    "704": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%4#0",
        "arr#0"
      ]
    },
    "705": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%4#0",
        "expr_value_trimmed%5#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%4#0",
        "expr_value_trimmed%5#0"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concatenated%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0"
      ]
    },
    "709": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "concatenated%3#0",
        "concatenated%3#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0",
        "concatenated%3#0 (copy)"
      ]
    },
    "710": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "byte_len%3#0",
        "concatenated%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0",
        "byte_len%3#0"
      ]
    },
    "711": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "arr#0",
        "byte_len%3#0",
        "concatenated%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0",
        "byte_len%3#0",
        "8"
      ]
    },
    "712": {
      "op": "/",
      "defined_out": [
        "arr#0",
        "concatenated%3#0",
        "len_%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0",
        "len_%3#0"
      ]
    },
    "713": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%3#0",
        "concatenated%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0",
        "as_bytes%3#0"
      ]
    },
    "714": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "concatenated%3#0",
        "len_16_bit%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%3#0",
        "len_16_bit%3#0"
      ]
    },
    "717": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "len_16_bit%3#0",
        "concatenated%3#0"
      ]
    },
    "718": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concat_result%3#0"
      ],
      "stack_out": [
        "arr#0",
        "concat_result%3#0"
      ]
    },
    "719": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%6#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0"
      ]
    },
    "722": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "arr#0",
        "expr_value_trimmed%6#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "11"
      ]
    },
    "724": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%sub_item%5#1",
        "expr_value_trimmed%6#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "array%sub_item%5#1"
      ]
    },
    "725": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "arr#0",
        "array%sub_item%5#1",
        "expr_value_trimmed%6#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "array%sub_item%5#1",
        "0x"
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "0x",
        "array%sub_item%5#1"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%encoded%5#1",
        "expr_value_trimmed%6#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "array%encoded%5#1"
      ]
    },
    "728": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "array%encoded%5#1",
        "0x"
      ]
    },
    "729": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "0x",
        "array%encoded%5#1"
      ]
    },
    "730": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "encoded%2#0",
        "expr_value_trimmed%6#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%6#0",
        "encoded%2#0"
      ]
    },
    "731": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concatenated%4#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%4#0"
      ]
    },
    "732": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "concatenated%4#0",
        "concatenated%4#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%4#0",
        "concatenated%4#0 (copy)"
      ]
    },
    "733": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "byte_len%4#0",
        "concatenated%4#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%4#0",
        "byte_len%4#0"
      ]
    },
    "734": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "concatenated%4#0",
        "byte_len%4#0",
        "8"
      ]
    },
    "735": {
      "op": "/",
      "defined_out": [
        "arr#0",
        "concatenated%4#0",
        "len_%4#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%4#0",
        "len_%4#0"
      ]
    },
    "736": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%4#0",
        "concatenated%4#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%4#0",
        "as_bytes%4#0"
      ]
    },
    "737": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "concatenated%4#0",
        "len_16_bit%4#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%4#0",
        "len_16_bit%4#0"
      ]
    },
    "740": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "len_16_bit%4#0",
        "concatenated%4#0"
      ]
    },
    "741": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concat_result%4#0"
      ],
      "stack_out": [
        "arr#0",
        "concat_result%4#0"
      ]
    },
    "742": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0"
      ]
    },
    "745": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "arr#0",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "12"
      ]
    },
    "747": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%sub_item%6#1",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%sub_item%6#1"
      ]
    },
    "748": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%sub_item%6#1",
        "0x"
      ]
    },
    "749": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "0x",
        "array%sub_item%6#1"
      ]
    },
    "750": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%encoded%6#1",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%encoded%6#1"
      ]
    },
    "751": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%encoded%6#1",
        "0x"
      ]
    },
    "752": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "0x",
        "array%encoded%6#1"
      ]
    },
    "753": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%6#1",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%data%6#1"
      ]
    },
    "754": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "arr#0",
        "array%data%6#1",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%data%6#1",
        "13"
      ]
    },
    "756": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "array%data%6#1",
        "array%sub_item%7#1",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%data%6#1",
        "array%sub_item%7#1"
      ]
    },
    "757": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%data%6#1",
        "array%sub_item%7#1",
        "0x"
      ]
    },
    "758": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%data%6#1",
        "0x",
        "array%sub_item%7#1"
      ]
    },
    "759": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "array%data%6#1",
        "array%encoded%7#1",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "array%data%6#1",
        "array%encoded%7#1"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "encoded%3#0",
        "expr_value_trimmed%7#0"
      ],
      "stack_out": [
        "arr#0",
        "expr_value_trimmed%7#0",
        "encoded%3#0"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "arr#0",
        "concatenated%5#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%5#0"
      ]
    },
    "762": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "concatenated%5#0",
        "concatenated%5#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%5#0",
        "concatenated%5#0 (copy)"
      ]
    },
    "763": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "byte_len%5#0",
        "concatenated%5#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%5#0",
        "byte_len%5#0"
      ]
    },
    "764": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "concatenated%5#0",
        "byte_len%5#0",
        "8"
      ]
    },
    "765": {
      "op": "/",
      "defined_out": [
        "arr#0",
        "concatenated%5#0",
        "len_%5#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%5#0",
        "len_%5#0"
      ]
    },
    "766": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%5#0",
        "concatenated%5#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%5#0",
        "as_bytes%5#0"
      ]
    },
    "767": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "concatenated%5#0",
        "len_16_bit%5#0"
      ],
      "stack_out": [
        "arr#0",
        "concatenated%5#0",
        "len_16_bit%5#0"
      ]
    },
    "770": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "len_16_bit%5#0",
        "concatenated%5#0"
      ]
    },
    "771": {
      "op": "concat",
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "772": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "arr#0",
        "arr#0"
      ]
    },
    "773": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "775": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arr#0",
        "arr#0",
        "0"
      ]
    },
    "776": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%45#0"
      ]
    },
    "777": {
      "op": "pushint 11 // 11",
      "stack_out": [
        "arr#0",
        "tmp%45#0",
        "11"
      ]
    },
    "779": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%46#0"
      ]
    },
    "780": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "783": {
      "block": "doThings_and_contd@30",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "785": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%18#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%18#0"
      ]
    },
    "788": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "array_head_and_tail%18#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%18#0",
        "0"
      ]
    },
    "789": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "arr#0",
        "array_head_and_tail%18#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%18#0",
        "0",
        "8"
      ]
    },
    "790": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%18#0",
        "item_offset%18#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%18#0",
        "item_offset%18#0"
      ]
    },
    "791": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%18#0",
        "item_offset%18#0",
        "8"
      ]
    },
    "792": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%18#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%18#0"
      ]
    },
    "793": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%47#0"
      ]
    },
    "794": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%47#0",
        "1"
      ]
    },
    "795": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%48#0"
      ]
    },
    "796": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "799": {
      "block": "doThings_and_contd@31",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "801": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%19#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%19#0"
      ]
    },
    "804": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%19#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%19#0",
        "1"
      ]
    },
    "805": {
      "op": "intc_0 // 8",
      "defined_out": [
        "1",
        "8",
        "arr#0",
        "array_head_and_tail%19#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%19#0",
        "1",
        "8"
      ]
    },
    "806": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%19#0",
        "item_offset%19#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%19#0",
        "item_offset%19#0"
      ]
    },
    "807": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%19#0",
        "item_offset%19#0",
        "8"
      ]
    },
    "808": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%19#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%19#0"
      ]
    },
    "809": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%49#0"
      ]
    },
    "810": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arr#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%49#0",
        "10"
      ]
    },
    "812": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%50#0"
      ]
    },
    "813": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "816": {
      "block": "doThings_and_contd@32",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "818": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%20#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%20#0"
      ]
    },
    "821": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%20#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%20#0",
        "2"
      ]
    },
    "823": {
      "op": "intc_0 // 8",
      "defined_out": [
        "2",
        "8",
        "arr#0",
        "array_head_and_tail%20#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%20#0",
        "2",
        "8"
      ]
    },
    "824": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%20#0",
        "item_offset%20#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%20#0",
        "item_offset%20#0"
      ]
    },
    "825": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%20#0",
        "item_offset%20#0",
        "8"
      ]
    },
    "826": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%20#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%20#0"
      ]
    },
    "827": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%51#0"
      ]
    },
    "828": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%51#0",
        "3"
      ]
    },
    "830": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%52#0"
      ]
    },
    "831": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "834": {
      "block": "doThings_and_contd@33",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "836": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%21#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%21#0"
      ]
    },
    "839": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "array_head_and_tail%21#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%21#0",
        "3"
      ]
    },
    "841": {
      "op": "intc_0 // 8",
      "defined_out": [
        "3",
        "8",
        "arr#0",
        "array_head_and_tail%21#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%21#0",
        "3",
        "8"
      ]
    },
    "842": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%21#0",
        "item_offset%21#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%21#0",
        "item_offset%21#0"
      ]
    },
    "843": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%21#0",
        "item_offset%21#0",
        "8"
      ]
    },
    "844": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%21#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%21#0"
      ]
    },
    "845": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%53#0"
      ]
    },
    "846": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%53#0",
        "4"
      ]
    },
    "847": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%54#0"
      ]
    },
    "848": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "851": {
      "block": "doThings_and_contd@34",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "853": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%22#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%22#0"
      ]
    },
    "856": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "array_head_and_tail%22#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%22#0",
        "4"
      ]
    },
    "857": {
      "op": "intc_0 // 8",
      "defined_out": [
        "4",
        "8",
        "arr#0",
        "array_head_and_tail%22#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%22#0",
        "4",
        "8"
      ]
    },
    "858": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%22#0",
        "item_offset%22#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%22#0",
        "item_offset%22#0"
      ]
    },
    "859": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%22#0",
        "item_offset%22#0",
        "8"
      ]
    },
    "860": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%22#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%22#0"
      ]
    },
    "861": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%55#0"
      ]
    },
    "862": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%55#0",
        "1"
      ]
    },
    "863": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%56#0"
      ]
    },
    "864": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "867": {
      "block": "doThings_and_contd@35",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "869": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%23#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%23#0"
      ]
    },
    "872": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "array_head_and_tail%23#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%23#0",
        "5"
      ]
    },
    "874": {
      "op": "intc_0 // 8",
      "defined_out": [
        "5",
        "8",
        "arr#0",
        "array_head_and_tail%23#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%23#0",
        "5",
        "8"
      ]
    },
    "875": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%23#0",
        "item_offset%23#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%23#0",
        "item_offset%23#0"
      ]
    },
    "876": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%23#0",
        "item_offset%23#0",
        "8"
      ]
    },
    "877": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%23#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%23#0"
      ]
    },
    "878": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%57#0"
      ]
    },
    "879": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arr#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%57#0",
        "10"
      ]
    },
    "881": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%58#0"
      ]
    },
    "882": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "885": {
      "block": "doThings_and_contd@36",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "887": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%24#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%24#0"
      ]
    },
    "890": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "arr#0",
        "array_head_and_tail%24#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%24#0",
        "6"
      ]
    },
    "892": {
      "op": "intc_0 // 8",
      "defined_out": [
        "6",
        "8",
        "arr#0",
        "array_head_and_tail%24#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%24#0",
        "6",
        "8"
      ]
    },
    "893": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%24#0",
        "item_offset%24#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%24#0",
        "item_offset%24#0"
      ]
    },
    "894": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%24#0",
        "item_offset%24#0",
        "8"
      ]
    },
    "895": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%24#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%24#0"
      ]
    },
    "896": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%59#0"
      ]
    },
    "897": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%59#0",
        "3"
      ]
    },
    "899": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%60#0"
      ]
    },
    "900": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "903": {
      "block": "doThings_and_contd@37",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "905": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%25#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%25#0"
      ]
    },
    "908": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "arr#0",
        "array_head_and_tail%25#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%25#0",
        "7"
      ]
    },
    "910": {
      "op": "intc_0 // 8",
      "defined_out": [
        "7",
        "8",
        "arr#0",
        "array_head_and_tail%25#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%25#0",
        "7",
        "8"
      ]
    },
    "911": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%25#0",
        "item_offset%25#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%25#0",
        "item_offset%25#0"
      ]
    },
    "912": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%25#0",
        "item_offset%25#0",
        "8"
      ]
    },
    "913": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%25#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%25#0"
      ]
    },
    "914": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%61#0"
      ]
    },
    "915": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%61#0",
        "4"
      ]
    },
    "916": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%62#0"
      ]
    },
    "917": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "920": {
      "block": "doThings_and_contd@38",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "922": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%26#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%26#0"
      ]
    },
    "925": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "arr#0",
        "array_head_and_tail%26#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%26#0",
        "8"
      ]
    },
    "926": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%26#0",
        "8",
        "8"
      ]
    },
    "927": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%26#0",
        "item_offset%26#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%26#0",
        "item_offset%26#0"
      ]
    },
    "928": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%26#0",
        "item_offset%26#0",
        "8"
      ]
    },
    "929": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%26#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%26#0"
      ]
    },
    "930": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%63#0"
      ]
    },
    "931": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "arr#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%63#0",
        "11"
      ]
    },
    "933": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%64#0"
      ]
    },
    "934": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "937": {
      "block": "doThings_and_contd@39",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "939": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%27#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%27#0"
      ]
    },
    "942": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "arr#0",
        "array_head_and_tail%27#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%27#0",
        "9"
      ]
    },
    "944": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "9",
        "arr#0",
        "array_head_and_tail%27#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%27#0",
        "9",
        "8"
      ]
    },
    "945": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%27#0",
        "item_offset%27#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%27#0",
        "item_offset%27#0"
      ]
    },
    "946": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%27#0",
        "item_offset%27#0",
        "8"
      ]
    },
    "947": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%27#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%27#0"
      ]
    },
    "948": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%65#0"
      ]
    },
    "949": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "arr#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%65#0",
        "12"
      ]
    },
    "951": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%66#0"
      ]
    },
    "952": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "955": {
      "block": "doThings_and_contd@40",
      "stack_in": [
        "arr#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arr#0"
      ]
    },
    "957": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%28#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%28#0"
      ]
    },
    "960": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arr#0",
        "array_head_and_tail%28#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%28#0",
        "10"
      ]
    },
    "962": {
      "op": "intc_0 // 8",
      "defined_out": [
        "10",
        "8",
        "arr#0",
        "array_head_and_tail%28#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%28#0",
        "10",
        "8"
      ]
    },
    "963": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%28#0",
        "item_offset%28#0"
      ],
      "stack_out": [
        "arr#0",
        "array_head_and_tail%28#0",
        "item_offset%28#0"
      ]
    },
    "964": {
      "op": "intc_0 // 8",
      "stack_out": [
        "arr#0",
        "array_head_and_tail%28#0",
        "item_offset%28#0",
        "8"
      ]
    },
    "965": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%28#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "arc4_item%28#0"
      ]
    },
    "966": {
      "op": "btoi",
      "defined_out": [
        "arr#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%67#0"
      ]
    },
    "967": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "arr#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%67#0",
        "13"
      ]
    },
    "969": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%68#0"
      ]
    },
    "970": {
      "op": "bz doThings_bool_false@42",
      "stack_out": [
        "arr#0"
      ]
    },
    "973": {
      "block": "doThings_bool_true@41",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%4#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%4#0"
      ]
    },
    "974": {
      "block": "doThings_bool_merge@43",
      "stack_in": [
        "arr#0",
        "and_result%4#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "arr#0"
      ]
    },
    "975": {
      "retsub": true,
      "op": "retsub"
    },
    "976": {
      "block": "doThings_bool_false@42",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%4#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%4#0"
      ]
    },
    "977": {
      "op": "b doThings_bool_merge@43"
    },
    "980": {
      "block": "doThings_bool_false@28",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%3#0"
      ]
    },
    "981": {
      "op": "b doThings_bool_merge@29"
    },
    "984": {
      "block": "doThings_bool_false@21",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%2#0"
      ]
    },
    "985": {
      "op": "b doThings_bool_merge@22"
    },
    "988": {
      "block": "doThings_bool_false@14",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%1#0"
      ]
    },
    "989": {
      "op": "b doThings_bool_merge@15"
    },
    "992": {
      "block": "doThings_bool_false@6",
      "stack_in": [
        "arr#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "arr#0",
        "and_result%0#0"
      ]
    },
    "993": {
      "op": "b doThings_bool_merge@7"
    },
    "996": {
      "subroutine": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop",
      "params": {},
      "block": "arc4Interop",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "999": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1000": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x",
        "0x0000007b"
      ],
      "stack_out": [
        "0x",
        "0x0000007b"
      ]
    },
    "1001": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "1002": {
      "op": "bytec_1 // 0x0000007b",
      "stack_out": [
        "result%0#0",
        "0x0000007b"
      ]
    },
    "1003": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "1004": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0002"
      ]
    },
    "1008": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "result%1#0"
      ]
    },
    "1009": {
      "op": "concat",
      "defined_out": [
        "da1#0"
      ],
      "stack_out": [
        "da1#0"
      ]
    },
    "1010": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "da1#0",
        "0x"
      ]
    },
    "1011": {
      "op": "bytec_1 // 0x0000007b",
      "stack_out": [
        "da1#0",
        "0x",
        "0x0000007b"
      ]
    },
    "1012": {
      "op": "concat",
      "defined_out": [
        "da1#0",
        "result%2#0"
      ],
      "stack_out": [
        "da1#0",
        "result%2#0"
      ]
    },
    "1013": {
      "op": "bytec_1 // 0x0000007b",
      "stack_out": [
        "da1#0",
        "result%2#0",
        "0x0000007b"
      ]
    },
    "1014": {
      "op": "concat",
      "defined_out": [
        "da1#0",
        "result%3#0"
      ],
      "stack_out": [
        "da1#0",
        "result%3#0"
      ]
    },
    "1015": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "da1#0",
        "result%3#0",
        "0x"
      ]
    },
    "1016": {
      "op": "swap",
      "stack_out": [
        "da1#0",
        "0x",
        "result%3#0"
      ]
    },
    "1017": {
      "op": "concat",
      "defined_out": [
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "da1#0",
        "sa1#0"
      ]
    },
    "1018": {
      "op": "swap",
      "stack_out": [
        "sa1#0",
        "da1#0"
      ]
    },
    "1019": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "0x0000"
      ]
    },
    "1020": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "0x0000",
        "0x"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "array_data%2#0",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "array_data%2#0"
      ]
    },
    "1022": {
      "op": "extract 2 0",
      "defined_out": [
        "da1#0",
        "expr_value_trimmed%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1025": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "1026": {
      "op": "bytec_1 // 0x0000007b",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000007b"
      ]
    },
    "1027": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "da1#0",
        "expr_value_trimmed%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "1028": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "1029": {
      "op": "swap",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "1030": {
      "op": "concat",
      "defined_out": [
        "array%data%0#1",
        "da1#0",
        "expr_value_trimmed%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "array%data%0#1"
      ]
    },
    "1031": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "0x"
      ]
    },
    "1032": {
      "op": "bytec_1 // 0x0000007b",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "0x",
        "0x0000007b"
      ]
    },
    "1033": {
      "op": "concat",
      "defined_out": [
        "array%data%0#1",
        "array%encoded%1#1",
        "da1#0",
        "expr_value_trimmed%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "array%data%0#1",
        "array%encoded%1#1"
      ]
    },
    "1034": {
      "op": "concat",
      "defined_out": [
        "da1#0",
        "encoded%0#0",
        "expr_value_trimmed%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "1035": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0"
      ]
    },
    "1036": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1037": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1038": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "byte_len%0#0",
        "concatenated%0#0",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "4"
      ]
    },
    "1039": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "da1#0",
        "len_%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1040": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1041": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "da1#0",
        "len_16_bit%0#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1044": {
      "op": "swap",
      "stack_out": [
        "sa1#0",
        "da1#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1045": {
      "op": "concat",
      "defined_out": [
        "a1#0",
        "da1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "a1#0"
      ]
    },
    "1046": {
      "op": "extract 2 0",
      "defined_out": [
        "da1#0",
        "expr_value_trimmed%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "da1#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1049": {
      "op": "swap",
      "stack_out": [
        "sa1#0",
        "expr_value_trimmed%1#0",
        "da1#0"
      ]
    },
    "1050": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%2#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concatenated%1#0"
      ]
    },
    "1054": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "1055": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "concatenated%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "1056": {
      "op": "intc_3 // 4",
      "stack_out": [
        "sa1#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "4"
      ]
    },
    "1057": {
      "op": "/",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "1058": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "1059": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "sa1#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "1063": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "concat_result%1#0"
      ]
    },
    "1064": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%3#0",
        "sa1#0"
      ],
      "stack_out": [
        "sa1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "1067": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%3#0",
        "sa1#0"
      ]
    },
    "1068": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0"
      ],
      "stack_out": [
        "concatenated%2#0"
      ]
    },
    "1069": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ],
      "stack_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "1070": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "1071": {
      "op": "intc_3 // 4",
      "stack_out": [
        "concatenated%2#0",
        "byte_len%2#0",
        "4"
      ]
    },
    "1072": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "len_%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "1073": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "1074": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "len_16_bit%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "1077": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "1078": {
      "op": "concat",
      "stack_out": [
        "a1#0"
      ]
    },
    "1079": {
      "op": "dup",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1080": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a1#0",
        "a1#0",
        "0"
      ]
    },
    "1081": {
      "op": "extract_uint16",
      "defined_out": [
        "a1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%0#0"
      ]
    },
    "1082": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "a1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%0#0",
        "6"
      ]
    },
    "1084": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%1#0"
      ]
    },
    "1085": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1088": {
      "block": "arc4Interop_and_contd@1",
      "stack_in": [
        "a1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1090": {
      "op": "extract 2 0",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1093": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "a1#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1094": {
      "op": "intc_3 // 4",
      "defined_out": [
        "0",
        "4",
        "a1#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%0#0",
        "0",
        "4"
      ]
    },
    "1095": {
      "op": "*",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1096": {
      "op": "intc_3 // 4",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "4"
      ]
    },
    "1097": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a1#0",
        "arc4_item%0#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%0#0"
      ]
    },
    "1098": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "a1#0",
        "arc4_item%0#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%0#0",
        "0x0000007b"
      ]
    },
    "1099": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%2#0"
      ]
    },
    "1100": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1103": {
      "block": "arc4Interop_and_contd@2",
      "stack_in": [
        "a1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1105": {
      "op": "extract 2 0",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1108": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "a1#0",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "1109": {
      "op": "intc_3 // 4",
      "defined_out": [
        "1",
        "4",
        "a1#0",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%1#0",
        "1",
        "4"
      ]
    },
    "1110": {
      "op": "*",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1111": {
      "op": "intc_3 // 4",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "4"
      ]
    },
    "1112": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a1#0",
        "arc4_item%1#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%1#0"
      ]
    },
    "1113": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "a1#0",
        "arc4_item%1#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%1#0",
        "0x0000007b"
      ]
    },
    "1114": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%3#0"
      ]
    },
    "1115": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1118": {
      "block": "arc4Interop_and_contd@3",
      "stack_in": [
        "a1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1120": {
      "op": "extract 2 0",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1123": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "a1#0",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%2#0",
        "2"
      ]
    },
    "1125": {
      "op": "intc_3 // 4",
      "defined_out": [
        "2",
        "4",
        "a1#0",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%2#0",
        "2",
        "4"
      ]
    },
    "1126": {
      "op": "*",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "1127": {
      "op": "intc_3 // 4",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "4"
      ]
    },
    "1128": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a1#0",
        "arc4_item%2#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%2#0"
      ]
    },
    "1129": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "a1#0",
        "arc4_item%2#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%2#0",
        "0x0000007b"
      ]
    },
    "1130": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%4#0"
      ]
    },
    "1131": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1134": {
      "block": "arc4Interop_and_contd@4",
      "stack_in": [
        "a1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1136": {
      "op": "extract 2 0",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%3#0"
      ]
    },
    "1139": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "a1#0",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%3#0",
        "3"
      ]
    },
    "1141": {
      "op": "intc_3 // 4",
      "defined_out": [
        "3",
        "4",
        "a1#0",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%3#0",
        "3",
        "4"
      ]
    },
    "1142": {
      "op": "*",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ]
    },
    "1143": {
      "op": "intc_3 // 4",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "4"
      ]
    },
    "1144": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a1#0",
        "arc4_item%3#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%3#0"
      ]
    },
    "1145": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "a1#0",
        "arc4_item%3#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%3#0",
        "0x0000007b"
      ]
    },
    "1146": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%5#0"
      ]
    },
    "1147": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1150": {
      "block": "arc4Interop_and_contd@5",
      "stack_in": [
        "a1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1152": {
      "op": "extract 2 0",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%4#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%4#0"
      ]
    },
    "1155": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "a1#0",
        "array_head_and_tail%4#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%4#0",
        "4"
      ]
    },
    "1156": {
      "op": "dup",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%4#0",
        "4",
        "4"
      ]
    },
    "1157": {
      "op": "*",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ]
    },
    "1158": {
      "op": "intc_3 // 4",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0",
        "4"
      ]
    },
    "1159": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a1#0",
        "arc4_item%4#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%4#0"
      ]
    },
    "1160": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "a1#0",
        "arc4_item%4#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%4#0",
        "0x0000007b"
      ]
    },
    "1161": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%6#0"
      ]
    },
    "1162": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1165": {
      "block": "arc4Interop_and_contd@6",
      "stack_in": [
        "a1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a1#0"
      ],
      "stack_out": [
        "a1#0",
        "a1#0"
      ]
    },
    "1167": {
      "op": "extract 2 0",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%5#0"
      ]
    },
    "1170": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "a1#0",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%5#0",
        "5"
      ]
    },
    "1172": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "5",
        "a1#0",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%5#0",
        "5",
        "4"
      ]
    },
    "1173": {
      "op": "*",
      "defined_out": [
        "a1#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0"
      ],
      "stack_out": [
        "a1#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0"
      ]
    },
    "1174": {
      "op": "intc_3 // 4",
      "stack_out": [
        "a1#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0",
        "4"
      ]
    },
    "1175": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a1#0",
        "arc4_item%5#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%5#0"
      ]
    },
    "1176": {
      "op": "bytec_1 // 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "a1#0",
        "arc4_item%5#0"
      ],
      "stack_out": [
        "a1#0",
        "arc4_item%5#0",
        "0x0000007b"
      ]
    },
    "1177": {
      "op": "==",
      "defined_out": [
        "a1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a1#0",
        "tmp%7#0"
      ]
    },
    "1178": {
      "op": "bz arc4Interop_bool_false@8",
      "stack_out": [
        "a1#0"
      ]
    },
    "1181": {
      "block": "arc4Interop_bool_true@7",
      "stack_in": [
        "a1#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "a1#0",
        "and_result%0#0"
      ]
    },
    "1182": {
      "block": "arc4Interop_bool_merge@9",
      "stack_in": [
        "a1#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "a1#0"
      ]
    },
    "1183": {
      "retsub": true,
      "op": "retsub"
    },
    "1184": {
      "block": "arc4Interop_bool_false@8",
      "stack_in": [
        "a1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "a1#0",
        "and_result%0#0"
      ]
    },
    "1185": {
      "op": "b arc4Interop_bool_merge@9"
    },
    "1188": {
      "subroutine": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs",
      "params": {
        "p.x#0": "uint64",
        "p.y#0": "uint64"
      },
      "block": "structs",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1191": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "1193": {
      "op": "dup",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "x#0"
      ]
    },
    "1194": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "x#0",
        "y#0"
      ]
    },
    "1196": {
      "op": "dup",
      "stack_out": [
        "x#0",
        "x#0",
        "y#0",
        "y#0 (copy)"
      ]
    },
    "1197": {
      "op": "cover 2",
      "stack_out": [
        "x#0",
        "y#0",
        "x#0",
        "y#0"
      ]
    },
    "1199": {
      "op": "cover 2",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0",
        "x#0"
      ]
    },
    "1201": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0",
        "x#0",
        "0x0000"
      ]
    },
    "1202": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x0000",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0",
        "x#0",
        "0x0000",
        "0x"
      ]
    },
    "1203": {
      "op": "concat",
      "defined_out": [
        "array_data%1#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0",
        "x#0",
        "array_data%1#0"
      ]
    },
    "1204": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "y#0",
        "x#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1207": {
      "op": "cover 2",
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "y#0",
        "x#0"
      ]
    },
    "1209": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "y#0",
        "array%sub_item%0#1"
      ]
    },
    "1210": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "y#0",
        "array%sub_item%0#1",
        "0x"
      ]
    },
    "1211": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "y#0",
        "0x",
        "array%sub_item%0#1"
      ]
    },
    "1212": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "y#0",
        "array%encoded%0#1"
      ]
    },
    "1213": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "y#0"
      ]
    },
    "1214": {
      "op": "itob",
      "defined_out": [
        "array%encoded%0#1",
        "array%sub_item%1#1",
        "expr_value_trimmed%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1215": {
      "op": "concat",
      "defined_out": [
        "array%encoded%1#1",
        "expr_value_trimmed%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "array%encoded%1#1"
      ]
    },
    "1216": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "array%encoded%1#1",
        "0x"
      ]
    },
    "1217": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%1#1"
      ]
    },
    "1218": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "1219": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0"
      ]
    },
    "1220": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1221": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1222": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "byte_len%0#0",
        "concatenated%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "16"
      ]
    },
    "1224": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1225": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1226": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1229": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1230": {
      "op": "concat",
      "defined_out": [
        "myVectors#1",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1"
      ]
    },
    "1231": {
      "op": "dup",
      "defined_out": [
        "myVectors#1",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "myVectors#1"
      ]
    },
    "1232": {
      "op": "intc_1 // 0",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "myVectors#1",
        "0"
      ]
    },
    "1233": {
      "op": "extract_uint16",
      "defined_out": [
        "myVectors#1",
        "tmp%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "tmp%0#0"
      ]
    },
    "1234": {
      "op": "intc_2 // 1",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "tmp%0#0",
        "1"
      ]
    },
    "1235": {
      "op": "==",
      "defined_out": [
        "myVectors#1",
        "tmp%1#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "tmp%1#0"
      ]
    },
    "1236": {
      "op": "bz structs_bool_false@4",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1"
      ]
    },
    "1239": {
      "block": "structs_and_contd@1",
      "stack_in": [
        "x#0",
        "y#0",
        "myVectors#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "myVectors#1"
      ]
    },
    "1241": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%0#0"
      ]
    },
    "1244": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1245": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "0",
        "16",
        "array_head_and_tail%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%0#0",
        "0",
        "16"
      ]
    },
    "1247": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1248": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "16"
      ]
    },
    "1250": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "arc4_item%0#0"
      ]
    },
    "1251": {
      "op": "intc_1 // 0",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "arc4_item%0#0",
        "0"
      ]
    },
    "1252": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "8",
        "arc4_item%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "arc4_item%0#0",
        "0",
        "8"
      ]
    },
    "1253": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "item0%0#0"
      ]
    },
    "1254": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "item0%0%0#0"
      ]
    },
    "1255": {
      "op": "frame_dig 0",
      "defined_out": [
        "item0%0%0#0",
        "myVectors#1",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "item0%0%0#0",
        "x#0"
      ]
    },
    "1257": {
      "op": "==",
      "defined_out": [
        "myVectors#1",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "tmp%2#0"
      ]
    },
    "1258": {
      "op": "bz structs_bool_false@4",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1"
      ]
    },
    "1261": {
      "block": "structs_and_contd@2",
      "stack_in": [
        "x#0",
        "y#0",
        "myVectors#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "myVectors#1"
      ]
    },
    "1263": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%1#0"
      ]
    },
    "1266": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%1#0",
        "0"
      ]
    },
    "1267": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "0",
        "16",
        "array_head_and_tail%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%1#0",
        "0",
        "16"
      ]
    },
    "1269": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1270": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "16"
      ]
    },
    "1272": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "arc4_item%1#0"
      ]
    },
    "1273": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "arc4_item%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "arc4_item%1#0",
        "8"
      ]
    },
    "1274": {
      "op": "dup",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "arc4_item%1#0",
        "8",
        "8"
      ]
    },
    "1275": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item1%1#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "item1%1#0"
      ]
    },
    "1276": {
      "op": "btoi",
      "defined_out": [
        "item1%1%0#0",
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "item1%1%0#0"
      ]
    },
    "1277": {
      "op": "frame_dig 1",
      "defined_out": [
        "item1%1%0#0",
        "myVectors#1",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "item1%1%0#0",
        "y#0"
      ]
    },
    "1279": {
      "op": "==",
      "defined_out": [
        "myVectors#1",
        "tmp%3#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "tmp%3#0"
      ]
    },
    "1280": {
      "op": "bz structs_bool_false@4",
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1"
      ]
    },
    "1283": {
      "block": "structs_bool_true@3",
      "stack_in": [
        "x#0",
        "y#0",
        "myVectors#1"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "and_result%0#0"
      ]
    },
    "1284": {
      "block": "structs_bool_merge@5",
      "stack_in": [
        "x#0",
        "y#0",
        "myVectors#1",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1"
      ]
    },
    "1285": {
      "op": "frame_dig 2",
      "defined_out": [
        "myVectors#1"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "myVectors#1"
      ]
    },
    "1287": {
      "op": "frame_bury 0"
    },
    "1289": {
      "retsub": true,
      "op": "retsub"
    },
    "1290": {
      "block": "structs_bool_false@4",
      "stack_in": [
        "x#0",
        "y#0",
        "myVectors#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "myVectors#1",
        "and_result%0#0"
      ]
    },
    "1291": {
      "op": "b structs_bool_merge@5"
    },
    "1294": {
      "subroutine": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}