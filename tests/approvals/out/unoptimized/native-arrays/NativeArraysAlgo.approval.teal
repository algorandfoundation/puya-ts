#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 8 0 1 4
    bytecblock 0x 0x0000007b 0x151f7c75 0x00 0x068101

main_block@0:

main_block@1:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn NumAppArgs
    intc_1 // 0
    !=
    bz main_bare_routing@21

main_abi_routing@2:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x7d318589 // method "readonlyArray()void"
    pushbytes 0xb0ac9066 // method "arrayInObject()void"
    pushbytes 0x0f4c11ca // method "buildArray()uint64[]"
    pushbytes 0xaaa29f70 // method "arrayFromCtor()uint64[]"
    pushbytes 0xe2d5e035 // method "buildReadonly()uint64[]"
    pushbytes 0x13a588c8 // method "doThings()void"
    pushbytes 0xd6ecc1e6 // method "fixedArray(uint64[50])void"
    pushbytes 0x787b50b2 // method "arc4Interop()void"
    pushbytes 0xeb87a064 // method "structs((uint64,uint64))(uint64,uint64)[]"
    pushbytes 0xbc61d6b8 // method "booleans()bool[]"
    pushbytes 0x8f544473 // method "booleansStatic()(bool,bool,bool)"
    pushbytes 0x43e7ee45 // method "arc4Booleans()bool[]"
    pushbytes 0xcbe3a4f8 // method "arc4BooleansStatic()(bool,bool,bool)"
    pushbytes 0x143f223b // method "aliasing(uint64[],uint64[])void"
    pushbytes 0xd9895442 // method "receiveMutable(uint64[])void"
    pushbytes 0xe213f5b6 // method "receiveReadonly(uint64[])void"
    uncover 16
    match main_readonlyArray_route@3 main_arrayInObject_route@4 main_buildArray_route@5 main_arrayFromCtor_route@6 main_buildReadonly_route@7 main_doThings_route@8 main_fixedArray_route@9 main_arc4Interop_route@10 main_structs_route@11 main_booleans_route@12 main_booleansStatic_route@13 main_arc4Booleans_route@14 main_arc4BooleansStatic_route@15 main_aliasing_route@16 main_receiveMutable_route@17 main_receiveReadonly_route@18

main_switch_case_default@19:

main_switch_case_next@20:

main_after_if_else@25:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    intc_1 // 0

main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26:
    return

main_receiveReadonly_route@18:
    // tests/approvals/native-arrays.algo.ts:219
    // receiveReadonly(a: readonly uint64[]) {}
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:219
    // receiveReadonly(a: readonly uint64[]) {}
    callsub receiveReadonly
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_receiveMutable_route@17:
    // tests/approvals/native-arrays.algo.ts:215
    // receiveMutable(a: uint64[]) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:215
    // receiveMutable(a: uint64[]) {
    callsub receiveMutable
    pop
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_aliasing_route@16:
    // tests/approvals/native-arrays.algo.ts:189
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/native-arrays.algo.ts:189
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    callsub aliasing
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_arc4BooleansStatic_route@15:
    // tests/approvals/native-arrays.algo.ts:185
    // arc4BooleansStatic() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub arc4BooleansStatic
    cover 2
    intc_1 // 0
    getbit
    swap
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_1 // 0
    getbit
    swap
    pushint 2 // 2
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_arc4Booleans_route@14:
    // tests/approvals/native-arrays.algo.ts:181
    // arc4Booleans() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub arc4Booleans
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_booleansStatic_route@13:
    // tests/approvals/native-arrays.algo.ts:177
    // booleansStatic() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub booleansStatic
    cover 2
    swap
    bytec_3 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_2 // 1
    uncover 2
    setbit
    pushint 2 // 2
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_booleans_route@12:
    // tests/approvals/native-arrays.algo.ts:173
    // booleans() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub booleans
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_structs_route@11:
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    callsub structs
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_arc4Interop_route@10:
    // tests/approvals/native-arrays.algo.ts:151
    // arc4Interop() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub arc4Interop
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_fixedArray_route@9:
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    callsub fixedArray
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_doThings_route@8:
    // tests/approvals/native-arrays.algo.ts:42
    // doThings() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub doThings
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_buildReadonly_route@7:
    // tests/approvals/native-arrays.algo.ts:38
    // buildReadonly(): ReadonlyArray<uint64> {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub buildReadonly
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_arrayFromCtor_route@6:
    // tests/approvals/native-arrays.algo.ts:34
    // arrayFromCtor(): Array<uint64> {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub arrayFromCtor
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_buildArray_route@5:
    // tests/approvals/native-arrays.algo.ts:30
    // buildArray(): Array<uint64> {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub buildArray
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_arrayInObject_route@4:
    // tests/approvals/native-arrays.algo.ts:20
    // arrayInObject() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub arrayInObject
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_readonlyArray_route@3:
    // tests/approvals/native-arrays.algo.ts:7
    // readonlyArray() {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub readonlyArray
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26

main_bare_routing@21:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn OnCompletion
    intc_1 // 0
    swap
    match main___algots__.defaultCreate@22

main_switch_case_default@23:

main_switch_case_next@24:
    b main_after_if_else@25

main___algots__.defaultCreate@22:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn ApplicationID
    intc_1 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@26


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@7

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 4 // 0x068101
    itxn_field ApprovalProgram
    bytec 4 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    intc_2 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_default@5:

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_1 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2

dynamic_array_pop_fixed_size_block@0:
    frame_dig -2
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    swap
    intc_1 // 0
    uncover 2
    substring3
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.readonlyArray() -> void:
readonlyArray:
    // tests/approvals/native-arrays.algo.ts:7
    // readonlyArray() {
    proto 0 0

readonlyArray_block@0:
    // tests/approvals/native-arrays.algo.ts:8
    // let myArray: readonly uint64[] = [1, 2, 3]
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // tests/approvals/native-arrays.algo.ts:10
    // myArray = myArray.concat(Uint64(5))
    pushint 5 // 5
    itob
    bytec_0 // 0x
    swap
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:12
    // myArray = [...myArray, Uint64(4)]
    intc_2 // 1
    itob
    extract 6 2
    intc_3 // 4
    itob
    concat
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:15
    // myArray = myArray.with(2, 3)
    pushint 3 // 3
    itob
    pushint 2 // 2
    intc_0 // 8
    *
    pushint 2 // 2
    +
    uncover 2
    swap
    uncover 2
    replace3
    dup
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    intc_1 // 0
    extract_uint16
    pushint 5 // 5
    ==
    bz readonlyArray_bool_false@7

readonlyArray_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    frame_dig 0
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz readonlyArray_bool_false@7

readonlyArray_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz readonlyArray_bool_false@7

readonlyArray_and_contd@3:
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz readonlyArray_bool_false@7

readonlyArray_and_contd@4:
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz readonlyArray_bool_false@7

readonlyArray_and_contd@5:
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    frame_dig 0
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz readonlyArray_bool_false@7

readonlyArray_bool_true@6:
    intc_2 // 1

readonlyArray_bool_merge@8:
    // tests/approvals/native-arrays.algo.ts:17
    // assertMatch(myArray, [1, 2, 3, 5, 4])
    assert // assert target is match for conditions
    retsub

readonlyArray_bool_false@7:
    intc_1 // 0
    b readonlyArray_bool_merge@8


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayInObject() -> void:
arrayInObject:

arrayInObject_block@0:
    // tests/approvals/native-arrays.algo.ts:22-25
    // const person: Person = {
    //   name: 'Alice',
    //   favouriteNumbers: [1337],
    // }
    intc_2 // 1
    itob
    extract 6 2
    // tests/approvals/native-arrays.algo.ts:24
    // favouriteNumbers: [1337],
    pushint 1337 // 1337
    // tests/approvals/native-arrays.algo.ts:22-25
    // const person: Person = {
    //   name: 'Alice',
    //   favouriteNumbers: [1337],
    // }
    itob
    concat
    // tests/approvals/native-arrays.algo.ts:26
    // const length: uint64 = person.favouriteNumbers.push(42)
    pushint 42 // 42
    itob
    bytec_0 // 0x
    swap
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    intc_1 // 0
    extract_uint16
    // tests/approvals/native-arrays.algo.ts:27
    // assert(length === 2)
    pushint 2 // 2
    ==
    assert
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> bytes:
buildArray:

buildArray_block@0:
    // tests/approvals/native-arrays.algo.ts:31
    // return [1, 2, 3, 4]
    intc_3 // 4
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    intc_3 // 4
    itob
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor() -> bytes:
arrayFromCtor:

arrayFromCtor_block@0:
    // tests/approvals/native-arrays.algo.ts:35
    // return new Array<uint64>(1, 2, 3)
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly() -> bytes:
buildReadonly:

buildReadonly_block@0:
    // tests/approvals/native-arrays.algo.ts:39
    // return [1, 2, 3, 4]
    intc_3 // 4
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    intc_3 // 4
    itob
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
doThings:
    // tests/approvals/native-arrays.algo.ts:42
    // doThings() {
    proto 0 0
    intc_1 // 0
    dupn 9

doThings_block@0:
    // tests/approvals/native-arrays.algo.ts:43
    // ensureBudget(1400)
    pushint 1400 // 1400
    intc_1 // 0
    callsub ensure_budget
    // tests/approvals/native-arrays.algo.ts:44
    // let arr = this.buildArray()
    callsub buildArray
    // tests/approvals/native-arrays.algo.ts:46
    // arr.push(5)
    pushint 5 // 5
    itob
    bytec_0 // 0x
    swap
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:47
    // assert(arr.pop()! === 5)
    intc_0 // 8
    callsub dynamic_array_pop_fixed_size
    swap
    btoi
    swap
    dup
    cover 2
    cover 2
    pushint 5 // 5
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@6

doThings_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@6

doThings_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@6

doThings_and_contd@3:
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@6

doThings_and_contd@4:
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@6

doThings_bool_true@5:
    intc_2 // 1

doThings_bool_merge@7:
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:51
    // assert(arr[0] === 1)
    frame_dig 10
    dup
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:52
    // assert(arr.at(-1)! === 4)
    dup
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:55
    // arr.push(Uint64(5))
    pushint 5 // 5
    itob
    bytec_0 // 0x
    swap
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 10
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    intc_1 // 0
    extract_uint16
    pushint 5 // 5
    ==
    bz doThings_bool_false@14

doThings_and_contd@8:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 10
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@14

doThings_and_contd@9:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 10
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@14

doThings_and_contd@10:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 10
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@14

doThings_and_contd@11:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 10
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@14

doThings_and_contd@12:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 10
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@14

doThings_bool_true@13:
    intc_2 // 1

doThings_bool_merge@15:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:60
    // const top = arr.pop()!
    frame_dig 10
    intc_0 // 8
    callsub dynamic_array_pop_fixed_size
    swap
    btoi
    swap
    dup
    cover 2
    frame_bury 10
    // tests/approvals/native-arrays.algo.ts:61
    // assert(top === 5)
    pushint 5 // 5
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@21

doThings_and_contd@16:
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@21

doThings_and_contd@17:
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@21

doThings_and_contd@18:
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@21

doThings_and_contd@19:
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 10
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@21

doThings_bool_true@20:
    intc_2 // 1

doThings_bool_merge@22:
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:66
    // arr[1] = 10
    pushint 10 // 10
    itob
    intc_2 // 1
    intc_0 // 8
    *
    pushint 2 // 2
    +
    frame_dig 10
    swap
    uncover 2
    replace3
    dup
    frame_bury 10
    // tests/approvals/native-arrays.algo.ts:68
    // const arr2 = arr.with(1, 5)
    pushint 5 // 5
    itob
    intc_2 // 1
    intc_0 // 8
    *
    pushint 2 // 2
    +
    dig 2
    swap
    uncover 2
    replace3
    frame_bury 0
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@28

doThings_and_contd@23:
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 10
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@28

doThings_and_contd@24:
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 10
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@28

doThings_and_contd@25:
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 10
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@28

doThings_and_contd@26:
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 10
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@28

doThings_bool_true@27:
    intc_2 // 1

doThings_bool_merge@29:
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    frame_dig 0
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@35

doThings_and_contd@30:
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    frame_dig 0
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@35

doThings_and_contd@31:
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@35

doThings_and_contd@32:
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@35

doThings_and_contd@33:
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@35

doThings_bool_true@34:
    intc_2 // 1

doThings_bool_merge@36:
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:74
    // const t1: [uint64, uint64] = [12, 13]
    pushint 12 // 12
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 13 // 13
    itob
    concat
    // tests/approvals/native-arrays.algo.ts:75
    // arr = arr.concat(arr).concat(11).concat(t1)
    frame_dig 10
    dup
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    pushint 11 // 11
    itob
    bytec_0 // 0x
    swap
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 10
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_1 // 0
    extract_uint16
    pushint 11 // 11
    ==
    bz doThings_bool_false@49

doThings_and_contd@37:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@49

doThings_and_contd@38:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@49

doThings_and_contd@39:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@49

doThings_and_contd@40:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@49

doThings_and_contd@41:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@49

doThings_and_contd@42:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@49

doThings_and_contd@43:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@49

doThings_and_contd@44:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@49

doThings_and_contd@45:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 11 // 11
    ==
    bz doThings_bool_false@49

doThings_and_contd@46:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 9 // 9
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 12 // 12
    ==
    bz doThings_bool_false@49

doThings_and_contd@47:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 10
    extract 2 0
    pushint 10 // 10
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 13 // 13
    ==
    bz doThings_bool_false@49

doThings_bool_true@48:
    intc_2 // 1

doThings_bool_merge@50:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:78
    // let rArr1: readonly uint64[] = [1, 2, 3]
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // tests/approvals/native-arrays.algo.ts:79
    // rArr1 = rArr1.concat(Uint64(4))
    intc_3 // 4
    itob
    bytec_0 // 0x
    swap
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:80
    // rArr1 = [...rArr1, Uint64(5)]
    intc_2 // 1
    itob
    extract 6 2
    pushint 5 // 5
    itob
    concat
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 9
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    intc_1 // 0
    extract_uint16
    pushint 5 // 5
    ==
    bz doThings_bool_false@57

doThings_and_contd@51:
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    frame_dig 9
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@57

doThings_and_contd@52:
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    frame_dig 9
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@57

doThings_and_contd@53:
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    frame_dig 9
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@57

doThings_and_contd@54:
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    frame_dig 9
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@57

doThings_and_contd@55:
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    frame_dig 9
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@57

doThings_bool_true@56:
    intc_2 // 1

doThings_bool_merge@58:
    // tests/approvals/native-arrays.algo.ts:81
    // assertMatch(rArr1, [1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:83
    // const fArr1 = new FixedArray<uint64, 4>()
    pushint 32 // 32
    bzero
    dup
    frame_bury 7
    // tests/approvals/native-arrays.algo.ts:84
    // const fArr2 = fArr1.concat(fArr1)
    intc_3 // 4
    itob
    extract 6 2
    dig 1
    concat
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    frame_bury 8
    // tests/approvals/native-arrays.algo.ts:85
    // assertMatch(fArr1, [0, 0, 0, 0])
    intc_3 // 4
    dup
    ==
    bz doThings_bool_false@64

doThings_and_contd@59:
    // tests/approvals/native-arrays.algo.ts:85
    // assertMatch(fArr1, [0, 0, 0, 0])
    intc_1 // 0
    intc_0 // 8
    *
    frame_dig 7
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@64

doThings_and_contd@60:
    // tests/approvals/native-arrays.algo.ts:85
    // assertMatch(fArr1, [0, 0, 0, 0])
    intc_2 // 1
    intc_0 // 8
    *
    frame_dig 7
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@64

doThings_and_contd@61:
    // tests/approvals/native-arrays.algo.ts:85
    // assertMatch(fArr1, [0, 0, 0, 0])
    pushint 2 // 2
    intc_0 // 8
    *
    frame_dig 7
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@64

doThings_and_contd@62:
    // tests/approvals/native-arrays.algo.ts:85
    // assertMatch(fArr1, [0, 0, 0, 0])
    pushint 3 // 3
    intc_0 // 8
    *
    frame_dig 7
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@64

doThings_bool_true@63:
    intc_2 // 1

doThings_bool_merge@65:
    // tests/approvals/native-arrays.algo.ts:85
    // assertMatch(fArr1, [0, 0, 0, 0])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    intc_1 // 0
    extract_uint16
    intc_0 // 8
    ==
    bz doThings_bool_false@75

doThings_and_contd@66:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@67:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@68:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@69:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@70:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@71:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@72:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_and_contd@73:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 8
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@75

doThings_bool_true@74:
    intc_2 // 1

doThings_bool_merge@76:
    // tests/approvals/native-arrays.algo.ts:86
    // assertMatch(fArr2, [0, 0, 0, 0, 0, 0, 0, 0])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:88
    // const arr3 = rArr1.concat(fArr2)
    frame_dig 8
    extract 2 0
    frame_dig 9
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 1
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    intc_1 // 0
    extract_uint16
    pushint 13 // 13
    ==
    bz doThings_bool_false@91

doThings_and_contd@77:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@91

doThings_and_contd@78:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@91

doThings_and_contd@79:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@91

doThings_and_contd@80:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@91

doThings_and_contd@81:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@91

doThings_and_contd@82:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@83:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@84:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@85:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@86:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 9 // 9
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@87:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 10 // 10
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@88:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 11 // 11
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_and_contd@89:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    frame_dig 1
    extract 2 0
    pushint 12 // 12
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@91

doThings_bool_true@90:
    intc_2 // 1

doThings_bool_merge@92:
    // tests/approvals/native-arrays.algo.ts:89
    // assertMatch(arr3, [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:91
    // const arr4 = rArr1.concat(arr)
    frame_dig 10
    extract 2 0
    frame_dig 9
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 2
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    bz doThings_bool_false@110

doThings_and_contd@93:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@110

doThings_and_contd@94:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@110

doThings_and_contd@95:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@110

doThings_and_contd@96:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@110

doThings_and_contd@97:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@110

doThings_and_contd@98:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@110

doThings_and_contd@99:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@110

doThings_and_contd@100:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@110

doThings_and_contd@101:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@110

doThings_and_contd@102:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 9 // 9
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@110

doThings_and_contd@103:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 10 // 10
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@110

doThings_and_contd@104:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 11 // 11
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@110

doThings_and_contd@105:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 12 // 12
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@110

doThings_and_contd@106:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 13 // 13
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 11 // 11
    ==
    bz doThings_bool_false@110

doThings_and_contd@107:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 14 // 14
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 12 // 12
    ==
    bz doThings_bool_false@110

doThings_and_contd@108:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 2
    extract 2 0
    pushint 15 // 15
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 13 // 13
    ==
    bz doThings_bool_false@110

doThings_bool_true@109:
    intc_2 // 1

doThings_bool_merge@111:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:94
    // const arr5 = fArr1.concat(rArr1)
    intc_3 // 4
    itob
    extract 6 2
    frame_dig 7
    concat
    frame_dig 9
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 3
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    intc_1 // 0
    extract_uint16
    pushint 9 // 9
    ==
    bz doThings_bool_false@122

doThings_and_contd@112:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@122

doThings_and_contd@113:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@122

doThings_and_contd@114:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@122

doThings_and_contd@115:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@122

doThings_and_contd@116:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@122

doThings_and_contd@117:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@122

doThings_and_contd@118:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@122

doThings_and_contd@119:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@122

doThings_and_contd@120:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    frame_dig 3
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@122

doThings_bool_true@121:
    intc_2 // 1

doThings_bool_merge@123:
    // tests/approvals/native-arrays.algo.ts:95
    // assertMatch(arr5, [0, 0, 0, 0, 1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:97
    // const arr6 = fArr1.concat(arr)
    intc_3 // 4
    itob
    extract 6 2
    frame_dig 7
    concat
    frame_dig 10
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 4
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    bz doThings_bool_false@140

doThings_and_contd@124:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@140

doThings_and_contd@125:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@140

doThings_and_contd@126:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@140

doThings_and_contd@127:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@140

doThings_and_contd@128:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@140

doThings_and_contd@129:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@140

doThings_and_contd@130:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@140

doThings_and_contd@131:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@140

doThings_and_contd@132:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@140

doThings_and_contd@133:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 9 // 9
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@140

doThings_and_contd@134:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 10 // 10
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@140

doThings_and_contd@135:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 11 // 11
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@140

doThings_and_contd@136:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 12 // 12
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 11 // 11
    ==
    bz doThings_bool_false@140

doThings_and_contd@137:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 13 // 13
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 12 // 12
    ==
    bz doThings_bool_false@140

doThings_and_contd@138:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 4
    extract 2 0
    pushint 14 // 14
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 13 // 13
    ==
    bz doThings_bool_false@140

doThings_bool_true@139:
    intc_2 // 1

doThings_bool_merge@141:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:100
    // const arr7 = arr.concat(rArr1)
    frame_dig 9
    extract 2 0
    frame_dig 10
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 5
    // tests/approvals/native-arrays.algo.ts:101
    // assert(arr7.length === 16)
    dup
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    bz doThings_bool_false@159

doThings_and_contd@142:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@159

doThings_and_contd@143:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@159

doThings_and_contd@144:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@159

doThings_and_contd@145:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@159

doThings_and_contd@146:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@159

doThings_and_contd@147:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@159

doThings_and_contd@148:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@159

doThings_and_contd@149:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@159

doThings_and_contd@150:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 11 // 11
    ==
    bz doThings_bool_false@159

doThings_and_contd@151:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 9 // 9
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 12 // 12
    ==
    bz doThings_bool_false@159

doThings_and_contd@152:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 10 // 10
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 13 // 13
    ==
    bz doThings_bool_false@159

doThings_and_contd@153:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 11 // 11
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@159

doThings_and_contd@154:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 12 // 12
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@159

doThings_and_contd@155:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 13 // 13
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@159

doThings_and_contd@156:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 14 // 14
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@159

doThings_and_contd@157:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    frame_dig 5
    extract 2 0
    pushint 15 // 15
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@159

doThings_bool_true@158:
    intc_2 // 1

doThings_bool_merge@160:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:104
    // const arr8 = arr.concat(fArr1)
    frame_dig 10
    frame_dig 7
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    frame_bury 6
    // tests/approvals/native-arrays.algo.ts:105
    // assert(arr8.length === 15)
    dup
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    bz doThings_bool_false@177

doThings_and_contd@161:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@177

doThings_and_contd@162:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@177

doThings_and_contd@163:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 2 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@177

doThings_and_contd@164:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 3 // 3
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@177

doThings_and_contd@165:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    intc_3 // 4
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@177

doThings_and_contd@166:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 5 // 5
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@177

doThings_and_contd@167:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 6 // 6
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@177

doThings_and_contd@168:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 7 // 7
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@177

doThings_and_contd@169:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    intc_0 // 8
    dup
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 11 // 11
    ==
    bz doThings_bool_false@177

doThings_and_contd@170:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 9 // 9
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 12 // 12
    ==
    bz doThings_bool_false@177

doThings_and_contd@171:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 10 // 10
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 13 // 13
    ==
    bz doThings_bool_false@177

doThings_and_contd@172:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 11 // 11
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@177

doThings_and_contd@173:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 12 // 12
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@177

doThings_and_contd@174:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 13 // 13
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@177

doThings_and_contd@175:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    frame_dig 6
    extract 2 0
    pushint 14 // 14
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz doThings_bool_false@177

doThings_bool_true@176:
    intc_2 // 1

doThings_bool_merge@178:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    assert // assert target is match for conditions
    retsub

doThings_bool_false@177:
    intc_1 // 0
    b doThings_bool_merge@178

doThings_bool_false@159:
    intc_1 // 0
    b doThings_bool_merge@160

doThings_bool_false@140:
    intc_1 // 0
    b doThings_bool_merge@141

doThings_bool_false@122:
    intc_1 // 0
    b doThings_bool_merge@123

doThings_bool_false@110:
    intc_1 // 0
    b doThings_bool_merge@111

doThings_bool_false@91:
    intc_1 // 0
    b doThings_bool_merge@92

doThings_bool_false@75:
    intc_1 // 0
    b doThings_bool_merge@76

doThings_bool_false@64:
    intc_1 // 0
    b doThings_bool_merge@65

doThings_bool_false@57:
    intc_1 // 0
    b doThings_bool_merge@58

doThings_bool_false@49:
    intc_1 // 0
    b doThings_bool_merge@50

doThings_bool_false@35:
    intc_1 // 0
    b doThings_bool_merge@36

doThings_bool_false@28:
    intc_1 // 0
    b doThings_bool_merge@29

doThings_bool_false@21:
    intc_1 // 0
    b doThings_bool_merge@22

doThings_bool_false@14:
    intc_1 // 0
    b doThings_bool_merge@15

doThings_bool_false@6:
    intc_1 // 0
    b doThings_bool_merge@7


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: bytes) -> void:
fixedArray:
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    proto 1 0
    intc_1 // 0
    dupn 2

fixedArray_block@0:
    // tests/approvals/native-arrays.algo.ts:110
    // const x = new FixedArray<uint64, 4>(1, 2, 3, 4)
    intc_2 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    intc_3 // 4
    itob
    concat
    // tests/approvals/native-arrays.algo.ts:111
    // x[0] = 0
    intc_1 // 0
    itob
    intc_1 // 0
    intc_0 // 8
    *
    uncover 2
    swap
    uncover 2
    replace3
    dup
    // tests/approvals/native-arrays.algo.ts:113
    // assert(x[0] === y[0])
    intc_1 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    intc_0 // 8
    *
    frame_dig -1
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:114
    // assertMatch(x, [{ lessThan: 1 }, 2, 3, 4])
    intc_3 // 4
    dup
    ==
    bz fixedArray_bool_false@6

fixedArray_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:114
    // assertMatch(x, [{ lessThan: 1 }, 2, 3, 4])
    intc_1 // 0
    intc_0 // 8
    *
    frame_dig 3
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    <
    bz fixedArray_bool_false@6

fixedArray_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:114
    // assertMatch(x, [{ lessThan: 1 }, 2, 3, 4])
    intc_2 // 1
    intc_0 // 8
    *
    frame_dig 3
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz fixedArray_bool_false@6

fixedArray_and_contd@3:
    // tests/approvals/native-arrays.algo.ts:114
    // assertMatch(x, [{ lessThan: 1 }, 2, 3, 4])
    pushint 2 // 2
    intc_0 // 8
    *
    frame_dig 3
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz fixedArray_bool_false@6

fixedArray_and_contd@4:
    // tests/approvals/native-arrays.algo.ts:114
    // assertMatch(x, [{ lessThan: 1 }, 2, 3, 4])
    pushint 3 // 3
    intc_0 // 8
    *
    frame_dig 3
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz fixedArray_bool_false@6

fixedArray_bool_true@5:
    intc_2 // 1

fixedArray_bool_merge@7:
    // tests/approvals/native-arrays.algo.ts:114
    // assertMatch(x, [{ lessThan: 1 }, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:115
    // assertMatch(y, { 49: { greaterThanEq: 0 } })
    pushint 49 // 49
    intc_0 // 8
    *
    frame_dig -1
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    >=
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:117
    // const myVectors: FixedArray<Vector, 2> = new FixedArray<Vector, 2>({ x: 1, y: 2 }, { x: 3, y: 4 })
    intc_2 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    bytec_0 // 0x
    swap
    concat
    intc_3 // 4
    itob
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    frame_bury 1
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    pushint 2 // 2
    dup
    ==
    bz fixedArray_bool_false@13

fixedArray_and_contd@8:
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    intc_1 // 0
    pushint 16 // 16
    *
    frame_dig 1
    swap
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    // tests/approvals/native-arrays.algo.ts:119
    // { x: 1, y: 2 },
    intc_2 // 1
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    ==
    bz fixedArray_bool_false@13

fixedArray_and_contd@9:
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    intc_1 // 0
    pushint 16 // 16
    *
    frame_dig 1
    swap
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_0 // 8
    dup
    extract3
    btoi
    // tests/approvals/native-arrays.algo.ts:119
    // { x: 1, y: 2 },
    pushint 2 // 2
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    ==
    bz fixedArray_bool_false@13

fixedArray_and_contd@10:
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    intc_2 // 1
    pushint 16 // 16
    *
    frame_dig 1
    swap
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    // tests/approvals/native-arrays.algo.ts:120
    // { x: 3, y: 4 },
    pushint 3 // 3
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    ==
    bz fixedArray_bool_false@13

fixedArray_and_contd@11:
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    intc_2 // 1
    pushint 16 // 16
    *
    frame_dig 1
    swap
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_0 // 8
    dup
    extract3
    btoi
    // tests/approvals/native-arrays.algo.ts:120
    // { x: 3, y: 4 },
    intc_3 // 4
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    ==
    bz fixedArray_bool_false@13

fixedArray_bool_true@12:
    intc_2 // 1

fixedArray_bool_merge@14:
    // tests/approvals/native-arrays.algo.ts:118-121
    // assertMatch(myVectors, [
    //   { x: 1, y: 2 },
    //   { x: 3, y: 4 },
    // ])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:123
    // const myObject: { a: FixedArray<Vector, 1> } = { a: new FixedArray<Vector, 1>({ x: 5, y: 6 }) }
    pushint 5 // 5
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 6 // 6
    itob
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    frame_bury 0
    // tests/approvals/native-arrays.algo.ts:124
    // assertMatch(myObject.a, [{ x: 5, y: 6 }])
    intc_2 // 1
    dup
    ==
    bz fixedArray_bool_false@18

fixedArray_and_contd@15:
    // tests/approvals/native-arrays.algo.ts:124
    // assertMatch(myObject.a, [{ x: 5, y: 6 }])
    frame_dig 0
    intc_1 // 0
    pushint 16 // 16
    extract3
    intc_1 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    pushint 5 // 5
    ==
    bz fixedArray_bool_false@18

fixedArray_and_contd@16:
    // tests/approvals/native-arrays.algo.ts:124
    // assertMatch(myObject.a, [{ x: 5, y: 6 }])
    frame_dig 0
    intc_1 // 0
    pushint 16 // 16
    extract3
    intc_1 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_0 // 8
    dup
    extract3
    btoi
    pushint 6 // 6
    ==
    bz fixedArray_bool_false@18

fixedArray_bool_true@17:
    intc_2 // 1

fixedArray_bool_merge@19:
    // tests/approvals/native-arrays.algo.ts:124
    // assertMatch(myObject.a, [{ x: 5, y: 6 }])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:126
    // const z1 = new FixedArray<uint64, 4>()
    pushint 32 // 32
    bzero
    frame_bury 2
    // tests/approvals/native-arrays.algo.ts:127
    // assert(z1.length === 4)
    intc_3 // 4
    dup
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:128
    // assertMatch(z1, [0, 0, 0, 0])
    intc_3 // 4
    dup
    ==
    bz fixedArray_bool_false@25

fixedArray_and_contd@20:
    // tests/approvals/native-arrays.algo.ts:128
    // assertMatch(z1, [0, 0, 0, 0])
    intc_1 // 0
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz fixedArray_bool_false@25

fixedArray_and_contd@21:
    // tests/approvals/native-arrays.algo.ts:128
    // assertMatch(z1, [0, 0, 0, 0])
    intc_2 // 1
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz fixedArray_bool_false@25

fixedArray_and_contd@22:
    // tests/approvals/native-arrays.algo.ts:128
    // assertMatch(z1, [0, 0, 0, 0])
    pushint 2 // 2
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz fixedArray_bool_false@25

fixedArray_and_contd@23:
    // tests/approvals/native-arrays.algo.ts:128
    // assertMatch(z1, [0, 0, 0, 0])
    pushint 3 // 3
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_1 // 0
    ==
    bz fixedArray_bool_false@25

fixedArray_bool_true@24:
    intc_2 // 1

fixedArray_bool_merge@26:
    // tests/approvals/native-arrays.algo.ts:128
    // assertMatch(z1, [0, 0, 0, 0])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:129
    // z1[0] = 1
    intc_2 // 1
    itob
    intc_1 // 0
    intc_0 // 8
    *
    frame_dig 2
    swap
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:130
    // z1[1] = 2
    pushint 2 // 2
    itob
    intc_2 // 1
    intc_0 // 8
    *
    uncover 2
    swap
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:131
    // z1[2] = 3
    pushint 3 // 3
    itob
    pushint 2 // 2
    intc_0 // 8
    *
    uncover 2
    swap
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:132
    // z1[3] = 4
    intc_3 // 4
    itob
    pushint 3 // 3
    intc_0 // 8
    *
    uncover 2
    swap
    uncover 2
    replace3
    frame_bury 2
    // tests/approvals/native-arrays.algo.ts:133
    // assertMatch(z1, [{ lessThanEq: 1 }, 2, 3, 4])
    intc_3 // 4
    dup
    ==
    bz fixedArray_bool_false@32

fixedArray_and_contd@27:
    // tests/approvals/native-arrays.algo.ts:133
    // assertMatch(z1, [{ lessThanEq: 1 }, 2, 3, 4])
    intc_1 // 0
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    <=
    bz fixedArray_bool_false@32

fixedArray_and_contd@28:
    // tests/approvals/native-arrays.algo.ts:133
    // assertMatch(z1, [{ lessThanEq: 1 }, 2, 3, 4])
    intc_2 // 1
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz fixedArray_bool_false@32

fixedArray_and_contd@29:
    // tests/approvals/native-arrays.algo.ts:133
    // assertMatch(z1, [{ lessThanEq: 1 }, 2, 3, 4])
    pushint 2 // 2
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz fixedArray_bool_false@32

fixedArray_and_contd@30:
    // tests/approvals/native-arrays.algo.ts:133
    // assertMatch(z1, [{ lessThanEq: 1 }, 2, 3, 4])
    pushint 3 // 3
    intc_0 // 8
    *
    frame_dig 2
    swap
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz fixedArray_bool_false@32

fixedArray_bool_true@31:
    intc_2 // 1

fixedArray_bool_merge@33:
    // tests/approvals/native-arrays.algo.ts:133
    // assertMatch(z1, [{ lessThanEq: 1 }, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:135
    // const z2 = new FixedArray<boolean, 3>()
    intc_2 // 1
    bzero
    // tests/approvals/native-arrays.algo.ts:136
    // assert(z2[0] === false)
    intc_1 // 0
    pushint 3 // 3
    <
    assert // index access is out of bounds
    intc_1 // 0
    getbit
    intc_1 // 0
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:139
    // assert(z3.length === 4)
    intc_3 // 4
    dup
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:142
    // assert(z4.length === 4)
    intc_3 // 4
    dup
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:145
    // assert(z5.length === 4)
    intc_3 // 4
    dup
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:148
    // assert(z6.length === 4)
    intc_3 // 4
    dup
    ==
    assert
    retsub

fixedArray_bool_false@32:
    intc_1 // 0
    b fixedArray_bool_merge@33

fixedArray_bool_false@25:
    intc_1 // 0
    b fixedArray_bool_merge@26

fixedArray_bool_false@18:
    intc_1 // 0
    b fixedArray_bool_merge@19

fixedArray_bool_false@13:
    intc_1 // 0
    b fixedArray_bool_merge@14

fixedArray_bool_false@6:
    intc_1 // 0
    b fixedArray_bool_merge@7


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
arc4Interop:
    // tests/approvals/native-arrays.algo.ts:151
    // arc4Interop() {
    proto 0 0

arc4Interop_block@0:
    // tests/approvals/native-arrays.algo.ts:154
    // const da1 = new DynamicArray(u1, u1)
    pushint 2 // 2
    itob
    extract 6 2
    bytec_1 // 0x0000007b
    concat
    bytec_1 // 0x0000007b
    concat
    // tests/approvals/native-arrays.algo.ts:155
    // const sa1 = new StaticArray(u1, u1)
    bytec_0 // 0x
    bytec_1 // 0x0000007b
    concat
    bytec_1 // 0x0000007b
    concat
    swap
    // tests/approvals/native-arrays.algo.ts:157
    // let a1 = [u1, u1]
    pushint 2 // 2
    itob
    extract 6 2
    bytec_1 // 0x0000007b
    concat
    bytec_1 // 0x0000007b
    concat
    // tests/approvals/native-arrays.algo.ts:159
    // a1 = [...a1, ...da1, ...sa1]
    swap
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_3 // 4
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_3 // 4
    /
    itob
    extract 6 2
    swap
    intc_1 // 0
    uncover 2
    replace3
    dup
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    intc_1 // 0
    extract_uint16
    pushint 6 // 6
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    intc_1 // 0
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x0000007b
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x0000007b
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@3:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x0000007b
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@4:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x0000007b
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@5:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    intc_3 // 4
    dup
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x0000007b
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@6:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    pushint 5 // 5
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    bytec_1 // 0x0000007b
    ==
    bz arc4Interop_bool_false@8

arc4Interop_bool_true@7:
    intc_2 // 1

arc4Interop_bool_merge@9:
    // tests/approvals/native-arrays.algo.ts:161
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    assert // assert target is match for conditions
    retsub

arc4Interop_bool_false@8:
    intc_1 // 0
    b arc4Interop_bool_merge@9


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: bytes) -> bytes:
structs:
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    proto 1 1

structs_block@0:
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    frame_dig -1
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig -1
    intc_0 // 8
    dup
    extract3
    btoi
    swap
    dup
    cover 2
    cover 2
    dup
    cover 2
    cover 2
    // tests/approvals/native-arrays.algo.ts:167
    // myVectors = [{ x, y }]
    itob
    bytec_0 // 0x
    swap
    concat
    swap
    itob
    concat
    intc_2 // 1
    itob
    extract 6 2
    swap
    concat
    dup
    // tests/approvals/native-arrays.algo.ts:169
    // assertMatch(myVectors, [{ x, y }])
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    ==
    bz structs_bool_false@4

structs_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:169
    // assertMatch(myVectors, [{ x, y }])
    frame_dig 2
    extract 2 0
    intc_1 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig 0
    ==
    bz structs_bool_false@4

structs_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:169
    // assertMatch(myVectors, [{ x, y }])
    frame_dig 2
    extract 2 0
    intc_1 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_0 // 8
    dup
    extract3
    btoi
    frame_dig 1
    ==
    bz structs_bool_false@4

structs_bool_true@3:
    intc_2 // 1

structs_bool_merge@5:
    // tests/approvals/native-arrays.algo.ts:169
    // assertMatch(myVectors, [{ x, y }])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:170
    // return myVectors
    frame_dig 2
    frame_bury 0
    retsub

structs_bool_false@4:
    intc_1 // 0
    b structs_bool_merge@5


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans() -> bytes:
booleans:

booleans_block@0:
    // tests/approvals/native-arrays.algo.ts:174
    // return [true, false, true]
    pushint 3 // 3
    itob
    extract 6 2
    bytec_3 // 0x00
    intc_1 // 0
    intc_2 // 1
    setbit
    intc_2 // 1
    intc_1 // 0
    setbit
    pushint 2 // 2
    intc_2 // 1
    setbit
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleansStatic() -> uint64, uint64, uint64:
booleansStatic:

booleansStatic_block@0:
    // tests/approvals/native-arrays.algo.ts:178
    // return [true, false, true] as const
    intc_2 // 1
    intc_1 // 0
    intc_2 // 1
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans() -> bytes:
arc4Booleans:

arc4Booleans_block@0:
    // tests/approvals/native-arrays.algo.ts:182
    // return [new Bool(true), new Bool(false), new Bool(true)]
    bytec_3 // 0x00
    intc_1 // 0
    intc_2 // 1
    setbit
    bytec_3 // 0x00
    intc_1 // 0
    dup
    setbit
    bytec_3 // 0x00
    intc_1 // 0
    intc_2 // 1
    setbit
    swap
    pushint 3 // 3
    itob
    extract 6 2
    cover 2
    intc_1 // 0
    getbit
    uncover 3
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_1 // 0
    getbit
    swap
    pushint 2 // 2
    uncover 2
    setbit
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic() -> bytes, bytes, bytes:
arc4BooleansStatic:

arc4BooleansStatic_block@0:
    // tests/approvals/native-arrays.algo.ts:186
    // return [new Bool(true), new Bool(false), new Bool(true)] as const
    bytec_3 // 0x00
    intc_1 // 0
    intc_2 // 1
    setbit
    bytec_3 // 0x00
    intc_1 // 0
    dup
    setbit
    bytec_3 // 0x00
    intc_1 // 0
    intc_2 // 1
    setbit
    uncover 2
    uncover 2
    uncover 2
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: bytes, readOnly: bytes) -> void:
aliasing:
    // tests/approvals/native-arrays.algo.ts:189
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    proto 2 0

aliasing_block@0:
    // tests/approvals/native-arrays.algo.ts:198
    // const needClone2: readonly uint64[] = clone(mutable)
    frame_dig -2
    // tests/approvals/native-arrays.algo.ts:200
    // mutable[1] += 2
    dup
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    +
    itob
    intc_2 // 1
    intc_0 // 8
    *
    pushint 2 // 2
    +
    frame_dig -2
    swap
    uncover 2
    replace3
    dup
    frame_bury -2
    // tests/approvals/native-arrays.algo.ts:202
    // assert(mutable[1] !== needClone2[1], 'These should not match')
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    swap
    extract 2 0
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    !=
    assert // These should not match
    // tests/approvals/native-arrays.algo.ts:205
    // this.receiveMutable(mutable)
    frame_dig -2
    callsub receiveMutable
    dup
    frame_bury -2
    // tests/approvals/native-arrays.algo.ts:207
    // this.receiveReadonly(mutable)
    callsub receiveReadonly
    // tests/approvals/native-arrays.algo.ts:212
    // this.receiveReadonly(readOnly)
    frame_dig -1
    callsub receiveReadonly
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: bytes) -> bytes:
receiveMutable:
    // tests/approvals/native-arrays.algo.ts:215
    // receiveMutable(a: uint64[]) {
    proto 1 1

receiveMutable_block@0:
    frame_dig -1
    // tests/approvals/native-arrays.algo.ts:216
    // a[0] = 1
    intc_2 // 1
    itob
    intc_1 // 0
    intc_0 // 8
    *
    pushint 2 // 2
    +
    frame_dig -1
    swap
    uncover 2
    replace3
    frame_bury -1
    intc_2 // 1
    bz receiveMutable_after_if_else@2

receiveMutable_if_body@1:
    frame_dig -1
    frame_bury 0

receiveMutable_after_if_else@2:
    frame_dig 0
    swap
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly(a: bytes) -> void:
receiveReadonly:
    // tests/approvals/native-arrays.algo.ts:219
    // receiveReadonly(a: readonly uint64[]) {}
    proto 1 0

receiveReadonly_block@0:
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
