#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1 4
    bytecblock 0x 0x0000007b 0x00 0x151f7c75

main_block@0:

main_block@1:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@13

main_abi_routing@2:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x0f4c11ca // method "buildArray()uint64[]"
    pushbytes 0x13a588c8 // method "doThings()void"
    pushbytes 0x787b50b2 // method "arc4Interop()void"
    pushbytes 0xeb87a064 // method "structs((uint64,uint64))(uint64,uint64)[]"
    pushbytes 0xbc61d6b8 // method "booleans()bool[]"
    pushbytes 0x8f544473 // method "booleansStatic()(bool,bool,bool)"
    pushbytes 0x43e7ee45 // method "arc4Booleans()bool[]"
    pushbytes 0xcbe3a4f8 // method "arc4BooleansStatic()(bool,bool,bool)"
    uncover 8
    match main_buildArray_route@3 main_doThings_route@4 main_arc4Interop_route@5 main_structs_route@6 main_booleans_route@7 main_booleansStatic_route@8 main_arc4Booleans_route@9 main_arc4BooleansStatic_route@10

main_switch_case_default@11:

main_switch_case_next@12:

main_after_if_else@17:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18:
    return

main_arc4BooleansStatic_route@10:
    // tests/approvals/native-arrays.algo.ts:75
    // arc4BooleansStatic() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub arc4BooleansStatic
    cover 2
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 2 // 2
    uncover 2
    setbit
    bytec_0 // 0x
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_arc4Booleans_route@9:
    // tests/approvals/native-arrays.algo.ts:71
    // arc4Booleans() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub arc4Booleans
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_booleansStatic_route@8:
    // tests/approvals/native-arrays.algo.ts:67
    // booleansStatic() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub booleansStatic
    cover 2
    swap
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    intc_2 // 1
    uncover 2
    setbit
    pushint 2 // 2
    uncover 2
    setbit
    bytec_0 // 0x
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_booleans_route@7:
    // tests/approvals/native-arrays.algo.ts:63
    // booleans() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub booleans
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_structs_route@6:
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    swap
    intc_1 // 8
    dup
    extract3
    btoi
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    callsub structs
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_arc4Interop_route@5:
    // tests/approvals/native-arrays.algo.ts:42
    // arc4Interop() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub arc4Interop
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_doThings_route@4:
    // tests/approvals/native-arrays.algo.ts:11
    // doThings() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub doThings
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_buildArray_route@3:
    // tests/approvals/native-arrays.algo.ts:7
    // buildArray(): uint64[] {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub buildArray
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18

main_bare_routing@13:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@14

main_switch_case_default@15:

main_switch_case_next@16:
    b main_after_if_else@17

main___algots__.defaultCreate@14:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__@18


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> bytes:
buildArray:

buildArray_block@0:
    // tests/approvals/native-arrays.algo.ts:8
    // return [1, 2, 3, 4]
    intc_2 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    intc_3 // 4
    itob
    concat
    intc_3 // 4
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
doThings:
    // tests/approvals/native-arrays.algo.ts:11
    // doThings() {
    proto 0 0

doThings_block@0:
    // tests/approvals/native-arrays.algo.ts:12
    // let arr = this.buildArray()
    callsub buildArray
    dup
    // tests/approvals/native-arrays.algo.ts:14
    // assertMatch(arr, [1, 2, 3, 4])
    intc_0 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@6

doThings_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:14
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@6

doThings_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:14
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@6

doThings_and_contd@3:
    // tests/approvals/native-arrays.algo.ts:14
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@6

doThings_and_contd@4:
    // tests/approvals/native-arrays.algo.ts:14
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@6

doThings_bool_true@5:
    intc_2 // 1

doThings_bool_merge@7:
    // tests/approvals/native-arrays.algo.ts:14
    // assertMatch(arr, [1, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:17
    // arr = [...arr, Uint64(5)]
    pushint 5 // 5
    itob
    bytec_0 // 0x
    swap
    concat
    intc_2 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    extract 2 0
    frame_dig 0
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_1 // 8
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    dup
    frame_bury 0
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    bz doThings_bool_false@14

doThings_and_contd@8:
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@14

doThings_and_contd@9:
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@14

doThings_and_contd@10:
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@14

doThings_and_contd@11:
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@14

doThings_and_contd@12:
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    frame_dig 0
    extract 2 0
    intc_3 // 4
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 5 // 5
    ==
    bz doThings_bool_false@14

doThings_bool_true@13:
    intc_2 // 1

doThings_bool_merge@15:
    // tests/approvals/native-arrays.algo.ts:19
    // assertMatch(arr, [1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:22
    // const top = arr[arr.length - 1]
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    -
    swap
    extract 2 0
    swap
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // tests/approvals/native-arrays.algo.ts:23
    // assert(top === 5)
    pushint 5 // 5
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:26
    // arr = [1, 2, 3, 4]
    intc_2 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    pushint 2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    intc_3 // 4
    itob
    concat
    intc_3 // 4
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    dup
    frame_bury 0
    // tests/approvals/native-arrays.algo.ts:28
    // assertMatch(arr, [1, 2, 3, 4])
    intc_0 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@21

doThings_and_contd@16:
    // tests/approvals/native-arrays.algo.ts:28
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@21

doThings_and_contd@17:
    // tests/approvals/native-arrays.algo.ts:28
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 2 // 2
    ==
    bz doThings_bool_false@21

doThings_and_contd@18:
    // tests/approvals/native-arrays.algo.ts:28
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@21

doThings_and_contd@19:
    // tests/approvals/native-arrays.algo.ts:28
    // assertMatch(arr, [1, 2, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@21

doThings_bool_true@20:
    intc_2 // 1

doThings_bool_merge@22:
    // tests/approvals/native-arrays.algo.ts:28
    // assertMatch(arr, [1, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:31
    // arr = arr.with(1, 10)
    pushint 10 // 10
    itob
    intc_2 // 1
    intc_1 // 8
    *
    pushint 2 // 2
    +
    frame_dig 0
    swap
    uncover 2
    replace3
    dup
    frame_bury 0
    // tests/approvals/native-arrays.algo.ts:33
    // assertMatch(arr, [1, 10, 3, 4])
    intc_0 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@28

doThings_and_contd@23:
    // tests/approvals/native-arrays.algo.ts:33
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@28

doThings_and_contd@24:
    // tests/approvals/native-arrays.algo.ts:33
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@28

doThings_and_contd@25:
    // tests/approvals/native-arrays.algo.ts:33
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@28

doThings_and_contd@26:
    // tests/approvals/native-arrays.algo.ts:33
    // assertMatch(arr, [1, 10, 3, 4])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@28

doThings_bool_true@27:
    intc_2 // 1

doThings_bool_merge@29:
    // tests/approvals/native-arrays.algo.ts:33
    // assertMatch(arr, [1, 10, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:37
    // arr = arr.concat(arr, 11, t1)
    frame_dig 0
    dup
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_1 // 8
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    pushint 11 // 11
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    // tests/approvals/native-arrays.algo.ts:36
    // const t1: [uint64, uint64] = [12, 13]
    pushint 12 // 12
    // tests/approvals/native-arrays.algo.ts:37
    // arr = arr.concat(arr, 11, t1)
    itob
    bytec_0 // 0x
    swap
    concat
    // tests/approvals/native-arrays.algo.ts:36
    // const t1: [uint64, uint64] = [12, 13]
    pushint 13 // 13
    // tests/approvals/native-arrays.algo.ts:37
    // arr = arr.concat(arr, 11, t1)
    itob
    concat
    bytec_0 // 0x
    concat
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    pushint 2 // 2
    +
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    dup
    frame_bury 0
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_0 // 0
    extract_uint16
    pushint 11 // 11
    ==
    bz doThings_bool_false@42

doThings_and_contd@30:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@42

doThings_and_contd@31:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@42

doThings_and_contd@32:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@42

doThings_and_contd@33:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@42

doThings_and_contd@34:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    intc_3 // 4
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 1
    ==
    bz doThings_bool_false@42

doThings_and_contd@35:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 5 // 5
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 10 // 10
    ==
    bz doThings_bool_false@42

doThings_and_contd@36:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 6 // 6
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 3 // 3
    ==
    bz doThings_bool_false@42

doThings_and_contd@37:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 7 // 7
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 4
    ==
    bz doThings_bool_false@42

doThings_and_contd@38:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    intc_1 // 8
    dup
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 11 // 11
    ==
    bz doThings_bool_false@42

doThings_and_contd@39:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 9 // 9
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 12 // 12
    ==
    bz doThings_bool_false@42

doThings_and_contd@40:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    frame_dig 0
    extract 2 0
    pushint 10 // 10
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 13 // 13
    ==
    bz doThings_bool_false@42

doThings_bool_true@41:
    intc_2 // 1

doThings_bool_merge@43:
    // tests/approvals/native-arrays.algo.ts:39
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    retsub

doThings_bool_false@42:
    intc_0 // 0
    b doThings_bool_merge@43

doThings_bool_false@28:
    intc_0 // 0
    b doThings_bool_merge@29

doThings_bool_false@21:
    intc_0 // 0
    b doThings_bool_merge@22

doThings_bool_false@14:
    intc_0 // 0
    b doThings_bool_merge@15

doThings_bool_false@6:
    intc_0 // 0
    b doThings_bool_merge@7


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
arc4Interop:
    // tests/approvals/native-arrays.algo.ts:42
    // arc4Interop() {
    proto 0 0

arc4Interop_block@0:
    // tests/approvals/native-arrays.algo.ts:45
    // const da1 = new DynamicArray(u1, u1)
    bytec_0 // 0x
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:45
    // const da1 = new DynamicArray(u1, u1)
    concat
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:45
    // const da1 = new DynamicArray(u1, u1)
    concat
    pushint 2 // 2
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    // tests/approvals/native-arrays.algo.ts:46
    // const sa1 = new StaticArray(u1, u1)
    bytec_0 // 0x
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:46
    // const sa1 = new StaticArray(u1, u1)
    concat
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:46
    // const sa1 = new StaticArray(u1, u1)
    concat
    bytec_0 // 0x
    concat
    swap
    // tests/approvals/native-arrays.algo.ts:47
    // let a1 = [u1, u1]
    bytec_0 // 0x
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:47
    // let a1 = [u1, u1]
    concat
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:47
    // let a1 = [u1, u1]
    concat
    pushint 2 // 2
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    // tests/approvals/native-arrays.algo.ts:49
    // a1 = [...a1, ...da1, ...sa1]
    swap
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_3 // 4
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_3 // 4
    /
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    dup
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    intc_0 // 0
    extract_uint16
    pushint 6 // 6
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    intc_0 // 0
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    intc_2 // 1
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@3:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    pushint 2 // 2
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@4:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    pushint 3 // 3
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@5:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    intc_3 // 4
    dup
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    ==
    bz arc4Interop_bool_false@8

arc4Interop_and_contd@6:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    frame_dig 0
    extract 2 0
    pushint 5 // 5
    intc_3 // 4
    *
    intc_3 // 4
    extract3 // on error: index access is out of bounds
    // tests/approvals/native-arrays.algo.ts:43
    // const u1 = new UintN32(123)
    bytec_1 // 0x0000007b
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    ==
    bz arc4Interop_bool_false@8

arc4Interop_bool_true@7:
    intc_2 // 1

arc4Interop_bool_merge@9:
    // tests/approvals/native-arrays.algo.ts:51
    // assertMatch(a1, [u1, u1, u1, u1, u1, u1])
    assert // assert target is match for conditions
    retsub

arc4Interop_bool_false@8:
    intc_0 // 0
    b arc4Interop_bool_merge@9


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p.x: uint64, p.y: uint64) -> bytes:
structs:
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    proto 2 1

structs_block@0:
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    frame_dig -2
    dup
    frame_dig -1
    dup
    cover 2
    cover 2
    // tests/approvals/native-arrays.algo.ts:57
    // myVectors = [{ x, y }]
    itob
    bytec_0 // 0x
    swap
    concat
    swap
    itob
    concat
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    swap
    concat
    intc_2 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    dup
    // tests/approvals/native-arrays.algo.ts:59
    // assertMatch(myVectors, [{ x, y }])
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    ==
    bz structs_bool_false@4

structs_and_contd@1:
    // tests/approvals/native-arrays.algo.ts:59
    // assertMatch(myVectors, [{ x, y }])
    frame_dig 2
    extract 2 0
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    frame_dig 0
    ==
    bz structs_bool_false@4

structs_and_contd@2:
    // tests/approvals/native-arrays.algo.ts:59
    // assertMatch(myVectors, [{ x, y }])
    frame_dig 2
    extract 2 0
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    intc_1 // 8
    dup
    extract3
    btoi
    frame_dig 1
    ==
    bz structs_bool_false@4

structs_bool_true@3:
    intc_2 // 1

structs_bool_merge@5:
    // tests/approvals/native-arrays.algo.ts:59
    // assertMatch(myVectors, [{ x, y }])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:60
    // return myVectors
    frame_dig 2
    frame_bury 0
    retsub

structs_bool_false@4:
    intc_0 // 0
    b structs_bool_merge@5


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans() -> bytes:
booleans:

booleans_block@0:
    // tests/approvals/native-arrays.algo.ts:64
    // return [true, false, true]
    bytec_2 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    bytec_0 // 0x
    swap
    concat
    intc_2 // 1
    intc_0 // 0
    setbit
    pushint 2 // 2
    intc_2 // 1
    setbit
    pushint 3 // 3
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleansStatic() -> uint64, uint64, uint64:
booleansStatic:

booleansStatic_block@0:
    // tests/approvals/native-arrays.algo.ts:68
    // return [true, false, true] as const
    intc_2 // 1
    intc_0 // 0
    intc_2 // 1
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans() -> bytes:
arc4Booleans:

arc4Booleans_block@0:
    // tests/approvals/native-arrays.algo.ts:72
    // return [new Bool(true), new Bool(false), new Bool(true)]
    bytec_2 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    bytec_2 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_2 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    swap
    bytec_0 // 0x
    uncover 3
    concat
    swap
    intc_0 // 0
    getbit
    swap
    intc_2 // 1
    uncover 2
    setbit
    swap
    intc_0 // 0
    getbit
    swap
    pushint 2 // 2
    uncover 2
    setbit
    pushint 3 // 3
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic() -> bytes, bytes, bytes:
arc4BooleansStatic:

arc4BooleansStatic_block@0:
    // tests/approvals/native-arrays.algo.ts:76
    // return [new Bool(true), new Bool(false), new Bool(true)] as const
    bytec_2 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    bytec_2 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_2 // 0x00
    intc_0 // 0
    intc_2 // 1
    setbit
    uncover 2
    uncover 2
    uncover 2
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
