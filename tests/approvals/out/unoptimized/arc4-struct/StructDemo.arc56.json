{
    "name": "StructDemo",
    "structs": {
        "ObjectF8C529BB": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "toAndFromBytes",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "toNative",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "ObjectF8C529BB"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setLastCalled",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                },
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "lastCalled"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        684,
                        704,
                        729
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        692,
                        712
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        66
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        246
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        763,
                        783
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        398,
                        443,
                        494
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        270,
                        278,
                        299,
                        342,
                        358,
                        379
                    ],
                    "errorMessage": "invalid number of bytes for Vector"
                },
                {
                    "pc": [
                        408,
                        453,
                        504
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        307,
                        315,
                        464,
                        473
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        822
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAECAABECYGAAQVH3x1CAAAAAAAAAAAB3BsdWdpbnMIAAAAAAAAAAEEp4AA3kIAAEIAADEbIxNBALJCAAAxGSMSRDEYIxNBAKBCAAA2GgCABIk4jd2ABO8yLW2ABAJFiAeABMuB3riABPedbEaABJGRVUWABDgU+SqABAB6TLCABE0hvKaABKm8YfFPCo4KAEAAOgA0AC4AKAAiABwAFgAQAApCAABCAABCAAAAiAE1Qv/ziAD8Qv/tiADpQv/niADDQv/hiACoQv/biACNQv/ViAB3Qv/PiABGQv/JiAAjQv/DiAAVQv+9Qv+9MRkjEjEYIxIQRIgCbyRDQgAAiAD/JENCAAA2GgFJFSUSRDYaAkkVJRJEiAEBKU8BULAkQ0IAADYaAUkVJRJENhoCSRUiEkQ2GgNJFSISRE8CTwJPAogBAClPAVCwJENCAAA2GgFJFSUSRIgBAiRDQgAANhoBSRUlEkSIASUpTwFQsCRDQgAANhoBSRUlEkSIARkpTwFQsCRDQgAANhoBSSNZJAuBAghLARUSRFcCAIgBAilPAVCwJENCAACIAQopTwFQsCRDQgAANhoBSSNZJAuBAghLARUSRFcCADYaAkkVIhJEFzYaA0kVIhJEF08CTwJPAogA5iRDQgAANhoBSSNZJAuBAghLARUSRFcCAIgBJSRDQgAAKCpQKlBJIyJYsEkiIliwKCpQKlASRImKAgFCAACL/iMiWBeL/yMiWBcIFov+IiJYF4v/IiJYFwgWKE8CUE8BUImKAwFCAACL/SOL/l1JjP0ii/9dSYz9iYoBAEIAAIv/IyJYi/8iIlgoTwJQTwFQSSMiWE4BSSIiWChPA1BPAVCL/08CEkSL/xJEiYoBAUIAAIv/iYoBAUIAAIv/iYoBAUIAACuL/1C+REklIlgXIw1EiUIAAIAEbWFpbr5ESSUiWBcjDUSJigMAQgAAi/8WK4v9UEm+REmBGVlOAUkVTgFJTwNPA1JJFU4BSYECTwNSi/6BFAuBFFiBDE8FXYv+gRQLgQIITwJPAU8CXUsBgRlZTwIjTwJYTwFQSwG8SL+JigEAQgAAgAEAIyNUJwUVgQQSRCgnBVAnBFAnBFAkFlcGAk8BUCgnBFAqUCpQTwJQgRsWVwYCUE8BUCuL/1BJvEhPAb+JQgAAiQ==",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}