{
    "name": "StructDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "toNativeResult": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "toAndFromBytes",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "toNative",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "toNativeResult"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setLastCalled",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                },
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "lastCalled"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "cGx1Z2lucw=="
                },
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        587,
                        605,
                        629
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        435,
                        440,
                        457,
                        463,
                        471,
                        477,
                        520,
                        525,
                        535,
                        540,
                        571,
                        576,
                        592,
                        610,
                        655,
                        671
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        596,
                        614
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        709,
                        714,
                        719,
                        724,
                        729,
                        734,
                        739,
                        744,
                        749,
                        754,
                        759,
                        764,
                        769,
                        774,
                        779
                    ],
                    "errorMessage": "Length is 4"
                },
                {
                    "pc": [
                        146,
                        169,
                        206,
                        227,
                        254,
                        284,
                        308,
                        328,
                        364,
                        391
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        419
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        151,
                        174,
                        211,
                        232,
                        259,
                        289,
                        313,
                        333,
                        369,
                        396
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAgEASYGBKeAAN4ABBUffHUIAAAAAAAAAAAHcGx1Z2lucwgAAAAAAAAAATEbIhNBAV82GgCABIk4jd2ABO8yLW2ABAJFiAeABMuB3riABPedbEaABJGRVUWABDgU+SqABAB6TLCABE0hvKaABKm8YfFPCo4KAPcA3AC4AKQAjABuAFMAPgAZAAIiQzEZIhJEMRgiE0Q2GgFXAgCIAh0lQv/oMRkiEkQxGCITRDYaAVcCADYaAhc2GgMXTwJPAk8CiAGiJUL/wzEZIhJEMRgiE0SIAX8qTFCwJUL/rjEZIhJEMRgiE0Q2GgFXAgCIAVAqTFCwJUL/kzEZIhJEMRgiE0Q2GgGIASpMKUxQTFAqTFCwJUL/dTEZIhJEMRgiE0Q2GgGIAQYqTFCwJUL/XTEZIhJEMRgiE0Q2GgGIAMElQv9JMRkiEkQxGCITRDYaATYaAjYaA08CTwJPAogAiCpMULAlQv8lMRkiEkQxGCITRDYaATYaAogARypMULAlQv8KMRkiEkQxGCITRIgAGyVC/vkxGSJMjgEAA0L+7TEYIhJEiAGXJUL+4ikrUCtQSSIjWLBJI0lYsCkrUCtQEkSJigIBi/4iI1gXi/8iI1gXCBaL/iNJWBeL/yNJWBcIFilPAlBMUImKAwGL/ov9Ik8CXYz9i/+L/SNPAl1JjP2JigEAi/8iI1iL/yNJWClPAlBMUEkiI1hMSSNJWClPA1BMUIv/TwISRIv/EkSJigEBi/+JigECi/8iI1iL/yNJWImKAQEnBIv/UL5ESYEQI1gXIg1EiYAEbWFpbr5ESYEQI1gXIg1EiYoDAIv/FicEi/1QSb5ESYEZWUxJFUxJTwNPA1JJVwIAi/6BFAuBFFhPBEyBDE8CXUxJIlmL/g1Ei/6BFAuBAghPAl1LAYEZWU8CIk8CWExQSwG8SL+JigEAKBUkEkQoFSQSRCgVJBJEKBUkEkQoFSQSRCgVJBJEKBUkEkQoFSQSRCgVJBJEKBUkEkQoFSQSRCgVJBJEKBUkEkQoFSQSRCgVJBJEKShQJwVQJwVQKUxQgAIAAUxQKScFUCtQK1CAAQBQgRsWVwYCUExQJwSL/1BJvEhMv4mJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}