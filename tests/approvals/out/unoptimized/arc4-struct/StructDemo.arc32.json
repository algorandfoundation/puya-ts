{
    "hints": {
        "testVectorCreationAndEquality()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "v2": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "implicitCastingAndSpreading((uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "toAndFromBytes((uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "toNative((uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PluginInfo",
                    "elements": [
                        [
                            "lastValidRound",
                            "uint64"
                        ],
                        [
                            "cooldown",
                            "uint64"
                        ],
                        [
                            "lastCalled",
                            "uint64"
                        ],
                        [
                            "adminPrivileges",
                            "bool"
                        ],
                        [
                            "methods",
                            "(byte[4],uint64,uint64)[]"
                        ]
                    ]
                }
            }
        },
        "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PluginInfo",
                    "elements": [
                        [
                            "lastValidRound",
                            "uint64"
                        ],
                        [
                            "cooldown",
                            "uint64"
                        ],
                        [
                            "lastCalled",
                            "uint64"
                        ],
                        [
                            "adminPrivileges",
                            "bool"
                        ],
                        [
                            "methods",
                            "(byte[4],uint64,uint64)[]"
                        ]
                    ]
                }
            }
        },
        "setLastCalled(string,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setPlugin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StructDemo",
        "methods": [
            {
                "name": "testVectorCreationAndEquality",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addVectors",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "v2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "mutateVector",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    },
                    {
                        "type": "uint64",
                        "name": "newX"
                    },
                    {
                        "type": "uint64",
                        "name": "newY"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "implicitCastingAndSpreading",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "toAndFromBytes",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "toNative",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "getPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])"
                }
            },
            {
                "name": "getMain",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])"
                }
            },
            {
                "name": "setLastCalled",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    },
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "lastCalled"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}