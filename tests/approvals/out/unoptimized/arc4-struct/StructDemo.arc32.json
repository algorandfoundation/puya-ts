{
    "hints": {
        "testVectorCreationAndEquality()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "v2": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "implicitCastingAndSpreading((uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "toAndFromBytes((uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "toNative((uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "v1": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "toNativeResult",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PluginInfo",
                    "elements": [
                        [
                            "lastValidRound",
                            "uint64"
                        ],
                        [
                            "cooldown",
                            "uint64"
                        ],
                        [
                            "lastCalled",
                            "uint64"
                        ],
                        [
                            "adminPrivileges",
                            "bool"
                        ],
                        [
                            "methods",
                            "(byte[4],uint64,uint64)[]"
                        ]
                    ]
                }
            }
        },
        "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PluginInfo",
                    "elements": [
                        [
                            "lastValidRound",
                            "uint64"
                        ],
                        [
                            "cooldown",
                            "uint64"
                        ],
                        [
                            "lastCalled",
                            "uint64"
                        ],
                        [
                            "adminPrivileges",
                            "bool"
                        ],
                        [
                            "methods",
                            "(byte[4],uint64,uint64)[]"
                        ]
                    ]
                }
            }
        },
        "setPlugin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCA0IDggMQogICAgYnl0ZWNibG9jayAweGE3ODAwMGRlIDB4IDB4MDAwMDAwMDAwMDAwMDAwMCAweDE1MWY3Yzc1IDB4MDAwMDAwMDAwMDAwMDAwMSAicGx1Z2lucyIKCm1haW5fYmxvY2tAMDoKCm1haW5fYmxvY2tAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjkKICAgIC8vIGNsYXNzIFN0cnVjdERlbW8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwoKbWFpbl9hYmlfcm91dGluZ0AyOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OQogICAgLy8gY2xhc3MgU3RydWN0RGVtbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIHB1c2hieXRlcyAweDg5Mzg4ZGRkIC8vIG1ldGhvZCAidGVzdFZlY3RvckNyZWF0aW9uQW5kRXF1YWxpdHkoKXZvaWQiCiAgICBwdXNoYnl0ZXMgMHhlZjMyMmQ2ZCAvLyBtZXRob2QgImFkZFZlY3RvcnMoKHVpbnQ2NCx1aW50NjQpLCh1aW50NjQsdWludDY0KSkodWludDY0LHVpbnQ2NCkiCiAgICBwdXNoYnl0ZXMgMHhjYjgxZGViOCAvLyBtZXRob2QgImltcGxpY2l0Q2FzdGluZ0FuZFNwcmVhZGluZygodWludDY0LHVpbnQ2NCkpdm9pZCIKICAgIHB1c2hieXRlcyAweGY3OWQ2YzQ2IC8vIG1ldGhvZCAidG9BbmRGcm9tQnl0ZXMoKHVpbnQ2NCx1aW50NjQpKSh1aW50NjQsdWludDY0KSIKICAgIHB1c2hieXRlcyAweDkxOTE1NTQ1IC8vIG1ldGhvZCAidG9OYXRpdmUoKHVpbnQ2NCx1aW50NjQpKSh1aW50NjQsdWludDY0KSIKICAgIHB1c2hieXRlcyAweDM4MTRmOTJhIC8vIG1ldGhvZCAiZ2V0UGx1Z2luKHN0cmluZykodWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCwoYnl0ZVs0XSx1aW50NjQsdWludDY0KVtdKSIKICAgIHB1c2hieXRlcyAweDAwN2E0Y2IwIC8vIG1ldGhvZCAiZ2V0TWFpbigpKHVpbnQ2NCx1aW50NjQsdWludDY0LGJvb2wsKGJ5dGVbNF0sdWludDY0LHVpbnQ2NClbXSkiCiAgICBwdXNoYnl0ZXMgMHhhOWJjNjFmMSAvLyBtZXRob2QgInNldFBsdWdpbihzdHJpbmcpdm9pZCIKICAgIHVuY292ZXIgOAogICAgbWF0Y2ggbWFpbl90ZXN0VmVjdG9yQ3JlYXRpb25BbmRFcXVhbGl0eV9yb3V0ZUAzIG1haW5fYWRkVmVjdG9yc19yb3V0ZUA0IG1haW5faW1wbGljaXRDYXN0aW5nQW5kU3ByZWFkaW5nX3JvdXRlQDUgbWFpbl90b0FuZEZyb21CeXRlc19yb3V0ZUA2IG1haW5fdG9OYXRpdmVfcm91dGVANyBtYWluX2dldFBsdWdpbl9yb3V0ZUA4IG1haW5fZ2V0TWFpbl9yb3V0ZUA5IG1haW5fc2V0UGx1Z2luX3JvdXRlQDEwCgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRAMTE6CgptYWluX3N3aXRjaF9jYXNlX25leHRAMTI6CgptYWluX2FmdGVyX2lmX2Vsc2VAMTc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo5CiAgICAvLyBjbGFzcyBTdHJ1Y3REZW1vIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKCm1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo6U3RydWN0RGVtby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxODoKICAgIHJldHVybgoKbWFpbl9zZXRQbHVnaW5fcm91dGVAMTA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo1NwogICAgLy8gcHVibGljIHNldFBsdWdpbihrZXk6IHN0cmluZykgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OQogICAgLy8gY2xhc3MgU3RydWN0RGVtbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo1NwogICAgLy8gcHVibGljIHNldFBsdWdpbihrZXk6IHN0cmluZykgewogICAgY2FsbHN1YiBzZXRQbHVnaW4KICAgIGludGNfMyAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo6U3RydWN0RGVtby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxOAoKbWFpbl9nZXRNYWluX3JvdXRlQDk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo1MQogICAgLy8gcHVibGljIGdldE1haW4oKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldE1haW4KICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMyAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo6U3RydWN0RGVtby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxOAoKbWFpbl9nZXRQbHVnaW5fcm91dGVAODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjQ1CiAgICAvLyBwdWJsaWMgZ2V0UGx1Z2luKGtleTogc3RyaW5nKTogUGx1Z2luSW5mbyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo5CiAgICAvLyBjbGFzcyBTdHJ1Y3REZW1vIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjQ1CiAgICAvLyBwdWJsaWMgZ2V0UGx1Z2luKGtleTogc3RyaW5nKTogUGx1Z2luSW5mbyB7CiAgICBjYWxsc3ViIGdldFBsdWdpbgogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18zIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjpTdHJ1Y3REZW1vLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX3RvTmF0aXZlX3JvdXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czozNwogICAgLy8gcHVibGljIHRvTmF0aXZlKHYxOiBWZWN0b3IpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjkKICAgIC8vIGNsYXNzIFN0cnVjdERlbW8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czozNwogICAgLy8gcHVibGljIHRvTmF0aXZlKHYxOiBWZWN0b3IpIHsKICAgIGNhbGxzdWIgdG9OYXRpdmUKICAgIHN3YXAKICAgIGJ5dGVjXzEgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzMgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8uX19wdXlhX2FyYzRfcm91dGVyX19AMTgKCm1haW5fdG9BbmRGcm9tQnl0ZXNfcm91dGVANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjMyCiAgICAvLyBwdWJsaWMgdG9BbmRGcm9tQnl0ZXModjE6IFZlY3Rvcik6IFZlY3RvciB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo5CiAgICAvLyBjbGFzcyBTdHJ1Y3REZW1vIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6MzIKICAgIC8vIHB1YmxpYyB0b0FuZEZyb21CeXRlcyh2MTogVmVjdG9yKTogVmVjdG9yIHsKICAgIGNhbGxzdWIgdG9BbmRGcm9tQnl0ZXMKICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMyAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo6U3RydWN0RGVtby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxOAoKbWFpbl9pbXBsaWNpdENhc3RpbmdBbmRTcHJlYWRpbmdfcm91dGVANToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgaW1wbGljaXRDYXN0aW5nQW5kU3ByZWFkaW5nKHYxOiBWZWN0b3IpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjkKICAgIC8vIGNsYXNzIFN0cnVjdERlbW8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGltcGxpY2l0Q2FzdGluZ0FuZFNwcmVhZGluZyh2MTogVmVjdG9yKSB7CiAgICBjYWxsc3ViIGltcGxpY2l0Q2FzdGluZ0FuZFNwcmVhZGluZwogICAgaW50Y18zIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjpTdHJ1Y3REZW1vLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX2FkZFZlY3RvcnNfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgYWRkVmVjdG9ycyh2MTogVmVjdG9yLCB2MjogVmVjdG9yKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo5CiAgICAvLyBjbGFzcyBTdHJ1Y3REZW1vIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBhZGRWZWN0b3JzKHYxOiBWZWN0b3IsIHYyOiBWZWN0b3IpIHsKICAgIGNhbGxzdWIgYWRkVmVjdG9ycwogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18zIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjpTdHJ1Y3REZW1vLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX3Rlc3RWZWN0b3JDcmVhdGlvbkFuZEVxdWFsaXR5X3JvdXRlQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoxMAogICAgLy8gcHVibGljIHRlc3RWZWN0b3JDcmVhdGlvbkFuZEVxdWFsaXR5KCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB0ZXN0VmVjdG9yQ3JlYXRpb25BbmRFcXVhbGl0eQogICAgaW50Y18zIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjpTdHJ1Y3REZW1vLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjkKICAgIC8vIGNsYXNzIFN0cnVjdERlbW8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gMAogICAgc3dhcAogICAgbWF0Y2ggbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMTQKCm1haW5fc3dpdGNoX2Nhc2VfZGVmYXVsdEAxNToKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEAxNjoKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDE3CgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxNDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjkKICAgIC8vIGNsYXNzIFN0cnVjdERlbW8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgID09CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZQogICAgaW50Y18zIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjpTdHJ1Y3REZW1vLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8udGVzdFZlY3RvckNyZWF0aW9uQW5kRXF1YWxpdHkoKSAtPiB2b2lkOgp0ZXN0VmVjdG9yQ3JlYXRpb25BbmRFcXVhbGl0eToKCnRlc3RWZWN0b3JDcmVhdGlvbkFuZEVxdWFsaXR5X2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoxMQogICAgLy8gY29uc3QgdjEgPSBuZXcgVmVjdG9yKHsgeDogbmV3IEFSQzRVaW50NjQoMCksIHk6IG5ldyBBUkM0VWludDY0KDApIH0pCiAgICBieXRlY18xIC8vIDB4CiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgY29uY2F0CiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoxMgogICAgLy8gbG9nKHYxLngpCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBsb2cKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjEzCiAgICAvLyBsb2codjEueSkKICAgIGR1cAogICAgaW50Y18yIC8vIDgKICAgIGR1cAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBsb2cKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjE0CiAgICAvLyBjb25zdCB2MiA9IG5ldyBWZWN0b3IoeyB5OiBuZXcgQVJDNFVpbnQ2NCgwKSwgeDogbmV3IEFSQzRVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gMHgKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjE1CiAgICAvLyBhc3NlcnQodjEgPT09IHYyKQogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8uYWRkVmVjdG9ycyh2MTogYnl0ZXMsIHYyOiBieXRlcykgLT4gYnl0ZXM6CmFkZFZlY3RvcnM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoxOAogICAgLy8gcHVibGljIGFkZFZlY3RvcnModjE6IFZlY3RvciwgdjI6IFZlY3RvcikgewogICAgcHJvdG8gMiAxCgphZGRWZWN0b3JzX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyMAogICAgLy8geDogbmV3IEFSQzRVaW50NjQodjEueC5uYXRpdmUgKyB2Mi54Lm5hdGl2ZSksCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICArCiAgICBpdG9iCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyMQogICAgLy8geTogbmV3IEFSQzRVaW50NjQodjEueS5uYXRpdmUgKyB2Mi55Lm5hdGl2ZSksCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMiAvLyA4CiAgICBkdXAKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gOAogICAgZHVwCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgICsKICAgIGl0b2IKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjE5LTIyCiAgICAvLyByZXR1cm4gbmV3IFZlY3Rvcih7CiAgICAvLyAgIHg6IG5ldyBBUkM0VWludDY0KHYxLngubmF0aXZlICsgdjIueC5uYXRpdmUpLAogICAgLy8gICB5OiBuZXcgQVJDNFVpbnQ2NCh2MS55Lm5hdGl2ZSArIHYyLnkubmF0aXZlKSwKICAgIC8vIH0pCiAgICBieXRlY18xIC8vIDB4CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo6U3RydWN0RGVtby5pbXBsaWNpdENhc3RpbmdBbmRTcHJlYWRpbmcodjE6IGJ5dGVzKSAtPiB2b2lkOgppbXBsaWNpdENhc3RpbmdBbmRTcHJlYWRpbmc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGltcGxpY2l0Q2FzdGluZ0FuZFNwcmVhZGluZyh2MTogVmVjdG9yKSB7CiAgICBwcm90byAxIDAKCmltcGxpY2l0Q2FzdGluZ0FuZFNwcmVhZGluZ19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6MjYKICAgIC8vIGNvbnN0IHYyID0gbmV3IFZlY3Rvcih2MSkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18yIC8vIDgKICAgIGR1cAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyNwogICAgLy8gY29uc3QgdjMgPSBuZXcgVmVjdG9yKHsgLi4udjIgfSkKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHN3YXAKICAgIGR1cAogICAgaW50Y18yIC8vIDgKICAgIGR1cAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyOAogICAgLy8gYXNzZXJ0KHYxLmJ5dGVzID09PSB2Mi5ieXRlcykKICAgIGZyYW1lX2RpZyAtMQogICAgdW5jb3ZlciAyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czoyOQogICAgLy8gYXNzZXJ0KHYzLmJ5dGVzID09PSB2MS5ieXRlcykKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8udG9BbmRGcm9tQnl0ZXModjE6IGJ5dGVzKSAtPiBieXRlczoKdG9BbmRGcm9tQnl0ZXM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czozMgogICAgLy8gcHVibGljIHRvQW5kRnJvbUJ5dGVzKHYxOiBWZWN0b3IpOiBWZWN0b3IgewogICAgcHJvdG8gMSAxCgp0b0FuZEZyb21CeXRlc19ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6MzMKICAgIC8vIGNvbnN0IHYxX2J5dGVzID0gdjEuYnl0ZXMKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6MzQKICAgIC8vIHJldHVybiBpbnRlcnByZXRBc0FyYzQ8VmVjdG9yPih2MV9ieXRlcykKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjpTdHJ1Y3REZW1vLnRvTmF0aXZlKHYxOiBieXRlcykgLT4gYnl0ZXMsIGJ5dGVzOgp0b05hdGl2ZToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjM3CiAgICAvLyBwdWJsaWMgdG9OYXRpdmUodjE6IFZlY3RvcikgewogICAgcHJvdG8gMSAyCgp0b05hdGl2ZV9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6MzgKICAgIC8vIHJldHVybiB2MS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18yIC8vIDgKICAgIGR1cAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo6U3RydWN0RGVtby5nZXRQbHVnaW4oa2V5OiBieXRlcykgLT4gYnl0ZXM6CmdldFBsdWdpbjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjQ1CiAgICAvLyBwdWJsaWMgZ2V0UGx1Z2luKGtleTogc3RyaW5nKTogUGx1Z2luSW5mbyB7CiAgICBwcm90byAxIDEKCmdldFBsdWdpbl9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NDEKICAgIC8vIHBsdWdpbnMgPSBCb3hNYXA8c3RyaW5nLCBQbHVnaW5JbmZvPih7IGtleVByZWZpeDogJ3BsdWdpbnMnIH0pCiAgICBieXRlYyA1IC8vICJwbHVnaW5zIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NDYKICAgIC8vIGNvbnN0IHZhbHVlID0gdGhpcy5wbHVnaW5zLmdldChrZXkpLmNvcHkoKQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo0NwogICAgLy8gYXNzZXJ0KHZhbHVlLmxhc3RDYWxsZWQubmF0aXZlID4gMCwgJ0xhc3QgY2FsbGVkIG5vdCB6ZXJvJykKICAgIGR1cAogICAgcHVzaGludCAxNiAvLyAxNgogICAgaW50Y18yIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18wIC8vIDAKICAgID4KICAgIGFzc2VydCAvLyBMYXN0IGNhbGxlZCBub3QgemVybwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NDgKICAgIC8vIHJldHVybiB2YWx1ZQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8uZ2V0TWFpbigpIC0+IGJ5dGVzOgpnZXRNYWluOgoKZ2V0TWFpbl9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NDMKICAgIC8vIHBsdWdpbiA9IEJveDxQbHVnaW5JbmZvPih7IGtleTogJ21haW4nIH0pCiAgICBwdXNoYnl0ZXMgIm1haW4iCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo1MgogICAgLy8gY29uc3QgdmFsdWUgPSB0aGlzLnBsdWdpbi52YWx1ZS5jb3B5KCkKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo1MwogICAgLy8gYXNzZXJ0KHZhbHVlLmxhc3RDYWxsZWQubmF0aXZlID4gMCwgJ0xhc3QgY2FsbGVkIG5vdCB6ZXJvJykKICAgIGR1cAogICAgcHVzaGludCAxNiAvLyAxNgogICAgaW50Y18yIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgaW50Y18wIC8vIDAKICAgID4KICAgIGFzc2VydCAvLyBMYXN0IGNhbGxlZCBub3QgemVybwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NTQKICAgIC8vIHJldHVybiB2YWx1ZQogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8uc2V0UGx1Z2luKGtleTogYnl0ZXMpIC0+IHZvaWQ6CnNldFBsdWdpbjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgc2V0UGx1Z2luKGtleTogc3RyaW5nKSB7CiAgICBwcm90byAxIDAKCnNldFBsdWdpbl9ibG9ja0AwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NjcKICAgIC8vIHNlbGVjdG9yOiBuZXcgYXJjNC5TdGF0aWNCeXRlczw0PihtZXRob2RTZWxlY3RvcigndGVzdCgpdm9pZCcpKSwKICAgIGJ5dGVjXzAgLy8gbWV0aG9kICJ0ZXN0KCl2b2lkIgogICAgbGVuCiAgICBpbnRjXzEgLy8gNAogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggaXMgNAogICAgYnl0ZWNfMCAvLyBtZXRob2QgInRlc3QoKXZvaWQiCiAgICBsZW4KICAgIGludGNfMSAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBpcyA0CiAgICBieXRlY18wIC8vIG1ldGhvZCAidGVzdCgpdm9pZCIKICAgIGxlbgogICAgaW50Y18xIC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIGlzIDQKICAgIGJ5dGVjXzAgLy8gbWV0aG9kICJ0ZXN0KCl2b2lkIgogICAgbGVuCiAgICBpbnRjXzEgLy8gNAogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggaXMgNAogICAgYnl0ZWNfMCAvLyBtZXRob2QgInRlc3QoKXZvaWQiCiAgICBsZW4KICAgIGludGNfMSAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBpcyA0CiAgICBieXRlY18wIC8vIG1ldGhvZCAidGVzdCgpdm9pZCIKICAgIGxlbgogICAgaW50Y18xIC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIGlzIDQKICAgIGJ5dGVjXzAgLy8gbWV0aG9kICJ0ZXN0KCl2b2lkIgogICAgbGVuCiAgICBpbnRjXzEgLy8gNAogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggaXMgNAogICAgYnl0ZWNfMCAvLyBtZXRob2QgInRlc3QoKXZvaWQiCiAgICBsZW4KICAgIGludGNfMSAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBpcyA0CiAgICBieXRlY18wIC8vIG1ldGhvZCAidGVzdCgpdm9pZCIKICAgIGxlbgogICAgaW50Y18xIC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIGlzIDQKICAgIGJ5dGVjXzAgLy8gbWV0aG9kICJ0ZXN0KCl2b2lkIgogICAgbGVuCiAgICBpbnRjXzEgLy8gNAogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggaXMgNAogICAgYnl0ZWNfMCAvLyBtZXRob2QgInRlc3QoKXZvaWQiCiAgICBsZW4KICAgIGludGNfMSAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBpcyA0CiAgICBieXRlY18wIC8vIG1ldGhvZCAidGVzdCgpdm9pZCIKICAgIGxlbgogICAgaW50Y18xIC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIGlzIDQKICAgIGJ5dGVjXzAgLy8gbWV0aG9kICJ0ZXN0KCl2b2lkIgogICAgbGVuCiAgICBpbnRjXzEgLy8gNAogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggaXMgNAogICAgYnl0ZWNfMCAvLyBtZXRob2QgInRlc3QoKXZvaWQiCiAgICBsZW4KICAgIGludGNfMSAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBpcyA0CiAgICBieXRlY18wIC8vIG1ldGhvZCAidGVzdCgpdm9pZCIKICAgIGxlbgogICAgaW50Y18xIC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIGlzIDQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjY2LTcwCiAgICAvLyBuZXcgTWV0aG9kSW5mbyh7CiAgICAvLyAgIHNlbGVjdG9yOiBuZXcgYXJjNC5TdGF0aWNCeXRlczw0PihtZXRob2RTZWxlY3RvcigndGVzdCgpdm9pZCcpKSwKICAgIC8vICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyB9KSwKICAgIGJ5dGVjXzEgLy8gMHgKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjY3CiAgICAvLyBzZWxlY3RvcjogbmV3IGFyYzQuU3RhdGljQnl0ZXM8ND4obWV0aG9kU2VsZWN0b3IoJ3Rlc3QoKXZvaWQnKSksCiAgICBieXRlY18wIC8vIG1ldGhvZCAidGVzdCgpdm9pZCIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjY2LTcwCiAgICAvLyBuZXcgTWV0aG9kSW5mbyh7CiAgICAvLyAgIHNlbGVjdG9yOiBuZXcgYXJjNC5TdGF0aWNCeXRlczw0PihtZXRob2RTZWxlY3RvcigndGVzdCgpdm9pZCcpKSwKICAgIC8vICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyB9KSwKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NjgKICAgIC8vIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgYnl0ZWMgNCAvLyAweDAwMDAwMDAwMDAwMDAwMDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjY2LTcwCiAgICAvLyBuZXcgTWV0aG9kSW5mbyh7CiAgICAvLyAgIHNlbGVjdG9yOiBuZXcgYXJjNC5TdGF0aWNCeXRlczw0PihtZXRob2RTZWxlY3RvcigndGVzdCgpdm9pZCcpKSwKICAgIC8vICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyB9KSwKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NjkKICAgIC8vIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICBieXRlYyA0IC8vIDB4MDAwMDAwMDAwMDAwMDAwMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NjYtNzAKICAgIC8vIG5ldyBNZXRob2RJbmZvKHsKICAgIC8vICAgc2VsZWN0b3I6IG5ldyBhcmM0LlN0YXRpY0J5dGVzPDQ+KG1ldGhvZFNlbGVjdG9yKCd0ZXN0KCl2b2lkJykpLAogICAgLy8gICBjb29sZG93bjogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vIH0pLAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2NS03MQogICAgLy8gbWV0aG9kczogbmV3IGFyYzQuRHluYW1pY0FycmF5KAogICAgLy8gICBuZXcgTWV0aG9kSW5mbyh7CiAgICAvLyAgICAgc2VsZWN0b3I6IG5ldyBhcmM0LlN0YXRpY0J5dGVzPDQ+KG1ldGhvZFNlbGVjdG9yKCd0ZXN0KCl2b2lkJykpLAogICAgLy8gICAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgIH0pLAogICAgLy8gKSwKICAgIGJ5dGVjXzEgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAwMQogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2MC03MgogICAgLy8gbmV3IFBsdWdpbkluZm8oewogICAgLy8gICBsYXN0VmFsaWRSb3VuZDogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoKSwKICAgIC8vICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgpLAogICAgLy8gICBhZG1pblByaXZpbGVnZXM6IG5ldyBhcmM0LkJvb2woZmFsc2UpLAogICAgLy8gICBtZXRob2RzOiBuZXcgYXJjNC5EeW5hbWljQXJyYXkoCiAgICAvLyAgICAgbmV3IE1ldGhvZEluZm8oewogICAgLy8gICAgICAgc2VsZWN0b3I6IG5ldyBhcmM0LlN0YXRpY0J5dGVzPDQ+KG1ldGhvZFNlbGVjdG9yKCd0ZXN0KCl2b2lkJykpLAogICAgLy8gICAgICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgICAgICBsYXN0Q2FsbGVkOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgIH0pLAogICAgLy8gICApLAogICAgLy8gfSksCiAgICBieXRlY18xIC8vIDB4CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2MQogICAgLy8gbGFzdFZhbGlkUm91bmQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICBieXRlYyA0IC8vIDB4MDAwMDAwMDAwMDAwMDAwMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NjAtNzIKICAgIC8vIG5ldyBQbHVnaW5JbmZvKHsKICAgIC8vICAgbGFzdFZhbGlkUm91bmQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KCksCiAgICAvLyAgIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoKSwKICAgIC8vICAgYWRtaW5Qcml2aWxlZ2VzOiBuZXcgYXJjNC5Cb29sKGZhbHNlKSwKICAgIC8vICAgbWV0aG9kczogbmV3IGFyYzQuRHluYW1pY0FycmF5KAogICAgLy8gICAgIG5ldyBNZXRob2RJbmZvKHsKICAgIC8vICAgICAgIHNlbGVjdG9yOiBuZXcgYXJjNC5TdGF0aWNCeXRlczw0PihtZXRob2RTZWxlY3RvcigndGVzdCgpdm9pZCcpKSwKICAgIC8vICAgICAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vICAgICB9KSwKICAgIC8vICAgKSwKICAgIC8vIH0pLAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2MgogICAgLy8gY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2MC03MgogICAgLy8gbmV3IFBsdWdpbkluZm8oewogICAgLy8gICBsYXN0VmFsaWRSb3VuZDogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoKSwKICAgIC8vICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgpLAogICAgLy8gICBhZG1pblByaXZpbGVnZXM6IG5ldyBhcmM0LkJvb2woZmFsc2UpLAogICAgLy8gICBtZXRob2RzOiBuZXcgYXJjNC5EeW5hbWljQXJyYXkoCiAgICAvLyAgICAgbmV3IE1ldGhvZEluZm8oewogICAgLy8gICAgICAgc2VsZWN0b3I6IG5ldyBhcmM0LlN0YXRpY0J5dGVzPDQ+KG1ldGhvZFNlbGVjdG9yKCd0ZXN0KCl2b2lkJykpLAogICAgLy8gICAgICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgICAgICBsYXN0Q2FsbGVkOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgIH0pLAogICAgLy8gICApLAogICAgLy8gfSksCiAgICBjb25jYXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LXN0cnVjdC5hbGdvLnRzOjYzCiAgICAvLyBsYXN0Q2FsbGVkOiBuZXcgYXJjNC5VaW50TjY0KCksCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NjAtNzIKICAgIC8vIG5ldyBQbHVnaW5JbmZvKHsKICAgIC8vICAgbGFzdFZhbGlkUm91bmQ6IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KCksCiAgICAvLyAgIGxhc3RDYWxsZWQ6IG5ldyBhcmM0LlVpbnRONjQoKSwKICAgIC8vICAgYWRtaW5Qcml2aWxlZ2VzOiBuZXcgYXJjNC5Cb29sKGZhbHNlKSwKICAgIC8vICAgbWV0aG9kczogbmV3IGFyYzQuRHluYW1pY0FycmF5KAogICAgLy8gICAgIG5ldyBNZXRob2RJbmZvKHsKICAgIC8vICAgICAgIHNlbGVjdG9yOiBuZXcgYXJjNC5TdGF0aWNCeXRlczw0PihtZXRob2RTZWxlY3RvcigndGVzdCgpdm9pZCcpKSwKICAgIC8vICAgICAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vICAgICB9KSwKICAgIC8vICAgKSwKICAgIC8vIH0pLAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2NAogICAgLy8gYWRtaW5Qcml2aWxlZ2VzOiBuZXcgYXJjNC5Cb29sKGZhbHNlKSwKICAgIHB1c2hieXRlcyAweDAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1zdHJ1Y3QuYWxnby50czo2MC03MgogICAgLy8gbmV3IFBsdWdpbkluZm8oewogICAgLy8gICBsYXN0VmFsaWRSb3VuZDogbmV3IGFyYzQuVWludE42NCgxKSwKICAgIC8vICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoKSwKICAgIC8vICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgpLAogICAgLy8gICBhZG1pblByaXZpbGVnZXM6IG5ldyBhcmM0LkJvb2woZmFsc2UpLAogICAgLy8gICBtZXRob2RzOiBuZXcgYXJjNC5EeW5hbWljQXJyYXkoCiAgICAvLyAgICAgbmV3IE1ldGhvZEluZm8oewogICAgLy8gICAgICAgc2VsZWN0b3I6IG5ldyBhcmM0LlN0YXRpY0J5dGVzPDQ+KG1ldGhvZFNlbGVjdG9yKCd0ZXN0KCl2b2lkJykpLAogICAgLy8gICAgICAgY29vbGRvd246IG5ldyBhcmM0LlVpbnRONjQoMSksCiAgICAvLyAgICAgICBsYXN0Q2FsbGVkOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgIH0pLAogICAgLy8gICApLAogICAgLy8gfSksCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMjcgLy8gMjcKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NDEKICAgIC8vIHBsdWdpbnMgPSBCb3hNYXA8c3RyaW5nLCBQbHVnaW5JbmZvPih7IGtleVByZWZpeDogJ3BsdWdpbnMnIH0pCiAgICBieXRlYyA1IC8vICJwbHVnaW5zIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NTgKICAgIC8vIHRoaXMucGx1Z2lucy5zZXQoCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6NTgtNzMKICAgIC8vIHRoaXMucGx1Z2lucy5zZXQoCiAgICAvLyAgIGtleSwKICAgIC8vICAgbmV3IFBsdWdpbkluZm8oewogICAgLy8gICAgIGxhc3RWYWxpZFJvdW5kOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KCksCiAgICAvLyAgICAgbGFzdENhbGxlZDogbmV3IGFyYzQuVWludE42NCgpLAogICAgLy8gICAgIGFkbWluUHJpdmlsZWdlczogbmV3IGFyYzQuQm9vbChmYWxzZSksCiAgICAvLyAgICAgbWV0aG9kczogbmV3IGFyYzQuRHluYW1pY0FycmF5KAogICAgLy8gICAgICAgbmV3IE1ldGhvZEluZm8oewogICAgLy8gICAgICAgICBzZWxlY3RvcjogbmV3IGFyYzQuU3RhdGljQnl0ZXM8ND4obWV0aG9kU2VsZWN0b3IoJ3Rlc3QoKXZvaWQnKSksCiAgICAvLyAgICAgICAgIGNvb2xkb3duOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgICAgICBsYXN0Q2FsbGVkOiBuZXcgYXJjNC5VaW50TjY0KDEpLAogICAgLy8gICAgICAgfSksCiAgICAvLyAgICAgKSwKICAgIC8vICAgfSksCiAgICAvLyApCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtc3RydWN0LmFsZ28udHM6OlN0cnVjdERlbW8uX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlKCkgLT4gdm9pZDoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlOgoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlX2Jsb2NrQDA6CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StructDemo",
        "methods": [
            {
                "name": "testVectorCreationAndEquality",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addVectors",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "v2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "implicitCastingAndSpreading",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "toAndFromBytes",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "toNative",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "v1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "getPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])"
                }
            },
            {
                "name": "getMain",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])"
                }
            },
            {
                "name": "setPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}