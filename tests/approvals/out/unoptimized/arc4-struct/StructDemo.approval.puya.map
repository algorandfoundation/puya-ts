{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc4-struct.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAQA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;AAuBE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvBF;;;AAuBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhBF;;;AAgBE;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AATF;;;AAAA;;;AASE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAEe;AAAgB;AAAhB;AAAsC;AAAtC;AACJ;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AACW;AAAsC;AAAtC;AAAgB;AAAhB;AACJ;AAAP;;AAGF;;;AAEyB;;AAAA;AAAA;AAAA;AAAE;AAAY;;AAAA;AAAA;AAAA;AAAE;AAAnB;AAAf;AACkB;;AAAA;AAAA;AAAA;AAAE;AAAY;;AAAA;AAAA;AAAA;AAAE;AAAnB;AAAf;AAFE;AAAA;;AAAA;AAAA;AAAA;AAAP;AAMF;;;AACwB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAX;AAAA;;AAAA;AAAA;AAAA;AACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAX;AAAA;;AAAA;AAAA;AAAA;AACJ;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;;AAGF;;;AACQ;;AACN;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1"
    },
    "6": {
      "op": "bytecblock 0x 0x0000000000000000 0x151f7c75"
    },
    "23": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "26": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "30": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "pushbytes 0x89388ddd // method \"testVectorCreationAndEquality()void\"",
      "defined_out": [
        "Method(testVectorCreationAndEquality()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testVectorCreationAndEquality()void)"
      ]
    },
    "39": {
      "op": "pushbytes 0xef322d6d // method \"addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))",
        "Method(testVectorCreationAndEquality()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testVectorCreationAndEquality()void)",
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))"
      ]
    },
    "45": {
      "op": "pushbytes 0xcb81deb8 // method \"implicitCastingAndSpreading((uint64,uint64))void\"",
      "defined_out": [
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))",
        "Method(implicitCastingAndSpreading((uint64,uint64))void)",
        "Method(testVectorCreationAndEquality()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testVectorCreationAndEquality()void)",
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))",
        "Method(implicitCastingAndSpreading((uint64,uint64))void)"
      ]
    },
    "51": {
      "op": "pushbytes 0xf79d6c46 // method \"toAndFromBytes((uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))",
        "Method(implicitCastingAndSpreading((uint64,uint64))void)",
        "Method(testVectorCreationAndEquality()void)",
        "Method(toAndFromBytes((uint64,uint64))(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testVectorCreationAndEquality()void)",
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))",
        "Method(implicitCastingAndSpreading((uint64,uint64))void)",
        "Method(toAndFromBytes((uint64,uint64))(uint64,uint64))"
      ]
    },
    "57": {
      "op": "uncover 4",
      "stack_out": [
        "Method(testVectorCreationAndEquality()void)",
        "Method(addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64))",
        "Method(implicitCastingAndSpreading((uint64,uint64))void)",
        "Method(toAndFromBytes((uint64,uint64))(uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "59": {
      "op": "match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_implicitCastingAndSpreading_route@5 main_toAndFromBytes_route@6",
      "stack_out": []
    },
    "69": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "block": "main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "71": {
      "block": "main_toAndFromBytes_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "73": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "75": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "78": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "79": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "80": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "81": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%3#0"
      ]
    },
    "84": {
      "callsub": "tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes",
      "op": "callsub toAndFromBytes",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "87": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "90": {
      "op": "log",
      "stack_out": []
    },
    "91": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@14"
    },
    "95": {
      "block": "main_implicitCastingAndSpreading_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "97": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "98": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "99": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "100": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "103": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "104": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "105": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "108": {
      "callsub": "tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading",
      "op": "callsub implicitCastingAndSpreading",
      "stack_out": []
    },
    "111": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "112": {
      "op": "b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@14"
    },
    "115": {
      "block": "main_addVectors_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "117": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "119": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "120": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "123": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "131": {
      "callsub": "tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors",
      "op": "callsub addVectors",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "134": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@14"
    },
    "142": {
      "block": "main_testVectorCreationAndEquality_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "144": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "145": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "146": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "147": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "149": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "150": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "151": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "152": {
      "callsub": "tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality",
      "op": "callsub testVectorCreationAndEquality"
    },
    "155": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@14"
    },
    "159": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "161": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%23#0"
      ]
    },
    "163": {
      "op": "match main___algots__.defaultCreate@10",
      "stack_out": []
    },
    "167": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "170": {
      "block": "main___algots__.defaultCreate@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "173": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "174": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "175": {
      "callsub": "tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "178": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@14"
    },
    "182": {
      "subroutine": "tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality",
      "params": {},
      "block": "testVectorCreationAndEquality",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "183": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000000"
      ]
    },
    "184": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0"
      ]
    },
    "185": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "0x0000000000000000"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "v1#0"
      ],
      "stack_out": [
        "v1#0"
      ]
    },
    "187": {
      "op": "dup",
      "defined_out": [
        "v1#0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0",
        "v1#0 (copy)"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "v1#0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0",
        "v1#0 (copy)",
        "0"
      ]
    },
    "189": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "v1#0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0",
        "v1#0 (copy)",
        "0",
        "8"
      ]
    },
    "190": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "v1#0"
      ],
      "stack_out": [
        "v1#0",
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "log",
      "stack_out": [
        "v1#0"
      ]
    },
    "192": {
      "op": "dup",
      "stack_out": [
        "v1#0",
        "v1#0 (copy)"
      ]
    },
    "193": {
      "op": "intc_1 // 8",
      "stack_out": [
        "v1#0",
        "v1#0 (copy)",
        "8"
      ]
    },
    "194": {
      "op": "dup",
      "stack_out": [
        "v1#0",
        "v1#0 (copy)",
        "8",
        "8"
      ]
    },
    "195": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "v1#0"
      ],
      "stack_out": [
        "v1#0",
        "tmp%1#0"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": [
        "v1#0"
      ]
    },
    "197": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "v1#0",
        "0x"
      ]
    },
    "198": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "v1#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "v1#0"
      ],
      "stack_out": [
        "v1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "200": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "v1#0",
        "encoded_tuple_buffer%4#0",
        "0x0000000000000000"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "203": {
      "op": "assert",
      "stack_out": []
    },
    "204": {
      "retsub": true,
      "op": "retsub"
    },
    "205": {
      "subroutine": "tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors",
      "params": {
        "v1#0": "bytes",
        "v2#0": "bytes"
      },
      "block": "addVectors",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "208": {
      "op": "frame_dig -2",
      "defined_out": [
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)"
      ]
    },
    "210": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0"
      ]
    },
    "211": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0",
        "8"
      ]
    },
    "212": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "214": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "v2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "v2#0 (copy)"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "v2#0 (copy)",
        "0"
      ]
    },
    "217": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%1#0",
        "v2#0 (copy)",
        "0",
        "8"
      ]
    },
    "218": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "220": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "221": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "222": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "v1#0 (copy)"
      ]
    },
    "224": {
      "op": "intc_1 // 8",
      "stack_out": [
        "val_as_bytes%0#0",
        "v1#0 (copy)",
        "8"
      ]
    },
    "225": {
      "op": "dup",
      "stack_out": [
        "val_as_bytes%0#0",
        "v1#0 (copy)",
        "8",
        "8"
      ]
    },
    "226": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%12#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%12#0"
      ]
    },
    "227": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%13#0"
      ]
    },
    "228": {
      "op": "frame_dig -1",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%13#0",
        "v2#0 (copy)"
      ]
    },
    "230": {
      "op": "intc_1 // 8",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%13#0",
        "v2#0 (copy)",
        "8"
      ]
    },
    "231": {
      "op": "dup",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%13#0",
        "v2#0 (copy)",
        "8",
        "8"
      ]
    },
    "232": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "234": {
      "op": "+",
      "defined_out": [
        "to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%3#0"
      ]
    },
    "235": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ]
    },
    "236": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "237": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%3#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%3#0"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "242": {
      "retsub": true,
      "op": "retsub"
    },
    "243": {
      "subroutine": "tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading",
      "params": {
        "v1#0": "bytes"
      },
      "block": "implicitCastingAndSpreading",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "246": {
      "op": "frame_dig -1",
      "defined_out": [
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)"
      ]
    },
    "248": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0"
      ]
    },
    "249": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0 (copy)",
        "0",
        "8"
      ]
    },
    "250": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0"
      ],
      "stack_out": [
        "item0%0#0"
      ]
    },
    "251": {
      "op": "frame_dig -1",
      "stack_out": [
        "item0%0#0",
        "v1#0 (copy)"
      ]
    },
    "253": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%0#0",
        "v1#0 (copy)",
        "8"
      ]
    },
    "254": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "v1#0 (copy)",
        "8",
        "8"
      ]
    },
    "255": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%1#0"
      ]
    },
    "256": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "item0%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%1#0",
        "0x"
      ]
    },
    "257": {
      "op": "uncover 2",
      "stack_out": [
        "item1%1#0",
        "0x",
        "item0%0#0"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item1%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "260": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "item1%1#0"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "v2#0"
      ],
      "stack_out": [
        "v2#0"
      ]
    },
    "262": {
      "op": "dup",
      "defined_out": [
        "v2#0",
        "v2#0 (copy)"
      ],
      "stack_out": [
        "v2#0",
        "v2#0 (copy)"
      ]
    },
    "263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "v2#0",
        "v2#0 (copy)",
        "0"
      ]
    },
    "264": {
      "op": "intc_1 // 8",
      "stack_out": [
        "v2#0",
        "v2#0 (copy)",
        "0",
        "8"
      ]
    },
    "265": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "v2#0"
      ],
      "stack_out": [
        "v2#0",
        "tmp%0#0"
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "v2#0"
      ]
    },
    "267": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "v2#0",
        "v2#0 (copy)"
      ]
    },
    "268": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "v2#0",
        "v2#0 (copy)",
        "8"
      ]
    },
    "269": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "v2#0",
        "v2#0 (copy)",
        "8",
        "8"
      ]
    },
    "270": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "v2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "v2#0",
        "tmp%3#0"
      ]
    },
    "271": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "v2#0",
        "tmp%3#0",
        "0x"
      ]
    },
    "272": {
      "op": "uncover 3",
      "stack_out": [
        "v2#0",
        "tmp%3#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%3#0",
        "v2#0"
      ],
      "stack_out": [
        "v2#0",
        "tmp%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "v2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ]
    },
    "276": {
      "op": "concat",
      "defined_out": [
        "v2#0",
        "v3#0"
      ],
      "stack_out": [
        "v2#0",
        "v3#0"
      ]
    },
    "277": {
      "op": "frame_dig -1",
      "stack_out": [
        "v2#0",
        "v3#0",
        "v1#0 (copy)"
      ]
    },
    "279": {
      "op": "uncover 2",
      "stack_out": [
        "v3#0",
        "v1#0 (copy)",
        "v2#0"
      ]
    },
    "281": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "v3#0"
      ],
      "stack_out": [
        "v3#0",
        "tmp%4#0"
      ]
    },
    "282": {
      "op": "assert",
      "stack_out": [
        "v3#0"
      ]
    },
    "283": {
      "op": "frame_dig -1",
      "stack_out": [
        "v3#0",
        "v1#0 (copy)"
      ]
    },
    "285": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "286": {
      "op": "assert",
      "stack_out": []
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "subroutine": "tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes",
      "params": {
        "v1#0": "bytes"
      },
      "block": "toAndFromBytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "291": {
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "293": {
      "retsub": true,
      "op": "retsub"
    },
    "294": {
      "subroutine": "tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}