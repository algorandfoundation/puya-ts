#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1 5
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@5
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x937e729a // method "testMatches(uint64)void"
    uncover 1
    match main_testMatches_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    err

main_testMatches_route@3:
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub testMatches
    b main_switch_case_next@4

main___algots__.defaultCreate@5:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    return


// tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches[routing]() -> void:
testMatches:
    b testMatches_block@0

testMatches_block@0:
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches
    intc_2 // 1
    return


// tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(x: uint64) -> void:
tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches:
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    proto 1 0
    b tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches_block@0

tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches_block@0:
    // tests/approvals/match-expr.algo.ts:6
    // const xObj = { x }
    frame_dig -1
    itob
    pushbytes 0x
    uncover 1
    concat
    // tests/approvals/match-expr.algo.ts:7
    // assertMatch(xObj, { x: 5 }, 'x should be 5')
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    intc_3 // 5
    ==
    assert // x should be 5
    // tests/approvals/match-expr.algo.ts:8
    // assertMatch(xObj, { x: { not: 3 } }, 'x should not be 3')
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 3 // 3
    !=
    assert // x should not be 3
    // tests/approvals/match-expr.algo.ts:9
    // assertMatch(Txn, { sender: { not: Global.zeroAddress } })
    txn Sender
    global ZeroAddress
    !=
    assert // assert target is match for conditions
    // tests/approvals/match-expr.algo.ts:10
    // assert(match(xObj, { x: { greaterThan: 4 } }))
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 4 // 4
    >
    assert
    // tests/approvals/match-expr.algo.ts:11
    // assert(match(xObj, { x: { lessThan: 6 } }))
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 6 // 6
    <
    assert
    // tests/approvals/match-expr.algo.ts:12
    // assert(match(xObj, { x: { greaterThanEq: 5 } }))
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    intc_3 // 5
    >=
    assert
    // tests/approvals/match-expr.algo.ts:13
    // assert(match(xObj, { x: { lessThanEq: 5 } }))
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    intc_3 // 5
    <=
    assert
    // tests/approvals/match-expr.algo.ts:15
    // const xArray = [x]
    intc_2 // 1
    itob
    extract 6 2
    frame_dig -1
    itob
    concat
    // tests/approvals/match-expr.algo.ts:17
    // assert(match(xArray, [5]))
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 1
    ==
    cover 1
    dup
    len
    cover 1
    dup
    pushint 2 // 2
    uncover 3
    substring3
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 5
    ==
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:18
    // assert(match(xArray, [{ greaterThan: 4 }]))
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 1
    ==
    cover 1
    dup
    len
    cover 1
    dup
    pushint 2 // 2
    uncover 3
    substring3
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 4 // 4
    >
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:19
    // assert(match(xArray, [{ lessThan: 6 }]))
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 1
    ==
    cover 1
    dup
    len
    cover 1
    dup
    pushint 2 // 2
    uncover 3
    substring3
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 6 // 6
    <
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:20
    // assert(match(xArray, [{ greaterThanEq: 5 }]))
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 1
    ==
    cover 1
    dup
    len
    cover 1
    dup
    pushint 2 // 2
    uncover 3
    substring3
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 5
    >=
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:21
    // assert(match(xArray, [{ lessThanEq: 5 }]))
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 1
    ==
    cover 1
    dup
    len
    cover 1
    pushint 2 // 2
    uncover 2
    substring3
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 5
    <=
    &&
    assert
    retsub


// tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
