#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1 5

main_block@0:

main_block@1:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x937e729a // method "testMatches(uint64)void"
    swap
    match main_testMatches_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__@11:
    return

main_testMatches_route@3:
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    callsub testMatches
    intc_2 // 1
    b main_after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__@11


// tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(x: uint64) -> void:
testMatches:
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    proto 1 0

testMatches_block@0:
    // tests/approvals/match-expr.algo.ts:6
    // const xObj = { x }
    frame_dig -1
    itob
    pushbytes 0x
    swap
    concat
    // tests/approvals/match-expr.algo.ts:7
    // assertMatch(xObj, { x: 5 }, 'x should be 5')
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    intc_3 // 5
    ==
    assert // x should be 5
    // tests/approvals/match-expr.algo.ts:8
    // assertMatch(xObj, { x: { not: 3 } }, 'x should not be 3')
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 3 // 3
    !=
    assert // x should not be 3
    // tests/approvals/match-expr.algo.ts:9
    // assertMatch(Txn, { sender: { not: Global.zeroAddress } })
    txn Sender
    global ZeroAddress
    !=
    assert // assert target is match for conditions
    // tests/approvals/match-expr.algo.ts:10
    // assert(match(xObj, { x: { greaterThan: 4 } }))
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 4 // 4
    >
    assert
    // tests/approvals/match-expr.algo.ts:11
    // assert(match(xObj, { x: { lessThan: 6 } }))
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    pushint 6 // 6
    <
    assert
    // tests/approvals/match-expr.algo.ts:12
    // assert(match(xObj, { x: { greaterThanEq: 5 } }))
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    intc_3 // 5
    >=
    assert
    // tests/approvals/match-expr.algo.ts:13
    // assert(match(xObj, { x: { lessThanEq: 5 } }))
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    intc_3 // 5
    <=
    assert
    // tests/approvals/match-expr.algo.ts:15
    // const xArray = [x]
    intc_2 // 1
    itob
    extract 6 2
    frame_dig -1
    itob
    concat
    // tests/approvals/match-expr.algo.ts:17
    // assert(match(xArray, [5]))
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    ==
    swap
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 5
    ==
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:18
    // assert(match(xArray, [{ greaterThan: 4 }]))
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    ==
    swap
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 4 // 4
    >
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:19
    // assert(match(xArray, [{ lessThan: 6 }]))
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    ==
    swap
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 6 // 6
    <
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:20
    // assert(match(xArray, [{ greaterThanEq: 5 }]))
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    ==
    swap
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 5
    >=
    uncover 2
    &&
    assert
    // tests/approvals/match-expr.algo.ts:21
    // assert(match(xArray, [{ lessThanEq: 5 }]))
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    ==
    swap
    extract 2 0
    intc_0 // 0
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_3 // 5
    <=
    &&
    assert
    retsub


// tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
