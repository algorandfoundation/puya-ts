{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/match-expr.algo.ts"
  ],
  "mappings": ";;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AACE;;;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACE;;;AACQ;;AACN;AAAuB;AAAvB;AAAA;AAEO;AAAgC;;AAAhC;AAAP;AACO;AAA6B;;AAA7B;AAAP;AACO;AAAkC;AAAlC;AAAP;AACsC;AAA/B;AAAP;AAEgB;;;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAV;AAEC;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAe;AAAf;AAAA;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAA;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;;AAA3B;AAAA;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AAAhC;AAAA;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AAA7B;AAAA;;;;AAAP;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 5"
    },
    "7": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "10": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "11": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "14": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "17": {
      "op": "pushbytes 0x937e729a // method \"testMatches(uint64)void\"",
      "defined_out": [
        "Method(testMatches(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testMatches(uint64)void)"
      ]
    },
    "23": {
      "op": "swap",
      "stack_out": [
        "Method(testMatches(uint64)void)",
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "match main_testMatches_route@3",
      "stack_out": []
    },
    "28": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "block": "main_after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "30": {
      "block": "main_testMatches_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "32": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "33": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "34": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "37": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "38": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "39": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "40": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "43": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "44": {
      "callsub": "tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches",
      "op": "callsub testMatches",
      "stack_out": []
    },
    "47": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "b main_after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__@11"
    },
    "51": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "53": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "54": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%8#0"
      ]
    },
    "55": {
      "op": "match main___algots__.defaultCreate@7",
      "stack_out": []
    },
    "59": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "62": {
      "block": "main___algots__.defaultCreate@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "64": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "66": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "67": {
      "callsub": "tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "70": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "b main_after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__@11"
    },
    "74": {
      "subroutine": "tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches",
      "params": {
        "x#0": "uint64"
      },
      "block": "testMatches",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "77": {
      "op": "frame_dig -1",
      "defined_out": [
        "xObj.x#0"
      ],
      "stack_out": [
        "xObj.x#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ],
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ]
    },
    "80": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ],
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)",
        "5"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "xObj.x#0"
      ],
      "stack_out": [
        "xObj.x#0",
        "tmp%0#0"
      ]
    },
    "82": {
      "error": "x should be 5",
      "op": "assert // x should be 5",
      "stack_out": [
        "xObj.x#0"
      ]
    },
    "83": {
      "op": "dup",
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ]
    },
    "84": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ],
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)",
        "4"
      ]
    },
    "86": {
      "op": ">",
      "defined_out": [
        "tmp%1#0",
        "xObj.x#0"
      ],
      "stack_out": [
        "xObj.x#0",
        "tmp%1#0"
      ]
    },
    "87": {
      "op": "assert",
      "stack_out": [
        "xObj.x#0"
      ]
    },
    "88": {
      "op": "dup",
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ]
    },
    "89": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ],
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)",
        "6"
      ]
    },
    "91": {
      "op": "<",
      "defined_out": [
        "tmp%2#0",
        "xObj.x#0"
      ],
      "stack_out": [
        "xObj.x#0",
        "tmp%2#0"
      ]
    },
    "92": {
      "op": "assert",
      "stack_out": [
        "xObj.x#0"
      ]
    },
    "93": {
      "op": "dup",
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)"
      ]
    },
    "94": {
      "op": "intc_3 // 5",
      "stack_out": [
        "xObj.x#0",
        "xObj.x#0 (copy)",
        "5"
      ]
    },
    "95": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0",
        "xObj.x#0"
      ],
      "stack_out": [
        "xObj.x#0",
        "tmp%3#0"
      ]
    },
    "96": {
      "op": "assert",
      "stack_out": [
        "xObj.x#0"
      ]
    },
    "97": {
      "op": "intc_3 // 5",
      "stack_out": [
        "xObj.x#0",
        "5"
      ]
    },
    "98": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "99": {
      "op": "assert",
      "stack_out": []
    },
    "100": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "104": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "106": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "107": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "110": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "x#0 (copy)"
      ]
    },
    "112": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1"
      ]
    },
    "113": {
      "op": "pushbytes 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "0x"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%sub_item%0#1"
      ]
    },
    "116": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "117": {
      "op": "pushbytes 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "122": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "123": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "124": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "125": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "126": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "127": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0"
      ]
    },
    "132": {
      "op": "dup",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "xArray#0",
        "xArray#0",
        "0"
      ]
    },
    "134": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%5#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%5#0"
      ]
    },
    "135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%5#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%5#0",
        "1"
      ]
    },
    "136": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#0"
      ]
    },
    "137": {
      "op": "bz testMatches_bool_false@3",
      "stack_out": [
        "xArray#0"
      ]
    },
    "140": {
      "block": "testMatches_and_contd@1",
      "stack_in": [
        "xArray#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "142": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%0#0"
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "146": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "array_head_and_tail%0#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%0#0",
        "0",
        "8"
      ]
    },
    "147": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "148": {
      "op": "intc_2 // 8",
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "149": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%0#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "arc4_item%0#0"
      ]
    },
    "150": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%7#0"
      ]
    },
    "151": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "tmp%7#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%7#0",
        "5"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "tmp%8#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%8#0"
      ]
    },
    "153": {
      "op": "bz testMatches_bool_false@3",
      "stack_out": [
        "xArray#0"
      ]
    },
    "156": {
      "block": "testMatches_bool_true@2",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%0#0"
      ]
    },
    "157": {
      "block": "testMatches_bool_merge@4",
      "stack_in": [
        "xArray#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0"
      ]
    },
    "158": {
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0",
        "0"
      ]
    },
    "161": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%9#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%9#0"
      ]
    },
    "162": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%9#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%9#0",
        "1"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%10#0"
      ]
    },
    "164": {
      "op": "bz testMatches_bool_false@7",
      "stack_out": [
        "xArray#0"
      ]
    },
    "167": {
      "block": "testMatches_and_contd@5",
      "stack_in": [
        "xArray#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "169": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%1#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%1#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%1#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%1#0",
        "0"
      ]
    },
    "173": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "array_head_and_tail%1#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%1#0",
        "0",
        "8"
      ]
    },
    "174": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "175": {
      "op": "intc_2 // 8",
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "8"
      ]
    },
    "176": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%1#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "arc4_item%1#0"
      ]
    },
    "177": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%11#0"
      ]
    },
    "178": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%11#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%11#0",
        "4"
      ]
    },
    "180": {
      "op": ">",
      "defined_out": [
        "tmp%12#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%12#0"
      ]
    },
    "181": {
      "op": "bz testMatches_bool_false@7",
      "stack_out": [
        "xArray#0"
      ]
    },
    "184": {
      "block": "testMatches_bool_true@6",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%1#0"
      ]
    },
    "185": {
      "block": "testMatches_bool_merge@8",
      "stack_in": [
        "xArray#0",
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0"
      ]
    },
    "186": {
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0",
        "0"
      ]
    },
    "189": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%13#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%13#0"
      ]
    },
    "190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%13#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%13#0",
        "1"
      ]
    },
    "191": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%14#0"
      ]
    },
    "192": {
      "op": "bz testMatches_bool_false@11",
      "stack_out": [
        "xArray#0"
      ]
    },
    "195": {
      "block": "testMatches_and_contd@9",
      "stack_in": [
        "xArray#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "197": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%2#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%2#0"
      ]
    },
    "200": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%2#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%2#0",
        "0"
      ]
    },
    "201": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "array_head_and_tail%2#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%2#0",
        "0",
        "8"
      ]
    },
    "202": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "203": {
      "op": "intc_2 // 8",
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "8"
      ]
    },
    "204": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%2#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "arc4_item%2#0"
      ]
    },
    "205": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%15#0"
      ]
    },
    "206": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "tmp%15#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%15#0",
        "6"
      ]
    },
    "208": {
      "op": "<",
      "defined_out": [
        "tmp%16#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%16#0"
      ]
    },
    "209": {
      "op": "bz testMatches_bool_false@11",
      "stack_out": [
        "xArray#0"
      ]
    },
    "212": {
      "block": "testMatches_bool_true@10",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%2#0"
      ]
    },
    "213": {
      "block": "testMatches_bool_merge@12",
      "stack_in": [
        "xArray#0",
        "and_result%2#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0"
      ]
    },
    "214": {
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0",
        "0"
      ]
    },
    "217": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%17#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%17#0"
      ]
    },
    "218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%17#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%17#0",
        "1"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "tmp%18#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%18#0"
      ]
    },
    "220": {
      "op": "bz testMatches_bool_false@15",
      "stack_out": [
        "xArray#0"
      ]
    },
    "223": {
      "block": "testMatches_and_contd@13",
      "stack_in": [
        "xArray#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "225": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%3#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%3#0"
      ]
    },
    "228": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%3#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%3#0",
        "0"
      ]
    },
    "229": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "array_head_and_tail%3#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%3#0",
        "0",
        "8"
      ]
    },
    "230": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ]
    },
    "231": {
      "op": "intc_2 // 8",
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "8"
      ]
    },
    "232": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%3#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "arc4_item%3#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%19#0"
      ]
    },
    "234": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "tmp%19#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%19#0",
        "5"
      ]
    },
    "235": {
      "op": ">=",
      "defined_out": [
        "tmp%20#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%20#0"
      ]
    },
    "236": {
      "op": "bz testMatches_bool_false@15",
      "stack_out": [
        "xArray#0"
      ]
    },
    "239": {
      "block": "testMatches_bool_true@14",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%3#0"
      ]
    },
    "240": {
      "block": "testMatches_bool_merge@16",
      "stack_in": [
        "xArray#0",
        "and_result%3#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0"
      ]
    },
    "241": {
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "243": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0",
        "0"
      ]
    },
    "244": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%21#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%21#0"
      ]
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%21#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%21#0",
        "1"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%22#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%22#0"
      ]
    },
    "247": {
      "op": "bz testMatches_bool_false@19",
      "stack_out": [
        "xArray#0"
      ]
    },
    "250": {
      "block": "testMatches_and_contd@17",
      "stack_in": [
        "xArray#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "xArray#0"
      ]
    },
    "252": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%4#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%4#0"
      ]
    },
    "255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%4#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%4#0",
        "0"
      ]
    },
    "256": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "array_head_and_tail%4#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%4#0",
        "0",
        "8"
      ]
    },
    "257": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%4#0",
        "item_offset%4#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ]
    },
    "258": {
      "op": "intc_2 // 8",
      "stack_out": [
        "xArray#0",
        "array_head_and_tail%4#0",
        "item_offset%4#0",
        "8"
      ]
    },
    "259": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%4#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "arc4_item%4#0"
      ]
    },
    "260": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%23#0"
      ]
    },
    "261": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "tmp%23#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%23#0",
        "5"
      ]
    },
    "262": {
      "op": "<=",
      "defined_out": [
        "tmp%24#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%24#0"
      ]
    },
    "263": {
      "op": "bz testMatches_bool_false@19",
      "stack_out": [
        "xArray#0"
      ]
    },
    "266": {
      "block": "testMatches_bool_true@18",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%4#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%4#0"
      ]
    },
    "267": {
      "block": "testMatches_bool_merge@20",
      "stack_in": [
        "xArray#0",
        "and_result%4#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0"
      ]
    },
    "268": {
      "retsub": true,
      "op": "retsub"
    },
    "269": {
      "block": "testMatches_bool_false@19",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%4#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%4#0"
      ]
    },
    "270": {
      "op": "b testMatches_bool_merge@20"
    },
    "273": {
      "block": "testMatches_bool_false@15",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%3#0"
      ]
    },
    "274": {
      "op": "b testMatches_bool_merge@16"
    },
    "277": {
      "block": "testMatches_bool_false@11",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%2#0"
      ]
    },
    "278": {
      "op": "b testMatches_bool_merge@12"
    },
    "281": {
      "block": "testMatches_bool_false@7",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%1#0"
      ]
    },
    "282": {
      "op": "b testMatches_bool_merge@8"
    },
    "285": {
      "block": "testMatches_bool_false@3",
      "stack_in": [
        "xArray#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "and_result%0#0"
      ]
    },
    "286": {
      "op": "b testMatches_bool_merge@4"
    },
    "289": {
      "subroutine": "tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}