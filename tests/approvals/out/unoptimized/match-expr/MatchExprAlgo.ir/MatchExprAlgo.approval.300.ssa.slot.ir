main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testMatches(uint64)void" => block@3, * => block@4}
    block@3: // testMatches_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(tmp%7#0)
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        goto block@10
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        switch tmp%8#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        (assert tmp%10#0) // can only call when creating
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate()
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@10
    block@10: // after_if_else_L4
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(x: uint64) -> void:
    block@0: // L5
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob x#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let xObj#0: Encoded(uint64) = tmp%0#0
        let aggregate%extract%0#1: bytes = (extract3 xObj#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%1#0: bool = (== values%0#0 5u)
        (assert tmp%1#0) // x should be 5
        let aggregate%extract%1#1: bytes = (extract3 xObj#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%2#0: bool = (!= values%1#0 3u)
        (assert tmp%2#0) // x should not be 3
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: account = (global ZeroAddress)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        let aggregate%extract%2#1: bytes = (extract3 xObj#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%6#0: bool = (> values%2#0 4u)
        (assert tmp%6#0)
        let aggregate%extract%3#1: bytes = (extract3 xObj#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#1
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let tmp%7#0: bool = (< values%3#0 6u)
        (assert tmp%7#0)
        let aggregate%extract%4#1: bytes = (extract3 xObj#0 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#1
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let tmp%8#0: bool = (>= values%4#0 5u)
        (assert tmp%8#0)
        let aggregate%extract%5#1: bytes = (extract3 xObj#0 0u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%5#1
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let tmp%9#0: bool = (<= values%5#0 5u)
        (assert tmp%9#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob x#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat aggregate%len_u16%0#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%head%1#1
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let xArray#0: Encoded(len+uint64[]) = encoded_array%0#0
        let array_length%0#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%10#0: bool = (== array_length%0#0 1u)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) xArray#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%6#0: uint64 = (btoi array_item%0#0)
        let tmp%11#0: bool = (== values%6#0 5u)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        (assert tmp%12#0)
        let array_length%1#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%13#0: bool = (== array_length%1#0 1u)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) xArray#0)
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%7#0: uint64 = (btoi array_item%1#0)
        let tmp%14#0: bool = (> values%7#0 4u)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let array_length%2#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%16#0: bool = (== array_length%2#0 1u)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) xArray#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%8#0: uint64 = (btoi array_item%2#0)
        let tmp%17#0: bool = (< values%8#0 6u)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        (assert tmp%18#0)
        let array_length%3#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%19#0: bool = (== array_length%3#0 1u)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) xArray#0)
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%9#0: uint64 = (btoi array_item%3#0)
        let tmp%20#0: bool = (>= values%9#0 5u)
        let tmp%21#0: bool = (&& tmp%19#0 tmp%20#0)
        (assert tmp%21#0)
        let array_length%4#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%22#0: bool = (== array_length%4#0 1u)
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) xArray#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%4#1 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%10#0: uint64 = (btoi array_item%4#0)
        let tmp%23#0: bool = (<= values%10#0 5u)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        (assert tmp%24#0)
        return 

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 