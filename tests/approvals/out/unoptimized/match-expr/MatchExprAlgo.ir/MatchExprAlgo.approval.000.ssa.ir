main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testMatches(uint64)void" => block@2, * => block@3}
    block@2: // testMatches_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches[routing]()
        goto block@3
    block@3: // switch_case_next_L4
        goto block@5
    block@4: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L4
        exit 0u

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(tmp%0#0)
        exit 1u

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(x: uint64) -> void:
    block@0: // L5
        let tmp%0#0: Encoded(uint64) = bytes_encode<(uint64)>(x#0)
        let xObj#0: Encoded(uint64) = tmp%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: bool = (== values%0#0 5u)
        (assert tmp%1#0) // x should be 5
        let tuple_item%1#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%2#0: bool = (!= values%1#0 3u)
        (assert tmp%2#0) // x should not be 3
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: account = (global ZeroAddress)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        let tuple_item%2#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%6#0: bool = (> values%2#0 4u)
        (assert tmp%6#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%7#0: bool = (< values%3#0 6u)
        (assert tmp%7#0)
        let tuple_item%4#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%4#0)
        let tmp%8#0: bool = (>= values%4#0 5u)
        (assert tmp%8#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tmp%9#0: bool = (<= values%5#0 5u)
        (assert tmp%9#0)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(x#0)
        let xArray#0: Encoded(len+uint64[]) = encoded_array%0#0
        let tmp%10#0: uint64 = array_len(xArray#0)
        let tmp%11#0: bool = (== tmp%10#0 1u)
        let array_item%0#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%12#0: bool = (== values%6#0 5u)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = array_len(xArray#0)
        let tmp%15#0: bool = (== tmp%14#0 1u)
        let array_item%1#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%16#0: bool = (> values%7#0 4u)
        let tmp%17#0: bool = (&& tmp%15#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = array_len(xArray#0)
        let tmp%19#0: bool = (== tmp%18#0 1u)
        let array_item%2#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%20#0: bool = (< values%8#0 6u)
        let tmp%21#0: bool = (&& tmp%19#0 tmp%20#0)
        (assert tmp%21#0)
        let tmp%22#0: uint64 = array_len(xArray#0)
        let tmp%23#0: bool = (== tmp%22#0 1u)
        let array_item%3#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%24#0: bool = (>= values%9#0 5u)
        let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
        (assert tmp%25#0)
        let tmp%26#0: uint64 = array_len(xArray#0)
        let tmp%27#0: bool = (== tmp%26#0 1u)
        let array_item%4#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%28#0: bool = (<= values%10#0 5u)
        let tmp%29#0: bool = (&& tmp%27#0 tmp%28#0)
        (assert tmp%29#0)
        return 

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 