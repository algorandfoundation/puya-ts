main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testMatches(uint64)void" => block@2, * => block@3}
    block@2: // testMatches_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(tmp%7#0)
        return 1u
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        goto block@9
    block@5: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        switch tmp%8#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        (assert tmp%10#0) // can only call when creating
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@9
    block@9: // after_if_else_L4
        return 0u

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(x: uint64) -> void:
    block@0: // L5
        let tmp%0#0: Encoded(uint64) = bytes_encode<(uint64)>(x#0)
        let xObj#0: Encoded(uint64) = tmp%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: bool = (== values%0#0 5u)
        (assert tmp%1#0) // x should be 5
        let tuple_item%1#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%2#0: bool = (!= values%1#0 3u)
        (assert tmp%2#0) // x should not be 3
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: account = (global ZeroAddress)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        let tuple_item%2#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%6#0: bool = (> values%2#0 4u)
        (assert tmp%6#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%7#0: bool = (< values%3#0 6u)
        (assert tmp%7#0)
        let tuple_item%4#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%4#0)
        let tmp%8#0: bool = (>= values%4#0 5u)
        (assert tmp%8#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(xObj#0, 0)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tmp%9#0: bool = (<= values%5#0 5u)
        (assert tmp%9#0)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(x#0)
        let xArray#0: Encoded(len+uint64[]) = encoded_array%0#0
        let array_length%0#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%10#0: bool = (== array_length%0#0 1u)
        goto tmp%10#0 ? block@1 : block@3
    block@1: // and_contd_L17
        let array_item%0#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%11#0: bool = (== values%6#0 5u)
        goto tmp%11#0 ? block@2 : block@3
    block@2: // bool_true_L17
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L17
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L17
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2)
        let array_length%1#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%12#0: bool = (== array_length%1#0 1u)
        goto tmp%12#0 ? block@5 : block@7
    block@5: // and_contd_L18
        let array_item%1#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%13#0: bool = (> values%7#0 4u)
        goto tmp%13#0 ? block@6 : block@7
    block@6: // bool_true_L18
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L18
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L18
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2)
        let array_length%2#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%14#0: bool = (== array_length%2#0 1u)
        goto tmp%14#0 ? block@9 : block@11
    block@9: // and_contd_L19
        let array_item%2#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%15#0: bool = (< values%8#0 6u)
        goto tmp%15#0 ? block@10 : block@11
    block@10: // bool_true_L19
        let and_result%2#0: bool = 1u
        goto block@12
    block@11: // bool_false_L19
        let and_result%2#1: bool = 0u
        goto block@12
    block@12: // bool_merge_L19
        let and_result%2#2: bool = φ(and_result%2#0 <- block@10, and_result%2#1 <- block@11)
        (assert and_result%2#2)
        let array_length%3#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%16#0: bool = (== array_length%3#0 1u)
        goto tmp%16#0 ? block@13 : block@15
    block@13: // and_contd_L20
        let array_item%3#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%17#0: bool = (>= values%9#0 5u)
        goto tmp%17#0 ? block@14 : block@15
    block@14: // bool_true_L20
        let and_result%3#0: bool = 1u
        goto block@16
    block@15: // bool_false_L20
        let and_result%3#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L20
        let and_result%3#2: bool = φ(and_result%3#0 <- block@14, and_result%3#1 <- block@15)
        (assert and_result%3#2)
        let array_length%4#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%18#0: bool = (== array_length%4#0 1u)
        goto tmp%18#0 ? block@17 : block@19
    block@17: // and_contd_L21
        let array_item%4#0: Encoded(uint64) = extract_value(xArray#0, 0u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%19#0: bool = (<= values%10#0 5u)
        goto tmp%19#0 ? block@18 : block@19
    block@18: // bool_true_L21
        let and_result%4#0: bool = 1u
        goto block@20
    block@19: // bool_false_L21
        let and_result%4#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L21
        let and_result%4#2: bool = φ(and_result%4#0 <- block@18, and_result%4#1 <- block@19)
        (assert and_result%4#2)
        return 

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 