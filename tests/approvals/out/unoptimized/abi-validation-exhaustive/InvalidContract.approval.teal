#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/abi-validation-exhaustive.algo.ts:148
    // class InvalidContract extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@5
    b main_call_NoOp@2

main_call_NoOp@2:
    // tests/approvals/abi-validation-exhaustive.algo.ts:148
    // class InvalidContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x45cf05ef // method "invalidValue()uint64[3]"
    uncover 1
    match main_invalidValue_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@8

main_after_if_else@8:
    // tests/approvals/abi-validation-exhaustive.algo.ts:148
    // class InvalidContract extends Contract {
    err

main_invalidValue_route@3:
    // tests/approvals/abi-validation-exhaustive.algo.ts:152
    // invalidValue() {
    callsub invalidValue
    b main_switch_case_next@4

main_create_NoOp@5:
    // tests/approvals/abi-validation-exhaustive.algo.ts:148
    // class InvalidContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x4c5c61ba // method "create()void"
    uncover 1
    match main_create_route@6
    b main_switch_case_next@7

main_switch_case_next@7:
    b main_after_if_else@8

main_create_route@6:
    // tests/approvals/abi-validation-exhaustive.algo.ts:149
    // @arc4.abimethod({ onCreate: 'require' })
    callsub create
    b main_switch_case_next@7


// tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.create[routing]() -> void:
create:
    b create_block@0

create_block@0:
    // tests/approvals/abi-validation-exhaustive.algo.ts:149
    // @arc4.abimethod({ onCreate: 'require' })
    callsub tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.create
    intc_1 // 1
    return


// tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue[routing]() -> void:
invalidValue:
    b invalidValue_block@0

invalidValue_block@0:
    // tests/approvals/abi-validation-exhaustive.algo.ts:152
    // invalidValue() {
    callsub tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.create() -> void:
tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.create:
    b tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.create_block@0

tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.create_block@0:
    retsub


// tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue() -> bytes:
tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue:
    b tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue_block@0

tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue_block@0:
    // tests/approvals/abi-validation-exhaustive.algo.ts:153
    // return convertBytes<arc4.StaticArray<arc4.Uint64, 3>>(Bytes('invalid'), { strategy: 'unsafe-cast' })
    pushbytes "invalid"
    retsub
