{
    "name": "AbiValidationExhaustive",
    "structs": {
        "ARC4DynamicStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            },
            {
                "name": "baz",
                "type": "string"
            }
        ],
        "ARC4StaticStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            }
        ],
        "WithABool": [
            {
                "name": "foo",
                "type": "uint8"
            },
            {
                "name": "bar",
                "type": "byte[]"
            },
            {
                "name": "baz",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "validate_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8",
            "args": [
                {
                    "type": "uint8",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint512",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_ufixed64",
            "args": [
                {
                    "type": "ufixed64x2",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8_arr",
            "args": [
                {
                    "type": "uint8[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8_arr3",
            "args": [
                {
                    "type": "uint8[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_byte",
            "args": [
                {
                    "type": "byte",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_address",
            "args": [
                {
                    "type": "address",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_account",
            "args": [
                {
                    "type": "address",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool_arr",
            "args": [
                {
                    "type": "bool[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool_arr3",
            "args": [
                {
                    "type": "bool[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_tuple",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_tuple",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "struct": "ARC4StaticStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "struct": "ARC4DynamicStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8,string)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8,string)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_with_a_bool",
            "args": [
                {
                    "type": "(uint8,byte[],bool)",
                    "struct": "WithABool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_c2c",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1430
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        219,
                        236,
                        256,
                        276,
                        296,
                        316,
                        336,
                        356,
                        376,
                        396,
                        416,
                        436,
                        456,
                        476,
                        496,
                        516,
                        536,
                        556,
                        576,
                        596,
                        616,
                        636,
                        656,
                        676
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        707
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        224,
                        241,
                        261,
                        281,
                        301,
                        321,
                        341,
                        361,
                        381,
                        401,
                        421,
                        441,
                        461,
                        481,
                        501,
                        521,
                        541,
                        561,
                        581,
                        601,
                        621,
                        641,
                        661,
                        681
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1049,
                        1135
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        764,
                        812,
                        829,
                        868,
                        926,
                        972,
                        991,
                        1020,
                        1083,
                        1169,
                        1218
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        983
                    ],
                    "errorMessage": "invalid number of bytes for ARC4DynamicStruct"
                },
                {
                    "pc": [
                        948
                    ],
                    "errorMessage": "invalid number of bytes for ARC4StaticStruct"
                },
                {
                    "pc": [
                        1230
                    ],
                    "errorMessage": "invalid number of bytes for WithABool"
                },
                {
                    "pc": [
                        794
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        1110
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<ARC4DynamicStruct>"
                },
                {
                    "pc": [
                        1001
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<ARC4StaticStruct>"
                },
                {
                    "pc": [
                        881
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.bool>"
                },
                {
                    "pc": [
                        773,
                        821,
                        838
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        1194
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<ARC4DynamicStruct, 3>"
                },
                {
                    "pc": [
                        1012
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<ARC4StaticStruct, 3>"
                },
                {
                    "pc": [
                        891
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.bool, 3>"
                },
                {
                    "pc": [
                        1435
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint64, 3>"
                },
                {
                    "pc": [
                        849,
                        860
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        784
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 3>"
                },
                {
                    "pc": [
                        937
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>"
                },
                {
                    "pc": [
                        902
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>"
                },
                {
                    "pc": [
                        756
                    ],
                    "errorMessage": "invalid number of bytes for arc4.ufixed64x2"
                },
                {
                    "pc": [
                        745
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        724
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        734,
                        804
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint8"
                },
                {
                    "pc": [
                        1210
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of WithABool"
                },
                {
                    "pc": [
                        964,
                        1078,
                        1164
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of ARC4DynamicStruct"
                },
                {
                    "pc": [
                        918
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>"
                },
                {
                    "pc": [
                        1057
                    ],
                    "errorMessage": "invalid tail pointer for arc4.dynamic_array<ARC4DynamicStruct>"
                },
                {
                    "pc": [
                        1143
                    ],
                    "errorMessage": "invalid tail pointer for arc4.static_array<ARC4DynamicStruct, 3>"
                },
                {
                    "pc": [
                        914,
                        960,
                        1074,
                        1160,
                        1205
                    ],
                    "errorMessage": "invalid tuple encoding"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAECCzEbIhNBAqY2GgCABE11jFmABGu3uWOABBiFLNaABFsu++GABOzKepiABJTac8CABCYjDeGABD7Hf6yABPERwH6ABD9ot9GABGdMDoeABAkauEiABPMon7iABJGs7lGABE5kHpmABGU248KABJNSLLiABL+IiCWABCKqkNaABG7stJ2ABCg4iCmABH6AS7+ABM4mxyyABNC1gvFPGI4YAcsBtwGjAY8BewFnAVMBPwErARcBAwDvANsAxwCzAJ8AiwB3AGMATwA7ACcAEwACIkMxGSISRDEYIhNEiAPsI0L/7jEZIhJEMRgiE0Q2GgGIA7QjQv/aMRkiEkQxGCITRDYaAYgDTCNC/8YxGSISRDEYIhNENhoBiALWI0L/sjEZIhJEMRgiE0Q2GgGIArcjQv+eMRkiEkQxGCITRDYaAYgCkSNC/4oxGSISRDEYIhNENhoBiAJaI0L/djEZIhJEMRgiE0Q2GgGIAjsjQv9iMRkiEkQxGCITRDYaAYgCBCNC/04xGSISRDEYIhNENhoBiAHlI0L/OjEZIhJEMRgiE0Q2GgGIAccjQv8mMRkiEkQxGCITRDYaAYgBniNC/xIxGSISRDEYIhNENhoBiAF/I0L+/jEZIhJEMRgiE0Q2GgGIAWAjQv7qMRkiEkQxGCITRDYaAYgBOyNC/tYxGSISRDEYIhNENhoBiAEWI0L+wjEZIhJEMRgiE0Q2GgGIAPgjQv6uMRkiEkQxGCITRDYaAYgA2iNC/poxGSISRDEYIhNENhoBiAC7I0L+hjEZIhJEMRgiE0Q2GgGIAJYjQv5yMRkiEkQxGCITRDYaAYgAdyNC/l4xGSISRDEYIhNENhoBiABYI0L+SjEZIhJEMRgiE0Q2GgGIADojQv42MRkiEkQxGCITRDYaAYgAGyNC/iIxGSJMjgEAA0L+FjEYIhJEiALWI0L+C4oBAIv/FYEIEkSJigEAi/8VIxJEiYoBAIv/FYFAEkSJigEAi/8VgQgSRImKAQCL/yJZIwskCIv/FRJEiYoBAIv/FYEDEkSJigEAi/8VIxJEiYoBAIv/FSMSRImKAQCL/yJZIwskCIv/FRJEiYoBAIv/IlkjCyQIi/8VEkSJigEAi/8VgSASRImKAQCL/xWBIBJEiYoBAIv/IlmBBwiBCAokCIv/FRJEiYoBAIv/FSMSRImKAQCL/xWBCRJEiYoBAIv/FYv/gQlZSSUSRIv/TE8CUiJZIwskCCUIi/8VEkSJigEAi/8VgQkSRImKAQCL/xWL/4EJWUklEkSL/0xPAlIiWSMLJAglCIv/FRJEiYoBAIv/IlmBCQskCIv/FRJEiYoBAIv/FYEbEkSJigEAi/8iWUmL/1cCAEwkCyKLA4sADEEAP4sDJAuLAUlOAkxZSYsCSU4EEkRLARVMTwJMTwJSSRVMSYEJWUklEkRPAlIiWSMLJAglCAiMAosDIwiMA0L/uYsCJAiL/xUSRImKAQCBAyQLIosBgQMMQQA8iwEkC4v/TFlJiwBJTgMSRIv/FYv/TwJPAlJJFUxJgQlZSSUSRE8CUiJZIwskCCUICIwAiwEjCIwBQv+8i/8ViwASRImKAQCL/xWL/yNZSYEEEkSL/0xPAlIiWSMLJAiBBAiL/xUSRImxgARMXGG6shoisjgisjYisjcksjUisjSABAqBAUOyQoAAskKAaAogAgABMRsiE0EARDYaAIAETFxhuoAERc8F708CjgIAHAACIkMxGSISRDEYIhNEiAAigAQVH3x1TFCwI0L/5TEZIhJEMRgiEkSIAAcjQv/UQv/QiYABZ4AHaW52YWxpZGcigAFnZUSJskCAALJAIrIZgQayECKyAbO3AD2xgARFzwXvshqyGIEGshAisgGztD5JVwQATFcABIAEFR98dRJEFYEYEkSJiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}