{
    "name": "AbiValidationExhaustive",
    "structs": {
        "ARC4DynamicStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            },
            {
                "name": "baz",
                "type": "string"
            }
        ],
        "ARC4StaticStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            }
        ],
        "WithABool": [
            {
                "name": "foo",
                "type": "uint8"
            },
            {
                "name": "bar",
                "type": "byte[]"
            },
            {
                "name": "baz",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "validate_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8",
            "args": [
                {
                    "type": "uint8",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint512",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_ufixed64",
            "args": [
                {
                    "type": "ufixed64x2",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8_arr",
            "args": [
                {
                    "type": "uint8[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8_arr3",
            "args": [
                {
                    "type": "uint8[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_byte",
            "args": [
                {
                    "type": "byte",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_address",
            "args": [
                {
                    "type": "address",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_account",
            "args": [
                {
                    "type": "address",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool_arr",
            "args": [
                {
                    "type": "bool[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool_arr3",
            "args": [
                {
                    "type": "bool[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_tuple",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_tuple",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "struct": "ARC4StaticStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "struct": "ARC4DynamicStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8,string)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8,string)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_with_a_bool",
            "args": [
                {
                    "type": "(uint8,byte[],bool)",
                    "struct": "WithABool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        211,
                        231,
                        251,
                        271,
                        291,
                        311,
                        331,
                        351,
                        371,
                        391,
                        411,
                        431,
                        451,
                        471,
                        491,
                        511,
                        531,
                        551,
                        571,
                        591,
                        611,
                        631,
                        651
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        682
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        216,
                        236,
                        256,
                        276,
                        296,
                        316,
                        336,
                        356,
                        376,
                        396,
                        416,
                        436,
                        456,
                        476,
                        496,
                        516,
                        536,
                        556,
                        576,
                        596,
                        616,
                        636,
                        656
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1024,
                        1110
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        739,
                        787,
                        804,
                        843,
                        901,
                        947,
                        966,
                        995,
                        1058,
                        1144,
                        1193
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        958
                    ],
                    "errorMessage": "invalid number of bytes for ARC4DynamicStruct"
                },
                {
                    "pc": [
                        923
                    ],
                    "errorMessage": "invalid number of bytes for ARC4StaticStruct"
                },
                {
                    "pc": [
                        1205
                    ],
                    "errorMessage": "invalid number of bytes for WithABool"
                },
                {
                    "pc": [
                        769
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        1085
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<ARC4DynamicStruct>"
                },
                {
                    "pc": [
                        976
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<ARC4StaticStruct>"
                },
                {
                    "pc": [
                        856
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.bool>"
                },
                {
                    "pc": [
                        748,
                        796,
                        813
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        1169
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<ARC4DynamicStruct, 3>"
                },
                {
                    "pc": [
                        987
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<ARC4StaticStruct, 3>"
                },
                {
                    "pc": [
                        866
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.bool, 3>"
                },
                {
                    "pc": [
                        824,
                        835
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        759
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 3>"
                },
                {
                    "pc": [
                        912
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>"
                },
                {
                    "pc": [
                        877
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>"
                },
                {
                    "pc": [
                        731
                    ],
                    "errorMessage": "invalid number of bytes for arc4.ufixed64x2"
                },
                {
                    "pc": [
                        720
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        699
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        709,
                        779
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint8"
                },
                {
                    "pc": [
                        1185
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of WithABool"
                },
                {
                    "pc": [
                        939,
                        1053,
                        1139
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of ARC4DynamicStruct"
                },
                {
                    "pc": [
                        893
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>"
                },
                {
                    "pc": [
                        1032
                    ],
                    "errorMessage": "invalid tail pointer for arc4.dynamic_array<ARC4DynamicStruct>"
                },
                {
                    "pc": [
                        1118
                    ],
                    "errorMessage": "invalid tail pointer for arc4.static_array<ARC4DynamicStruct, 3>"
                },
                {
                    "pc": [
                        889,
                        935,
                        1049,
                        1135,
                        1180
                    ],
                    "errorMessage": "invalid tuple encoding"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAECCzEbIhNBAo02GgCABE11jFmABGu3uWOABBiFLNaABFsu++GABOzKepiABJTac8CABCYjDeGABD7Hf6yABPERwH6ABD9ot9GABGdMDoeABAkauEiABPMon7iABJGs7lGABE5kHpmABGU248KABJNSLLiABL+IiCWABCKqkNaABG7stJ2ABCg4iCmABH6AS7+ABM4mxyxPF44XAboBpgGSAX4BagFWAUIBLgEaAQYA8gDeAMoAtgCiAI4AegBmAFIAPgAqABYAAiJDMRkiEkQxGCITRDYaAYgDtCNC/+sxGSISRDEYIhNENhoBiANMI0L/1zEZIhJEMRgiE0Q2GgGIAtYjQv/DMRkiEkQxGCITRDYaAYgCtyNC/68xGSISRDEYIhNENhoBiAKRI0L/mzEZIhJEMRgiE0Q2GgGIAlojQv+HMRkiEkQxGCITRDYaAYgCOyNC/3MxGSISRDEYIhNENhoBiAIEI0L/XzEZIhJEMRgiE0Q2GgGIAeUjQv9LMRkiEkQxGCITRDYaAYgBxyNC/zcxGSISRDEYIhNENhoBiAGeI0L/IzEZIhJEMRgiE0Q2GgGIAX8jQv8PMRkiEkQxGCITRDYaAYgBYCNC/vsxGSISRDEYIhNENhoBiAE7I0L+5zEZIhJEMRgiE0Q2GgGIARYjQv7TMRkiEkQxGCITRDYaAYgA+CNC/r8xGSISRDEYIhNENhoBiADaI0L+qzEZIhJEMRgiE0Q2GgGIALsjQv6XMRkiEkQxGCITRDYaAYgAliNC/oMxGSISRDEYIhNENhoBiAB3I0L+bzEZIhJEMRgiE0Q2GgGIAFgjQv5bMRkiEkQxGCITRDYaAYgAOiNC/kcxGSISRDEYIhNENhoBiAAbI0L+MzEZIkyOAQADQv4nMRgiEkSIAgkjQv4cigEAi/8VgQgSRImKAQCL/xUjEkSJigEAi/8VgUASRImKAQCL/xWBCBJEiYoBAIv/IlkjCyQIi/8VEkSJigEAi/8VgQMSRImKAQCL/xUjEkSJigEAi/8VIxJEiYoBAIv/IlkjCyQIi/8VEkSJigEAi/8iWSMLJAiL/xUSRImKAQCL/xWBIBJEiYoBAIv/FYEgEkSJigEAi/8iWYEHCIEICiQIi/8VEkSJigEAi/8VIxJEiYoBAIv/FYEJEkSJigEAi/8Vi/+BCVlJJRJEi/9MTwJSIlkjCyQIJQiL/xUSRImKAQCL/xWBCRJEiYoBAIv/FYv/gQlZSSUSRIv/TE8CUiJZIwskCCUIi/8VEkSJigEAi/8iWYEJCyQIi/8VEkSJigEAi/8VgRsSRImKAQCL/yJZSYv/VwIATCQLIosDiwAMQQA/iwMkC4sBSU4CTFlJiwJJTgQSREsBFUxPAkxPAlJJFUxJgQlZSSUSRE8CUiJZIwskCCUICIwCiwMjCIwDQv+5iwIkCIv/FRJEiYoBAIEDJAsiiwGBAwxBADyLASQLi/9MWUmLAElOAxJEi/8Vi/9PAk8CUkkVTEmBCVlJJRJETwJSIlkjCyQIJQgIjACLASMIjAFC/7yL/xWLABJEiYoBAIv/FYv/I1lJgQQSRIv/TE8CUiJZIwskCIEECIv/FRJEiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}