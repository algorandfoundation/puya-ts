{
    "name": "AbiValidationExhaustive",
    "structs": {
        "ARC4DynamicStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            },
            {
                "name": "baz",
                "type": "string"
            }
        ],
        "ARC4StaticStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            }
        ],
        "WithABool": [
            {
                "name": "foo",
                "type": "uint8"
            },
            {
                "name": "bar",
                "type": "byte[]"
            },
            {
                "name": "baz",
                "type": "bool"
            }
        ],
        "NativeDynamicStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            },
            {
                "name": "baz",
                "type": "string"
            }
        ],
        "NativeStaticStruct": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "bar",
                "type": "uint8"
            }
        ]
    },
    "methods": [
        {
            "name": "validate_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8",
            "args": [
                {
                    "type": "uint8",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint512",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_ufixed64",
            "args": [
                {
                    "type": "ufixed64x2",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8_arr",
            "args": [
                {
                    "type": "uint8[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_uint8_arr3",
            "args": [
                {
                    "type": "uint8[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_byte",
            "args": [
                {
                    "type": "byte",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_address",
            "args": [
                {
                    "type": "address",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_account",
            "args": [
                {
                    "type": "address",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool_arr",
            "args": [
                {
                    "type": "bool[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_bool_arr3",
            "args": [
                {
                    "type": "bool[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_tuple",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_tuple",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "struct": "ARC4StaticStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "struct": "ARC4DynamicStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_static_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8,string)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8,string)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_dynamic_struct_with_a_bool",
            "args": [
                {
                    "type": "(uint8,byte[],bool)",
                    "struct": "WithABool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_native_static_struct",
            "args": [
                {
                    "type": "(uint64,uint8)",
                    "struct": "NativeStaticStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_native_dynamic_struct",
            "args": [
                {
                    "type": "(uint64,uint8,string)",
                    "struct": "NativeDynamicStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_native_static_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_native_static_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_native_dynamic_struct_arr",
            "args": [
                {
                    "type": "(uint64,uint8,string)[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_native_dynamic_struct_arr3",
            "args": [
                {
                    "type": "(uint64,uint8,string)[3]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_c2c",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1972
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        27
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        487
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1231,
                        1333,
                        1574,
                        1676
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        884,
                        944,
                        964,
                        1012,
                        1082,
                        1135,
                        1157,
                        1192,
                        1268,
                        1368,
                        1424,
                        1478,
                        1500,
                        1535,
                        1611,
                        1711
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        1146
                    ],
                    "errorMessage": "invalid number of bytes for ARC4DynamicStruct"
                },
                {
                    "pc": [
                        1107
                    ],
                    "errorMessage": "invalid number of bytes for ARC4StaticStruct"
                },
                {
                    "pc": [
                        1436
                    ],
                    "errorMessage": "invalid number of bytes for WithABool"
                },
                {
                    "pc": [
                        920
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        1298
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<ARC4DynamicStruct>"
                },
                {
                    "pc": [
                        1167
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<ARC4StaticStruct>"
                },
                {
                    "pc": [
                        1027
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.bool>"
                },
                {
                    "pc": [
                        893,
                        953,
                        973
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        1641
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct>"
                },
                {
                    "pc": [
                        1510
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct>"
                },
                {
                    "pc": [
                        1396
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<ARC4DynamicStruct, 3>"
                },
                {
                    "pc": [
                        1181
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<ARC4StaticStruct, 3>"
                },
                {
                    "pc": [
                        1040
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.bool, 3>"
                },
                {
                    "pc": [
                        1977
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint64, 3>"
                },
                {
                    "pc": [
                        987,
                        1001
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        907
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 3>"
                },
                {
                    "pc": [
                        1739
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct, 3>"
                },
                {
                    "pc": [
                        1524
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct, 3>"
                },
                {
                    "pc": [
                        1093
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>"
                },
                {
                    "pc": [
                        1054
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>"
                },
                {
                    "pc": [
                        873
                    ],
                    "errorMessage": "invalid number of bytes for arc4.ufixed64x2"
                },
                {
                    "pc": [
                        859
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        832
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        845,
                        933
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint8"
                },
                {
                    "pc": [
                        1489
                    ],
                    "errorMessage": "invalid number of bytes for tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct"
                },
                {
                    "pc": [
                        1450
                    ],
                    "errorMessage": "invalid number of bytes for tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct"
                },
                {
                    "pc": [
                        1415
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of (uint8,(len+uint8[]),bool1)"
                },
                {
                    "pc": [
                        1073,
                        1126,
                        1263,
                        1363,
                        1469,
                        1606,
                        1706
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))"
                },
                {
                    "pc": [
                        1239,
                        1582
                    ],
                    "errorMessage": "invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])"
                },
                {
                    "pc": [
                        1341,
                        1684
                    ],
                    "errorMessage": "invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]"
                },
                {
                    "pc": [
                        1069,
                        1122,
                        1259,
                        1359,
                        1410,
                        1465,
                        1602,
                        1702
                    ],
                    "errorMessage": "invalid tuple encoding"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}