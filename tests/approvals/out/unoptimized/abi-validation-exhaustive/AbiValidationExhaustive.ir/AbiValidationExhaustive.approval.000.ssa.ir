main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__puya_arc4_router__() -> bool:
    block@0: // L18
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@36
    block@1: // abi_routing_L18
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@34
    block@2: // call_NoOp_L18
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "validate_uint64(uint64)void" => block@3, method "validate_uint8(uint8)void" => block@4, method "validate_uint512(uint512)void" => block@5, method "validate_ufixed64(ufixed64x2)void" => block@6, method "validate_uint8_arr(uint8[])void" => block@7, method "validate_uint8_arr3(uint8[3])void" => block@8, method "validate_bool(bool)void" => block@9, method "validate_byte(byte)void" => block@10, method "validate_string(string)void" => block@11, method "validate_bytes(byte[])void" => block@12, method "validate_address(address)void" => block@13, method "validate_account(address)void" => block@14, method "validate_bool_arr(bool[])void" => block@15, method "validate_bool_arr3(bool[3])void" => block@16, method "validate_static_tuple((uint64,uint8))void" => block@17, method "validate_dynamic_tuple((uint64,uint8,string))void" => block@18, method "validate_static_struct((uint64,uint8))void" => block@19, method "validate_dynamic_struct((uint64,uint8,string))void" => block@20, method "validate_static_struct_arr((uint64,uint8)[])void" => block@21, method "validate_static_struct_arr3((uint64,uint8)[3])void" => block@22, method "validate_dynamic_struct_arr((uint64,uint8,string)[])void" => block@23, method "validate_dynamic_struct_arr3((uint64,uint8,string)[3])void" => block@24, method "validate_dynamic_struct_with_a_bool((uint8,byte[],bool))void" => block@25, method "validate_native_static_struct((uint64,uint8))void" => block@26, method "validate_native_dynamic_struct((uint64,uint8,string))void" => block@27, method "validate_native_static_struct_arr((uint64,uint8)[])void" => block@28, method "validate_native_static_struct_arr3((uint64,uint8)[3])void" => block@29, method "validate_native_dynamic_struct_arr((uint64,uint8,string)[])void" => block@30, method "validate_native_dynamic_struct_arr3((uint64,uint8,string)[3])void" => block@31, method "validate_c2c()void" => block@32, * => block@33}
    block@3: // validate_uint64_route_L19
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint64[routing]()
        goto block@33
    block@4: // validate_uint8_route_L23
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8[routing]()
        goto block@33
    block@5: // validate_uint512_route_L27
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint512[routing]()
        goto block@33
    block@6: // validate_ufixed64_route_L31
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_ufixed64[routing]()
        goto block@33
    block@7: // validate_uint8_arr_route_L35
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr[routing]()
        goto block@33
    block@8: // validate_uint8_arr3_route_L39
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr3[routing]()
        goto block@33
    block@9: // validate_bool_route_L43
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool[routing]()
        goto block@33
    block@10: // validate_byte_route_L47
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_byte[routing]()
        goto block@33
    block@11: // validate_string_route_L51
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_string[routing]()
        goto block@33
    block@12: // validate_bytes_route_L55
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bytes[routing]()
        goto block@33
    block@13: // validate_address_route_L59
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_address[routing]()
        goto block@33
    block@14: // validate_account_route_L63
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_account[routing]()
        goto block@33
    block@15: // validate_bool_arr_route_L67
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr[routing]()
        goto block@33
    block@16: // validate_bool_arr3_route_L71
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr3[routing]()
        goto block@33
    block@17: // validate_static_tuple_route_L75
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_tuple[routing]()
        goto block@33
    block@18: // validate_dynamic_tuple_route_L79
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_tuple[routing]()
        goto block@33
    block@19: // validate_static_struct_route_L83
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct[routing]()
        goto block@33
    block@20: // validate_dynamic_struct_route_L87
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct[routing]()
        goto block@33
    block@21: // validate_static_struct_arr_route_L91
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr[routing]()
        goto block@33
    block@22: // validate_static_struct_arr3_route_L95
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr3[routing]()
        goto block@33
    block@23: // validate_dynamic_struct_arr_route_L99
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr[routing]()
        goto block@33
    block@24: // validate_dynamic_struct_arr3_route_L103
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr3[routing]()
        goto block@33
    block@25: // validate_dynamic_struct_with_a_bool_route_L107
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_with_a_bool[routing]()
        goto block@33
    block@26: // validate_native_static_struct_route_L111
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct[routing]()
        goto block@33
    block@27: // validate_native_dynamic_struct_route_L115
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct[routing]()
        goto block@33
    block@28: // validate_native_static_struct_arr_route_L119
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr[routing]()
        goto block@33
    block@29: // validate_native_static_struct_arr3_route_L123
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr3[routing]()
        goto block@33
    block@30: // validate_native_dynamic_struct_arr_route_L127
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr[routing]()
        goto block@33
    block@31: // validate_native_dynamic_struct_arr3_route_L131
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr3[routing]()
        goto block@33
    block@32: // validate_c2c_route_L136
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_c2c[routing]()
        goto block@33
    block@33: // switch_case_next_L18
        goto block@35
    block@34: // create_NoOp_L18
        goto block@35
    block@35: // after_if_else_L18
        goto block@37
    block@36: // __algots__.defaultCreate_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__algots__.defaultCreate()
        exit 1u
    block@37: // after_if_else_L18
        exit 0u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint64[routing]() -> void:
    block@0: // L19
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint64(as_Encoded(uint64)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8[routing]() -> void:
    block@0: // L23
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8(as_Encoded(uint8)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint512[routing]() -> void:
    block@0: // L27
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint512(as_Encoded(uint512)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_ufixed64[routing]() -> void:
    block@0: // L31
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_ufixed64(as_Encoded(uint64)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr[routing]() -> void:
    block@0: // L35
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr(as_Encoded(len+uint8[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr3[routing]() -> void:
    block@0: // L39
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8[3])%0#0: Encoded(uint8[3]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr3(as_Encoded(uint8[3])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool[routing]() -> void:
    block@0: // L43
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool(as_Encoded(bool8)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_byte[routing]() -> void:
    block@0: // L47
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_byte(as_Encoded(uint8)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_string[routing]() -> void:
    block@0: // L51
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_string(as_Encoded(len+utf8[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bytes[routing]() -> void:
    block@0: // L55
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bytes(as_Encoded(len+uint8[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_address[routing]() -> void:
    block@0: // L59
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_address(as_Encoded(uint8[32])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_account[routing]() -> void:
    block@0: // L63
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: account = decode_bytes<account>(as_Encoded(uint8[32])%0#0)
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_account(tmp%1#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr[routing]() -> void:
    block@0: // L67
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr(as_Encoded(len+bool1[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr3[routing]() -> void:
    block@0: // L71
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(bool1[3])%0#0: Encoded(bool1[3]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr3(as_Encoded(bool1[3])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_tuple[routing]() -> void:
    block@0: // L75
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint8)%0#0: Encoded(uint64,uint8) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_tuple(as_Encoded(uint64,uint8)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_tuple[routing]() -> void:
    block@0: // L79
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint8,(len+utf8[]))%0#0: Encoded(uint64,uint8,(len+utf8[])) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_tuple(as_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct[routing]() -> void:
    block@0: // L83
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint8)%0#0: Encoded(uint64,uint8) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct(as_Encoded(uint64,uint8)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct[routing]() -> void:
    block@0: // L87
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint8,(len+utf8[]))%0#0: Encoded(uint64,uint8,(len+utf8[])) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct(as_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr[routing]() -> void:
    block@0: // L91
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+(uint64,uint8)[])%0#0: Encoded(len+(uint64,uint8)[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr(as_Encoded(len+(uint64,uint8)[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr3[routing]() -> void:
    block@0: // L95
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded((uint64,uint8)[3])%0#0: Encoded((uint64,uint8)[3]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr3(as_Encoded((uint64,uint8)[3])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr[routing]() -> void:
    block@0: // L99
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0: Encoded(len+(uint64,uint8,(len+utf8[]))[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr(as_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr3[routing]() -> void:
    block@0: // L103
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0: Encoded((uint64,uint8,(len+utf8[]))[3]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr3(as_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_with_a_bool[routing]() -> void:
    block@0: // L107
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8,(len+uint8[]),bool1)%0#0: Encoded(uint8,(len+uint8[]),bool1) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_with_a_bool(as_Encoded(uint8,(len+uint8[]),bool1)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct[routing]() -> void:
    block@0: // L111
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint8)%0#0: Encoded(uint64,uint8) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct(as_Encoded(uint64,uint8)%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct[routing]() -> void:
    block@0: // L115
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint8,(len+utf8[]))%0#0: Encoded(uint64,uint8,(len+utf8[])) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct(as_Encoded(uint64,uint8,(len+utf8[]))%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr[routing]() -> void:
    block@0: // L119
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+(uint64,uint8)[])%0#0: Encoded(len+(uint64,uint8)[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr(as_Encoded(len+(uint64,uint8)[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr3[routing]() -> void:
    block@0: // L123
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded((uint64,uint8)[3])%0#0: Encoded((uint64,uint8)[3]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr3(as_Encoded((uint64,uint8)[3])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr[routing]() -> void:
    block@0: // L127
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0: Encoded(len+(uint64,uint8,(len+utf8[]))[]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr(as_Encoded(len+(uint64,uint8,(len+utf8[]))[])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr3[routing]() -> void:
    block@0: // L131
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0: Encoded((uint64,uint8,(len+utf8[]))[3]) = tmp%0#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr3(as_Encoded((uint64,uint8,(len+utf8[]))[3])%0#0)
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_c2c[routing]() -> void:
    block@0: // L136
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_c2c()
        exit 1u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint64(value: Encoded(uint64)) -> void:
    block@0: // L19
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8(value: Encoded(uint8)) -> void:
    block@0: // L23
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint512(value: Encoded(uint512)) -> void:
    block@0: // L27
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_ufixed64(value: Encoded(uint64)) -> void:
    block@0: // L31
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.ufixed64x2
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr(value: Encoded(len+uint8[])) -> void:
    block@0: // L35
        let length%0#0: uint64 = array_len(value#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr3(value: Encoded(uint8[3])) -> void:
    block@0: // L39
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 3u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool(value: Encoded(bool8)) -> void:
    block@0: // L43
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.bool
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_byte(value: Encoded(uint8)) -> void:
    block@0: // L47
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_string(value: Encoded(len+utf8[])) -> void:
    block@0: // L51
        let length%0#0: uint64 = array_len(value#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bytes(value: Encoded(len+uint8[])) -> void:
    block@0: // L55
        let length%0#0: uint64 = array_len(value#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_address(value: Encoded(uint8[32])) -> void:
    block@0: // L59
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_account(value: account) -> void:
    block@0: // L63
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr(value: Encoded(len+bool1[])) -> void:
    block@0: // L67
        let length%0#0: uint64 = array_len(value#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 7u)
        let div_floor%0#0: uint64 = (/ add%0#0 8u)
        let add%1#0: uint64 = (+ div_floor%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%1#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.bool>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr3(value: Encoded(bool1[3])) -> void:
    block@0: // L71
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.bool, 3>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_tuple(value: Encoded(uint64,uint8)) -> void:
    block@0: // L75
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_tuple(value: Encoded(uint64,uint8,(len+utf8[]))) -> void:
    block@0: // L79
        let tuple_len%0#0: uint64 = (len value#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 value#0 extract_uint16%0#0 tuple_len%0#0)
        let length%0#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct(value: Encoded(uint64,uint8)) -> void:
    block@0: // L83
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for ARC4StaticStruct
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct(value: Encoded(uint64,uint8,(len+utf8[]))) -> void:
    block@0: // L87
        let tuple_len%0#0: uint64 = (len value#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 value#0 extract_uint16%0#0 tuple_len%0#0)
        let length%0#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for ARC4DynamicStruct
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr(value: Encoded(len+(uint64,uint8)[])) -> void:
    block@0: // L91
        let length%0#0: uint64 = array_len(value#0)
        let mul%0#0: uint64 = (* length%0#0 9u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<ARC4StaticStruct>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr3(value: Encoded((uint64,uint8)[3])) -> void:
    block@0: // L95
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 27u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<ARC4StaticStruct, 3>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr(value: Encoded(len+(uint64,uint8,(len+utf8[]))[])) -> void:
    block@0: // L99
        let length%0#0: uint64 = array_len(value#0)
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len value#0)
        let array_data%0#0: bytes = (substring3 value#0 2u total_length%0#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L101
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L101
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let total_length%1#0: uint64 = (len array_data%0#0)
        let extract_to_end%0#0: bytes = (substring3 array_data%0#0 item_offset%0#0 total_length%1#0)
        let tuple_len%0#0: uint64 = (len extract_to_end%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 extract_to_end%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 extract_to_end%0#0 extract_uint16%0#0 tuple_len%0#0)
        let length%1#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%1#0)
        goto block@3
    block@3: // for_footer_L101
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L101
        let num_bytes%1#0: uint64 = (+ num_bytes%0#1 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<ARC4DynamicStruct>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr3(value: Encoded((uint64,uint8,(len+utf8[]))[3])) -> void:
    block@0: // L103
        let length%0#0: uint64 = array_len(value#0)
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L105
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L105
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 value#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let total_length%0#0: uint64 = (len value#0)
        let extract_to_end%0#0: bytes = (substring3 value#0 item_offset%0#0 total_length%0#0)
        let tuple_len%0#0: uint64 = (len extract_to_end%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 extract_to_end%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 extract_to_end%0#0 extract_uint16%0#0 tuple_len%0#0)
        let length%1#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%1#0)
        goto block@3
    block@3: // for_footer_L105
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L105
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#1)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<ARC4DynamicStruct, 3>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_with_a_bool(value: Encoded(uint8,(len+uint8[]),bool1)) -> void:
    block@0: // L107
        let tuple_len%0#0: uint64 = (len value#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 1u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint8,(len+uint8[]),bool1)
        let substring3%0#0: bytes = (substring3 value#0 extract_uint16%0#0 tuple_len%0#0)
        let length%0#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 4u add%0#0)
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for WithABool
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct(value: Encoded(uint64,uint8)) -> void:
    block@0: // L111
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 9u)
        (assert eq%0#0) // invalid number of bytes for tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct(value: Encoded(uint64,uint8,(len+utf8[]))) -> void:
    block@0: // L115
        let tuple_len%0#0: uint64 = (len value#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 value#0 extract_uint16%0#0 tuple_len%0#0)
        let length%0#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr(value: Encoded(len+(uint64,uint8)[])) -> void:
    block@0: // L119
        let length%0#0: uint64 = array_len(value#0)
        let mul%0#0: uint64 = (* length%0#0 9u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_static_struct_arr3(value: Encoded((uint64,uint8)[3])) -> void:
    block@0: // L123
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 27u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct, 3>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr(value: Encoded(len+(uint64,uint8,(len+utf8[]))[])) -> void:
    block@0: // L127
        let length%0#0: uint64 = array_len(value#0)
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len value#0)
        let array_data%0#0: bytes = (substring3 value#0 2u total_length%0#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L129
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L129
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let total_length%1#0: uint64 = (len array_data%0#0)
        let extract_to_end%0#0: bytes = (substring3 array_data%0#0 item_offset%0#0 total_length%1#0)
        let tuple_len%0#0: uint64 = (len extract_to_end%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 extract_to_end%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 extract_to_end%0#0 extract_uint16%0#0 tuple_len%0#0)
        let length%1#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%1#0)
        goto block@3
    block@3: // for_footer_L129
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L129
        let num_bytes%1#0: uint64 = (+ num_bytes%0#1 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_native_dynamic_struct_arr3(value: Encoded((uint64,uint8,(len+utf8[]))[3])) -> void:
    block@0: // L131
        let length%0#0: uint64 = array_len(value#0)
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L133
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L133
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 value#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let total_length%0#0: uint64 = (len value#0)
        let extract_to_end%0#0: bytes = (substring3 value#0 item_offset%0#0 total_length%0#0)
        let tuple_len%0#0: uint64 = (len extract_to_end%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 extract_to_end%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 extract_to_end%0#0 extract_uint16%0#0 tuple_len%0#0)
        let length%1#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%1#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 11u add%0#0)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%1#0)
        goto block@3
    block@3: // for_footer_L133
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L133
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#1)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct, 3>
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_c2c() -> void:
    block@0: // L136
        let (compiled.approvalProgram.0#0: bytes, compiled.approvalProgram.1#0: bytes, compiled.clearStateProgram.0#0: bytes, compiled.clearStateProgram.1#0: bytes, compiled.extraProgramPages#0: uint64, compiled.globalUints#0: uint64, compiled.globalBytes#0: uint64, compiled.localUints#0: uint64, compiled.localBytes#0: uint64) = (compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=ApprovalProgramPages, program_page=0), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=ApprovalProgramPages, program_page=1), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=ClearStateProgramPages, program_page=0), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=ClearStateProgramPages, program_page=1), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=ExtraProgramPages, program_page=None), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=GlobalNumUint, program_page=None), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=GlobalNumByteSlice, program_page=None), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=LocalNumUint, program_page=None), compiled_contract('tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract', field=LocalNumByteSlice, program_page=None))
        itxn_begin
        let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%Fee_length#0: uint64 = 1u
        let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
        let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
        let inner_txn_params%0%%param_OnCompletion_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%OnCompletion_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled.approvalProgram.0#0
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = compiled.approvalProgram.1#0
        let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 2u
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled.clearStateProgram.0#0
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = compiled.clearStateProgram.1#0
        let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 2u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = compiled.globalUints#0
        let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 1u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = compiled.globalBytes#0
        let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 1u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = compiled.localBytes#0
        let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 1u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = compiled.localUints#0
        let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = compiled.extraProgramPages#0
        let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes[4] = method "create()void"
        let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 1u
        let inner_txn_params%0%%Sender_length#0: uint64 = 0u
        let inner_txn_params%0%%Note_length#0: uint64 = 0u
        let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%0%%Amount_length#0: uint64 = 0u
        let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%0%%Type_length#0: uint64 = 0u
        let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
        let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%0%%Assets_length#0: uint64 = 0u
        let inner_txn_params%0%%Applications_length#0: uint64 = 0u
        let inner_txn_params%0%%RejectVersion_length#0: uint64 = 0u
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field OnCompletion) inner_txn_params%0%%param_OnCompletion_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@1
    block@1: // next_txn_L139
        itxn_submit
        let tmp%0#0: uint64 = itxn[itxn_group_idx(0)].CreatedApplicationID
        let app#0: uint64 = tmp%0#0
        itxn_begin
        let inner_txn_params%1#0: itxn_field_set = itxn_field_set(1)
        let inner_txn_params%1%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%1%%Fee_length#0: uint64 = 1u
        let inner_txn_params%1%%param_TypeEnum_idx_0#0: uint64 = appl
        let inner_txn_params%1%%TypeEnum_length#0: uint64 = 1u
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        let inner_txn_params%1%%ApplicationID_length#0: uint64 = 1u
        let inner_txn_params%1%%param_ApplicationArgs_idx_0#0: bytes[4] = method "invalidValue()uint64[3]"
        let inner_txn_params%1%%ApplicationArgs_length#0: uint64 = 1u
        let inner_txn_params%1%%Sender_length#0: uint64 = 0u
        let inner_txn_params%1%%Note_length#0: uint64 = 0u
        let inner_txn_params%1%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%1%%Amount_length#0: uint64 = 0u
        let inner_txn_params%1%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%1%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%1%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%1%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%1%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%1%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%1%%Type_length#0: uint64 = 0u
        let inner_txn_params%1%%XferAsset_length#0: uint64 = 0u
        let inner_txn_params%1%%AssetAmount_length#0: uint64 = 0u
        let inner_txn_params%1%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%1%%AssetReceiver_length#0: uint64 = 0u
        let inner_txn_params%1%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%1%%OnCompletion_length#0: uint64 = 0u
        let inner_txn_params%1%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%1%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%1%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetTotal_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetDecimals_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetUnitName_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetName_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetManager_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetReserve_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%1%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%1%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%1%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%1%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%1%%GlobalNumUint_length#0: uint64 = 0u
        let inner_txn_params%1%%GlobalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%1%%LocalNumUint_length#0: uint64 = 0u
        let inner_txn_params%1%%LocalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%1%%ExtraProgramPages_length#0: uint64 = 0u
        let inner_txn_params%1%%Nonparticipation_length#0: uint64 = 0u
        let inner_txn_params%1%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%1%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%1%%Assets_length#0: uint64 = 0u
        let inner_txn_params%1%%Applications_length#0: uint64 = 0u
        let inner_txn_params%1%%ApprovalProgramPages_length#0: uint64 = 0u
        let inner_txn_params%1%%ClearStateProgramPages_length#0: uint64 = 0u
        let inner_txn_params%1%%RejectVersion_length#0: uint64 = 0u
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_0#0)
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%1%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%1%%param_Fee_idx_0#0)
        goto block@2
    block@2: // next_txn_L141
        itxn_submit
        let awst_tmp%0#0: bytes = itxn[itxn_group_idx(0)].LastLog
        let tmp%1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let len%0#0: uint64 = (len tmp%1#0)
        let eq%0#0: bool = (== len%0#0 24u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint64, 3>
        let as_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = tmp%1#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__algots__.defaultCreate() -> void:
    block@0: // L18
        return 