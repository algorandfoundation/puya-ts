{
    "name": "AVM11Contract",
    "structs": {},
    "methods": [
        {
            "name": "testNewOps",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        32
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        125
                    ],
                    "errorMessage": "bonus"
                },
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "branch"
                },
                {
                    "pc": [
                        60
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        37
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        137
                    ],
                    "errorMessage": "fee sink"
                },
                {
                    "pc": [
                        121
                    ],
                    "errorMessage": "fees collected"
                },
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "payouts_enabled"
                },
                {
                    "pc": [
                        156
                    ],
                    "errorMessage": "payouts_go_online_fee"
                },
                {
                    "pc": [
                        165
                    ],
                    "errorMessage": "payouts_max_balance"
                },
                {
                    "pc": [
                        162
                    ],
                    "errorMessage": "payouts_min_balance"
                },
                {
                    "pc": [
                        159
                    ],
                    "errorMessage": "payouts_percent"
                },
                {
                    "pc": [
                        117
                    ],
                    "errorMessage": "proposer"
                },
                {
                    "pc": [
                        150
                    ],
                    "errorMessage": "proposer payout"
                },
                {
                    "pc": [
                        142
                    ],
                    "errorMessage": "protocol"
                },
                {
                    "pc": [
                        146
                    ],
                    "errorMessage": "txn counter"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCgptYWluX2Jsb2NrQDE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czoxMi0xMwogICAgLy8gQGNvbnRyYWN0KHsgbmFtZTogJ0FWTTExQ29udHJhY3QnLCBhdm1WZXJzaW9uOiAxMSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEF2bTExQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A2CgptYWluX2FiaV9yb3V0aW5nQDI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czoxMi0xMwogICAgLy8gQGNvbnRyYWN0KHsgbmFtZTogJ0FWTTExQ29udHJhY3QnLCBhdm1WZXJzaW9uOiAxMSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEF2bTExQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBwdXNoYnl0ZXMgMHg1MjQ0OGEzMSAvLyBtZXRob2QgInRlc3ROZXdPcHMoKXZvaWQiCiAgICBzd2FwCiAgICBtYXRjaCBtYWluX3Rlc3ROZXdPcHNfcm91dGVAMwoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDQ6CgptYWluX3N3aXRjaF9jYXNlX25leHRANToKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjEyLTEzCiAgICAvLyBAY29udHJhY3QoeyBuYW1lOiAnQVZNMTFDb250cmFjdCcsIGF2bVZlcnNpb246IDExIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQXZtMTFDb250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCgptYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6OkF2bTExQ29udHJhY3QuX19wdXlhX2FyYzRfcm91dGVyX19AMTE6CiAgICByZXR1cm4KCm1haW5fdGVzdE5ld09wc19yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6MTQKICAgIC8vIHRlc3ROZXdPcHMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzAgLy8gTm9PcAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3ROZXdPcHMKICAgIGludGNfMSAvLyAxCiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czo6QXZtMTFDb250cmFjdC5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMQoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjEyLTEzCiAgICAvLyBAY29udHJhY3QoeyBuYW1lOiAnQVZNMTFDb250cmFjdCcsIGF2bVZlcnNpb246IDExIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQXZtMTFDb250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICBtYXRjaCBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA3CgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRAODoKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEA5OgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMTAKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czoxMi0xMwogICAgLy8gQGNvbnRyYWN0KHsgbmFtZTogJ0FWTTExQ29udHJhY3QnLCBhdm1WZXJzaW9uOiAxMSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEF2bTExQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgID09CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIF9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZQogICAgaW50Y18xIC8vIDEKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjpBdm0xMUNvbnRyYWN0Ll9fcHV5YV9hcmM0X3JvdXRlcl9fQDExCgoKLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6OkF2bTExQ29udHJhY3QudGVzdE5ld09wcygpIC0+IHZvaWQ6CnRlc3ROZXdPcHM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czoxNAogICAgLy8gdGVzdE5ld09wcygpIHsKICAgIHByb3RvIDAgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6MTYKICAgIC8vIGNvbnN0IHggPSBCeXRlcy5mcm9tSGV4KCcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQ5OTYwMmQyJykKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDk5NjAyZDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjE3CiAgICAvLyBhc3NlcnQob3AubWltYyhNaW1jQ29uZmlndXJhdGlvbnMuQkxTMTJfMzgxTXAxMTEsIHgpKQogICAgbWltYyBCTFMxMl8zODFNcDExMQogICAgbGVuCiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjE4CiAgICAvLyBhc3NlcnQob3Aub25saW5lU3Rha2UoKSkKICAgIG9ubGluZV9zdGFrZQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czoyNgogICAgLy8gYXNzZXJ0KG9wLkJsb2NrLmJsa1Byb3Bvc2VyKDApICE9PSBHbG9iYWwuemVyb0FkZHJlc3MsICdwcm9wb3NlcicpCiAgICBpbnRjXzAgLy8gMAogICAgYmxvY2sgQmxrUHJvcG9zZXIKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBwcm9wb3NlcgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6MjcKICAgIC8vIGFzc2VydChvcC5CbG9jay5ibGtGZWVzQ29sbGVjdGVkKDApLCAnZmVlcyBjb2xsZWN0ZWQnKQogICAgaW50Y18wIC8vIDAKICAgIGJsb2NrIEJsa0ZlZXNDb2xsZWN0ZWQKICAgIGFzc2VydCAvLyBmZWVzIGNvbGxlY3RlZAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6MjgKICAgIC8vIGFzc2VydChvcC5CbG9jay5ibGtCb251cygwKSwgJ2JvbnVzJykKICAgIGludGNfMCAvLyAwCiAgICBibG9jayBCbGtCb251cwogICAgYXNzZXJ0IC8vIGJvbnVzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czoyOQogICAgLy8gYXNzZXJ0KG9wLkJsb2NrLmJsa0JyYW5jaCgwKSwgJ2JyYW5jaCcpCiAgICBpbnRjXzAgLy8gMAogICAgYmxvY2sgQmxrQnJhbmNoCiAgICBsZW4KICAgIGFzc2VydCAvLyBicmFuY2gKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjMwCiAgICAvLyBhc3NlcnQob3AuQmxvY2suYmxrRmVlU2luaygwKSAhPT0gR2xvYmFsLnplcm9BZGRyZXNzLCAnZmVlIHNpbmsnKQogICAgaW50Y18wIC8vIDAKICAgIGJsb2NrIEJsa0ZlZVNpbmsKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBmZWUgc2luawogICAgLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6MzEKICAgIC8vIGFzc2VydChvcC5CbG9jay5ibGtQcm90b2NvbCgwKSwgJ3Byb3RvY29sJykKICAgIGludGNfMCAvLyAwCiAgICBibG9jayBCbGtQcm90b2NvbAogICAgbGVuCiAgICBhc3NlcnQgLy8gcHJvdG9jb2wKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjMyCiAgICAvLyBhc3NlcnQob3AuQmxvY2suYmxrVHhuQ291bnRlcigwKSwgJ3R4biBjb3VudGVyJykKICAgIGludGNfMCAvLyAwCiAgICBibG9jayBCbGtUeG5Db3VudGVyCiAgICBhc3NlcnQgLy8gdHhuIGNvdW50ZXIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjMzCiAgICAvLyBhc3NlcnQob3AuQmxvY2suYmxrUHJvcG9zZXJQYXlvdXQoMCksICdwcm9wb3NlciBwYXlvdXQnKQogICAgaW50Y18wIC8vIDAKICAgIGJsb2NrIEJsa1Byb3Bvc2VyUGF5b3V0CiAgICBhc3NlcnQgLy8gcHJvcG9zZXIgcGF5b3V0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czozNgogICAgLy8gYXNzZXJ0KG9wLkdsb2JhbC5wYXlvdXRzRW5hYmxlZCwgJ3BheW91dHNfZW5hYmxlZCcpCiAgICBnbG9iYWwgUGF5b3V0c0VuYWJsZWQKICAgIGFzc2VydCAvLyBwYXlvdXRzX2VuYWJsZWQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjM3CiAgICAvLyBhc3NlcnQob3AuR2xvYmFsLnBheW91dHNHb09ubGluZUZlZSwgJ3BheW91dHNfZ29fb25saW5lX2ZlZScpCiAgICBnbG9iYWwgUGF5b3V0c0dvT25saW5lRmVlCiAgICBhc3NlcnQgLy8gcGF5b3V0c19nb19vbmxpbmVfZmVlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czozOAogICAgLy8gYXNzZXJ0KG9wLkdsb2JhbC5wYXlvdXRzUGVyY2VudCwgJ3BheW91dHNfcGVyY2VudCcpCiAgICBnbG9iYWwgUGF5b3V0c1BlcmNlbnQKICAgIGFzc2VydCAvLyBwYXlvdXRzX3BlcmNlbnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjM5CiAgICAvLyBhc3NlcnQob3AuR2xvYmFsLnBheW91dHNNaW5CYWxhbmNlLCAncGF5b3V0c19taW5fYmFsYW5jZScpCiAgICBnbG9iYWwgUGF5b3V0c01pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBwYXlvdXRzX21pbl9iYWxhbmNlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXZtMTEuYWxnby50czo0MAogICAgLy8gYXNzZXJ0KG9wLkdsb2JhbC5wYXlvdXRzTWF4QmFsYW5jZSwgJ3BheW91dHNfbWF4X2JhbGFuY2UnKQogICAgZ2xvYmFsIFBheW91dHNNYXhCYWxhbmNlCiAgICBhc3NlcnQgLy8gcGF5b3V0c19tYXhfYmFsYW5jZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2F2bTExLmFsZ28udHM6NDIKICAgIC8vIGNvbnN0IFtnLCBoXSA9IG9wLlZvdGVyUGFyYW1zLnZvdGVyQmFsYW5jZSgwKQogICAgaW50Y18wIC8vIDAKICAgIHZvdGVyX3BhcmFtc19nZXQgVm90ZXJCYWxhbmNlCiAgICBwb3BuIDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjQzCiAgICAvLyBjb25zdCBbaSwgal0gPSBvcC5Wb3RlclBhcmFtcy52b3RlckluY2VudGl2ZUVsaWdpYmxlKDApCiAgICBpbnRjXzAgLy8gMAogICAgdm90ZXJfcGFyYW1zX2dldCBWb3RlckluY2VudGl2ZUVsaWdpYmxlCiAgICBwb3BuIDIKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjpBdm0xMUNvbnRyYWN0Ll9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZSgpIC0+IHZvaWQ6Cl9fYWxnb3RzX18uZGVmYXVsdENyZWF0ZToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hdm0xMS5hbGdvLnRzOjEyLTEzCiAgICAvLyBAY29udHJhY3QoeyBuYW1lOiAnQVZNMTFDb250cmFjdCcsIGF2bVZlcnNpb246IDExIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQXZtMTFDb250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHByb3RvIDAgMAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyACAAExGyITQQAhNhoAgARSRIoxTI4BAAIiQzEZIhJEMRgiE0SIABsjQv/uMRkiTI4BAANC/+IxGCISRIgAcSNC/9eKAACAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJlgLS5gEVRHVEItECMgMTRCLRA0Qi0QREItEFFUQi0QYyAxNEItEHFUQi0QhEItEJRDISRDITRDIURDIVRDIWRCJ0AEYCInQBRgKJigAAiQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 2,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}