main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@2, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@3, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@4, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@5, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@6, * => block@7}
    block@2: // test_for_of_loop_tuple_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[24]%0#0: bytes[24] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_bytes[24]%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 reinterpret_bytes[24]%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%0%0#0: uint64 = (btoi item1%0#0)
        let item2%0#0: bytes = (extract3 reinterpret_bytes[24]%0#0 16u 8u) // on error: Index access is out of bounds
        let item2%0%0#0: uint64 = (btoi item2%0#0)
        let to_encode%0#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(item0%0%0#0, item1%0%0#0, item2%0%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%7#0)
        return 1u
    block@3: // test_for_of_loop_arc4_dynamic_array_route_L14
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let tmp%12#0: bytes = (txna ApplicationArgs 1)
        let to_encode%1#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(tmp%12#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%13#0)
        return 1u
    block@4: // test_for_of_loop_arc4_static_array_route_L22
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 NoOp)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_bytes[40]%0#0: bytes[40] = (txna ApplicationArgs 1)
        let to_encode%2#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(reinterpret_bytes[40]%0#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%18#0)
        return 1u
    block@5: // test_for_of_loop_native_immutable_array_route_L30
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_uint64[]%0#0: uint64[] = (txna ApplicationArgs 1)
        let to_encode%3#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(reinterpret_uint64[]%0#0)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%3#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%23#0)
        return 1u
    block@6: // test_for_of_loop_native_mutable_array_route_L38
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        let reinterpret_bytes[24]%1#0: bytes[24] = (txna ApplicationArgs 1)
        let item0%1#0: bytes = (extract3 reinterpret_bytes[24]%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item1%1#0: bytes = (extract3 reinterpret_bytes[24]%1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1%0#0: uint64 = (btoi item1%1#0)
        let item2%1#0: bytes = (extract3 reinterpret_bytes[24]%1#0 16u 8u) // on error: Index access is out of bounds
        let item2%1%0#0: uint64 = (btoi item2%1#0)
        let to_encode%4#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(item0%1%0#0, item1%1%0#0, item2%1%0#0)
        let val_as_bytes%4#0: bytes[8] = (itob to_encode%4#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 val_as_bytes%4#0)
        (log tmp%28#0)
        return 1u
    block@7: // switch_case_default_L5
        goto block@8
    block@8: // switch_case_next_L5
        goto block@13
    block@9: // bare_routing_L5
        let tmp%29#0: uint64 = (txn OnCompletion)
        switch tmp%29#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L5
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (== tmp%30#0 0u)
        (assert tmp%31#0) // can only call when creating
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__algots__.defaultCreate()
        return 1u
    block@11: // switch_case_default_L5
        goto block@12
    block@12: // switch_case_next_L5
        goto block@13
    block@13: // after_if_else_L5
        return 0u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
    block@0: // L6
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let item#0: uint64 = items.0#0
        goto block@1
    block@1: // for_body_L8
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@4, loop_counter%0#3 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4, total#2 <- block@5)
        let item#1: uint64 = φ(item#0 <- block@0, item#2 <- block@4, item#3 <- block@5)
        let total#2: uint64 = (+ total#1 item#1)
        goto block@2
    block@2: // L8
        goto block@3
    block@3: // for_footer_L8
        goto_nth [block@4, block@5][loop_counter%0#1] else goto block@6
    block@4: // for_header_1_L8
        let loop_counter%0#2: uint64 = 1u
        let item#2: uint64 = items.1#0
        goto block@1
    block@5: // for_header_2_L8
        let loop_counter%0#3: uint64 = 2u
        let item#3: uint64 = items.2#0
        goto block@1
    block@6: // after_for_L8
        goto block@7
    block@7: // L8
        return total#2

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(items: bytes) -> uint64:
    block@0: // L14
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L16
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@5
    block@2: // for_body_L16
        let array_head_and_tail%0#0: bytes = ((extract 2 0) items#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let item#0: bytes[8] = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi item#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        goto block@3
    block@3: // L16
        goto block@4
    block@4: // for_footer_L16
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@5: // after_for_L16
        goto block@6
    block@6: // L16
        return total#1

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(items: bytes[40]) -> uint64:
    block@0: // L22
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = 5u
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L24
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@5
    block@2: // for_body_L24
        let array_head_and_tail%0#0: bytes[40] = items#0
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let item#0: bytes[8] = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi item#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        goto block@3
    block@3: // L24
        goto block@4
    block@4: // for_footer_L24
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@5: // after_for_L24
        goto block@6
    block@6: // L24
        return total#1

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(items: uint64[]) -> uint64:
    block@0: // L30
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L32
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@5
    block@2: // for_body_L32
        let array_head_and_tail%0#0: bytes = ((extract 2 0) items#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let value_at_index%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let item#0: uint64 = (btoi value_at_index%0#0)
        let total#2: uint64 = (+ total#1 item#0)
        goto block@3
    block@3: // L32
        goto block@4
    block@4: // for_footer_L32
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@5: // after_for_L32
        goto block@6
    block@6: // L32
        return total#1

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
    block@0: // L38
        let encoded%0#0: uint64[] = encode<uint64>(items.0#0, items.1#0, items.2#0)
        let slot%0#0: uint64[]* = new()
        write(slot%0#0, encoded%0#0)
        let mutable#0: uint64[]* = slot%0#0
        let total#0: uint64 = 0u
        let slot_contents%0#0: uint64[] = read(mutable#0)
        let array_length%0#0: uint64 = slot_contents%0#0.length
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L41
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@5
    block@2: // for_body_L41
        let slot_contents%1#0: uint64[] = read(mutable#0)
        let item#0: uint64 = slot_contents%1#0[item_index_internal%0#1]
        let total#2: uint64 = (+ total#1 item#0)
        goto block@3
    block@3: // L41
        goto block@4
    block@4: // for_footer_L41
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@5: // after_for_L41
        goto block@6
    block@6: // L41
        return total#1

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L5
        return 