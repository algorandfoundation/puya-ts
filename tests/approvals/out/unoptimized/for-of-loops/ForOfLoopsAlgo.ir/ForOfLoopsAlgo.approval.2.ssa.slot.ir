slot_allocation(dynamic, reserved=[])
main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L7
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@3, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@4, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@5, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@6, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@7, * => block@8}
    block@3: // test_for_of_loop_tuple_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64,uint64)%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract%1#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64,uint64)%0#0 8u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%1#1)
        let aggregate%extract%2#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64,uint64)%0#0 16u 8u)
        let aggregate%item2%0#1: uint64 = (btoi aggregate%extract%2#1)
        let tmp%7#0: uint64 = aggregate%item0%0#1
        let tmp%8#0: uint64 = aggregate%item1%0#1
        let tmp%9#0: uint64 = aggregate%item2%0#1
        let tmp%10#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(tmp%7#0, tmp%8#0, tmp%9#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%11#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // test_for_of_loop_arc4_dynamic_array_route_L17
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(reinterpret_Encoded(len+uint64[])%0#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%17#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let tmp%18#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let tmp%19#0: bytes = (concat 0x151f7c75 tmp%18#0)
        (log tmp%19#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // test_for_of_loop_arc4_static_array_route_L26
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded(uint64[5])%0#0: Encoded(uint64[5]) = (txna ApplicationArgs 1)
        let tmp%24#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(reinterpret_Encoded(uint64[5])%0#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%24#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let tmp%25#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#1
        let tmp%26#0: bytes = (concat 0x151f7c75 tmp%25#0)
        (log tmp%26#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // test_for_of_loop_native_immutable_array_route_L35
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%31#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(reinterpret_Encoded(len+uint64[])%1#0)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%31#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let tmp%32#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#1
        let tmp%33#0: bytes = (concat 0x151f7c75 tmp%32#0)
        (log tmp%33#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // test_for_of_loop_native_mutable_array_route_L44
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (== tmp%34#0 NoOp)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (!= tmp%36#0 0u)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,uint64)%1#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%38#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(reinterpret_Encoded(uint64,uint64,uint64)%1#0)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%38#0)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let tmp%39#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%4#1
        let tmp%40#0: bytes = (concat 0x151f7c75 tmp%39#0)
        (log tmp%40#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@8: // switch_case_default_L7
        goto block@9
    block@9: // switch_case_next_L7
        goto block@14
    block@10: // bare_routing_L7
        let tmp%41#0: uint64 = (txn OnCompletion)
        switch tmp%41#0 {0u => block@11, * => block@12}
    block@11: // __algots__.defaultCreate_L7
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (== tmp%42#0 0u)
        (assert tmp%43#0) // can only call when creating
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__algots__.defaultCreate()
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@12: // switch_case_default_L7
        goto block@13
    block@13: // switch_case_next_L7
        goto block@14
    block@14: // after_if_else_L7
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5 <- block@11, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
    block@0: // L8
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let temp#0: uint64 = items.0#0
        goto block@1
    block@1: // for_body_L10
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@5, loop_counter%0#3 <- block@6)
        let temp#1: uint64 = φ(temp#0 <- block@0, temp#2 <- block@5, temp#3 <- block@6)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5, total#2 <- block@6)
        let item#0: uint64 = temp#1
        let tmp%0#0: uint64 = (+ total#1 item#0)
        let total#2: uint64 = tmp%0#0
        let tmp%1#0: bool = (== item#0 42u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // if_body_L12
        goto block@8
    block@3: // after_if_else_L12
        goto block@4
    block@4: // for_footer_L10
        goto_nth [block@5, block@6][loop_counter%0#1] else goto block@7
    block@5: // for_header_1_L10
        let loop_counter%0#2: uint64 = 1u
        let temp#2: uint64 = items.1#0
        goto block@1
    block@6: // for_header_2_L10
        let loop_counter%0#3: uint64 = 2u
        let temp#3: uint64 = items.2#0
        goto block@1
    block@7: // after_for_L10
        goto block@8
    block@8: // L10
        return total#2

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(items: Encoded(len+uint64[])) -> uint64:
    block@0: // L17
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L19
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L19
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let temp#0: Encoded(uint64) = array_item%0#0
        let item#0: Encoded(uint64) = temp#0
        let tmp%0#0: uint64 = (btoi item#0)
        let tmp%1#0: uint64 = (+ total#1 tmp%0#0)
        let total#2: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (btoi item#0)
        let tmp%3#0: bool = (== tmp%2#0 42u)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L21
        goto block@7
    block@4: // after_if_else_L21
        goto block@5
    block@5: // for_footer_L19
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L19
        goto block@7
    block@7: // L19
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(items: Encoded(uint64[5])) -> uint64:
    block@0: // L26
        let total#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L28
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 5u)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L28
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 items#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let temp#0: Encoded(uint64) = array_item%0#0
        let item#0: Encoded(uint64) = temp#0
        let tmp%0#0: uint64 = (btoi item#0)
        let tmp%1#0: uint64 = (+ total#1 tmp%0#0)
        let total#2: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (btoi item#0)
        let tmp%3#0: bool = (== tmp%2#0 42u)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L30
        goto block@7
    block@4: // after_if_else_L30
        goto block@5
    block@5: // for_footer_L28
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L28
        goto block@7
    block@7: // L28
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(items: Encoded(len+uint64[])) -> uint64:
    block@0: // L35
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L37
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L37
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let temp#0: uint64 = values%0#0
        let item#0: uint64 = temp#0
        let tmp%0#0: uint64 = (+ total#1 item#0)
        let total#2: uint64 = tmp%0#0
        let tmp%1#0: bool = (== item#0 42u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L39
        goto block@7
    block@4: // after_if_else_L39
        goto block@5
    block@5: // for_footer_L37
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L37
        goto block@7
    block@7: // L37
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(items: Encoded(uint64,uint64,uint64)) -> uint64:
    block@0: // L44
        let aggregate%extract%0#1: bytes = (extract3 items#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#1: bytes = (extract3 items#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#1: bytes = (extract3 items#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob values%2#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded%3#1: Encoded(uint64[]) = (concat aggregate%encoded%2#1 0x)
        let encoded_array%0#0: Encoded(uint64[]) = aggregate%encoded%3#1
        let slot%0#0: Encoded(uint64[])* = new()
        write(slot%0#0, encoded_array%0#0)
        let mutable#0: Encoded(uint64[])* = slot%0#0
        let total#0: uint64 = 0u
        let slot_contents%0#0: Encoded(uint64[]) = read(mutable#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L47
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_len%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L47
        let slot_contents%1#0: Encoded(uint64[]) = read(mutable#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%3#0: uint64 = (btoi array_item%0#0)
        let temp#0: uint64 = values%3#0
        let item#0: uint64 = temp#0
        let tmp%0#0: uint64 = (+ total#1 item#0)
        let total#2: uint64 = tmp%0#0
        let tmp%1#0: bool = (== item#0 42u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L49
        goto block@7
    block@4: // after_if_else_L49
        goto block@5
    block@5: // for_footer_L47
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L47
        goto block@7
    block@7: // L47
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L7
        return 