{
    "name": "ForOfLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_of_loop_tuple",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_tuple",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_object",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_dynamic_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_static_array",
            "args": [
                {
                    "type": "uint64[5]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_immutable_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_mutable_array",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iterable_props",
            "args": [
                {
                    "type": "uint64[3]",
                    "name": "static_array"
                },
                {
                    "type": "uint64[3]",
                    "name": "fixed_array"
                },
                {
                    "type": "uint64[]",
                    "name": "dyn_array"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        135,
                        167,
                        192,
                        217,
                        242,
                        267,
                        292,
                        317
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        819,
                        871,
                        931
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        382
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        140,
                        172,
                        197,
                        222,
                        247,
                        272,
                        297,
                        322
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        465,
                        520,
                        583,
                        631,
                        685,
                        780
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1004
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEIKiYCBBUffHUAgCB//////////////////////////////////////////zUAMRsiE0EBNTYaAIAEzx8guIAEwqK9a4AE87T+yIAEjBbuh4AEssdTv4AE0bW+7oAEocwNlIAEcWYxqk8IjggAuACfAIYAbQBUADsAIgACIkMxGSISRDEYIhNENhoBNhoCNhoDTwJPAk8CiAKMI0L/3zEZIhJEMRgiE0Q2GgGIAhUWKExQsCNC/8YxGSISRDEYIhNENhoBiAHGFihMULAjQv+tMRkiEkQxGCITRDYaAYgBfRYoTFCwI0L/lDEZIhJEMRgiE0Q2GgGIAS4WKExQsCNC/3sxGSISRDEYIhNENhoBiADUFihMULAjQv9iMRkiEkQxGCITRDYaAYgAhhYoTFCwI0L/STEZIhJEMRgiE0Q2GgFJIiRYF0xJJElYF0yBECRYF08CTE8CTE8CTwJPAogAIBYoTFCwI0L/EzEZIkyOAQADQv8HMRgiEkSIAl0jQv78igMBIkmL/YsASwEIjAAlEkEAAYmLAY0CAAwAA0L/9IECjAGL/0L/3yOMAYv+Qv/XigEBIov/IlkiiwKLAQxBACGL/1cCAIsCJAskWBeLAAhJjAAlD0EAAYmLAiMIjAJC/9dC//OKAQEii/8iWSKLAosBDEEALYv/VwIAiwKBEAuBEFhJIiRYF0wkSVgXCIsACEmMACUPQQABiYsCIwiMAkL/y0L/84oBASKL/yJZIosCiwEMQQAii/9XAgCLAiQLJFhJF4sACIwAFyUSQQABiYsCIwiMAkL/1kL/84oBASJJiwGBBQxBACCLASQLi/9MJFhJF4sACIwAFyUSQQABiYsBIwiMAUL/2EL/84oBASKL/yJZIosCiwEMQQAii/9XAgCLAiQLJFgXiwBLAQiMACUSQQABiYsCIwiMAkL/1kL/84oBAYv/IiRYF4v/JElYF4v/gRAkWBdPAhYpTFBPAhZQTBZQKVCIAPBJTwI/SSJMPhUkCiKLA4sCDEEAJIsAPosDJAskWBeLAUsBCIwBJRJBAAWLAYwAiYsDIwiMA0L/1EL/74oDAClHBiIjRCKLCIEDDEEAD4sHIwiMB4sIIwiMCEL/6SKMAosCgQMMQQAPiwcjCIwHiwIjCIwCQv/pI0QijAWLBYEDDEEAD4sHIwiMB4sFIwiMBUL/6SKMA4sDgQMMQQAPiwcjCIwHiwMjCIwDQv/pi/8iWYwAI0QijAaLBosADEEAD4sHIwiMB4sGIwiMBkL/6Yv/IlmMASKMBIsEiwEMQQAPiwcjCIwHiwQjCIwEQv/piYk0AJM0AIGAAksCCSJUNQCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}