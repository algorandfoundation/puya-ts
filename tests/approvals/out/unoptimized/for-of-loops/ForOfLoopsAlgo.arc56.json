{
    "name": "ForOfLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_of_loop_tuple",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_tuple",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_object",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_dynamic_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_static_array",
            "args": [
                {
                    "type": "uint64[5]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_immutable_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_mutable_array",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iterable_props",
            "args": [
                {
                    "type": "uint64[3]",
                    "name": "static_array"
                },
                {
                    "type": "uint64[3]",
                    "name": "fixed_array"
                },
                {
                    "type": "uint64[]",
                    "name": "dyn_array"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        159,
                        199,
                        227,
                        255,
                        283,
                        311,
                        339,
                        367
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1047,
                        1117,
                        1195
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        446
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        164,
                        204,
                        232,
                        260,
                        288,
                        316,
                        344,
                        372
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        569,
                        647,
                        734,
                        801,
                        878,
                        992
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1296
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAAEIKiYCAAQVH3x1gCB//////////////////////////////////////////zUAKEIAAEIAADEbIhNBAWdCAAA2GgCABM8fILiABMKivWuABPO0/siABIwW7oeABLLHU7+ABNG1vu6ABKHMDZSABJYYRsZPCI4IAOAAxACoAIwAcABUADgAEEIAAEIAAEIAACJFAUIAAEMxGSISRDEYIhNENhoBNhoCNhoDTwJPAk8CiANRFilPAVCwI0UBQv/XMRkiEkQxGCITRDYaAYgCvxYpTwFQsCNFAUL/uzEZIhJEMRgiE0Q2GgGIAlYWKU8BULAjRQFC/58xGSISRDEYIhNENhoBiAH3FilPAVCwI0UBQv+DMRkiEkQxGCITRDYaAYgBjhYpTwFQsCNFAUL/ZzEZIhJEMRgiE0Q2GgGIARkWKU8BULAjRQFC/0sxGSISRDEYIhNENhoBiACxFilPAVCwI0UBQv8vMRkiEkQxGCITRDYaAUkiJFgXTgFJJCRYF04BgRAkWBdPAk4BTwJPAU8CTwJPAogALBYpTwFQsCNFAUL+8jEZIk8BjgEACUIAAEIAAEL+2jEYIhJEiAM7I0UBQv7SigMBQgAAIiKL/UIAAIsCiwBLAQiMACUSQQAHQgAAQgAAiUIAAIsBjQIAEQAGQgAAQv/ugQKMAYv/jAJC/88jjAGL/owCQv/FigEBQgAAIov/IlkiQgAAiwKLAQxBADJCAACL/xWL/4ECTwJSiwIkCyRYF4sACEmMACUPQQAHQgAAQgAAiUIAAIsCIwiMAkL/xkL/8IoBAUIAACKL/yJZIkIAAIsCiwEMQQA/QgAAi/8Vi/+BAk8CUosCgRALgRBYSSIkWBdOASQkWBcIiwAISYwAJQ9BAAdCAABCAACJQgAAiwIjCIwCQv+5Qv/wigEBQgAAIov/IlkiQgAAiwKLAQxBADNCAACL/xWL/4ECTwJSiwIkCyRYSReLAAiMABclEkEAB0IAAEIAAIlCAACLAiMIjAJC/8VC//CKAQFCAAAiIkIAAIsBgQUMQQAtQgAAiwEkC4v/TwEkWEkXiwAIjAAXJRJBAAdCAABCAACJQgAAiwEjCIwBQv/LQv/wigEBQgAAIov/IlkiQgAAiwKLAQxBADNCAACL/xWL/4ECTwJSiwIkCyRYF4sASwEIjAAlEkEAB0IAAEIAAIlCAACLAiMIjAJC/8VC//CKAQFCAACL/yIkWBeL/yQkWBeL/4EQJFgXTwIWKE8BUE8CFlBPARZQiAFESU8CP0kiTgE+FSQKIkIAAIsDiwIMQQAwQgAAiwA+iwMkCyRYF4sBSwEIjAElEkEAC0IAAEIAAIsBjACJQgAAiwMjCIwDQv/IQv/sigMBKCgoKCgoKEIAACIjRCJCAACLCIEDDEEAFUIAAIsHIwiMB0IAAIsIIwiMCEL/4yKMAUIAAIsBgQMMQQAVQgAAiwcjCIwHQgAAiwEjCIwBQv/jI0QijARCAACLBIEDDEEAFUIAAIsHIwiMB0IAAIsEIwiMBEL/4yKMAkIAAIsCgQMMQQAVQgAAiwcjCIwHQgAAiwIjCIwCQv/ji/8iWYwGI0QijAVCAACLBYsGDEEAFUIAAIsHIwiMB0IAAIsFIwiMBUL/44v/IlmMACKMA0IAAIsDiwAMQQAVQgAAiwcjCIwHQgAAiwMjCIwDQv/jiweMAIlCAACJQgAANACTNACBgAJLAgkiVDUAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}