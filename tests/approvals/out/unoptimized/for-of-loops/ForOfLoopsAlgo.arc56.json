{
    "name": "ForOfLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_of_loop_tuple",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_tuple",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_object",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_dynamic_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_static_array",
            "args": [
                {
                    "type": "uint64[5]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_immutable_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_mutable_array",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iterable_props",
            "args": [
                {
                    "type": "uint64[3]",
                    "name": "static_array"
                },
                {
                    "type": "uint64[3]",
                    "name": "fixed_array"
                },
                {
                    "type": "uint64[]",
                    "name": "dyn_array"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        135,
                        172,
                        197,
                        222,
                        247,
                        272,
                        297,
                        322
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        842,
                        894,
                        954
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        387
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        140,
                        177,
                        202,
                        227,
                        252,
                        277,
                        302,
                        327
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        475,
                        535,
                        603,
                        651,
                        710,
                        803
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1031
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEIKiYCBBUffHUAgCB//////////////////////////////////////////zUAMRsiE0EBOjYaAIAEzx8guIAEwqK9a4AE87T+yIAEjBbuh4AEssdTv4AE0bW+7oAEocwNlIAElhhGxk8IjggAvQCkAIsAcgBZAEAAJwACIkMxGSISRDEYIhNENhoBNhoCNhoDTwJPAk8CiAKjFihMULAjQv/aMRkiEkQxGCITRDYaAYgCKRYoTFCwI0L/wTEZIhJEMRgiE0Q2GgGIAdUWKExQsCNC/6gxGSISRDEYIhNENhoBiAGMFihMULAjQv+PMRkiEkQxGCITRDYaAYgBOBYoTFCwI0L/djEZIhJEMRgiE0Q2GgGIANkWKExQsCNC/10xGSISRDEYIhNENhoBiACGFihMULAjQv9EMRkiEkQxGCITRDYaAUkiJFgXTEkkSVgXTIEQJFgXTwJMTwJMTwJPAk8CiAAgFihMULAjQv8OMRkiTI4BAANC/wIxGCISRIgCcyNC/veKAwEiSYv9iwBLAQiMACUSQQABiYsBjQIADAADQv/0gQKMAYv/Qv/fI4wBi/5C/9eKAQEii/8iWSKLAosBDEEAJov/FYv/gQJPAlKLAiQLJFgXiwAISYwAJQ9BAAGJiwIjCIwCQv/SQv/zigEBIov/IlkiiwKLAQxBADKL/xWL/4ECTwJSiwKBEAuBEFhJIiRYF0wkSVgXCIsACEmMACUPQQABiYsCIwiMAkL/xkL/84oBASKL/yJZIosCiwEMQQAni/8Vi/+BAk8CUosCJAskWEkXiwAIjAAXJRJBAAGJiwIjCIwCQv/RQv/zigEBIkmLAYEFDEEAIIsBJAuL/0wkWEkXiwAIjAAXJRJBAAGJiwEjCIwBQv/YQv/zigEBIov/IlkiiwKLAQxBACeL/xWL/4ECTwJSiwIkCyRYF4sASwEIjAAlEkEAAYmLAiMIjAJC/9FC//OKAQGL/yIkWBeL/yRJWBeL/4EQJFgXTwIWKUxQTwIWUEwWUIgA9ElPAj9JIkw+FSQKIosDiwIMQQAkiwA+iwMkCyRYF4sBSwEIjAElEkEABYsBjACJiwMjCIwDQv/UQv/vigMBKUcGIiNEIosIgQMMQQAPiwcjCIwHiwgjCIwIQv/pIowBiwGBAwxBAA+LByMIjAeLASMIjAFC/+kjRCKMBIsEgQMMQQAPiwcjCIwHiwQjCIwEQv/pIowCiwKBAwxBAA+LByMIjAeLAiMIjAJC/+mL/yJZjAYjRCKMBYsFiwYMQQAPiwcjCIwHiwUjCIwFQv/pi/8iWYwAIowDiwOLAAxBAA+LByMIjAeLAyMIjANC/+mLB4wAiYk0AJM0AIGAAksCCSJUNQCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}