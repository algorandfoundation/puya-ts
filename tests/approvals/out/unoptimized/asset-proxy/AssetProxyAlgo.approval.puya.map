{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/asset-proxy.algo.ts"
  ],
  "mappings": ";;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AAAA;;AACE;;;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACE;;;AACE;;AAAA;AAAA;AACU;;AAAA;;AAAA;AAAV;AAAA;AACU;;AAAA;;AAAA;AAAV;AAAA;AACU;;AAAA;;AAAA;AAAV;AAAA;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AACU;;AAAA;;AAAA;AAAV;AAEsB;;AAAlB;;AAAA;;AAAA;AAAJ;AAAA;AACqB;;AAAjB;;AAAA;;AAAA;AAAJ;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "8": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "9": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "12": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "pushbytes 0x5df11c28 // method \"testAsset(asset)void\"",
      "defined_out": [
        "Method(testAsset(asset)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testAsset(asset)void)"
      ]
    },
    "21": {
      "op": "swap",
      "stack_out": [
        "Method(testAsset(asset)void)",
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "match main_testAsset_route@3",
      "stack_out": []
    },
    "26": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "block": "main_after_inlined_tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "28": {
      "block": "main_testAsset_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "31": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "32": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "35": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "36": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "37": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "38": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "41": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "42": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "44": {
      "callsub": "tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.testAsset",
      "op": "callsub testAsset",
      "stack_out": []
    },
    "47": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "b main_after_inlined_tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.__puya_arc4_router__@11"
    },
    "51": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "53": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "54": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "55": {
      "op": "match main___algots__.defaultCreate@7",
      "stack_out": []
    },
    "59": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "62": {
      "block": "main___algots__.defaultCreate@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "64": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "66": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "67": {
      "callsub": "tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "70": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "b main_after_inlined_tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.__puya_arc4_router__@11"
    },
    "74": {
      "subroutine": "tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.testAsset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "testAsset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "77": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "79": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "80": {
      "op": "log",
      "stack_out": []
    },
    "81": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "83": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "85": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "87": {
      "op": "log",
      "stack_out": []
    },
    "88": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "90": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "92": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "94": {
      "op": "log",
      "stack_out": []
    },
    "95": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "97": {
      "op": "asset_params_get AssetDefaultFrozen",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "99": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "100": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "101": {
      "op": "log",
      "stack_out": []
    },
    "102": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "104": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "106": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "107": {
      "op": "log",
      "stack_out": []
    },
    "108": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "110": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "112": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%4#0"
      ]
    },
    "113": {
      "op": "log",
      "stack_out": []
    },
    "114": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "116": {
      "op": "asset_params_get AssetURL",
      "defined_out": [
        "check%5#0",
        "value%5#0"
      ],
      "stack_out": [
        "value%5#0",
        "check%5#0"
      ]
    },
    "118": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%5#0"
      ]
    },
    "119": {
      "op": "log",
      "stack_out": []
    },
    "120": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "122": {
      "op": "asset_params_get AssetMetadataHash",
      "defined_out": [
        "check%6#0",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "check%6#0"
      ]
    },
    "124": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%6#0"
      ]
    },
    "125": {
      "op": "log",
      "stack_out": []
    },
    "126": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "128": {
      "op": "asset_params_get AssetManager",
      "defined_out": [
        "check%7#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "check%7#0"
      ]
    },
    "130": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%7#0"
      ]
    },
    "131": {
      "op": "log",
      "stack_out": []
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "134": {
      "op": "asset_params_get AssetReserve",
      "defined_out": [
        "check%8#0",
        "value%8#0"
      ],
      "stack_out": [
        "value%8#0",
        "check%8#0"
      ]
    },
    "136": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%8#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "140": {
      "op": "asset_params_get AssetFreeze",
      "defined_out": [
        "check%9#0",
        "value%9#0"
      ],
      "stack_out": [
        "value%9#0",
        "check%9#0"
      ]
    },
    "142": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%9#0"
      ]
    },
    "143": {
      "op": "log",
      "stack_out": []
    },
    "144": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "146": {
      "op": "asset_params_get AssetClawback",
      "defined_out": [
        "check%10#0",
        "value%10#0"
      ],
      "stack_out": [
        "value%10#0",
        "check%10#0"
      ]
    },
    "148": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%10#0"
      ]
    },
    "149": {
      "op": "log",
      "stack_out": []
    },
    "150": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "152": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "check%11#0",
        "value%11#0"
      ],
      "stack_out": [
        "value%11#0",
        "check%11#0"
      ]
    },
    "154": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%11#0"
      ]
    },
    "155": {
      "op": "log",
      "stack_out": []
    },
    "156": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "158": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "asset#0 (copy)"
      ]
    },
    "160": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%12#0",
        "value%12#0"
      ],
      "stack_out": [
        "value%12#0",
        "check%12#0"
      ]
    },
    "162": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%12#0"
      ]
    },
    "163": {
      "op": "itob",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "164": {
      "op": "log",
      "stack_out": []
    },
    "165": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "167": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%6#0",
        "asset#0 (copy)"
      ]
    },
    "169": {
      "op": "asset_holding_get AssetFrozen",
      "defined_out": [
        "check%13#0",
        "value%13#0"
      ],
      "stack_out": [
        "value%13#0",
        "check%13#0"
      ]
    },
    "171": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%13#0"
      ]
    },
    "172": {
      "op": "itob",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "173": {
      "op": "log",
      "stack_out": []
    },
    "174": {
      "retsub": true,
      "op": "retsub"
    },
    "175": {
      "subroutine": "tests/approvals/asset-proxy.algo.ts::AssetProxyAlgo.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}