contract Arc4EncodeDecode
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: string): void
  {
    assert(reinterpret_cast<bytes>(ARC4_ENCODE(a, wtype=arc4.uint64)) == reinterpret_cast<bytes>(ARC4_ENCODE(a, wtype=arc4.uint64)))
    assert(reinterpret_cast<bytes>(ARC4_ENCODE(b, wtype=arc4.bool)) == reinterpret_cast<bytes>(ARC4_ENCODE(b, wtype=arc4.bool)))
    assert(reinterpret_cast<bytes>(ARC4_ENCODE(c, wtype=arc4.uint512)) == reinterpret_cast<bytes>(ARC4_ENCODE(c, wtype=arc4.uint512)))
    assert(reinterpret_cast<bytes>(ARC4_ENCODE(d, wtype=arc4.dynamic_array<arc4.byte>)) == reinterpret_cast<bytes>(ARC4_ENCODE(d, wtype=arc4.dynamic_array<arc4.byte>)))
    assert(reinterpret_cast<bytes>(ARC4_ENCODE(e, wtype=arc4.dynamic_array<arc4.byte>)) == reinterpret_cast<bytes>(ARC4_ENCODE(e, wtype=arc4.dynamic_array<arc4.byte>)))
    assert(reinterpret_cast<bytes>(ARC4_ENCODE({ a: a, b: d }, wtype=object)) == reinterpret_cast<bytes>(new TestStruct(a=(#0 = { a: ARC4_ENCODE(a, wtype=arc4.uint64), b: ARC4_ENCODE(d, wtype=arc4.dynamic_array<arc4.byte>) }).a, b=#0.b)))
    assert(8 == 8)
    assert(1 == 1)
    assert(64 == 64)
    assert(17 == 17)
    assert(17 == 17)
  }
  
  testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: string, d_bytes: bytes, e: TestObj{ a: arc4.uint64, b: arc4.dynamic_array<arc4.byte> }, e_bytes: bytes): void
  {
    assert(ARC4_DECODE(reinterpret_cast<arc4.uint64>(a_bytes)) == a)
    assert(ARC4_DECODE(reinterpret_cast<arc4.bool>(b_bytes)) == b)
    assert(ARC4_DECODE(reinterpret_cast<arc4.uint512>(c_bytes)) == c)
    assert(ARC4_DECODE(reinterpret_cast<arc4.dynamic_array<arc4.byte>>(d_bytes)) == d)
    assert(reinterpret_cast<bytes>(ARC4_DECODE(reinterpret_cast<TestObj>(e_bytes)).a) == reinterpret_cast<bytes>(e.a) and reinterpret_cast<bytes>(ARC4_DECODE(reinterpret_cast<TestObj>(e_bytes)).b) == reinterpret_cast<bytes>(e.b), comment=assert target is match for conditions)
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}