{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc4-encode-decode.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AAMA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;AAUE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAVF;;;AAAA;AAAA;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAUE;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADF;;;AAAA;AAAA;;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AACE;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AADF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACE;;;AACS;;AAAA;AAAkB;;AAAA;AAAlB;AAAP;AACO;AAAA;AAAA;;AAAA;AAAkB;AAAA;AAAA;;AAAA;AAAlB;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAlB;AAAP;AACO;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAkB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAlB;AAAP;AACO;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAkB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAlB;AAAP;AACoB;;AAAA;AAAM;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAnB;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAgD;;AAAA;AAAmB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA5B;AAAP;;AAGF;;;AAYS;;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;;;AAAA;;AAAA;AAAP;AAEY;;AAAA;AAAA;AAAA;AAAZ;;AAAA;AAAA;;;AAAY;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAZ;;AAAA;AAAA;;;;AAAA;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 64"
    },
    "7": {
      "op": "bytecblock 0x00 0x"
    },
    "12": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "15": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "19": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "pushbytes 0x9be85afa // method \"testEncoding(uint64,bool,uint512,byte[],string)void\"",
      "defined_out": [
        "Method(testEncoding(uint64,bool,uint512,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testEncoding(uint64,bool,uint512,byte[],string)void)"
      ]
    },
    "28": {
      "op": "pushbytes 0xa2d335ac // method \"testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void\"",
      "defined_out": [
        "Method(testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void)",
        "Method(testEncoding(uint64,bool,uint512,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(testEncoding(uint64,bool,uint512,byte[],string)void)",
        "Method(testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void)"
      ]
    },
    "34": {
      "op": "uncover 2",
      "stack_out": [
        "Method(testEncoding(uint64,bool,uint512,byte[],string)void)",
        "Method(testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void)",
        "tmp%2#0"
      ]
    },
    "36": {
      "op": "match main_testEncoding_route@3 main_testDecoding_route@4",
      "stack_out": []
    },
    "42": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "43": {
      "block": "main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "44": {
      "block": "main_testDecoding_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "46": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "47": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "48": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "51": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "52": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "53": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "54": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "57": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "58": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "61": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "64": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "67": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "68": {
      "op": "getbit",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "69": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "72": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "75": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0"
      ]
    },
    "78": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%23#0"
      ]
    },
    "81": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0"
      ]
    },
    "84": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "87": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "90": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "93": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "96": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%29#0 (copy)",
        "0"
      ]
    },
    "101": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%29#0 (copy)",
        "0",
        "8"
      ]
    },
    "102": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "item0%0#0"
      ]
    },
    "103": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "tmp%29#0"
      ]
    },
    "104": {
      "op": "dup",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "105": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "tmp%29#0",
        "tmp%29#0 (copy)",
        "8"
      ]
    },
    "106": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "tmp%29#0",
        "item_start_offset%0#0"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item_start_offset%0#0",
        "tmp%29#0"
      ]
    },
    "108": {
      "op": "dup",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item_start_offset%0#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "109": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item_start_offset%0#0",
        "tmp%29#0",
        "item_end_offset%0#0"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%29#0"
      ]
    },
    "111": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item_end_offset%0#0",
        "tmp%29#0",
        "item_start_offset%0#0"
      ]
    },
    "113": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "tmp%29#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "115": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "116": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%30#0"
      ]
    },
    "119": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0"
      ]
    },
    "122": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0"
      ]
    },
    "124": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "126": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "128": {
      "op": "uncover 10",
      "stack_out": [
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "130": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0"
      ]
    },
    "132": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0"
      ]
    },
    "134": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "136": {
      "op": "uncover 10",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "138": {
      "op": "uncover 10",
      "stack_out": [
        "item1%0#0",
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0"
      ]
    },
    "140": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%31#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "142": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "reinterpret_bytes[64]%1#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%31#0"
      ]
    },
    "144": {
      "callsub": "tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding",
      "op": "callsub testDecoding",
      "stack_out": []
    },
    "147": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "b main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12"
    },
    "151": {
      "block": "main_testEncoding_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "153": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "158": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "159": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "161": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "164": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "165": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "169": {
      "op": "getbit",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "170": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "173": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0"
      ]
    },
    "176": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0"
      ]
    },
    "179": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "182": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "185": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%7#0"
      ]
    },
    "187": {
      "op": "uncover 4",
      "stack_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "189": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "191": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0"
      ]
    },
    "193": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "195": {
      "callsub": "tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding",
      "op": "callsub testEncoding",
      "stack_out": []
    },
    "198": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "199": {
      "op": "b main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12"
    },
    "202": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "204": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%32#0"
      ]
    },
    "206": {
      "op": "match main___algots__.defaultCreate@8",
      "stack_out": []
    },
    "210": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "213": {
      "block": "main___algots__.defaultCreate@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "215": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "217": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "218": {
      "callsub": "tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "221": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "op": "b main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12"
    },
    "225": {
      "subroutine": "tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e#0": "bytes"
      },
      "block": "testEncoding",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "228": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "230": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "231": {
      "op": "frame_dig -5",
      "stack_out": [
        "val_as_bytes%0#0",
        "a#0 (copy)"
      ]
    },
    "233": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "234": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "assert",
      "stack_out": []
    },
    "236": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "238": {
      "op": "frame_dig -4",
      "defined_out": [
        "0",
        "0x00",
        "b#0 (copy)"
      ],
      "stack_out": [
        "0x00",
        "0",
        "b#0 (copy)"
      ]
    },
    "240": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "243": {
      "op": "frame_dig -4",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00",
        "0",
        "b#0 (copy)"
      ]
    },
    "245": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "247": {
      "op": "assert",
      "stack_out": []
    },
    "248": {
      "op": "frame_dig -3",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "250": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "251": {
      "op": "intc_3 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "252": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "253": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "254": {
      "op": "intc_3 // 64",
      "stack_out": [
        "64"
      ]
    },
    "255": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "256": {
      "op": "frame_dig -3",
      "stack_out": [
        "b_zeros%0#0",
        "c#0 (copy)"
      ]
    },
    "258": {
      "op": "b|",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "259": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "c#0 (copy)"
      ]
    },
    "261": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "len_%1#0"
      ]
    },
    "262": {
      "op": "intc_3 // 64",
      "stack_out": [
        "tmp%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "263": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "no_overflow%1#0"
      ]
    },
    "264": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "265": {
      "op": "intc_3 // 64",
      "stack_out": [
        "tmp%2#0",
        "64"
      ]
    },
    "266": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "b_zeros%1#0"
      ]
    },
    "267": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "b_zeros%1#0",
        "c#0 (copy)"
      ]
    },
    "269": {
      "op": "b|",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "271": {
      "op": "assert",
      "stack_out": []
    },
    "272": {
      "op": "frame_dig -2",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "274": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "276": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "279": {
      "op": "frame_dig -2",
      "stack_out": [
        "length_uint16%0#0",
        "d#0 (copy)"
      ]
    },
    "281": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "282": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "d#0 (copy)"
      ]
    },
    "284": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "285": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "286": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "289": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "d#0 (copy)"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "292": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "293": {
      "op": "assert",
      "stack_out": []
    },
    "294": {
      "op": "frame_dig -1",
      "defined_out": [
        "e#0 (copy)"
      ],
      "stack_out": [
        "e#0 (copy)"
      ]
    },
    "296": {
      "op": "len",
      "defined_out": [
        "length%2#0"
      ],
      "stack_out": [
        "length%2#0"
      ]
    },
    "297": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0"
      ],
      "stack_out": [
        "as_bytes%2#0"
      ]
    },
    "298": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0"
      ],
      "stack_out": [
        "length_uint16%2#0"
      ]
    },
    "301": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%2#0",
        "e#0 (copy)"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "304": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%2#0",
        "e#0 (copy)"
      ]
    },
    "306": {
      "op": "len",
      "defined_out": [
        "encoded_value%2#0",
        "length%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "length%3#0"
      ]
    },
    "307": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "as_bytes%3#0"
      ]
    },
    "308": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%2#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "length_uint16%3#0"
      ]
    },
    "311": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%2#0",
        "length_uint16%3#0",
        "e#0 (copy)"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "315": {
      "op": "assert",
      "stack_out": []
    },
    "316": {
      "op": "frame_dig -5",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "318": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "319": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%2#0",
        "d#0 (copy)"
      ]
    },
    "321": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "length%4#0"
      ]
    },
    "322": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "as_bytes%4#0"
      ]
    },
    "323": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%4#0"
      ]
    },
    "326": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%4#0",
        "d#0 (copy)"
      ]
    },
    "328": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_value%4#0"
      ]
    },
    "329": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "330": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "332": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "333": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded_tuple_buffer%1#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%1#0",
        "10"
      ]
    },
    "335": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%5#0"
      ]
    },
    "336": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%4#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%4#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "342": {
      "op": "frame_dig -5",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "a#0 (copy)"
      ]
    },
    "344": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "345": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "d#0 (copy)"
      ]
    },
    "347": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "length%6#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "length%6#0"
      ]
    },
    "348": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "as_bytes%7#0"
      ]
    },
    "349": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "length_uint16%6#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "length_uint16%6#0"
      ]
    },
    "352": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "length_uint16%6#0",
        "d#0 (copy)"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "encoded_value%6#0"
      ]
    },
    "355": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "val_as_bytes%3#0"
      ]
    },
    "356": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "357": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "358": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "359": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%5#0",
        "10"
      ]
    },
    "361": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%8#0"
      ]
    },
    "362": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%6#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%1#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%6#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "368": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "369": {
      "op": "assert",
      "stack_out": []
    },
    "370": {
      "retsub": true,
      "op": "retsub"
    },
    "371": {
      "subroutine": "tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding",
      "params": {
        "a#0": "uint64",
        "a_bytes#0": "bytes",
        "b#0": "uint64",
        "b_bytes#0": "bytes",
        "c#0": "bytes",
        "c_bytes#0": "bytes",
        "d#0": "bytes",
        "d_bytes#0": "bytes",
        "e.a#0": "bytes",
        "e.b#0": "bytes",
        "e_bytes#0": "bytes"
      },
      "block": "testDecoding",
      "stack_in": [],
      "op": "proto 11 0"
    },
    "374": {
      "op": "frame_dig -10",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "376": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "377": {
      "op": "frame_dig -11",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "379": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "380": {
      "op": "assert",
      "stack_out": []
    },
    "381": {
      "op": "frame_dig -8",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "383": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "384": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "385": {
      "op": "frame_dig -9",
      "defined_out": [
        "b#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "b#0 (copy)"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "388": {
      "op": "assert",
      "stack_out": []
    },
    "389": {
      "op": "frame_dig -6",
      "defined_out": [
        "reinterpret_bytes[64]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "391": {
      "op": "frame_dig -7",
      "defined_out": [
        "c#0 (copy)",
        "reinterpret_bytes[64]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[64]%0#0",
        "c#0 (copy)"
      ]
    },
    "393": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "394": {
      "op": "assert",
      "stack_out": []
    },
    "395": {
      "op": "frame_dig -4",
      "defined_out": [
        "d_bytes#0 (copy)"
      ],
      "stack_out": [
        "d_bytes#0 (copy)"
      ]
    },
    "397": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "400": {
      "op": "frame_dig -5",
      "defined_out": [
        "d#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "d#0 (copy)"
      ]
    },
    "402": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "403": {
      "op": "assert",
      "stack_out": []
    },
    "404": {
      "op": "frame_dig -1",
      "defined_out": [
        "e_bytes#0 (copy)"
      ],
      "stack_out": [
        "e_bytes#0 (copy)"
      ]
    },
    "406": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e_bytes#0 (copy)",
        "0"
      ]
    },
    "407": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "e_bytes#0 (copy)"
      ],
      "stack_out": [
        "e_bytes#0 (copy)",
        "0",
        "8"
      ]
    },
    "408": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0"
      ],
      "stack_out": [
        "item0%0#0"
      ]
    },
    "409": {
      "op": "frame_dig -3",
      "defined_out": [
        "e.a#0 (copy)",
        "item0%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "e.a#0 (copy)"
      ]
    },
    "411": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "412": {
      "op": "bz testDecoding_bool_false@3",
      "stack_out": []
    },
    "415": {
      "block": "testDecoding_and_contd@1",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "e_bytes#0 (copy)"
      ],
      "stack_out": [
        "e_bytes#0 (copy)"
      ]
    },
    "417": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "e_bytes#0 (copy)"
      ],
      "stack_out": [
        "e_bytes#0 (copy)",
        "8"
      ]
    },
    "418": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0"
      ],
      "stack_out": [
        "item_start_offset%1#0"
      ]
    },
    "419": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%1#0",
        "e_bytes#0 (copy)"
      ]
    },
    "421": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0"
      ],
      "stack_out": [
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "422": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "e_bytes#0 (copy)"
      ]
    },
    "424": {
      "op": "uncover 2",
      "stack_out": [
        "item_end_offset%1#0",
        "e_bytes#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "426": {
      "op": "uncover 2",
      "stack_out": [
        "e_bytes#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "428": {
      "op": "substring3",
      "defined_out": [
        "item1%1#0"
      ],
      "stack_out": [
        "item1%1#0"
      ]
    },
    "429": {
      "op": "frame_dig -2",
      "defined_out": [
        "e.b#0 (copy)",
        "item1%1#0"
      ],
      "stack_out": [
        "item1%1#0",
        "e.b#0 (copy)"
      ]
    },
    "431": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "432": {
      "op": "bz testDecoding_bool_false@3",
      "stack_out": []
    },
    "435": {
      "block": "testDecoding_bool_true@2",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "436": {
      "block": "testDecoding_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "437": {
      "retsub": true,
      "op": "retsub"
    },
    "438": {
      "block": "testDecoding_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "439": {
      "op": "b testDecoding_bool_merge@4"
    },
    "442": {
      "subroutine": "tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}