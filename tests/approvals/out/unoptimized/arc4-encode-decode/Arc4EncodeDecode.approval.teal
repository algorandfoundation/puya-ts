#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x 0x00 0x068101
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@9
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@7
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x34b146c1 // method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void"
    pushbytes 0x00fd2534 // method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void"
    uncover 2
    match main_testEncoding_route@4 main_testDecoding_route@5
    b main_switch_case_next@6

main_switch_case_next@6:
    b main_after_if_else@8

main_after_if_else@8:
    b main_after_if_else@10

main_after_if_else@10:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    err

main_testDecoding_route@5:
    // tests/approvals/arc4-encode-decode.algo.ts:65-80
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    //   f: Address,
    //   f_bytes: bytes,
    //   g: bytes<12>,
    //   g_bytes: bytes,
    // ) {
    callsub testDecoding
    b main_switch_case_next@6

main_testEncoding_route@4:
    // tests/approvals/arc4-encode-decode.algo.ts:25
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string, f: Address, g: bytes<12>) {
    callsub testEncoding
    b main_switch_case_next@6

main_create_NoOp@7:
    b main_after_if_else@8

main___algots__.defaultCreate@9:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    b ensure_budget_block@0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +
    b ensure_budget_while_top@1

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@6
    b ensure_budget_while_body@2

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_2 // 0x068101
    itxn_field ApprovalProgram
    bytec_2 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding[routing]() -> void:
testEncoding:
    b testEncoding_block@0

testEncoding_block@0:
    // tests/approvals/arc4-encode-decode.algo.ts:25
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string, f: Address, g: bytes<12>) {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 1
    ==
    assert // invalid number of bytes for bool8
    intc_0 // 0
    getbit
    txna ApplicationArgs 3
    dup
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for uint512
    txna ApplicationArgs 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 5
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    txna ApplicationArgs 6
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    txna ApplicationArgs 7
    dup
    len
    pushint 12 // 12
    ==
    assert // invalid number of bytes for uint8[12]
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    callsub tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding
    intc_1 // 1
    return


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding[routing]() -> void:
testDecoding:
    b testDecoding_block@0

testDecoding_block@0:
    // tests/approvals/arc4-encode-decode.algo.ts:65-80
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    //   f: Address,
    //   f_bytes: bytes,
    //   g: bytes<12>,
    //   g_bytes: bytes,
    // ) {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 3
    dup
    len
    intc_1 // 1
    ==
    assert // invalid number of bytes for bool8
    intc_0 // 0
    getbit
    txna ApplicationArgs 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 5
    dup
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for uint512
    txna ApplicationArgs 6
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 7
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    txna ApplicationArgs 8
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 11
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    txna ApplicationArgs 12
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 13
    dup
    len
    pushint 12 // 12
    ==
    assert // invalid number of bytes for uint8[12]
    txna ApplicationArgs 14
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    uncover 13
    callsub tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding
    intc_1 // 1
    return


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: uint64, c: bytes, d: bytes, e: bytes, f: bytes, g: bytes) -> void:
tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding:
    // tests/approvals/arc4-encode-decode.algo.ts:25
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string, f: Address, g: bytes<12>) {
    proto 7 0
    b tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding_block@0

tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding_block@0:
    // tests/approvals/arc4-encode-decode.algo.ts:26
    // ensureBudget(1400)
    pushint 1400 // 1400
    intc_0 // 0
    callsub ensure_budget
    // tests/approvals/arc4-encode-decode.algo.ts:27
    // assert(encodeArc4(a) === new Uint64(a).bytes)
    frame_dig -7
    itob
    frame_dig -7
    itob
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:28
    // assert(encodeArc4(b) === new Bool(b).bytes)
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:29
    // assert(encodeArc4(c) === new Uint<512>(c).bytes)
    frame_dig -5
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    frame_dig -5
    b|
    frame_dig -5
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    frame_dig -5
    b|
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:30
    // assert(encodeArc4(d) === new DynamicBytes(d).bytes)
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:31
    // assert(encodeArc4(e) === new Str(e).bytes)
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:32
    // assert(encodeArc4({ a, b: d }) === new TestStruct({ a: new Uint64(a), b: new DynamicBytes(d) }).bytes)
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -7
    itob
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    uncover 2
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:33
    // assert(encodeArc4({ a, b: d }) === encodeArc4({ a, b: new DynamicBytes(d) }))
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:34
    // assert(encodeArc4({ a, b: g }) === encodeArc4({ a, b: new StaticBytes<12>(g) }))
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:35
    // assert(encodeArc4(f) === f.bytes)
    frame_dig -2
    frame_dig -2
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:36
    // assert(encodeArc4(g) === new StaticBytes(g).bytes)
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:38
    // assert(encodeArc4([a]) === new StaticArray(new Uint64(a)).bytes)
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -7
    itob
    bytec_0 // 0x
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:39
    // assert(encodeArc4([b]) === new StaticArray(new Bool(b)).bytes)
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:40
    // assert(encodeArc4([c]) === new StaticArray(new Uint<512>(c)).bytes)
    frame_dig -5
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    frame_dig -5
    b|
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -5
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    frame_dig -5
    b|
    bytec_0 // 0x
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:41
    // assert(encodeArc4([d]) === new StaticArray(new DynamicBytes(d)).bytes)
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:42
    // assert(encodeArc4([e]) === new StaticArray(new Str(e)).bytes)
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:43
    // assert(encodeArc4([f]) === new StaticArray(f).bytes)
    bytec_0 // 0x
    frame_dig -2
    concat
    bytec_0 // 0x
    frame_dig -2
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:44
    // assert(encodeArc4([g]) === new StaticArray(new StaticBytes(g)).bytes)
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    bytec_0 // 0x
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:46
    // assert(encodeArc4<uint64[]>([a]) === new DynamicArray(new Uint64(a)).bytes)
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -7
    itob
    concat
    frame_dig -7
    itob
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:47
    // assert(encodeArc4<boolean[]>([b]) === new DynamicArray(new Bool(b)).bytes)
    intc_1 // 1
    itob
    extract 6 2
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    concat
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:48
    // assert(encodeArc4<biguint[]>([c]) === new DynamicArray(new Uint<512>(c)).bytes)
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -5
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    frame_dig -5
    b|
    concat
    frame_dig -5
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    frame_dig -5
    b|
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:49
    // assert(encodeArc4<bytes[]>([d]) === new DynamicArray(new DynamicBytes(d)).bytes)
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    intc_2 // 2
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    intc_1 // 1
    itob
    extract 6 2
    intc_2 // 2
    itob
    extract 6 2
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:50
    // assert(encodeArc4<string[]>([e]) === new DynamicArray(new Str(e)).bytes)
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    intc_2 // 2
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    intc_1 // 1
    itob
    extract 6 2
    intc_2 // 2
    itob
    extract 6 2
    concat
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:51
    // assert(encodeArc4<Address[]>([f]) === new DynamicArray(f).bytes)
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -2
    concat
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -2
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:52
    // assert(encodeArc4<bytes<12>[]>([g]) === new DynamicArray(new StaticBytes(g)).bytes)
    intc_1 // 1
    itob
    extract 6 2
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    intc_1 // 1
    itob
    extract 6 2
    uncover 1
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:54
    // assert(sizeOf<uint64>() === 8)
    intc_3 // 8
    intc_3 // 8
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:55
    // assert(sizeOf<boolean>() === 1)
    intc_1 // 1
    intc_1 // 1
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:56
    // assert(sizeOf<Uint<512>>() === 64)
    pushint 64 // 64
    pushint 64 // 64
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:57
    // assert(sizeOf<[uint64, uint64, boolean]>() === 17)
    pushint 17 // 17
    pushint 17 // 17
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:58
    // assert(sizeOf<[uint64, uint64, boolean, boolean]>() === 17)
    pushint 17 // 17
    pushint 17 // 17
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:59
    // assert(sizeOf<[StaticArray<Bool, 10>, boolean, boolean]>() === 3)
    pushint 3 // 3
    pushint 3 // 3
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:60
    // assert(sizeOf<[[boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean], boolean, boolean]>() === 3)
    pushint 3 // 3
    pushint 3 // 3
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:61
    // assert(sizeOf<typeof g>() === 12)
    pushint 12 // 12
    pushint 12 // 12
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:62
    // assert(sizeOf<StaticMutableObject>() === 20)
    pushint 20 // 20
    pushint 20 // 20
    ==
    assert
    retsub


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: uint64, b_bytes: bytes, c: bytes, c_bytes: bytes, d: bytes, d_bytes: bytes, e: bytes, e_bytes: bytes, f: bytes, f_bytes: bytes, g: bytes, g_bytes: bytes) -> void:
tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding:
    // tests/approvals/arc4-encode-decode.algo.ts:65-80
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    //   f: Address,
    //   f_bytes: bytes,
    //   g: bytes<12>,
    //   g_bytes: bytes,
    // ) {
    proto 14 0
    b tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding_block@0

tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding_block@0:
    // tests/approvals/arc4-encode-decode.algo.ts:81
    // assert(decodeArc4<uint64>(a_bytes) === a)
    frame_dig -13
    btoi
    frame_dig -14
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:82
    // assert(decodeArc4<boolean>(b_bytes) === b)
    frame_dig -11
    intc_0 // 0
    getbit
    frame_dig -12
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:83
    // assert(decodeArc4<biguint>(c_bytes) === c)
    frame_dig -9
    frame_dig -10
    b==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:84
    // assert(decodeArc4<string>(d_bytes) === d)
    frame_dig -7
    extract 2 0
    frame_dig -8
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:85
    // assertMatch(decodeArc4<TestObj>(e_bytes), e)
    frame_dig -5
    intc_0 // 0
    intc_3 // 8
    extract3
    frame_dig -6
    intc_0 // 0
    intc_3 // 8
    extract3
    ==
    frame_dig -5
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    frame_dig -6
    intc_3 // 8
    extract_uint16
    frame_dig -6
    len
    frame_dig -6
    uncover 2
    uncover 2
    substring3
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/arc4-encode-decode.algo.ts:87
    // const lenPrefix = itob(1).slice(6, 8)
    intc_1 // 1
    itob
    dup
    len
    pushint 6 // 6
    dig 1
    >=
    pushint 6 // 6
    dig 2
    uncover 2
    select
    cover 1
    intc_3 // 8
    dig 1
    >=
    intc_3 // 8
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    // tests/approvals/arc4-encode-decode.algo.ts:88
    // const offsetHeader = itob(2).slice(6, 8)
    intc_2 // 2
    itob
    dup
    len
    pushint 6 // 6
    dig 1
    >=
    pushint 6 // 6
    dig 2
    uncover 2
    select
    cover 1
    intc_3 // 8
    dig 1
    >=
    intc_3 // 8
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    cover 1
    // tests/approvals/arc4-encode-decode.algo.ts:89
    // assertMatch(decodeArc4<uint64[]>(lenPrefix.concat(a_bytes)), [a], 'Array of uint64 matches')
    dup
    frame_dig -13
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    cover 1
    dup
    frame_dig -13
    concat
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    frame_dig -14
    ==
    uncover 2
    &&
    assert // Array of uint64 matches
    // tests/approvals/arc4-encode-decode.algo.ts:90
    // assertMatch(decodeArc4<boolean[]>(lenPrefix.concat(b_bytes)), [b], 'Array of boolean matches')
    dup
    frame_dig -11
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    cover 1
    dup
    frame_dig -11
    concat
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    pushint 16 // 16
    +
    getbit
    frame_dig -12
    ==
    uncover 2
    &&
    assert // Array of boolean matches
    // tests/approvals/arc4-encode-decode.algo.ts:91
    // log(lenPrefix.concat(c_bytes))
    dup
    frame_dig -9
    concat
    log
    // tests/approvals/arc4-encode-decode.algo.ts:92
    // assertMatch(decodeArc4<biguint[]>(lenPrefix.concat(c_bytes)), [c], 'Array of biguint matches')
    dup
    frame_dig -9
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    cover 1
    dup
    frame_dig -9
    concat
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    intc_0 // 0
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    frame_dig -10
    b==
    uncover 2
    &&
    assert // Array of biguint matches
    // tests/approvals/arc4-encode-decode.algo.ts:93
    // assertMatch(decodeArc4<string[]>(Bytes`${lenPrefix}${offsetHeader}${d_bytes}`), [d], 'Array of string matches')
    bytec_0 // ""
    dig 1
    concat
    dig 2
    concat
    frame_dig -7
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    cover 2
    bytec_0 // ""
    dig 1
    concat
    dig 2
    concat
    frame_dig -7
    concat
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_1 // 1
    *
    intc_2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    extract 2 0
    frame_dig -8
    ==
    uncover 3
    &&
    assert // Array of string matches
    // tests/approvals/arc4-encode-decode.algo.ts:95
    // assertMatch(decodeArc4<TestObj[]>(Bytes`${lenPrefix}${offsetHeader}${e_bytes}`), [e], 'Array of struct matches')
    bytec_0 // ""
    dig 1
    concat
    dig 2
    concat
    frame_dig -5
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    cover 2
    bytec_0 // ""
    dig 1
    concat
    dig 2
    concat
    frame_dig -5
    concat
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3
    frame_dig -6
    intc_0 // 0
    intc_3 // 8
    extract3
    ==
    cover 2
    bytec_0 // ""
    dig 1
    concat
    uncover 2
    concat
    frame_dig -5
    concat
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    frame_dig -6
    intc_3 // 8
    extract_uint16
    frame_dig -6
    len
    frame_dig -6
    uncover 2
    uncover 2
    substring3
    ==
    uncover 2
    &&
    uncover 2
    &&
    assert // Array of struct matches
    // tests/approvals/arc4-encode-decode.algo.ts:96
    // assertMatch(decodeArc4<Address[]>(Bytes`${lenPrefix}${f_bytes}`), [f], 'Array of address matches')
    bytec_0 // ""
    dig 1
    concat
    frame_dig -3
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    cover 1
    bytec_0 // ""
    uncover 1
    concat
    frame_dig -3
    concat
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    intc_0 // 0
    pushint 32 // 32
    *
    pushint 32 // 32
    extract3 // on error: index access is out of bounds
    frame_dig -4
    ==
    &&
    assert // Array of address matches
    // tests/approvals/arc4-encode-decode.algo.ts:98
    // assert(decodeArc4<bytes<12>>(g_bytes) === g)
    frame_dig -1
    frame_dig -2
    ==
    assert
    retsub


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
