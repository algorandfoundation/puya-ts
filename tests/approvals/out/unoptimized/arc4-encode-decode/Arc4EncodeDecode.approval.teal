#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 64 2
    bytecblock 0x 0x00 0x068101

main_block@0:

main_block@1:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x34b146c1 // method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void"
    pushbytes 0x00fd2534 // method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void"
    uncover 2
    match main_testEncoding_route@3 main_testDecoding_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12:
    return

main_testDecoding_route@4:
    // tests/approvals/arc4-encode-decode.algo.ts:69-84
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    //   f: Address,
    //   f_bytes: bytes,
    //   g: bytes<12>,
    //   g_bytes: bytes,
    // ) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    intc_0 // 0
    getbit
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    extract 2 0
    txna ApplicationArgs 7
    extract 2 0
    txna ApplicationArgs 8
    extract 2 0
    txna ApplicationArgs 9
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3
    swap
    dup
    pushint 8 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    txna ApplicationArgs 10
    extract 2 0
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    extract 2 0
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    extract 2 0
    // tests/approvals/arc4-encode-decode.algo.ts:69-84
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    //   f: Address,
    //   f_bytes: bytes,
    //   g: bytes<12>,
    //   g_bytes: bytes,
    // ) {
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    uncover 14
    callsub testDecoding
    intc_1 // 1
    b main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12

main_testEncoding_route@3:
    // tests/approvals/arc4-encode-decode.algo.ts:25
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string, f: Address, g: bytes<12>) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    // tests/approvals/arc4-encode-decode.algo.ts:25
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string, f: Address, g: bytes<12>) {
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    uncover 6
    callsub testEncoding
    intc_1 // 1
    b main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12

main_bare_routing@7:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    // tests/approvals/arc4-encode-decode.algo.ts:24
    // export class Arc4EncodeDecode extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__@12


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@7

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_2 // 0x068101
    itxn_field ApprovalProgram
    bytec_2 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_default@5:

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: uint64, c: bytes, d: bytes, e: bytes, f: bytes, g: bytes) -> void:
testEncoding:
    // tests/approvals/arc4-encode-decode.algo.ts:25
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string, f: Address, g: bytes<12>) {
    proto 7 0

testEncoding_block@0:
    // tests/approvals/arc4-encode-decode.algo.ts:26
    // ensureBudget(1400)
    pushint 1400 // 1400
    intc_0 // 0
    callsub ensure_budget
    // tests/approvals/arc4-encode-decode.algo.ts:27
    // assert(encodeArc4(a) === new UintN64(a).bytes)
    frame_dig -7
    itob
    frame_dig -7
    itob
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:28
    // assert(encodeArc4(b) === new Bool(b).bytes)
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:29
    // assert(encodeArc4(c) === new UintN<512>(c).bytes)
    frame_dig -5
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    frame_dig -5
    b|
    frame_dig -5
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    frame_dig -5
    b|
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:30
    // assert(encodeArc4(d) === new DynamicBytes(d).bytes)
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:31
    // assert(encodeArc4(e) === new Str(e).bytes)
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:32
    // assert(encodeArc4({ a, b: d }) === new TestStruct({ a: new UintN64(a), b: new DynamicBytes(d) }).bytes)
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    frame_dig -7
    itob
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:33
    // assert(encodeArc4({ a, b: d }) === encodeArc4(new DynamicMutableObject({ a, b: new DynamicBytes(d) })))
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:34
    // assert(encodeArc4({ a, b: g }) === encodeArc4(new StaticMutableObject({ a, b: new StaticBytes<12>(g) })))
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    concat
    bytec_0 // 0x
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:35
    // assert(encodeArc4(f) === f.bytes)
    frame_dig -2
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:36
    // assert(encodeArc4(g) === new StaticBytes(g).bytes)
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    dup
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:38
    // assert(encodeArc4([a]) === new StaticArray(new UintN64(a)).bytes)
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:39
    // assert(encodeArc4([b]) === new StaticArray(new Bool(b)).bytes)
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:40
    // assert(encodeArc4([c]) === new StaticArray(new UintN<512>(c)).bytes)
    frame_dig -5
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    frame_dig -5
    b|
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    frame_dig -5
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    frame_dig -5
    b|
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:41
    // assert(encodeArc4([d]) === new StaticArray(new DynamicBytes(d)).bytes)
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:42
    // assert(encodeArc4([e]) === new StaticArray(new Str(e)).bytes)
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:43
    // assert(encodeArc4([f]) === new StaticArray(f).bytes)
    bytec_0 // 0x
    frame_dig -2
    concat
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    frame_dig -2
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:44
    // assert(encodeArc4([g]) === new StaticArray(new StaticBytes(g)).bytes)
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:46
    // assert(encodeArc4<uint64[]>([a]) === new DynamicArray(new UintN64(a)).bytes)
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    frame_dig -7
    itob
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:47
    // assert(encodeArc4<boolean[]>([b]) === new DynamicArray(new Bool(b)).bytes)
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -6
    setbit
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:48
    // assert(encodeArc4<biguint[]>([c]) === new DynamicArray(new UintN<512>(c)).bytes)
    frame_dig -5
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    frame_dig -5
    b|
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    frame_dig -5
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    frame_dig -5
    b|
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:49
    // assert(encodeArc4<bytes[]>([d]) === new DynamicArray(new DynamicBytes(d)).bytes)
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    swap
    concat
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:50
    // assert(encodeArc4<string[]>([e]) === new DynamicArray(new Str(e)).bytes)
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    swap
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    bytec_0 // 0x
    swap
    concat
    intc_3 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    swap
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:51
    // assert(encodeArc4<Address[]>([f]) === new DynamicArray(f).bytes)
    bytec_0 // 0x
    frame_dig -2
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    frame_dig -2
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:52
    // assert(encodeArc4<bytes<12>[]>([g]) === new DynamicArray(new StaticBytes(g)).bytes)
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    frame_dig -1
    len
    pushint 12 // 12
    ==
    assert // invalid size
    frame_dig -1
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x
    concat
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:54
    // assert(arc4EncodedLength<uint64>() === 8)
    pushint 8 // 8
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:55
    // assert(arc4EncodedLength<boolean>() === 1)
    intc_1 // 1
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:56
    // assert(arc4EncodedLength<UintN<512>>() === 64)
    intc_2 // 64
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:57
    // assert(arc4EncodedLength<[uint64, uint64, boolean]>() === 17)
    pushint 17 // 17
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:58
    // assert(arc4EncodedLength<[uint64, uint64, boolean, boolean]>() === 17)
    pushint 17 // 17
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:59
    // assert(arc4EncodedLength<[StaticArray<Bool, 10>, boolean, boolean]>() === 3)
    pushint 3 // 3
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:61-63
    // arc4EncodedLength<
    //   [[boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean], boolean, boolean]
    // >() === 3,
    pushint 3 // 3
    // tests/approvals/arc4-encode-decode.algo.ts:63
    // >() === 3,
    dup
    // tests/approvals/arc4-encode-decode.algo.ts:61-63
    // arc4EncodedLength<
    //   [[boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean], boolean, boolean]
    // >() === 3,
    ==
    // tests/approvals/arc4-encode-decode.algo.ts:60-64
    // assert(
    //   arc4EncodedLength<
    //     [[boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean], boolean, boolean]
    //   >() === 3,
    // )
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:65
    // assert(arc4EncodedLength<typeof g>() === 12)
    pushint 12 // 12
    dup
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:66
    // assert(arc4EncodedLength<StaticMutableObject>() === 20)
    pushint 20 // 20
    dup
    ==
    assert
    retsub


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: uint64, b_bytes: bytes, c: bytes, c_bytes: bytes, d: bytes, d_bytes: bytes, e.a: bytes, e.b: bytes, e_bytes: bytes, f: bytes, f_bytes: bytes, g: bytes, g_bytes: bytes) -> void:
testDecoding:
    // tests/approvals/arc4-encode-decode.algo.ts:69-84
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    //   f: Address,
    //   f_bytes: bytes,
    //   g: bytes<12>,
    //   g_bytes: bytes,
    // ) {
    proto 15 0
    intc_0 // 0
    dup

testDecoding_block@0:
    // tests/approvals/arc4-encode-decode.algo.ts:85
    // assert(decodeArc4<uint64>(a_bytes) === a)
    frame_dig -14
    btoi
    frame_dig -15
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:86
    // assert(decodeArc4<boolean>(b_bytes) === b)
    frame_dig -12
    intc_0 // 0
    getbit
    frame_dig -13
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:87
    // assert(decodeArc4<biguint>(c_bytes) === c)
    frame_dig -10
    frame_dig -11
    b==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:88
    // assert(decodeArc4<string>(d_bytes) === d)
    frame_dig -8
    extract 2 0
    frame_dig -9
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:89
    // assertMatch(decodeArc4<TestObj>(e_bytes), e)
    frame_dig -5
    intc_0 // 0
    pushint 8 // 8
    extract3
    frame_dig -7
    ==
    bz testDecoding_bool_false@3

testDecoding_and_contd@1:
    // tests/approvals/arc4-encode-decode.algo.ts:89
    // assertMatch(decodeArc4<TestObj>(e_bytes), e)
    frame_dig -5
    dup
    pushint 8 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    frame_dig -6
    ==
    bz testDecoding_bool_false@3

testDecoding_bool_true@2:
    intc_1 // 1

testDecoding_bool_merge@4:
    // tests/approvals/arc4-encode-decode.algo.ts:89
    // assertMatch(decodeArc4<TestObj>(e_bytes), e)
    assert // assert target is match for conditions
    // tests/approvals/arc4-encode-decode.algo.ts:91
    // const lenPrefix = itob(1).slice(6, 8)
    intc_1 // 1
    itob
    dup
    len
    pushint 6 // 6
    dig 1
    >=
    pushint 6 // 6
    dig 2
    uncover 2
    select
    swap
    pushint 8 // 8
    dig 1
    >=
    pushint 8 // 8
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    dup
    frame_bury 0
    // tests/approvals/arc4-encode-decode.algo.ts:92
    // const offsetHeader = itob(2).slice(6, 8)
    intc_3 // 2
    itob
    dup
    len
    pushint 6 // 6
    dig 1
    >=
    pushint 6 // 6
    dig 2
    uncover 2
    select
    swap
    pushint 8 // 8
    dig 1
    >=
    pushint 8 // 8
    uncover 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    frame_bury 1
    // tests/approvals/arc4-encode-decode.algo.ts:93
    // assertMatch(decodeArc4<uint64[]>(lenPrefix.concat(a_bytes)), [a], 'Array of uint64 matches')
    frame_dig -14
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    bz testDecoding_bool_false@7

testDecoding_and_contd@5:
    // tests/approvals/arc4-encode-decode.algo.ts:93
    // assertMatch(decodeArc4<uint64[]>(lenPrefix.concat(a_bytes)), [a], 'Array of uint64 matches')
    frame_dig 0
    frame_dig -14
    concat
    extract 2 0
    intc_0 // 0
    pushint 8 // 8
    *
    pushint 8 // 8
    extract3 // on error: index access is out of bounds
    btoi
    frame_dig -15
    ==
    bz testDecoding_bool_false@7

testDecoding_bool_true@6:
    intc_1 // 1

testDecoding_bool_merge@8:
    // tests/approvals/arc4-encode-decode.algo.ts:93
    // assertMatch(decodeArc4<uint64[]>(lenPrefix.concat(a_bytes)), [a], 'Array of uint64 matches')
    assert // Array of uint64 matches
    // tests/approvals/arc4-encode-decode.algo.ts:94
    // assertMatch(decodeArc4<boolean[]>(lenPrefix.concat(b_bytes)), [b], 'Array of boolean matches')
    frame_dig 0
    frame_dig -12
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    bz testDecoding_bool_false@11

testDecoding_and_contd@9:
    // tests/approvals/arc4-encode-decode.algo.ts:94
    // assertMatch(decodeArc4<boolean[]>(lenPrefix.concat(b_bytes)), [b], 'Array of boolean matches')
    frame_dig 0
    frame_dig -12
    concat
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    extract 2 0
    intc_0 // 0
    getbit
    intc_0 // 0
    getbit
    frame_dig -13
    ==
    bz testDecoding_bool_false@11

testDecoding_bool_true@10:
    intc_1 // 1

testDecoding_bool_merge@12:
    // tests/approvals/arc4-encode-decode.algo.ts:94
    // assertMatch(decodeArc4<boolean[]>(lenPrefix.concat(b_bytes)), [b], 'Array of boolean matches')
    assert // Array of boolean matches
    // tests/approvals/arc4-encode-decode.algo.ts:95
    // log(lenPrefix.concat(c_bytes))
    frame_dig 0
    dup
    frame_dig -10
    concat
    log
    // tests/approvals/arc4-encode-decode.algo.ts:96
    // assertMatch(decodeArc4<biguint[]>(lenPrefix.concat(c_bytes)), [c], 'Array of biguint matches')
    frame_dig -10
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    bz testDecoding_bool_false@15

testDecoding_and_contd@13:
    // tests/approvals/arc4-encode-decode.algo.ts:96
    // assertMatch(decodeArc4<biguint[]>(lenPrefix.concat(c_bytes)), [c], 'Array of biguint matches')
    frame_dig 0
    frame_dig -10
    concat
    extract 2 0
    intc_0 // 0
    intc_2 // 64
    *
    intc_2 // 64
    extract3 // on error: index access is out of bounds
    frame_dig -11
    b==
    bz testDecoding_bool_false@15

testDecoding_bool_true@14:
    intc_1 // 1

testDecoding_bool_merge@16:
    // tests/approvals/arc4-encode-decode.algo.ts:96
    // assertMatch(decodeArc4<biguint[]>(lenPrefix.concat(c_bytes)), [c], 'Array of biguint matches')
    assert // Array of biguint matches
    // tests/approvals/arc4-encode-decode.algo.ts:97
    // assertMatch(decodeArc4<string[]>(Bytes`${lenPrefix}${offsetHeader}${d_bytes}`), [d], 'Array of string matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig 1
    concat
    frame_dig -8
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    bz testDecoding_bool_false@19

testDecoding_and_contd@17:
    // tests/approvals/arc4-encode-decode.algo.ts:97
    // assertMatch(decodeArc4<string[]>(Bytes`${lenPrefix}${offsetHeader}${d_bytes}`), [d], 'Array of string matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig 1
    concat
    frame_dig -8
    concat
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_1 // 1
    *
    intc_3 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    extract 2 0
    frame_dig -9
    ==
    bz testDecoding_bool_false@19

testDecoding_bool_true@18:
    intc_1 // 1

testDecoding_bool_merge@20:
    // tests/approvals/arc4-encode-decode.algo.ts:97
    // assertMatch(decodeArc4<string[]>(Bytes`${lenPrefix}${offsetHeader}${d_bytes}`), [d], 'Array of string matches')
    assert // Array of string matches
    // tests/approvals/arc4-encode-decode.algo.ts:99
    // assertMatch(decodeArc4<TestObj[]>(Bytes`${lenPrefix}${offsetHeader}${e_bytes}`), [e], 'Array of struct matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig 1
    concat
    frame_dig -5
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    bz testDecoding_bool_false@24

testDecoding_and_contd@21:
    // tests/approvals/arc4-encode-decode.algo.ts:99
    // assertMatch(decodeArc4<TestObj[]>(Bytes`${lenPrefix}${offsetHeader}${e_bytes}`), [e], 'Array of struct matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig 1
    concat
    frame_dig -5
    concat
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    swap
    intc_0 // 0
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    intc_0 // 0
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    swap
    uncover 3
    select
    swap
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    pushint 8 // 8
    extract3
    frame_dig -7
    ==
    bz testDecoding_bool_false@24

testDecoding_and_contd@22:
    // tests/approvals/arc4-encode-decode.algo.ts:99
    // assertMatch(decodeArc4<TestObj[]>(Bytes`${lenPrefix}${offsetHeader}${e_bytes}`), [e], 'Array of struct matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig 1
    concat
    frame_dig -5
    concat
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    swap
    intc_0 // 0
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    intc_0 // 0
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    swap
    uncover 3
    select
    swap
    uncover 2
    uncover 2
    substring3
    dup
    pushint 8 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    frame_dig -6
    ==
    bz testDecoding_bool_false@24

testDecoding_bool_true@23:
    intc_1 // 1

testDecoding_bool_merge@25:
    // tests/approvals/arc4-encode-decode.algo.ts:99
    // assertMatch(decodeArc4<TestObj[]>(Bytes`${lenPrefix}${offsetHeader}${e_bytes}`), [e], 'Array of struct matches')
    assert // Array of struct matches
    // tests/approvals/arc4-encode-decode.algo.ts:100
    // assertMatch(decodeArc4<Address[]>(Bytes`${lenPrefix}${f_bytes}`), [f], 'Array of address matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig -3
    concat
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    bz testDecoding_bool_false@28

testDecoding_and_contd@26:
    // tests/approvals/arc4-encode-decode.algo.ts:100
    // assertMatch(decodeArc4<Address[]>(Bytes`${lenPrefix}${f_bytes}`), [f], 'Array of address matches')
    bytec_0 // ""
    frame_dig 0
    concat
    frame_dig -3
    concat
    extract 2 0
    intc_0 // 0
    pushint 32 // 32
    *
    pushint 32 // 32
    extract3 // on error: index access is out of bounds
    frame_dig -4
    ==
    bz testDecoding_bool_false@28

testDecoding_bool_true@27:
    intc_1 // 1

testDecoding_bool_merge@29:
    // tests/approvals/arc4-encode-decode.algo.ts:100
    // assertMatch(decodeArc4<Address[]>(Bytes`${lenPrefix}${f_bytes}`), [f], 'Array of address matches')
    assert // Array of address matches
    // tests/approvals/arc4-encode-decode.algo.ts:102
    // assert(decodeArc4<bytes<12>>(g_bytes) === g)
    frame_dig -1
    frame_dig -2
    ==
    assert
    retsub

testDecoding_bool_false@28:
    intc_0 // 0
    b testDecoding_bool_merge@29

testDecoding_bool_false@24:
    intc_0 // 0
    b testDecoding_bool_merge@25

testDecoding_bool_false@19:
    intc_0 // 0
    b testDecoding_bool_merge@20

testDecoding_bool_false@15:
    intc_0 // 0
    b testDecoding_bool_merge@16

testDecoding_bool_false@11:
    intc_0 // 0
    b testDecoding_bool_merge@12

testDecoding_bool_false@7:
    intc_0 // 0
    b testDecoding_bool_merge@8

testDecoding_bool_false@3:
    intc_0 // 0
    b testDecoding_bool_merge@4


// tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
