main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L24
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L24
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L24
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@4, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@5, * => block@6}
    block@4: // testEncoding_route_L25
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding[routing]()
        goto block@6
    block@5: // testDecoding_route_L65
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding[routing]()
        goto block@6
    block@6: // switch_case_next_L24
        goto block@8
    block@7: // create_NoOp_L24
        goto block@8
    block@8: // after_if_else_L24
        goto block@10
    block@9: // __algots__.defaultCreate_L24
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L24
        exit 0u
    block@11: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding[routing]() -> void:
    block@0: // L25
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let aggregate%get_bit%0#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%1#0: bool = aggregate%get_bit%0#0
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 3)
        let tmp%2#0: biguint = reinterpret_Encoded(uint512)%0#0
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%3#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%4#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = (txna ApplicationArgs 7)
        let tmp%5#0: bytes[12] = reinterpret_Encoded(uint8[12])%0#0
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0, reinterpret_Encoded(uint8[32])%0#0, tmp%5#0)
        exit 1u

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding[routing]() -> void:
    block@0: // L65
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 3)
        let aggregate%get_bit%0#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%2#0: bool = aggregate%get_bit%0#0
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%3#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 5)
        let tmp%4#0: biguint = reinterpret_Encoded(uint512)%0#0
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let tmp%5#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 7)
        let tmp%6#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 8)
        let tmp%7#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 10)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 12)
        let tmp%9#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = (txna ApplicationArgs 13)
        let tmp%10#0: bytes[12] = reinterpret_Encoded(uint8[12])%0#0
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 14)
        let tmp%11#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0, tmp%5#0, tmp%6#0, tmp%7#0, reinterpret_Encoded(uint64,(len+uint8[]))%0#0, tmp%8#0, reinterpret_Encoded(uint8[32])%0#0, tmp%9#0, tmp%10#0, tmp%11#0)
        exit 1u

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: string, f: Encoded(uint8[32]), g: bytes[12]) -> void:
    block@0: // L25
        _puya_lib.util.ensure_budget(1400u, 0u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%4#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let aggregate%value_len%0#0: uint64 = (len c#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| c#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let tmp%6#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#0
        let aggregate%value_len%1#0: uint64 = (len c#0)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| c#0 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let tmp%7#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%1#0
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let aggregate%length%0#0: uint64 = (len d#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%9#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%length%1#0: uint64 = (len d#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%10#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let aggregate%length%2#0: uint64 = (len e#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 e#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%12#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%3#0: uint64 = (len e#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 e#0)
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%13#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%length%4#0: uint64 = (len d#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%4#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%0#0
        let tmp%15#0: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%0#0
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let tmp%16#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#0
        let aggregate%length%5#0: uint64 = (len d#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%5#0
        let tmp%17#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%3#0
        let aggregate%head%2#0: bytes = (concat 0x tmp%16#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 tmp%17#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%1#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%1#0
        let tmp%18#0: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%1#0
        let tmp%19#0: bool = (== tmp%15#0 tmp%18#0)
        (assert tmp%19#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%length%6#0: uint64 = (len d#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = aggregate%encoded_value%6#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(len+uint8[])%4#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%2#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%2#0
        let tmp%20#0: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%2#0
        let aggregate%length%7#0: uint64 = (len d#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = aggregate%encoded_value%7#0
        let tmp%21#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%5#0
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%7#0 tmp%21#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%3#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%3#0
        let tmp%22#0: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%3#0
        let tmp%23#0: bool = (== tmp%20#0 tmp%22#0)
        (assert tmp%23#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%length%8#0: uint64 = (len g#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%8#0 12u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = g#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint8[12])%0#0)
        let aggregate%as_Encoded(uint64,uint8[12])%0#0: Encoded(uint64,uint8[12]) = aggregate%head%9#0
        let tmp%24#0: Encoded(uint64,uint8[12]) = aggregate%as_Encoded(uint64,uint8[12])%0#0
        let aggregate%length%9#0: uint64 = (len g#0)
        let aggregate%lengths_equal%1#0: bool = (== aggregate%length%9#0 12u)
        (assert aggregate%lengths_equal%1#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = g#0
        let tmp%25#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%1#0
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%10#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%7#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 tmp%25#0)
        let aggregate%as_Encoded(uint64,uint8[12])%1#0: Encoded(uint64,uint8[12]) = aggregate%head%11#0
        let tmp%26#0: Encoded(uint64,uint8[12]) = aggregate%as_Encoded(uint64,uint8[12])%1#0
        let tmp%27#0: bool = (== tmp%24#0 tmp%26#0)
        (assert tmp%27#0)
        let tmp%28#0: bool = (== f#0 f#0)
        (assert tmp%28#0)
        let aggregate%length%10#0: uint64 = (len g#0)
        let aggregate%lengths_equal%2#0: bool = (== aggregate%length%10#0 12u)
        (assert aggregate%lengths_equal%2#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%2#0: Encoded(uint8[12]) = g#0
        let tmp%29#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%2#0
        let aggregate%length%11#0: uint64 = (len g#0)
        let aggregate%lengths_equal%3#0: bool = (== aggregate%length%11#0 12u)
        (assert aggregate%lengths_equal%3#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%3#0: Encoded(uint8[12]) = g#0
        let tmp%30#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%3#0
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%head%12#0
        let tmp%32#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%9#0
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let tmp%33#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%10#0
        let aggregate%head%13#0: bytes = (concat 0x tmp%33#0)
        let aggregate%as_Encoded(uint64[1])%0#0: Encoded(uint64[1]) = aggregate%head%13#0
        let encoded_array%0#0: Encoded(uint64[1]) = aggregate%as_Encoded(uint64[1])%0#0
        let tmp%34#0: bool = (== tmp%32#0 encoded_array%0#0)
        (assert tmp%34#0)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%head%14#0: bytes = (concat 0x aggregate%encoded_bool%2#0)
        let aggregate%as_Encoded(bool1)%0#0: Encoded(bool1) = aggregate%head%14#0
        let tmp%35#0: Encoded(bool1) = aggregate%as_Encoded(bool1)%0#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%as_Encoded(bool8)%2#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let tmp%36#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#0
        let aggregate%head%15#0: bytes = (concat 0x tmp%36#0)
        let aggregate%as_Encoded(bool1[1])%0#0: Encoded(bool1[1]) = aggregate%head%15#0
        let encoded_array%1#0: Encoded(bool1[1]) = aggregate%as_Encoded(bool1[1])%0#0
        let tmp%37#0: bool = (== tmp%35#0 encoded_array%1#0)
        (assert tmp%37#0)
        let aggregate%value_len%2#0: uint64 = (len c#0)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| c#0 aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%16#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%2#0)
        let aggregate%as_Encoded(uint512)%3#0: Encoded(uint512) = aggregate%head%16#0
        let tmp%38#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%3#0
        let aggregate%value_len%3#0: uint64 = (len c#0)
        let aggregate%len_ok%3#0: bool = (<= aggregate%value_len%3#0 64u)
        (assert aggregate%len_ok%3#0) // overflow
        let aggregate%bzero%3#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%3#0: bytes[64] = (b| c#0 aggregate%bzero%3#0)
        let aggregate%as_Encoded(uint512)%4#0: Encoded(uint512) = aggregate%arc4_encoded%3#0
        let tmp%39#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%4#0
        let aggregate%head%17#0: bytes = (concat 0x tmp%39#0)
        let aggregate%as_Encoded(uint512[1])%0#0: Encoded(uint512[1]) = aggregate%head%17#0
        let encoded_array%2#0: Encoded(uint512[1]) = aggregate%as_Encoded(uint512[1])%0#0
        let tmp%40#0: bool = (== tmp%38#0 encoded_array%2#0)
        (assert tmp%40#0)
        let aggregate%length%12#0: uint64 = (len d#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%length%12#0)
        let aggregate%length_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%encoded_value%8#0: bytes = (concat aggregate%length_uint16%8#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = aggregate%encoded_value%8#0
        let aggregate%as_bytes%13#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%18#0: bytes = (concat 0x aggregate%offset_as_uint16%4#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%18#0 aggregate%as_Encoded(len+uint8[])%6#0)
        let aggregate%as_Encoded((len+uint8[]))%0#0: Encoded((len+uint8[])) = aggregate%concat%4#0
        let tmp%41#0: Encoded((len+uint8[])) = aggregate%as_Encoded((len+uint8[]))%0#0
        let aggregate%length%13#0: uint64 = (len d#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%length%13#0)
        let aggregate%length_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%encoded_value%9#0: bytes = (concat aggregate%length_uint16%9#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = aggregate%encoded_value%9#0
        let tmp%42#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%7#0
        let aggregate%as_bytes%15#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%head%19#0: bytes = (concat 0x aggregate%offset_as_uint16%5#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%head%19#0 tmp%42#0)
        let aggregate%as_Encoded((len+uint8[])[1])%0#0: Encoded((len+uint8[])[1]) = aggregate%concat%5#0
        let encoded_array%3#0: Encoded((len+uint8[])[1]) = aggregate%as_Encoded((len+uint8[])[1])%0#0
        let tmp%43#0: bool = (== tmp%41#0 encoded_array%3#0)
        (assert tmp%43#0)
        let aggregate%length%14#0: uint64 = (len e#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob aggregate%length%14#0)
        let aggregate%length_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%encoded_value%10#0: bytes = (concat aggregate%length_uint16%10#0 e#0)
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%10#0
        let aggregate%as_bytes%17#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%head%20#0: bytes = (concat 0x aggregate%offset_as_uint16%6#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%20#0 aggregate%as_Encoded(len+utf8[])%2#0)
        let aggregate%as_Encoded((len+utf8[]))%0#0: Encoded((len+utf8[])) = aggregate%concat%6#0
        let tmp%44#0: Encoded((len+utf8[])) = aggregate%as_Encoded((len+utf8[]))%0#0
        let aggregate%length%15#0: uint64 = (len e#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%length%15#0)
        let aggregate%length_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%encoded_value%11#0: bytes = (concat aggregate%length_uint16%11#0 e#0)
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%11#0
        let tmp%45#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let aggregate%as_bytes%19#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%head%21#0: bytes = (concat 0x aggregate%offset_as_uint16%7#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%head%21#0 tmp%45#0)
        let aggregate%as_Encoded((len+utf8[])[1])%0#0: Encoded((len+utf8[])[1]) = aggregate%concat%7#0
        let encoded_array%4#0: Encoded((len+utf8[])[1]) = aggregate%as_Encoded((len+utf8[])[1])%0#0
        let tmp%46#0: bool = (== tmp%44#0 encoded_array%4#0)
        (assert tmp%46#0)
        let aggregate%head%22#0: bytes = (concat 0x f#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = aggregate%head%22#0
        let tmp%47#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let aggregate%head%23#0: bytes = (concat 0x f#0)
        let aggregate%as_Encoded(uint8[32][1])%0#0: Encoded(uint8[32][1]) = aggregate%head%23#0
        let encoded_array%5#0: Encoded(uint8[32][1]) = aggregate%as_Encoded(uint8[32][1])%0#0
        let tmp%48#0: bool = (== tmp%47#0 encoded_array%5#0)
        (assert tmp%48#0)
        let aggregate%length%16#0: uint64 = (len g#0)
        let aggregate%lengths_equal%4#0: bool = (== aggregate%length%16#0 12u)
        (assert aggregate%lengths_equal%4#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%4#0: Encoded(uint8[12]) = g#0
        let aggregate%head%24#0: bytes = (concat 0x aggregate%as_Encoded(uint8[12])%4#0)
        let aggregate%as_Encoded(uint8[12])%5#0: Encoded(uint8[12]) = aggregate%head%24#0
        let tmp%49#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%5#0
        let aggregate%length%17#0: uint64 = (len g#0)
        let aggregate%lengths_equal%5#0: bool = (== aggregate%length%17#0 12u)
        (assert aggregate%lengths_equal%5#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%6#0: Encoded(uint8[12]) = g#0
        let tmp%50#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%6#0
        let aggregate%head%25#0: bytes = (concat 0x tmp%50#0)
        let aggregate%as_Encoded(uint8[12][1])%0#0: Encoded(uint8[12][1]) = aggregate%head%25#0
        let encoded_array%6#0: Encoded(uint8[12][1]) = aggregate%as_Encoded(uint8[12][1])%0#0
        let tmp%51#0: bool = (== tmp%49#0 encoded_array%6#0)
        (assert tmp%51#0)
        let aggregate%as_bytes%20#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%20#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%11#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%26#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%11#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%26#0
        let encoded_array%7#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%12#0: Encoded(uint64) = aggregate%val_as_bytes%11#0
        let tmp%52#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%12#0
        let aggregate%as_bytes%21#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%head%27#0: bytes = (concat aggregate%len_u16%1#0 tmp%52#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%27#0
        let encoded_array%8#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let tmp%53#0: bool = (== encoded_array%7#0 encoded_array%8#0)
        (assert tmp%53#0)
        let aggregate%as_bytes%22#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%22#0)
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%head%28#0: bytes = (concat aggregate%len_u16%2#0 aggregate%encoded_bool%4#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%28#0
        let encoded_array%9#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let aggregate%encoded_bool%5#0: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%as_Encoded(bool8)%3#0: Encoded(bool8) = aggregate%encoded_bool%5#0
        let tmp%54#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#0
        let aggregate%as_bytes%23#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%head%29#0: bytes = (concat aggregate%len_u16%3#0 tmp%54#0)
        let aggregate%as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = aggregate%head%29#0
        let encoded_array%10#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%1#0
        let tmp%55#0: bool = (== encoded_array%9#0 encoded_array%10#0)
        (assert tmp%55#0)
        let aggregate%as_bytes%24#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%24#0)
        let aggregate%value_len%4#0: uint64 = (len c#0)
        let aggregate%len_ok%4#0: bool = (<= aggregate%value_len%4#0 64u)
        (assert aggregate%len_ok%4#0) // overflow
        let aggregate%bzero%4#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%4#0: bytes[64] = (b| c#0 aggregate%bzero%4#0)
        let aggregate%as_Encoded(uint512)%5#0: Encoded(uint512) = aggregate%arc4_encoded%4#0
        let aggregate%head%30#0: bytes = (concat aggregate%len_u16%4#0 aggregate%as_Encoded(uint512)%5#0)
        let aggregate%as_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = aggregate%head%30#0
        let encoded_array%11#0: Encoded(len+uint512[]) = aggregate%as_Encoded(len+uint512[])%0#0
        let aggregate%value_len%5#0: uint64 = (len c#0)
        let aggregate%len_ok%5#0: bool = (<= aggregate%value_len%5#0 64u)
        (assert aggregate%len_ok%5#0) // overflow
        let aggregate%bzero%5#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%5#0: bytes[64] = (b| c#0 aggregate%bzero%5#0)
        let aggregate%as_Encoded(uint512)%6#0: Encoded(uint512) = aggregate%arc4_encoded%5#0
        let tmp%56#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%6#0
        let aggregate%as_bytes%25#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%head%31#0: bytes = (concat aggregate%len_u16%5#0 tmp%56#0)
        let aggregate%as_Encoded(len+uint512[])%1#0: Encoded(len+uint512[]) = aggregate%head%31#0
        let encoded_array%12#0: Encoded(len+uint512[]) = aggregate%as_Encoded(len+uint512[])%1#0
        let tmp%57#0: bool = (== encoded_array%11#0 encoded_array%12#0)
        (assert tmp%57#0)
        let aggregate%as_bytes%26#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%26#0)
        let aggregate%length%18#0: uint64 = (len d#0)
        let aggregate%as_bytes%27#0: bytes[8] = (itob aggregate%length%18#0)
        let aggregate%length_uint16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%27#0)
        let aggregate%encoded_value%12#0: bytes = (concat aggregate%length_uint16%12#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%8#0: Encoded(len+uint8[]) = aggregate%encoded_value%12#0
        let aggregate%as_bytes%28#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%28#0)
        let aggregate%head%32#0: bytes = (concat aggregate%len_u16%6#0 aggregate%offset_as_uint16%8#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%head%32#0 aggregate%as_Encoded(len+uint8[])%8#0)
        let aggregate%as_Encoded(len+(len+uint8[])[])%0#0: Encoded(len+(len+uint8[])[]) = aggregate%concat%8#0
        let encoded_array%13#0: Encoded(len+(len+uint8[])[]) = aggregate%as_Encoded(len+(len+uint8[])[])%0#0
        let aggregate%length%19#0: uint64 = (len d#0)
        let aggregate%as_bytes%29#0: bytes[8] = (itob aggregate%length%19#0)
        let aggregate%length_uint16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%29#0)
        let aggregate%encoded_value%13#0: bytes = (concat aggregate%length_uint16%13#0 d#0)
        let aggregate%as_Encoded(len+uint8[])%9#0: Encoded(len+uint8[]) = aggregate%encoded_value%13#0
        let tmp%58#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%9#0
        let aggregate%as_bytes%30#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%30#0)
        let aggregate%as_bytes%31#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%31#0)
        let aggregate%head%33#0: bytes = (concat aggregate%len_u16%7#0 aggregate%offset_as_uint16%9#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%head%33#0 tmp%58#0)
        let aggregate%as_Encoded(len+(len+uint8[])[])%1#0: Encoded(len+(len+uint8[])[]) = aggregate%concat%9#0
        let encoded_array%14#0: Encoded(len+(len+uint8[])[]) = aggregate%as_Encoded(len+(len+uint8[])[])%1#0
        let tmp%59#0: bool = (== encoded_array%13#0 encoded_array%14#0)
        (assert tmp%59#0)
        let aggregate%as_bytes%32#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%32#0)
        let aggregate%length%20#0: uint64 = (len e#0)
        let aggregate%as_bytes%33#0: bytes[8] = (itob aggregate%length%20#0)
        let aggregate%length_uint16%14#0: bytes = ((extract 6 2) aggregate%as_bytes%33#0)
        let aggregate%encoded_value%14#0: bytes = (concat aggregate%length_uint16%14#0 e#0)
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%14#0
        let aggregate%as_bytes%34#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%34#0)
        let aggregate%head%34#0: bytes = (concat aggregate%len_u16%8#0 aggregate%offset_as_uint16%10#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%head%34#0 aggregate%as_Encoded(len+utf8[])%4#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%10#0
        let encoded_array%15#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let aggregate%length%21#0: uint64 = (len e#0)
        let aggregate%as_bytes%35#0: bytes[8] = (itob aggregate%length%21#0)
        let aggregate%length_uint16%15#0: bytes = ((extract 6 2) aggregate%as_bytes%35#0)
        let aggregate%encoded_value%15#0: bytes = (concat aggregate%length_uint16%15#0 e#0)
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%encoded_value%15#0
        let tmp%60#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let aggregate%as_bytes%36#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%36#0)
        let aggregate%as_bytes%37#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%37#0)
        let aggregate%head%35#0: bytes = (concat aggregate%len_u16%9#0 aggregate%offset_as_uint16%11#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%head%35#0 tmp%60#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%11#0
        let encoded_array%16#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%1#0
        let tmp%61#0: bool = (== encoded_array%15#0 encoded_array%16#0)
        (assert tmp%61#0)
        let aggregate%as_bytes%38#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%38#0)
        let aggregate%head%36#0: bytes = (concat aggregate%len_u16%10#0 f#0)
        let aggregate%as_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = aggregate%head%36#0
        let encoded_array%17#0: Encoded(len+uint8[32][]) = aggregate%as_Encoded(len+uint8[32][])%0#0
        let aggregate%as_bytes%39#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%39#0)
        let aggregate%head%37#0: bytes = (concat aggregate%len_u16%11#0 f#0)
        let aggregate%as_Encoded(len+uint8[32][])%1#0: Encoded(len+uint8[32][]) = aggregate%head%37#0
        let encoded_array%18#0: Encoded(len+uint8[32][]) = aggregate%as_Encoded(len+uint8[32][])%1#0
        let tmp%62#0: bool = (== encoded_array%17#0 encoded_array%18#0)
        (assert tmp%62#0)
        let aggregate%as_bytes%40#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%40#0)
        let aggregate%length%22#0: uint64 = (len g#0)
        let aggregate%lengths_equal%6#0: bool = (== aggregate%length%22#0 12u)
        (assert aggregate%lengths_equal%6#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%7#0: Encoded(uint8[12]) = g#0
        let aggregate%head%38#0: bytes = (concat aggregate%len_u16%12#0 aggregate%as_Encoded(uint8[12])%7#0)
        let aggregate%as_Encoded(len+uint8[12][])%0#0: Encoded(len+uint8[12][]) = aggregate%head%38#0
        let encoded_array%19#0: Encoded(len+uint8[12][]) = aggregate%as_Encoded(len+uint8[12][])%0#0
        let aggregate%length%23#0: uint64 = (len g#0)
        let aggregate%lengths_equal%7#0: bool = (== aggregate%length%23#0 12u)
        (assert aggregate%lengths_equal%7#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%8#0: Encoded(uint8[12]) = g#0
        let tmp%63#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%8#0
        let aggregate%as_bytes%41#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%41#0)
        let aggregate%head%39#0: bytes = (concat aggregate%len_u16%13#0 tmp%63#0)
        let aggregate%as_Encoded(len+uint8[12][])%1#0: Encoded(len+uint8[12][]) = aggregate%head%39#0
        let encoded_array%20#0: Encoded(len+uint8[12][]) = aggregate%as_Encoded(len+uint8[12][])%1#0
        let tmp%64#0: bool = (== encoded_array%19#0 encoded_array%20#0)
        (assert tmp%64#0)
        let tmp%65#0: bool = (== 8u 8u)
        (assert tmp%65#0)
        let tmp%66#0: bool = (== 1u 1u)
        (assert tmp%66#0)
        let tmp%67#0: bool = (== 64u 64u)
        (assert tmp%67#0)
        let tmp%68#0: bool = (== 17u 17u)
        (assert tmp%68#0)
        let tmp%69#0: bool = (== 17u 17u)
        (assert tmp%69#0)
        let tmp%70#0: bool = (== 3u 3u)
        (assert tmp%70#0)
        let tmp%71#0: bool = (== 3u 3u)
        (assert tmp%71#0)
        let tmp%72#0: bool = (== 12u 12u)
        (assert tmp%72#0)
        let tmp%73#0: bool = (== 20u 20u)
        (assert tmp%73#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: string, d_bytes: bytes, e: Encoded(uint64,(len+uint8[])), e_bytes: bytes, f: Encoded(uint8[32]), f_bytes: bytes, g: bytes[12], g_bytes: bytes) -> void:
    block@0: // L65
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = a_bytes#0
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = b_bytes#0
        let aggregate%get_bit%0#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%2#0: bool = aggregate%get_bit%0#0
        let tmp%3#0: bool = (== tmp%2#0 b#0)
        (assert tmp%3#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = c_bytes#0
        let tmp%4#0: biguint = reinterpret_Encoded(uint512)%0#0
        let tmp%5#0: bool = (b== tmp%4#0 c#0)
        (assert tmp%5#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = d_bytes#0
        let tmp%6#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%7#0: bool = (== tmp%6#0 d#0)
        (assert tmp%7#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = e_bytes#0
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let aggregate%extract%1#0: bytes = (extract3 e#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let tmp%8#0: bool = (== tuple_item%0#0 tuple_item%1#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%1#0: Encoded(uint64,(len+uint8[])) = e_bytes#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+uint8[]))%1#0 8u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(uint64,(len+uint8[]))%1#0)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(uint64,(len+uint8[]))%1#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%1#0: uint64 = (len e#0)
        let aggregate%substring3%1#0: bytes = (substring3 e#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let tuple_item%3#0: Encoded(len+uint8[]) = aggregate%substring3%1#0
        let tmp%9#0: bool = (== tuple_item%2#0 tuple_item%3#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // assert target is match for conditions
        let tmp%11#0: bytes[8] = (itob 1u)
        let length%0#0: uint64 = (len tmp%11#0)
        let is_out_of_bounds%0#0: bool = (>= 6u length%0#0)
        let bounded_index%0#0: uint64 = (select 6u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 8u length%0#0)
        let bounded_index%1#0: uint64 = (select 8u length%0#0 is_out_of_bounds%1#0)
        let tmp%12#0: bytes = (substring3 tmp%11#0 bounded_index%0#0 bounded_index%1#0)
        let lenPrefix#0: bytes = tmp%12#0
        let tmp%13#0: bytes[8] = (itob 2u)
        let length%1#0: uint64 = (len tmp%13#0)
        let is_out_of_bounds%2#0: bool = (>= 6u length%1#0)
        let bounded_index%2#0: uint64 = (select 6u length%1#0 is_out_of_bounds%2#0)
        let is_out_of_bounds%3#0: bool = (>= 8u length%1#0)
        let bounded_index%3#0: uint64 = (select 8u length%1#0 is_out_of_bounds%3#0)
        let tmp%14#0: bytes = (substring3 tmp%13#0 bounded_index%2#0 bounded_index%3#0)
        let offsetHeader#0: bytes = tmp%14#0
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat lenPrefix#0 a_bytes#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint64[])%0#0 0u)
        let tmp%15#0: uint64 = aggregate%array_length%0#0
        let tmp%16#0: bool = (== tmp%15#0 1u)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (concat lenPrefix#0 a_bytes#0)
        let aggregate%total_length%0#0: uint64 = (len reinterpret_Encoded(len+uint64[])%1#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 reinterpret_Encoded(len+uint64[])%1#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%17#0: bool = (== values%0#0 a#0)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        (assert tmp%18#0) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat lenPrefix#0 b_bytes#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u)
        let tmp%19#0: uint64 = aggregate%array_length%1#0
        let tmp%20#0: bool = (== tmp%19#0 1u)
        let reinterpret_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = (concat lenPrefix#0 b_bytes#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%1#0 0u)
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%2#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%add%0#0: uint64 = (+ 0u 16u)
        let aggregate%get_bit%1#0: bool = (getbit reinterpret_Encoded(len+bool1[])%1#0 aggregate%add%0#0)
        let array_item%1#0: bool = aggregate%get_bit%1#0
        let values%1#0: bool = array_item%1#0
        let tmp%21#0: bool = (== values%1#0 b#0)
        let tmp%22#0: bool = (&& tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // Array of boolean matches
        let tmp%23#0: bytes = (concat lenPrefix#0 c_bytes#0)
        (log tmp%23#0)
        let reinterpret_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = (concat lenPrefix#0 c_bytes#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint512[])%0#0 0u)
        let tmp%24#0: uint64 = aggregate%array_length%3#0
        let tmp%25#0: bool = (== tmp%24#0 1u)
        let reinterpret_Encoded(len+uint512[])%1#0: Encoded(len+uint512[]) = (concat lenPrefix#0 c_bytes#0)
        let aggregate%total_length%1#0: uint64 = (len reinterpret_Encoded(len+uint512[])%1#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 reinterpret_Encoded(len+uint512[])%1#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 64u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 64u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint512) = aggregate%encoded_element%1#0
        let values%2#0: biguint = array_item%2#0
        let tmp%26#0: bool = (b== values%2#0 c#0)
        let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // Array of biguint matches
        let tmp%28#0: bytes = (concat "" lenPrefix#0)
        let tmp%29#0: bytes = (concat tmp%28#0 offsetHeader#0)
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat tmp%29#0 d_bytes#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%0#0 0u)
        let tmp%30#0: uint64 = aggregate%array_length%4#0
        let tmp%31#0: bool = (== tmp%30#0 1u)
        let tmp%32#0: bytes = (concat "" lenPrefix#0)
        let tmp%33#0: bytes = (concat tmp%32#0 offsetHeader#0)
        let reinterpret_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = (concat tmp%33#0 d_bytes#0)
        let aggregate%total_length%2#0: uint64 = (len reinterpret_Encoded(len+(len+utf8[])[])%1#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 reinterpret_Encoded(len+(len+utf8[])[])%1#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%1#0 0u)
        let aggregate%lt%1#0: bool = (< 0u aggregate%array_length%5#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 1u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%3#0: Encoded(len+utf8[]) = aggregate%item%0#0
        let values%3#0: string = ((extract 2 0) array_item%3#0)
        let tmp%34#0: bool = (== values%3#0 d#0)
        let tmp%35#0: bool = (&& tmp%31#0 tmp%34#0)
        (assert tmp%35#0) // Array of string matches
        let tmp%36#0: bytes = (concat "" lenPrefix#0)
        let tmp%37#0: bytes = (concat tmp%36#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat tmp%37#0 e_bytes#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u)
        let tmp%38#0: uint64 = aggregate%array_length%6#0
        let tmp%39#0: bool = (== tmp%38#0 1u)
        let tmp%40#0: bytes = (concat "" lenPrefix#0)
        let tmp%41#0: bytes = (concat tmp%40#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%1#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat tmp%41#0 e_bytes#0)
        let aggregate%total_length%3#0: uint64 = (len reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%1#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%1#0 2u aggregate%total_length%3#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%1#0 0u)
        let aggregate%item_offset_offset%1#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%0#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%7#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%0#0)
        let array_item%4#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%2#0
        let aggregate%extract%2#0: bytes = (extract3 array_item%4#0 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%2#0
        let aggregate%extract%3#0: bytes = (extract3 e#0 0u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%3#0
        let tmp%42#0: bool = (== tuple_item%4#0 tuple_item%5#0)
        let tmp%43#0: bytes = (concat "" lenPrefix#0)
        let tmp%44#0: bytes = (concat tmp%43#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%2#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat tmp%44#0 e_bytes#0)
        let aggregate%total_length%4#0: uint64 = (len reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%2#0)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%2#0 2u aggregate%total_length%4#0)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%2#0 0u)
        let aggregate%item_offset_offset%2#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%1#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%8#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%1#0)
        let array_item%5#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%3#0
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 array_item%5#0 8u)
        let aggregate%len%2#0: uint64 = (len array_item%5#0)
        let aggregate%substring3%4#0: bytes = (substring3 array_item%5#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tuple_item%6#0: Encoded(len+uint8[]) = aggregate%substring3%4#0
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%3#0: uint64 = (len e#0)
        let aggregate%substring3%5#0: bytes = (substring3 e#0 aggregate%extract_uint16%3#0 aggregate%len%3#0)
        let tuple_item%7#0: Encoded(len+uint8[]) = aggregate%substring3%5#0
        let tmp%45#0: bool = (== tuple_item%6#0 tuple_item%7#0)
        let tmp%46#0: bool = (&& tmp%42#0 tmp%45#0)
        let tmp%47#0: bool = (&& tmp%39#0 tmp%46#0)
        (assert tmp%47#0) // Array of struct matches
        let tmp%48#0: bytes = (concat "" lenPrefix#0)
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat tmp%48#0 f_bytes#0)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[32][])%0#0 0u)
        let tmp%49#0: uint64 = aggregate%array_length%9#0
        let tmp%50#0: bool = (== tmp%49#0 1u)
        let tmp%51#0: bytes = (concat "" lenPrefix#0)
        let reinterpret_Encoded(len+uint8[32][])%1#0: Encoded(len+uint8[32][]) = (concat tmp%51#0 f_bytes#0)
        let aggregate%total_length%5#0: uint64 = (len reinterpret_Encoded(len+uint8[32][])%1#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 reinterpret_Encoded(len+uint8[32][])%1#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 32u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 32u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8[32]) = aggregate%encoded_element%2#0
        let tmp%52#0: bool = (== array_item%6#0 f#0)
        let tmp%53#0: bool = (&& tmp%50#0 tmp%52#0)
        (assert tmp%53#0) // Array of address matches
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = g_bytes#0
        let tmp%54#0: bytes[12] = reinterpret_Encoded(uint8[12])%0#0
        let tmp%55#0: bool = (== tmp%54#0 g#0)
        (assert tmp%55#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate() -> void:
    block@0: // L24
        return 