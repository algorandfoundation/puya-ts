main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L22
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@3, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@4, * => block@5}
    block@3: // testEncoding_route_L23
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let tmp%8#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%9#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%10#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = (txna ApplicationArgs 7)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%7#0, tmp%8#0, reinterpret_Encoded(uint512)%0#0, tmp%9#0, tmp%10#0, reinterpret_Encoded(uint8[32])%0#0, reinterpret_Encoded(uint8[12])%0#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testDecoding_route_L64
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%16#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(bool8)%1#0: Encoded(bool8) = (txna ApplicationArgs 3)
        let tmp%17#0: bool = (getbit reinterpret_Encoded(bool8)%1#0 0u)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%18#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let reinterpret_Encoded(uint512)%1#0: Encoded(uint512) = (txna ApplicationArgs 5)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let tmp%19#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 7)
        let tmp%20#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 8)
        let tmp%21#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded((uint64,len+uint8[]))%0#0: Encoded((uint64,len+uint8[])) = (txna ApplicationArgs 9)
        let extract%0#0: bytes = (extract3 reinterpret_Encoded((uint64,len+uint8[]))%0#0 0u 8u)
        let extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+uint8[]))%0#0 8u)
        let len%0#0: uint64 = (len reinterpret_Encoded((uint64,len+uint8[]))%0#0)
        let substring3%0#0: bytes = (substring3 reinterpret_Encoded((uint64,len+uint8[]))%0#0 extract_uint16%0#0 len%0#0)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 10)
        let tmp%22#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 12)
        let tmp%23#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        let reinterpret_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = (txna ApplicationArgs 13)
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 14)
        let tmp%24#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%7#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%15#0, tmp%16#0, tmp%17#0, tmp%18#0, reinterpret_Encoded(uint512)%1#0, tmp%19#0, tmp%20#0, tmp%21#0, extract%0#0, substring3%0#0, tmp%22#0, reinterpret_Encoded(uint8[32])%1#0, tmp%23#0, reinterpret_Encoded(uint8[12])%1#0, tmp%24#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@5: // switch_case_default_L22
        goto block@6
    block@6: // switch_case_next_L22
        goto block@11
    block@7: // bare_routing_L22
        let tmp%25#0: uint64 = (txn OnCompletion)
        switch tmp%25#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L22
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (== tmp%26#0 0u)
        (assert tmp%27#0) // can only call when creating
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate()
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@9: // switch_case_default_L22
        goto block@10
    block@10: // switch_case_next_L22
        goto block@11
    block@11: // after_if_else_L22
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2 <- block@8, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: string, f: Encoded(uint8[32]), g: bytes[12]) -> void:
    block@0: // L23
        _puya_lib.util.ensure_budget(1400u, 0u)
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let val_as_bytes%1#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%1#0: Encoded(uint64) = val_as_bytes%1#0
        let tmp%0#0: bool = (== as_Encoded(uint64)%0#0 as_Encoded(uint64)%1#0)
        (assert tmp%0#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u b#0)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u b#0)
        let as_Encoded(bool8)%1#0: Encoded(bool8) = encoded_bool%1#0
        let tmp%1#0: bool = (== as_Encoded(bool8)%0#0 as_Encoded(bool8)%1#0)
        (assert tmp%1#0)
        let value_len%0#0: uint64 = (len c#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| c#0 bzero%0#0)
        let as_Encoded(uint512)%0#0: Encoded(uint512) = arc4_encoded%0#0
        let value_len%1#0: uint64 = (len c#0)
        let len_ok%1#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%1#0) // overflow
        let bzero%1#0: bytes = (bzero 64u)
        let arc4_encoded%1#0: bytes[64] = (b| c#0 bzero%1#0)
        let as_Encoded(uint512)%1#0: Encoded(uint512) = arc4_encoded%1#0
        let tmp%2#0: bool = (== as_Encoded(uint512)%0#0 as_Encoded(uint512)%1#0)
        (assert tmp%2#0)
        let length%0#0: uint64 = (len d#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 d#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len d#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 d#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = encoded_value%1#0
        let tmp%3#0: bool = (== as_Encoded(len+uint8[])%0#0 as_Encoded(len+uint8[])%1#0)
        (assert tmp%3#0)
        let length%2#0: uint64 = (len e#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 e#0)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%2#0
        let length%3#0: uint64 = (len e#0)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 e#0)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%3#0
        let tmp%4#0: bool = (== as_Encoded(len+utf8[])%0#0 as_Encoded(len+utf8[])%1#0)
        (assert tmp%4#0)
        let val_as_bytes%2#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%2#0: Encoded(uint64) = val_as_bytes%2#0
        let encoded%0#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%2#0)
        let length%4#0: uint64 = (len d#0)
        let as_bytes%4#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 d#0)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = encoded_value%4#0
        let tail%0#0: bytes = (concat 0x as_Encoded(len+uint8[])%2#0)
        let as_bytes%5#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%1#0: Encoded((uint64,len+uint8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: Encoded((uint64,len+uint8[])) = (concat encoded%1#0 tail%0#0)
        let val_as_bytes%3#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%3#0: Encoded(uint64) = val_as_bytes%3#0
        let length%5#0: uint64 = (len d#0)
        let as_bytes%6#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 d#0)
        let as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = encoded_value%5#0
        let encoded%3#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%3#0)
        let tail%1#0: bytes = (concat 0x as_Encoded(len+uint8[])%3#0)
        let as_bytes%7#0: bytes[8] = (itob 10u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%4#0: Encoded((uint64,len+uint8[])) = (concat encoded%3#0 offset_as_uint16%1#0)
        let encoded%5#0: Encoded((uint64,len+uint8[])) = (concat encoded%4#0 tail%1#0)
        let tmp%5#0: bool = (== encoded%2#0 encoded%5#0)
        (assert tmp%5#0)
        let tmp%6#0: bool = (== f#0 f#0)
        (assert tmp%6#0)
        let length%6#0: uint64 = (len g#0)
        let lengths_equal%0#0: bool = (== length%6#0 12u)
        (assert lengths_equal%0#0) // invalid size
        let as_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = g#0
        let length%7#0: uint64 = (len g#0)
        let lengths_equal%1#0: bool = (== length%7#0 12u)
        (assert lengths_equal%1#0) // invalid size
        let as_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = g#0
        let tmp%7#0: bool = (== as_Encoded(uint8[12])%0#0 as_Encoded(uint8[12])%1#0)
        (assert tmp%7#0)
        let val_as_bytes%4#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%4#0: Encoded(uint64) = val_as_bytes%4#0
        let encoded%6#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%4#0)
        let encoded%7#0: Encoded((uint64)) = (concat encoded%6#0 0x)
        let val_as_bytes%5#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%5#0: Encoded(uint64) = val_as_bytes%5#0
        let encoded%8#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%5#0)
        let encoded%9#0: Encoded(uint64[1]) = (concat encoded%8#0 0x)
        let tmp%8#0: bool = (== encoded%7#0 encoded%9#0)
        (assert tmp%8#0)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u b#0)
        let encoded%10#0: Encoded((bool1)) = (concat 0x encoded_bit%0#0)
        let encoded%11#0: Encoded((bool1)) = (concat encoded%10#0 0x)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u b#0)
        let as_Encoded(bool8)%2#0: Encoded(bool8) = encoded_bool%2#0
        let encoded%12#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%2#0)
        let encoded%13#0: Encoded(bool1[1]) = (concat encoded%12#0 0x)
        let tmp%9#0: bool = (== encoded%11#0 encoded%13#0)
        (assert tmp%9#0)
        let value_len%2#0: uint64 = (len c#0)
        let len_ok%2#0: bool = (<= value_len%2#0 64u)
        (assert len_ok%2#0) // overflow
        let bzero%2#0: bytes = (bzero 64u)
        let arc4_encoded%2#0: bytes[64] = (b| c#0 bzero%2#0)
        let as_Encoded(uint512)%2#0: Encoded(uint512) = arc4_encoded%2#0
        let encoded%14#0: Encoded((uint512)) = (concat 0x as_Encoded(uint512)%2#0)
        let encoded%15#0: Encoded((uint512)) = (concat encoded%14#0 0x)
        let value_len%3#0: uint64 = (len c#0)
        let len_ok%3#0: bool = (<= value_len%3#0 64u)
        (assert len_ok%3#0) // overflow
        let bzero%3#0: bytes = (bzero 64u)
        let arc4_encoded%3#0: bytes[64] = (b| c#0 bzero%3#0)
        let as_Encoded(uint512)%3#0: Encoded(uint512) = arc4_encoded%3#0
        let encoded%16#0: Encoded((uint512)) = (concat 0x as_Encoded(uint512)%3#0)
        let encoded%17#0: Encoded(uint512[1]) = (concat encoded%16#0 0x)
        let tmp%10#0: bool = (== encoded%15#0 encoded%17#0)
        (assert tmp%10#0)
        let length%8#0: uint64 = (len d#0)
        let as_bytes%8#0: bytes[8] = (itob length%8#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 d#0)
        let as_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = encoded_value%6#0
        let tail%2#0: bytes = (concat 0x as_Encoded(len+uint8[])%4#0)
        let as_bytes%9#0: bytes[8] = (itob 2u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded%18#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%2#0)
        let encoded%19#0: Encoded((len+uint8[])) = (concat encoded%18#0 tail%2#0)
        let length%9#0: uint64 = (len d#0)
        let as_bytes%10#0: bytes[8] = (itob length%9#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 d#0)
        let as_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = encoded_value%7#0
        let tail%3#0: bytes = (concat 0x as_Encoded(len+uint8[])%5#0)
        let as_bytes%11#0: bytes[8] = (itob 2u)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%20#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%3#0)
        let encoded%21#0: Encoded(len+uint8[][1]) = (concat encoded%20#0 tail%3#0)
        let tmp%11#0: bool = (== encoded%19#0 encoded%21#0)
        (assert tmp%11#0)
        let length%10#0: uint64 = (len e#0)
        let as_bytes%12#0: bytes[8] = (itob length%10#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 e#0)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%8#0
        let tail%4#0: bytes = (concat 0x as_Encoded(len+utf8[])%2#0)
        let as_bytes%13#0: bytes[8] = (itob 2u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded%22#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%4#0)
        let encoded%23#0: Encoded((len+utf8[])) = (concat encoded%22#0 tail%4#0)
        let length%11#0: uint64 = (len e#0)
        let as_bytes%14#0: bytes[8] = (itob length%11#0)
        let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded_value%9#0: bytes = (concat length_uint16%9#0 e#0)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%9#0
        let tail%5#0: bytes = (concat 0x as_Encoded(len+utf8[])%3#0)
        let as_bytes%15#0: bytes[8] = (itob 2u)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded%24#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%5#0)
        let encoded%25#0: Encoded(len+utf8[][1]) = (concat encoded%24#0 tail%5#0)
        let tmp%12#0: bool = (== encoded%23#0 encoded%25#0)
        (assert tmp%12#0)
        let encoded%26#0: Encoded((uint8[32])) = (concat 0x f#0)
        let encoded%27#0: Encoded((uint8[32])) = (concat encoded%26#0 0x)
        let encoded%28#0: Encoded((uint8[32])) = (concat 0x f#0)
        let encoded%29#0: Encoded(uint8[32][1]) = (concat encoded%28#0 0x)
        let tmp%13#0: bool = (== encoded%27#0 encoded%29#0)
        (assert tmp%13#0)
        let length%12#0: uint64 = (len g#0)
        let lengths_equal%2#0: bool = (== length%12#0 12u)
        (assert lengths_equal%2#0) // invalid size
        let as_Encoded(uint8[12])%2#0: Encoded(uint8[12]) = g#0
        let encoded%30#0: Encoded((uint8[12])) = (concat 0x as_Encoded(uint8[12])%2#0)
        let encoded%31#0: Encoded((uint8[12])) = (concat encoded%30#0 0x)
        let length%13#0: uint64 = (len g#0)
        let lengths_equal%3#0: bool = (== length%13#0 12u)
        (assert lengths_equal%3#0) // invalid size
        let as_Encoded(uint8[12])%3#0: Encoded(uint8[12]) = g#0
        let encoded%32#0: Encoded((uint8[12])) = (concat 0x as_Encoded(uint8[12])%3#0)
        let encoded%33#0: Encoded(uint8[12][1]) = (concat encoded%32#0 0x)
        let tmp%14#0: bool = (== encoded%31#0 encoded%33#0)
        (assert tmp%14#0)
        let val_as_bytes%6#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%6#0: Encoded(uint64) = val_as_bytes%6#0
        let encoded%34#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%6#0)
        let as_bytes%16#0: bytes[8] = (itob 1u)
        let len_u16%0#0: bytes = ((extract 6 2) as_bytes%16#0)
        let encoded%35#0: bytes = (concat len_u16%0#0 encoded%34#0)
        let encoded%36#0: Encoded(len+uint64[]) = (concat encoded%35#0 0x)
        let val_as_bytes%7#0: bytes[8] = (itob a#0)
        let as_Encoded(uint64)%7#0: Encoded(uint64) = val_as_bytes%7#0
        let encoded%37#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%7#0)
        let as_bytes%17#0: bytes[8] = (itob 1u)
        let len_u16%1#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded%38#0: bytes = (concat len_u16%1#0 encoded%37#0)
        let encoded%39#0: Encoded(len+uint64[]) = (concat encoded%38#0 0x)
        let tmp%15#0: bool = (== encoded%36#0 encoded%39#0)
        (assert tmp%15#0)
        let encoded_bit%1#0: bytes = (setbit 0x00 0u b#0)
        let encoded%40#0: Encoded((bool1)) = (concat 0x encoded_bit%1#0)
        let as_bytes%18#0: bytes[8] = (itob 1u)
        let len_u16%2#0: bytes = ((extract 6 2) as_bytes%18#0)
        let encoded%41#0: bytes = (concat len_u16%2#0 encoded%40#0)
        let encoded%42#0: Encoded(len+bool1[]) = (concat encoded%41#0 0x)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u b#0)
        let as_Encoded(bool8)%3#0: Encoded(bool8) = encoded_bool%3#0
        let encoded%43#0: Encoded((bool1)) = (concat 0x as_Encoded(bool8)%3#0)
        let as_bytes%19#0: bytes[8] = (itob 1u)
        let len_u16%3#0: bytes = ((extract 6 2) as_bytes%19#0)
        let encoded%44#0: bytes = (concat len_u16%3#0 encoded%43#0)
        let encoded%45#0: Encoded(len+bool1[]) = (concat encoded%44#0 0x)
        let tmp%16#0: bool = (== encoded%42#0 encoded%45#0)
        (assert tmp%16#0)
        let value_len%4#0: uint64 = (len c#0)
        let len_ok%4#0: bool = (<= value_len%4#0 64u)
        (assert len_ok%4#0) // overflow
        let bzero%4#0: bytes = (bzero 64u)
        let arc4_encoded%4#0: bytes[64] = (b| c#0 bzero%4#0)
        let as_Encoded(uint512)%4#0: Encoded(uint512) = arc4_encoded%4#0
        let encoded%46#0: Encoded((uint512)) = (concat 0x as_Encoded(uint512)%4#0)
        let as_bytes%20#0: bytes[8] = (itob 1u)
        let len_u16%4#0: bytes = ((extract 6 2) as_bytes%20#0)
        let encoded%47#0: bytes = (concat len_u16%4#0 encoded%46#0)
        let encoded%48#0: Encoded(len+uint512[]) = (concat encoded%47#0 0x)
        let value_len%5#0: uint64 = (len c#0)
        let len_ok%5#0: bool = (<= value_len%5#0 64u)
        (assert len_ok%5#0) // overflow
        let bzero%5#0: bytes = (bzero 64u)
        let arc4_encoded%5#0: bytes[64] = (b| c#0 bzero%5#0)
        let as_Encoded(uint512)%5#0: Encoded(uint512) = arc4_encoded%5#0
        let encoded%49#0: Encoded((uint512)) = (concat 0x as_Encoded(uint512)%5#0)
        let as_bytes%21#0: bytes[8] = (itob 1u)
        let len_u16%5#0: bytes = ((extract 6 2) as_bytes%21#0)
        let encoded%50#0: bytes = (concat len_u16%5#0 encoded%49#0)
        let encoded%51#0: Encoded(len+uint512[]) = (concat encoded%50#0 0x)
        let tmp%17#0: bool = (== encoded%48#0 encoded%51#0)
        (assert tmp%17#0)
        let length%14#0: uint64 = (len d#0)
        let as_bytes%22#0: bytes[8] = (itob length%14#0)
        let length_uint16%10#0: bytes = ((extract 6 2) as_bytes%22#0)
        let encoded_value%10#0: bytes = (concat length_uint16%10#0 d#0)
        let as_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = encoded_value%10#0
        let tail%6#0: bytes = (concat 0x as_Encoded(len+uint8[])%6#0)
        let as_bytes%23#0: bytes[8] = (itob 2u)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%23#0)
        let encoded%52#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%6#0)
        let as_bytes%24#0: bytes[8] = (itob 1u)
        let len_u16%6#0: bytes = ((extract 6 2) as_bytes%24#0)
        let encoded%53#0: bytes = (concat len_u16%6#0 encoded%52#0)
        let encoded%54#0: Encoded(len+len+uint8[][]) = (concat encoded%53#0 tail%6#0)
        let length%15#0: uint64 = (len d#0)
        let as_bytes%25#0: bytes[8] = (itob length%15#0)
        let length_uint16%11#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded_value%11#0: bytes = (concat length_uint16%11#0 d#0)
        let as_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = encoded_value%11#0
        let tail%7#0: bytes = (concat 0x as_Encoded(len+uint8[])%7#0)
        let as_bytes%26#0: bytes[8] = (itob 2u)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%26#0)
        let encoded%55#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%7#0)
        let as_bytes%27#0: bytes[8] = (itob 1u)
        let len_u16%7#0: bytes = ((extract 6 2) as_bytes%27#0)
        let encoded%56#0: bytes = (concat len_u16%7#0 encoded%55#0)
        let encoded%57#0: Encoded(len+len+uint8[][]) = (concat encoded%56#0 tail%7#0)
        let tmp%18#0: bool = (== encoded%54#0 encoded%57#0)
        (assert tmp%18#0)
        let length%16#0: uint64 = (len e#0)
        let as_bytes%28#0: bytes[8] = (itob length%16#0)
        let length_uint16%12#0: bytes = ((extract 6 2) as_bytes%28#0)
        let encoded_value%12#0: bytes = (concat length_uint16%12#0 e#0)
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = encoded_value%12#0
        let tail%8#0: bytes = (concat 0x as_Encoded(len+utf8[])%4#0)
        let as_bytes%29#0: bytes[8] = (itob 2u)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%29#0)
        let encoded%58#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%8#0)
        let as_bytes%30#0: bytes[8] = (itob 1u)
        let len_u16%8#0: bytes = ((extract 6 2) as_bytes%30#0)
        let encoded%59#0: bytes = (concat len_u16%8#0 encoded%58#0)
        let encoded%60#0: Encoded(len+len+utf8[][]) = (concat encoded%59#0 tail%8#0)
        let length%17#0: uint64 = (len e#0)
        let as_bytes%31#0: bytes[8] = (itob length%17#0)
        let length_uint16%13#0: bytes = ((extract 6 2) as_bytes%31#0)
        let encoded_value%13#0: bytes = (concat length_uint16%13#0 e#0)
        let as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = encoded_value%13#0
        let tail%9#0: bytes = (concat 0x as_Encoded(len+utf8[])%5#0)
        let as_bytes%32#0: bytes[8] = (itob 2u)
        let offset_as_uint16%9#0: bytes = ((extract 6 2) as_bytes%32#0)
        let encoded%61#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%9#0)
        let as_bytes%33#0: bytes[8] = (itob 1u)
        let len_u16%9#0: bytes = ((extract 6 2) as_bytes%33#0)
        let encoded%62#0: bytes = (concat len_u16%9#0 encoded%61#0)
        let encoded%63#0: Encoded(len+len+utf8[][]) = (concat encoded%62#0 tail%9#0)
        let tmp%19#0: bool = (== encoded%60#0 encoded%63#0)
        (assert tmp%19#0)
        let encoded%64#0: Encoded((uint8[32])) = (concat 0x f#0)
        let as_bytes%34#0: bytes[8] = (itob 1u)
        let len_u16%10#0: bytes = ((extract 6 2) as_bytes%34#0)
        let encoded%65#0: bytes = (concat len_u16%10#0 encoded%64#0)
        let encoded%66#0: Encoded(len+uint8[32][]) = (concat encoded%65#0 0x)
        let encoded%67#0: Encoded((uint8[32])) = (concat 0x f#0)
        let as_bytes%35#0: bytes[8] = (itob 1u)
        let len_u16%11#0: bytes = ((extract 6 2) as_bytes%35#0)
        let encoded%68#0: bytes = (concat len_u16%11#0 encoded%67#0)
        let encoded%69#0: Encoded(len+uint8[32][]) = (concat encoded%68#0 0x)
        let tmp%20#0: bool = (== encoded%66#0 encoded%69#0)
        (assert tmp%20#0)
        let length%18#0: uint64 = (len g#0)
        let lengths_equal%4#0: bool = (== length%18#0 12u)
        (assert lengths_equal%4#0) // invalid size
        let as_Encoded(uint8[12])%4#0: Encoded(uint8[12]) = g#0
        let encoded%70#0: Encoded((uint8[12])) = (concat 0x as_Encoded(uint8[12])%4#0)
        let as_bytes%36#0: bytes[8] = (itob 1u)
        let len_u16%12#0: bytes = ((extract 6 2) as_bytes%36#0)
        let encoded%71#0: bytes = (concat len_u16%12#0 encoded%70#0)
        let encoded%72#0: Encoded(len+uint8[12][]) = (concat encoded%71#0 0x)
        let length%19#0: uint64 = (len g#0)
        let lengths_equal%5#0: bool = (== length%19#0 12u)
        (assert lengths_equal%5#0) // invalid size
        let as_Encoded(uint8[12])%5#0: Encoded(uint8[12]) = g#0
        let encoded%73#0: Encoded((uint8[12])) = (concat 0x as_Encoded(uint8[12])%5#0)
        let as_bytes%37#0: bytes[8] = (itob 1u)
        let len_u16%13#0: bytes = ((extract 6 2) as_bytes%37#0)
        let encoded%74#0: bytes = (concat len_u16%13#0 encoded%73#0)
        let encoded%75#0: Encoded(len+uint8[12][]) = (concat encoded%74#0 0x)
        let tmp%21#0: bool = (== encoded%72#0 encoded%75#0)
        (assert tmp%21#0)
        let tmp%22#0: bool = (== 8u 8u)
        (assert tmp%22#0)
        let tmp%23#0: bool = (== 1u 1u)
        (assert tmp%23#0)
        let tmp%24#0: bool = (== 64u 64u)
        (assert tmp%24#0)
        let tmp%25#0: bool = (== 17u 17u)
        (assert tmp%25#0)
        let tmp%26#0: bool = (== 17u 17u)
        (assert tmp%26#0)
        let tmp%27#0: bool = (== 3u 3u)
        (assert tmp%27#0)
        let tmp%28#0: bool = (== 3u 3u)
        (assert tmp%28#0)
        let tmp%29#0: bool = (== 12u 12u)
        (assert tmp%29#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: string, d_bytes: bytes, e.a: Encoded(uint64), e.b: Encoded(len+uint8[]), e_bytes: bytes, f: Encoded(uint8[32]), f_bytes: bytes, g: bytes[12], g_bytes: bytes) -> void:
    block@0: // L64
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = a_bytes#0
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = b_bytes#0
        let tmp%2#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%3#0: bool = (== tmp%2#0 b#0)
        (assert tmp%3#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = c_bytes#0
        let tmp%4#0: bool = (b== reinterpret_Encoded(uint512)%0#0 c#0)
        (assert tmp%4#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = d_bytes#0
        let tmp%5#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%6#0: bool = (== tmp%5#0 d#0)
        (assert tmp%6#0)
        let reinterpret_Encoded((uint64,len+uint8[]))%0#0: Encoded((uint64,len+uint8[])) = e_bytes#0
        let extract%0#0: bytes = (extract3 reinterpret_Encoded((uint64,len+uint8[]))%0#0 0u 8u)
        let tmp%7#0: bool = (== extract%0#0 e.a#0)
        goto tmp%7#0 ? block@1 : block@3
    block@1: // and_contd_L84
        let reinterpret_Encoded((uint64,len+uint8[]))%1#0: Encoded((uint64,len+uint8[])) = e_bytes#0
        let extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+uint8[]))%1#0 8u)
        let len%1#0: uint64 = (len reinterpret_Encoded((uint64,len+uint8[]))%1#0)
        let substring3%1#0: bytes = (substring3 reinterpret_Encoded((uint64,len+uint8[]))%1#0 extract_uint16%1#0 len%1#0)
        let tmp%8#0: bool = (== substring3%1#0 e.b#0)
        goto tmp%8#0 ? block@2 : block@3
    block@2: // bool_true_L84
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L84
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L84
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%9#0: bytes[8] = (itob 1u)
        let length%0#0: uint64 = (len tmp%9#0)
        let is_out_of_bounds%0#0: bool = (>= 6u length%0#0)
        let bounded_index%0#0: uint64 = (select 6u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 8u length%0#0)
        let bounded_index%1#0: uint64 = (select 8u length%0#0 is_out_of_bounds%1#0)
        let tmp%10#0: bytes = (substring3 tmp%9#0 bounded_index%0#0 bounded_index%1#0)
        let lenPrefix#0: bytes = tmp%10#0
        let tmp%11#0: bytes[8] = (itob 2u)
        let length%1#0: uint64 = (len tmp%11#0)
        let is_out_of_bounds%2#0: bool = (>= 6u length%1#0)
        let bounded_index%2#0: uint64 = (select 6u length%1#0 is_out_of_bounds%2#0)
        let is_out_of_bounds%3#0: bool = (>= 8u length%1#0)
        let bounded_index%3#0: uint64 = (select 8u length%1#0 is_out_of_bounds%3#0)
        let tmp%12#0: bytes = (substring3 tmp%11#0 bounded_index%2#0 bounded_index%3#0)
        let offsetHeader#0: bytes = tmp%12#0
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat lenPrefix#0 a_bytes#0)
        let array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint64[])%0#0 0u)
        let tmp%13#0: bool = (== array_length%0#0 1u)
        goto tmp%13#0 ? block@5 : block@7
    block@5: // and_contd_L88
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (concat lenPrefix#0 a_bytes#0)
        let array%array_trimmed%0#1: bytes = ((extract 2 0) reinterpret_Encoded(len+uint64[])%1#0)
        let array%bytes_offset%0#1: uint64 = (* 0u 8u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = array%encoded_element%0#1
        let tmp%14#0: uint64 = (btoi array_item%0#0)
        let tmp%15#0: bool = (== tmp%14#0 a#0)
        goto tmp%15#0 ? block@6 : block@7
    block@6: // bool_true_L88
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L88
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L88
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat lenPrefix#0 b_bytes#0)
        let array_length%1#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u)
        let tmp%16#0: bool = (== array_length%1#0 1u)
        goto tmp%16#0 ? block@9 : block@11
    block@9: // and_contd_L89
        let reinterpret_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = (concat lenPrefix#0 b_bytes#0)
        let array%array_length%0#1: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%1#0 0u)
        let array%lt%0#1: bool = (< 0u array%array_length%0#1)
        (assert array%lt%0#1) // index access is out of bounds
        let array%array_trimmed%1#1: bytes = ((extract 2 0) reinterpret_Encoded(len+bool1[])%1#0)
        let array%is_true%0#1: bool = (getbit array%array_trimmed%1#1 0u)
        let array_item%1#0: bool = array%is_true%0#1
        let tmp%17#0: bool = (getbit array_item%1#0 0u)
        let tmp%18#0: bool = (== tmp%17#0 b#0)
        goto tmp%18#0 ? block@10 : block@11
    block@10: // bool_true_L89
        let and_result%2#0: bool = 1u
        goto block@12
    block@11: // bool_false_L89
        let and_result%2#1: bool = 0u
        goto block@12
    block@12: // bool_merge_L89
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@10, and_result%2#1 <- block@11)
        (assert and_result%2#2) // Array of boolean matches
        let tmp%19#0: bytes = (concat lenPrefix#0 c_bytes#0)
        (log tmp%19#0)
        let reinterpret_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = (concat lenPrefix#0 c_bytes#0)
        let array_length%2#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint512[])%0#0 0u)
        let tmp%20#0: bool = (== array_length%2#0 1u)
        goto tmp%20#0 ? block@13 : block@15
    block@13: // and_contd_L91
        let reinterpret_Encoded(len+uint512[])%1#0: Encoded(len+uint512[]) = (concat lenPrefix#0 c_bytes#0)
        let array%array_trimmed%2#1: bytes = ((extract 2 0) reinterpret_Encoded(len+uint512[])%1#0)
        let array%bytes_offset%1#1: uint64 = (* 0u 64u)
        let array%encoded_element%1#1: bytes = (extract3 array%array_trimmed%2#1 array%bytes_offset%1#1 64u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint512) = array%encoded_element%1#1
        let tmp%21#0: biguint = array_item%2#0
        let tmp%22#0: bool = (b== tmp%21#0 c#0)
        goto tmp%22#0 ? block@14 : block@15
    block@14: // bool_true_L91
        let and_result%3#0: bool = 1u
        goto block@16
    block@15: // bool_false_L91
        let and_result%3#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L91
        let and_result%3#2: bool = Ï†(and_result%3#0 <- block@14, and_result%3#1 <- block@15)
        (assert and_result%3#2) // Array of biguint matches
        let tmp%23#0: bytes = (concat "" lenPrefix#0)
        let tmp%24#0: bytes = (concat tmp%23#0 offsetHeader#0)
        let reinterpret_Encoded(len+len+utf8[][])%0#0: Encoded(len+len+utf8[][]) = (concat tmp%24#0 d_bytes#0)
        let array_length%3#0: uint64 = (extract_uint16 reinterpret_Encoded(len+len+utf8[][])%0#0 0u)
        let tmp%25#0: bool = (== array_length%3#0 1u)
        goto tmp%25#0 ? block@17 : block@19
    block@17: // and_contd_L92
        let tmp%26#0: bytes = (concat "" lenPrefix#0)
        let tmp%27#0: bytes = (concat tmp%26#0 offsetHeader#0)
        let reinterpret_Encoded(len+len+utf8[][])%1#0: Encoded(len+len+utf8[][]) = (concat tmp%27#0 d_bytes#0)
        let array%array_head_and_tail%0#1: bytes = ((extract 2 0) reinterpret_Encoded(len+len+utf8[][])%1#0)
        let array%array_length%1#1: uint64 = (extract_uint16 reinterpret_Encoded(len+len+utf8[][])%1#0 0u)
        let array%lt%1#1: bool = (< 0u array%array_length%1#1)
        (assert array%lt%1#1) // index access is out of bounds
        let array%item_offset_offset%0#1: uint64 = (* 0u 2u)
        let array%item_offset%0#1: uint64 = (extract_uint16 array%array_head_and_tail%0#1 array%item_offset_offset%0#1)
        let array%item_length%0#1: uint64 = (extract_uint16 array%array_head_and_tail%0#1 array%item_offset%0#1)
        let array%item_length_in_bytes%0#1: uint64 = (* array%item_length%0#1 1u)
        let array%item_head_tail_length%0#1: uint64 = (+ array%item_length_in_bytes%0#1 2u)
        let array%item%0#1: bytes = (extract3 array%array_head_and_tail%0#1 array%item_offset%0#1 array%item_head_tail_length%0#1)
        let array_item%3#0: Encoded(len+utf8[]) = array%item%0#1
        let tmp%28#0: string = ((extract 2 0) array_item%3#0)
        let tmp%29#0: bool = (== tmp%28#0 d#0)
        goto tmp%29#0 ? block@18 : block@19
    block@18: // bool_true_L92
        let and_result%4#0: bool = 1u
        goto block@20
    block@19: // bool_false_L92
        let and_result%4#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L92
        let and_result%4#2: bool = Ï†(and_result%4#0 <- block@18, and_result%4#1 <- block@19)
        (assert and_result%4#2) // Array of string matches
        let tmp%30#0: bytes = (concat "" lenPrefix#0)
        let tmp%31#0: bytes = (concat tmp%30#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,len+uint8[])[])%0#0: Encoded(len+(uint64,len+uint8[])[]) = (concat tmp%31#0 e_bytes#0)
        let array_length%4#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,len+uint8[])[])%0#0 0u)
        let tmp%32#0: bool = (== array_length%4#0 1u)
        goto tmp%32#0 ? block@21 : block@24
    block@21: // and_contd_L94
        let tmp%33#0: bytes = (concat "" lenPrefix#0)
        let tmp%34#0: bytes = (concat tmp%33#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,len+uint8[])[])%1#0: Encoded(len+(uint64,len+uint8[])[]) = (concat tmp%34#0 e_bytes#0)
        let array%array_head_and_tail%1#1: bytes = ((extract 2 0) reinterpret_Encoded(len+(uint64,len+uint8[])[])%1#0)
        let array%array_length%2#1: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,len+uint8[])[])%1#0 0u)
        let array%item_offset_offset%1#1: uint64 = (* 0u 2u)
        let array%item_offset%1#1: uint64 = (extract_uint16 array%array_head_and_tail%1#1 array%item_offset_offset%1#1)
        let array%next_index%0#1: uint64 = (+ 0u 1u)
        let array%has_next%0#1: uint64 = (- array%array_length%2#1 array%next_index%0#1) // on error: index access is out of bounds
        let array%end_of_array%0#1: uint64 = (len array%array_head_and_tail%1#1)
        let array%next_item_offset_offset%0#1: uint64 = (* array%next_index%0#1 2u)
        let array%next_item_offset%0#1: uint64 = (extract_uint16 array%array_head_and_tail%1#1 array%next_item_offset_offset%0#1)
        let array%end_offset%0#1: uint64 = (select array%end_of_array%0#1 array%next_item_offset%0#1 array%has_next%0#1)
        let array%substring3%0#1: bytes = (substring3 array%array_head_and_tail%1#1 array%item_offset%1#1 array%end_offset%0#1)
        let array_item%4#0: Encoded((uint64,len+uint8[])) = array%substring3%0#1
        let array%extract%0#1: bytes = (extract3 array_item%4#0 0u 8u)
        let tmp%35#0: Encoded(uint64) = array%extract%0#1
        let tmp%37#0: bool = (== tmp%35#0 e.a#0)
        goto tmp%37#0 ? block@22 : block@24
    block@22: // and_contd_L94
        let tmp%38#0: bytes = (concat "" lenPrefix#0)
        let tmp%39#0: bytes = (concat tmp%38#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,len+uint8[])[])%2#0: Encoded(len+(uint64,len+uint8[])[]) = (concat tmp%39#0 e_bytes#0)
        let array%array_head_and_tail%2#1: bytes = ((extract 2 0) reinterpret_Encoded(len+(uint64,len+uint8[])[])%2#0)
        let array%array_length%3#1: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,len+uint8[])[])%2#0 0u)
        let array%item_offset_offset%2#1: uint64 = (* 0u 2u)
        let array%item_offset%2#1: uint64 = (extract_uint16 array%array_head_and_tail%2#1 array%item_offset_offset%2#1)
        let array%next_index%1#1: uint64 = (+ 0u 1u)
        let array%has_next%1#1: uint64 = (- array%array_length%3#1 array%next_index%1#1) // on error: index access is out of bounds
        let array%end_of_array%1#1: uint64 = (len array%array_head_and_tail%2#1)
        let array%next_item_offset_offset%1#1: uint64 = (* array%next_index%1#1 2u)
        let array%next_item_offset%1#1: uint64 = (extract_uint16 array%array_head_and_tail%2#1 array%next_item_offset_offset%1#1)
        let array%end_offset%1#1: uint64 = (select array%end_of_array%1#1 array%next_item_offset%1#1 array%has_next%1#1)
        let array%substring3%2#1: bytes = (substring3 array%array_head_and_tail%2#1 array%item_offset%2#1 array%end_offset%1#1)
        let array_item%5#0: Encoded((uint64,len+uint8[])) = array%substring3%2#1
        let array%extract_uint16%1#1: uint64 = (extract_uint16 array_item%5#0 8u)
        let array%len%1#1: uint64 = (len array_item%5#0)
        let array%substring3%3#1: bytes = (substring3 array_item%5#0 array%extract_uint16%1#1 array%len%1#1)
        let tmp%41#0: Encoded(len+uint8[]) = array%substring3%3#1
        let tmp%42#0: bool = (== tmp%41#0 e.b#0)
        goto tmp%42#0 ? block@23 : block@24
    block@23: // bool_true_L94
        let and_result%5#0: bool = 1u
        goto block@25
    block@24: // bool_false_L94
        let and_result%5#1: bool = 0u
        goto block@25
    block@25: // bool_merge_L94
        let and_result%5#2: bool = Ï†(and_result%5#0 <- block@23, and_result%5#1 <- block@24)
        (assert and_result%5#2) // Array of struct matches
        let tmp%43#0: bytes = (concat "" lenPrefix#0)
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat tmp%43#0 f_bytes#0)
        let array_length%5#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[32][])%0#0 0u)
        let tmp%44#0: bool = (== array_length%5#0 1u)
        goto tmp%44#0 ? block@26 : block@28
    block@26: // and_contd_L95
        let tmp%45#0: bytes = (concat "" lenPrefix#0)
        let reinterpret_Encoded(len+uint8[32][])%1#0: Encoded(len+uint8[32][]) = (concat tmp%45#0 f_bytes#0)
        let array%array_trimmed%3#1: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[32][])%1#0)
        let array%bytes_offset%2#1: uint64 = (* 0u 32u)
        let array%encoded_element%2#1: bytes = (extract3 array%array_trimmed%3#1 array%bytes_offset%2#1 32u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8[32]) = array%encoded_element%2#1
        let tmp%46#0: bool = (== array_item%6#0 f#0)
        goto tmp%46#0 ? block@27 : block@28
    block@27: // bool_true_L95
        let and_result%6#0: bool = 1u
        goto block@29
    block@28: // bool_false_L95
        let and_result%6#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L95
        let and_result%6#2: bool = Ï†(and_result%6#0 <- block@27, and_result%6#1 <- block@28)
        (assert and_result%6#2) // Array of address matches
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = g_bytes#0
        let tmp%47#0: bool = (== reinterpret_Encoded(uint8[12])%0#0 g#0)
        (assert tmp%47#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate() -> void:
    block@0: // L22
        return 