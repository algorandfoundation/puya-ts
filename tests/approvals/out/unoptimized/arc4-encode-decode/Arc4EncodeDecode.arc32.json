{
    "hints": {
        "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "e": {
                    "name": "TestObj",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Arc4EncodeDecode",
        "methods": [
            {
                "name": "testEncoding",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "bool",
                        "name": "b"
                    },
                    {
                        "type": "uint512",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    },
                    {
                        "type": "string",
                        "name": "e"
                    },
                    {
                        "type": "address",
                        "name": "f"
                    },
                    {
                        "type": "byte[12]",
                        "name": "g"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testDecoding",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "a_bytes"
                    },
                    {
                        "type": "bool",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "b_bytes"
                    },
                    {
                        "type": "uint512",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "c_bytes"
                    },
                    {
                        "type": "string",
                        "name": "d"
                    },
                    {
                        "type": "byte[]",
                        "name": "d_bytes"
                    },
                    {
                        "type": "(uint64,byte[])",
                        "name": "e"
                    },
                    {
                        "type": "byte[]",
                        "name": "e_bytes"
                    },
                    {
                        "type": "address",
                        "name": "f"
                    },
                    {
                        "type": "byte[]",
                        "name": "f_bytes"
                    },
                    {
                        "type": "byte[12]",
                        "name": "g"
                    },
                    {
                        "type": "byte[]",
                        "name": "g_bytes"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}