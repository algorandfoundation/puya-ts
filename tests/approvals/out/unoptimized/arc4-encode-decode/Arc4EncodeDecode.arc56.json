{
    "name": "Arc4EncodeDecode",
    "structs": {
        "TestObj": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "testEncoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "string",
                    "name": "e"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDecoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "a_bytes"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "b_bytes"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "c_bytes"
                },
                {
                    "type": "string",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "d_bytes"
                },
                {
                    "type": "(uint64,byte[])",
                    "struct": "TestObj",
                    "name": "e"
                },
                {
                    "type": "byte[]",
                    "name": "e_bytes"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[]",
                    "name": "f_bytes"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                },
                {
                    "type": "byte[]",
                    "name": "g_bytes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1916
                    ],
                    "errorMessage": "Array of address matches"
                },
                {
                    "pc": [
                        1598
                    ],
                    "errorMessage": "Array of biguint matches"
                },
                {
                    "pc": [
                        1557
                    ],
                    "errorMessage": "Array of boolean matches"
                },
                {
                    "pc": [
                        1671
                    ],
                    "errorMessage": "Array of string matches"
                },
                {
                    "pc": [
                        1876
                    ],
                    "errorMessage": "Array of struct matches"
                },
                {
                    "pc": [
                        1525
                    ],
                    "errorMessage": "Array of uint64 matches"
                },
                {
                    "pc": [
                        36
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        104
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1418
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1517,
                        1545,
                        1591,
                        1640,
                        1730,
                        1812,
                        1911
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        217,
                        235,
                        302,
                        330,
                        357,
                        375,
                        393,
                        429,
                        447,
                        474,
                        501,
                        1496,
                        1531,
                        1542,
                        1568,
                        1610,
                        1637,
                        1683,
                        1710,
                        1792,
                        1885
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        200,
                        322
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        226,
                        244,
                        311,
                        339,
                        366,
                        384,
                        402,
                        456,
                        483,
                        510
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        265,
                        495
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 12>"
                },
                {
                    "pc": [
                        256,
                        468
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        211,
                        351
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        191,
                        295
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        441
                    ],
                    "errorMessage": "invalid number of bytes for tests/approvals/arc4-encode-decode.algo.ts::TestObj"
                },
                {
                    "pc": [
                        785,
                        795,
                        822,
                        831,
                        1016,
                        1029,
                        1265,
                        1275
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        420
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of (uint64,(len+uint8[]))"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        586,
                        599,
                        878,
                        895,
                        1097,
                        1111
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}