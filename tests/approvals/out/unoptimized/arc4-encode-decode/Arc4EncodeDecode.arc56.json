{
    "name": "Arc4EncodeDecode",
    "structs": {
        "TestObj": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "testEncoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "string",
                    "name": "e"
                },
                {
                    "type": "address",
                    "name": "f"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDecoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "a_bytes"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "b_bytes"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "c_bytes"
                },
                {
                    "type": "string",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "d_bytes"
                },
                {
                    "type": "(uint64,byte[])",
                    "struct": "TestObj",
                    "name": "e"
                },
                {
                    "type": "byte[]",
                    "name": "e_bytes"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[]",
                    "name": "f_bytes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1718
                    ],
                    "errorMessage": "Array of address matches"
                },
                {
                    "pc": [
                        1451
                    ],
                    "errorMessage": "Array of biguint matches"
                },
                {
                    "pc": [
                        1411
                    ],
                    "errorMessage": "Array of boolean matches"
                },
                {
                    "pc": [
                        1519
                    ],
                    "errorMessage": "Array of string matches"
                },
                {
                    "pc": [
                        1679
                    ],
                    "errorMessage": "Array of struct matches"
                },
                {
                    "pc": [
                        1367
                    ],
                    "errorMessage": "Array of uint64 matches"
                },
                {
                    "pc": [
                        112,
                        1234,
                        1358,
                        1394,
                        1443,
                        1488,
                        1569,
                        1596,
                        1635,
                        1710
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        58,
                        178
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        526
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        1262
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        245
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        63,
                        183
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        610,
                        623,
                        779,
                        795,
                        1022
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        991
                    ],
                    "errorMessage": "value is bigger than 64 bytes"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 6,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}