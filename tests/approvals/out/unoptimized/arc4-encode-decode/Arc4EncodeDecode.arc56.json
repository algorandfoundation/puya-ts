{
    "name": "Arc4EncodeDecode",
    "structs": {
        "TestObj": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "testEncoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "string",
                    "name": "e"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDecoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "a_bytes"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "b_bytes"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "c_bytes"
                },
                {
                    "type": "string",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "d_bytes"
                },
                {
                    "type": "(uint64,byte[])",
                    "struct": "TestObj",
                    "name": "e"
                },
                {
                    "type": "byte[]",
                    "name": "e_bytes"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[]",
                    "name": "f_bytes"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                },
                {
                    "type": "byte[]",
                    "name": "g_bytes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1598
                    ],
                    "errorMessage": "Array of address matches"
                },
                {
                    "pc": [
                        1306
                    ],
                    "errorMessage": "Array of biguint matches"
                },
                {
                    "pc": [
                        1268
                    ],
                    "errorMessage": "Array of boolean matches"
                },
                {
                    "pc": [
                        1374
                    ],
                    "errorMessage": "Array of string matches"
                },
                {
                    "pc": [
                        1559
                    ],
                    "errorMessage": "Array of struct matches"
                },
                {
                    "pc": [
                        1232
                    ],
                    "errorMessage": "Array of uint64 matches"
                },
                {
                    "pc": [
                        52,
                        166
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1121
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        238
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        171
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1223,
                        1255,
                        1298,
                        1343,
                        1426,
                        1500,
                        1590
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        526,
                        536,
                        560,
                        568,
                        735,
                        747,
                        969,
                        979
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        340,
                        351,
                        610,
                        624,
                        811,
                        823
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDY0IDIKICAgIGJ5dGVjYmxvY2sgMHggMHgwMCAweDA2ODEwMQoKbWFpbl9ibG9ja0AwOgoKbWFpbl9ibG9ja0AxOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjI0CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjNEVuY29kZURlY29kZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDcKCm1haW5fYWJpX3JvdXRpbmdAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoyNAogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzRFbmNvZGVEZWNvZGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBwdXNoYnl0ZXMgMHgzNGIxNDZjMSAvLyBtZXRob2QgInRlc3RFbmNvZGluZyh1aW50NjQsYm9vbCx1aW50NTEyLGJ5dGVbXSxzdHJpbmcsYWRkcmVzcyxieXRlWzEyXSl2b2lkIgogICAgcHVzaGJ5dGVzIDB4MDBmZDI1MzQgLy8gbWV0aG9kICJ0ZXN0RGVjb2RpbmcodWludDY0LGJ5dGVbXSxib29sLGJ5dGVbXSx1aW50NTEyLGJ5dGVbXSxzdHJpbmcsYnl0ZVtdLCh1aW50NjQsYnl0ZVtdKSxieXRlW10sYWRkcmVzcyxieXRlW10sYnl0ZVsxMl0sYnl0ZVtdKXZvaWQiCiAgICB1bmNvdmVyIDIKICAgIG1hdGNoIG1haW5fdGVzdEVuY29kaW5nX3JvdXRlQDMgbWFpbl90ZXN0RGVjb2Rpbmdfcm91dGVANAoKbWFpbl9zd2l0Y2hfY2FzZV9kZWZhdWx0QDU6CgptYWluX3N3aXRjaF9jYXNlX25leHRANjoKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoyNAogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzRFbmNvZGVEZWNvZGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAoKbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo6QXJjNEVuY29kZURlY29kZS5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxMjoKICAgIHJldHVybgoKbWFpbl90ZXN0RGVjb2Rpbmdfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo2OS04NAogICAgLy8gdGVzdERlY29kaW5nKAogICAgLy8gICBhOiB1aW50NjQsCiAgICAvLyAgIGFfYnl0ZXM6IGJ5dGVzLAogICAgLy8gICBiOiBib29sZWFuLAogICAgLy8gICBiX2J5dGVzOiBieXRlcywKICAgIC8vICAgYzogYmlndWludCwKICAgIC8vICAgY19ieXRlczogYnl0ZXMsCiAgICAvLyAgIGQ6IHN0cmluZywKICAgIC8vICAgZF9ieXRlczogYnl0ZXMsCiAgICAvLyAgIGU6IFRlc3RPYmosCiAgICAvLyAgIGVfYnl0ZXM6IGJ5dGVzLAogICAgLy8gICBmOiBBZGRyZXNzLAogICAgLy8gICBmX2J5dGVzOiBieXRlcywKICAgIC8vICAgZzogYnl0ZXM8MTI+LAogICAgLy8gICBnX2J5dGVzOiBieXRlcywKICAgIC8vICkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50Y18wIC8vIE5vT3AKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgICE9CiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjI0CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjNEVuY29kZURlY29kZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDcKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA4CiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTAKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTQKICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NjktODQKICAgIC8vIHRlc3REZWNvZGluZygKICAgIC8vICAgYTogdWludDY0LAogICAgLy8gICBhX2J5dGVzOiBieXRlcywKICAgIC8vICAgYjogYm9vbGVhbiwKICAgIC8vICAgYl9ieXRlczogYnl0ZXMsCiAgICAvLyAgIGM6IGJpZ3VpbnQsCiAgICAvLyAgIGNfYnl0ZXM6IGJ5dGVzLAogICAgLy8gICBkOiBzdHJpbmcsCiAgICAvLyAgIGRfYnl0ZXM6IGJ5dGVzLAogICAgLy8gICBlOiBUZXN0T2JqLAogICAgLy8gICBlX2J5dGVzOiBieXRlcywKICAgIC8vICAgZjogQWRkcmVzcywKICAgIC8vICAgZl9ieXRlczogYnl0ZXMsCiAgICAvLyAgIGc6IGJ5dGVzPDEyPiwKICAgIC8vICAgZ19ieXRlczogYnl0ZXMsCiAgICAvLyApIHsKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIGNhbGxzdWIgdGVzdERlY29kaW5nCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjpBcmM0RW5jb2RlRGVjb2RlLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEyCgptYWluX3Rlc3RFbmNvZGluZ19yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjI1CiAgICAvLyB0ZXN0RW5jb2RpbmcoYTogdWludDY0LCBiOiBib29sZWFuLCBjOiBiaWd1aW50LCBkOiBieXRlcywgZTogc3RyaW5nLCBmOiBBZGRyZXNzLCBnOiBieXRlczwxMj4pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBOb09wCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMCAvLyAwCiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoyNAogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzRFbmNvZGVEZWNvZGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoyNQogICAgLy8gdGVzdEVuY29kaW5nKGE6IHVpbnQ2NCwgYjogYm9vbGVhbiwgYzogYmlndWludCwgZDogYnl0ZXMsIGU6IHN0cmluZywgZjogQWRkcmVzcywgZzogYnl0ZXM8MTI+KSB7CiAgICB1bmNvdmVyIDYKICAgIHVuY292ZXIgNgogICAgdW5jb3ZlciA2CiAgICB1bmNvdmVyIDYKICAgIHVuY292ZXIgNgogICAgdW5jb3ZlciA2CiAgICB1bmNvdmVyIDYKICAgIGNhbGxzdWIgdGVzdEVuY29kaW5nCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjpBcmM0RW5jb2RlRGVjb2RlLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEyCgptYWluX2JhcmVfcm91dGluZ0A3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjI0CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjNEVuY29kZURlY29kZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICBtYXRjaCBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA4CgptYWluX3N3aXRjaF9jYXNlX2RlZmF1bHRAOToKCm1haW5fc3dpdGNoX2Nhc2VfbmV4dEAxMDoKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDExCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjI0CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjNEVuY29kZURlY29kZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBpbnRjXzAgLy8gMAogICAgPT0KICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGNhbGxzdWIgX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlCiAgICBpbnRjXzEgLy8gMQogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjpBcmM0RW5jb2RlRGVjb2RlLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDEyCgoKLy8gX3B1eWFfbGliLnV0aWwuZW5zdXJlX2J1ZGdldChyZXF1aXJlZF9idWRnZXQ6IHVpbnQ2NCwgZmVlX3NvdXJjZTogdWludDY0KSAtPiB2b2lkOgplbnN1cmVfYnVkZ2V0OgogICAgcHJvdG8gMiAwCgplbnN1cmVfYnVkZ2V0X2Jsb2NrQDA6CiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgICsKCmVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDE6CiAgICBnbG9iYWwgT3Bjb2RlQnVkZ2V0CiAgICBmcmFtZV9kaWcgMAogICAgPAogICAgYnogZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3CgplbnN1cmVfYnVkZ2V0X3doaWxlX2JvZHlAMjoKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBieXRlY18yIC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgYnl0ZWNfMiAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQogICAgaW50Y18wIC8vIDAKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9kaWcgLTEKICAgIG1hdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX2RlZmF1bHRANToKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2OgogICAgaXR4bl9zdWJtaXQKICAgIGIgZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMQoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8xQDQ6CiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDM6CiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANzoKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo6QXJjNEVuY29kZURlY29kZS50ZXN0RW5jb2RpbmcoYTogdWludDY0LCBiOiB1aW50NjQsIGM6IGJ5dGVzLCBkOiBieXRlcywgZTogYnl0ZXMsIGY6IGJ5dGVzLCBnOiBieXRlcykgLT4gdm9pZDoKdGVzdEVuY29kaW5nOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjI1CiAgICAvLyB0ZXN0RW5jb2RpbmcoYTogdWludDY0LCBiOiBib29sZWFuLCBjOiBiaWd1aW50LCBkOiBieXRlcywgZTogc3RyaW5nLCBmOiBBZGRyZXNzLCBnOiBieXRlczwxMj4pIHsKICAgIHByb3RvIDcgMAoKdGVzdEVuY29kaW5nX2Jsb2NrQDA6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6MjYKICAgIC8vIGVuc3VyZUJ1ZGdldCgxNDAwKQogICAgcHVzaGludCAxNDAwIC8vIDE0MDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoyNwogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoYSkgPT09IG5ldyBVaW50TjY0KGEpLmJ5dGVzKQogICAgZnJhbWVfZGlnIC03CiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTcKICAgIGl0b2IKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoyOAogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoYikgPT09IG5ldyBCb29sKGIpLmJ5dGVzKQogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIC02CiAgICBzZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2RpZyAtNgogICAgc2V0Yml0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6MjkKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0KGMpID09PSBuZXcgVWludE48NTEyPihjKS5ieXRlcykKICAgIGZyYW1lX2RpZyAtNQogICAgbGVuCiAgICBpbnRjXzIgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyA2NAogICAgYnplcm8KICAgIGZyYW1lX2RpZyAtNQogICAgYnwKICAgIGZyYW1lX2RpZyAtNQogICAgbGVuCiAgICBpbnRjXzIgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyA2NAogICAgYnplcm8KICAgIGZyYW1lX2RpZyAtNQogICAgYnwKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czozMAogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoZCkgPT09IG5ldyBEeW5hbWljQnl0ZXMoZCkuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTQKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6MzEKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0KGUpID09PSBuZXcgU3RyKGUpLmJ5dGVzKQogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjMyCiAgICAvLyBhc3NlcnQoZW5jb2RlQXJjNCh7IGEsIGI6IGQgfSkgPT09IG5ldyBUZXN0U3RydWN0KHsgYTogbmV3IFVpbnRONjQoYSksIGI6IG5ldyBEeW5hbWljQnl0ZXMoZCkgfSkuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTcKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgcHVzaGludCAxMCAvLyAxMAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNwogICAgaXRvYgogICAgZnJhbWVfZGlnIC00CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjMzCiAgICAvLyBhc3NlcnQoZW5jb2RlQXJjNCh7IGEsIGI6IGQgfSkgPT09IGVuY29kZUFyYzQoeyBhLCBiOiBuZXcgRHluYW1pY0J5dGVzKGQpIH0pKQogICAgZnJhbWVfZGlnIC03CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTcKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGludCAxMCAvLyAxMAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6MzQKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0KHsgYSwgYjogZyB9KSA9PT0gZW5jb2RlQXJjNCh7IGEsIGI6IG5ldyBTdGF0aWNCeXRlczwxMj4oZykgfSkpCiAgICBmcmFtZV9kaWcgLTcKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtNwogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czozNQogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoZikgPT09IGYuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTIKICAgIGR1cAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjM2CiAgICAvLyBhc3NlcnQoZW5jb2RlQXJjNChnKSA9PT0gbmV3IFN0YXRpY0J5dGVzKGcpLmJ5dGVzKQogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBmcmFtZV9kaWcgLTEKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6MzgKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0KFthXSkgPT09IG5ldyBTdGF0aWNBcnJheShuZXcgVWludE42NChhKSkuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTcKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC03CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czozOQogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoW2JdKSA9PT0gbmV3IFN0YXRpY0FycmF5KG5ldyBCb29sKGIpKS5ieXRlcykKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2RpZyAtNgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2RpZyAtNgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo0MAogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoW2NdKSA9PT0gbmV3IFN0YXRpY0FycmF5KG5ldyBVaW50Tjw1MTI+KGMpKS5ieXRlcykKICAgIGZyYW1lX2RpZyAtNQogICAgbGVuCiAgICBpbnRjXzIgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyA2NAogICAgYnplcm8KICAgIGZyYW1lX2RpZyAtNQogICAgYnwKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBsZW4KICAgIGludGNfMiAvLyA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDY0CiAgICBiemVybwogICAgZnJhbWVfZGlnIC01CiAgICBifAogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NDEKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0KFtkXSkgPT09IG5ldyBTdGF0aWNBcnJheShuZXcgRHluYW1pY0J5dGVzKGQpKS5ieXRlcykKICAgIGZyYW1lX2RpZyAtNAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGludGNfMyAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGludGNfMyAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo0MgogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoW2VdKSA9PT0gbmV3IFN0YXRpY0FycmF5KG5ldyBTdHIoZSkpLmJ5dGVzKQogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDIKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDIKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlY18wIC8vIDB4CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjQzCiAgICAvLyBhc3NlcnQoZW5jb2RlQXJjNChbZl0pID09PSBuZXcgU3RhdGljQXJyYXkoZikuYnl0ZXMpCiAgICBieXRlY18wIC8vIDB4CiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo0NAogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQoW2ddKSA9PT0gbmV3IFN0YXRpY0FycmF5KG5ldyBTdGF0aWNCeXRlcyhnKSkuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMCAvLyAweAogICAgc3dhcAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NDYKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0PHVpbnQ2NFtdPihbYV0pID09PSBuZXcgRHluYW1pY0FycmF5KG5ldyBVaW50TjY0KGEpKS5ieXRlcykKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC03CiAgICBpdG9iCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNwogICAgaXRvYgogICAgaW50Y18xIC8vIDEKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo0NwogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQ8Ym9vbGVhbltdPihbYl0pID09PSBuZXcgRHluYW1pY0FycmF5KG5ldyBCb29sKGIpKS5ieXRlcykKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIC02CiAgICBzZXRiaXQKICAgIGNvbmNhdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIC02CiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NDgKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0PGJpZ3VpbnRbXT4oW2NdKSA9PT0gbmV3IER5bmFtaWNBcnJheShuZXcgVWludE48NTEyPihjKSkuYnl0ZXMpCiAgICBpbnRjXzEgLy8gMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtNQogICAgbGVuCiAgICBpbnRjXzIgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyA2NAogICAgYnplcm8KICAgIGZyYW1lX2RpZyAtNQogICAgYnwKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBsZW4KICAgIGludGNfMiAvLyA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDY0CiAgICBiemVybwogICAgZnJhbWVfZGlnIC01CiAgICBifAogICAgaW50Y18xIC8vIDEKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo0OQogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQ8Ynl0ZXNbXT4oW2RdKSA9PT0gbmV3IER5bmFtaWNBcnJheShuZXcgRHluYW1pY0J5dGVzKGQpKS5ieXRlcykKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC00CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgaW50Y18zIC8vIDIKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBpbnRjXzEgLy8gMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGludGNfMyAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo1MAogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQ8c3RyaW5nW10+KFtlXSkgPT09IG5ldyBEeW5hbWljQXJyYXkobmV3IFN0cihlKSkuYnl0ZXMpCiAgICBpbnRjXzEgLy8gMQogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtMwogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGludGNfMyAvLyAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgaW50Y18xIC8vIDEKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBpbnRjXzMgLy8gMgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NTEKICAgIC8vIGFzc2VydChlbmNvZGVBcmM0PEFkZHJlc3NbXT4oW2ZdKSA9PT0gbmV3IER5bmFtaWNBcnJheShmKS5ieXRlcykKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo1MgogICAgLy8gYXNzZXJ0KGVuY29kZUFyYzQ8Ynl0ZXM8MTI+W10+KFtnXSkgPT09IG5ldyBEeW5hbWljQXJyYXkobmV3IFN0YXRpY0J5dGVzKGcpKS5ieXRlcykKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NTQKICAgIC8vIGFzc2VydChhcmM0RW5jb2RlZExlbmd0aDx1aW50NjQ+KCkgPT09IDgpCiAgICBwdXNoaW50IDggLy8gOAogICAgZHVwCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NTUKICAgIC8vIGFzc2VydChhcmM0RW5jb2RlZExlbmd0aDxib29sZWFuPigpID09PSAxKQogICAgaW50Y18xIC8vIDEKICAgIGR1cAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjU2CiAgICAvLyBhc3NlcnQoYXJjNEVuY29kZWRMZW5ndGg8VWludE48NTEyPj4oKSA9PT0gNjQpCiAgICBpbnRjXzIgLy8gNjQKICAgIGR1cAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjU3CiAgICAvLyBhc3NlcnQoYXJjNEVuY29kZWRMZW5ndGg8W3VpbnQ2NCwgdWludDY0LCBib29sZWFuXT4oKSA9PT0gMTcpCiAgICBwdXNoaW50IDE3IC8vIDE3CiAgICBkdXAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo1OAogICAgLy8gYXNzZXJ0KGFyYzRFbmNvZGVkTGVuZ3RoPFt1aW50NjQsIHVpbnQ2NCwgYm9vbGVhbiwgYm9vbGVhbl0+KCkgPT09IDE3KQogICAgcHVzaGludCAxNyAvLyAxNwogICAgZHVwCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NTkKICAgIC8vIGFzc2VydChhcmM0RW5jb2RlZExlbmd0aDxbU3RhdGljQXJyYXk8Qm9vbCwgMTA+LCBib29sZWFuLCBib29sZWFuXT4oKSA9PT0gMykKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBkdXAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo2MS02MwogICAgLy8gYXJjNEVuY29kZWRMZW5ndGg8CiAgICAvLyAgIFtbYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbl0sIGJvb2xlYW4sIGJvb2xlYW5dCiAgICAvLyA+KCkgPT09IDMsCiAgICBwdXNoaW50IDMgLy8gMwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjYzCiAgICAvLyA+KCkgPT09IDMsCiAgICBkdXAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo2MS02MwogICAgLy8gYXJjNEVuY29kZWRMZW5ndGg8CiAgICAvLyAgIFtbYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbl0sIGJvb2xlYW4sIGJvb2xlYW5dCiAgICAvLyA+KCkgPT09IDMsCiAgICA9PQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjYwLTY0CiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIGFyYzRFbmNvZGVkTGVuZ3RoPAogICAgLy8gICAgIFtbYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbl0sIGJvb2xlYW4sIGJvb2xlYW5dCiAgICAvLyAgID4oKSA9PT0gMywKICAgIC8vICkKICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjY1CiAgICAvLyBhc3NlcnQoYXJjNEVuY29kZWRMZW5ndGg8dHlwZW9mIGc+KCkgPT09IDEyKQogICAgcHVzaGludCAxMiAvLyAxMgogICAgZHVwCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6NjYKICAgIC8vIGFzc2VydChhcmM0RW5jb2RlZExlbmd0aDxTdGF0aWNNdXRhYmxlT2JqZWN0PigpID09PSAyMCkKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIGR1cAogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjpBcmM0RW5jb2RlRGVjb2RlLnRlc3REZWNvZGluZyhhOiB1aW50NjQsIGFfYnl0ZXM6IGJ5dGVzLCBiOiB1aW50NjQsIGJfYnl0ZXM6IGJ5dGVzLCBjOiBieXRlcywgY19ieXRlczogYnl0ZXMsIGQ6IGJ5dGVzLCBkX2J5dGVzOiBieXRlcywgZTogYnl0ZXMsIGVfYnl0ZXM6IGJ5dGVzLCBmOiBieXRlcywgZl9ieXRlczogYnl0ZXMsIGc6IGJ5dGVzLCBnX2J5dGVzOiBieXRlcykgLT4gdm9pZDoKdGVzdERlY29kaW5nOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjY5LTg0CiAgICAvLyB0ZXN0RGVjb2RpbmcoCiAgICAvLyAgIGE6IHVpbnQ2NCwKICAgIC8vICAgYV9ieXRlczogYnl0ZXMsCiAgICAvLyAgIGI6IGJvb2xlYW4sCiAgICAvLyAgIGJfYnl0ZXM6IGJ5dGVzLAogICAgLy8gICBjOiBiaWd1aW50LAogICAgLy8gICBjX2J5dGVzOiBieXRlcywKICAgIC8vICAgZDogc3RyaW5nLAogICAgLy8gICBkX2J5dGVzOiBieXRlcywKICAgIC8vICAgZTogVGVzdE9iaiwKICAgIC8vICAgZV9ieXRlczogYnl0ZXMsCiAgICAvLyAgIGY6IEFkZHJlc3MsCiAgICAvLyAgIGZfYnl0ZXM6IGJ5dGVzLAogICAgLy8gICBnOiBieXRlczwxMj4sCiAgICAvLyAgIGdfYnl0ZXM6IGJ5dGVzLAogICAgLy8gKSB7CiAgICBwcm90byAxNCAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwCgp0ZXN0RGVjb2RpbmdfYmxvY2tAMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo4NQogICAgLy8gYXNzZXJ0KGRlY29kZUFyYzQ8dWludDY0PihhX2J5dGVzKSA9PT0gYSkKICAgIGZyYW1lX2RpZyAtMTMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMTQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo4NgogICAgLy8gYXNzZXJ0KGRlY29kZUFyYzQ8Ym9vbGVhbj4oYl9ieXRlcykgPT09IGIpCiAgICBmcmFtZV9kaWcgLTExCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBmcmFtZV9kaWcgLTEyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6ODcKICAgIC8vIGFzc2VydChkZWNvZGVBcmM0PGJpZ3VpbnQ+KGNfYnl0ZXMpID09PSBjKQogICAgZnJhbWVfZGlnIC05CiAgICBmcmFtZV9kaWcgLTEwCiAgICBiPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjg4CiAgICAvLyBhc3NlcnQoZGVjb2RlQXJjNDxzdHJpbmc+KGRfYnl0ZXMpID09PSBkKQogICAgZnJhbWVfZGlnIC03CiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIC04CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6ODkKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8VGVzdE9iaj4oZV9ieXRlcyksIGUpCiAgICBmcmFtZV9kaWcgLTUKICAgIGludGNfMCAvLyAwCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdDMKICAgIGZyYW1lX2RpZyAtNgogICAgaW50Y18wIC8vIDAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0MwogICAgPT0KICAgIGJ6IHRlc3REZWNvZGluZ19ib29sX2ZhbHNlQDMKCnRlc3REZWNvZGluZ19hbmRfY29udGRAMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo4OQogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxUZXN0T2JqPihlX2J5dGVzKSwgZSkKICAgIGZyYW1lX2RpZyAtNQogICAgZHVwCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50MTYKICAgIHN3YXAKICAgIGR1cAogICAgbGVuCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZnJhbWVfZGlnIC02CiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAtNgogICAgbGVuCiAgICBmcmFtZV9kaWcgLTYKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICA9PQogICAgYnogdGVzdERlY29kaW5nX2Jvb2xfZmFsc2VAMwoKdGVzdERlY29kaW5nX2Jvb2xfdHJ1ZUAyOgogICAgaW50Y18xIC8vIDEKCnRlc3REZWNvZGluZ19ib29sX21lcmdlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6ODkKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8VGVzdE9iaj4oZV9ieXRlcyksIGUpCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjkxCiAgICAvLyBjb25zdCBsZW5QcmVmaXggPSBpdG9iKDEpLnNsaWNlKDYsIDgpCiAgICBpbnRjXzEgLy8gMQogICAgaXRvYgogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgNiAvLyA2CiAgICBkaWcgMQogICAgPj0KICAgIHB1c2hpbnQgNiAvLyA2CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIHN3YXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBkaWcgMQogICAgPj0KICAgIHB1c2hpbnQgOCAvLyA4CiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjkyCiAgICAvLyBjb25zdCBvZmZzZXRIZWFkZXIgPSBpdG9iKDIpLnNsaWNlKDYsIDgpCiAgICBpbnRjXzMgLy8gMgogICAgaXRvYgogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgNiAvLyA2CiAgICBkaWcgMQogICAgPj0KICAgIHB1c2hpbnQgNiAvLyA2CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIHN3YXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBkaWcgMQogICAgPj0KICAgIHB1c2hpbnQgOCAvLyA4CiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5MwogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDx1aW50NjRbXT4obGVuUHJlZml4LmNvbmNhdChhX2J5dGVzKSksIFthXSwgJ0FycmF5IG9mIHVpbnQ2NCBtYXRjaGVzJykKICAgIGZyYW1lX2RpZyAtMTMKICAgIGNvbmNhdAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IHRlc3REZWNvZGluZ19ib29sX2ZhbHNlQDcKCnRlc3REZWNvZGluZ19hbmRfY29udGRANToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5MwogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDx1aW50NjRbXT4obGVuUHJlZml4LmNvbmNhdChhX2J5dGVzKSksIFthXSwgJ0FycmF5IG9mIHVpbnQ2NCBtYXRjaGVzJykKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTEzCiAgICBjb25jYXQKICAgIGV4dHJhY3QgMiAwCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGludCA4IC8vIDgKICAgICoKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMTQKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUA3Cgp0ZXN0RGVjb2RpbmdfYm9vbF90cnVlQDY6CiAgICBpbnRjXzEgLy8gMQoKdGVzdERlY29kaW5nX2Jvb2xfbWVyZ2VAODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5MwogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDx1aW50NjRbXT4obGVuUHJlZml4LmNvbmNhdChhX2J5dGVzKSksIFthXSwgJ0FycmF5IG9mIHVpbnQ2NCBtYXRjaGVzJykKICAgIGFzc2VydCAvLyBBcnJheSBvZiB1aW50NjQgbWF0Y2hlcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjk0CiAgICAvLyBhc3NlcnRNYXRjaChkZWNvZGVBcmM0PGJvb2xlYW5bXT4obGVuUHJlZml4LmNvbmNhdChiX2J5dGVzKSksIFtiXSwgJ0FycmF5IG9mIGJvb2xlYW4gbWF0Y2hlcycpCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIC0xMQogICAgY29uY2F0CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYnogdGVzdERlY29kaW5nX2Jvb2xfZmFsc2VAMTEKCnRlc3REZWNvZGluZ19hbmRfY29udGRAOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5NAogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxib29sZWFuW10+KGxlblByZWZpeC5jb25jYXQoYl9ieXRlcykpLCBbYl0sICdBcnJheSBvZiBib29sZWFuIG1hdGNoZXMnKQogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAtMTEKICAgIGNvbmNhdAogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAwCiAgICA+CiAgICBhc3NlcnQgLy8gaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGV4dHJhY3QgMiAwCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBmcmFtZV9kaWcgLTEyCiAgICA9PQogICAgYnogdGVzdERlY29kaW5nX2Jvb2xfZmFsc2VAMTEKCnRlc3REZWNvZGluZ19ib29sX3RydWVAMTA6CiAgICBpbnRjXzEgLy8gMQoKdGVzdERlY29kaW5nX2Jvb2xfbWVyZ2VAMTI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6OTQKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8Ym9vbGVhbltdPihsZW5QcmVmaXguY29uY2F0KGJfYnl0ZXMpKSwgW2JdLCAnQXJyYXkgb2YgYm9vbGVhbiBtYXRjaGVzJykKICAgIGFzc2VydCAvLyBBcnJheSBvZiBib29sZWFuIG1hdGNoZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5NQogICAgLy8gbG9nKGxlblByZWZpeC5jb25jYXQoY19ieXRlcykpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBmcmFtZV9kaWcgLTkKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6OTYKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8YmlndWludFtdPihsZW5QcmVmaXguY29uY2F0KGNfYnl0ZXMpKSwgW2NdLCAnQXJyYXkgb2YgYmlndWludCBtYXRjaGVzJykKICAgIGZyYW1lX2RpZyAtOQogICAgY29uY2F0CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYnogdGVzdERlY29kaW5nX2Jvb2xfZmFsc2VAMTUKCnRlc3REZWNvZGluZ19hbmRfY29udGRAMTM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6OTYKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8YmlndWludFtdPihsZW5QcmVmaXguY29uY2F0KGNfYnl0ZXMpKSwgW2NdLCAnQXJyYXkgb2YgYmlndWludCBtYXRjaGVzJykKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTkKICAgIGNvbmNhdAogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gNjQKICAgICoKICAgIGludGNfMiAvLyA2NAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTEwCiAgICBiPT0KICAgIGJ6IHRlc3REZWNvZGluZ19ib29sX2ZhbHNlQDE1Cgp0ZXN0RGVjb2RpbmdfYm9vbF90cnVlQDE0OgogICAgaW50Y18xIC8vIDEKCnRlc3REZWNvZGluZ19ib29sX21lcmdlQDE2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjk2CiAgICAvLyBhc3NlcnRNYXRjaChkZWNvZGVBcmM0PGJpZ3VpbnRbXT4obGVuUHJlZml4LmNvbmNhdChjX2J5dGVzKSksIFtjXSwgJ0FycmF5IG9mIGJpZ3VpbnQgbWF0Y2hlcycpCiAgICBhc3NlcnQgLy8gQXJyYXkgb2YgYmlndWludCBtYXRjaGVzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6OTcKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8c3RyaW5nW10+KEJ5dGVzYCR7bGVuUHJlZml4fSR7b2Zmc2V0SGVhZGVyfSR7ZF9ieXRlc31gKSwgW2RdLCAnQXJyYXkgb2Ygc3RyaW5nIG1hdGNoZXMnKQogICAgYnl0ZWNfMCAvLyAiIgogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC03CiAgICBjb25jYXQKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAxOQoKdGVzdERlY29kaW5nX2FuZF9jb250ZEAxNzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5NwogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxzdHJpbmdbXT4oQnl0ZXNgJHtsZW5QcmVmaXh9JHtvZmZzZXRIZWFkZXJ9JHtkX2J5dGVzfWApLCBbZF0sICdBcnJheSBvZiBzdHJpbmcgbWF0Y2hlcycpCiAgICBieXRlY18wIC8vICIiCiAgICBmcmFtZV9kaWcgMAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTcKICAgIGNvbmNhdAogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgc3dhcAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMAogICAgPgogICAgYXNzZXJ0IC8vIGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gMAogICAgaW50Y18zIC8vIDIKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZHVwMgogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMSAvLyAxCiAgICAqCiAgICBpbnRjXzMgLy8gMgogICAgKwogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgZXh0cmFjdDMKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgLTgKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAxOQoKdGVzdERlY29kaW5nX2Jvb2xfdHJ1ZUAxODoKICAgIGludGNfMSAvLyAxCgp0ZXN0RGVjb2RpbmdfYm9vbF9tZXJnZUAyMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5NwogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxzdHJpbmdbXT4oQnl0ZXNgJHtsZW5QcmVmaXh9JHtvZmZzZXRIZWFkZXJ9JHtkX2J5dGVzfWApLCBbZF0sICdBcnJheSBvZiBzdHJpbmcgbWF0Y2hlcycpCiAgICBhc3NlcnQgLy8gQXJyYXkgb2Ygc3RyaW5nIG1hdGNoZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5OQogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxUZXN0T2JqW10+KEJ5dGVzYCR7bGVuUHJlZml4fSR7b2Zmc2V0SGVhZGVyfSR7ZV9ieXRlc31gKSwgW2VdLCAnQXJyYXkgb2Ygc3RydWN0IG1hdGNoZXMnKQogICAgYnl0ZWNfMCAvLyAiIgogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAyNAoKdGVzdERlY29kaW5nX2FuZF9jb250ZEAyMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5OQogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxUZXN0T2JqW10+KEJ5dGVzYCR7bGVuUHJlZml4fSR7b2Zmc2V0SGVhZGVyfSR7ZV9ieXRlc31gKSwgW2VdLCAnQXJyYXkgb2Ygc3RydWN0IG1hdGNoZXMnKQogICAgYnl0ZWNfMCAvLyAiIgogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIHN3YXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgc3dhcAogICAgaW50Y18wIC8vIDAKICAgIGludGNfMyAvLyAyCiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgZXh0cmFjdF91aW50MTYKICAgIGNvdmVyIDIKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgdW5jb3ZlciAyCiAgICBkaWcgMQogICAgLSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGNvdmVyIDIKICAgIGRpZyAxCiAgICBsZW4KICAgIGNvdmVyIDIKICAgIGludGNfMyAvLyAyCiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgZXh0cmFjdF91aW50MTYKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgdW5jb3ZlciAzCiAgICBzZWxlY3QKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3QzCiAgICBmcmFtZV9kaWcgLTYKICAgIGludGNfMCAvLyAwCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdDMKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAyNAoKdGVzdERlY29kaW5nX2FuZF9jb250ZEAyMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5OQogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxUZXN0T2JqW10+KEJ5dGVzYCR7bGVuUHJlZml4fSR7b2Zmc2V0SGVhZGVyfSR7ZV9ieXRlc31gKSwgW2VdLCAnQXJyYXkgb2Ygc3RydWN0IG1hdGNoZXMnKQogICAgYnl0ZWNfMCAvLyAiIgogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIHN3YXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgc3dhcAogICAgaW50Y18wIC8vIDAKICAgIGludGNfMyAvLyAyCiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgZXh0cmFjdF91aW50MTYKICAgIGNvdmVyIDIKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgdW5jb3ZlciAyCiAgICBkaWcgMQogICAgLSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGNvdmVyIDIKICAgIGRpZyAxCiAgICBsZW4KICAgIGNvdmVyIDIKICAgIGludGNfMyAvLyAyCiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgZXh0cmFjdF91aW50MTYKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgdW5jb3ZlciAzCiAgICBzZWxlY3QKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQxNgogICAgc3dhcAogICAgZHVwCiAgICBsZW4KICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBmcmFtZV9kaWcgLTYKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC02CiAgICBsZW4KICAgIGZyYW1lX2RpZyAtNgogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAyNAoKdGVzdERlY29kaW5nX2Jvb2xfdHJ1ZUAyMzoKICAgIGludGNfMSAvLyAxCgp0ZXN0RGVjb2RpbmdfYm9vbF9tZXJnZUAyNToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czo5OQogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxUZXN0T2JqW10+KEJ5dGVzYCR7bGVuUHJlZml4fSR7b2Zmc2V0SGVhZGVyfSR7ZV9ieXRlc31gKSwgW2VdLCAnQXJyYXkgb2Ygc3RydWN0IG1hdGNoZXMnKQogICAgYXNzZXJ0IC8vIEFycmF5IG9mIHN0cnVjdCBtYXRjaGVzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6MTAwCiAgICAvLyBhc3NlcnRNYXRjaChkZWNvZGVBcmM0PEFkZHJlc3NbXT4oQnl0ZXNgJHtsZW5QcmVmaXh9JHtmX2J5dGVzfWApLCBbZl0sICdBcnJheSBvZiBhZGRyZXNzIG1hdGNoZXMnKQogICAgYnl0ZWNfMCAvLyAiIgogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiB0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAyOAoKdGVzdERlY29kaW5nX2FuZF9jb250ZEAyNjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoxMDAKICAgIC8vIGFzc2VydE1hdGNoKGRlY29kZUFyYzQ8QWRkcmVzc1tdPihCeXRlc2Ake2xlblByZWZpeH0ke2ZfYnl0ZXN9YCksIFtmXSwgJ0FycmF5IG9mIGFkZHJlc3MgbWF0Y2hlcycpCiAgICBieXRlY18wIC8vICIiCiAgICBmcmFtZV9kaWcgMAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZXh0cmFjdCAyIDAKICAgIGludGNfMCAvLyAwCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICAqCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtNAogICAgPT0KICAgIGJ6IHRlc3REZWNvZGluZ19ib29sX2ZhbHNlQDI4Cgp0ZXN0RGVjb2RpbmdfYm9vbF90cnVlQDI3OgogICAgaW50Y18xIC8vIDEKCnRlc3REZWNvZGluZ19ib29sX21lcmdlQDI5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2FyYzQtZW5jb2RlLWRlY29kZS5hbGdvLnRzOjEwMAogICAgLy8gYXNzZXJ0TWF0Y2goZGVjb2RlQXJjNDxBZGRyZXNzW10+KEJ5dGVzYCR7bGVuUHJlZml4fSR7Zl9ieXRlc31gKSwgW2ZdLCAnQXJyYXkgb2YgYWRkcmVzcyBtYXRjaGVzJykKICAgIGFzc2VydCAvLyBBcnJheSBvZiBhZGRyZXNzIG1hdGNoZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hcmM0LWVuY29kZS1kZWNvZGUuYWxnby50czoxMDIKICAgIC8vIGFzc2VydChkZWNvZGVBcmM0PGJ5dGVzPDEyPj4oZ19ieXRlcykgPT09IGcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtMgogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgp0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAyODoKICAgIGludGNfMCAvLyAwCiAgICBiIHRlc3REZWNvZGluZ19ib29sX21lcmdlQDI5Cgp0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAyNDoKICAgIGludGNfMCAvLyAwCiAgICBiIHRlc3REZWNvZGluZ19ib29sX21lcmdlQDI1Cgp0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAxOToKICAgIGludGNfMCAvLyAwCiAgICBiIHRlc3REZWNvZGluZ19ib29sX21lcmdlQDIwCgp0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAxNToKICAgIGludGNfMCAvLyAwCiAgICBiIHRlc3REZWNvZGluZ19ib29sX21lcmdlQDE2Cgp0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUAxMToKICAgIGludGNfMCAvLyAwCiAgICBiIHRlc3REZWNvZGluZ19ib29sX21lcmdlQDEyCgp0ZXN0RGVjb2RpbmdfYm9vbF9mYWxzZUA3OgogICAgaW50Y18wIC8vIDAKICAgIGIgdGVzdERlY29kaW5nX2Jvb2xfbWVyZ2VAOAoKdGVzdERlY29kaW5nX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIHRlc3REZWNvZGluZ19ib29sX21lcmdlQDQKCgovLyB0ZXN0cy9hcHByb3ZhbHMvYXJjNC1lbmNvZGUtZGVjb2RlLmFsZ28udHM6OkFyYzRFbmNvZGVEZWNvZGUuX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlKCkgLT4gdm9pZDoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlOgoKX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlX2Jsb2NrQDA6CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}