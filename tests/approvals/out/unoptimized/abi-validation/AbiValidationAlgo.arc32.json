{
    "hints": {
        "withValidation(byte[32])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withoutValidation(byte[32])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "defaultValidation(byte[32])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "manualValidationInConvert(byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "manualValidationAfterConvert(byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AbiValidationAlgo",
        "methods": [
            {
                "name": "withValidation",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "withoutValidation",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "defaultValidation",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "manualValidationInConvert",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "rawBytes"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "manualValidationAfterConvert",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "rawBytes"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}