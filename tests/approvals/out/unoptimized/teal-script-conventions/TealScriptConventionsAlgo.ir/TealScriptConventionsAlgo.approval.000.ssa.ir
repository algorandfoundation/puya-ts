main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "noMoreThanks(uint64)uint64" => block@2, method "createApplication(byte[])void" => block@3, method "setLocal(string)void" => block@4, method "optInToApplication()void" => block@5, method "updateApplication()void" => block@6, * => block@7}
    block@2: // noMoreThanks_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 CloseOut)
        (assert tmp%4#0) // OnCompletion is not CloseOut
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: uint64 = tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.closeOutOfApplication(tmp%7#0)
        let tmp%9#0: Encoded(uint64) = bytes_encode<uint64>(tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        return 1u
    block@3: // createApplication_route_L12
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: uint64 = (shl 1u tmp%11#0)
        let tmp%13#0: uint64 = (& tmp%12#0 33u)
        (assert tmp%13#0) // OnCompletion is not one of NoOp, DeleteApplication
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        (assert tmp%15#0) // can only call when creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%16#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.createApplication(tmp%16#0)
        return 1u
    block@4: // setLocal_route_L17
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%21#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.setLocal(tmp%21#0)
        return 1u
    block@5: // optInToApplication_route_L23
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 OptIn)
        (assert tmp%23#0) // OnCompletion is not OptIn
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.optInToApplication()
        return 1u
    block@6: // updateApplication_route_L25
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (== tmp%26#0 UpdateApplication)
        (assert tmp%27#0) // OnCompletion is not UpdateApplication
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (!= tmp%28#0 0u)
        (assert tmp%29#0) // can only call when not creating
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.updateApplication()
        return 1u
    block@7: // switch_case_default_L5
        goto block@8
    block@8: // switch_case_next_L5
        goto block@13
    block@9: // bare_routing_L5
        let tmp%30#0: uint64 = (txn OnCompletion)
        switch tmp%30#0 {5u => block@10, * => block@11}
    block@10: // deleteApplication_L20
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.deleteApplication()
        return 1u
    block@11: // switch_case_default_L5
        goto block@12
    block@12: // switch_case_next_L5
        goto block@13
    block@13: // after_if_else_L5
        return 0u

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.closeOutOfApplication(arg: uint64) -> uint64:
    block@0: // L8
        return arg#0

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.createApplication(value: bytes) -> void:
    block@0: // L12
        (app_global_put "global" value#0)
        return 

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.setLocal(value: string) -> void:
    block@0: // L17
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 "local" value#0)
        return 

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.deleteApplication() -> void:
    block@0: // L20
        return 

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.optInToApplication() -> void:
    block@0: // L23
        return 

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.updateApplication() -> void:
    block@0: // L25
        return 