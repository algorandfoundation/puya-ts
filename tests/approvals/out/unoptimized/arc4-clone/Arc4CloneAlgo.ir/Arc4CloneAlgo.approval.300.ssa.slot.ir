main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L16
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@11
    block@2: // abi_routing_L16
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@9
    block@3: // call_NoOp_L16
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "aliasing(uint64[])void" => block@4, method "receive(uint64[])void" => block@5, method "receiveReadonly(uint64[])void" => block@6, method "structReturn((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@7, * => block@8}
    block@4: // aliasing_route_L17
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing[routing]()
        goto block@8
    block@5: // receive_route_L49
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive[routing]()
        goto block@8
    block@6: // receiveReadonly_route_L51
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly[routing]()
        goto block@8
    block@7: // structReturn_route_L53
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn[routing]()
        goto block@8
    block@8: // switch_case_next_L16
        goto block@10
    block@9: // create_NoOp_L16
        goto block@10
    block@10: // after_if_else_L16
        goto block@12
    block@11: // __algots__.defaultCreate_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.__algots__.defaultCreate()
        exit 1u
    block@12: // after_if_else_L16
        exit 0u
    block@13: // after_inlined_tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine tests/approvals/arc4-clone.algo.ts::echo(s: Encoded((len+uint8[]),uint8)) -> <Encoded((len+uint8[]),uint8), Encoded((len+uint8[]),uint8)>:
    block@0: // L60
        return s#0 s#0

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing[routing]() -> void:
    block@0: // L17
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = tmp%0#0
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing(as_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive[routing]() -> void:
    block@0: // L49
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = tmp%0#0
        let receive%0#0: Encoded(len+uint64[]) = tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive(as_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly[routing]() -> void:
    block@0: // L51
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = tmp%0#0
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly(as_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn[routing]() -> void:
    block@0: // L53
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 12u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
        let substring3%0#0: bytes = (substring3 tmp%0#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 12u add%0#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%0#0 10u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
        let substring3%1#0: bytes = (substring3 tmp%0#0 extract_uint16%1#0 tuple_len%0#0)
        let tuple_len%1#0: uint64 = (len substring3%1#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 substring3%1#0 0u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#0 3u)
        (assert eq%2#0) // invalid tail pointer at index 0 of ((len+uint8[]),uint8)
        let substring3%2#0: bytes = (substring3 substring3%1#0 extract_uint16%2#0 tuple_len%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 substring3%2#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%2#0: uint64 = (+ mul%1#0 2u)
        let add%3#0: uint64 = (+ 3u add%2#0)
        let add%4#0: uint64 = (+ add%1#0 add%3#0)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%3#0: bool = (== len%0#0 add%4#0)
        (assert eq%3#0) // invalid number of bytes for TopLevelStruct
        let as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = tmp%0#0
        let tmp%1#0: Encoded((len+uint8[]),uint8) = tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn(as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing(mutable: Encoded(len+uint64[])) -> void:
    block@0: // L17
        let z#0: Encoded(len+uint64[]) = mutable#0
        let receive%0#0: Encoded(len+uint64[]) = tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive(z#0)
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly(mutable#0)
        return 

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive(mutable: Encoded(len+uint64[])) -> Encoded(len+uint64[]):
    block@0: // L49
        let mutable%out#0: Encoded(len+uint64[]) = mutable#0
        return mutable%out#0

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly(a: Encoded(len+uint64[])) -> void:
    block@0: // L51
        return 

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))) -> Encoded((len+uint8[]),uint8):
    block@0: // L53
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#0: uint64 = (len arg#0)
        let aggregate%substring3%0#0: bytes = (substring3 arg#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%0#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%0#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%1#0: uint64 = (len arg#0)
        let aggregate%substring3%1#0: bytes = (substring3 arg#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let tuple_item%1#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%1#0
        let (echo%0#0: Encoded((len+uint8[]),uint8), echo%1#0: Encoded((len+uint8[]),uint8)) = tests/approvals/arc4-clone.algo.ts::echo(tuple_item%1#0)
        let tmp%0#0: bool = (== tuple_item%0#0 echo%0#0)
        (assert tmp%0#0) // this won't error
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%2#0: uint64 = (len arg#0)
        let aggregate%substring3%2#0: bytes = (substring3 arg#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tuple_item%2#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%2#0
        return tuple_item%2#0

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.__algots__.defaultCreate() -> void:
    block@0: // L16
        return 