{
    "hints": {
        "aliasing(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receive(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveReadonly(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "structReturn((uint64,string,(byte[],uint8)))(byte[],uint8)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                },
                "output": {
                    "name": "SharedStruct",
                    "elements": [
                        [
                            "foo",
                            "byte[]"
                        ],
                        [
                            "bar",
                            "uint8"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Arc4CloneAlgo",
        "methods": [
            {
                "name": "aliasing",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "mutable"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "receive",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "mutable"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "receiveReadonly",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "structReturn",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],uint8)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}