#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 10
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@11
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@9
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x398e270d // method "aliasing(uint64[])void"
    pushbytes 0x80acbe10 // method "receive(uint64[])void"
    pushbytes 0xe213f5b6 // method "receiveReadonly(uint64[])void"
    pushbytes 0x63e40e8d // method "structReturn((uint64,string,(byte[],uint8)))(byte[],uint8)"
    uncover 4
    match main_aliasing_route@4 main_receive_route@5 main_receiveReadonly_route@6 main_structReturn_route@7
    b main_switch_case_next@8

main_switch_case_next@8:
    b main_after_if_else@10

main_after_if_else@10:
    b main_after_if_else@12

main_after_if_else@12:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    err

main_structReturn_route@7:
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    callsub structReturn
    b main_switch_case_next@8

main_receiveReadonly_route@6:
    // tests/approvals/arc4-clone.algo.ts:51
    // receiveReadonly(a: readonly uint64[]) {}
    callsub receiveReadonly
    b main_switch_case_next@8

main_receive_route@5:
    // tests/approvals/arc4-clone.algo.ts:49
    // receive(mutable: uint64[]) {}
    callsub receive
    b main_switch_case_next@8

main_aliasing_route@4:
    // tests/approvals/arc4-clone.algo.ts:17
    // aliasing(mutable: uint64[]) {
    callsub aliasing
    b main_switch_case_next@8

main_create_NoOp@9:
    b main_after_if_else@10

main___algots__.defaultCreate@11:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/arc4-clone.algo.ts::echo(s: bytes) -> bytes, bytes:
echo:
    // tests/approvals/arc4-clone.algo.ts:60
    // function echo(s: SharedStruct): SharedStruct {
    proto 1 2
    b echo_block@0

echo_block@0:
    // tests/approvals/arc4-clone.algo.ts:61
    // return s
    frame_dig -1
    frame_dig -1
    retsub


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing[routing]() -> void:
aliasing:
    b aliasing_block@0

aliasing_block@0:
    // tests/approvals/arc4-clone.algo.ts:17
    // aliasing(mutable: uint64[]) {
    txna ApplicationArgs 1
    callsub tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing
    intc_1 // 1
    return


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive[routing]() -> void:
receive:
    b receive_block@0

receive_block@0:
    // tests/approvals/arc4-clone.algo.ts:49
    // receive(mutable: uint64[]) {}
    txna ApplicationArgs 1
    callsub tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive
    intc_1 // 1
    return


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly[routing]() -> void:
receiveReadonly:
    b receiveReadonly_block@0

receiveReadonly_block@0:
    // tests/approvals/arc4-clone.algo.ts:51
    // receiveReadonly(a: readonly uint64[]) {}
    txna ApplicationArgs 1
    callsub tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly
    intc_1 // 1
    return


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn[routing]() -> void:
structReturn:
    b structReturn_block@0

structReturn_block@0:
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    txna ApplicationArgs 1
    callsub tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing(mutable: bytes) -> void:
tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing:
    // tests/approvals/arc4-clone.algo.ts:17
    // aliasing(mutable: uint64[]) {
    proto 1 0
    b tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing_block@0

tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing_block@0:
    // tests/approvals/arc4-clone.algo.ts:30
    // this.receive((z = clone(mutable)))
    frame_dig -1
    callsub tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive
    // tests/approvals/arc4-clone.algo.ts:32
    // this.receiveReadonly(mutable)
    frame_dig -1
    callsub tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly
    retsub


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive(mutable: bytes) -> bytes:
tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive:
    // tests/approvals/arc4-clone.algo.ts:49
    // receive(mutable: uint64[]) {}
    proto 1 1
    b tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive_block@0

tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive_block@0:
    frame_dig -1
    retsub


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly(a: bytes) -> void:
tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly:
    // tests/approvals/arc4-clone.algo.ts:51
    // receiveReadonly(a: readonly uint64[]) {}
    proto 1 0
    b tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly_block@0

tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly_block@0:
    retsub


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn(arg: bytes) -> bytes:
tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn:
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    proto 1 1
    b tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn_block@0

tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn_block@0:
    // tests/approvals/arc4-clone.algo.ts:55
    // assert(arg.shared === echo(arg.shared), "this won't error")
    frame_dig -1
    intc_2 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    intc_2 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    callsub echo
    cover 2
    ==
    assert // this won't error
    // tests/approvals/arc4-clone.algo.ts:56
    // return arg.shared
    frame_dig -1
    intc_2 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    uncover 1
    retsub


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
