{
    "name": "Arc4CloneAlgo",
    "structs": {
        "SharedStruct": [
            {
                "name": "foo",
                "type": "byte[]"
            },
            {
                "name": "bar",
                "type": "uint8"
            }
        ],
        "TopLevelStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            },
            {
                "name": "shared",
                "type": "SharedStruct"
            }
        ]
    },
    "methods": [
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receive",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structReturn",
            "args": [
                {
                    "type": "(uint64,string,(byte[],uint8))",
                    "struct": "TopLevelStruct",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "(byte[],uint8)",
                "struct": "SharedStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        87,
                        119,
                        141,
                        165
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        232,
                        291
                    ],
                    "errorMessage": "Step cannot be zero"
                },
                {
                    "pc": [
                        205
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        92,
                        124,
                        146,
                        170
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        537
                    ],
                    "errorMessage": "this won't error"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAAIBCiYBACIoQgAAQgAAMRsiE0EAnkIAADYaAIAEOY4nDYAEgKy+EIAE4hP1toAEY+QOjU8EjgQAXgBGADAAEEIAAEIAAEIAACJFAUIAAEMxGSISRDEYIhNENhoBiAGOgAQVH3x1TwFQsCRFAUL/3zEZIhJEMRgiE0Q2GgGIAWckRQFC/8kxGSISRDEYIhNENhoBiAFIRQIkRQFC/7ExGSISRDEYIhNENhoBiADbJEUBQv+bMRkiTwGOAQAJQgAAQgAAQv+DMRgiEkSIAVokRQFC/3uKBAEoQgAAKIv+IwuL/CMLI0QiQgAAiwSLAwxBACJCAACL/YsEWYsCCBZXBgKLAU8BUIwBQgAAiwQjCIwEQv/Wi/0VjAKL/iMLjAAjRCKMBEIAAIsEiwAMQQAiQgAAi/+LBFmLAggWVwYCiwFPAVCMAUIAAIsEIwiMBEL/1ov8i/4IFlcGAosBUIv8IwuL/RWL/U8CTwJSUIv+IwuL/xWL/08CTwJSUIwAiYoBAkIAAIv/i/+JigEAQgAAi/+IAEqL/4gATiQWVwYCJBZQJBZXBgIjFlcGAlBPAVAkFlcGAoF7FlBOAUkiWU4CSRVOASNPAlIjFlcGAihPAVBPAlBPAk8CJE8DiP73iYoBAUIAAIv/iYoBAEIAAImKAQFCAACL/yVZi/8Vi/9PAk8CUov/JVmL/xWL/08CTwJSiP9rTgISRIv/JVmL/xWL/08CTwJSTwGJQgAAiQ==",
        "clear": "CkIAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}