#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 64 9223372036854775808
    bytecblock 0x151f7c75
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/const-literals.algo.ts:15
    // class ConstLiteralsAlgo extends Contract {
    txn NumAppArgs
    intc_1 // 0
    !=
    bz main___algots__.defaultCreate@13
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/const-literals.algo.ts:15
    // class ConstLiteralsAlgo extends Contract {
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    bz main_create_NoOp@11
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/const-literals.algo.ts:15
    // class ConstLiteralsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xffbc3914 // method "test()uint64"
    pushbytes 0x341a3794 // method "test2()uint64"
    pushbytes 0x73e5b0c7 // method "test3()uint64"
    pushbytes 0x5034266b // method "test4()uint64"
    pushbytes 0xaada8eee // method "test5()uint512"
    pushbytes 0x4e935b6e // method "test6()uint512"
    uncover 6
    match main_test_route@4 main_test2_route@5 main_test3_route@6 main_test4_route@7 main_test5_route@8 main_test6_route@9
    b main_switch_case_next@10

main_switch_case_next@10:
    b main_after_if_else@12

main_after_if_else@12:
    b main_after_if_else@14

main_after_if_else@14:
    // tests/approvals/const-literals.algo.ts:15
    // class ConstLiteralsAlgo extends Contract {
    err

main_test6_route@9:
    // tests/approvals/const-literals.algo.ts:41
    // test6(): biguint {
    callsub test6
    b main_switch_case_next@10

main_test5_route@8:
    // tests/approvals/const-literals.algo.ts:37
    // test5() {
    callsub test5
    b main_switch_case_next@10

main_test4_route@7:
    // tests/approvals/const-literals.algo.ts:32
    // test4(): uint64 {
    callsub test4
    b main_switch_case_next@10

main_test3_route@6:
    // tests/approvals/const-literals.algo.ts:25
    // test3(): uint64 {
    callsub test3
    b main_switch_case_next@10

main_test2_route@5:
    // tests/approvals/const-literals.algo.ts:20
    // test2() {
    callsub test2
    b main_switch_case_next@10

main_test_route@4:
    // tests/approvals/const-literals.algo.ts:16
    // test(): uint64 {
    callsub test
    b main_switch_case_next@10

main_create_NoOp@11:
    b main_after_if_else@12

main___algots__.defaultCreate@13:
    // tests/approvals/const-literals.algo.ts:15
    // class ConstLiteralsAlgo extends Contract {
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/const-literals.algo.ts:16
    // test(): uint64 {
    callsub tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test2[routing]() -> void:
test2:
    b test2_block@0

test2_block@0:
    // tests/approvals/const-literals.algo.ts:20
    // test2() {
    callsub tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test2
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test3[routing]() -> void:
test3:
    b test3_block@0

test3_block@0:
    // tests/approvals/const-literals.algo.ts:25
    // test3(): uint64 {
    callsub tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test3
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test4[routing]() -> void:
test4:
    b test4_block@0

test4_block@0:
    // tests/approvals/const-literals.algo.ts:32
    // test4(): uint64 {
    callsub tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test4
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test5[routing]() -> void:
test5:
    b test5_block@0

test5_block@0:
    // tests/approvals/const-literals.algo.ts:37
    // test5() {
    callsub tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test5
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test6[routing]() -> void:
test6:
    b test6_block@0

test6_block@0:
    // tests/approvals/const-literals.algo.ts:41
    // test6(): biguint {
    callsub tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test6
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test() -> uint64:
tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test:
    b tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test_block@0

tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test_block@0:
    // tests/approvals/const-literals.algo.ts:17
    // return x
    pushint 123 // 123
    retsub


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test2() -> uint64:
tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test2:
    b tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test2_block@0

tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test2_block@0:
    // tests/approvals/const-literals.algo.ts:22
    // return test
    pushint 4 // 4
    retsub


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test3() -> uint64:
tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test3:
    b tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test3_block@0

tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test3_block@0:
    // tests/approvals/const-literals.algo.ts:29
    // return x * y
    pushint 12 // 12
    retsub


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test4() -> uint64:
tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test4:
    b tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test4_block@0

tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test4_block@0:
    // tests/approvals/const-literals.algo.ts:33
    // assert(getBit(unsafeNumber, 63))
    intc_3 // 9223372036854775808
    pushint 63 // 63
    getbit
    assert
    // tests/approvals/const-literals.algo.ts:34
    // return unsafeNumber
    intc_3 // 9223372036854775808
    retsub


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test5() -> bytes:
tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test5:
    b tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test5_block@0

tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test5_block@0:
    // tests/approvals/const-literals.algo.ts:38
    // return BigUint(unsafeUint64)
    pushbytes 0x0100000000000000000000000000000000
    retsub


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test6() -> bytes:
tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test6:
    b tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test6_block@0

tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.test6_block@0:
    // tests/approvals/const-literals.algo.ts:42
    // return a
    pushbytes 0x010000000000000000000000000000000000000000000000000000000000000000
    retsub


// tests/approvals/const-literals.algo.ts::ConstLiteralsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
