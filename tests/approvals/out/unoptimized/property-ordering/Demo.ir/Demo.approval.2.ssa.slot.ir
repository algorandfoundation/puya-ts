main tests/approvals/property-ordering.algo.ts::Demo.approvalProgram:
    block@0: // L28
        tests/approvals/property-ordering.algo.ts::test_assign_from_literal(4u)
        tests/approvals/property-ordering.algo.ts::test_assign_from_var(3u, 4u)
        return 1u

subroutine tests/approvals/property-ordering.algo.ts::test_assign_from_var(x.a: uint64, x.b: uint64) -> void:
    block@0: // L7
        let tmp%0#0: bool = (!= x.a#0 x.b#0)
        (assert tmp%0#0) // For the purpose of this test, a should not equal b
        let obj.b#0: uint64 = x.b#0
        let obj.a#0: uint64 = x.a#0
        let val_as_bytes%0#0: bytes[8] = (itob x.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob x.b#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let xEncoded#0: bytes = encoded_tuple_buffer%2#0
        let val_as_bytes%2#0: bytes[8] = (itob obj.b#0)
        let val_as_bytes%3#0: bytes[8] = (itob obj.a#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let objEncoded#0: bytes = encoded_tuple_buffer%5#0
        let length%0#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%1#0: bytes = (substring3 objEncoded#0 bounded_index%0#0 length%0#0)
        let length%1#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%1#0)
        let bounded_index%1#0: uint64 = (select 0u length%1#0 is_out_of_bounds%1#0)
        let is_out_of_bounds%2#0: bool = (>= 8u length%1#0)
        let bounded_index%2#0: uint64 = (select 8u length%1#0 is_out_of_bounds%2#0)
        let tmp%2#0: bytes = (substring3 objEncoded#0 bounded_index%1#0 bounded_index%2#0)
        let tmp%3#0: bytes = (concat tmp%1#0 tmp%2#0)
        let tmp%4#0: bool = (== xEncoded#0 tmp%3#0)
        (assert tmp%4#0) // Encoded order should be swapped
        return 

subroutine tests/approvals/property-ordering.algo.ts::test_assign_from_literal(x: uint64) -> void:
    block@0: // L15
        let b#0: uint64 = (* x#0 2u)
        let obj.a#0: uint64 = b#0
        let obj.z#0: uint64 = b#0
        let tmp%0#0: uint64 = (* x#0 2u)
        let tmp%1#0: bool = (== obj.z#0 tmp%0#0)
        goto tmp%1#0 ? block@1 : block@3
    block@1: // and_contd_L21
        let tmp%2#0: uint64 = (* x#0 2u)
        let tmp%3#0: bool = (== obj.a#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@3
    block@2: // bool_true_L21
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L21
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L21
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        return 