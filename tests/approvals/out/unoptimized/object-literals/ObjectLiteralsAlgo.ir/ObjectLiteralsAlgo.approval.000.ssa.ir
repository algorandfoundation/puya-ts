main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@2, * => block@3}
    block@2: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.test[routing]()
        goto block@3
    block@3: // switch_case_next_L4
        goto block@5
    block@4: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L4
        exit 0u

subroutine tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.test[routing]() -> void:
    block@0: // L5
        tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.test()
        exit 1u

subroutine tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.test() -> void:
    block@0: // L5
        let i#0: uint64 = 0u
        let tmp%0#0: uint64 = (+ i#0 2u)
        let i#1: uint64 = tmp%0#0
        let (o1.k#0: uint64, o1.j#0: uint64, o1.i#0: uint64) = (i#1, i#1, i#0)
        let tmp%1#0: Encoded(uint64) = bytes_encode<(uint64)>(1u)
        let tmp%2#0: Encoded((uint64,uint64,uint64),(uint64)) = bytes_encode<((uint64,uint64,uint64),(uint64))>(o1.k#0, o1.j#0, o1.i#0, tmp%1#0)
        let o2#0: Encoded((uint64,uint64,uint64),(uint64)) = tmp%2#0
        let tmp%3#0: Encoded(uint64) = bytes_encode<(uint64)>(1u)
        let tmp%4#0: Encoded((uint64)) = bytes_encode<((uint64))>(tmp%3#0)
        let o3#0: Encoded((uint64)) = tmp%4#0
        return 

subroutine tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 