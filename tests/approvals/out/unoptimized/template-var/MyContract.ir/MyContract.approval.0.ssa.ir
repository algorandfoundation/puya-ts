main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__() -> bool:
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getInt()uint64" => block@2, method "getString()string" => block@3, method "getBytes()byte[]" => block@4, method "getAddress()address" => block@5, * => block@6}
    block@2: // getInt_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let to_encode%0#0: uint64 = tests/approvals/template-var.algo.ts::MyContract.getInt()
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%7#0)
        return 1u
    block@3: // getString_route_L12
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let to_encode%1#0: bytes = tests/approvals/template-var.algo.ts::MyContract.getString()
        let length%0#0: uint64 = (len to_encode%1#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%12#0)
        return 1u
    block@4: // getBytes_route_L16
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let to_encode%2#0: bytes = tests/approvals/template-var.algo.ts::MyContract.getBytes()
        let length%1#0: uint64 = (len to_encode%2#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%2#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%17#0)
        return 1u
    block@5: // getAddress_route_L20
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let tmp%22#0: bytes[32] = tests/approvals/template-var.algo.ts::MyContract.getAddress()
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        return 1u
    block@6: // switch_case_default_L7
        goto block@7
    block@7: // switch_case_next_L7
        goto block@12
    block@8: // bare_routing_L7
        let tmp%24#0: uint64 = (txn OnCompletion)
        switch tmp%24#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L7
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (== tmp%25#0 0u)
        (assert tmp%26#0) // can only call when creating
        tests/approvals/template-var.algo.ts::MyContract.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L7
        goto block@11
    block@11: // switch_case_next_L7
        goto block@12
    block@12: // after_if_else_L7
        return 0u

subroutine tests/approvals/template-var.algo.ts::MyContract.getInt() -> uint64:
    block@0: // L8
        return TemplateVar[uint64](TMPL_AN_INT)

subroutine tests/approvals/template-var.algo.ts::MyContract.getString() -> bytes:
    block@0: // L12
        return TemplateVar[bytes](TMPL_A_STRING)

subroutine tests/approvals/template-var.algo.ts::MyContract.getBytes() -> bytes:
    block@0: // L16
        return TemplateVar[bytes](TMPL_SOME_BYTES)

subroutine tests/approvals/template-var.algo.ts::MyContract.getAddress() -> bytes[32]:
    block@0: // L20
        return TemplateVar[bytes[32]](TMPL_AN_ADDRESS)

subroutine tests/approvals/template-var.algo.ts::MyContract.__algots__.defaultCreate() -> void:
    block@0: // L7
        return 