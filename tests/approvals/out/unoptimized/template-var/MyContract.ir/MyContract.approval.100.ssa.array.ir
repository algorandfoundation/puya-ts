main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L7
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getInt()uint64" => block@3, method "getString()string" => block@4, method "getBytes()byte[]" => block@5, method "getAddress()address" => block@6, * => block@7}
    block@3: // getInt_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = tests/approvals/template-var.algo.ts::MyContract.getInt()
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%8#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // getString_route_L12
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: string = tests/approvals/template-var.algo.ts::MyContract.getString()
        let aggregate%length%0#1: uint64 = (len tmp%14#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 tmp%14#0)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%15#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getBytes_route_L16
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let tmp%21#0: bytes = tests/approvals/template-var.algo.ts::MyContract.getBytes()
        let aggregate%length%1#1: uint64 = (len tmp%21#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 tmp%21#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let tmp%22#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        let tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // getAddress_route_L20
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        let tmp%28#0: Encoded(uint8[32]) = tests/approvals/template-var.algo.ts::MyContract.getAddress()
        let tmp%29#0: bytes = (concat 0x151f7c75 tmp%28#0)
        (log tmp%29#0)
        let tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@7: // switch_case_default_L7
        goto block@8
    block@8: // switch_case_next_L7
        goto block@13
    block@9: // bare_routing_L7
        let tmp%30#0: uint64 = (txn OnCompletion)
        switch tmp%30#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L7
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (== tmp%31#0 0u)
        (assert tmp%32#0) // can only call when creating
        tests/approvals/template-var.algo.ts::MyContract.__algots__.defaultCreate()
        let tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@11: // switch_case_default_L7
        goto block@12
    block@12: // switch_case_next_L7
        goto block@13
    block@13: // after_if_else_L7
        let tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#2 <- block@5, tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#3 <- block@6, tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#4 <- block@10, tests/approvals/template-var.algo.ts::MyContract.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/template-var.algo.ts::MyContract.getInt() -> uint64:
    block@0: // L8
        return TemplateVar[uint64](TMPL_AN_INT)

subroutine tests/approvals/template-var.algo.ts::MyContract.getString() -> string:
    block@0: // L12
        return TemplateVar[string](TMPL_A_STRING)

subroutine tests/approvals/template-var.algo.ts::MyContract.getBytes() -> bytes:
    block@0: // L16
        return TemplateVar[bytes](TMPL_SOME_BYTES)

subroutine tests/approvals/template-var.algo.ts::MyContract.getAddress() -> Encoded(uint8[32]):
    block@0: // L20
        return TemplateVar[Encoded(uint8[32])](TMPL_AN_ADDRESS)

subroutine tests/approvals/template-var.algo.ts::MyContract.__algots__.defaultCreate() -> void:
    block@0: // L7
        return 