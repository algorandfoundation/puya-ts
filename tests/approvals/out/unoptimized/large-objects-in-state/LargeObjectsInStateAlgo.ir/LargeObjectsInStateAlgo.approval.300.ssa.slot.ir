main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L14
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getMbr()uint64" => block@3, method "bootstrap(pay)void" => block@4, method "increaseXCount(uint64,uint64)void" => block@5, method "getCounts(uint64)(uint64,uint8)" => block@6, * => block@7}
    block@3: // getMbr_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%8#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // bootstrap_route_L21
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%14#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap(gtxn_idx%0#0)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // increaseXCount_route_L29
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%19#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%20#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount(tmp%19#0, tmp%20#0)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // getCounts_route_L33
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%25#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let tmp%26#0: Encoded(uint64,uint8) = tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts(tmp%25#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@7: // switch_case_default_L14
        goto block@8
    block@8: // switch_case_next_L14
        goto block@13
    block@9: // bare_routing_L14
        let tmp%28#0: uint64 = (txn OnCompletion)
        switch tmp%28#0 {0u => block@10, * => block@11}
    block@10: // __algots__.defaultCreate_L14
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (== tmp%29#0 0u)
        (assert tmp%30#0) // can only call when creating
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__algots__.defaultCreate()
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@11: // switch_case_default_L14
        goto block@12
    block@12: // switch_case_next_L14
        goto block@13
    block@13: // after_if_else_L14
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr() -> uint64:
    block@0: // L17
        return 2982900u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap(pay: uint64) -> void:
    block@0: // L21
        let tmp%0#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%1#0: bool = (== tmp%0#0 2982900u)
        let tmp%2#0: account = ((gtxns Receiver) pay#0)
        let tmp%3#0: account = (global CurrentApplicationAddress)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (&& tmp%1#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        (box_create "x" 7200u)
        return 

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount(index: uint64, xCount: uint64) -> void:
    block@0: // L29
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "x")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 9u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%0#0 aggregate%bytes_offset%0#0 9u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint8) = aggregate%encoded_element%0#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 xCount#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "x")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%bytes_offset%1#0: uint64 = (* index#0 9u)
        let aggregate%encoded_element%1#0: bytes = (extract3 storage_value%1#0 aggregate%bytes_offset%1#0 9u) // on error: index access is out of bounds
        let aggregate%updated_data%0#0: bytes = (replace3 aggregate%encoded_element%1#0 0u encoded_value%0#0)
        let aggregate%write_offset%0#0: uint64 = (* index#0 9u)
        let aggregate%updated_array%0#0: bytes = (replace3 storage_value%1#0 aggregate%write_offset%0#0 aggregate%updated_data%0#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded((uint64,uint8)[800]) = aggregate%updated_array%0#0
        (box_put "x" updated_array%0#0)
        return 

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts(index: uint64) -> Encoded(uint64,uint8):
    block@0: // L33
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "x")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 9u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%0#0 aggregate%bytes_offset%0#0 9u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint8) = aggregate%encoded_element%0#0
        return array_item%0#0

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__algots__.defaultCreate() -> void:
    block@0: // L14
        return 