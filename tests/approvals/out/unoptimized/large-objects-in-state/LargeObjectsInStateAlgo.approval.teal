#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 9 8 2982900
    bytecblock "x" 0x151f7c75
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/large-objects-in-state.algo.ts:14
    // class LargeObjectsInStateAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@11
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/large-objects-in-state.algo.ts:14
    // class LargeObjectsInStateAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@9
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/large-objects-in-state.algo.ts:14
    // class LargeObjectsInStateAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x9beff36a // method "getMbr()uint64"
    pushbytes 0xa4e8d164 // method "bootstrap(pay)void"
    pushbytes 0x1960177c // method "increaseXCount(uint64,uint64)void"
    pushbytes 0x25f323d0 // method "getCounts(uint64)(uint64,uint8)"
    uncover 4
    match main_getMbr_route@4 main_bootstrap_route@5 main_increaseXCount_route@6 main_getCounts_route@7
    b main_switch_case_next@8

main_switch_case_next@8:
    b main_after_if_else@10

main_after_if_else@10:
    b main_after_if_else@12

main_after_if_else@12:
    // tests/approvals/large-objects-in-state.algo.ts:14
    // class LargeObjectsInStateAlgo extends Contract {
    err

main_getCounts_route@7:
    // tests/approvals/large-objects-in-state.algo.ts:33
    // getCounts(index: uint64) {
    callsub getCounts
    b main_switch_case_next@8

main_increaseXCount_route@6:
    // tests/approvals/large-objects-in-state.algo.ts:29
    // increaseXCount(index: uint64, xCount: uint64) {
    callsub increaseXCount
    b main_switch_case_next@8

main_bootstrap_route@5:
    // tests/approvals/large-objects-in-state.algo.ts:21
    // bootstrap(pay: gtxn.PaymentTxn) {
    callsub bootstrap
    b main_switch_case_next@8

main_getMbr_route@4:
    // tests/approvals/large-objects-in-state.algo.ts:17
    // getMbr(): uint64 {
    callsub getMbr
    b main_switch_case_next@8

main_create_NoOp@9:
    b main_after_if_else@10

main___algots__.defaultCreate@11:
    // tests/approvals/large-objects-in-state.algo.ts:14
    // class LargeObjectsInStateAlgo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr[routing]() -> void:
getMbr:
    b getMbr_block@0

getMbr_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:17
    // getMbr(): uint64 {
    callsub tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr
    itob
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap[routing]() -> void:
bootstrap:
    b bootstrap_block@0

bootstrap_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:21
    // bootstrap(pay: gtxn.PaymentTxn) {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    callsub tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap
    intc_1 // 1
    return


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount[routing]() -> void:
increaseXCount:
    b increaseXCount_block@0

increaseXCount_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:29
    // increaseXCount(index: uint64, xCount: uint64) {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount
    intc_1 // 1
    return


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts[routing]() -> void:
getCounts:
    b getCounts_block@0

getCounts_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:33
    // getCounts(index: uint64) {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr() -> uint64:
tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr:
    b tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr_block@0

tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:18
    // return BOX_MBR + ACCOUNT_BASE_MBR
    intc 4 // 2982900
    retsub


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap(pay: uint64) -> void:
tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap:
    // tests/approvals/large-objects-in-state.algo.ts:21
    // bootstrap(pay: gtxn.PaymentTxn) {
    proto 1 0
    b tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap_block@0

tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:22-25
    // assertMatch(pay, {
    //   amount: BOX_MBR + ACCOUNT_BASE_MBR,
    //   receiver: Global.currentApplicationAddress,
    // })
    frame_dig -1
    gtxns Amount
    // tests/approvals/large-objects-in-state.algo.ts:23
    // amount: BOX_MBR + ACCOUNT_BASE_MBR,
    intc 4 // 2982900
    // tests/approvals/large-objects-in-state.algo.ts:22-25
    // assertMatch(pay, {
    //   amount: BOX_MBR + ACCOUNT_BASE_MBR,
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    frame_dig -1
    gtxns Receiver
    // tests/approvals/large-objects-in-state.algo.ts:24
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/large-objects-in-state.algo.ts:22-25
    // assertMatch(pay, {
    //   amount: BOX_MBR + ACCOUNT_BASE_MBR,
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/large-objects-in-state.algo.ts:15
    // storage = Box<FixedArray<Counts, typeof MAX_ITEMS>>({ key: 'x' })
    bytec_0 // "x"
    // tests/approvals/large-objects-in-state.algo.ts:26
    // this.storage.create()
    pushint 7200 // 7200
    box_create
    pop
    retsub


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount(index: uint64, xCount: uint64) -> void:
tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount:
    // tests/approvals/large-objects-in-state.algo.ts:29
    // increaseXCount(index: uint64, xCount: uint64) {
    proto 2 0
    b tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount_block@0

tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:15
    // storage = Box<FixedArray<Counts, typeof MAX_ITEMS>>({ key: 'x' })
    bytec_0 // "x"
    // tests/approvals/large-objects-in-state.algo.ts:30
    // this.storage.value[index].x += xCount
    box_get
    assert // Box must have value
    frame_dig -2
    intc_2 // 9
    *
    intc_2 // 9
    extract3 // on error: index access is out of bounds
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    frame_dig -1
    +
    // tests/approvals/large-objects-in-state.algo.ts:15
    // storage = Box<FixedArray<Counts, typeof MAX_ITEMS>>({ key: 'x' })
    bytec_0 // "x"
    // tests/approvals/large-objects-in-state.algo.ts:30
    // this.storage.value[index].x += xCount
    box_get
    assert // Box must have value
    cover 1
    itob
    cover 1
    frame_dig -2
    intc_2 // 9
    *
    dig 1
    uncover 1
    intc_2 // 9
    extract3 // on error: index access is out of bounds
    intc_0 // 0
    uncover 3
    replace3
    frame_dig -2
    intc_2 // 9
    *
    uncover 2
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    // tests/approvals/large-objects-in-state.algo.ts:15
    // storage = Box<FixedArray<Counts, typeof MAX_ITEMS>>({ key: 'x' })
    bytec_0 // "x"
    // tests/approvals/large-objects-in-state.algo.ts:30
    // this.storage.value[index].x += xCount
    uncover 1
    box_put
    retsub


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts(index: uint64) -> bytes:
tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts:
    // tests/approvals/large-objects-in-state.algo.ts:33
    // getCounts(index: uint64) {
    proto 1 1
    b tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts_block@0

tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts_block@0:
    // tests/approvals/large-objects-in-state.algo.ts:15
    // storage = Box<FixedArray<Counts, typeof MAX_ITEMS>>({ key: 'x' })
    bytec_0 // "x"
    // tests/approvals/large-objects-in-state.algo.ts:34
    // return this.storage.value[index]
    box_get
    assert // Box must have value
    frame_dig -1
    intc_2 // 9
    *
    intc_2 // 9
    extract3 // on error: index access is out of bounds
    retsub


// tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
