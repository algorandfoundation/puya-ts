{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template_and_custom_prefix",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        503,
                        827,
                        1153,
                        1369
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        99,
                        116,
                        133,
                        150
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        178
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        104,
                        121,
                        138,
                        155
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAYBBSYIAAV3b3JsZAQKgQFDBBUffHUEJDeNPATQooIABWhlbGxvBExcYboxGyITQQBtNhoAgAQqF5lcgATjJUvJgATit8aSgAQClHyiTwSOBAA1ACQAEwACIkMxGSISRDEYIhNEiAQ8JEL/7jEZIhJEMRgiE0SIAuEkQv/dMRkiEkQxGCITRIgBjiRC/8wxGSISRDEYIhNEiAAbJEL/uzEZIkyOAQADQv+vMRgiEkSIBLwkQv+ksScGFRZXBgInBlAksjUqskIoskKA6AEKIAMAAQImAghncmVldGluZwAxGEAAA4gAyjEbIhNBAKQ2GgCABACSJa6ABCQ3jTyABKDoGHKABNCiggBPBI4EAFoASAA2AAIiQzEZIhJEMRgiE0Q2GgFJIlkjCyQISwEVEkRXAgCIAGlJFRZXBgJMUIAEFR98dUxQsCNC/8sxGYEEEkQxGCITRIgARSNC/7kxGYEFEkQxGCITRIgAMiNC/6cxGSISRDEYIhJENhoBSSJZIwskCEsBFRJEVwIAiAAHI0L/hEL/gIoBACiL/2eJiYmKAQEiKGVEKUxQgAEgUIv/UIkoKWeJskAoskCABACSJa6yGrIaI7IQIrIBs7Q9SbEpFRZXBgIpUEyyGCcFshqyGiOyECKyAbO0PklXBABMVwAEKxJEVwIAgAtoZWxsbyB3b3JsZBJEsSWyGScEshqyGCOyECKyAbOJsSSyNSqyQiiyQoDaAQogAgABJgMIZ3JlZXRpbmcAA2hleTEYQAADiACyMRsiE0EAkzYaAIAETFxhuoAEJDeNPIAEoOgYcoAE0KKCAE8EjgQAWwBJADcAAiJDMRkiEkQxGCITRDYaAUkiWSMLgQIISwEVEkRXAgCIAFBJFRZXBgJMUIAEFR98dUxQsCNC/8oxGYEEEkQxGCITRIgALCNC/7gxGYEFEkQxGCITRIgAGSNC/6YxGSISRDEYIhJEiAAHI0L/lUL/kYmJiYoBASIoZUQpTFCAASBQi/9QiYgABCgqZ4koKWeJskAoskAnB7IaI7IQIrIBs7Q9SbEpFRZXBgIpUEyyGCcFshqyGiOyECKyAbO0PklXBABMVwAEKxJEVwIAgAloZXkgd29ybGQSRLElshknBLIashgjshAisgGzibEksjUqskIoskKA3gEKIAIAASYDCGdyZWV0aW5nAAdib25qb3VyMRhAAAOIALIxGyITQQCTNhoAgARMXGG6gAQkN408gASg6BhygATQooIATwSOBABbAEkANwACIkMxGSISRDEYIhNENhoBSSJZIwuBAghLARUSRFcCAIgAUEkVFlcGAkxQgAQVH3x1TFCwI0L/yjEZgQQSRDEYIhNEiAAsI0L/uDEZgQUSRDEYIhNEiAAZI0L/pjEZIhJEMRgiEkSIAAcjQv+VQv+RiYmJigEBIihlRClMUIABIFCL/1CJiAAEKCpniSgpZ4myQCiyQCcHshojshAisgGztD1JsSkVFlcGAilQTLIYJwWyGrIaI7IQIrIBs7Q+SVcEAExXAAQrEkRXAgCADWJvbmpvdXIgd29ybGQSRLElshknBLIashgjshAisgGzibEisjUisjgqskIoskKAdQogAgABMRsiE0EARjYaAIAEAr8wz4AEJDeNPE8CjgIAFAACIkMxGYEFEkQxGCITRIgAQCNC/+0xGSISRDEYIhNEiAAqFoAEFR98dUxQsCNC/9IxGSJMjgEAA0L/xjEYIhJEiAAPI0L/u4GAIK+JiP/4FYmJibJAKLJAI7IQIrIBs7Q9SbGyGIAEAr8wz7IaI7IQIrIBs7Q+SVcEAExXAAQrEkQXgYAgEkSxJbIZJwSyGrIYI7IQIrIBs4mJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}