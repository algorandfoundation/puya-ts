#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8

main_block@0:

main_block@1:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@12

main_abi_routing@2:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x702ea108 // method "testPrimitives(uint64)void"
    pushbytes 0x5b2f7713 // method "testArrayDestructure(uint64[],uint64,uint64[])void"
    pushbytes 0x90cccb3d // method "testArrayNarrowing(uint64[],uint64)void"
    pushbytes 0x5a3fec5a // method "testNested(uint64[][])void"
    pushbytes 0x27a4f367 // method "testDestructureObj((uint64,string),(uint64,string))void"
    pushbytes 0xd6c9f486 // method "testObjLiteralNarrowing(uint64,uint64)void"
    pushbytes 0x6e03ad0c // method "testMixed(((uint64))[])void"
    uncover 7
    match main_testPrimitives_route@3 main_testArrayDestructure_route@4 main_testArrayNarrowing_route@5 main_testNested_route@6 main_testDestructureObj_route@7 main_testObjLiteralNarrowing_route@8 main_testMixed_route@9

main_switch_case_default@10:

main_switch_case_next@11:

main_after_if_else@16:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17:
    return

main_testMixed_route@9:
    // tests/approvals/assignments.algo.ts:56
    // testMixed(m: Array<{ a: [uint64] }>) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/assignments.algo.ts:56
    // testMixed(m: Array<{ a: [uint64] }>) {
    callsub testMixed
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_testObjLiteralNarrowing_route@8:
    // tests/approvals/assignments.algo.ts:43
    // testObjLiteralNarrowing(a: uint64, b: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/approvals/assignments.algo.ts:43
    // testObjLiteralNarrowing(a: uint64, b: uint64) {
    callsub testObjLiteralNarrowing
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_testDestructureObj_route@7:
    // tests/approvals/assignments.algo.ts:38
    // testDestructureObj(m: { a: uint64; b: string }, i: Readonly<{ a: uint64; b: string }>) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    // tests/approvals/assignments.algo.ts:38
    // testDestructureObj(m: { a: uint64; b: string }, i: Readonly<{ a: uint64; b: string }>) {
    uncover 2
    uncover 2
    uncover 2
    callsub testDestructureObj
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_testNested_route@6:
    // tests/approvals/assignments.algo.ts:34
    // testNested(i_a: ReadonlyArray<ReadonlyArray<uint64>>) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/assignments.algo.ts:34
    // testNested(i_a: ReadonlyArray<ReadonlyArray<uint64>>) {
    callsub testNested
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_testArrayNarrowing_route@5:
    // tests/approvals/assignments.algo.ts:24
    // testArrayNarrowing(m_a: uint64[], u: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/approvals/assignments.algo.ts:24
    // testArrayNarrowing(m_a: uint64[], u: uint64) {
    callsub testArrayNarrowing
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_testArrayDestructure_route@4:
    // tests/approvals/assignments.algo.ts:14
    // testArrayDestructure(i_a: ReadonlyArray<uint64>, u: uint64, m_a: uint64[]) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // tests/approvals/assignments.algo.ts:14
    // testArrayDestructure(i_a: ReadonlyArray<uint64>, u: uint64, m_a: uint64[]) {
    uncover 2
    uncover 2
    uncover 2
    callsub testArrayDestructure
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_testPrimitives_route@3:
    // tests/approvals/assignments.algo.ts:8
    // testPrimitives(u: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/assignments.algo.ts:8
    // testPrimitives(u: uint64) {
    callsub testPrimitives
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17

main_bare_routing@12:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@13

main_switch_case_default@14:

main_switch_case_next@15:
    b main_after_if_else@16

main___algots__.defaultCreate@13:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@17


// tests/approvals/assignments.algo.ts::getVal() -> uint64, uint64:
getVal:

getVal_block@0:
    // tests/approvals/assignments.algo.ts:69
    // a: 1,
    intc_1 // 1
    // tests/approvals/assignments.algo.ts:70
    // b: 2,
    pushint 2 // 2
    // tests/approvals/assignments.algo.ts:68-71
    // return {
    //   a: 1,
    //   b: 2,
    // }
    retsub


// tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
logAndReturn:
    // tests/approvals/assignments.algo.ts:74
    // function logAndReturn(u: uint64): uint64 {
    proto 1 1

logAndReturn_block@0:
    // tests/approvals/assignments.algo.ts:75
    // log(u)
    frame_dig -1
    itob
    log
    // tests/approvals/assignments.algo.ts:76
    // return u
    frame_dig -1
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(u: uint64) -> void:
testPrimitives:
    // tests/approvals/assignments.algo.ts:8
    // testPrimitives(u: uint64) {
    proto 1 0

testPrimitives_block@0:
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: bytes, u: uint64, m_a: bytes) -> void:
testArrayDestructure:
    // tests/approvals/assignments.algo.ts:14
    // testArrayDestructure(i_a: ReadonlyArray<uint64>, u: uint64, m_a: uint64[]) {
    proto 3 0

testArrayDestructure_block@0:
    // tests/approvals/assignments.algo.ts:17
    // const a5 = ([a2, a3] = [logAndReturn(u), logAndReturn(u), logAndReturn(u)])
    frame_dig -2
    callsub logAndReturn
    pop
    frame_dig -2
    callsub logAndReturn
    pop
    frame_dig -2
    callsub logAndReturn
    pop
    // tests/approvals/assignments.algo.ts:18
    // assert(a5.length === 3, 'a5 length should be 3')
    pushint 3 // 3
    dup
    ==
    assert // a5 length should be 3
    // tests/approvals/assignments.algo.ts:20
    // const [c, d] = [logAndReturn(u), logAndReturn(u), logAndReturn(u)]
    frame_dig -2
    callsub logAndReturn
    pop
    frame_dig -2
    callsub logAndReturn
    pop
    frame_dig -2
    callsub logAndReturn
    pop
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(m_a: bytes, u: uint64) -> void:
testArrayNarrowing:
    // tests/approvals/assignments.algo.ts:24
    // testArrayNarrowing(m_a: uint64[], u: uint64) {
    proto 2 0

testArrayNarrowing_block@0:
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(i_a: bytes) -> void:
testNested:
    // tests/approvals/assignments.algo.ts:34
    // testNested(i_a: ReadonlyArray<ReadonlyArray<uint64>>) {
    proto 1 0

testNested_block@0:
    // tests/approvals/assignments.algo.ts:35
    // const [[a]] = i_a
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(m: bytes, i.a: uint64, i.b: bytes) -> void:
testDestructureObj:
    // tests/approvals/assignments.algo.ts:38
    // testDestructureObj(m: { a: uint64; b: string }, i: Readonly<{ a: uint64; b: string }>) {
    proto 3 0

testDestructureObj_block@0:
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(a: uint64, b: uint64) -> void:
testObjLiteralNarrowing:
    // tests/approvals/assignments.algo.ts:43
    // testObjLiteralNarrowing(a: uint64, b: uint64) {
    proto 2 0

testObjLiteralNarrowing_block@0:
    // tests/approvals/assignments.algo.ts:51
    // const mObj3: MutableObj = { ...getVal() }
    callsub getVal
    popn 2
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(m: bytes) -> void:
testMixed:
    // tests/approvals/assignments.algo.ts:56
    // testMixed(m: Array<{ a: [uint64] }>) {
    proto 1 0

testMixed_block@0:
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
