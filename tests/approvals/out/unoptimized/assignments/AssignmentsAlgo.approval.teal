#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1

main_block@0:

main_block@1:
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x702ea108 // method "testPrimitives(uint64)void"
    pushbytes 0x3cac6771 // method "test(uint64[],uint64)void"
    uncover 2
    match main_testPrimitives_route@3 main_test_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@12:
    return

main_test_route@4:
    // tests/approvals/assignments.algo.ts:10
    // test(i_a: ReadonlyArray<uint64>, u: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/approvals/assignments.algo.ts:10
    // test(i_a: ReadonlyArray<uint64>, u: uint64) {
    callsub test
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@12

main_testPrimitives_route@3:
    // tests/approvals/assignments.algo.ts:5
    // testPrimitives(u: uint64) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/assignments.algo.ts:5
    // testPrimitives(u: uint64) {
    callsub testPrimitives
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@12

main_bare_routing@7:
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algots__.defaultCreate@8:
    // tests/approvals/assignments.algo.ts:4
    // export class AssignmentsAlgo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__@12


// tests/approvals/assignments.algo.ts::log(u: uint64) -> uint64:
log:
    // tests/approvals/assignments.algo.ts:16
    // function log(u: uint64): uint64 {
    proto 1 1

log_block@0:
    // tests/approvals/assignments.algo.ts:17
    // log(u)
    frame_dig -1
    callsub log
    pop
    // tests/approvals/assignments.algo.ts:18
    // return u
    frame_dig -1
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(u: uint64) -> void:
testPrimitives:
    // tests/approvals/assignments.algo.ts:5
    // testPrimitives(u: uint64) {
    proto 1 0

testPrimitives_block@0:
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.test(i_a: bytes, u: uint64) -> void:
test:
    // tests/approvals/assignments.algo.ts:10
    // test(i_a: ReadonlyArray<uint64>, u: uint64) {
    proto 2 0

test_block@0:
    // tests/approvals/assignments.algo.ts:12
    // const [a2, a3] = [u, u, log(u)]
    frame_dig -1
    callsub log
    pop
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:

__algots__.defaultCreate_block@0:
    retsub
