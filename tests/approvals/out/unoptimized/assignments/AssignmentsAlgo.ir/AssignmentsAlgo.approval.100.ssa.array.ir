main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L19
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L19
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@14
    block@3: // call_NoOp_L19
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testPrimitives(uint64)void" => block@4, method "testAccountDestructure()(uint64,uint64)" => block@5, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@6, method "testArrayNarrowing(uint64[],uint64)void" => block@7, method "testTupleToArray((uint64,uint64),(uint64,uint64))void" => block@8, method "testNested(uint64[][])void" => block@9, method "testDestructureObj((uint64,string),(uint64,string))void" => block@10, method "testObjLiteralNarrowing(uint64,uint64)void" => block@11, method "testMixed(((uint64))[])void" => block@12, * => block@13}
    block@4: // testPrimitives_route_L21
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives[routing]()
        goto block@13
    block@5: // testAccountDestructure_route_L29
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testAccountDestructure[routing]()
        goto block@13
    block@6: // testArrayDestructure_route_L34
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure[routing]()
        goto block@13
    block@7: // testArrayNarrowing_route_L54
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing[routing]()
        goto block@13
    block@8: // testTupleToArray_route_L68
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray[routing]()
        goto block@13
    block@9: // testNested_route_L78
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested[routing]()
        goto block@13
    block@10: // testDestructureObj_route_L83
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj[routing]()
        goto block@13
    block@11: // testObjLiteralNarrowing_route_L88
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing[routing]()
        goto block@13
    block@12: // testMixed_route_L103
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed[routing]()
        goto block@13
    block@13: // switch_case_next_L19
        goto block@15
    block@14: // create_NoOp_L19
        goto block@15
    block@15: // after_if_else_L19
        goto block@17
    block@16: // __algots__.defaultCreate_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate()
        exit 1u
    block@17: // after_if_else_L19
        exit 0u
    block@18: // after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let value_internal%0#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L282
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let head_offset#0: uint64 = value_internal%0#1
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L282
        let value_internal%0#2: uint64 = (+ value_internal%0#1 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let value_internal%0#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L342
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let head_offset#0: uint64 = value_internal%0#1
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        goto block@3
    block@3: // for_footer_L342
        let value_internal%0#2: uint64 = (+ value_internal%0#1 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1

subroutine tests/approvals/assignments.algo.ts::resetCount() -> void:
    block@0: // L8
        (stores 0u 0u)
        return 

subroutine tests/approvals/assignments.algo.ts::getCount() -> uint64:
    block@0: // L11
        let tmp%0#0: uint64 = (loads 0u)
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::incCount() -> void:
    block@0: // L15
        let tmp%0#0: uint64 = (loads 0u)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        (stores 0u tmp%1#0)
        return 

subroutine tests/approvals/assignments.algo.ts::getVal() -> <uint64, uint64>:
    block@0: // L113
        tests/approvals/assignments.algo.ts::incCount()
        return 1u 2u

subroutine tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
    block@0: // L122
        tests/approvals/assignments.algo.ts::incCount()
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        return u#0

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives[routing]() -> void:
    block@0: // L21
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(tmp%1#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testAccountDestructure[routing]() -> void:
    block@0: // L29
        let tmp%0#0: Encoded(uint64,uint64) = tests/approvals/assignments.algo.ts::AssignmentsAlgo.testAccountDestructure()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure[routing]() -> void:
    block@0: // L34
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%1#0
        let tmp%2#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%3#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%3#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 8u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%2#0: uint64 = (len tmp%3#0)
        let eq%2#0: bool = (== len%2#0 add%1#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = tmp%3#0
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(as_Encoded(len+uint64[])%0#0, tmp%2#0, as_Encoded(len+uint64[])%1#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing[routing]() -> void:
    block@0: // L54
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%1#0
        let tmp%2#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(as_Encoded(len+uint64[])%0#0, tmp%2#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray[routing]() -> void:
    block@0: // L68
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<uint64,uint64>
        let as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 16u)
        (assert eq%1#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>
        let as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = tmp%1#0
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(uint64,uint64)%1#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 as_Encoded(uint64,uint64)%1#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%1#0)
        let (tmp%2#0: uint64, tmp%3#0: uint64) = (aggregate%item0%0#0, aggregate%item1%0#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray(as_Encoded(uint64,uint64)%0#0, tmp%2#0, tmp%3#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested[routing]() -> void:
    block@0: // L78
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len tmp%0#0)
        let array_data%0#0: bytes = (substring3 tmp%0#0 2u total_length%0#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L78
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L78
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(len+uint64[])[])
        let total_length%1#0: uint64 = (len array_data%0#0)
        let extract_to_end%0#0: bytes = (substring3 array_data%0#0 item_offset%0#0 total_length%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 extract_to_end%0#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%0#0: uint64 = (* length%1#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%0#0)
        goto block@3
    block@3: // for_footer_L78
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L78
        let num_bytes%1#0: uint64 = (+ num_bytes%0#1 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 num_bytes%1#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<uint64>>
        let as_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = tmp%0#0
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(as_Encoded(len+(len+uint64[])[])%0#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj[routing]() -> void:
    block@0: // L83
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 tmp%0#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 10u add%0#0)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for Object3EB715E7
        let as_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let tuple_len%1#0: uint64 = (len tmp%1#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%1#0 8u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%1#0 10u)
        (assert eq%2#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let substring3%1#0: bytes = (substring3 tmp%1#0 extract_uint16%1#0 tuple_len%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 substring3%1#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%2#0: uint64 = (+ mul%1#0 2u)
        let add%3#0: uint64 = (+ 10u add%2#0)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%3#0: bool = (== len%1#0 add%3#0)
        (assert eq%3#0) // invalid number of bytes for ReadonlyObject3EB715E7
        let as_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = tmp%1#0
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(uint64,(len+utf8[]))%1#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 as_Encoded(uint64,(len+utf8[]))%1#0 8u)
        let aggregate%len%0#0: uint64 = (len as_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%substring3%0#0: bytes = (substring3 as_Encoded(uint64,(len+utf8[]))%1#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%item1%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let (tmp%2#0: uint64, tmp%3#0: string) = (aggregate%item0%0#0, aggregate%item1%0#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(as_Encoded(uint64,(len+utf8[]))%0#0, tmp%2#0, tmp%3#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing[routing]() -> void:
    block@0: // L88
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint64)%1#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(tmp%1#0, tmp%3#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed[routing]() -> void:
    block@0: // L103
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<Object7CFAF5D6>
        let as_Encoded(len+((uint64))[])%0#0: Encoded(len+((uint64))[]) = tmp%0#0
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(as_Encoded(len+((uint64))[])%0#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(u: uint64) -> void:
    block@0: // L21
        let p1#0: uint64 = u#0
        let tmp%0#0: uint64 = (+ 2u 1u)
        let p2#1: uint64 = tmp%0#0
        let tmp%1#0: bool = (== p2#1 3u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== p1#0 u#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testAccountDestructure() -> Encoded(uint64,uint64):
    block@0: // L29
        let awst_tmp%0#0: account = (global CurrentApplicationAddress)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) awst_tmp%0#0)
        (assert check%0#0) // account funded
        let (value%1#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) awst_tmp%0#0)
        (assert check%1#0) // account funded
        let balance#0: uint64 = value%0#0
        let minBalance#0: uint64 = value%1#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob balance#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob minBalance#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: Encoded(len+uint64[]), u: uint64, m_a: Encoded(len+uint64[])) -> void:
    block@0: // L34
        let aggregate%total_length%0#0: uint64 = (len i_a#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 i_a#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let a1#0: uint64 = values%0#0
        let aggregate%total_length%1#0: uint64 = (len i_a#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 i_a#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%0#0: bool = (== a1#0 values%1#0)
        (assert tmp%0#0)
        tests/approvals/assignments.algo.ts::resetCount()
        let tmp%1#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%2#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%3#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let a2#0: uint64 = tmp%1#0
        let a3#0: uint64 = tmp%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = aggregate%head%2#0
        let tmp%4#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#0
        let a5#0: Encoded(uint64,uint64,uint64) = tmp%4#0
        let tmp%5#0: uint64 = tests/approvals/assignments.algo.ts::getCount()
        let tmp%6#0: bool = (== tmp%5#0 3u)
        (assert tmp%6#0) // logAndReturn called 3 times
        let tmp%7#0: bool = (== a2#0 u#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== a3#0 u#0)
        (assert tmp%8#0)
        let tmp%9#0: bool = (== 3u 3u)
        let aggregate%extract%0#0: bytes = (extract3 a5#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%2#0: uint64 = (btoi tuple_item%0#0)
        let tmp%10#0: bool = (== values%2#0 u#0)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        let aggregate%extract%1#0: bytes = (extract3 a5#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%3#0: uint64 = (btoi tuple_item%1#0)
        let tmp%12#0: bool = (== values%3#0 u#0)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        let aggregate%extract%2#0: bytes = (extract3 a5#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%4#0: uint64 = (btoi tuple_item%2#0)
        let tmp%14#0: bool = (== values%4#0 u#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        (assert tmp%15#0) // assert target is match for conditions
        let tmp%16#0: bool = (== 3u 3u)
        (assert tmp%16#0) // a5 length should be 3
        let tmp%17#0: bool = (== 1u 1u)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%19#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%20#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let c#0: uint64 = tmp%18#0
        let d#0: uint64 = tmp%19#0
        let tmp%21#0: bool = (== 2u 2u)
        let tmp%22#0: bool = (== c#0 u#0)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        let tmp%24#0: bool = (== d#0 u#0)
        let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
        (assert tmp%25#0) // assert target is match for conditions
        let aggregate%total_length%2#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 m_a#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%5#0: uint64 = (btoi array_item%2#0)
        let aggregate%total_length%3#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 m_a#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%6#0: uint64 = (btoi array_item%3#0)
        let a6#0: uint64 = values%5#0
        let a7#0: uint64 = values%6#0
        let aggregate%total_length%4#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%4#0: bytes = (substring3 m_a#0 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%7#0: uint64 = (btoi array_item%4#0)
        let tmp%26#0: bool = (== a6#0 values%7#0)
        (assert tmp%26#0)
        let aggregate%total_length%5#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%5#0: bytes = (substring3 m_a#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%8#0: uint64 = (btoi array_item%5#0)
        let tmp%27#0: bool = (== a7#0 values%8#0)
        (assert tmp%27#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(m_a: Encoded(len+uint64[]), u: uint64) -> void:
    block@0: // L54
        let direct#0: Encoded(len+uint64[]) = m_a#0
        let aggregate%total_length%0#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 m_a#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%total_length%1#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 m_a#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 m_a#0 aggregate%write_offset_with_length_header%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        let m_a#1: Encoded(len+uint64[]) = updated_array%0#0
        let aggregate%total_length%2#0: uint64 = (len direct#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 direct#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%1#0: uint64 = (+ values%1#0 2u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%total_length%3#0: uint64 = (len direct#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 direct#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%1#0: uint64 = (+ aggregate%write_offset%1#0 2u)
        let aggregate%updated_array%1#0: bytes = (replace3 direct#0 aggregate%write_offset_with_length_header%1#0 encoded_value%1#0) // on error: index access is out of bounds
        let updated_array%1#0: Encoded(len+uint64[]) = aggregate%updated_array%1#0
        let direct#1: Encoded(len+uint64[]) = updated_array%1#0
        let aggregate%total_length%4#0: uint64 = (len m_a#1)
        let aggregate%array_trimmed%4#0: bytes = (substring3 m_a#1 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let aggregate%total_length%5#0: uint64 = (len direct#1)
        let aggregate%array_trimmed%5#0: bytes = (substring3 direct#1 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%2#0: bool = (!= values%2#0 values%3#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray(m_t: Encoded(uint64,uint64), i_t.0: uint64, i_t.1: uint64) -> void:
    block@0: // L68
        let aggregate%extract%0#0: bytes = (extract3 m_t#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 m_t#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let m_a#0: Encoded(len+uint64[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 m_a#0 0u) // on error: invalid array length header
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 2u)
        let aggregate%total_length%0#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 m_a#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%2#0: uint64 = (btoi array_item%0#0)
        let aggregate%extract%2#0: bytes = (extract3 m_t#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%3#0: uint64 = (btoi tuple_item%2#0)
        let tmp%2#0: bool = (== values%2#0 values%3#0)
        let tmp%3#0: bool = (&& tmp%1#0 tmp%2#0)
        let aggregate%total_length%1#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 m_a#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%4#0: uint64 = (btoi array_item%1#0)
        let aggregate%extract%3#0: bytes = (extract3 m_t#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%5#0: uint64 = (btoi tuple_item%3#0)
        let tmp%4#0: bool = (== values%4#0 values%5#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        let aggregate%extract%4#0: bytes = (extract3 m_t#0 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%6#0: uint64 = (btoi tuple_item%4#0)
        let aggregate%extract%5#0: bytes = (extract3 m_t#0 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%5#0
        let values%7#0: uint64 = (btoi tuple_item%5#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob values%6#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%7#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%3#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let i_a#0: Encoded(len+uint64[]) = encoded_array%1#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 i_a#0 0u) // on error: invalid array length header
        let tmp%6#0: uint64 = aggregate%array_length%1#0
        let tmp%7#0: bool = (== tmp%6#0 2u)
        let aggregate%total_length%2#0: uint64 = (len i_a#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 i_a#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%8#0: uint64 = (btoi array_item%2#0)
        let aggregate%extract%6#0: bytes = (extract3 m_t#0 0u 8u)
        let tuple_item%6#0: Encoded(uint64) = aggregate%extract%6#0
        let values%9#0: uint64 = (btoi tuple_item%6#0)
        let tmp%8#0: bool = (== values%8#0 values%9#0)
        let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
        let aggregate%total_length%3#0: uint64 = (len i_a#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 i_a#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%10#0: uint64 = (btoi array_item%3#0)
        let aggregate%extract%7#0: bytes = (extract3 m_t#0 8u 8u)
        let tuple_item%7#0: Encoded(uint64) = aggregate%extract%7#0
        let values%11#0: uint64 = (btoi tuple_item%7#0)
        let tmp%10#0: bool = (== values%10#0 values%11#0)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        (assert tmp%11#0) // assert target is match for conditions
        let aggregate%as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob i_t.0#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%2#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob i_t.1#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = aggregate%head%5#0
        let encoded_array%2#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#0
        let i_a2#0: Encoded(len+uint64[]) = encoded_array%2#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 i_a2#0 0u) // on error: invalid array length header
        let tmp%12#0: uint64 = aggregate%array_length%2#0
        let tmp%13#0: bool = (== tmp%12#0 2u)
        let aggregate%total_length%4#0: uint64 = (len i_a2#0)
        let aggregate%array_trimmed%4#0: bytes = (substring3 i_a2#0 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%12#0: uint64 = (btoi array_item%4#0)
        let tmp%14#0: bool = (== values%12#0 i_t.0#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        let aggregate%total_length%5#0: uint64 = (len i_a2#0)
        let aggregate%array_trimmed%5#0: bytes = (substring3 i_a2#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%13#0: uint64 = (btoi array_item%5#0)
        let tmp%16#0: bool = (== values%13#0 i_t.1#0)
        let tmp%17#0: bool = (&& tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // assert target is match for conditions
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(i_a: Encoded(len+(len+uint64[])[])) -> void:
    block@0: // L78
        let aggregate%total_length%0#0: uint64 = (len i_a#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 i_a#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 i_a#0 0u) // on error: invalid array length header
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%0#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 8u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%0#0: Encoded(len+uint64[]) = aggregate%item%0#0
        let aggregate%total_length%1#0: uint64 = (len array_item%0#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 array_item%0#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%1#0)
        let a#0: uint64 = values%0#0
        let aggregate%total_length%2#0: uint64 = (len i_a#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 i_a#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 i_a#0 0u) // on error: invalid array length header
        let aggregate%lt%1#0: bool = (< 0u aggregate%array_length%1#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%item_offset_offset%1#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%item_length%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0)
        let aggregate%item_length_in_bytes%1#0: uint64 = (* aggregate%item_length%1#0 8u)
        let aggregate%item_head_tail_length%1#0: uint64 = (+ aggregate%item_length_in_bytes%1#0 2u)
        let aggregate%item%1#0: bytes = (extract3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%item_head_tail_length%1#0)
        let array_item%2#0: Encoded(len+uint64[]) = aggregate%item%1#0
        let aggregate%total_length%3#0: uint64 = (len array_item%2#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 array_item%2#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%3#0)
        let tmp%0#0: bool = (== a#0 values%1#0)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(m: Encoded(uint64,(len+utf8[])), i.a: uint64, i.b: string) -> void:
    block@0: // L83
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(a: uint64, b: uint64) -> void:
    block@0: // L88
        tests/approvals/assignments.algo.ts::resetCount()
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: uint64) = tests/approvals/assignments.algo.ts::getVal()
        let tmp%3#0: uint64 = tests/approvals/assignments.algo.ts::getCount()
        let tmp%4#0: bool = (== tmp%3#0 1u)
        (assert tmp%4#0) // getVal should only be called once
        let (awst_tmp%2#0: uint64, awst_tmp%3#0: uint64) = tests/approvals/assignments.algo.ts::getVal()
        let tmp%6#0: uint64 = tests/approvals/assignments.algo.ts::getCount()
        let tmp%7#0: bool = (== tmp%6#0 2u)
        (assert tmp%7#0) // getVal should still be called once even though its result is not used
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(m: Encoded(len+((uint64))[])) -> void:
    block@0: // L103
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L19
        return 