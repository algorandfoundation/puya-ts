main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
    block@0: // L40
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        return u#0

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@2, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@3, method "testArrayNarrowing(uint64[],uint64)void" => block@4, method "testItxn()void" => block@5, * => block@6}
    block@2: // testPrimitives_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(tmp%7#0)
        return 1u
    block@3: // testArrayDestructure_route_L10
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%12#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(reinterpret_Encoded(len+uint64[])%0#0, tmp%12#0, reinterpret_Encoded(len+uint64[])%1#0)
        return 1u
    block@4: // testArrayNarrowing_route_L20
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%2#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(reinterpret_Encoded(len+uint64[])%2#0, tmp%17#0)
        return 1u
    block@5: // testItxn_route_L30
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testItxn()
        return 1u
    block@6: // switch_case_default_L4
        goto block@7
    block@7: // switch_case_next_L4
        goto block@12
    block@8: // bare_routing_L4
        let tmp%22#0: uint64 = (txn OnCompletion)
        switch tmp%22#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L4
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (== tmp%23#0 0u)
        (assert tmp%24#0) // can only call when creating
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L4
        goto block@11
    block@11: // switch_case_next_L4
        goto block@12
    block@12: // after_if_else_L4
        return 0u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(u: uint64) -> void:
    block@0: // L5
        let p1#0: uint64 = u#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: Encoded(len+uint64[]), u: uint64, m_a: Encoded(len+uint64[])) -> void:
    block@0: // L10
        let array_item%0#0: Encoded(uint64) = agg_read_index(i_a#0, 1u)
        let values%0#0: uint64 = decode<uint64>(array_item%0#0)
        let a1#0: uint64 = values%0#0
        let tmp%0#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%1#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%2#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let a2#0: uint64 = tmp%0#0
        let a3#0: uint64 = tmp%1#0
        let tmp%3#0: Encoded(uint64,uint64,uint64) = encode<(uint64,uint64,uint64)>(tmp%0#0, tmp%1#0, tmp%2#0)
        let a5#0: Encoded(uint64,uint64,uint64) = tmp%3#0
        let tmp%4#0: bool = (== 3u 3u)
        (assert tmp%4#0) // a5 length should be 3
        let a4#0: uint64 = 1u
        encode<(uint64)>(1u)
        let tmp%5#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%6#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%7#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let c#0: uint64 = tmp%5#0
        let d#0: uint64 = tmp%6#0
        encode<(uint64,uint64,uint64)>(tmp%5#0, tmp%6#0, tmp%7#0)
        let array_item%1#0: Encoded(uint64) = agg_read_index(m_a#0, 0u)
        let values%1#0: uint64 = decode<uint64>(array_item%1#0)
        let array_item%2#0: Encoded(uint64) = agg_read_index(m_a#0, 1u)
        let values%2#0: uint64 = decode<uint64>(array_item%2#0)
        let a6#0: uint64 = values%1#0
        let a7#0: uint64 = values%2#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(m_a: Encoded(len+uint64[]), u: uint64) -> void:
    block@0: // L20
        let direct#0: Encoded(len+uint64[]) = m_a#0
        let array_length%0#0: uint64 = (extract_uint16 m_a#0 0u)
        let narrowed#0: Encoded(len+uint64[]) = m_a#0
        let encoded_array%0#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(u#0, u#0, u#0)
        let fromLit#0: Encoded(len+uint64[]) = encoded_array%0#0
        let encoded_array%1#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(u#0, u#0, u#0)
        let result#0: Encoded(len+uint64[]) = encoded_array%1#0
        let encoded_array%2#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(u#0, u#0, u#0)
        let fromLit2#0: Encoded(len+uint64[]) = encoded_array%2#0
        let encoded_array%3#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(u#0, u#0, u#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testItxn() -> void:
    block@0: // L30
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 