main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::getVal() -> <uint64, uint64>:
    block@0: // L66
        return 1u 2u

subroutine tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
    block@0: // L74
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        return u#0

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@11
    block@1: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@2, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@3, method "testArrayNarrowing(uint64[],uint64)void" => block@4, method "testNested(uint64[][])void" => block@5, method "testDestructureObj((uint64,string),(uint64,string))void" => block@6, method "testObjLiteralNarrowing(uint64,uint64)void" => block@7, method "testMixed(((uint64))[])void" => block@8, * => block@9}
    block@2: // testPrimitives_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(tmp%7#0)
        return 1u
    block@3: // testArrayDestructure_route_L14
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%12#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(reinterpret_Encoded(len+uint64[])%0#0, tmp%12#0, reinterpret_Encoded(len+uint64[])%1#0)
        return 1u
    block@4: // testArrayNarrowing_route_L24
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(reinterpret_Encoded(len+uint64[])%2#0, tmp%17#0)
        return 1u
    block@5: // testNested_route_L34
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(reinterpret_Encoded(len+(len+uint64[])[])%0#0)
        return 1u
    block@6: // testDestructureObj_route_L38
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 2)
        let (tmp%26#0: uint64, tmp%27#0: string) = decode_bytes<(uint64,string,)>(reinterpret_Encoded(uint64,(len+utf8[]))%1#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(reinterpret_Encoded(uint64,(len+utf8[]))%0#0, tmp%26#0, tmp%27#0)
        return 1u
    block@7: // testObjLiteralNarrowing_route_L43
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%33#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(tmp%32#0, tmp%33#0)
        return 1u
    block@8: // testMixed_route_L56
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (== tmp%34#0 NoOp)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (!= tmp%36#0 0u)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded(len+((uint64))[])%0#0: Encoded(len+((uint64))[]) = (txna ApplicationArgs 1)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(reinterpret_Encoded(len+((uint64))[])%0#0)
        return 1u
    block@9: // switch_case_default_L7
        goto block@10
    block@10: // switch_case_next_L7
        goto block@15
    block@11: // bare_routing_L7
        let tmp%38#0: uint64 = (txn OnCompletion)
        switch tmp%38#0 {0u => block@12, * => block@13}
    block@12: // __algots__.defaultCreate_L7
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (== tmp%39#0 0u)
        (assert tmp%40#0) // can only call when creating
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate()
        return 1u
    block@13: // switch_case_default_L7
        goto block@14
    block@14: // switch_case_next_L7
        goto block@15
    block@15: // after_if_else_L7
        return 0u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testPrimitives(u: uint64) -> void:
    block@0: // L8
        let p1#0: uint64 = u#0
        let p2#0: uint64 = 2u
        let tmp%0#0: uint64 = (+ p2#0 1u)
        let p2#1: uint64 = tmp%0#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: Encoded(len+uint64[]), u: uint64, m_a: Encoded(len+uint64[])) -> void:
    block@0: // L14
        let array_item%0#0: Encoded(uint64) = extract_value(i_a#0, 1u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let a1#0: uint64 = values%0#0
        let tmp%0#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%1#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%2#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let a2#0: uint64 = tmp%0#0
        let a3#0: uint64 = tmp%1#0
        let tmp%3#0: Encoded(uint64,uint64,uint64) = bytes_encode<(uint64,uint64,uint64)>(tmp%0#0, tmp%1#0, tmp%2#0)
        let a5#0: Encoded(uint64,uint64,uint64) = tmp%3#0
        let tmp%4#0: bool = (== 3u 3u)
        (assert tmp%4#0) // a5 length should be 3
        let a4#0: uint64 = 1u
        let tmp%5#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%6#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%7#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let c#0: uint64 = tmp%5#0
        let d#0: uint64 = tmp%6#0
        let array_item%1#0: Encoded(uint64) = extract_value(m_a#0, 0u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let array_item%2#0: Encoded(uint64) = extract_value(m_a#0, 1u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let a6#0: uint64 = values%1#0
        let a7#0: uint64 = values%2#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(m_a: Encoded(len+uint64[]), u: uint64) -> void:
    block@0: // L24
        let direct#0: Encoded(len+uint64[]) = m_a#0
        let array_length%0#0: uint64 = (extract_uint16 m_a#0 0u)
        let narrowed#0: Encoded(len+uint64[]) = m_a#0
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(u#0, u#0, u#0)
        let fromLit#0: Encoded(len+uint64[]) = encoded_array%0#0
        let encoded_array%1#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(u#0, u#0, u#0)
        let result#0: Encoded(len+uint64[]) = encoded_array%1#0
        let encoded_array%2#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(u#0, u#0, u#0)
        let fromLit2#0: Encoded(len+uint64[]) = encoded_array%2#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(i_a: Encoded(len+(len+uint64[])[])) -> void:
    block@0: // L34
        let array_item%0#0: Encoded(len+uint64[]) = extract_value(i_a#0, 0u)
        let array_item%1#0: Encoded(uint64) = extract_value(array_item%0#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let a#0: uint64 = values%0#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(m: Encoded(uint64,(len+utf8[])), i.a: uint64, i.b: string) -> void:
    block@0: // L38
        let tuple_item%0#0: Encoded(uint64) = extract_value(m#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(len+utf8[]) = extract_value(m#0, 1)
        let values%1#0: string = decode_bytes<string>(tuple_item%1#0)
        let a1#0: uint64 = values%0#0
        let b1#0: string = values%1#0
        let a2#0: uint64 = i.a#0
        let b2#0: string = i.b#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(a: uint64, b: uint64) -> void:
    block@0: // L43
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(a#0, b#0)
        let mObj#0: Encoded(uint64,uint64) = tmp%0#0
        let (imObj.a#0: uint64, imObj.b#0: uint64) = (a#0, b#0)
        let tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(123u, 456u)
        let mObj2#0: Encoded(uint64,uint64) = tmp%1#0
        let (imObj2.a#0: uint64, imObj2.b#0: uint64) = (456u, b#0)
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: uint64) = tests/approvals/assignments.algo.ts::getVal()
        let tmp%2#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(awst_tmp%0#0, awst_tmp%1#0)
        let mObj3#0: Encoded(uint64,uint64) = tmp%2#0
        let tmp%3#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(a#0, b#0)
        let mObj4#0: Encoded(uint64,uint64) = tmp%3#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(m: Encoded(len+((uint64))[])) -> void:
    block@0: // L56
        let array_item%0#0: Encoded((uint64)) = extract_value(m#0, 0u)
        let tuple_item%0#0: Encoded(uint64) = extract_value(array_item%0#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(tuple_item%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let a1#0: uint64 = values%0#0
        let tmp%0#0: Encoded(uint64) = bytes_encode<(uint64)>(213u)
        let tmp%1#0: Encoded((uint64)) = bytes_encode<((uint64))>(tmp%0#0)
        let encoded_array%0#0: Encoded(len+((uint64))[]) = bytes_encode<(len+((uint64))[])>(tmp%1#0)
        let m#1: Encoded(len+((uint64))[]) = encoded_array%0#0
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L7
        return 