{
    "name": "AssignmentsAlgo",
    "structs": {
        "Object3C0E3B9F": [
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "minBalance",
                "type": "uint64"
            }
        ],
        "Object3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ],
        "ReadonlyObject3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testPrimitives",
            "args": [
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAccountDestructure",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Object3C0E3B9F"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayDestructure",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "i_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64[]",
                    "name": "m_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayNarrowing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "m_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testTupleToArray",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "m_t"
                },
                {
                    "type": "(uint64,uint64)",
                    "name": "i_t"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNested",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "i_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDestructureObj",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "Object3EB715E7",
                    "name": "m"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "ReadonlyObject3EB715E7",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testObjLiteralNarrowing",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMixed",
            "args": [
                {
                    "type": "((uint64))[]",
                    "name": "m"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        27
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        193
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        869
                    ],
                    "errorMessage": "a5 length should be 3"
                },
                {
                    "pc": [
                        710,
                        713
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        863,
                        908,
                        1167,
                        1249,
                        1311
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1450
                    ],
                    "errorMessage": "getVal should only be called once"
                },
                {
                    "pc": [
                        1461
                    ],
                    "errorMessage": "getVal should still be called once even though its result is not used"
                },
                {
                    "pc": [
                        746,
                        761,
                        922,
                        937,
                        954,
                        971,
                        997,
                        1013,
                        1029,
                        1045,
                        1059,
                        1075,
                        1131,
                        1157,
                        1213,
                        1239,
                        1283,
                        1305,
                        1334,
                        1368,
                        1385,
                        1419
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        461
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        292,
                        316,
                        345,
                        421,
                        483,
                        545,
                        581,
                        663,
                        1113,
                        1195,
                        1265,
                        1331,
                        1382
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        557
                    ],
                    "errorMessage": "invalid number of bytes for Object3EB715E7"
                },
                {
                    "pc": [
                        593
                    ],
                    "errorMessage": "invalid number of bytes for ReadonlyObject3EB715E7"
                },
                {
                    "pc": [
                        672
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<Object7CFAF5D6>"
                },
                {
                    "pc": [
                        513
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<uint64>>"
                },
                {
                    "pc": [
                        301,
                        325,
                        354
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<uint64>"
                },
                {
                    "pc": [
                        389
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>"
                },
                {
                    "pc": [
                        380
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<uint64,uint64>"
                },
                {
                    "pc": [
                        259,
                        309,
                        362,
                        639,
                        648
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        536,
                        572
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))"
                },
                {
                    "pc": [
                        469
                    ],
                    "errorMessage": "invalid tail pointer for (len+(len+uint64[])[])"
                },
                {
                    "pc": [
                        531,
                        567
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        814
                    ],
                    "errorMessage": "logAndReturn called 3 times"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAECAIAAUIAAEIAADEbJBNBAKRCAAAxGSQSRDEYJBNBAJJCAAA2GgCABHAuoQiABO3ahemABFsvdxOABJDMyz2ABNi+k7+ABFo/7FqABCek82eABNbJ9IaABG4DrQxPCY4JADoANAAuACgAIgAcABYAEAAKQgAAQgAAQgAAAIgCDUL/84gB7UL/7YgBeUL/54gBCEL/4YgA10L/24gAsUL/1YgAdkL/z4gAXkL/yYgAR0L/w0L/wzEZJBIxGCQSEESIBPklQ0IAACQkP4lCAAAkPolCAAAkPiUIJE8BP4lCAACI/+4lI4mKAQFCAACI/+KL/xawi/+JQgAANhoBSRUiEkQXiAGeJUNCAACIAaqABBUffHVPAVCwJUNCAAA2GgFJJFkiCyMISwEVEkQ2GgJJFSISRBc2GgNJJFkiCyMISwEVEkRPAk8CTwKIAYglQ0IAADYaAUkkWSILIwhLARUSRDYaAkkVIhJEF4gCYSVDQgAANhoBSRWBEBJENhoCSRWBEBJESSQiWBdOASIiWBdPAk8CTwKIAp4lQ0IAADYaAUcCJFlJTgIjC04BSRVOASNPAlIkQgAASUsEDEEANkIAAEkjC0sCSU4CTwFZSUsFSU4EEkRLARVOAU8CTwFPAlIkWSILIwgIRQNCAABJJQhFAUL/w0sCIwhLBUlOAhUSRIgDHCVDQgAANhoBSRVOAUkiWUmBChJESwFPAU8DUiRZJQsjCIEKCEsBFRJENhoCSRVOAUkiWUmBChJESwFPAU8DUiRZJQsjCIEKCEsBFRJESSQiWBdOAUkiWU4BSRVOAU8CTwJSVwIATwJPAk8CiAMdJUNCAAA2GgFJFSISRBc2GgJJFSISRBeIAwolQ0IAADYaAUkkWSILIwhLARUSRIgDEyVDigEAQgAAi/8jJQiBAxJEi/8SRIlCAAAyCklzAE4BTgJEcwFETwEWgABPAVBPARZQiYoDAEIAAIv9FYv9I08CUiUiCyJYF4v9FYv9I08CUiUiCyJYFxJEiP3Hi/6I/eSL/oj934v+iP3aTgJLAU4DSU4ETwEWgABPAVBPARZQTwEWUIj9o4EDEkRPAYv+EkRPAYv+EkSBA4EDEksBJCJYF4v+EhBLASIiWBeL/hIQTwGBECJYF4v+EhBEgQOBAxJEJSUSRIv+iP16i/6I/XWL/oj9cE4CTgEjIxJPAYv+EhBPAYv+EhBEi/8Vi/8jTwJSJCILIlgXi/8Vi/8jTwJSJSILIlgXTgGL/xWL/yNPAlIkIgsiWBcSRIv/FYv/I08CUiUiCyJYFxJEiYoCAEIAAIv+i/4Vi/4jTwJSJCILIlgXJQgWJCILIwiL/k8BTwJdjP5JFU4BSSNPA1IkIgsiWBcjCBYkIgsjCE8CTwFPAl2L/hWL/iNPAlIkIgsiWBdOAUkVTgEjTwJSJCILIlgXE0SJigMAQgAAi/0kIlgXi/0iIlgXIxZXBgJPAhZQTwEWUEkkWSMSTgFJFU4BSSNPA1IkIgsiWBeL/SQiWBcSTwIQTgFJFU4BI08CUiUiCyJYF4v9IiJYFxIQRIv9JCJYF4v9IiJYFyMWVwYCTwIWUE8BFlBJJFkjEk4BSRVOAUkjTwNSJCILIlgXi/0kIlgXEk8CEE4BSRVOASNPAlIlIgsiWBeL/SIiWBcSEEQjFlcGAov+FlCL/xZQSSRZIxJOAUkVTgFJI08DUiQiCyJYF4v+Ek8CEE4BSRVOASNPAlIlIgsiWBeL/xIQRImKAQBCAACL/xWL/yNPAlKL/yRZJA1EJCMLSwFPAVlKWSILIwhPAk8CTwJYSRVOASNPAlIkIgsiWBeL/xWL/yNPAlKL/yRZJA1EJCMLSwFPAVlKWSILIwhPAk8CTwJYSRVOASNPAlIkIgsiWBcSRImKAwBCAACJigIAQgAAiPsniPs9TgGI+yYlEkSI+zJOAYj7GyMSRImKAQBCAACJQgAAiQ==",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}