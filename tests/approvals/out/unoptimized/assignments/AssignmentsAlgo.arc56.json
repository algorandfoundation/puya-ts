{
    "name": "AssignmentsAlgo",
    "structs": {
        "Object3C0E3B9F": [
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "minBalance",
                "type": "uint64"
            }
        ],
        "Object3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ],
        "ReadonlyObject3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testPrimitives",
            "args": [
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAccountDestructure",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Object3C0E3B9F"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayDestructure",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "i_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64[]",
                    "name": "m_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayNarrowing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "m_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testTupleToArray",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "m_t"
                },
                {
                    "type": "(uint64,uint64)",
                    "name": "i_t"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNested",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "i_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDestructureObj",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "Object3EB715E7",
                    "name": "m"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "ReadonlyObject3EB715E7",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testObjLiteralNarrowing",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMixed",
            "args": [
                {
                    "type": "((uint64))[]",
                    "name": "m"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        27
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        193
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        707
                    ],
                    "errorMessage": "a5 length should be 3"
                },
                {
                    "pc": [
                        548,
                        551
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        701,
                        746,
                        1005,
                        1087,
                        1149
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1288
                    ],
                    "errorMessage": "getVal should only be called once"
                },
                {
                    "pc": [
                        1299
                    ],
                    "errorMessage": "getVal should still be called once even though its result is not used"
                },
                {
                    "pc": [
                        584,
                        599,
                        760,
                        775,
                        792,
                        809,
                        835,
                        851,
                        867,
                        883,
                        897,
                        913,
                        969,
                        995,
                        1051,
                        1077,
                        1121,
                        1143,
                        1172,
                        1206,
                        1223,
                        1257
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        510
                    ],
                    "errorMessage": "invalid number of bytes for (len+((uint64))[])"
                },
                {
                    "pc": [
                        301,
                        325,
                        354
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint64[])"
                },
                {
                    "pc": [
                        380,
                        389
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64)"
                },
                {
                    "pc": [
                        259,
                        309,
                        362,
                        477,
                        486
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        652
                    ],
                    "errorMessage": "logAndReturn called 3 times"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBiIG1haW5fYmxvY2tAMAoKbWFpbl9ibG9ja0AwOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CyAECAACAUIAAEIAADEbIxNBAKRCAAAxGSMSRDEYIxNBAJJCAAA2GgCABHAuoQiABO3ahemABFsvdxOABJDMyz2ABNi+k7+ABFo/7FqABCek82eABNbJ9IaABG4DrQxPCY4JADoANAAuACgAIgAcABYAEAAKQgAAQgAAQgAAAIgBa0L/84gBS0L/7YgBGUL/54gBCEL/4YgA10L/24gAsUL/1YgAdkL/z4gAXkL/yYgAR0L/w0L/wzEZIxIxGCMSEESIBFclQ0IAACMjP4lCAAAjPolCAAAjPiUII08BP4lCAACI/+4lJImKAQFCAACI/+KL/xawi/+JQgAANhoBSRUiEkQXiAD8JUNCAACIAQiABBUffHVPAVCwJUNCAAA2GgFJI1kiCyQISwEVEkQ2GgJJFSISRBc2GgNJI1kiCyQISwEVEkRPAk8CTwKIAOYlQ0IAADYaAUkjWSILJAhLARUSRDYaAkkVIhJEF4gBvyVDQgAANhoBSRWBEBJENhoCSRWBEBJESSMiWBdOASIiWBdPAk8CTwKIAfwlQ0IAADYaAYgC2iVDQgAANhoBNhoCSSMiWBdOAUkiWU4BSRVOAU8CTwJSVwIATwJPAk8CiAMdJUNCAAA2GgFJFSISRBc2GgJJFSISRBeIAwolQ0IAADYaAUkjWSILJAhLARUSRIgDEyVDigEAQgAAi/8kJQiBAxJEi/8SRIlCAAAyCklzAE4BTgJEcwFETwEWgABPAVBPARZQiYoDAEIAAIv9FYv9JE8CUiUiCyJYF4v9FYv9JE8CUiUiCyJYFxJEiP5pi/6I/oaL/oj+gYv+iP58TgJLAU4DSU4ETwEWgABPAVBPARZQTwEWUIj+RYEDEkRPAYv+EkRPAYv+EkSBA4EDEksBIyJYF4v+EhBLASIiWBeL/hIQTwGBECJYF4v+EhBEgQOBAxJEJSUSRIv+iP4ci/6I/heL/oj+Ek4CTgEkJBJPAYv+EhBPAYv+EhBEi/8Vi/8kTwJSIyILIlgXi/8Vi/8kTwJSJSILIlgXTgGL/xWL/yRPAlIjIgsiWBcSRIv/FYv/JE8CUiUiCyJYFxJEiYoCAEIAAIv+i/4Vi/4kTwJSIyILIlgXJQgWIyILJAiL/k8BTwJdjP5JFU4BSSRPA1IjIgsiWBckCBYjIgskCE8CTwFPAl2L/hWL/iRPAlIjIgsiWBdOAUkVTgEkTwJSIyILIlgXE0SJigMAQgAAi/0jIlgXi/0iIlgXJBZXBgJPAhZQTwEWUEkjWSQSTgFJFU4BSSRPA1IjIgsiWBeL/SMiWBcSTwIQTgFJFU4BJE8CUiUiCyJYF4v9IiJYFxIQRIv9IyJYF4v9IiJYFyQWVwYCTwIWUE8BFlBJI1kkEk4BSRVOAUkkTwNSIyILIlgXi/0jIlgXEk8CEE4BSRVOASRPAlIlIgsiWBeL/SIiWBcSEEQkFlcGAov+FlCL/xZQSSNZJBJOAUkVTgFJJE8DUiMiCyJYF4v+Ek8CEE4BSRVOASRPAlIlIgsiWBeL/xIQRImKAQBCAACL/xWL/yRPAlKL/yNZIw1EIyQLSwFPAVlKWSILJAhPAk8CTwJYSRVOASRPAlIjIgsiWBeL/xWL/yRPAlKL/yNZIw1EIyQLSwFPAVlKWSILJAhPAk8CTwJYSRVOASRPAlIjIgsiWBcSRImKAwBCAACJigIAQgAAiPvJiPvfTgGI+8glEkSI+9ROAYj7vSQSRImKAQBCAACJQgAAiQ==",
        "clear": "C0IAAIEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}