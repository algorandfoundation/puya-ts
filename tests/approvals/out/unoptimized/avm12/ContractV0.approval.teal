#pragma version 12
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/avm12.algo.ts:49-50
    // @contract({ avmVersion: 12 })
    // class ContractV0 extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@5
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/avm12.algo.ts:49-50
    // @contract({ avmVersion: 12 })
    // class ContractV0 extends Contract {
    txna ApplicationArgs 0
    pushbytes 0xa0e81872 // method "update()void"
    uncover 1
    match main_update_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // tests/approvals/avm12.algo.ts:49-50
    // @contract({ avmVersion: 12 })
    // class ContractV0 extends Contract {
    err

main_update_route@3:
    // tests/approvals/avm12.algo.ts:51
    // @abimethod({ allowActions: 'UpdateApplication' })
    txn OnCompletion
    pushint 4 // UpdateApplication
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be UpdateApplication && can only call when not creating
    callsub update
    b main_switch_case_next@4

main___algots__.defaultCreate@5:
    // tests/approvals/avm12.algo.ts:49-50
    // @contract({ avmVersion: 12 })
    // class ContractV0 extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/avm12.algo.ts::ContractV0.update[routing]() -> void:
update:
    b update_block@0

update_block@0:
    // tests/approvals/avm12.algo.ts:51
    // @abimethod({ allowActions: 'UpdateApplication' })
    callsub tests/approvals/avm12.algo.ts::ContractV0.update
    intc_1 // 1
    return


// tests/approvals/avm12.algo.ts::ContractV0.update() -> void:
tests/approvals/avm12.algo.ts::ContractV0.update:
    b tests/approvals/avm12.algo.ts::ContractV0.update_block@0

tests/approvals/avm12.algo.ts::ContractV0.update_block@0:
    // tests/approvals/avm12.algo.ts:53
    // assert(Txn.rejectVersion === 1, 'can only update if caller expects this to be currently be v0')
    txn RejectVersion
    intc_1 // 1
    ==
    assert // can only update if caller expects this to be currently be v0
    retsub


// tests/approvals/avm12.algo.ts::ContractV0.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
