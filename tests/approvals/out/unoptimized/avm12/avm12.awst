contract Avm12Contract
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  testFalconVerify(): void
  {
    assert(!falcon_verify(0x, 0xchecked_maybe(#[reinterpret_cast<bytes[1793]>(($0 = bzero(1793))), len($0) == 1793], comment=Length must be 1793)))
  }
  
  testRejectVersion(): void
  {
    compiledV0: CompiledContract{ approvalProgram: readonly [bytes, bytes], clearStateProgram: readonly [bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/avm12.algo.ts::ContractV0
    v0Txn: inner_transaction_appl = submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, OnCompletion=0, ApprovalProgramPages=compiledV0.approvalProgram, ClearStateProgramPages=compiledV0.clearStateProgram, GlobalNumUint=compiledV0.globalUints, GlobalNumByteSlice=compiledV0.globalBytes, LocalNumByteSlice=compiledV0.localBytes, LocalNumUint=compiledV0.localUints, ExtraProgramPages=compiledV0.extraProgramPages))
    app: application = v0Txn.CreatedApplicationID
    assert(checked_maybe(app_params_get<AppVersion>(app), comment=application exists) == 0, comment=should be version 0)
    compiledV1: CompiledContract{ approvalProgram: readonly [bytes, bytes], clearStateProgram: readonly [bytes, bytes], extraProgramPages: uint64, globalUints: uint64, globalBytes: uint64, localUints: uint64, localBytes: uint64 } = compile(tests/approvals/avm12.algo.ts::ContractV1
    v1Txn: ReadonlyObject90CBA08A{ itxn: inner_transaction_appl } = #{ itxn: ($1 = #{ itxn: submit_txn(create_inner_transaction(Fee=0, TypeEnum=appl, RejectVersion=1, ApplicationID=app, OnCompletion=4, ApprovalProgramPages=#[compiledV1.approvalProgram.0, compiledV1.approvalProgram.1], ClearStateProgramPages=#[compiledV1.clearStateProgram.0, compiledV1.clearStateProgram.1], ExtraProgramPages=compiledV1.extraProgramPages, ApplicationArgs=#[Method("update()void")])) }).itxn }
    assert(checked_maybe(app_params_get<AppVersion>(v1Txn.itxn.ApplicationID), comment=application exists) == 1, comment=should be version 1)
    submit_txn(create_inner_transaction(Fee=0, TypeEnum=6, ApplicationArgs=#[Method("delete()void")], OnCompletion=5, ApplicationID=app, RejectVersion=2))
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}
contract ContractV0
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  update(): void
  {
    assert(txn<RejectVersion>() == 1, comment=can only update if caller expects this to be currently be v0)
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}
contract ContractV1
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  delete(): void
  {
    assert(txn<RejectVersion>() == 2, comment=can only update if caller expects this to be currently be v1)
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}