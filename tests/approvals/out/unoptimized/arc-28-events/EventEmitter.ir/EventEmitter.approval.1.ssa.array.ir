main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L13
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emitSwapped(uint8,uint8)void" => block@3, method "emitCustom(string,bool)void" => block@4, method "emitDynamicBytes(byte[],byte[])void" => block@5, * => block@6}
    block@3: // emitSwapped_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(reinterpret_Encoded(uint8)%0#0, reinterpret_Encoded(uint8)%1#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // emitCustom_route_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%11#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let tmp%12#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(tmp%11#0, tmp%12#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // emitDynamicBytes_route_L40
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%17#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(tmp%17#0, reinterpret_Encoded(len+uint8[])%1#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@6: // switch_case_default_L13
        goto block@7
    block@7: // switch_case_next_L13
        goto block@12
    block@8: // bare_routing_L13
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L13
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (== tmp%19#0 0u)
        (assert tmp%20#0) // can only call when creating
        tests/approvals/arc-28-events.algo.ts::EventEmitter.__algots__.defaultCreate()
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@10: // switch_case_default_L13
        goto block@11
    block@11: // switch_case_next_L13
        goto block@12
    block@12: // after_if_else_L13
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3 <- block@9, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(a: Encoded(uint8), b: Encoded(uint8)) -> void:
    block@0: // L14
        let array%encoded%0#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%1#1: Encoded(uint8,uint8) = (concat array%encoded%0#1 a#0)
        let array%encoded%2#1: Encoded(uint8,uint8) = (concat array%encoded%1#1 0x)
        let tmp%0#0: Encoded(uint8,uint8) = array%encoded%2#1
        let event%0#0: bytes = (concat method "Swappednull" tmp%0#0)
        (log event%0#0)
        let x.a#0: Encoded(uint8) = b#0
        let x.b#0: Encoded(uint8) = a#0
        let array%encoded%3#1: Encoded(uint8) = (concat 0x x.a#0)
        let array%encoded%4#1: Encoded(uint8,uint8) = (concat array%encoded%3#1 x.b#0)
        let array%encoded%5#1: Encoded(uint8,uint8) = (concat array%encoded%4#1 0x)
        let tmp%1#0: Encoded(uint8,uint8) = array%encoded%5#1
        let event%1#0: bytes = (concat method "Swappednull" tmp%1#0)
        (log event%1#0)
        let array%encoded%6#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%7#1: Encoded(uint8,uint8) = (concat array%encoded%6#1 a#0)
        let array%encoded%8#1: Encoded(uint8,uint8) = (concat array%encoded%7#1 0x)
        let tmp%2#0: Encoded(uint8,uint8) = array%encoded%8#1
        let y#0: Encoded(uint8,uint8) = tmp%2#0
        let event%2#0: bytes = (concat method "SwappedArc4null" y#0)
        (log event%2#0)
        let array%encoded%9#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%10#1: Encoded(uint8,uint8) = (concat array%encoded%9#1 a#0)
        let array%encoded%11#1: Encoded(uint8,uint8) = (concat array%encoded%10#1 0x)
        let tmp%3#0: Encoded(uint8,uint8) = array%encoded%11#1
        let event%3#0: bytes = (concat method "Swappednull" tmp%3#0)
        (log event%3#0)
        let array%encoded%12#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%13#1: Encoded(uint8,uint8) = (concat array%encoded%12#1 a#0)
        let array%encoded%14#1: Encoded(uint8,uint8) = (concat array%encoded%13#1 0x)
        let tmp%4#0: Encoded(uint8,uint8) = array%encoded%14#1
        let event%4#0: bytes = (concat method "Swappednull" tmp%4#0)
        (log event%4#0)
        let array%encoded%15#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%16#1: Encoded(uint8,uint8) = (concat array%encoded%15#1 b#0)
        let array%encoded%17#1: Encoded(uint8,uint8) = (concat array%encoded%16#1 0x)
        let tmp%5#0: Encoded(uint8,uint8) = array%encoded%17#1
        let array%encoded%18#1: Encoded((uint8,uint8)) = (concat 0x tmp%5#0)
        let array%encoded%19#1: Encoded((uint8,uint8),uint8) = (concat array%encoded%18#1 a#0)
        let array%encoded%20#1: Encoded((uint8,uint8),uint8) = (concat array%encoded%19#1 0x)
        let tmp%6#0: Encoded((uint8,uint8),uint8) = array%encoded%20#1
        let event%5#0: bytes = (concat method "Swappednull" tmp%6#0)
        (log event%5#0)
        let array%encoded%21#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%22#1: Encoded(uint8,uint8) = (concat array%encoded%21#1 b#0)
        let array%encoded%23#1: Encoded(uint8,uint8) = (concat array%encoded%22#1 0x)
        let tmp%7#0: Encoded(uint8,uint8) = array%encoded%23#1
        let array%encoded%24#1: Encoded((uint8,uint8)) = (concat 0x tmp%7#0)
        let array%encoded%25#1: Encoded((uint8,uint8),uint8) = (concat array%encoded%24#1 a#0)
        let array%encoded%26#1: Encoded((uint8,uint8),uint8) = (concat array%encoded%25#1 0x)
        let tmp%8#0: Encoded((uint8,uint8),uint8) = array%encoded%26#1
        let event%6#0: bytes = (concat method "Swappednull" tmp%8#0)
        (log event%6#0)
        let array%encoded%27#1: Encoded(uint8) = (concat 0x b#0)
        let array%encoded%28#1: Encoded(uint8,uint8) = (concat array%encoded%27#1 b#0)
        let array%as_bytes%0#1: bytes[8] = (itob 2u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%29#1: bytes = (concat array%len_u16%0#1 array%encoded%28#1)
        let array%encoded%30#1: Encoded(len+uint8[]) = (concat array%encoded%29#1 0x)
        let tmp%9#0: Encoded(len+uint8[]) = array%encoded%30#1
        let array%tail%0#1: bytes = (concat 0x tmp%9#0)
        let array%data_length%0#1: uint64 = (len tmp%9#0)
        let array%current_tail_offset%0#1: uint64 = (+ 3u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 3u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%31#1: Encoded((len+uint8[])) = (concat 0x array%offset_as_uint16%0#1)
        let array%encoded%32#1: Encoded((len+uint8[]),uint8) = (concat array%encoded%31#1 a#0)
        let array%encoded%33#1: Encoded((len+uint8[]),uint8) = (concat array%encoded%32#1 array%tail%0#1)
        let tmp%10#0: Encoded((len+uint8[]),uint8) = array%encoded%33#1
        let event%7#0: bytes = (concat method "Swappednull" tmp%10#0)
        (log event%7#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(arg0: string, arg1: bool) -> void:
    block@0: // L35
        let array%length%0#1: uint64 = (len arg0#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 arg0#0)
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%0#1
        let array%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u arg1#0)
        let array%as_Encoded(bool8)%0#1: Encoded(bool8) = array%encoded_bool%0#1
        let tmp%1#0: Encoded(bool8) = array%as_Encoded(bool8)%0#1
        let array%tail%0#1: bytes = (concat 0x tmp%0#0)
        let array%data_length%0#1: uint64 = (len tmp%0#0)
        let array%current_tail_offset%0#1: uint64 = (+ 3u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 3u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%0#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%0#1)
        let array%encoded%1#1: Encoded((len+utf8[]),bool1) = (concat array%encoded%0#1 tmp%1#0)
        let array%encoded%2#1: Encoded((len+utf8[]),bool1) = (concat array%encoded%1#1 array%tail%0#1)
        let tmp%2#0: Encoded((len+utf8[]),bool1) = array%encoded%2#1
        let event%0#0: bytes = (concat method "Customnull" tmp%2#0)
        (log event%0#0)
        let array%length%1#1: uint64 = (len arg0#0)
        let array%as_bytes%2#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 arg0#0)
        let array%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = array%encoded_value%1#1
        let tmp%3#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%1#1
        let array%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u arg1#0)
        let array%as_Encoded(bool8)%1#1: Encoded(bool8) = array%encoded_bool%1#1
        let tmp%4#0: Encoded(bool8) = array%as_Encoded(bool8)%1#1
        let array%tail%1#1: bytes = (concat 0x tmp%3#0)
        let array%data_length%1#1: uint64 = (len tmp%3#0)
        let array%current_tail_offset%1#1: uint64 = (+ 3u array%data_length%1#1)
        let array%as_bytes%3#1: bytes[8] = (itob 3u)
        let array%offset_as_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%3#1)
        let array%encoded%3#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%1#1)
        let array%encoded%4#1: Encoded((len+utf8[]),bool1) = (concat array%encoded%3#1 tmp%4#0)
        let array%encoded%5#1: Encoded((len+utf8[]),bool1) = (concat array%encoded%4#1 array%tail%1#1)
        let tmp%5#0: Encoded((len+utf8[]),bool1) = array%encoded%5#1
        let event%1#0: bytes = (concat method "Customnull" tmp%5#0)
        (log event%1#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(x: bytes, y: Encoded(len+uint8[])) -> void:
    block@0: // L40
        let array%length%0#1: uint64 = (len x#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 x#0)
        let array%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = array%encoded_value%0#1
        let tmp%0#0: Encoded(len+uint8[]) = array%as_Encoded(len+uint8[])%0#1
        let array%tail%0#1: bytes = (concat 0x tmp%0#0)
        let array%data_length%0#1: uint64 = (len tmp%0#0)
        let array%current_tail_offset%0#1: uint64 = (+ 4u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 4u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%0#1: Encoded((len+uint8[])) = (concat 0x array%offset_as_uint16%0#1)
        let array%tail%1#1: bytes = (concat array%tail%0#1 y#0)
        let array%data_length%1#1: uint64 = (len y#0)
        let array%current_tail_offset%1#1: uint64 = (+ array%current_tail_offset%0#1 array%data_length%1#1)
        let array%as_bytes%2#1: bytes[8] = (itob array%current_tail_offset%0#1)
        let array%offset_as_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded%1#1: Encoded((len+uint8[]),(len+uint8[])) = (concat array%encoded%0#1 array%offset_as_uint16%1#1)
        let array%encoded%2#1: Encoded((len+uint8[]),(len+uint8[])) = (concat array%encoded%1#1 array%tail%1#1)
        let tmp%1#0: Encoded((len+uint8[]),(len+uint8[])) = array%encoded%2#1
        let event%0#0: bytes = (concat method "DBnull" tmp%1#0)
        (log event%0#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.__algots__.defaultCreate() -> void:
    block@0: // L13
        return 