#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock 0xc2e9596e
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // tests/approvals/arc4-method-selector.algo.ts:20
    // class ContractTwo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algots__.defaultCreate@10
    b main_abi_routing@2

main_abi_routing@2:
    // tests/approvals/arc4-method-selector.algo.ts:20
    // class ContractTwo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@8
    b main_call_NoOp@3

main_call_NoOp@3:
    // tests/approvals/arc4-method-selector.algo.ts:20
    // class ContractTwo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x438c64f3 // method "renamedSomeMethod()void"
    pushbytes 0xf59e3cc4 // method "test()bool"
    pushbytes 0x523a6db2 // method "referenceTypes(pay,uint64,address,uint64,appl)void"
    uncover 3
    match main_renamedSomeMethod_route@4 main_test_route@5 main_referenceTypes_route@6
    b main_switch_case_next@7

main_switch_case_next@7:
    b main_after_if_else@9

main_after_if_else@9:
    b main_after_if_else@11

main_after_if_else@11:
    // tests/approvals/arc4-method-selector.algo.ts:20
    // class ContractTwo extends Contract {
    err

main_referenceTypes_route@6:
    // tests/approvals/arc4-method-selector.algo.ts:28
    // referenceTypes(pay: gtxn.PaymentTxn, asset: Asset, account: Account, app: Application, appTxn: gtxn.ApplicationCallTxn) {}
    callsub referenceTypes
    b main_switch_case_next@7

main_test_route@5:
    // tests/approvals/arc4-method-selector.algo.ts:24
    // test() {
    callsub test
    b main_switch_case_next@7

main_renamedSomeMethod_route@4:
    // tests/approvals/arc4-method-selector.algo.ts:21
    // @abimethod({ name: 'renamedSomeMethod' })
    callsub someMethod
    b main_switch_case_next@7

main_create_NoOp@8:
    b main_after_if_else@9

main___algots__.defaultCreate@10:
    // tests/approvals/arc4-method-selector.algo.ts:20
    // class ContractTwo extends Contract {
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    return


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod[routing]() -> void:
someMethod:
    b someMethod_block@0

someMethod_block@0:
    // tests/approvals/arc4-method-selector.algo.ts:21
    // @abimethod({ name: 'renamedSomeMethod' })
    callsub tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod
    intc_1 // 1
    return


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // tests/approvals/arc4-method-selector.algo.ts:24
    // test() {
    callsub tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes[routing]() -> void:
referenceTypes:
    b referenceTypes_block@0

referenceTypes_block@0:
    // tests/approvals/arc4-method-selector.algo.ts:28
    // referenceTypes(pay: gtxn.PaymentTxn, asset: Asset, account: Account, app: Application, appTxn: gtxn.ApplicationCallTxn) {}
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    callsub tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes
    intc_1 // 1
    return


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod() -> void:
tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod:
    b tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod_block@0

tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod_block@0:
    retsub


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test() -> uint64:
tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test:
    b tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test_block@0

tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test_block@0:
    // tests/approvals/arc4-method-selector.algo.ts:25
    // return methodSelector(ContractOne.prototype.someMethod) === methodSelector('someMethod()uint64')
    bytec_0 // method "someMethod()uint64"
    bytec_0 // method "someMethod()uint64"
    ==
    retsub


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes(pay: uint64, asset: uint64, account: bytes, app: uint64, appTxn: uint64) -> void:
tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes:
    // tests/approvals/arc4-method-selector.algo.ts:28
    // referenceTypes(pay: gtxn.PaymentTxn, asset: Asset, account: Account, app: Application, appTxn: gtxn.ApplicationCallTxn) {}
    proto 5 0
    b tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes_block@0

tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes_block@0:
    retsub


// tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    b __algots__.defaultCreate_block@0

__algots__.defaultCreate_block@0:
    retsub
