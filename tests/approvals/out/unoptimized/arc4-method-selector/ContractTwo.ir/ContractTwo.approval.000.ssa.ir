main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__() -> bool:
    block@0: // L20
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L20
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@7
    block@2: // call_NoOp_L20
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "renamedSomeMethod()void" => block@3, method "test()bool" => block@4, method "referenceTypes(pay,uint64,address,uint64,appl)void" => block@5, * => block@6}
    block@3: // renamedSomeMethod_route_L21
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod[routing]()
        goto block@6
    block@4: // test_route_L24
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test[routing]()
        goto block@6
    block@5: // referenceTypes_route_L28
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes[routing]()
        goto block@6
    block@6: // switch_case_next_L20
        goto block@8
    block@7: // create_NoOp_L20
        goto block@8
    block@8: // after_if_else_L20
        goto block@10
    block@9: // __algots__.defaultCreate_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L20
        exit 0u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod[routing]() -> void:
    block@0: // L21
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod()
        exit 1u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test[routing]() -> void:
    block@0: // L24
        let tmp%0#0: bool = tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test()
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes[routing]() -> void:
    block@0: // L28
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%1#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%1#0
        let tmp%2#0: uint64 = decode_bytes<uint64>(as_Encoded(uint64)%0#0)
        let tmp%3#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%3#0)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for uint8[32]
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%3#0
        let tmp%4#0: account = decode_bytes<account>(as_Encoded(uint8[32])%0#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%5#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%5#0
        let tmp%6#0: uint64 = decode_bytes<uint64>(as_Encoded(uint64)%1#0)
        let tmp%7#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 appl)
        (assert gtxn_type_matches%1#0) // transaction type is appl
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes(gtxn_idx%0#0, tmp%2#0, tmp%4#0, tmp%6#0, gtxn_idx%1#0)
        exit 1u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod() -> void:
    block@0: // L21
        return 

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test() -> bool:
    block@0: // L24
        let tmp%0#0: bool = (== method "someMethod()uint64" method "someMethod()uint64")
        return tmp%0#0

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes(pay: uint64, asset: uint64, account: account, app: uint64, appTxn: uint64) -> void:
    block@0: // L28
        return 

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__algots__.defaultCreate() -> void:
    block@0: // L20
        return 