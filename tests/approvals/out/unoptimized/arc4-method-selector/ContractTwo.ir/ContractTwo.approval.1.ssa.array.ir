main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L20
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "renamedSomeMethod()void" => block@3, method "test()bool" => block@4, method "referenceTypes(pay,asset,account,application,appl)void" => block@5, * => block@6}
    block@3: // renamedSomeMethod_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod()
        let tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // test_route_L24
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let to_encode%0#0: bool = tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test()
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%11#0)
        let tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // referenceTypes_route_L28
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let tmp%16#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%16#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%18#0: uint64 = ((txnas Assets) tmp%17#0)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%19#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let tmp%20#0: bytes[32] = ((txnas Accounts) tmp%19#0)
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%21#0: uint64 = (btoi reinterpret_bytes[1]%2#0)
        let tmp%22#0: uint64 = ((txnas Applications) tmp%21#0)
        let tmp%23#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%23#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 appl)
        (assert gtxn_type_matches%1#0) // transaction type is appl
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes(gtxn_idx%0#0, tmp%18#0, tmp%20#0, tmp%22#0, gtxn_idx%1#0)
        let tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@6: // switch_case_default_L20
        goto block@7
    block@7: // switch_case_next_L20
        goto block@12
    block@8: // bare_routing_L20
        let tmp%24#0: uint64 = (txn OnCompletion)
        switch tmp%24#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L20
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (== tmp%25#0 0u)
        (assert tmp%26#0) // can only call when creating
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__algots__.defaultCreate()
        let tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@10: // switch_case_default_L20
        goto block@11
    block@11: // switch_case_next_L20
        goto block@12
    block@12: // after_if_else_L20
        let tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#3 <- block@9, tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.someMethod() -> void:
    block@0: // L21
        return 

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.test() -> bool:
    block@0: // L24
        let tmp%0#0: bool = (== method "someMethod()uint64" method "someMethod()uint64")
        return tmp%0#0

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes(pay: uint64, asset: uint64, account: bytes[32], app: uint64, appTxn: uint64) -> void:
    block@0: // L28
        return 

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.__algots__.defaultCreate() -> void:
    block@0: // L20
        return 