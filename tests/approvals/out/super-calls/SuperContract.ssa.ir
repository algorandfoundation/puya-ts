contract tests/approvals/super-calls.algo.ts::SuperContract:
    program approval:
        subroutine tests/approvals/super-calls.algo.ts::SuperContract.approvalProgram() -> bool:
            block@0: // L7
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/super-calls.algo.ts::SuperContract.constructor()
                goto block@2
            block@2: // after_if_else_L1
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "g1")
                (assert maybe_exists%0#0) // check GlobalState exists
                let tmp%0#0: bool = (== maybe_value%0#0 1u)
                (assert tmp%0#0)
                return 1u
        
        subroutine tests/approvals/super-calls.algo.ts::SuperContract.constructor() -> void:
            block@0: // L4
                (app_global_put "g1" 1u)
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u