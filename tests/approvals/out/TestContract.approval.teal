#pragma version 10

tests/approvals/global-state.algo.ts::TestContract.approvalProgram:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub constructor

main_entrypoint@2:
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:22
    // assert(this.testState.hasValue, 'State should have value')
    int 0
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:11
    // testState = GlobalState({ initialValue: Uint64(2) })
    byte "testState"
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:22
    // assert(this.testState.hasValue, 'State should have value')
    app_global_get_ex
    bury 1
    assert // State should have value
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:23
    // assert(this.testState.value === 2, 'Value should equal 2')
    int 0
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:11
    // testState = GlobalState({ initialValue: Uint64(2) })
    byte "testState"
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:23
    // assert(this.testState.value === 2, 'Value should equal 2')
    app_global_get_ex
    assert // check GlobalState exists
    int 2
    ==
    assert // Value should equal 2
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:25
    // this.testState.value = op.btoi(Txn.applicationArgs(0))
    int 0
    txnas ApplicationArgs
    btoi
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:11
    // testState = GlobalState({ initialValue: Uint64(2) })
    byte "testState"
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:25
    // this.testState.value = op.btoi(Txn.applicationArgs(0))
    swap
    app_global_put
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:27
    // return true
    int 1
    return


// tests/approvals/global-state.algo.ts::TestContract.constructor() -> void:
constructor:
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:14
    // constructor() {
    proto 0 0
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:16
    // super()
    callsub tests/approvals/global-state.algo.ts::BaseTestContract.constructor
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:11
    // testState = GlobalState({ initialValue: Uint64(2) })
    byte "testState"
    int 2
    app_global_put
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:12
    // testState2 = GlobalState({ initialValue: Uint64(5), key: Bytes('TESTSTATE') })
    byte "TESTSTATE"
    int 5
    app_global_put
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:17
    // assert(this.baseTestState.value === 'testing 123', 'Base class state should be initialized after super call')
    int 0
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:5
    // baseTestState = GlobalState({ initialValue: 'testing 123' })
    byte "baseTestState"
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:17
    // assert(this.baseTestState.value === 'testing 123', 'Base class state should be initialized after super call')
    app_global_get_ex
    assert // check GlobalState exists
    byte "testing 123"
    ==
    assert // Base class state should be initialized after super call
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:18
    // this.noInitialInt.value = someValue * this.testState.value
    int 0
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:11
    // testState = GlobalState({ initialValue: Uint64(2) })
    byte "testState"
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:18
    // this.noInitialInt.value = someValue * this.testState.value
    app_global_get_ex
    assert // check GlobalState exists
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:15
    // const someValue: uint64 = 2 ** 56
    int 72057594037927936
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:18
    // this.noInitialInt.value = someValue * this.testState.value
    *
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:10
    // noInitialInt = GlobalState<uint64>()
    byte "noInitialInt"
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:18
    // this.noInitialInt.value = someValue * this.testState.value
    swap
    app_global_put
    retsub


// tests/approvals/global-state.algo.ts::BaseTestContract.constructor() -> void:
tests/approvals/global-state.algo.ts::BaseTestContract.constructor:
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:4
    // export class BaseTestContract extends Contract {
    proto 0 0
    // C:/Source/algorand/puya-ts/tests/approvals/global-state.algo.ts:5
    // baseTestState = GlobalState({ initialValue: 'testing 123' })
    byte "baseTestState"
    byte "testing 123"
    app_global_put
    retsub
