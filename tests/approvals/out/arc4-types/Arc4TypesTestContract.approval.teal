#pragma version 10

tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram:
    // tests/approvals/arc4-types.algo.ts:45
    // test(1, 2n, new UintN<256>(4))
    pushint 1 // 1
    pushbytess 0x02 0x04 // 0x02, 0x04
    callsub test
    // tests/approvals/arc4-types.algo.ts:47
    // testAddress()
    callsub testAddress
    // tests/approvals/arc4-types.algo.ts:49
    // return true
    pushint 1 // 1
    return


// tests/approvals/arc4-types.algo.ts::test(n: uint64, b: bytes, c: bytes) -> void:
test:
    // tests/approvals/arc4-types.algo.ts:5
    // function test(n: uint64, b: biguint, c: UintN<256>) {
    proto 3 0
    // tests/approvals/arc4-types.algo.ts:11
    // const a = new UintN<128>(b)
    frame_dig -2
    len
    pushint 16 // 16
    <=
    assert // overflow
    retsub


// tests/approvals/arc4-types.algo.ts::testAddress() -> void:
testAddress:
    // tests/approvals/arc4-types.algo.ts:31
    // function testAddress() {
    proto 0 0
    // tests/approvals/arc4-types.algo.ts:32
    // const a = new Address()
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // tests/approvals/arc4-types.algo.ts:33
    // const b = new Address(Txn.sender)
    txn Sender
    // tests/approvals/arc4-types.algo.ts:35
    // assert(!a.equals(b), 'Zero address should not match sender')
    ==
    !
    assert // Zero address should not match sender
    retsub
