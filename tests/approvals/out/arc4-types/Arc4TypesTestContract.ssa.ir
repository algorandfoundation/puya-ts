contract tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract:
    program approval:
        subroutine tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram() -> bool:
            block@0: // L26
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.constructor()
                goto block@2
            block@2: // after_if_else_L1
                tests/approvals/arc4-types.algo.ts::test(1u, 2b, 0x04)
                tests/approvals/arc4-types.algo.ts::test_arrays(0x41)
                return 1u
        
        subroutine tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.constructor() -> void:
            block@0: // L25
                return 
        
        subroutine tests/approvals/arc4-types.algo.ts::test(n: uint64, b: biguint, c: bytes) -> void:
            block@0: // L5
                let x#0: bytes = 0x04
                let x2#0: bytes = 0xff
                let y#0: bytes = 0x00
                let val_as_bytes%0#0: bytes = (itob n#0)
                let z#0: bytes = ((extract 7 1) val_as_bytes%0#0)
                let z_native#0: uint64 = (btoi z#0)
                let len_%0#0: uint64 = (len b#0)
                let no_overflow%0#0: bool = (<= len_%0#0 16u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 16u)
                let a#0: bytes = (b| b#0 b_zeros%0#0)
                let reinterpret_biguint%0#0: biguint = a#0
                let a_native#0: biguint = reinterpret_biguint%0#0
                return 
        
        subroutine tests/approvals/arc4-types.algo.ts::test_arrays(n: bytes) -> void:
            block@0: // L17
                let result%0#0: bytes = (concat 0x n#0)
                let result%1#0: bytes = (concat result%0#0 n#0)
                let result%2#0: bytes = (concat result%1#0 n#0)
                let array_data%0#0: bytes = (concat 0x0003 result%2#0)
                let myArray#0: bytes = array_data%0#0
                let result%3#0: bytes = (concat 0x n#0)
                let result%4#0: bytes = (concat result%3#0 n#0)
                let array_data%1#0: bytes = (concat 0x result%4#0)
                let myStatic#0: bytes = array_data%1#0
                let result%5#0: bytes = (concat 0x n#0)
                let result%6#0: bytes = (concat result%5#0 n#0)
                let result%7#0: bytes = (concat result%6#0 n#0)
                let array_data%2#0: bytes = (concat 0x result%7#0)
                let myStatic2#0: bytes = array_data%2#0
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u