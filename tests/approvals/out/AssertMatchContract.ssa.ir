contract tests/approvals/assert-match.algo.ts::AssertMatchContract:
    program approval:
        subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.approvalProgram() -> bool:
            block@0: // L15
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L14
                tests/approvals/assert-match.algo.ts::AssertMatchContract.constructor()
                goto block@2
            block@2: // entrypoint_L14
                let txn#0: uint64 = 1u
                tests/approvals/assert-match.algo.ts::test(txn#0)
                return 1u

        subroutine tests/approvals/assert-match.algo.ts::test(x: uint64) -> void:
            block@0: // L3
                let tmp%0#0: uint64 = ((gtxns Amount) x#0)
                let tmp%1#0: bool = (<= tmp%0#0 50000u)
                goto tmp%1#0 ? block@1 : block@8
            block@1: // and_contd_L4
                let tmp%2#0: uint64 = ((gtxns Amount) x#0)
                let tmp%3#0: bool = (>= tmp%2#0 0u)
                goto tmp%3#0 ? block@2 : block@8
            block@2: // and_contd_L4
                let tmp%4#0: bytes = ((gtxns CloseRemainderTo) x#0)
                let tmp%5#0: bytes = (global ZeroAddress)
                let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
                goto tmp%6#0 ? block@3 : block@8
            block@3: // and_contd_L4
                let tmp%7#0: uint64 = ((gtxns FirstValid) x#0)
                let tmp%8#0: bool = (> tmp%7#0 1u)
                goto tmp%8#0 ? block@4 : block@8
            block@4: // and_contd_L4
                let tmp%9#0: uint64 = ((gtxns LastValid) x#0)
                let tmp%10#0: bool = (< tmp%9#0 1099511627776u)
                goto tmp%10#0 ? block@5 : block@8
            block@5: // and_contd_L4
                let tmp%11#0: bytes = ((gtxns Receiver) x#0)
                let tmp%12#0: bytes = (global CurrentApplicationAddress)
                let tmp%13#0: bool = (== tmp%11#0 tmp%12#0)
                goto tmp%13#0 ? block@6 : block@8
            block@6: // and_contd_L4
                let tmp%14#0: bytes = ((gtxns Sender) x#0)
                let tmp%15#0: bytes = (txn Sender)
                let tmp%16#0: bool = (== tmp%14#0 tmp%15#0)
                goto tmp%16#0 ? block@7 : block@8
            block@7: // bool_true_L4
                let and_result%0#0: bool = 1u
                goto block@9
            block@8: // bool_false_L4
                let and_result%0#1: bool = 0u
                goto block@9
            block@9: // bool_merge_L4
                let and_result%0#2: bool = Ï†(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
                (assert and_result%0#2) // assert target is match for conditions
                return

        subroutine tests/approvals/assert-match.algo.ts::AssertMatchContract.constructor() -> void:
            block@0: // L14
                return

    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u
