#pragma version 10

tests/approvals/biguint-expressions.algo.ts::DemoContract.approvalProgram:
    // tests/approvals/biguint-expressions.algo.ts:33
    // testOps(500n, 1000n)
    pushbytess 0x01f4 0x03e8 // 0x01f4, 0x03e8
    callsub testOps
    // tests/approvals/biguint-expressions.algo.ts:34
    // return true
    pushint 1 // 1
    return


// tests/approvals/biguint-expressions.algo.ts::testOps(smaller: bytes, larger: bytes) -> void:
testOps:
    // tests/approvals/biguint-expressions.algo.ts:21
    // function testOps(smaller: biguint, larger: biguint) {
    proto 2 0
    // tests/approvals/biguint-expressions.algo.ts:22
    // assert(smaller < larger)
    frame_dig -2
    frame_dig -1
    b<
    assert
    // tests/approvals/biguint-expressions.algo.ts:24
    // assert(smaller > larger)
    frame_dig -2
    frame_dig -1
    b>
    assert
    // tests/approvals/biguint-expressions.algo.ts:27
    // assert(smaller === BigUint(op.bzero(4).concat(Bytes(smaller))), 'Leading zeros should be ignored in equality')
    pushint 4 // 4
    bzero
    frame_dig -2
    concat
    frame_dig -2
    b==
    assert // Leading zeros should be ignored in equality
    retsub
