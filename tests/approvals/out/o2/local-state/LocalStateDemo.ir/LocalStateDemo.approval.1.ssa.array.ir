main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, method "setState((uint64,byte[]),uint64[10])void" => block@4, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]))" => block@5, method "clearState()void" => block@6, * => block@13}
    block@3: // optIn_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // setState_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: bytes = (txna ApplicationArgs 1)
        let p.a#0: uint64 = (extract_uint64 tmp%11#0 0u)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%11#0 8u)
        let item_end_offset%0#0: uint64 = (len tmp%11#0)
        let item1%0#0: bytes = (substring3 tmp%11#0 item_start_offset%0#0 item_end_offset%0#0)
        let p.b#0: bytes = ((extract 2 0) item1%0#0)
        let c#0: bytes[80] = (txna ApplicationArgs 2)
        let tmp%0#4: bytes[32] = (txn Sender)
        (app_local_put tmp%0#4 "l1" p.a#0)
        let tmp%1#3: bytes[32] = (txn Sender)
        (app_local_put tmp%1#3 "localUint2" p.a#0)
        let tmp%2#3: bytes[32] = (txn Sender)
        (app_local_put tmp%2#3 "b1" p.b#0)
        let tmp%3#3: bytes[32] = (txn Sender)
        (app_local_put tmp%3#3 "localBytes2" p.b#0)
        let tmp%4#3: bytes[32] = (txn Sender)
        (app_local_put tmp%4#3 "localEncoded" c#0)
        let tmp%5#3: bytes[32] = (txn Sender)
        let val_as_bytes%0#1: bytes[8] = (itob p.a#0)
        let length%0#1: uint64 = (len p.b#0)
        let as_bytes%0#1: bytes[8] = (itob length%0#1)
        let length_uint16%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let encoded_value%0#1: bytes = (concat length_uint16%0#1 p.b#0)
        let encoded_tuple_buffer%2#1: bytes = (concat val_as_bytes%0#1 0x000a)
        let encoded_tuple_buffer%3#1: bytes = (concat encoded_tuple_buffer%2#1 encoded_value%0#1)
        (app_local_put tmp%5#3 "localTuple" encoded_tuple_buffer%3#1)
        let tmp%6#3: bytes[32] = (txn Sender)
        (app_local_put tmp%6#3 "localObject" encoded_tuple_buffer%3#1)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getState_route_L29
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let tmp%0#3: bytes[32] = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#3 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#2: bytes[32] = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#2 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#2: bytes[32] = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#2 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#2: bytes[32] = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#2 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#2: bytes[32] = (txn Sender)
        let (maybe_value%4#0: bytes[80], maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#2 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let tmp%5#2: bytes[32] = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#2 0u "localTuple")
        goto maybe_exists%5#0 ? block@20 : block@21
    block@20: // ternary_true_L36
        let item0%1#1: uint64 = (extract_uint64 maybe_value%5#0 0u)
        let item_start_offset%0#1: uint64 = (extract_uint16 maybe_value%5#0 8u)
        let item_end_offset%0#1: uint64 = (len maybe_value%5#0)
        let item1%0#1: bytes = (substring3 maybe_value%5#0 item_start_offset%0#1 item_end_offset%0#1)
        let item1%1#1: bytes = ((extract 2 0) item1%0#1)
        goto block@22
    block@21: // ternary_false_L36
        let ternary_result%0.0#1: uint64 = undefined
        let ternary_result%0.1#1: bytes = undefined
        goto block@22
    block@22: // ternary_merge_L36
        let ternary_result%0.0#2: uint64 = φ(item0%1#1 <- block@20, ternary_result%0.0#1 <- block@21)
        let ternary_result%0.1#2: bytes = φ(item1%1#1 <- block@20, ternary_result%0.1#1 <- block@21)
        (assert maybe_exists%5#0) // check LocalState exists
        let tmp%6#2: bytes[32] = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%6#2 0u "localObject")
        goto maybe_exists%6#0 ? block@23 : block@24
    block@23: // ternary_true_L37
        let item0%3#0: uint64 = (extract_uint64 maybe_value%6#0 0u)
        let item_start_offset%1#0: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let item_end_offset%1#0: uint64 = (len maybe_value%6#0)
        let item1%2#0: bytes = (substring3 maybe_value%6#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%3#0: bytes = ((extract 2 0) item1%2#0)
        goto block@25
    block@24: // ternary_false_L37
        let ternary_result%1.a#1: uint64 = undefined
        let ternary_result%1.b#1: bytes = undefined
        goto block@25
    block@25: // ternary_merge_L37
        let ternary_result%1.a#2: uint64 = φ(item0%3#0 <- block@23, ternary_result%1.a#1 <- block@24)
        let ternary_result%1.b#2: bytes = φ(item1%3#0 <- block@23, ternary_result%1.b#1 <- block@24)
        (assert maybe_exists%6#0) // check LocalState exists
        let val_as_bytes%0#0: bytes[8] = (itob maybe_value%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob maybe_value%1#0)
        let length%0#0: uint64 = (len maybe_value%2#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 maybe_value%2#0)
        let length%1#0: uint64 = (len maybe_value%3#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 maybe_value%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob ternary_result%0.0#2)
        let length%2#0: uint64 = (len ternary_result%0.1#2)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 ternary_result%0.1#2)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%2#0 0x000a)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob ternary_result%1.a#2)
        let length%3#0: uint64 = (len ternary_result%1.b#2)
        let as_bytes%4#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 ternary_result%1.b#2)
        let encoded_tuple_buffer%6#0: bytes = (concat val_as_bytes%3#0 0x000a)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%3#0)
        let encoded_tuple_buffer%10#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 0x0068)
        let data_length%2#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%5#0: uint64 = (+ 104u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%3#0)
        let data_length%3#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%6#0: uint64 = (+ current_tail_offset%5#0 data_length%3#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 maybe_value%4#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len encoded_tuple_buffer%3#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%4#0)
        let as_bytes%9#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 offset_as_uint16%5#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 encoded_value%0#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 encoded_value%1#0)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 encoded_tuple_buffer%3#0)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_tuple_buffer%7#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%19#0)
        (log tmp%16#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // clearState_route_L41
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let tmp%0#2: bytes[32] = (txn Sender)
        (app_local_del tmp%0#2 "l1")
        let tmp%1#1: bytes[32] = (txn Sender)
        (app_local_del tmp%1#1 "localUint2")
        let tmp%2#1: bytes[32] = (txn Sender)
        (app_local_del tmp%2#1 "b1")
        let tmp%3#1: bytes[32] = (txn Sender)
        (app_local_del tmp%3#1 "localBytes2")
        let tmp%4#1: bytes[32] = (txn Sender)
        (app_local_del tmp%4#1 "localEncoded")
        let tmp%5#1: bytes[32] = (txn Sender)
        (app_local_del tmp%5#1 "localTuple")
        let tmp%6#1: bytes[32] = (txn Sender)
        (app_local_del tmp%6#1 "localObject")
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L7
        let tmp%21#0: uint64 = (txn OnCompletion)
        goto tmp%21#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L7
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // can only call when creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L7
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2 <- block@25, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0