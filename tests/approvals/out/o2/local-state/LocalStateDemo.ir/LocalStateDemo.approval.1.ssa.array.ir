main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, method "setState((uint64,byte[]),uint64[10])void" => block@4, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))" => block@5, method "clearState()void" => block@6, * => block@13}
    block@3: // optIn_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // setState_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 1)
        let array%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 0u 8u)
        let array%item0%0#1: uint64 = (btoi array%extract%0#1)
        let array%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 8u)
        let array%len%0#1: uint64 = (len reinterpret_Encoded(uint64,(len+uint8[]))%0#0)
        let array%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 array%extract_uint16%0#1 array%len%0#1)
        let array%item1%0#1: bytes = ((extract 2 0) array%substring3%0#1)
        let (p.a#0: uint64, p.b#0: bytes) = (array%item0%0#1, array%item1%0#1)
        let c#0: Encoded(uint64[10]) = (txna ApplicationArgs 2)
        let tmp%0#4: account = (txn Sender)
        (app_local_put tmp%0#4 "l1" p.a#0)
        let tmp%1#3: account = (txn Sender)
        (app_local_put tmp%1#3 "localUint2" p.a#0)
        let tmp%2#3: account = (txn Sender)
        (app_local_put tmp%2#3 "b1" p.b#0)
        let tmp%3#3: account = (txn Sender)
        (app_local_put tmp%3#3 "localBytes2" p.b#0)
        let tmp%4#3: account = (txn Sender)
        (app_local_put tmp%4#3 "localEncoded" c#0)
        let tmp%5#3: account = (txn Sender)
        let array%val_as_bytes%0#1: bytes[8] = (itob p.a#0)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%length%0#1: uint64 = (len p.b#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 p.b#0)
        let array%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = array%encoded_value%0#1
        let array%tail%0#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%0#1)
        let array%data_length%0#1: uint64 = (len array%as_Encoded(len+uint8[])%0#1)
        let array%current_tail_offset%0#1: uint64 = (+ 10u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 10u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%1#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%0#1 array%offset_as_uint16%0#1)
        let array%encoded%2#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%1#1 array%tail%0#1)
        let encoded_for_storage%0#0: Encoded(uint64,(len+uint8[])) = array%encoded%2#1
        (app_local_put tmp%5#3 "localTuple" encoded_for_storage%0#0)
        let tmp%6#3: account = (txn Sender)
        let array%val_as_bytes%1#1: bytes[8] = (itob p.a#0)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%1#1)
        let array%length%1#1: uint64 = (len p.b#0)
        let array%as_bytes%2#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 p.b#0)
        let array%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = array%encoded_value%1#1
        let array%tail%1#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%1#1)
        let array%data_length%1#1: uint64 = (len array%as_Encoded(len+uint8[])%1#1)
        let array%current_tail_offset%1#1: uint64 = (+ 10u array%data_length%1#1)
        let array%as_bytes%3#1: bytes[8] = (itob 10u)
        let array%offset_as_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%3#1)
        let array%encoded%4#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%3#1 array%offset_as_uint16%1#1)
        let array%encoded%5#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%4#1 array%tail%1#1)
        let encoded_for_storage%1#0: Encoded(uint64,(len+uint8[])) = array%encoded%5#1
        (app_local_put tmp%6#3 "localObject" encoded_for_storage%1#0)
        let array%length%2#1: uint64 = (len 0x68656c6c6f)
        let array%as_bytes%4#1: bytes[8] = (itob array%length%2#1)
        let array%length_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%4#1)
        let array%encoded_value%2#1: bytes = (concat array%length_uint16%2#1 0x68656c6c6f)
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%2#1
        let encoded%0#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%0#1
        let array%val_as_bytes%2#1: bytes[8] = (itob p.a#0)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%6#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%length%3#1: uint64 = (len p.b#0)
        let array%as_bytes%5#1: bytes[8] = (itob array%length%3#1)
        let array%length_uint16%3#1: bytes = ((extract 6 2) array%as_bytes%5#1)
        let array%encoded_value%3#1: bytes = (concat array%length_uint16%3#1 p.b#0)
        let array%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = array%encoded_value%3#1
        let array%tail%2#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%2#1)
        let array%data_length%2#1: uint64 = (len array%as_Encoded(len+uint8[])%2#1)
        let array%current_tail_offset%2#1: uint64 = (+ 13u array%data_length%2#1)
        let array%as_bytes%6#1: bytes[8] = (itob 13u)
        let array%offset_as_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%6#1)
        let array%encoded%7#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%6#1 array%offset_as_uint16%2#1)
        let array%encoded_bit%0#1: bytes = (setbit 0x00 0u 1u)
        let array%encoded%8#1: Encoded(uint64,(len+uint8[]),bool1) = (concat array%encoded%7#1 array%encoded_bit%0#1)
        let array%tail%3#1: bytes = (concat array%tail%2#1 encoded%0#0)
        let array%data_length%3#1: uint64 = (len encoded%0#0)
        let array%current_tail_offset%3#1: uint64 = (+ array%current_tail_offset%2#1 array%data_length%3#1)
        let array%as_bytes%7#1: bytes[8] = (itob array%current_tail_offset%2#1)
        let array%offset_as_uint16%3#1: bytes = ((extract 6 2) array%as_bytes%7#1)
        let array%encoded%9#1: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = (concat array%encoded%8#1 array%offset_as_uint16%3#1)
        let array%encoded%10#1: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = (concat array%encoded%9#1 array%tail%3#1)
        let tmp%7#3: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = array%encoded%10#1
        let tmp%8#2: account = (txn Sender)
        (app_local_put tmp%8#2 "localMutableObject" tmp%7#3)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getState_route_L32
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let tmp%0#3: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#3 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#2: account = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#2 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#2: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#2 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#2: account = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#2 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#2: account = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#2 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let tmp%5#2: account = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#2 0u "localTuple")
        (assert maybe_exists%5#0) // check LocalState exists
        let array%extract%1#1: bytes = (extract3 maybe_value%5#0 0u 8u)
        let array%item0%1#1: uint64 = (btoi array%extract%1#1)
        let array%extract_uint16%1#1: uint64 = (extract_uint16 maybe_value%5#0 8u)
        let array%len%1#1: uint64 = (len maybe_value%5#0)
        let array%substring3%1#1: bytes = (substring3 maybe_value%5#0 array%extract_uint16%1#1 array%len%1#1)
        let array%item1%1#1: bytes = ((extract 2 0) array%substring3%1#1)
        let (tmp%6#2: uint64, tmp%7#2: bytes) = (array%item0%1#1, array%item1%1#1)
        let tmp%8#1: account = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%8#1 0u "localObject")
        (assert maybe_exists%6#0) // check LocalState exists
        let array%extract%2#1: bytes = (extract3 maybe_value%6#0 0u 8u)
        let array%item0%2#1: uint64 = (btoi array%extract%2#1)
        let array%extract_uint16%2#1: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let array%len%2#1: uint64 = (len maybe_value%6#0)
        let array%substring3%2#1: bytes = (substring3 maybe_value%6#0 array%extract_uint16%2#1 array%len%2#1)
        let array%item1%2#1: bytes = ((extract 2 0) array%substring3%2#1)
        let (tmp%9#1: uint64, tmp%10#1: bytes) = (array%item0%2#1, array%item1%2#1)
        let tmp%11#1: account = (txn Sender)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_local_get_ex tmp%11#1 0u "localMutableObject")
        (assert maybe_exists%7#0) // check LocalState exists
        let array%val_as_bytes%3#1: bytes[8] = (itob maybe_value%0#0)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%11#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%3#1)
        let array%val_as_bytes%4#1: bytes[8] = (itob maybe_value%1#0)
        let array%as_Encoded(uint64)%4#1: Encoded(uint64) = array%val_as_bytes%4#1
        let array%encoded%12#1: Encoded(uint64,uint64) = (concat array%encoded%11#1 array%as_Encoded(uint64)%4#1)
        let array%length%4#1: uint64 = (len maybe_value%2#0)
        let array%as_bytes%8#1: bytes[8] = (itob array%length%4#1)
        let array%length_uint16%4#1: bytes = ((extract 6 2) array%as_bytes%8#1)
        let array%encoded_value%4#1: bytes = (concat array%length_uint16%4#1 maybe_value%2#0)
        let array%as_Encoded(len+uint8[])%3#1: Encoded(len+uint8[]) = array%encoded_value%4#1
        let array%tail%4#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%3#1)
        let array%data_length%4#1: uint64 = (len array%as_Encoded(len+uint8[])%3#1)
        let array%current_tail_offset%4#1: uint64 = (+ 106u array%data_length%4#1)
        let array%as_bytes%9#1: bytes[8] = (itob 106u)
        let array%offset_as_uint16%4#1: bytes = ((extract 6 2) array%as_bytes%9#1)
        let array%encoded%13#1: Encoded(uint64,uint64,(len+uint8[])) = (concat array%encoded%12#1 array%offset_as_uint16%4#1)
        let array%length%5#1: uint64 = (len maybe_value%3#0)
        let array%as_bytes%10#1: bytes[8] = (itob array%length%5#1)
        let array%length_uint16%5#1: bytes = ((extract 6 2) array%as_bytes%10#1)
        let array%encoded_value%5#1: bytes = (concat array%length_uint16%5#1 maybe_value%3#0)
        let array%as_Encoded(len+uint8[])%4#1: Encoded(len+uint8[]) = array%encoded_value%5#1
        let array%tail%5#1: bytes = (concat array%tail%4#1 array%as_Encoded(len+uint8[])%4#1)
        let array%data_length%5#1: uint64 = (len array%as_Encoded(len+uint8[])%4#1)
        let array%current_tail_offset%5#1: uint64 = (+ array%current_tail_offset%4#1 array%data_length%5#1)
        let array%as_bytes%11#1: bytes[8] = (itob array%current_tail_offset%4#1)
        let array%offset_as_uint16%5#1: bytes = ((extract 6 2) array%as_bytes%11#1)
        let array%encoded%14#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[])) = (concat array%encoded%13#1 array%offset_as_uint16%5#1)
        let array%encoded%15#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10]) = (concat array%encoded%14#1 maybe_value%4#0)
        let array%val_as_bytes%5#1: bytes[8] = (itob tmp%6#2)
        let array%as_Encoded(uint64)%5#1: Encoded(uint64) = array%val_as_bytes%5#1
        let array%encoded%16#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%5#1)
        let array%length%6#1: uint64 = (len tmp%7#2)
        let array%as_bytes%12#1: bytes[8] = (itob array%length%6#1)
        let array%length_uint16%6#1: bytes = ((extract 6 2) array%as_bytes%12#1)
        let array%encoded_value%6#1: bytes = (concat array%length_uint16%6#1 tmp%7#2)
        let array%as_Encoded(len+uint8[])%5#1: Encoded(len+uint8[]) = array%encoded_value%6#1
        let array%tail%6#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%5#1)
        let array%data_length%6#1: uint64 = (len array%as_Encoded(len+uint8[])%5#1)
        let array%current_tail_offset%6#1: uint64 = (+ 10u array%data_length%6#1)
        let array%as_bytes%13#1: bytes[8] = (itob 10u)
        let array%offset_as_uint16%6#1: bytes = ((extract 6 2) array%as_bytes%13#1)
        let array%encoded%17#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%16#1 array%offset_as_uint16%6#1)
        let array%encoded%18#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%17#1 array%tail%6#1)
        let array%tail%7#1: bytes = (concat array%tail%5#1 array%encoded%18#1)
        let array%data_length%7#1: uint64 = (len array%encoded%18#1)
        let array%current_tail_offset%7#1: uint64 = (+ array%current_tail_offset%5#1 array%data_length%7#1)
        let array%as_bytes%14#1: bytes[8] = (itob array%current_tail_offset%5#1)
        let array%offset_as_uint16%7#1: bytes = ((extract 6 2) array%as_bytes%14#1)
        let array%encoded%19#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[]))) = (concat array%encoded%15#1 array%offset_as_uint16%7#1)
        let array%val_as_bytes%6#1: bytes[8] = (itob tmp%9#1)
        let array%as_Encoded(uint64)%6#1: Encoded(uint64) = array%val_as_bytes%6#1
        let array%encoded%20#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%6#1)
        let array%length%7#1: uint64 = (len tmp%10#1)
        let array%as_bytes%15#1: bytes[8] = (itob array%length%7#1)
        let array%length_uint16%7#1: bytes = ((extract 6 2) array%as_bytes%15#1)
        let array%encoded_value%7#1: bytes = (concat array%length_uint16%7#1 tmp%10#1)
        let array%as_Encoded(len+uint8[])%6#1: Encoded(len+uint8[]) = array%encoded_value%7#1
        let array%tail%8#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%6#1)
        let array%data_length%8#1: uint64 = (len array%as_Encoded(len+uint8[])%6#1)
        let array%current_tail_offset%8#1: uint64 = (+ 10u array%data_length%8#1)
        let array%as_bytes%16#1: bytes[8] = (itob 10u)
        let array%offset_as_uint16%8#1: bytes = ((extract 6 2) array%as_bytes%16#1)
        let array%encoded%21#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%20#1 array%offset_as_uint16%8#1)
        let array%encoded%22#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%21#1 array%tail%8#1)
        let array%tail%9#1: bytes = (concat array%tail%7#1 array%encoded%22#1)
        let array%data_length%9#1: uint64 = (len array%encoded%22#1)
        let array%current_tail_offset%9#1: uint64 = (+ array%current_tail_offset%7#1 array%data_length%9#1)
        let array%as_bytes%17#1: bytes[8] = (itob array%current_tail_offset%7#1)
        let array%offset_as_uint16%9#1: bytes = ((extract 6 2) array%as_bytes%17#1)
        let array%encoded%23#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[]))) = (concat array%encoded%19#1 array%offset_as_uint16%9#1)
        let array%tail%10#1: bytes = (concat array%tail%9#1 maybe_value%7#0)
        let array%data_length%10#1: uint64 = (len maybe_value%7#0)
        let array%current_tail_offset%10#1: uint64 = (+ array%current_tail_offset%9#1 array%data_length%10#1)
        let array%as_bytes%18#1: bytes[8] = (itob array%current_tail_offset%9#1)
        let array%offset_as_uint16%10#1: bytes = ((extract 6 2) array%as_bytes%18#1)
        let array%encoded%24#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = (concat array%encoded%23#1 array%offset_as_uint16%10#1)
        let array%encoded%25#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = (concat array%encoded%24#1 array%tail%10#1)
        let tmp%27#0: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = array%encoded%25#1
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // clearState_route_L45
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tmp%0#2: account = (txn Sender)
        (app_local_del tmp%0#2 "l1")
        let tmp%1#1: account = (txn Sender)
        (app_local_del tmp%1#1 "localUint2")
        let tmp%2#1: account = (txn Sender)
        (app_local_del tmp%2#1 "b1")
        let tmp%3#1: account = (txn Sender)
        (app_local_del tmp%3#1 "localBytes2")
        let tmp%4#1: account = (txn Sender)
        (app_local_del tmp%4#1 "localEncoded")
        let tmp%5#1: account = (txn Sender)
        (app_local_del tmp%5#1 "localTuple")
        let tmp%6#1: account = (txn Sender)
        (app_local_del tmp%6#1 "localObject")
        let tmp%7#1: account = (txn Sender)
        (app_local_del tmp%7#1 "localMutableObject")
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L8
        let tmp%33#0: uint64 = (txn OnCompletion)
        goto tmp%33#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L8
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // can only call when creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L8
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0