main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, method "setState((uint64,byte[]),uint64[10])void" => block@4, method "getState()(uint64,uint64,byte[],byte[],uint64[10])" => block@5, method "clearState()void" => block@6, * => block@13}
    block@3: // optIn_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // setState_route_L17
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: bytes = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len tmp%11#0)
        let offset%0#0: uint64 = (extract_uint16 tmp%11#0 8u) // on error: invalid tuple encoding
        let offset_is_correct%0#0: bool = (== offset%0#0 10u)
        (assert offset_is_correct%0#0) // invalid tail pointer at index 1 of lib.d.ts::object
        let item%0#0: bytes = (substring3 tmp%11#0 offset%0#0 tuple_len%0#0)
        let length%0#0: uint64 = (extract_uint16 item%0#0 0u) // on error: invalid array length header
        let num_bytes_with_header%0#0: uint64 = (+ length%0#0 2u)
        let num_bytes_value%0#0: uint64 = (+ 10u num_bytes_with_header%0#0)
        let size_is_correct%0#0: bool = (== tuple_len%0#0 num_bytes_value%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for lib.d.ts::object
        let p.a#0: uint64 = (extract_uint64 tmp%11#0 0u)
        let p.b#0: bytes = ((extract 2 0) item%0#0)
        let c#0: bytes[80] = (txna ApplicationArgs 2)
        let value_len%1#0: uint64 = (len c#0)
        let size_is_correct%1#0: bool = (== value_len%1#0 80u)
        (assert size_is_correct%1#0) // invalid number of bytes for arc4.static_array<arc4.uint64, 10>
        let tmp%0#4: bytes[32] = (txn Sender)
        (app_local_put tmp%0#4 "l1" p.a#0)
        let tmp%1#3: bytes[32] = (txn Sender)
        (app_local_put tmp%1#3 "localUint2" p.a#0)
        let tmp%2#3: bytes[32] = (txn Sender)
        (app_local_put tmp%2#3 "b1" p.b#0)
        let tmp%3#3: bytes[32] = (txn Sender)
        (app_local_put tmp%3#3 "localBytes2" p.b#0)
        let tmp%4#3: bytes[32] = (txn Sender)
        (app_local_put tmp%4#3 "localEncoded" c#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getState_route_L25
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let tmp%0#3: bytes[32] = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#3 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#2: bytes[32] = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#2 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#2: bytes[32] = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#2 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#2: bytes[32] = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#2 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#2: bytes[32] = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#2 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let val_as_bytes%0#0: bytes[8] = (itob maybe_value%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob maybe_value%1#0)
        let length%1#0: uint64 = (len maybe_value%2#0)
        let as_bytes%0#0: bytes[8] = (itob length%1#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 maybe_value%2#0)
        let length%2#0: uint64 = (len maybe_value%3#0)
        let as_bytes%1#0: bytes[8] = (itob length%2#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 maybe_value%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x0064)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 100u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 maybe_value%4#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%7#0)
        (log tmp%17#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // clearState_route_L35
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let tmp%0#2: bytes[32] = (txn Sender)
        (app_local_del tmp%0#2 "l1")
        let tmp%1#1: bytes[32] = (txn Sender)
        (app_local_del tmp%1#1 "localUint2")
        let tmp%2#1: bytes[32] = (txn Sender)
        (app_local_del tmp%2#1 "b1")
        let tmp%3#1: bytes[32] = (txn Sender)
        (app_local_del tmp%3#1 "localBytes2")
        let tmp%4#1: bytes[32] = (txn Sender)
        (app_local_del tmp%4#1 "localEncoded")
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L7
        let tmp%22#0: uint64 = (txn OnCompletion)
        goto tmp%22#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L7
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // can only call when creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L7
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0