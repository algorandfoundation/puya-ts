main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@14
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, * => block@4}
    block@3: // optIn_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be OptIn && can only call when not creating
        exit 1u
    block@4: // switch_case_next_L8
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion must be NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0)
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        switch tmp%12#0 {method "setState((uint64,byte[]),uint64[10])void" => block@6, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))" => block@7, method "clearState()void" => block@8, method "writeDynamicLocalState(string,string)string" => block@9, method "readDynamicLocalState(string)string" => block@10, * => block@13}
    block@6: // setState_route_L21
        let p#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 1)
        let c#0: Encoded(uint64[10]) = (txna ApplicationArgs 2)
        let a#0: uint64 = (extract_uint64 p#0 0u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#0: uint64 = (len p#0)
        let aggregate%substring3%0#0: bytes = (substring3 p#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let b#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let tmp%0#5: account = (txn Sender)
        (app_local_put tmp%0#5 "l1" a#0)
        let tmp%1#8: account = (txn Sender)
        (app_local_put tmp%1#8 "localUint2" a#0)
        let tmp%2#7: account = (txn Sender)
        (app_local_put tmp%2#7 "b1" b#0)
        let tmp%3#6: account = (txn Sender)
        (app_local_put tmp%3#6 "localBytes2" b#0)
        let tmp%4#4: account = (txn Sender)
        (app_local_put tmp%4#4 "localEncoded" c#0)
        let tmp%5#3: account = (txn Sender)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%length%0#0: uint64 = (len b#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 b#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 0x000a)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_value%0#0)
        (app_local_put tmp%5#3 "localTuple" aggregate%concat%0#0)
        let tmp%6#3: account = (txn Sender)
        (app_local_put tmp%6#3 "localObject" aggregate%concat%0#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 13u aggregate%data_length%2#0)
        let aggregate%head%6#0: bytes = (concat aggregate%val_as_bytes%0#0 0x000d80)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%7#0 aggregate%encoded_value%0#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 0x000568656c6c6f)
        let tmp%9#2: account = (txn Sender)
        (app_local_put tmp%9#2 "localMutableObject" aggregate%concat%3#0)
        exit 1u
    block@7: // getState_route_L32
        let tmp%0#4: account = (txn Sender)
        let (maybe_value%0#2: uint64, maybe_exists%0#2: bool) = (app_local_get_ex tmp%0#4 0u "l1")
        (assert maybe_exists%0#2) // check LocalState exists
        let tmp%1#7: account = (txn Sender)
        let (maybe_value%1#1: uint64, maybe_exists%1#2: bool) = (app_local_get_ex tmp%1#7 0u "localUint2")
        (assert maybe_exists%1#2) // check LocalState exists
        let tmp%2#6: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#6 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#5: account = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#5 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#3: account = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#3 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let tmp%5#2: account = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#2 0u "localTuple")
        (assert maybe_exists%5#0) // check LocalState exists
        let aggregate%extract%1#0: bytes = ((extract 0 8) maybe_value%5#0)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 maybe_value%5#0 8u)
        let aggregate%len%1#0: uint64 = (len maybe_value%5#0)
        let aggregate%substring3%1#0: bytes = (substring3 maybe_value%5#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let aggregate%item1%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%8#1: account = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%8#1 0u "localObject")
        (assert maybe_exists%6#0) // check LocalState exists
        let aggregate%extract%2#0: bytes = ((extract 0 8) maybe_value%6#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let aggregate%len%2#0: uint64 = (len maybe_value%6#0)
        let aggregate%substring3%2#0: bytes = (substring3 maybe_value%6#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let aggregate%item1%1#0: bytes = ((extract 2 0) aggregate%substring3%2#0)
        let tmp%11#1: account = (txn Sender)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_local_get_ex tmp%11#1 0u "localMutableObject")
        (assert maybe_exists%7#0) // check LocalState exists
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob maybe_value%0#2)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob maybe_value%1#1)
        let aggregate%head%9#0: bytes = (concat aggregate%val_as_bytes%3#0 aggregate%val_as_bytes%4#0)
        let aggregate%length%4#0: uint64 = (len maybe_value%2#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 maybe_value%2#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x006a)
        let aggregate%data_length%4#0: uint64 = (len aggregate%encoded_value%4#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 106u aggregate%data_length%4#0)
        let aggregate%length%5#0: uint64 = (len maybe_value%3#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 maybe_value%3#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len aggregate%encoded_value%5#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 maybe_value%4#0)
        let aggregate%length%6#0: uint64 = (len aggregate%item1%0#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 aggregate%item1%0#0)
        let aggregate%head%14#0: bytes = (concat aggregate%extract%1#0 0x000a)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%14#0 aggregate%encoded_value%6#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%current_tail_offset%5#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len aggregate%concat%4#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ aggregate%current_tail_offset%5#0 aggregate%data_length%7#0)
        let aggregate%length%7#0: uint64 = (len aggregate%item1%1#0)
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 aggregate%item1%1#0)
        let aggregate%head%17#0: bytes = (concat aggregate%extract%2#0 0x000a)
        let aggregate%concat%5#0: bytes = (concat aggregate%head%17#0 aggregate%encoded_value%7#0)
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%current_tail_offset%7#0)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%head%18#0: bytes = (concat aggregate%head%15#0 aggregate%offset_as_uint16%9#0)
        let aggregate%data_length%9#0: uint64 = (len aggregate%concat%5#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ aggregate%current_tail_offset%7#0 aggregate%data_length%9#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%offset_as_uint16%10#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%19#0 aggregate%encoded_value%4#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 aggregate%encoded_value%5#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%concat%7#0 aggregate%concat%4#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%concat%8#0 aggregate%concat%5#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%concat%9#0 maybe_value%7#0)
        let tmp%1#6: bytes = (concat 0x151f7c75 aggregate%concat%10#0)
        (log tmp%1#6)
        exit 1u
    block@8: // clearState_route_L45
        let tmp%0#2: account = (txn Sender)
        (app_local_del tmp%0#2 "l1")
        let tmp%1#5: account = (txn Sender)
        (app_local_del tmp%1#5 "localUint2")
        let tmp%2#5: account = (txn Sender)
        (app_local_del tmp%2#5 "b1")
        let tmp%3#4: account = (txn Sender)
        (app_local_del tmp%3#4 "localBytes2")
        let tmp%4#2: account = (txn Sender)
        (app_local_del tmp%4#2 "localEncoded")
        let tmp%5#1: account = (txn Sender)
        (app_local_del tmp%5#1 "localTuple")
        let tmp%6#1: account = (txn Sender)
        (app_local_del tmp%6#1 "localObject")
        let tmp%7#1: account = (txn Sender)
        (app_local_del tmp%7#1 "localMutableObject")
        exit 1u
    block@9: // writeDynamicLocalState_route_L63
        let reinterpret_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#1)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let value#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let sender#1: account = (txn Sender)
        let tmp%1#4: uint64 = (global CurrentApplicationID)
        let tmp%2#4: bool = (app_opted_in sender#1 tmp%1#4)
        (assert tmp%2#4) // Account must opt in to contract first
        (app_local_put sender#1 key#1 value#0)
        let aggregate%length%8#0: uint64 = (len value#0)
        let aggregate%as_bytes%19#0: bytes[8] = (itob aggregate%length%8#0)
        let aggregate%length_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%encoded_value%8#0: bytes = (concat aggregate%length_uint16%8#0 value#0)
        let tmp%4#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%8#0)
        (log tmp%4#1)
        exit 1u
    block@10: // readDynamicLocalState_route_L82
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let sender#0: account = (txn Sender)
        let tmp%1#2: uint64 = (global CurrentApplicationID)
        let tmp%2#2: bool = (app_opted_in sender#0 tmp%1#2)
        (assert tmp%2#2) // Account must opt in to contract first
        let (_%0#0: string, maybe_exists%0#0: bool) = (app_local_get_ex sender#0 0u key#0)
        (assert maybe_exists%0#0) // Key not found
        let aggregate%length%9#0: uint64 = (len _%0#0)
        let aggregate%as_bytes%20#0: bytes[8] = (itob aggregate%length%9#0)
        let aggregate%length_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%20#0)
        let aggregate%encoded_value%9#0: bytes = (concat aggregate%length_uint16%9#0 _%0#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%9#0)
        (log tmp%3#1)
        exit 1u
    block@13: // after_if_else_L8
        fail
    block@14: // __algots__.defaultCreate_L8
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (! tmp%15#0)
        let tmp%17#0: bool = (&& tmp%14#0 tmp%16#0)
        (assert tmp%17#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u