#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 10
    bytecblock "l1" "localUint2" "b1" "localBytes2" "localEncoded"
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x29314d95 0xaaefcb43 0x67816cc5 0x11170534 // method "optIn()void", method "setState((uint64,byte[]),uint64[10])void", method "getState()(uint64,uint64,byte[],byte[],uint64[10])", method "clearState()void"
    txna ApplicationArgs 0
    match main_optIn_route@3 main_setState_route@4 main_getState_route@5 main_clearState_route@6

main_after_if_else@13:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    intc_0 // 0
    return

main_clearState_route@6:
    // tests/approvals/local-state.algo.ts:35
    // public clearState() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:36
    // this.localUint(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:36
    // this.localUint(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:37
    // this.localUint2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:37
    // this.localUint2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:38
    // this.localBytes(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:38
    // this.localBytes(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:39
    // this.localBytes2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:39
    // this.localBytes2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:40
    // this.localEncoded(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:40
    // this.localEncoded(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:35
    // public clearState() {
    intc_1 // 1
    return

main_getState_route@5:
    // tests/approvals/local-state.algo.ts:25
    // public getState() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:27
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:27
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:28
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:28
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:29
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:29
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:30
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:30
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:31
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:31
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:25
    // public getState() {
    uncover 4
    itob
    uncover 4
    itob
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    uncover 3
    uncover 3
    concat
    pushbytes 0x0064
    concat
    dig 2
    len
    pushint 100 // 100
    +
    itob
    extract 6 2
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_setState_route@4:
    // tests/approvals/local-state.algo.ts:17
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 1
    dup
    len
    dig 1
    pushint 8 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    intc_2 // 10
    ==
    assert // invalid tail pointer at index 1 of lib.d.ts::object
    dig 2
    swap
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    intc_2 // 10
    +
    uncover 2
    ==
    assert // invalid number of bytes for lib.d.ts::object
    swap
    intc_0 // 0
    extract_uint64
    swap
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    pushint 80 // 80
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint64, 10>
    // tests/approvals/local-state.algo.ts:18
    // this.localUint(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:18
    // this.localUint(Txn.sender).value = a
    dig 4
    app_local_put
    // tests/approvals/local-state.algo.ts:19
    // this.localUint2(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:19
    // this.localUint2(Txn.sender).value = a
    uncover 4
    app_local_put
    // tests/approvals/local-state.algo.ts:20
    // this.localBytes(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:20
    // this.localBytes(Txn.sender).value = b
    dig 3
    app_local_put
    // tests/approvals/local-state.algo.ts:21
    // this.localBytes2(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:21
    // this.localBytes2(Txn.sender).value = b
    uncover 3
    app_local_put
    // tests/approvals/local-state.algo.ts:22
    // this.localEncoded(Txn.sender).value = c.copy()
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:22
    // this.localEncoded(Txn.sender).value = c.copy()
    uncover 2
    app_local_put
    // tests/approvals/local-state.algo.ts:17
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    intc_1 // 1
    return

main_optIn_route@3:
    // tests/approvals/local-state.algo.ts:14
    // @abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_bare_routing@9:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
