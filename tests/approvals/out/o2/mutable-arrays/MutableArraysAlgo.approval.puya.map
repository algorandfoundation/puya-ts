{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/mutable-arrays.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGe;;;AACU;AAAZ;;AAAe;AAAA;AAAxB;;;AACU;;AAAA;AAAA;;;AAAR;AAAA;;;AADkC;AAAA;AAAA;;;;;;;AAI1B;AAAA;AAAA;AAAA;AAAA;AAAH;;AAAA;AAAA;;AAAA;AAAP;AACA;AAAA;AACe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGG;AAAS;AAAT;AAAX;AAAP;AAZF;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1"
    },
    "6": {
      "op": "bytecblock 0x 0x068101"
    },
    "13": {
      "op": "intc_0 // 0",
      "stack_out": [
        "slot%0"
      ]
    },
    "14": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "slot%0",
        "i#0"
      ]
    },
    "15": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "16": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@6",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "21": {
      "op": "pushbytes 0x2a337771 // method \"test(uint64)void\""
    },
    "27": {
      "op": "txna ApplicationArgs 0"
    },
    "30": {
      "op": "match main_test_route@3"
    },
    "34": {
      "block": "main_after_if_else@10",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%0#0"
      ]
    },
    "35": {
      "op": "return"
    },
    "36": {
      "block": "main_test_route@3",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%3#0"
      ]
    },
    "38": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%4#0"
      ]
    },
    "39": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "40": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%5#0"
      ]
    },
    "42": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "43": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "46": {
      "op": "btoi",
      "defined_out": [
        "length#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0"
      ]
    },
    "47": {
      "op": "bury 1",
      "defined_out": [
        "length#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "49": {
      "block": "main_while_top@15",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "pushint 2010 // 2010"
    },
    "52": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "2010",
        "tmp%0#1"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "2010",
        "tmp%0#1"
      ]
    },
    "54": {
      "op": ">",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%1#2"
      ]
    },
    "55": {
      "op": "bz main_after_while@18",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "58": {
      "op": "itxn_begin"
    },
    "59": {
      "op": "pushint 6 // appl"
    },
    "61": {
      "op": "itxn_field TypeEnum"
    },
    "63": {
      "op": "pushint 5 // DeleteApplication"
    },
    "65": {
      "op": "itxn_field OnCompletion"
    },
    "67": {
      "op": "bytec_1 // 0x068101"
    },
    "68": {
      "op": "itxn_field ApprovalProgram"
    },
    "70": {
      "op": "bytec_1 // 0x068101"
    },
    "71": {
      "op": "itxn_field ClearStateProgram"
    },
    "73": {
      "op": "intc_0 // 0"
    },
    "74": {
      "op": "itxn_field Fee"
    },
    "76": {
      "op": "itxn_submit"
    },
    "77": {
      "op": "b main_while_top@15"
    },
    "80": {
      "block": "main_after_while@18",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot%0"
      ]
    },
    "81": {
      "op": "bury 3",
      "defined_out": [
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "83": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "i#0"
      ]
    },
    "84": {
      "op": "bury 2",
      "defined_out": [
        "i#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "86": {
      "block": "main_while_top@19",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "dup2",
      "defined_out": [
        "i#0",
        "length#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "i#0",
        "length#0"
      ]
    },
    "87": {
      "op": "<",
      "defined_out": [
        "i#0",
        "length#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "bz main_after_while@21",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "91": {
      "op": "dig 1"
    },
    "93": {
      "op": "dup"
    },
    "94": {
      "op": "itob"
    },
    "95": {
      "op": "dig 4"
    },
    "97": {
      "op": "swap"
    },
    "98": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded"
    },
    "99": {
      "op": "bury 4"
    },
    "101": {
      "op": "intc_2 // 1"
    },
    "102": {
      "op": "+"
    },
    "103": {
      "op": "bury 2"
    },
    "105": {
      "op": "b main_while_top@19"
    },
    "108": {
      "block": "main_after_while@21",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0"
      ]
    },
    "110": {
      "op": "dup",
      "defined_out": [
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ]
    },
    "111": {
      "op": "len",
      "defined_out": [
        "array%bytes_len%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1"
      ]
    },
    "112": {
      "op": "dup",
      "defined_out": [
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)"
      ]
    },
    "113": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)",
        "8"
      ]
    },
    "114": {
      "op": "/",
      "defined_out": [
        "array%array_len%0#1",
        "array%bytes_len%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%array_len%0#1"
      ]
    },
    "115": {
      "op": "dig 3",
      "defined_out": [
        "array%array_len%0#1",
        "array%bytes_len%0#1",
        "length#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%array_len%0#1",
        "length#0"
      ]
    },
    "117": {
      "op": "dup",
      "defined_out": [
        "array%array_len%0#1",
        "array%bytes_len%0#1",
        "length#0",
        "length#0 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%array_len%0#1",
        "length#0 (copy)",
        "length#0 (copy)"
      ]
    },
    "118": {
      "op": "cover 2",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "length#0",
        "array%array_len%0#1",
        "length#0 (copy)"
      ]
    },
    "120": {
      "op": "==",
      "defined_out": [
        "array%bytes_len%0#1",
        "length#0",
        "slot_contents%1#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "length#0",
        "tmp%2#1"
      ]
    },
    "121": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "length#0"
      ]
    },
    "122": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "length#0",
        "length#0 (copy)"
      ]
    },
    "123": {
      "error": "has length",
      "op": "assert // has length",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "length#0"
      ]
    },
    "124": {
      "op": "swap",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%bytes_len%0#1"
      ]
    },
    "125": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%bytes_len%0#1",
        "8"
      ]
    },
    "126": {
      "op": "-",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "length#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "127": {
      "op": "dup",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)",
        "length#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)"
      ]
    },
    "128": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)",
        "8"
      ]
    },
    "129": {
      "op": "/",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "length#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1"
      ]
    },
    "130": {
      "op": "dig 3",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0 (copy)"
      ]
    },
    "132": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "length#0",
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0 (copy)",
        "0"
      ]
    },
    "133": {
      "op": "uncover 3",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_new_length%0#1",
        "slot_contents%1#0 (copy)",
        "0",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "135": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%array_new_length%0#1",
        "length#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_new_length%0#1",
        "array%array_contents%1#1"
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_contents%1#1",
        "array%array_new_length%0#1"
      ]
    },
    "137": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_contents%1#1",
        "array%array_new_length%0#1",
        "8"
      ]
    },
    "138": {
      "op": "*",
      "defined_out": [
        "array%array_contents%1#1",
        "array%bytes_index%0#1",
        "length#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "slot_contents%1#0",
        "length#0",
        "array%array_contents%1#1",
        "array%bytes_index%0#1"
      ]
    },
    "139": {
      "op": "uncover 3",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "array%array_contents%1#1",
        "array%bytes_index%0#1",
        "slot_contents%1#0"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "array%array_contents%1#1",
        "slot_contents%1#0",
        "array%bytes_index%0#1"
      ]
    },
    "142": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "array%array_contents%1#1",
        "slot_contents%1#0",
        "array%bytes_index%0#1",
        "8"
      ]
    },
    "143": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%value%0#1",
        "length#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "array%array_contents%1#1",
        "array%value%0#1"
      ]
    },
    "144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "array%array_contents%1#1",
        "array%value%0#1",
        "0"
      ]
    },
    "145": {
      "op": "extract_uint64",
      "defined_out": [
        "array%array_contents%1#1",
        "length#0",
        "popped#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "array%array_contents%1#1",
        "popped#0"
      ]
    },
    "146": {
      "op": "bury 1",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "length#0",
        "popped#0"
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "popped#0",
        "length#0"
      ]
    },
    "149": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "length#0",
        "popped#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "popped#0",
        "length#0",
        "1"
      ]
    },
    "150": {
      "op": "-",
      "defined_out": [
        "length#0",
        "popped#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "popped#0",
        "tmp%3#0"
      ]
    },
    "151": {
      "op": "==",
      "defined_out": [
        "length#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%4#0"
      ]
    },
    "152": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "153": {
      "op": "intc_2 // 1",
      "defined_out": [
        "length#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "return"
    },
    "155": {
      "block": "main_bare_routing@6",
      "stack_in": [
        "slot%0",
        "i#0",
        "length#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0",
        "tmp%8#0"
      ]
    },
    "157": {
      "op": "bnz main_after_if_else@10",
      "stack_out": [
        "slot%0",
        "i#0",
        "length#0"
      ]
    },
    "160": {
      "op": "txn ApplicationID"
    },
    "162": {
      "op": "!"
    },
    "163": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "164": {
      "op": "intc_2 // 1"
    },
    "165": {
      "op": "return"
    }
  }
}