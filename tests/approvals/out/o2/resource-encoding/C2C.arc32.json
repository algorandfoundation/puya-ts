{
    "hints": {
        "testCallToForeign(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testCallToValue(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testCallToEchoResource()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "C2C",
        "methods": [
            {
                "name": "testCallToForeign",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    },
                    {
                        "type": "uint64",
                        "name": "appId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testCallToValue",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    },
                    {
                        "type": "uint64",
                        "name": "appId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testCallToEchoResource",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}