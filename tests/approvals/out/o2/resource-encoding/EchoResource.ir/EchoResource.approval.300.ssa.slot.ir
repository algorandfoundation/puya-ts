main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L38
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)" => block@3, method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)" => block@4, * => block@11}
    block@3: // echoResourceByIndex_route_L39
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let asset#1: uint64 = ((txnas Assets) tmp%7#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let app#1: uint64 = ((txnas Applications) tmp%9#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%11#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let acc#1: account = ((txnas Accounts) tmp%11#0)
        let tmp%0#3: bytes = ((txnas ApplicationArgs) 1u)
        let assetIdx#0: uint64 = (btoi tmp%0#3)
        let tmp%2#2: uint64 = ((txnas Assets) assetIdx#0)
        let tmp%3#2: bool = (== asset#1 tmp%2#2)
        (assert tmp%3#2) // expected asset to be passed by Index
        let tmp%4#1: bytes = ((txnas ApplicationArgs) 2u)
        let appIdx#0: uint64 = (btoi tmp%4#1)
        let tmp%6#1: uint64 = ((txnas Applications) appIdx#0)
        let tmp%7#2: bool = (== app#1 tmp%6#1)
        (assert tmp%7#2) // expected application to be passed by Index
        let tmp%8#2: bytes = ((txnas ApplicationArgs) 3u)
        let accIdx#0: uint64 = (btoi tmp%8#2)
        let tmp%10#1: account = ((txnas Accounts) accIdx#0)
        let tmp%11#1: bool = (== acc#1 tmp%10#1)
        (assert tmp%11#1) // expected account to be passed by Index
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#1)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob app#1)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 acc#1)
        let tmp%14#0: bytes = (concat 0x151f7c75 aggregate%head%2#0)
        (log tmp%14#0)
        let tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // echoResourceByValue_route_L50
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let acc#0: account = (txna ApplicationArgs 3)
        let tmp%0#2: bytes = ((txnas ApplicationArgs) 1u)
        let assetId#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bool = (== asset#0 assetId#0)
        (assert tmp%2#1) // expected asset to be passed by Value
        let tmp%3#1: bytes = ((txnas ApplicationArgs) 2u)
        let appId#0: uint64 = (btoi tmp%3#1)
        let tmp%5#1: bool = (== app#0 appId#0)
        (assert tmp%5#1) // expected application to be passed by Value
        let address#0: bytes = ((txnas ApplicationArgs) 3u)
        let tmp%7#1: bool = (== acc#0 address#0)
        (assert tmp%7#1) // expected account to be passed by Value
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob asset#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob app#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 acc#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 aggregate%head%5#0)
        (log tmp%23#0)
        let tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L38
        let tmp%24#0: uint64 = (txn OnCompletion)
        goto tmp%24#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L38
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // can only call when creating
        let tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L38
        let tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#0 <- block@3, tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#1 <- block@4, tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#2 <- block@8, tests/approvals/resource-encoding.algo.ts::EchoResource.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0