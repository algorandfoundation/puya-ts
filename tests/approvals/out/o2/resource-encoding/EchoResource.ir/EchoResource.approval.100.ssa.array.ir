main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L38
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)" => block@4, method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)" => block@5, * => block@8}
    block@4: // echoResourceByIndex_route_L39
        let tmp%0#4: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#4)
        let eq%0#1: bool = (== len%0#1 1u)
        (assert eq%0#1) // invalid number of bytes for uint8
        let tmp%1#1: uint64 = (btoi tmp%0#4)
        let asset#1: uint64 = ((txnas Assets) tmp%1#1)
        let tmp%3#3: bytes = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len tmp%3#3)
        let eq%1#1: bool = (== len%1#1 1u)
        (assert eq%1#1) // invalid number of bytes for uint8
        let tmp%4#2: uint64 = (btoi tmp%3#3)
        let app#1: uint64 = ((txnas Applications) tmp%4#2)
        let tmp%6#1: bytes = (txna ApplicationArgs 3)
        let len%2#1: uint64 = (len tmp%6#1)
        let eq%2#1: bool = (== len%2#1 1u)
        (assert eq%2#1) // invalid number of bytes for uint8
        let tmp%7#3: uint64 = (btoi tmp%6#1)
        let acc#1: account = ((txnas Accounts) tmp%7#3)
        let tmp%0#5: bytes = ((txnas ApplicationArgs) 1u)
        let assetIdx#0: uint64 = (btoi tmp%0#5)
        let tmp%2#4: uint64 = ((txnas Assets) assetIdx#0)
        let tmp%3#4: bool = (== asset#1 tmp%2#4)
        (assert tmp%3#4) // expected asset to be passed by index
        let tmp%4#3: bytes = ((txnas ApplicationArgs) 2u)
        let appIdx#0: uint64 = (btoi tmp%4#3)
        let tmp%6#2: uint64 = ((txnas Applications) appIdx#0)
        let tmp%7#4: bool = (== app#1 tmp%6#2)
        (assert tmp%7#4) // expected application to be passed by index
        let tmp%8#3: bytes = ((txnas ApplicationArgs) 3u)
        let accIdx#0: uint64 = (btoi tmp%8#3)
        let tmp%10#2: account = ((txnas Accounts) accIdx#0)
        let tmp%11#1: bool = (== acc#1 tmp%10#2)
        (assert tmp%11#1) // expected account to be passed by index
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob app#1)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = acc#1
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0: Encoded(uint64,uint64,uint8[32]) = aggregate%head%2#0
        let tmp%12#0: Encoded(uint64,uint64,uint8[32]) = aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0
        let tmp%10#1: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%10#1)
        exit 1u
    block@5: // echoResourceByValue_route_L50
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let asset#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let app#0: uint64 = (btoi tmp%2#1)
        let tmp%4#1: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#1)
        let eq%2#0: bool = (== len%2#0 32u)
        (assert eq%2#0) // invalid number of bytes for uint8[32]
        let acc#0: account = tmp%4#1
        let tmp%0#3: bytes = ((txnas ApplicationArgs) 1u)
        let assetId#0: uint64 = (btoi tmp%0#3)
        let tmp%2#2: bool = (== asset#0 assetId#0)
        (assert tmp%2#2) // expected asset to be passed by value
        let tmp%3#2: bytes = ((txnas ApplicationArgs) 2u)
        let appId#0: uint64 = (btoi tmp%3#2)
        let tmp%5#2: bool = (== app#0 appId#0)
        (assert tmp%5#2) // expected application to be passed by value
        let address#0: bytes = ((txnas ApplicationArgs) 3u)
        let tmp%7#2: bool = (== acc#0 address#0)
        (assert tmp%7#2) // expected account to be passed by value
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob app#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = acc#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32])%1#0: Encoded(uint64,uint64,uint8[32]) = aggregate%head%5#0
        let tmp%8#1: Encoded(uint64,uint64,uint8[32]) = aggregate%as_Encoded(uint64,uint64,uint8[32])%1#0
        let tmp%7#1: bytes = (concat 0x151f7c75 tmp%8#1)
        (log tmp%7#1)
        exit 1u
    block@8: // after_if_else_L38
        fail
    block@9: // __algots__.defaultCreate_L38
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u