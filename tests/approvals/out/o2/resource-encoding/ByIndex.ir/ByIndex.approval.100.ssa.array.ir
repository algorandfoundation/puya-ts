main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L16
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testExplicitIndex(account)uint64" => block@4, method "testImplicitValue(address)uint64" => block@5, * => block@8}
    block@4: // testExplicitIndex_route_L17
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%0#2: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let account#1: account = ((txnas Accounts) tmp%0#2)
        let (value%0#1: uint64, check%0#1: bool) = ((acct_params_get AcctBalance) account#1)
        (assert check%0#1) // account funded
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value%0#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#2: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#1: bytes = (concat 0x151f7c75 tmp%3#2)
        (log tmp%4#1)
        exit 1u
    block@5: // testImplicitValue_route_L26
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let account#0: account = reinterpret_Encoded(uint8[32])%0#0
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob value%0#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%2#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%3#1: bytes = (concat 0x151f7c75 tmp%2#1)
        (log tmp%3#1)
        exit 1u
    block@8: // after_if_else_L16
        fail
    block@9: // __algots__.defaultCreate_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u