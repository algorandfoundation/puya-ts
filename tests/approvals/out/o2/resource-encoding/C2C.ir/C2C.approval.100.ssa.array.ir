main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L62
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testCallToIndex(address,uint64)void" => block@3, method "testCallToValue(address,uint64)void" => block@4, method "testCallToEchoResource()void" => block@5, * => block@12}
    block@3: // testCallToIndex_route_L63
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let account#1: account = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let appId#2: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field Accounts) account#1)
        ((itxn_field ApplicationArgs) method "testExplicitIndex(account)uint64")
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationID) appId#2)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#2: bytes = (itxn LastLog)
        let tmp%0#3: bytes = ((extract 4 0) awst_tmp%0#2)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#2)
        let tmp%2#3: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#3) // Bytes has valid prefix
        let res1#1: uint64 = (btoi tmp%0#3)
        let (value%0#1: uint64, check%0#1: bool) = ((acct_params_get AcctBalance) account#1)
        (assert check%0#1) // account funded
        let tmp%4#1: bool = (== res1#1 value%0#1)
        (assert tmp%4#1)
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // testCallToValue_route_L71
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let account#0: account = reinterpret_Encoded(uint8[32])%1#0
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let appId#1: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "testExplicitValue(address)uint64")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(uint8[32])%1#0)
        ((itxn_field ApplicationID) appId#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#1: bytes = (itxn LastLog)
        let tmp%1#1: bytes = ((extract 4 0) awst_tmp%0#1)
        let tmp%2#2: bytes = ((extract 0 4) awst_tmp%0#1)
        let tmp%3#2: bool = (== tmp%2#2 0x151f7c75)
        (assert tmp%3#2) // Bytes has valid prefix
        let res1#0: uint64 = (btoi tmp%1#1)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let tmp%5#2: bool = (== res1#0 value%0#0)
        (assert tmp%5#2)
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // testCallToEchoResource_route_L80
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiADAQIDJgEEFR98dTEbQQCWggIEd+KNdARNNwJ2NhoAjgIAOwADgQBDMRkURDEYRDYaARc2GgIXNhoDIsAaF0sDEkQjwBoXSwISRCTAGksBEkRPAhZPAhZQTFAoTFCwIkMxGRREMRhENhoBF8AwNhoCF8AyNhoDF8AcIsAaF8AwSwMSRCPAGhfAMksCEkQkwBoXwBxLARJETwIWTwIWUExQKExQsCJDMRlA/3oxGBREIkM=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        let tmp%2#1: uint64 = (global CurrentApplicationID)
        let tmp%3#1: account = (txn Sender)
        ((itxn_field Accounts) tmp%3#1)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) tmp%2#1)
        ((itxn_field ApplicationArgs) method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let indexes#0: Encoded(uint64,uint64,uint8[32]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%5#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#1: bool = (== tmp%5#1 0x151f7c75)
        (assert tmp%6#1) // Bytes has valid prefix
        let aggregate%extract%0#0: bytes = (extract3 indexes#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%8#1: bool = (== values%0#0 asset#0)
        let tmp%9#1: bool = (&& 1u tmp%8#1)
        let aggregate%extract%1#0: bytes = (extract3 indexes#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%10#1: uint64 = (global CurrentApplicationID)
        let tmp%11#1: bool = (== values%1#0 tmp%10#1)
        let tmp%12#1: bool = (&& tmp%9#1 tmp%11#1)
        let aggregate%extract%2#0: bytes = (extract3 indexes#0 16u 32u)
        let tuple_item%2#0: Encoded(uint8[32]) = aggregate%extract%2#0
        let values%2#0: account = tuple_item%2#0
        let tmp%13#1: account = (txn Sender)
        let tmp%14#1: bool = (== values%2#0 tmp%13#1)
        let tmp%15#1: bool = (&& tmp%12#1 tmp%14#1)
        (assert tmp%15#1) // assert target is match for conditions
        itxn_begin
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%16#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%17#1: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%17#1)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%18#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%19#1: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%19#1
        let tmp%20#1: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        ((itxn_field ApplicationArgs) method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) tmp%16#1)
        ((itxn_field ApplicationArgs) tmp%18#1)
        ((itxn_field ApplicationArgs) tmp%20#1)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let resources#0: Encoded(uint64,uint64,uint8[32]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%22#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%23#0: bool = (== tmp%22#0 0x151f7c75)
        (assert tmp%23#0) // Bytes has valid prefix
        let aggregate%extract%3#0: bytes = (extract3 resources#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let tmp%25#0: bool = (== values%3#0 asset#0)
        let tmp%26#0: bool = (&& 1u tmp%25#0)
        let aggregate%extract%4#0: bytes = (extract3 resources#0 8u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let tmp%27#0: uint64 = (global CurrentApplicationID)
        let tmp%28#0: bool = (== values%4#0 tmp%27#0)
        let tmp%29#0: bool = (&& tmp%26#0 tmp%28#0)
        let aggregate%extract%5#0: bytes = (extract3 resources#0 16u 32u)
        let tuple_item%5#0: Encoded(uint8[32]) = aggregate%extract%5#0
        let values%5#0: account = tuple_item%5#0
        let tmp%30#0: account = (txn Sender)
        let tmp%31#0: bool = (== values%5#0 tmp%30#0)
        let tmp%32#0: bool = (&& tmp%29#0 tmp%31#0)
        (assert tmp%32#0) // assert target is match for conditions
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L62
        let tmp%19#0: uint64 = (txn OnCompletion)
        goto tmp%19#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L62
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // can only call when creating
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L62
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#0 <- block@3, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#1 <- block@4, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#2 <- block@5, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#3 <- block@9, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0