main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/resource-encoding.algo.ts::BaseValue.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/resource-encoding.algo.ts::BaseValue.__puya_arc4_router__() -> bool:
    block@0: // L16
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testBaseValue(address)uint64" => block@2, * => block@3}
    block@2: // testBaseValue_route_L22
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%7#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let tmp%8#0: uint64 = tests/approvals/resource-encoding.algo.ts::BaseValue.testBaseValue(tmp%7#0)
        let tmp%9#0: Encoded(uint64) = bytes_encode<uint64>(tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        return 1u
    block@3: // switch_case_default_L16
        goto block@4
    block@4: // switch_case_next_L16
        goto block@9
    block@5: // bare_routing_L16
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L16
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        tests/approvals/resource-encoding.algo.ts::BaseValue.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L16
        goto block@8
    block@8: // switch_case_next_L16
        goto block@9
    block@9: // after_if_else_L16
        return 0u

subroutine tests/approvals/resource-encoding.algo.ts::BaseValue.testBaseValue(account: account) -> uint64:
    block@0: // L22
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        return value%0#0

subroutine tests/approvals/resource-encoding.algo.ts::BaseValue.__algots__.defaultCreate() -> void:
    block@0: // L16
        return 