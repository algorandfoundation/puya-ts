{
    "name": "C2C",
    "structs": {},
    "methods": [
        {
            "name": "testCallToIndex",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testCallToValue",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testCallToEchoResource",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        344,
                        417,
                        494,
                        555
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        54,
                        449,
                        507
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        499,
                        560
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        370,
                        443
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        452,
                        510
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEGBCYCBBUffHUBATEbQQIgggMEE0x2qAQP79b3BOe8D1I2GgCOAwHHAY0AAiJDMRkURDEYRLGABAqBAUOyQoCzAQogAwECAyYBBBUffHUxG0EAloICBHfijXQETTcCdjYaAI4CADsAA4EAQzEZFEQxGEQ2GgEXNhoCFzYaAyLAGhdLAxJEI8AaF0sCEkQkwBpLARJETwIWTwIWUExQKExQsCJDMRkURDEYRDYaARfAMDYaAhfAMjYaAxfAHCLAGhfAMEsDEkQjwBoXwDJLAhJEJMAaF8AcSwESRE8CFk8CFlBMUChMULAiQzEZQP96MRgURCJDskAishkkshAisgGztD2xgARURVNUsiaAAVSyJSOyIoEDshAisgGztDyxMggxALIcSwGyMLIygAR34o10shqAAQCyGimyGimyGiKyGUsBshgkshAisgGztD5JVwAEKBJESSVbSwISIxBLAYEMWzIIEhBMVxQgMQASEESxSRYyCBYxAIAETTcCdrIaTwKyGkyyGrIaIrIZTLIYJLIQIrIBs7Q+SVcABCgSREklW08CEiMQSwGBDFsyCBIQTFcUIDEAEhBEI0MxGRREMRhENhoBNhoCF7GABNcwihOyGksBshqyGCSyECKyAbO0PklXBABMVwAEKBJEF0xzAEQSRCNDMRkURDEYRDYaATYaAhexSwGyHIAENDWftrIaKbIashgkshAisgGztD5JVwQATFcABCgSRBdMcwBEEkQjQzEZQP33MRgURCND",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}