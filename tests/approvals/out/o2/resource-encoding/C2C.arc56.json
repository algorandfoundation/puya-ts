{
    "name": "C2C",
    "structs": {},
    "methods": [
        {
            "name": "testCallToForeign",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testCallToValue",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testCallToEchoResource",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        348,
                        423,
                        500,
                        561
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        54,
                        455,
                        513
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        505,
                        566
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        376,
                        449
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        579
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        458,
                        516
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDYgNAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjUxCiAgICAvLyBjbGFzcyBDMkMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAogICAgcHVzaGJ5dGVzcyAweGZkODljYmU1IDB4MGZlZmQ2ZjcgMHhlN2JjMGY1MiAvLyBtZXRob2QgInRlc3RDYWxsVG9Gb3JlaWduKGFkZHJlc3MsdWludDY0KXZvaWQiLCBtZXRob2QgInRlc3RDYWxsVG9WYWx1ZShhZGRyZXNzLHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJ0ZXN0Q2FsbFRvRWNob1Jlc291cmNlKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl90ZXN0Q2FsbFRvRm9yZWlnbl9yb3V0ZUAzIG1haW5fdGVzdENhbGxUb1ZhbHVlX3JvdXRlQDQgbWFpbl90ZXN0Q2FsbFRvRWNob1Jlc291cmNlX3JvdXRlQDUKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjUxCiAgICAvLyBjbGFzcyBDMkMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3Rlc3RDYWxsVG9FY2hvUmVzb3VyY2Vfcm91dGVANToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjY5CiAgICAvLyB0ZXN0Q2FsbFRvRWNob1Jlc291cmNlKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo3MgogICAgLy8gY29uc3QgYXBwSWQgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzAKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoRWNob1Jlc291cmNlKQogICAgcHVzaGJ5dGVzIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDaUFEQVFJREpnRUVGUjk4ZFRFYlFRQ2FnZ0lFRDZaY0F3Uk5Od0oyTmhvQWpnSUFPd0FEZ1FCRE1Sa1VSREVZUkRZYUFSYzJHZ0lYTmhvRElzQWFGMHNERWtRandCb1hTd0lTUkNUQUdrc0JFa1JQQWhaUEFoWlFURkFvVEZDd0lrTXhHUlJFTVJoRU5ob0JGOEF3TmhvQ0Y4QXlOaG9ERjhBY0lzQWFGMG5BTUU4RUVrUWp3Qm9YU2NBeVR3UVNSQ1RBR2hkSndCeFBCQkpFVHdJV1R3SVdVRXdXVUNoTVVMQWlRekVaUVA5Mk1SZ1VSQ0pEKQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzIKICAgIC8vIGNvbnN0IGFwcElkID0gY29tcGlsZWQuYmFyZUNyZWF0ZSgpLmNyZWF0ZWRBcHAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjczLTc5CiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkuY3JlYXRlZEFzc2V0CiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo3NwogICAgLy8gYXNzZXROYW1lOiAnVEVTVCcsCiAgICBwdXNoYnl0ZXMgIlRFU1QiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzYKICAgIC8vIHVuaXROYW1lOiAnVCcsCiAgICBwdXNoYnl0ZXMgIlQiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjc1CiAgICAvLyB0b3RhbDogMSwKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjczLTc4CiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NzMtNzkKICAgIC8vIGNvbnN0IGFzc2V0ID0gaXR4bgogICAgLy8gICAuYXNzZXRDb25maWcoewogICAgLy8gICAgIHRvdGFsOiAxLAogICAgLy8gICAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgICAgYXNzZXROYW1lOiAnVEVTVCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKS5jcmVhdGVkQXNzZXQKICAgIGl0eG5fc3VibWl0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo3OQogICAgLy8gLnN1Ym1pdCgpLmNyZWF0ZWRBc3NldAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6ODEtODQKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IGluZGV4ZXMgfSA9IGNvbXBpbGVkLmNhbGwuZWNob1Jlc291cmNlQnlGb3JlaWduSW5kZXgoewogICAgLy8gICBhcmdzOiBbYXNzZXQsIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlcl0sCiAgICAvLyAgIGFwcElkLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjgyCiAgICAvLyBhcmdzOiBbYXNzZXQsIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlcl0sCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgQWNjb3VudHMKICAgIGRpZyAxCiAgICBpdHhuX2ZpZWxkIEFzc2V0cwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjgxLTg0CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiBpbmRleGVzIH0gPSBjb21waWxlZC5jYWxsLmVjaG9SZXNvdXJjZUJ5Rm9yZWlnbkluZGV4KHsKICAgIC8vICAgYXJnczogW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHgwZmE2NWMwMyAvLyBtZXRob2QgImVjaG9SZXNvdXJjZUJ5Rm9yZWlnbkluZGV4KGFzc2V0LGFwcGxpY2F0aW9uLGFjY291bnQpKHVpbnQ2NCx1aW50NjQsdWludDY0KSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjXzEgLy8gMHgwMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjXzEgLy8gMHgwMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjgxLTg0CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiBpbmRleGVzIH0gPSBjb21waWxlZC5jYWxsLmVjaG9SZXNvdXJjZUJ5Rm9yZWlnbkluZGV4KHsKICAgIC8vICAgYXJnczogW2Fzc2V0LCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXJdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGRpZyAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBkdXAKICAgIGludGNfMyAvLyA0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgIGV4dHJhY3RfdWludDY0CiAgICB1bmNvdmVyIDIKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4NQogICAgLy8gYXNzZXJ0TWF0Y2goaW5kZXhlcywgWzAsIDEsIDFdKQogICAgdW5jb3ZlciAyCiAgICAhCiAgICBpbnRjXzEgLy8gMQogICAgJiYKICAgIHVuY292ZXIgMgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICAmJgogICAgc3dhcAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjg3LTkwCiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXNvdXJjZXMgfSA9IGNvbXBpbGVkLmNhbGwuZWNob1Jlc291cmNlQnlWYWx1ZSh7CiAgICAvLyAgIGFyZ3M6IFthc3NldCwgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyXSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6ODgKICAgIC8vIGFyZ3M6IFthc3NldCwgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyXSwKICAgIGR1cAogICAgaXRvYgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBpdG9iCiAgICB0eG4gU2VuZGVyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo4Ny05MAogICAgLy8gY29uc3QgeyByZXR1cm5WYWx1ZTogcmVzb3VyY2VzIH0gPSBjb21waWxlZC5jYWxsLmVjaG9SZXNvdXJjZUJ5VmFsdWUoewogICAgLy8gICBhcmdzOiBbYXNzZXQsIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlcl0sCiAgICAvLyAgIGFwcElkLAogICAgLy8gfSkKICAgIHB1c2hieXRlcyAweDRkMzcwMjc2IC8vIG1ldGhvZCAiZWNob1Jlc291cmNlQnlWYWx1ZSh1aW50NjQsdWludDY0LGFkZHJlc3MpKHVpbnQ2NCx1aW50NjQsYWRkcmVzcykiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjkyCiAgICAvLyBhc3NlcnRNYXRjaChyZXNvdXJjZXMsIFthc3NldCwgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLCBUeG4uc2VuZGVyXSkKICAgIGR1cAogICAgaW50Y18zIC8vIDQKICAgIGV4dHJhY3RfdWludDY0CiAgICB1bmNvdmVyIDIKICAgID09CiAgICBpbnRjXzEgLy8gMQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICA9PQogICAgJiYKICAgIHN3YXAKICAgIGV4dHJhY3QgMjAgMzIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjY5CiAgICAvLyB0ZXN0Q2FsbFRvRWNob1Jlc291cmNlKCkgewogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl90ZXN0Q2FsbFRvVmFsdWVfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjYwCiAgICAvLyB0ZXN0Q2FsbFRvVmFsdWUoYWNjb3VudDogQWNjb3VudCwgYXBwSWQ6IEFwcGxpY2F0aW9uKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjUxCiAgICAvLyBjbGFzcyBDMkMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVzb3VyY2UtZW5jb2RpbmcuYWxnby50czo2MS02NAogICAgLy8gY29uc3QgeyByZXR1cm5WYWx1ZTogcmVzMSB9ID0gYWJpQ2FsbChCeVZhbHVlLnByb3RvdHlwZS50ZXN0RXhwbGljaXRWYWx1ZSwgewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2FjY291bnRdLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hieXRlcyAweGQ3MzA4YTEzIC8vIG1ldGhvZCAidGVzdEV4cGxpY2l0VmFsdWUoYWRkcmVzcyl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZGlnIDEKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgYnRvaQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjYKICAgIC8vIGFzc2VydChyZXMxID09PSBhY2NvdW50LmJhbGFuY2UpCiAgICBzd2FwCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NjAKICAgIC8vIHRlc3RDYWxsVG9WYWx1ZShhY2NvdW50OiBBY2NvdW50LCBhcHBJZDogQXBwbGljYXRpb24pIHsKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdENhbGxUb0ZvcmVpZ25fcm91dGVAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjUyCiAgICAvLyB0ZXN0Q2FsbFRvRm9yZWlnbihhY2NvdW50OiBBY2NvdW50LCBhcHBJZDogQXBwbGljYXRpb24pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NTEKICAgIC8vIGNsYXNzIEMyQyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjUzLTU2CiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXMxIH0gPSBhYmlDYWxsKEZvcmVpZ24ucHJvdG90eXBlLnRlc3RFeHBsaWNpdEZvcmVpZ24sIHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthY2NvdW50XSwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBBY2NvdW50cwogICAgcHVzaGJ5dGVzIDB4MTE1ZmYzNDIgLy8gbWV0aG9kICJ0ZXN0RXhwbGljaXRGb3JlaWduKGFjY291bnQpdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjXzEgLy8gMHgwMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NTMtNTYKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlczEgfSA9IGFiaUNhbGwoRm9yZWlnbi5wcm90b3R5cGUudGVzdEV4cGxpY2l0Rm9yZWlnbiwgewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2FjY291bnRdLAogICAgLy8gfSkKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgYnRvaQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NTgKICAgIC8vIGFzc2VydChyZXMxID09PSBhY2NvdW50LmJhbGFuY2UpCiAgICBzd2FwCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3Jlc291cmNlLWVuY29kaW5nLmFsZ28udHM6NTIKICAgIC8vIHRlc3RDYWxsVG9Gb3JlaWduKGFjY291bnQ6IEFjY291bnQsIGFwcElkOiBBcHBsaWNhdGlvbikgewogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZXNvdXJjZS1lbmNvZGluZy5hbGdvLnRzOjUxCiAgICAvLyBjbGFzcyBDMkMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEyCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEGBCYCBBUffHUBATEbQQImggME/YnL5QQP79b3BOe8D1I2GgCOAwHNAZMAAiJDMRkURDEYRLGABAqBAUOyQoC3AQogAwECAyYBBBUffHUxG0EAmoICBA+mXAMETTcCdjYaAI4CADsAA4EAQzEZFEQxGEQ2GgEXNhoCFzYaAyLAGhdLAxJEI8AaF0sCEkQkwBpLARJETwIWTwIWUExQKExQsCJDMRkURDEYRDYaARfAMDYaAhfAMjYaAxfAHCLAGhdJwDBPBBJEI8AaF0nAMk8EEkQkwBoXScAcTwQSRE8CFk8CFlBMFlAoTFCwIkMxGUD/djEYFEQiQ7JAIrIZJLIQIrIBs7Q9sYAEVEVTVLImgAFUsiUjsiKBA7IQIrIBs7Q8sTIIMQCyHEsBsjCyMoAED6ZcA7IagAEAshopshopshoishlLAbIYJLIQIrIBs7Q+SVcABCgSREklW0sBgQxbTwKBFFtPAhQjEE8CIxIQTCMSEESxSRYyCBYxAIAETTcCdrIaTwKyGkyyGrIaIrIZTLIYJLIQIrIBs7Q+SVcABCgSREklW08CEiMQSwGBDFsyCBIQTFcUIDEAEhBEI0MxGRREMRhENhoBNhoCF7GABNcwihOyGksBshqyGCSyECKyAbO0PklXBABMVwAEKBJEF0xzAEQSRCNDMRkURDEYRDYaATYaAhexSwGyHIAEEV/zQrIaKbIashgkshAisgGztD5JVwQATFcABCgSRBdMcwBEEkQjQzEZQP3xMRgURCND",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}