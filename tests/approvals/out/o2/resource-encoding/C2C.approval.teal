#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6
    bytecblock 0x151f7c75
    // tests/approvals/resource-encoding.algo.ts:49
    // class C2C extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xfd89cbe5 0x0fefd6f7 // method "testCallToForeign(address,uint64)void", method "testCallToValue(address,uint64)void"
    txna ApplicationArgs 0
    match main_testCallToForeign_route@3 main_testCallToValue_route@4

main_after_if_else@11:
    // tests/approvals/resource-encoding.algo.ts:49
    // class C2C extends Contract {
    intc_0 // 0
    return

main_testCallToValue_route@4:
    // tests/approvals/resource-encoding.algo.ts:58
    // testCallToValue(account: Account, appId: Application) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:49
    // class C2C extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/approvals/resource-encoding.algo.ts:59-62
    // const { returnValue: res1 } = abiCall(ByValue.prototype.testExplicitValue, {
    //   appId,
    //   args: [account],
    // })
    itxn_begin
    pushbytes 0xd7308a13 // method "testExplicitValue(address)uint64"
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // tests/approvals/resource-encoding.algo.ts:64
    // assert(res1 === account.balance)
    swap
    acct_params_get AcctBalance
    assert // account funded
    ==
    assert
    // tests/approvals/resource-encoding.algo.ts:58
    // testCallToValue(account: Account, appId: Application) {
    intc_1 // 1
    return

main_testCallToForeign_route@3:
    // tests/approvals/resource-encoding.algo.ts:50
    // testCallToForeign(account: Account, appId: Application) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:49
    // class C2C extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/approvals/resource-encoding.algo.ts:51-54
    // const { returnValue: res1 } = abiCall(Foreign.prototype.testExplicitForeign, {
    //   appId,
    //   args: [account],
    // })
    itxn_begin
    dig 1
    itxn_field Accounts
    pushbytes 0x115ff342 // method "testExplicitForeign(account)uint64"
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // tests/approvals/resource-encoding.algo.ts:51-54
    // const { returnValue: res1 } = abiCall(Foreign.prototype.testExplicitForeign, {
    //   appId,
    //   args: [account],
    // })
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // tests/approvals/resource-encoding.algo.ts:56
    // assert(res1 === account.balance)
    swap
    acct_params_get AcctBalance
    assert // account funded
    ==
    assert
    // tests/approvals/resource-encoding.algo.ts:50
    // testCallToForeign(account: Account, appId: Application) {
    intc_1 // 1
    return

main_bare_routing@7:
    // tests/approvals/resource-encoding.algo.ts:49
    // class C2C extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
