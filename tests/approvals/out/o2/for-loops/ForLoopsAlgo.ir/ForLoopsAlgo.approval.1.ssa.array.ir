main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_loop(uint64,uint64,uint64)uint64" => block@3, method "test_for_loop_break(uint64,uint64,uint64)uint64" => block@4, method "test_for_loop_continue(uint64,uint64,uint64)uint64" => block@5, method "test_for_loop_labelled(uint64,uint64,uint64)uint64" => block@6, * => block@13}
    block@3: // test_for_loop_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let start#3: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let stop#3: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 3)
        let step#3: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let total#13: uint64 = 0u
        goto block@45
    block@45: // while_top_L7
        let i#12: uint64 = φ(start#3 <- block@3, i#13 <- block@46)
        let total#14: uint64 = φ(total#13 <- block@3, total#15 <- block@46)
        let tmp%0#5: bool = (< i#12 stop#3)
        goto tmp%0#5 ? block@46 : block@47
    block@46: // while_body_L7
        let total#15: uint64 = (+ total#14 i#12)
        let i#13: uint64 = (+ i#12 step#3)
        goto block@45
    block@47: // after_while_L7
        let val_as_bytes%0#0: bytes[8] = (itob total#14)
        let tmp%10#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%10#0)
        let tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // test_for_loop_break_route_L13
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let start#2: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 2)
        let stop#2: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 3)
        let step#2: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let total#9: uint64 = 0u
        goto block@37
    block@37: // while_top_L15
        let i#9: uint64 = φ(start#2 <- block@4, i#10 <- block@40)
        let total#10: uint64 = φ(total#9 <- block@4, total#11 <- block@40)
        let tmp%0#4: bool = (< i#9 stop#2)
        goto tmp%0#4 ? block@38 : block@41
    block@38: // while_body_L15
        let total#11: uint64 = (+ total#10 i#9)
        let tmp%1#3: bool = (> total#11 10u)
        goto tmp%1#3 ? block@39 : block@40
    block@39: // if_body_L17
        goto block@42
    block@40: // after_if_else_L17
        let i#10: uint64 = (+ i#9 step#2)
        goto block@37
    block@41: // after_while_L15
        goto block@42
    block@42: // L15
        let total#12: uint64 = φ(total#11 <- block@39, total#10 <- block@41)
        let val_as_bytes%1#0: bytes[8] = (itob total#12)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%18#0)
        let tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // test_for_loop_continue_route_L24
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_bytes[8]%6#0: bytes[8] = (txna ApplicationArgs 1)
        let start#1: uint64 = (btoi reinterpret_bytes[8]%6#0)
        let reinterpret_bytes[8]%7#0: bytes[8] = (txna ApplicationArgs 2)
        let stop#1: uint64 = (btoi reinterpret_bytes[8]%7#0)
        let reinterpret_bytes[8]%8#0: bytes[8] = (txna ApplicationArgs 3)
        let step#1: uint64 = (btoi reinterpret_bytes[8]%8#0)
        let total#5: uint64 = 0u
        goto block@29
    block@29: // while_top_L26
        let i#5: uint64 = φ(start#1 <- block@5, i#7 <- block@33)
        let total#6: uint64 = φ(total#5 <- block@5, total#8 <- block@33)
        let tmp%0#3: bool = (< i#5 stop#1)
        goto tmp%0#3 ? block@30 : block@34
    block@30: // while_body_L26
        let tmp%1#2: uint64 = (% i#5 5u)
        goto tmp%1#2 ? block@32 : block@31
    block@31: // if_body_L27
        goto block@33
    block@32: // after_if_else_L27
        let total#7: uint64 = (+ total#6 i#5)
        goto block@33
    block@33: // L26
        let total#8: uint64 = φ(total#6 <- block@31, total#7 <- block@32)
        let i#7: uint64 = (+ i#5 step#1)
        goto block@29
    block@34: // after_while_L26
        let val_as_bytes%2#0: bytes[8] = (itob total#6)
        let tmp%26#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%26#0)
        let tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // test_for_loop_labelled_route_L32
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_bytes[8]%9#0: bytes[8] = (txna ApplicationArgs 1)
        let start#0: uint64 = (btoi reinterpret_bytes[8]%9#0)
        let reinterpret_bytes[8]%10#0: bytes[8] = (txna ApplicationArgs 2)
        let stop#0: uint64 = (btoi reinterpret_bytes[8]%10#0)
        let reinterpret_bytes[8]%11#0: bytes[8] = (txna ApplicationArgs 3)
        let step#0: uint64 = (btoi reinterpret_bytes[8]%11#0)
        let total#0: uint64 = 0u
        goto block@18
    block@18: // while_top_L34
        let i#1: uint64 = φ(start#0 <- block@6, i#3 <- block@24)
        let total#3: uint64 = φ(total#0 <- block@6, total#1 <- block@24)
        let tmp%0#2: bool = (< i#1 stop#0)
        goto tmp%0#2 ? block@19 : block@25
    block@19: // while_body_L34
        goto block@20
    block@20: // while_top_L35
        let j#1: uint64 = φ(start#0 <- block@19, j#2 <- block@23)
        let total#1: uint64 = φ(total#3 <- block@19, total#2 <- block@23)
        let tmp%1#1: bool = (< j#1 stop#0)
        goto tmp%1#1 ? block@21 : block@24
    block@21: // while_body_L35
        let tmp%2#1: uint64 = (+ i#1 j#1)
        let total#2: uint64 = (+ total#1 tmp%2#1)
        let tmp%3#1: uint64 = (* i#1 j#1)
        let tmp%4#1: bool = (> tmp%3#1 stop#0)
        goto tmp%4#1 ? block@22 : block@23
    block@22: // if_body_L38
        goto block@26
    block@23: // after_if_else_L38
        let j#2: uint64 = (+ j#1 step#0)
        goto block@20
    block@24: // after_while_L35
        let i#3: uint64 = (+ i#1 step#0)
        goto block@18
    block@25: // after_while_L34
        goto block@26
    block@26: // L34
        let total#4: uint64 = φ(total#2 <- block@22, total#3 <- block@25)
        let val_as_bytes%3#0: bytes[8] = (itob total#4)
        let tmp%34#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%34#0)
        let tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L4
        let tmp%35#0: uint64 = (txn OnCompletion)
        goto tmp%35#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L4
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // can only call when creating
        let tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L4
        let tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#0 <- block@47, tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#1 <- block@42, tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#2 <- block@34, tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#3 <- block@26, tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0