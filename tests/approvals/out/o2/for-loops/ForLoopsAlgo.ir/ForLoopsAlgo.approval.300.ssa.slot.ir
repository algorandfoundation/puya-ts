main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_for_loop(uint64,uint64,uint64)uint64" => block@4, method "test_for_loop_break(uint64,uint64,uint64)uint64" => block@5, method "test_for_loop_continue(uint64,uint64,uint64)uint64" => block@6, method "test_for_loop_labelled(uint64,uint64,uint64)uint64" => block@7, * => block@10}
    block@4: // test_for_loop_route_L5
        let tmp%0#8: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#8)
        let eq%0#3: bool = (== len%0#3 8u)
        (assert eq%0#3) // invalid number of bytes for uint64
        let start#3: uint64 = (btoi tmp%0#8)
        let tmp%2#7: bytes = (txna ApplicationArgs 2)
        let len%1#3: uint64 = (len tmp%2#7)
        let eq%1#3: bool = (== len%1#3 8u)
        (assert eq%1#3) // invalid number of bytes for uint64
        let stop#3: uint64 = (btoi tmp%2#7)
        let tmp%4#5: bytes = (txna ApplicationArgs 3)
        let len%2#3: uint64 = (len tmp%4#5)
        let eq%2#3: bool = (== len%2#3 8u)
        (assert eq%2#3) // invalid number of bytes for uint64
        let step#3: uint64 = (btoi tmp%4#5)
        let total#13: uint64 = 0u
        goto block@42
    block@42: // while_top_L7
        let i#12: uint64 = φ(start#3 <- block@4, i#13 <- block@43)
        let total#14: uint64 = φ(total#13 <- block@4, total#15 <- block@43)
        let tmp%0#9: bool = (< i#12 stop#3)
        goto tmp%0#9 ? block@43 : block@44
    block@43: // while_body_L7
        let total#15: uint64 = (+ total#14 i#12)
        let i#13: uint64 = (+ i#12 step#3)
        goto block@42
    block@44: // after_while_L7
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#14)
        let tmp%8#4: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%8#4)
        exit 1u
    block@5: // test_for_loop_break_route_L13
        let tmp%0#6: bytes = (txna ApplicationArgs 1)
        let len%0#2: uint64 = (len tmp%0#6)
        let eq%0#2: bool = (== len%0#2 8u)
        (assert eq%0#2) // invalid number of bytes for uint64
        let start#2: uint64 = (btoi tmp%0#6)
        let tmp%2#5: bytes = (txna ApplicationArgs 2)
        let len%1#2: uint64 = (len tmp%2#5)
        let eq%1#2: bool = (== len%1#2 8u)
        (assert eq%1#2) // invalid number of bytes for uint64
        let stop#2: uint64 = (btoi tmp%2#5)
        let tmp%4#4: bytes = (txna ApplicationArgs 3)
        let len%2#2: uint64 = (len tmp%4#4)
        let eq%2#2: bool = (== len%2#2 8u)
        (assert eq%2#2) // invalid number of bytes for uint64
        let step#2: uint64 = (btoi tmp%4#4)
        let total#9: uint64 = 0u
        goto block@34
    block@34: // while_top_L15
        let i#9: uint64 = φ(start#2 <- block@5, i#10 <- block@37)
        let total#10: uint64 = φ(total#9 <- block@5, total#11 <- block@37)
        let tmp%0#7: bool = (< i#9 stop#2)
        goto tmp%0#7 ? block@35 : block@38
    block@35: // while_body_L15
        let total#11: uint64 = (+ total#10 i#9)
        let tmp%2#6: bool = (> total#11 10u)
        goto tmp%2#6 ? block@36 : block@37
    block@36: // if_body_L17
        goto block@39
    block@37: // after_if_else_L17
        let i#10: uint64 = (+ i#9 step#2)
        goto block@34
    block@38: // after_while_L15
        goto block@39
    block@39: // L15
        let total#12: uint64 = φ(total#11 <- block@36, total#10 <- block@38)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#12)
        let tmp%8#3: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%8#3)
        exit 1u
    block@6: // test_for_loop_continue_route_L24
        let tmp%0#4: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#4)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for uint64
        let start#1: uint64 = (btoi tmp%0#4)
        let tmp%2#3: bytes = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len tmp%2#3)
        let eq%1#1: bool = (== len%1#1 8u)
        (assert eq%1#1) // invalid number of bytes for uint64
        let stop#1: uint64 = (btoi tmp%2#3)
        let tmp%4#3: bytes = (txna ApplicationArgs 3)
        let len%2#1: uint64 = (len tmp%4#3)
        let eq%2#1: bool = (== len%2#1 8u)
        (assert eq%2#1) // invalid number of bytes for uint64
        let step#1: uint64 = (btoi tmp%4#3)
        let total#5: uint64 = 0u
        goto block@26
    block@26: // while_top_L26
        let i#5: uint64 = φ(start#1 <- block@6, i#7 <- block@30)
        let total#6: uint64 = φ(total#5 <- block@6, total#8 <- block@30)
        let tmp%0#5: bool = (< i#5 stop#1)
        goto tmp%0#5 ? block@27 : block@31
    block@27: // while_body_L26
        let tmp%1#4: uint64 = (% i#5 5u)
        goto tmp%1#4 ? block@29 : block@28
    block@28: // if_body_L27
        goto block@30
    block@29: // after_if_else_L27
        let total#7: uint64 = (+ total#6 i#5)
        goto block@30
    block@30: // L26
        let total#8: uint64 = φ(total#6 <- block@28, total#7 <- block@29)
        let i#7: uint64 = (+ i#5 step#1)
        goto block@26
    block@31: // after_while_L26
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob total#6)
        let tmp%8#2: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#0)
        (log tmp%8#2)
        exit 1u
    block@7: // test_for_loop_labelled_route_L32
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let start#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let stop#0: uint64 = (btoi tmp%2#1)
        let tmp%4#1: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#1)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let step#0: uint64 = (btoi tmp%4#1)
        let total#0: uint64 = 0u
        goto block@15
    block@15: // while_top_L34
        let i#1: uint64 = φ(start#0 <- block@7, i#3 <- block@21)
        let total#3: uint64 = φ(total#0 <- block@7, total#1 <- block@21)
        let tmp%0#3: bool = (< i#1 stop#0)
        goto tmp%0#3 ? block@16 : block@22
    block@16: // while_body_L34
        goto block@17
    block@17: // while_top_L35
        let j#1: uint64 = φ(start#0 <- block@16, j#2 <- block@20)
        let total#1: uint64 = φ(total#3 <- block@16, total#2 <- block@20)
        let tmp%1#2: bool = (< j#1 stop#0)
        goto tmp%1#2 ? block@18 : block@21
    block@18: // while_body_L35
        let tmp%2#2: uint64 = (+ i#1 j#1)
        let total#2: uint64 = (+ total#1 tmp%2#2)
        let tmp%4#2: uint64 = (* i#1 j#1)
        let tmp%5#2: bool = (> tmp%4#2 stop#0)
        goto tmp%5#2 ? block@19 : block@20
    block@19: // if_body_L38
        goto block@23
    block@20: // after_if_else_L38
        let j#2: uint64 = (+ j#1 step#0)
        goto block@17
    block@21: // after_while_L35
        let i#3: uint64 = (+ i#1 step#0)
        goto block@15
    block@22: // after_while_L34
        goto block@23
    block@23: // L34
        let total#4: uint64 = φ(total#2 <- block@19, total#3 <- block@22)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob total#4)
        let tmp%8#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%3#0)
        (log tmp%8#1)
        exit 1u
    block@10: // after_if_else_L4
        fail
    block@11: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u