main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@10
    block@1: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@8
    block@2: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_for_loop(uint64,uint64,uint64)uint64" => block@3, method "test_for_loop_break(uint64,uint64,uint64)uint64" => block@4, method "test_for_loop_continue(uint64,uint64,uint64)uint64" => block@5, method "test_for_loop_labelled(uint64,uint64,uint64)uint64" => block@6, * => block@7}
    block@3: // test_for_loop_route_L5
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop[routing]()
        goto block@7
    block@4: // test_for_loop_break_route_L13
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break[routing]()
        goto block@7
    block@5: // test_for_loop_continue_route_L24
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue[routing]()
        goto block@7
    block@6: // test_for_loop_labelled_route_L32
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled[routing]()
        goto block@7
    block@7: // switch_case_next_L4
        goto block@9
    block@8: // create_NoOp_L4
        goto block@9
    block@9: // after_if_else_L4
        goto block@11
    block@10: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__algots__.defaultCreate()
        exit 1u
    block@11: // after_if_else_L4
        exit 0u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let tmp%3#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break[routing]() -> void:
    block@0: // L13
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let tmp%3#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue[routing]() -> void:
    block@0: // L24
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let tmp%3#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let tmp%3#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L5
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L7
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // while_body_L7
        let tmp%1#0: uint64 = (+ total#1 i#1)
        let total#2: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ i#1 step#0)
        let i#2: uint64 = tmp%2#0
        goto block@1
    block@3: // after_while_L7
        return total#1

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L13
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L15
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@5
    block@2: // while_body_L15
        let tmp%1#0: uint64 = (+ total#1 i#1)
        let total#2: uint64 = tmp%1#0
        let tmp%2#0: bool = (> total#2 10u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L17
        goto block@6
    block@4: // after_if_else_L17
        let tmp%3#0: uint64 = (+ i#1 step#0)
        let i#2: uint64 = tmp%3#0
        goto block@1
    block@5: // after_while_L15
        goto block@6
    block@6: // L15
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@5)
        return total#3

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L24
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L26
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@5)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@6
    block@2: // while_body_L26
        let tmp%1#0: uint64 = (% i#1 5u)
        let tmp%2#0: bool = (== tmp%1#0 0u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L27
        goto block@5
    block@4: // after_if_else_L27
        let tmp%3#0: uint64 = (+ total#1 i#1)
        let total#2: uint64 = tmp%3#0
        goto block@5
    block@5: // L26
        let total#3: uint64 = φ(total#1 <- block@3, total#2 <- block@4)
        let tmp%4#0: uint64 = (+ i#1 step#0)
        let i#3: uint64 = tmp%4#0
        goto block@1
    block@6: // after_while_L26
        return total#1

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L32
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L34
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@7)
        let total#3: uint64 = φ(total#0 <- block@0, total#1 <- block@7)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@8
    block@2: // while_body_L34
        let j#0: uint64 = start#0
        goto block@3
    block@3: // while_top_L35
        let j#1: uint64 = φ(j#0 <- block@2, j#2 <- block@6)
        let total#1: uint64 = φ(total#3 <- block@2, total#2 <- block@6)
        let tmp%1#0: bool = (< j#1 stop#0)
        goto tmp%1#0 ? block@4 : block@7
    block@4: // while_body_L35
        let tmp%2#0: uint64 = (+ i#1 j#1)
        let tmp%3#0: uint64 = (+ total#1 tmp%2#0)
        let total#2: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* i#1 j#1)
        let tmp%5#0: bool = (> tmp%4#0 stop#0)
        goto tmp%5#0 ? block@5 : block@6
    block@5: // if_body_L38
        goto block@9
    block@6: // after_if_else_L38
        let tmp%6#0: uint64 = (+ j#1 step#0)
        let j#2: uint64 = tmp%6#0
        goto block@3
    block@7: // after_while_L35
        let tmp%7#0: uint64 = (+ i#1 step#0)
        let i#3: uint64 = tmp%7#0
        goto block@1
    block@8: // after_while_L34
        goto block@9
    block@9: // L34
        let total#4: uint64 = φ(total#2 <- block@5, total#3 <- block@8)
        return total#4

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 