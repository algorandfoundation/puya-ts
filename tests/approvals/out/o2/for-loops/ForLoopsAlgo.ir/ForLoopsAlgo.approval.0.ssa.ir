main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_loop(uint64,uint64,uint64)uint64" => block@2, method "test_for_loop_break(uint64,uint64,uint64)uint64" => block@3, method "test_for_loop_continue(uint64,uint64,uint64)uint64" => block@4, method "test_for_loop_labelled(uint64,uint64,uint64)uint64" => block@5, * => block@6}
    block@2: // test_for_loop_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%9#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let to_encode%0#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop(tmp%7#0, tmp%8#0, tmp%9#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%10#0)
        return 1u
    block@3: // test_for_loop_break_route_L13
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%16#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let to_encode%1#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break(tmp%15#0, tmp%16#0, tmp%17#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%18#0)
        return 1u
    block@4: // test_for_loop_continue_route_L24
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_bytes[8]%6#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%23#0: uint64 = (btoi reinterpret_bytes[8]%6#0)
        let reinterpret_bytes[8]%7#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%24#0: uint64 = (btoi reinterpret_bytes[8]%7#0)
        let reinterpret_bytes[8]%8#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%25#0: uint64 = (btoi reinterpret_bytes[8]%8#0)
        let to_encode%2#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue(tmp%23#0, tmp%24#0, tmp%25#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%26#0)
        return 1u
    block@5: // test_for_loop_labelled_route_L32
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_bytes[8]%9#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%31#0: uint64 = (btoi reinterpret_bytes[8]%9#0)
        let reinterpret_bytes[8]%10#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%32#0: uint64 = (btoi reinterpret_bytes[8]%10#0)
        let reinterpret_bytes[8]%11#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%33#0: uint64 = (btoi reinterpret_bytes[8]%11#0)
        let to_encode%3#0: uint64 = tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled(tmp%31#0, tmp%32#0, tmp%33#0)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%3#0)
        let tmp%34#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%34#0)
        return 1u
    block@6: // switch_case_default_L4
        goto block@7
    block@7: // switch_case_next_L4
        goto block@12
    block@8: // bare_routing_L4
        let tmp%35#0: uint64 = (txn OnCompletion)
        switch tmp%35#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L4
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (== tmp%36#0 0u)
        (assert tmp%37#0) // can only call when creating
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L4
        goto block@11
    block@11: // switch_case_next_L4
        goto block@12
    block@12: // after_if_else_L4
        return 0u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L5
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L7
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@4
    block@2: // while_body_L7
        let total#2: uint64 = (+ total#1 i#1)
        goto block@3
    block@3: // L7
        let i#3: uint64 = (+ i#1 step#0)
        goto block@1
    block@4: // after_while_L7
        goto block@5
    block@5: // L7
        return total#1

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L13
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L15
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@6
    block@2: // while_body_L15
        let total#2: uint64 = (+ total#1 i#1)
        let tmp%1#0: bool = (> total#2 10u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L17
        goto block@7
    block@4: // after_if_else_L17
        goto block@5
    block@5: // L15
        let i#3: uint64 = (+ i#1 step#0)
        goto block@1
    block@6: // after_while_L15
        goto block@7
    block@7: // L15
        let total#4: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#4

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L24
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L26
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@5)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@6
    block@2: // while_body_L26
        let tmp%1#0: uint64 = (% i#1 5u)
        let tmp%2#0: bool = (== tmp%1#0 0u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L27
        goto block@5
    block@4: // after_if_else_L27
        let total#2: uint64 = (+ total#1 i#1)
        goto block@5
    block@5: // L26
        let total#3: uint64 = φ(total#1 <- block@3, total#2 <- block@4)
        let i#3: uint64 = (+ i#1 step#0)
        goto block@1
    block@6: // after_while_L26
        goto block@7
    block@7: // L26
        return total#1

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled(start: uint64, stop: uint64, step: uint64) -> uint64:
    block@0: // L32
        let total#0: uint64 = 0u
        let i#0: uint64 = start#0
        goto block@1
    block@1: // while_top_L34
        let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@10)
        let total#3: uint64 = φ(total#0 <- block@0, total#1 <- block@10)
        let tmp%0#0: bool = (< i#1 stop#0)
        goto tmp%0#0 ? block@2 : block@11
    block@2: // while_body_L34
        let j#0: uint64 = start#0
        goto block@3
    block@3: // while_top_L35
        let j#1: uint64 = φ(j#0 <- block@2, j#3 <- block@7)
        let total#1: uint64 = φ(total#3 <- block@2, total#2 <- block@7)
        let tmp%1#0: bool = (< j#1 stop#0)
        goto tmp%1#0 ? block@4 : block@8
    block@4: // while_body_L35
        let tmp%2#0: uint64 = (+ j#1 j#1)
        let total#2: uint64 = (+ total#1 tmp%2#0)
        let tmp%3#0: bool = (== j#1 start#0)
        goto tmp%3#0 ? block@5 : block@6
    block@5: // if_body_L38
        goto block@12
    block@6: // after_if_else_L38
        goto block@7
    block@7: // L35
        let j#3: uint64 = (+ j#1 step#0)
        goto block@3
    block@8: // after_while_L35
        goto block@9
    block@9: // L35
        goto block@10
    block@10: // L34
        let i#3: uint64 = (+ i#1 step#0)
        goto block@1
    block@11: // after_while_L34
        goto block@12
    block@12: // L34
        let total#6: uint64 = φ(total#2 <- block@5, total#3 <- block@11)
        return total#6

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 