{
    "name": "ForLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_loop",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_loop_break",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_loop_continue",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_loop_labelled",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        62,
                        177,
                        260,
                        342
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        423
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        65,
                        180,
                        263,
                        345
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        73,
                        85,
                        96,
                        188,
                        197,
                        208,
                        271,
                        280,
                        291,
                        353,
                        362,
                        373
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADCAABJgEEFR98dYAARwUxG0EBiYIEBPhlT3MEKH9MAgRL13eMBDNnXgY2GgCOBAEaAMgAdQACI0MxGRREMRhENhoBSRUiEkQXSUUFNhoCSRUiEkQXRQM2GgNJFSISRBdFBCNFAkUGSwVLAgxBACtLA0UFSwRLAgxBACdLBUlLBklOAwhLAwhFAwtLAg1AAApLBEsDCEUFQv/ZSRYoTFCwJENLBUsDCEUGQv+7MRkURDEYRDYaAUkVIhJEFzYaAkkVIhJEF0UDNhoDSRUiEkQXRQQjRQJFBksFSwIMQQAYSwWBBRhBAAZJSwYIRQFLBUsDCEUGQv/gSRYoTFCwJEMxGRREMRhENhoBSRUiEkQXNhoCSRUiEkQXRQM2GgNJFSISRBdFBCNFAkUGSwVLAgxBABdJSwYISUUCgQoNQAAKSwVLAwhFBkL/4UkWKExQsCRDMRkURDEYRDYaAUkVIhJEFzYaAkkVIhJEF0UDNhoDSRUiEkQXRQQjRQJFBksFSwIMQQARSUsGSU4CCEUCSwMIRQZC/+dJFihMULAkQzEZQP6VMRgURCRD",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}