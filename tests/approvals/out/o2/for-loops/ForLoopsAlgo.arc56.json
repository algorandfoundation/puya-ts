{
    "name": "ForLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_loop",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_loop_break",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_loop_continue",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_loop_labelled",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "stop"
                },
                {
                    "type": "uint64",
                    "name": "step"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        61,
                        157,
                        225,
                        292
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        358
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        64,
                        160,
                        228,
                        295
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA1CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6NAogICAgLy8gY2xhc3MgRm9yTG9vcHNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDkKICAgIHB1c2hieXRlc3MgMHhmODY1NGY3MyAweDI4N2Y0YzAyIDB4NGJkNzc3OGMgMHgzMzY3NWUwNiAvLyBtZXRob2QgInRlc3RfZm9yX2xvb3AodWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0IiwgbWV0aG9kICJ0ZXN0X2Zvcl9sb29wX2JyZWFrKHVpbnQ2NCx1aW50NjQsdWludDY0KXVpbnQ2NCIsIG1ldGhvZCAidGVzdF9mb3JfbG9vcF9jb250aW51ZSh1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInRlc3RfZm9yX2xvb3BfbGFiZWxsZWQodWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0IgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl90ZXN0X2Zvcl9sb29wX3JvdXRlQDMgbWFpbl90ZXN0X2Zvcl9sb29wX2JyZWFrX3JvdXRlQDQgbWFpbl90ZXN0X2Zvcl9sb29wX2NvbnRpbnVlX3JvdXRlQDUgbWFpbl90ZXN0X2Zvcl9sb29wX2xhYmVsbGVkX3JvdXRlQDYKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czo0CiAgICAvLyBjbGFzcyBGb3JMb29wc0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3Rlc3RfZm9yX2xvb3BfbGFiZWxsZWRfcm91dGVANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czozMgogICAgLy8gdGVzdF9mb3JfbG9vcF9sYWJlbGxlZChzdGFydDogdWludDY0LCBzdG9wOiB1aW50NjQsIHN0ZXA6IHVpbnQ2NCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6NAogICAgLy8gY2xhc3MgRm9yTG9vcHNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgZHVwCiAgICBidXJ5IDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIGJ1cnkgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgYnVyeSA0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6MzMKICAgIC8vIGxldCB0b3RhbCA9IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgMgogICAgYnVyeSA2CgptYWluX3doaWxlX3RvcEAxODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czozNAogICAgLy8gb3V0ZXI6IGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0b3A7IGkgKz0gc3RlcCkgewogICAgZGlnIDUKICAgIGRpZyAyCiAgICA8CiAgICBieiBtYWluX2Jsb2NrQDI2CiAgICBkaWcgMwogICAgYnVyeSA1CgptYWluX3doaWxlX3RvcEAyMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czozNQogICAgLy8gZm9yIChsZXQgaiA9IHN0YXJ0OyBqIDwgc3RvcDsgaiArPSBzdGVwKSB7CiAgICBkaWcgNAogICAgZGlnIDIKICAgIDwKICAgIGJ6IG1haW5fYWZ0ZXJfd2hpbGVAMjQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czozNgogICAgLy8gdG90YWwgKz0gaiArIGoKICAgIGRpZyA0CiAgICBkdXAKICAgIGRpZyAxCiAgICArCiAgICBkaWcgMgogICAgKwogICAgYnVyeSAyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6MzgKICAgIC8vIGlmIChqID09PSBzdGFydCkgYnJlYWsgb3V0ZXIKICAgIGRpZyA0CiAgICA9PQogICAgYm56IG1haW5fYmxvY2tAMjYKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czozNQogICAgLy8gZm9yIChsZXQgaiA9IHN0YXJ0OyBqIDwgc3RvcDsgaiArPSBzdGVwKSB7CiAgICBkaWcgNAogICAgZGlnIDMKICAgICsKICAgIGJ1cnkgNQogICAgYiBtYWluX3doaWxlX3RvcEAyMAoKbWFpbl9ibG9ja0AyNjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czozMgogICAgLy8gdGVzdF9mb3JfbG9vcF9sYWJlbGxlZChzdGFydDogdWludDY0LCBzdG9wOiB1aW50NjQsIHN0ZXA6IHVpbnQ2NCkgewogICAgZHVwCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FmdGVyX3doaWxlQDI0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjM0CiAgICAvLyBvdXRlcjogZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7CiAgICBkaWcgNQogICAgZGlnIDMKICAgICsKICAgIGJ1cnkgNgogICAgYiBtYWluX3doaWxlX3RvcEAxOAoKbWFpbl90ZXN0X2Zvcl9sb29wX2NvbnRpbnVlX3JvdXRlQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6MjQKICAgIC8vIHRlc3RfZm9yX2xvb3BfY29udGludWUoc3RhcnQ6IHVpbnQ2NCwgc3RvcDogdWludDY0LCBzdGVwOiB1aW50NjQpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjQKICAgIC8vIGNsYXNzIEZvckxvb3BzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIGJ1cnkgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgYnVyeSA0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6MjUKICAgIC8vIGxldCB0b3RhbCA9IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgMgogICAgYnVyeSA2CgptYWluX3doaWxlX3RvcEAyOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoyNgogICAgLy8gZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7CiAgICBkaWcgNQogICAgZGlnIDIKICAgIDwKICAgIGJ6IG1haW5fYWZ0ZXJfd2hpbGVAMzQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoyNwogICAgLy8gaWYgKGkgJSA1ID09PSAwKSBjb250aW51ZQogICAgZGlnIDUKICAgIHB1c2hpbnQgNSAvLyA1CiAgICAlCiAgICBieiBtYWluX2Jsb2NrQDMzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6MjgKICAgIC8vIHRvdGFsICs9IGkKICAgIGR1cAogICAgZGlnIDYKICAgICsKICAgIGJ1cnkgMQoKbWFpbl9ibG9ja0AzMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoyNgogICAgLy8gZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7CiAgICBkaWcgNQogICAgZGlnIDMKICAgICsKICAgIGJ1cnkgNgogICAgYiBtYWluX3doaWxlX3RvcEAyOQoKbWFpbl9hZnRlcl93aGlsZUAzNDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoyNAogICAgLy8gdGVzdF9mb3JfbG9vcF9jb250aW51ZShzdGFydDogdWludDY0LCBzdG9wOiB1aW50NjQsIHN0ZXA6IHVpbnQ2NCkgewogICAgZHVwCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfZm9yX2xvb3BfYnJlYWtfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoxMwogICAgLy8gdGVzdF9mb3JfbG9vcF9icmVhayhzdGFydDogdWludDY0LCBzdG9wOiB1aW50NjQsIHN0ZXA6IHVpbnQ2NCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6NAogICAgLy8gY2xhc3MgRm9yTG9vcHNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgYnVyeSAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICBidXJ5IDQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoxNAogICAgLy8gbGV0IHRvdGFsID0gVWludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgYnVyeSAyCiAgICBidXJ5IDYKCm1haW5fd2hpbGVfdG9wQDM3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjE1CiAgICAvLyBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdG9wOyBpICs9IHN0ZXApIHsKICAgIGRpZyA1CiAgICBkaWcgMgogICAgPAogICAgYnogbWFpbl9ibG9ja0A0MgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjE2CiAgICAvLyB0b3RhbCArPSBpCiAgICBkdXAKICAgIGRpZyA2CiAgICArCiAgICBkdXAKICAgIGJ1cnkgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjE3CiAgICAvLyBpZiAodG90YWwgPiAxMCkgewogICAgcHVzaGludCAxMCAvLyAxMAogICAgPgogICAgYm56IG1haW5fYmxvY2tANDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoxNQogICAgLy8gZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7CiAgICBkaWcgNQogICAgZGlnIDMKICAgICsKICAgIGJ1cnkgNgogICAgYiBtYWluX3doaWxlX3RvcEAzNwoKbWFpbl9ibG9ja0A0MjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czoxMwogICAgLy8gdGVzdF9mb3JfbG9vcF9icmVhayhzdGFydDogdWludDY0LCBzdG9wOiB1aW50NjQsIHN0ZXA6IHVpbnQ2NCkgewogICAgZHVwCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfZm9yX2xvb3Bfcm91dGVAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czo1CiAgICAvLyB0ZXN0X2Zvcl9sb29wKHN0YXJ0OiB1aW50NjQsIHN0b3A6IHVpbnQ2NCwgc3RlcDogdWludDY0KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czo0CiAgICAvLyBjbGFzcyBGb3JMb29wc0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICBidXJ5IDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIGJ1cnkgNAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjYKICAgIC8vIGxldCB0b3RhbCA9IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgMgogICAgYnVyeSA2CgptYWluX3doaWxlX3RvcEA0NToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czo3CiAgICAvLyBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdG9wOyBpICs9IHN0ZXApIHsKICAgIGRpZyA1CiAgICBkaWcgMgogICAgPAogICAgYnogbWFpbl9hZnRlcl93aGlsZUA0NwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjgKICAgIC8vIHRvdGFsICs9IGkKICAgIGR1cAogICAgZGlnIDYKICAgIGR1cAogICAgY292ZXIgMgogICAgKwogICAgYnVyeSAyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvZm9yLWxvb3BzLmFsZ28udHM6NwogICAgLy8gZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7CiAgICBkaWcgMwogICAgKwogICAgYnVyeSA2CiAgICBiIG1haW5fd2hpbGVfdG9wQDQ1CgptYWluX2FmdGVyX3doaWxlQDQ3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Zvci1sb29wcy5hbGdvLnRzOjUKICAgIC8vIHRlc3RfZm9yX2xvb3Aoc3RhcnQ6IHVpbnQ2NCwgc3RvcDogdWludDY0LCBzdGVwOiB1aW50NjQpIHsKICAgIGR1cAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9mb3ItbG9vcHMuYWxnby50czo0CiAgICAvLyBjbGFzcyBGb3JMb29wc0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEzCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmAQQVH3x1gABHBTEbQQFJggQE+GVPcwQof0wCBEvXd4wEM2deBjYaAI4EAOkApgBiAAIiQzEZFEQxGEQ2GgEXSUUFNhoCF0UDNhoDF0UEIkUCRQZLBUsCDEEAJ0sDRQVLBEsCDEEAI0sESUsBCEsCCEUCSwQSQAAKSwRLAwhFBUL/3UkWKExQsCNDSwVLAwhFBkL/vzEZFEQxGEQ2GgEXNhoCF0UDNhoDF0UEIkUCRQZLBUsCDEEAGEsFgQUYQQAGSUsGCEUBSwVLAwhFBkL/4EkWKExQsCNDMRkURDEYRDYaARc2GgIXRQM2GgMXRQQiRQJFBksFSwIMQQAXSUsGCElFAoEKDUAACksFSwMIRQZC/+FJFihMULAjQzEZFEQxGEQ2GgEXNhoCF0UDNhoDF0UEIkUCRQZLBUsCDEEAEUlLBklOAghFAksDCEUGQv/nSRYoTFCwI0MxGUD+1TEYFEQjQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}