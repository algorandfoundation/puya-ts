main tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram:
    block@2: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 1410u tmp%1#0)
        goto tmp%2#0 ? block@3 : block@8
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@2
    block@8: // after_while_L20
        let aggregate%length%0#1: uint64 = (len 0x)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let tmp%0#2: bool = (== encoded%0#0 0x0000)
        (assert tmp%0#2) // Empty string should equal the uint16 length prefix
        let aggregate%length%1#1: uint64 = (len 0x48656c6c6f)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x48656c6c6f)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let s2_bytes#0: bytes = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%bitlen%0#1: uint64 = (bitlen aggregate%val_as_bytes%0#1)
        let aggregate%no_overflow%0#1: bool = (<= aggregate%bitlen%0#1 8u)
        (assert aggregate%no_overflow%0#1) // overflow
        let aggregate%uint8%0#1: bytes = (extract3 aggregate%val_as_bytes%0#1 7u 1u)
        let aggregate%as_Encoded(uint8)%0#1: Encoded(uint8) = aggregate%uint8%0#1
        let z#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#1
        let z_native#0: uint64 = (btoi z#0)
        let tmp%7#0: bool = (== z_native#0 1u)
        (assert tmp%7#0)
        let aggregate%value_len%0#1: uint64 = (len 2b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 16u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 16u)
        let aggregate%arc4_encoded%0#1: bytes[16] = (b| 2b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint128)%0#1: Encoded(uint128) = aggregate%arc4_encoded%0#1
        let a#0: Encoded(uint128) = aggregate%as_Encoded(uint128)%0#1
        let a_native#0: biguint = a#0
        let tmp%10#0: bool = (b== a_native#0 2b)
        (assert tmp%10#0)
        let tmp%14#0: uint64 = (btoi 0x000000000000000c)
        let tmp%15#0: bool = (== tmp%14#0 12u)
        (assert tmp%15#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%head%0#1: bytes = (concat aggregate%len_u16%0#1 0x0000000000000041)
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 0x0000000000000041)
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 0x0000000000000041)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%head%2#1
        let myArray#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let aggregate%head%3#1: bytes = (concat 0x 0x0000000000000041)
        let aggregate%as_Encoded(uint64[])%0#1: Encoded(uint64[]) = aggregate%head%3#1
        let tmp%0#6: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#1
        let concat%0#0: Encoded(len+uint64[]) = (concat myArray#0 tmp%0#6) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 myArray#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let myArray#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) myArray#1)
        let concat%1#0: Encoded(len+uint64[]) = (concat myArray#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let doubleArray#0: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 8u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%head%4#1: bytes = (concat aggregate%len_u16%1#1 0x0000000000000041)
        let aggregate%head%5#1: bytes = (concat aggregate%head%4#1 0x0000000000000041)
        let aggregate%head%6#1: bytes = (concat aggregate%head%5#1 0x0000000000000041)
        let aggregate%head%7#1: bytes = (concat aggregate%head%6#1 0x0000000000000041)
        let aggregate%head%8#1: bytes = (concat aggregate%head%7#1 0x0000000000000041)
        let aggregate%head%9#1: bytes = (concat aggregate%head%8#1 0x0000000000000041)
        let aggregate%head%10#1: bytes = (concat aggregate%head%9#1 0x0000000000000041)
        let aggregate%head%11#1: bytes = (concat aggregate%head%10#1 0x0000000000000041)
        let aggregate%as_Encoded(len+uint64[])%1#1: Encoded(len+uint64[]) = aggregate%head%11#1
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#1
        let tmp%1#3: bool = (== doubleArray#0 encoded_array%1#0)
        (assert tmp%1#3)
        let aggregate%head%12#1: bytes = (concat 0x 0x0000000000000041)
        let aggregate%head%13#1: bytes = (concat aggregate%head%12#1 0x0000000000000041)
        let aggregate%as_Encoded(uint64[2])%0#1: Encoded(uint64[2]) = aggregate%head%13#1
        let myStatic#0: Encoded(uint64[2]) = aggregate%as_Encoded(uint64[2])%0#1
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 myStatic#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let array_length#0: uint64 = (extract_uint16 myArray#1 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#9: bytes = (itob length_minus_1#0)
        let tmp%3#9: bytes = ((extract 6 0) tmp%2#9)
        let result#1: bytes = ((replace2 0) myArray#1 tmp%3#9)
        let tmp%5#4: uint64 = (len result#1)
        let item_location#0: uint64 = (- tmp%5#4 8u)
        let popped#0: bytes = (extract3 result#1 item_location#0 8u)
        let tmp%4#1: bool = (== array_item%0#0 popped#0)
        (assert tmp%4#1)
        let aggregate%head%14#1: bytes = (concat 0x 0x0000000000000041)
        let aggregate%head%15#1: bytes = (concat aggregate%head%14#1 0x0000000000000041)
        let aggregate%head%16#1: bytes = (concat aggregate%head%15#1 0x0000000000000041)
        let aggregate%as_Encoded(uint64[3])%0#1: Encoded(uint64[3]) = aggregate%head%16#1
        let myStatic2#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#1
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let tmp%6#1: bool = (== array_item%1#0 0x0000000000000041)
        goto tmp%6#1 ? block@20 : block@23
    block@20: // and_contd_L125
        let aggregate%bytes_offset%2#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let tmp%7#1: bool = (== array_item%2#0 0x0000000000000041)
        goto tmp%7#1 ? block@21 : block@23
    block@21: // and_contd_L125
        let aggregate%bytes_offset%3#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let tmp%8#1: bool = (== array_item%3#0 0x0000000000000041)
        goto tmp%8#1 ? block@22 : block@23
    block@22: // bool_true_L125
        let and_result%0#0: bool = 1u
        goto block@24
    block@23: // bool_false_L125
        let and_result%0#1: bool = 0u
        goto block@24
    block@24: // bool_merge_L125
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@22, and_result%0#1 <- block@23)
        (assert and_result%0#2) // assert target is match for conditions
        let array_length%1#0: uint64 = (extract_uint16 doubleArray#0 0u)
        let tmp%9#1: bool = (== array_length%1#0 8u)
        goto tmp%9#1 ? block@25 : block@34
    block@25: // and_contd_L127
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let tmp%10#1: bool = (== array_item%4#0 0x0000000000000041)
        goto tmp%10#1 ? block@26 : block@34
    block@26: // and_contd_L127
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%5#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let tmp%11#1: bool = (== array_item%5#0 0x0000000000000041)
        goto tmp%11#1 ? block@27 : block@34
    block@27: // and_contd_L127
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%6#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#1
        let tmp%12#1: bool = (== array_item%6#0 0x0000000000000041)
        goto tmp%12#1 ? block@28 : block@34
    block@28: // and_contd_L127
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%7#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%7#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%7#1 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%7#1
        let tmp%13#1: bool = (== array_item%7#0 0x0000000000000041)
        goto tmp%13#1 ? block@29 : block@34
    block@29: // and_contd_L127
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%8#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%8#1: bytes = (extract3 aggregate%array_trimmed%4#1 aggregate%bytes_offset%8#1 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%8#1
        let tmp%14#1: bool = (== array_item%8#0 0x0000000000000041)
        goto tmp%14#1 ? block@30 : block@34
    block@30: // and_contd_L127
        let aggregate%array_trimmed%5#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%9#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%9#1: bytes = (extract3 aggregate%array_trimmed%5#1 aggregate%bytes_offset%9#1 8u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint64) = aggregate%encoded_element%9#1
        let tmp%15#1: bool = (== array_item%9#0 0x0000000000000041)
        goto tmp%15#1 ? block@31 : block@34
    block@31: // and_contd_L127
        let aggregate%array_trimmed%6#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%10#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%10#1: bytes = (extract3 aggregate%array_trimmed%6#1 aggregate%bytes_offset%10#1 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%10#1
        let tmp%16#1: bool = (== array_item%10#0 0x0000000000000041)
        goto tmp%16#1 ? block@32 : block@34
    block@32: // and_contd_L127
        let aggregate%array_trimmed%7#1: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%11#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%11#1: bytes = (extract3 aggregate%array_trimmed%7#1 aggregate%bytes_offset%11#1 8u) // on error: index access is out of bounds
        let array_item%11#0: Encoded(uint64) = aggregate%encoded_element%11#1
        let tmp%17#1: bool = (== array_item%11#0 0x0000000000000041)
        goto tmp%17#1 ? block@33 : block@34
    block@33: // bool_true_L127
        let and_result%1#0: bool = 1u
        goto block@35
    block@34: // bool_false_L127
        let and_result%1#1: bool = 0u
        goto block@35
    block@35: // bool_merge_L127
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@33, and_result%1#1 <- block@34)
        (assert and_result%1#2) // assert target is match for conditions
        let b#1: Encoded(uint8[32]) = (txn Sender)
        let tmp%0#7: account = b#1
        let tmp%1#4: account = (txn Sender)
        let tmp%2#4: bool = (== tmp%0#7 tmp%1#4)
        (assert tmp%2#4)
        let tmp%3#4: bool = (!= addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ b#1)
        (assert tmp%3#4) // Zero address should not match sender
        let aggregate%bytes_offset%12#1: uint64 = (* 0u 1u)
        let aggregate%encoded_element%12#1: bytes = (extract3 addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ aggregate%bytes_offset%12#1 1u) // on error: index access is out of bounds
        let array_item%0#1: Encoded(uint8) = aggregate%encoded_element%12#1
        let tmp%5#2: bool = (== array_item%0#1 0x00)
        (assert tmp%5#2) // Zero address should start with zero byte
        let aggregate%head%17#1: bytes = (concat 0x 0x0000000000000022)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%head%17#1
        let t#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%extract%0#1: bytes = (extract3 t#0 0u 8u)
        let firstItem#0: Encoded(uint64) = aggregate%extract%0#1
        let tmp%2#5: bool = (== firstItem#0 0x0000000000000022)
        (assert tmp%2#5)
        let aggregate%head%18#1: bytes = (concat 0x addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        let aggregate%head%19#1: bytes = (concat aggregate%head%18#1 0x00)
        let aggregate%as_Encoded(uint8[32],uint8)%0#1: Encoded(uint8[32],uint8) = aggregate%head%19#1
        let t1#0: Encoded(uint8[32],uint8) = aggregate%as_Encoded(uint8[32],uint8)%0#1
        let tmp%0#10: bytes = ((extract 2 0) 0x0000)
        let tmp%1#6: bool = (== tmp%0#10 0x)
        (assert tmp%1#6) // No args should give empty bytes
        let aggregate%length%2#1: uint64 = (len "hmmmmmmmmm")
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "hmmmmmmmmm")
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let db2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let tmp%6#2: bytes = ((extract 2 0) 0x000568656c6c6f)
        let tmp%7#2: bool = (== tmp%6#2 "hello")
        (assert tmp%7#2)
        let tmp%8#2: bytes = ((extract 2 0) 0x000b68656c6c6f20776f726c64)
        let tmp%9#2: bool = (== tmp%8#2 "hello world")
        (assert tmp%9#2)
        let aggregate%head%20#1: bytes = (concat 0x 0xaabbccddee)
        let aggregate%as_Encoded(uint8[5][1])%0#1: Encoded(uint8[5][1]) = aggregate%head%20#1
        let s5#0: Encoded(uint8[5][1]) = aggregate%as_Encoded(uint8[5][1])%0#1
        let aggregate%bytes_offset%13#1: uint64 = (* 0u 5u)
        let aggregate%encoded_element%13#1: bytes = (extract3 s5#0 aggregate%bytes_offset%13#1 5u) // on error: index access is out of bounds
        let array_item%0#2: Encoded(uint8[5]) = aggregate%encoded_element%13#1
        let tmp%0#11: bytes = array_item%0#2
        let tmp%1#7: bool = (== tmp%0#11 0xaabbccddee)
        (assert tmp%1#7)
        let tmp%2#7: bytes = ((extract 2 0) 0x000900000000aabbccddee)
        let tmp%3#7: bool = (== tmp%2#7 0x00000000aabbccddee)
        (assert tmp%3#7)
        let tmp%0#12: Encoded(uint8[4]) = (bzero 4u)
        let aggregate%head%21#1: bytes = (concat 0x 0x00)
        let aggregate%head%22#1: bytes = (concat aggregate%head%21#1 0x00)
        let aggregate%head%23#1: bytes = (concat aggregate%head%22#1 0x00)
        let aggregate%head%24#1: bytes = (concat aggregate%head%23#1 0x00)
        let aggregate%as_Encoded(uint8[4])%0#1: Encoded(uint8[4]) = aggregate%head%24#1
        let encoded_array%0#3: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#1
        let tmp%1#8: bool = (== tmp%0#12 encoded_array%0#3)
        (assert tmp%1#8)
        let tmp%2#8: Encoded(bool1[4]) = (bzero 1u)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%3#8: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%get_bit%0#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%0#1: Encoded(bool8) = (setbit tmp%3#8 1u aggregate%get_bit%0#1)
        let aggregate%get_bit%1#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%1#1: Encoded(bool8) = (setbit aggregate%set_bit%0#1 2u aggregate%get_bit%1#1)
        let aggregate%get_bit%2#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%2#1: Encoded(bool8) = (setbit aggregate%set_bit%1#1 3u aggregate%get_bit%2#1)
        let aggregate%head%25#1: bytes = (concat 0x aggregate%set_bit%2#1)
        let aggregate%as_Encoded(bool1[4])%0#1: Encoded(bool1[4]) = aggregate%head%25#1
        let encoded_array%1#1: Encoded(bool1[4]) = aggregate%as_Encoded(bool1[4])%0#1
        let tmp%7#3: bool = (== tmp%2#8 encoded_array%1#1)
        (assert tmp%7#3)
        let tmp%8#3: Encoded(bool1[9]) = (bzero 2u)
        let aggregate%get_bit%3#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%3#1: Encoded(bool8) = (setbit tmp%3#8 1u aggregate%get_bit%3#1)
        let aggregate%get_bit%4#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%4#1: Encoded(bool8) = (setbit aggregate%set_bit%3#1 2u aggregate%get_bit%4#1)
        let aggregate%get_bit%5#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%5#1: Encoded(bool8) = (setbit aggregate%set_bit%4#1 3u aggregate%get_bit%5#1)
        let aggregate%get_bit%6#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%6#1: Encoded(bool8) = (setbit aggregate%set_bit%5#1 4u aggregate%get_bit%6#1)
        let aggregate%get_bit%7#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%7#1: Encoded(bool8) = (setbit aggregate%set_bit%6#1 5u aggregate%get_bit%7#1)
        let aggregate%get_bit%8#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%8#1: Encoded(bool8) = (setbit aggregate%set_bit%7#1 6u aggregate%get_bit%8#1)
        let aggregate%get_bit%9#1: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%9#1: Encoded(bool8) = (setbit aggregate%set_bit%8#1 7u aggregate%get_bit%9#1)
        let aggregate%head%26#1: bytes = (concat 0x aggregate%set_bit%9#1)
        let aggregate%head%27#1: bytes = (concat aggregate%head%26#1 tmp%3#8)
        let aggregate%as_Encoded(bool1[9])%0#1: Encoded(bool1[9]) = aggregate%head%27#1
        let encoded_array%2#1: Encoded(bool1[9]) = aggregate%as_Encoded(bool1[9])%0#1
        let tmp%18#1: bool = (== tmp%8#3 encoded_array%2#1)
        (assert tmp%18#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%len_u16%2#1
        let encoded_array%3#1: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#1
        let tmp%20#0: bool = (== encoded_array%3#1 tmp%8#3)
        (assert tmp%20#0)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%set_bit%10#1: bytes[1] = (setbit aggregate%encoded_bool%1#1 1u 0u)
        let aggregate%set_bit%11#1: bytes[1] = (setbit aggregate%set_bit%10#1 2u 0u)
        let aggregate%set_bit%12#1: bytes[1] = (setbit aggregate%set_bit%11#1 3u 0u)
        let aggregate%set_bit%13#1: bytes[1] = (setbit aggregate%set_bit%12#1 4u 0u)
        let aggregate%set_bit%14#1: bytes[1] = (setbit aggregate%set_bit%13#1 5u 0u)
        let aggregate%set_bit%15#1: bytes[1] = (setbit aggregate%set_bit%14#1 6u 0u)
        let aggregate%set_bit%16#1: bytes[1] = (setbit aggregate%set_bit%15#1 7u 0u)
        let aggregate%head%28#1: bytes = (concat 0x aggregate%set_bit%16#1)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%29#1: bytes = (concat aggregate%head%28#1 aggregate%encoded_bool%2#1)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1)%0#1: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = aggregate%head%29#1
        let tmp%22#0: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1)%0#1
        let tmp%23#0: bool = (== tmp%8#3 tmp%22#0)
        (assert tmp%23#0)
        let tmp%25#0: bool = (== encoded%0#0 tmp%8#3)
        (assert tmp%25#0)
        let tmp%36#0: bool = (== tmp%3#8 tmp%2#8)
        (assert tmp%36#0)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%as_Encoded(len+uint64[])%2#1: Encoded(len+uint64[]) = aggregate%len_u16%3#1
        let result#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#1
        let array_length%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        return 1u