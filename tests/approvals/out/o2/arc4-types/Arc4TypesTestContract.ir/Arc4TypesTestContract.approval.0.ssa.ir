main tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram:
    block@0: // L163
        _puya_lib.util.ensure_budget(1400u, 0u)
        tests/approvals/arc4-types.algo.ts::testStr()
        tests/approvals/arc4-types.algo.ts::testUintN(1u, 2b, 0x0000000000000000000000000000000000000000000000000000000000000004)
        tests/approvals/arc4-types.algo.ts::testUFixed()
        tests/approvals/arc4-types.algo.ts::testByte()
        tests/approvals/arc4-types.algo.ts::testArrays(0x0000000000000041)
        tests/approvals/arc4-types.algo.ts::testAddress()
        tests/approvals/arc4-types.algo.ts::testTuple()
        tests/approvals/arc4-types.algo.ts::testUFixed()
        tests/approvals/arc4-types.algo.ts::testDynamicBytes("hmmmmmmmmm")
        tests/approvals/arc4-types.algo.ts::testStaticBytes()
        tests/approvals/arc4-types.algo.ts::testZeroValues()
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let result#0: bytes = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        return 1u

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let required_budget_with_buffer#0: uint64 = (+ required_budget#0 10u)
        goto block@1
    block@1: // while_top_L20
        let tmp%0#0: uint64 = (global OpcodeBudget)
        let tmp%1#0: bool = (> required_budget_with_buffer#0 tmp%0#0)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%2#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%2#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine tests/approvals/arc4-types.algo.ts::testUFixed() -> void:
    block@0: // L24
        let tmp%0#0: bool = (== 0x000004dc 0x000004dc)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testUintN(n: uint64, b: biguint, c: bytes[32]) -> void:
    block@0: // L31
        let tmp%0#0: uint64 = (len 0x04)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== 0xff 0xff)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (len 0x0000)
        let tmp%4#0: bool = (== tmp%3#0 2u)
        (assert tmp%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob n#0)
        let bitlen%0#0: uint64 = (bitlen val_as_bytes%0#0)
        let no_overflow%0#0: bool = (<= bitlen%0#0 8u)
        (assert no_overflow%0#0) // overflow
        let uint8%0#0: bytes = (extract3 val_as_bytes%0#0 7u 1u)
        let z#0: bytes[1] = uint8%0#0
        let z_native#0: uint64 = (btoi z#0)
        let tmp%5#0: bool = (== z_native#0 n#0)
        (assert tmp%5#0)
        let value_len%0#0: uint64 = (len b#0)
        let len_ok%0#0: bool = (<= value_len%0#0 16u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 16u)
        let arc4_encoded%0#0: bytes[16] = (b| b#0 bzero%0#0)
        let a#0: bytes[16] = arc4_encoded%0#0
        let a_native#0: biguint = a#0
        let tmp%6#0: bool = (b== a_native#0 b#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = (len c#0)
        let tmp%8#0: bool = (== tmp%7#0 32u)
        (assert tmp%8#0)
        let a_bytes#0: bytes = a#0
        let reinterpret_bytes[16]%0#0: bytes[16] = a_bytes#0
        let a_from_bytes#0: bytes[16] = reinterpret_bytes[16]%0#0
        let tmp%9#0: bool = (== a_from_bytes#0 a#0)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (btoi 0x000000000000000c)
        let tmp%11#0: bool = (== tmp%10#0 12u)
        (assert tmp%11#0)
        let reinterpret_biguint%0#0: biguint = 0x0000c571
        let tmp%12#0: bool = (b== reinterpret_biguint%0#0 50545b)
        (assert tmp%12#0)
        let tmp%13#0: bytes = (b~ 0xff)
        let tmp%14#0: bool = (== tmp%13#0 0x00)
        (assert tmp%14#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testStr() -> void:
    block@0: // L66
        let tmp%0#0: bool = (== 0x0000 0x0000)
        (assert tmp%0#0) // Empty string should equal the uint16 length prefix
        let tmp%1#0: bytes = ((extract 2 0) 0x000548656c6c6f)
        let tmp%2#0: bool = (== tmp%1#0 "Hello")
        (assert tmp%2#0)
        let s2_bytes#0: bytes = 0x000548656c6c6f
        let s2_from_bytes#0: bytes = s2_bytes#0
        let tmp%3#0: bool = (== 0x000548656c6c6f s2_from_bytes#0)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testDynamicBytes(someBytes: bytes) -> void:
    block@0: // L79
        let tmp%0#0: bytes = ((extract 2 0) 0x0000)
        let tmp%1#0: bool = (== tmp%0#0 0x)
        (assert tmp%1#0) // No args should give empty bytes
        let tmp%2#0: bool = (== 0x0000 0x0000)
        (assert tmp%2#0) // bytes prop should return length header (of 0)
        let length%0#0: uint64 = (len someBytes#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 someBytes#0)
        let db2#0: bytes = encoded_value%0#0
        let tmp%3#0: bytes = ((extract 2 0) db2#0)
        let tmp%4#0: bool = (== tmp%3#0 someBytes#0)
        (assert tmp%4#0)
        let tmp%5#0: bytes = ((extract 2 0) 0x000568656c6c6f)
        let tmp%6#0: bool = (== tmp%5#0 "hello")
        (assert tmp%6#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) 0x000568656c6c6f)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) 0x000620776f726c64)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%1#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let db4#0: bytes = concat_result%0#0
        let tmp%7#0: bytes = ((extract 2 0) db4#0)
        let tmp%8#0: bool = (== tmp%7#0 "hello world")
        (assert tmp%8#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testStaticBytes() -> void:
    block@0: // L93
        let result%0#0: bytes = (concat 0x 0xaabbccddee)
        let array_data%0#0: bytes = (concat 0x result%0#0)
        let s5#0: bytes[5] = array_data%0#0
        let array_head_and_tail%0#0: bytes[5] = s5#0
        let item_offset%0#0: uint64 = (* 0u 5u)
        let tmp%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 5u) // on error: Index access is out of bounds
        let tmp%1#0: bool = (== tmp%0#0 0xaabbccddee)
        (assert tmp%1#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) 0x000400000000)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0xaabbccddee)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let s4#0: bytes = concat_result%0#0
        let tmp%2#0: bytes = ((extract 2 0) s4#0)
        let tmp%3#0: bool = (== tmp%2#0 0x00000000aabbccddee)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testArrays(n: bytes[8]) -> void:
    block@0: // L108
        let result%0#0: bytes = (concat 0x n#0)
        let result%1#0: bytes = (concat result%0#0 n#0)
        let result%2#0: bytes = (concat result%1#0 n#0)
        let array_data%0#0: bytes = (concat 0x0003 result%2#0)
        let myArray#0: bytes = array_data%0#0
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) myArray#0)
        let encoded%0#0: bytes[8][] = encode<bytes[8]>(n#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let myArray#1: bytes = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) myArray#1)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) myArray#1)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 expr_value_trimmed%2#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let doubleArray#0: bytes = concat_result%1#0
        let result%3#0: bytes = (concat 0x n#0)
        let result%4#0: bytes = (concat result%3#0 n#0)
        let result%5#0: bytes = (concat result%4#0 n#0)
        let result%6#0: bytes = (concat result%5#0 n#0)
        let result%7#0: bytes = (concat result%6#0 n#0)
        let result%8#0: bytes = (concat result%7#0 n#0)
        let result%9#0: bytes = (concat result%8#0 n#0)
        let result%10#0: bytes = (concat result%9#0 n#0)
        let array_data%1#0: bytes = (concat 0x0008 result%10#0)
        let tmp%0#0: bool = (== doubleArray#0 array_data%1#0)
        (assert tmp%0#0)
        let result%11#0: bytes = (concat 0x n#0)
        let result%12#0: bytes = (concat result%11#0 n#0)
        let array_data%2#0: bytes = (concat 0x result%12#0)
        let myStatic#0: bytes[16] = array_data%2#0
        let array_head_and_tail%0#0: bytes[16] = myStatic#0
        let item_offset%0#0: uint64 = (* 0u 8u)
        let tmp%1#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(myArray#1, 8u)
        let myArray#2: bytes = data%0#0
        let tmp%2#0: bool = (== tmp%1#0 popped%0#0)
        (assert tmp%2#0)
        let updated_target%0#0: bytes = (replace3 myStatic#0 8u 0x0000000000000032)
        let myStatic#1: bytes[16] = updated_target%0#0
        let result%13#0: bytes = (concat 0x n#0)
        let result%14#0: bytes = (concat result%13#0 n#0)
        let result%15#0: bytes = (concat result%14#0 n#0)
        let array_data%3#0: bytes = (concat 0x result%15#0)
        let myStatic2#0: bytes[24] = array_data%3#0
        let item0%0#0: bytes = (extract3 myStatic2#0 0u 8u) // on error: Index access is out of bounds
        let item1%0#0: bytes = (extract3 myStatic2#0 8u 8u) // on error: Index access is out of bounds
        let item2%0#0: bytes = (extract3 myStatic2#0 16u 8u) // on error: Index access is out of bounds
        let (staticNative.0#0: bytes[8], staticNative.1#0: bytes[8], staticNative.2#0: bytes[8]) = (item0%0#0, item1%0#0, item2%0#0)
        let tmp%3#0: bool = (== 3u 3u)
        goto tmp%3#0 ? block@1 : block@5
    block@1: // and_contd_L126
        let tmp%4#0: bool = (== staticNative.0#0 n#0)
        goto tmp%4#0 ? block@2 : block@5
    block@2: // and_contd_L126
        let tmp%5#0: bool = (== staticNative.1#0 n#0)
        goto tmp%5#0 ? block@3 : block@5
    block@3: // and_contd_L126
        let tmp%6#0: bool = (== staticNative.2#0 n#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // bool_true_L126
        let and_result%0#0: bool = 1u
        goto block@6
    block@5: // bool_false_L126
        let and_result%0#1: bool = 0u
        goto block@6
    block@6: // bool_merge_L126
        let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5)
        (assert and_result%0#2) // assert target is match for conditions
        let dynamicNative#0: bytes[8][] = doubleArray#0
        let tmp%7#0: uint64 = (extract_uint16 dynamicNative#0 0u)
        let tmp%8#0: bool = (== tmp%7#0 8u)
        goto tmp%8#0 ? block@7 : block@16
    block@7: // and_contd_L129
        let array_head_and_tail%1#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%1#0: uint64 = (* 0u 8u)
        let tmp%9#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 8u) // on error: Index access is out of bounds
        let tmp%10#0: bool = (== tmp%9#0 n#0)
        goto tmp%10#0 ? block@8 : block@16
    block@8: // and_contd_L129
        let array_head_and_tail%2#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%2#0: uint64 = (* 1u 8u)
        let tmp%11#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 8u) // on error: Index access is out of bounds
        let tmp%12#0: bool = (== tmp%11#0 n#0)
        goto tmp%12#0 ? block@9 : block@16
    block@9: // and_contd_L129
        let array_head_and_tail%3#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%3#0: uint64 = (* 2u 8u)
        let tmp%13#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 8u) // on error: Index access is out of bounds
        let tmp%14#0: bool = (== tmp%13#0 n#0)
        goto tmp%14#0 ? block@10 : block@16
    block@10: // and_contd_L129
        let array_head_and_tail%4#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%4#0: uint64 = (* 3u 8u)
        let tmp%15#0: bytes = (extract3 array_head_and_tail%4#0 item_offset%4#0 8u) // on error: Index access is out of bounds
        let tmp%16#0: bool = (== tmp%15#0 n#0)
        goto tmp%16#0 ? block@11 : block@16
    block@11: // and_contd_L129
        let array_head_and_tail%5#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%5#0: uint64 = (* 4u 8u)
        let tmp%17#0: bytes = (extract3 array_head_and_tail%5#0 item_offset%5#0 8u) // on error: Index access is out of bounds
        let tmp%18#0: bool = (== tmp%17#0 n#0)
        goto tmp%18#0 ? block@12 : block@16
    block@12: // and_contd_L129
        let array_head_and_tail%6#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%6#0: uint64 = (* 5u 8u)
        let tmp%19#0: bytes = (extract3 array_head_and_tail%6#0 item_offset%6#0 8u) // on error: Index access is out of bounds
        let tmp%20#0: bool = (== tmp%19#0 n#0)
        goto tmp%20#0 ? block@13 : block@16
    block@13: // and_contd_L129
        let array_head_and_tail%7#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%7#0: uint64 = (* 6u 8u)
        let tmp%21#0: bytes = (extract3 array_head_and_tail%7#0 item_offset%7#0 8u) // on error: Index access is out of bounds
        let tmp%22#0: bool = (== tmp%21#0 n#0)
        goto tmp%22#0 ? block@14 : block@16
    block@14: // and_contd_L129
        let array_head_and_tail%8#0: bytes = ((extract 2 0) dynamicNative#0)
        let item_offset%8#0: uint64 = (* 7u 8u)
        let tmp%23#0: bytes = (extract3 array_head_and_tail%8#0 item_offset%8#0 8u) // on error: Index access is out of bounds
        let tmp%24#0: bool = (== tmp%23#0 n#0)
        goto tmp%24#0 ? block@15 : block@16
    block@15: // bool_true_L129
        let and_result%1#0: bool = 1u
        goto block@17
    block@16: // bool_false_L129
        let and_result%1#1: bool = 0u
        goto block@17
    block@17: // bool_merge_L129
        let and_result%1#2: bool = φ(and_result%1#0 <- block@15, and_result%1#1 <- block@16)
        (assert and_result%1#2) // assert target is match for conditions
        return 

subroutine tests/approvals/arc4-types.algo.ts::testByte() -> void:
    block@0: // L132
        let tmp%0#0: bool = (== 0x00 0x00)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testAddress() -> void:
    block@0: // L138
        let b#0: bytes[32] = (txn Sender)
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== b#0 tmp%0#0)
        (assert tmp%1#0)
        let tmp%2#0: bool = (!= addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ b#0)
        (assert tmp%2#0) // Zero address should not match sender
        let tmp%3#0: bool = (== addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        (assert tmp%3#0) // Two zero addresses should match
        let array_head_and_tail%0#0: bytes[32] = addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
        let item_offset%0#0: uint64 = (* 0u 1u)
        let tmp%4#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 1u) // on error: Index access is out of bounds
        let tmp%5#0: bool = (== tmp%4#0 0x00)
        (assert tmp%5#0) // Zero address should start with zero byte
        return 

subroutine tests/approvals/arc4-types.algo.ts::testTuple() -> void:
    block@0: // L149
        let current_tail_offset%0#0: uint64 = 8u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 0x0000000000000022)
        let t#0: bytes[8] = encoded_tuple_buffer%1#0
        let firstItem#0: bytes[8] = (extract3 t#0 0u 8u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 t#0 0u 8u) // on error: Index access is out of bounds
        let firstItemIndexer#0: bytes[8] = item0%0#0
        let tmp%0#0: bool = (== firstItem#0 firstItemIndexer#0)
        (assert tmp%0#0)
        let current_tail_offset%1#0: uint64 = 33u
        let encoded_tuple_buffer%2#0: bytes[0] = 0x
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 0x00)
        let t1#0: bytes[33] = encoded_tuple_buffer%4#0
        let tmp%1#0: bool = (== 2u 2u)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/arc4-types.algo.ts::testZeroValues() -> void:
    block@0: // L183
        let tmp%0#0: bytes[4] = (bzero 4u)
        let result%0#0: bytes = (concat 0x 0x00)
        let result%1#0: bytes = (concat result%0#0 0x00)
        let result%2#0: bytes = (concat result%1#0 0x00)
        let result%3#0: bytes = (concat result%2#0 0x00)
        let array_data%0#0: bytes = (concat 0x result%3#0)
        let tmp%1#0: bool = (== tmp%0#0 array_data%0#0)
        (assert tmp%1#0)
        let tmp%2#0: bytes[1] = (bzero 1u)
        let array_head_and_tail%0#0: bytes = (concat 0x 0x00)
        let is_true%0#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%1#0: bytes = (setbit array_head_and_tail%0#0 1u is_true%0#0)
        let is_true%1#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%2#0: bytes = (setbit array_head_and_tail%1#0 2u is_true%1#0)
        let is_true%2#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%3#0: bytes = (setbit array_head_and_tail%2#0 3u is_true%2#0)
        let array_data%1#0: bytes = (concat 0x array_head_and_tail%3#0)
        let tmp%3#0: bool = (== tmp%2#0 array_data%1#0)
        (assert tmp%3#0)
        let tmp%4#0: bytes[2] = (bzero 2u)
        let array_head_and_tail%4#0: bytes = (concat 0x 0x00)
        let is_true%3#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%5#0: bytes = (setbit array_head_and_tail%4#0 1u is_true%3#0)
        let is_true%4#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%6#0: bytes = (setbit array_head_and_tail%5#0 2u is_true%4#0)
        let is_true%5#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%7#0: bytes = (setbit array_head_and_tail%6#0 3u is_true%5#0)
        let is_true%6#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%8#0: bytes = (setbit array_head_and_tail%7#0 4u is_true%6#0)
        let is_true%7#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%9#0: bytes = (setbit array_head_and_tail%8#0 5u is_true%7#0)
        let is_true%8#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%10#0: bytes = (setbit array_head_and_tail%9#0 6u is_true%8#0)
        let is_true%9#0: uint64 = (getbit 0x00 0u)
        let array_head_and_tail%11#0: bytes = (setbit array_head_and_tail%10#0 7u is_true%9#0)
        let array_head_and_tail%12#0: bytes = (concat array_head_and_tail%11#0 0x00)
        let array_data%2#0: bytes = (concat 0x array_head_and_tail%12#0)
        let tmp%5#0: bool = (== tmp%4#0 array_data%2#0)
        (assert tmp%5#0)
        let array_data%3#0: bytes = (concat 0x0000 0x)
        let tmp%6#0: bytes = (bzero 2u)
        let tmp%7#0: bool = (== array_data%3#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: bytes[2] = (bzero 2u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%6#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_bool%8#0: bytes[1] = (setbit 0x00 0u 0u)
        let current_tail_offset%0#0: uint64 = 2u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 encoded_bool%0#0)
        let is_true%10#0: uint64 = (getbit encoded_bool%1#0 0u)
        let encoded_tuple_buffer%2#0: bytes = (setbit encoded_tuple_buffer%1#0 1u is_true%10#0)
        let is_true%11#0: uint64 = (getbit encoded_bool%2#0 0u)
        let encoded_tuple_buffer%3#0: bytes = (setbit encoded_tuple_buffer%2#0 2u is_true%11#0)
        let is_true%12#0: uint64 = (getbit encoded_bool%3#0 0u)
        let encoded_tuple_buffer%4#0: bytes = (setbit encoded_tuple_buffer%3#0 3u is_true%12#0)
        let is_true%13#0: uint64 = (getbit encoded_bool%4#0 0u)
        let encoded_tuple_buffer%5#0: bytes = (setbit encoded_tuple_buffer%4#0 4u is_true%13#0)
        let is_true%14#0: uint64 = (getbit encoded_bool%5#0 0u)
        let encoded_tuple_buffer%6#0: bytes = (setbit encoded_tuple_buffer%5#0 5u is_true%14#0)
        let is_true%15#0: uint64 = (getbit encoded_bool%6#0 0u)
        let encoded_tuple_buffer%7#0: bytes = (setbit encoded_tuple_buffer%6#0 6u is_true%15#0)
        let is_true%16#0: uint64 = (getbit encoded_bool%7#0 0u)
        let encoded_tuple_buffer%8#0: bytes = (setbit encoded_tuple_buffer%7#0 7u is_true%16#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 encoded_bool%8#0)
        let tmp%9#0: bool = (== tmp%8#0 encoded_tuple_buffer%9#0)
        (assert tmp%9#0)
        let tmp%10#0: bytes = (bzero 2u)
        let tmp%11#0: bool = (== 0x0000 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: bytes = (bzero 2u)
        let tmp%13#0: bool = (== 0x0000 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#0: bytes = (bzero 5u)
        let tmp%15#0: bool = (== 0x0000000000 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: bytes = (bzero 32u)
        let tmp%17#0: bool = (== addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: bytes = (bzero 4u)
        let tmp%19#0: bool = (== 0x00000000 tmp%18#0)
        (assert tmp%19#0)
        let tmp%20#0: bytes = (bzero 1u)
        let tmp%21#0: bool = (== 0x00 tmp%20#0)
        (assert tmp%21#0)
        let tmp%22#0: bytes = (bzero 4u)
        let tmp%23#0: bool = (== 0x00000000 tmp%22#0)
        (assert tmp%23#0)
        return 