main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testDo(uint64)uint64" => block@4, method "testDoBreak(uint64,uint64)uint64" => block@5, method "testDoContinue(uint64,uint64)uint64" => block@6, * => block@9}
    block@4: // testDo_route_L5
        let tmp%0#6: bytes = (txna ApplicationArgs 1)
        let len%0#2: uint64 = (len tmp%0#6)
        let eq%0#2: bool = (== len%0#2 8u)
        (assert eq%0#2) // invalid number of bytes for arc4.uint64
        let stop#2: uint64 = (btoi tmp%0#6)
        let i#10: uint64 = 0u
        goto block@33
    block@33: // while_top_L7
        let i#11: uint64 = φ(i#10 <- block@4, i#12 <- block@35)
        let i#12: uint64 = (+ i#11 1u)
        let tmp%1#6: bool = (< i#12 stop#2)
        goto tmp%1#6 ? block@35 : block@34
    block@34: // if_body_L7
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#12)
        let tmp%4#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#1)
        exit 1u
    block@35: // after_if_else_L7
        goto block@33
    block@5: // testDoBreak_route_L12
        let tmp%0#4: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#4)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let stop#1: uint64 = (btoi tmp%0#4)
        let tmp%2#3: bytes = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len tmp%2#3)
        let eq%1#1: bool = (== len%1#1 8u)
        (assert eq%1#1) // invalid number of bytes for arc4.uint64
        let breakMod#0: uint64 = (btoi tmp%2#3)
        let total#7: uint64 = 0u
        let i#6: uint64 = 0u
        goto block@24
    block@24: // while_top_L15
        let i#7: uint64 = φ(i#6 <- block@5, i#9 <- block@29)
        let total#9: uint64 = φ(total#7 <- block@5, total#10 <- block@29)
        goto i#7 ? block@25 : block@27
    block@25: // and_contd_L16
        let tmp%1#4: uint64 = (% i#7 breakMod#0)
        goto tmp%1#4 ? block@27 : block@26
    block@26: // if_body_L16
        goto block@30
    block@27: // after_if_else_L16
        let i#9: uint64 = (+ i#7 1u)
        let total#10: uint64 = (+ total#9 i#9)
        let tmp%5#3: bool = (< i#9 stop#1)
        goto tmp%5#3 ? block@29 : block@28
    block@28: // if_body_L15
        goto block@30
    block@29: // after_if_else_L15
        goto block@24
    block@30: // L15
        let total#11: uint64 = φ(total#9 <- block@26, total#10 <- block@28)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#11)
        let tmp%6#2: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%6#2)
        exit 1u
    block@6: // testDoContinue_route_L23
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let stop#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let mod#0: uint64 = (btoi tmp%2#1)
        let i#0: uint64 = 0u
        let total#0: uint64 = 0u
        goto block@14
    block@14: // while_top_L26
        let i#1: uint64 = φ(i#0 <- block@6, i#5 <- block@20)
        let total#1: uint64 = φ(total#0 <- block@6, total#5 <- block@20)
        goto i#1 ? block@15 : block@17
    block@15: // and_contd_L27
        let tmp%1#2: uint64 = (% i#1 mod#0)
        goto tmp%1#2 ? block@17 : block@16
    block@16: // if_body_L27
        let total#2: uint64 = (+ total#1 2u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@18
    block@17: // after_if_else_L27
        let total#4: uint64 = (+ total#1 1u)
        let i#4: uint64 = (+ i#1 1u)
        goto block@18
    block@18: // L26
        let i#5: uint64 = φ(i#2 <- block@16, i#4 <- block@17)
        let total#5: uint64 = φ(total#2 <- block@16, total#4 <- block@17)
        let tmp%7#1: bool = (< i#5 stop#0)
        goto tmp%7#1 ? block@20 : block@19
    block@19: // if_body_L26
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob total#5)
        let tmp%6#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#0)
        (log tmp%6#1)
        exit 1u
    block@20: // after_if_else_L26
        goto block@14
    block@9: // after_if_else_L4
        fail
    block@10: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u