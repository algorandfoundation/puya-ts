{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/do-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAmBE;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAoBmB;AAAX;;AACe;AAAf;;AAEE;;AAAA;;;AAAS;;AAAA;;AAAA;AAAT;;;AACF;AAAS;;AAAT;AAAA;;AACA;;AAAK;AAAL;AAAA;;AAKK;;AAAA;;AAAA;AAAA;;;AAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASI;AAAS;AAAT;AAAA;;AACA;;AAAK;AAAL;AAAA;;;;;AArBJ;;AAAA;AAAA;AAAA;;AAAA;AARF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AASuB;AAAf;;AACW;AAAX;;AAEE;;AAAA;;;AAAS;;AAAA;;AAAA;AAAT;;;AAEJ;;AAAK;AAAL;AAAA;AAAA;;AACA;AAAA;AAAA;;AACO;;AAAA;AAAA;;;AARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;;AAEmB;AAAX;;AAEF;;AAAK;AAAL;AAAA;AAAA;;AACO;;AAAA;AAAA;;;AAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "breakMod#0"
      ]
    },
    "14": {
      "op": "dupn 4",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "16": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@8",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "21": {
      "op": "pushbytess 0x39239792 0xace2eb21 0x78e8d516 // method \"testDo(uint64)uint64\", method \"testDoBreak(uint64,uint64)uint64\", method \"testDoContinue(uint64,uint64)uint64\""
    },
    "38": {
      "op": "txna ApplicationArgs 0"
    },
    "41": {
      "op": "match main_testDo_route@3 main_testDoBreak_route@4 main_testDoContinue_route@5"
    },
    "49": {
      "block": "main_after_if_else@12",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "return"
    },
    "51": {
      "block": "main_testDoContinue_route@5",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%16#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%17#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%18#0"
      ]
    },
    "57": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "58": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "61": {
      "op": "btoi",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "stop#0"
      ]
    },
    "62": {
      "op": "bury 2",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "64": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "67": {
      "op": "btoi",
      "defined_out": [
        "mod#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "mod#0"
      ]
    },
    "68": {
      "op": "bury 3",
      "defined_out": [
        "mod#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "70": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "mod#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "71": {
      "op": "bury 4",
      "defined_out": [
        "i#0",
        "mod#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "73": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "total#0"
      ]
    },
    "74": {
      "op": "bury 1",
      "defined_out": [
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "76": {
      "block": "main_while_top@17",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "78": {
      "op": "bz main_after_if_else@20",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "81": {
      "op": "dig 3"
    },
    "83": {
      "op": "dig 3"
    },
    "85": {
      "op": "%"
    },
    "86": {
      "op": "bnz main_after_if_else@20"
    },
    "89": {
      "op": "dup"
    },
    "90": {
      "op": "pushint 2 // 2"
    },
    "92": {
      "op": "+"
    },
    "93": {
      "op": "bury 1"
    },
    "95": {
      "op": "dig 3"
    },
    "97": {
      "op": "intc_0 // 1"
    },
    "98": {
      "op": "+"
    },
    "99": {
      "op": "bury 4"
    },
    "101": {
      "block": "main_block@21",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "103": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "stop#0"
      ]
    },
    "105": {
      "op": "<",
      "defined_out": [
        "i#0",
        "stop#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%3#1"
      ]
    },
    "106": {
      "op": "bnz main_while_top@17",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "109": {
      "op": "dup"
    },
    "110": {
      "op": "itob"
    },
    "111": {
      "op": "bytec_0 // 0x151f7c75"
    },
    "112": {
      "op": "swap"
    },
    "113": {
      "op": "concat"
    },
    "114": {
      "op": "log"
    },
    "115": {
      "op": "intc_0 // 1"
    },
    "116": {
      "op": "return"
    },
    "117": {
      "block": "main_after_if_else@20",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dup",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "total#0"
      ]
    },
    "118": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "total#0",
        "1"
      ]
    },
    "119": {
      "op": "+",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "total#0"
      ]
    },
    "120": {
      "op": "bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "122": {
      "op": "dig 3",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "124": {
      "op": "intc_0 // 1",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "1"
      ]
    },
    "125": {
      "op": "+",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "126": {
      "op": "bury 4",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "128": {
      "op": "b main_block@21"
    },
    "131": {
      "block": "main_testDoBreak_route@4",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%9#0"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%10#0"
      ]
    },
    "134": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%11#0"
      ]
    },
    "137": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "138": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "141": {
      "op": "btoi",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "stop#0"
      ]
    },
    "142": {
      "op": "bury 2",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "144": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "147": {
      "op": "btoi",
      "defined_out": [
        "breakMod#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "breakMod#0"
      ]
    },
    "148": {
      "op": "bury 5",
      "defined_out": [
        "breakMod#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "150": {
      "op": "intc_1 // 0",
      "defined_out": [
        "breakMod#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "total#0"
      ]
    },
    "151": {
      "op": "bury 1",
      "defined_out": [
        "breakMod#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "153": {
      "op": "intc_1 // 0",
      "defined_out": [
        "breakMod#0",
        "i#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "154": {
      "op": "bury 4",
      "defined_out": [
        "breakMod#0",
        "i#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "156": {
      "block": "main_while_top@27",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "158": {
      "op": "bz main_after_if_else@30",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "161": {
      "op": "dig 3"
    },
    "163": {
      "op": "dig 5"
    },
    "165": {
      "op": "%"
    },
    "166": {
      "op": "bz main_block@33"
    },
    "169": {
      "block": "main_after_if_else@30",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "171": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "1"
      ]
    },
    "172": {
      "op": "+",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "173": {
      "op": "dup",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "174": {
      "op": "bury 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "176": {
      "op": "dup2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "total#0",
        "i#0 (copy)"
      ]
    },
    "177": {
      "op": "+",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "178": {
      "op": "bury 2",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "180": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "stop#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "stop#0"
      ]
    },
    "182": {
      "op": "<",
      "defined_out": [
        "i#0",
        "stop#0",
        "tmp%3#1",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%3#1"
      ]
    },
    "183": {
      "op": "bnz main_while_top@27",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "186": {
      "block": "main_block@33",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dup",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "total#0"
      ]
    },
    "187": {
      "op": "itob",
      "defined_out": [
        "total#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "val_as_bytes%1#0"
      ]
    },
    "188": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "total#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%15#0"
      ]
    },
    "191": {
      "op": "log",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "192": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%0#0"
      ]
    },
    "193": {
      "op": "return"
    },
    "194": {
      "block": "main_testDo_route@3",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%3#0"
      ]
    },
    "196": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%4#0"
      ]
    },
    "197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%5#0"
      ]
    },
    "200": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "201": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "204": {
      "op": "btoi",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "stop#0"
      ]
    },
    "205": {
      "op": "bury 2",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "207": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "208": {
      "op": "bury 4",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "210": {
      "block": "main_while_top@36",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "212": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "1"
      ]
    },
    "213": {
      "op": "+",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "214": {
      "op": "dup",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "215": {
      "op": "bury 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0"
      ]
    },
    "217": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "i#0",
        "stop#0"
      ]
    },
    "219": {
      "op": "<",
      "defined_out": [
        "i#0",
        "stop#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "bnz main_while_top@36",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "223": {
      "op": "dig 3"
    },
    "225": {
      "op": "itob"
    },
    "226": {
      "op": "bytec_0 // 0x151f7c75"
    },
    "227": {
      "op": "swap"
    },
    "228": {
      "op": "concat"
    },
    "229": {
      "op": "log"
    },
    "230": {
      "op": "intc_0 // 1"
    },
    "231": {
      "op": "return"
    },
    "232": {
      "block": "main_bare_routing@8",
      "stack_in": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0",
        "tmp%23#0"
      ]
    },
    "234": {
      "op": "bnz main_after_if_else@12",
      "stack_out": [
        "breakMod#0",
        "i#0",
        "mod#0",
        "stop#0",
        "total#0"
      ]
    },
    "237": {
      "op": "txn ApplicationID"
    },
    "239": {
      "op": "!"
    },
    "240": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "241": {
      "op": "intc_0 // 1"
    },
    "242": {
      "op": "return"
    }
  }
}