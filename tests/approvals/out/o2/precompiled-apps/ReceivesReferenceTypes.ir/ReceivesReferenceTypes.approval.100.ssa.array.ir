main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L110
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "receivesReferenceTypes(uint64,address,uint64)void" => block@3, * => block@4}
    block@3: // receivesReferenceTypes_route_L111
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let acc#0: account = tmp%2#1
        let tmp%4#1: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#1)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = (btoi tmp%4#1)
        let (value%0#0: account, check%0#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%0#0) // application exists
        (log value%0#0)
        (log acc#0)
        let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%1#0) // asset exists
        (log value%1#0)
        exit 1u
    block@4: // switch_case_next_L110
        fail
    block@5: // __algots__.defaultCreate_L110
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u