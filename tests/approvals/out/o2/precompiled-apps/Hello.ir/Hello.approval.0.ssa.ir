main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/precompiled-apps.algo.ts::HelloBase.constructor()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = tests/approvals/precompiled-apps.algo.ts::Hello.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/precompiled-apps.algo.ts::Hello.__puya_arc4_router__() -> bool:
    block@0: // L17
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(string)void" => block@2, method "delete()void" => block@3, method "update()void" => block@4, method "greet(string)string" => block@5, * => block@6}
    block@2: // create_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
        tests/approvals/precompiled-apps.algo.ts::Hello.create(tmp%8#0)
        return 1u
    block@3: // delete_route_L6
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 DeleteApplication)
        (assert tmp%10#0) // OnCompletion is not DeleteApplication
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::HelloBase.delete()
        return 1u
    block@4: // update_route_L9
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 UpdateApplication)
        (assert tmp%14#0) // OnCompletion is not UpdateApplication
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::HelloBase.update()
        return 1u
    block@5: // greet_route_L12
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let tmp%21#0: bytes = (txna ApplicationArgs 1)
        let tmp%22#0: bytes = ((extract 2 0) tmp%21#0)
        let to_encode%0#0: bytes = tests/approvals/precompiled-apps.algo.ts::HelloBase.greet(tmp%22#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%23#0)
        return 1u
    block@6: // switch_case_default_L17
        goto block@7
    block@7: // switch_case_next_L17
        goto block@9
    block@8: // bare_routing_L17
        goto block@9
    block@9: // after_if_else_L17
        return 0u

subroutine tests/approvals/precompiled-apps.algo.ts::Hello.create(greeting: bytes) -> void:
    block@0: // L18
        (app_global_put "greeting" greeting#0)
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.delete() -> void:
    block@0: // L6
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.update() -> void:
    block@0: // L9
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.greet(name: bytes) -> bytes:
    block@0: // L12
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: bytes = (concat "" maybe_value%0#0)
        let tmp%1#0: bytes = (concat tmp%0#0 " ")
        let tmp%2#0: bytes = (concat tmp%1#0 name#0)
        return tmp%2#0

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.constructor() -> void:
    block@0: // L3
        (app_global_put "greeting" "")
        return 