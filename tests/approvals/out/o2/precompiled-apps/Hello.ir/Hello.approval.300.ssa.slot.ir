main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        (app_global_put "greeting" "")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bytes = (txna ApplicationArgs 0)
        switch tmp%0#1 {method "delete()void" => block@4, method "update()void" => block@5, * => block@6}
    block@4: // delete_route_L20
        let tmp%1#0: uint64 = (txn OnCompletion)
        let tmp%2#0: bool = (== tmp%1#0 DeleteApplication)
        let tmp%3#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (&& tmp%2#0 tmp%3#0)
        (assert tmp%5#0) // OnCompletion must be DeleteApplication && can only call when not creating
        exit 1u
    block@5: // update_route_L23
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (== tmp%6#0 UpdateApplication)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%8#0)
        (assert tmp%10#0) // OnCompletion must be UpdateApplication && can only call when not creating
        exit 1u
    block@6: // switch_case_next_L35
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        goto tmp%13#0 ? block@7 : block@11
    block@7: // call_NoOp_L35
        let tmp%15#0: bytes = (txna ApplicationArgs 0)
        switch tmp%15#0 {method "greet(string)string" => block@8, method "sendGreetings((string,string))string" => block@9, * => block@14}
    block@8: // greet_route_L26
        let tmp%0#3: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#3 0u) // on error: invalid array length header
        let add%0#2: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#1: uint64 = (len tmp%0#3)
        let eq%0#2: bool = (== len%0#1 add%0#2)
        (assert eq%0#2) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let name#0: string = ((extract 2 0) tmp%0#3)
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#1) // check GlobalState exists
        let tmp%1#4: bytes = (concat maybe_value%0#1 " ")
        let tmp%2#4: bytes = (concat tmp%1#4 name#0)
        let aggregate%length%0#0: uint64 = (len tmp%2#4)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%2#4)
        let tmp%4#2: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%4#2)
        exit 1u
    block@9: // sendGreetings_route_L30
        let a#0: Encoded((len+utf8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len a#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 a#0 0u) // on error: invalid tuple encoding
        let eq%0#1: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#1) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let substring3%0#0: bytes = (substring3 a#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%1#0 6u)
        let extract_uint16%1#0: uint64 = (extract_uint16 a#0 2u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let substring3%1#0: bytes = (substring3 a#0 extract_uint16%1#0 tuple_len%0#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 substring3%1#0 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%2#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let eq%2#0: bool = (== tuple_len%0#0 add%3#0)
        (assert eq%2#0) // invalid number of bytes for tests/approvals/precompiled-apps.algo.ts::Greeting
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%1#2: bytes = (concat maybe_value%0#0 " ")
        let aggregate%substring3%0#0: bytes = (substring3 a#0 extract_uint16%0#0 extract_uint16%1#0)
        let values%0#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let tmp%2#2: bytes = (concat tmp%1#2 values%0#0)
        let tmp%3#2: string = ((extract 2 0) substring3%1#0)
        let tmp%4#1: bytes = (concat tmp%2#2 tmp%3#2)
        let aggregate%length%1#0: uint64 = (len tmp%4#1)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%4#1)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%1#0)
        (log tmp%3#1)
        exit 1u
    block@11: // create_NoOp_L35
        let tmp%16#0: bytes = (txna ApplicationArgs 0)
        switch tmp%16#0 {method "helloCreate(string)void" => block@12, * => block@14}
    block@12: // helloCreate_route_L36
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 tmp%0#2 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%3#0 2u)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let greeting#0: string = ((extract 2 0) tmp%0#2)
        (app_global_put "greeting" greeting#0)
        exit 1u
    block@14: // after_if_else_L35
        fail