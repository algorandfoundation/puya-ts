main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.__puya_arc4_router__() -> bool:
    block@0: // L85
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L85
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getOne()uint64" => block@2, method "receivesAnyTxn(txn)uint64" => block@3, method "receivesAssetConfig(acfg)byte[]" => block@4, method "receivesAssetConfigAndPay(acfg,pay)void" => block@5, * => block@6}
    block@2: // getOne_route_L86
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.getOne()
        let tmp%8#0: Encoded(uint64) = bytes_encode<uint64>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        return 1u
    block@3: // receivesAnyTxn_route_L90
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%14#0 1u)
        let tmp%15#0: uint64 = tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn(gtxn_idx%0#0)
        let tmp%16#0: Encoded(uint64) = bytes_encode<uint64>(tmp%15#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
        (log tmp%17#0)
        return 1u
    block@4: // receivesAssetConfig_route_L101
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let tmp%22#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%22#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let tmp%23#0: bytes = tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfig(gtxn_idx%1#0)
        let tmp%24#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%23#0)
        let tmp%25#0: bytes = (concat 0x151f7c75 tmp%24#0)
        (log tmp%25#0)
        return 1u
    block@5: // receivesAssetConfigAndPay_route_L104
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (== tmp%26#0 NoOp)
        (assert tmp%27#0) // OnCompletion is not NoOp
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (!= tmp%28#0 0u)
        (assert tmp%29#0) // can only call when not creating
        let tmp%30#0: uint64 = (txn GroupIndex)
        let gtxn_idx%2#0: uint64 = (- tmp%30#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 acfg)
        (assert gtxn_type_matches%1#0) // transaction type is acfg
        let tmp%31#0: uint64 = (txn GroupIndex)
        let gtxn_idx%3#0: uint64 = (- tmp%31#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) gtxn_idx%3#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 pay)
        (assert gtxn_type_matches%2#0) // transaction type is pay
        tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfigAndPay(gtxn_idx%2#0, gtxn_idx%3#0)
        return 1u
    block@6: // switch_case_default_L85
        goto block@7
    block@7: // switch_case_next_L85
        goto block@12
    block@8: // bare_routing_L85
        let tmp%32#0: uint64 = (txn OnCompletion)
        switch tmp%32#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L85
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (== tmp%33#0 0u)
        (assert tmp%34#0) // can only call when creating
        tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L85
        goto block@11
    block@11: // switch_case_next_L85
        goto block@12
    block@12: // after_if_else_L85
        return 0u

subroutine tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.getOne() -> uint64:
    block@0: // L86
        return 1u

subroutine tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn(txn: uint64) -> uint64:
    block@0: // L90
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%0#0: bool = (== awst_tmp%0#0 3u)
        goto tmp%0#0 ? block@1 : block@6
    block@1: // if_body_L92
        goto block@2
    block@2: // L92
        let awst_tmp%1#0: uint64 = ((gtxns CreatedAssetID) txn#0)
        let reinterpret_bool%0#0: bool = awst_tmp%1#0
        goto reinterpret_bool%0#0 ? block@3 : block@4
    block@3: // ternary_true_L93
        let ternary_result%0#0: uint64 = awst_tmp%1#0
        goto block@5
    block@4: // ternary_false_L93
        let ternary_result%0#1: uint64 = ((gtxns ConfigAsset) txn#0)
        goto block@5
    block@5: // ternary_merge_L93
        let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4)
        return ternary_result%0#2
    block@6: // after_if_else_L92
        let tmp%1#0: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#0 ? block@7 : block@12
    block@7: // if_body_L94
        goto block@8
    block@8: // L94
        let awst_tmp%2#0: uint64 = ((gtxns CreatedApplicationID) txn#0)
        let reinterpret_bool%1#0: bool = awst_tmp%2#0
        goto reinterpret_bool%1#0 ? block@9 : block@10
    block@9: // ternary_true_L95
        let ternary_result%1#0: uint64 = awst_tmp%2#0
        goto block@11
    block@10: // ternary_false_L95
        let ternary_result%1#1: uint64 = ((gtxns ApplicationID) txn#0)
        goto block@11
    block@11: // ternary_merge_L95
        let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@9, ternary_result%1#1 <- block@10)
        return ternary_result%1#2
    block@12: // after_if_else_L94
        goto block@13
    block@13: // L96
        return 0u

subroutine tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfig(assetCfg: uint64) -> bytes:
    block@0: // L101
        let tmp%0#0: bytes[32] = ((gtxns TxID) assetCfg#0)
        return tmp%0#0

subroutine tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfigAndPay(assetCfg: uint64, payTxn: uint64) -> void:
    block@0: // L104
        let tmp%0#0: uint64 = ((gtxns TypeEnum) assetCfg#0)
        let tmp%1#0: bool = (== tmp%0#0 3u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = ((gtxns TypeEnum) payTxn#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.__algots__.defaultCreate() -> void:
    block@0: // L85
        return 