#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    // tests/approvals/precompiled-apps.algo.ts:110
    // export class ReceivesReferenceTypes extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    pushbytes 0x66698d18 // method "receivesReferenceTypes(uint64,address,uint64)void"
    txna ApplicationArgs 0
    match main_receivesReferenceTypes_route@3
    err

main_receivesReferenceTypes_route@3:
    // tests/approvals/precompiled-apps.algo.ts:111
    // receivesReferenceTypes(app: Application, acc: Account, asset: Asset) {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    txna ApplicationArgs 1
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    txna ApplicationArgs 3
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    // tests/approvals/precompiled-apps.algo.ts:112
    // log(app.address)
    uncover 2
    app_params_get AppAddress
    assert // application exists
    log
    // tests/approvals/precompiled-apps.algo.ts:113
    // log(acc.bytes)
    swap
    log
    // tests/approvals/precompiled-apps.algo.ts:114
    // log(asset.name)
    asset_params_get AssetName
    assert // asset exists
    log
    // tests/approvals/precompiled-apps.algo.ts:111
    // receivesReferenceTypes(app: Application, acc: Account, asset: Asset) {
    pushint 1 // 1
    return

main___algots__.defaultCreate@5:
    // tests/approvals/precompiled-apps.algo.ts:110
    // export class ReceivesReferenceTypes extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
