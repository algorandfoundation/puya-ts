main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testSingleArg()uint64[]" => block@4, method "testTwoArg()uint64[]" => block@5, method "testThreeArg()uint64[]" => block@6, * => block@9}
    block@4: // testSingleArg_route_L5
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let results#6: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let temp#6: uint64 = 0u
        goto block@24
    block@24: // for_header_L7
        let temp#7: uint64 = φ(temp#6 <- block@4, temp#8 <- block@25)
        let results#7: Encoded(len+uint64[]) = φ(results#6 <- block@4, results#8 <- block@25)
        let continue_looping%0#2: bool = (< temp#7 5u)
        goto continue_looping%0#2 ? block@25 : block@26
    block@25: // for_body_L7
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob temp#7)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let encoded_array%1#2: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let extract_to_end%0#2: bytes = ((extract 2 0) encoded_array%1#2)
        let concat%0#2: Encoded(len+uint64[]) = (concat results#7 extract_to_end%0#2) // on error: max array length exceeded
        let extract_to_end%1#2: bytes = ((extract 2 0) concat%0#2)
        let len%0#2: uint64 = (len extract_to_end%1#2)
        let div_floor%0#2: uint64 = (/ len%0#2 8u)
        let as_bytes%0#2: bytes[8] = (itob div_floor%0#2)
        let as_u16_bytes%0#2: bytes = ((extract 6 2) as_bytes%0#2)
        let results#8: Encoded(len+uint64[]) = ((replace2 0) concat%0#2 as_u16_bytes%0#2)
        let temp#8: uint64 = (+ temp#7 1u)
        goto block@24
    block@26: // after_for_L7
        let tmp%1#3: bytes = (concat 0x151f7c75 results#7)
        (log tmp%1#3)
        exit 1u
    block@5: // testTwoArg_route_L12
        let aggregate%as_bytes%2#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = aggregate%len_u16%2#0
        let results#3: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#0
        let temp#3: uint64 = 2u
        goto block@19
    block@19: // for_header_L14
        let temp#4: uint64 = φ(temp#3 <- block@5, temp#5 <- block@20)
        let results#4: Encoded(len+uint64[]) = φ(results#3 <- block@5, results#5 <- block@20)
        let continue_looping%0#1: bool = (< temp#4 5u)
        goto continue_looping%0#1 ? block@20 : block@21
    block@20: // for_body_L14
        let aggregate%as_bytes%3#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob temp#4)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%len_u16%3#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(len+uint64[])%3#0: Encoded(len+uint64[]) = aggregate%head%1#0
        let encoded_array%1#1: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%3#0
        let extract_to_end%0#1: bytes = ((extract 2 0) encoded_array%1#1)
        let concat%0#1: Encoded(len+uint64[]) = (concat results#4 extract_to_end%0#1) // on error: max array length exceeded
        let extract_to_end%1#1: bytes = ((extract 2 0) concat%0#1)
        let len%0#1: uint64 = (len extract_to_end%1#1)
        let div_floor%0#1: uint64 = (/ len%0#1 8u)
        let as_bytes%0#1: bytes[8] = (itob div_floor%0#1)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let results#5: Encoded(len+uint64[]) = ((replace2 0) concat%0#1 as_u16_bytes%0#1)
        let temp#5: uint64 = (+ temp#4 1u)
        goto block@19
    block@21: // after_for_L14
        let tmp%1#2: bytes = (concat 0x151f7c75 results#4)
        (log tmp%1#2)
        exit 1u
    block@6: // testThreeArg_route_L19
        let aggregate%as_bytes%4#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%as_Encoded(len+uint64[])%4#0: Encoded(len+uint64[]) = aggregate%len_u16%4#0
        let results#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%4#0
        let temp#0: uint64 = 2u
        goto block@14
    block@14: // for_header_L21
        let temp#1: uint64 = φ(temp#0 <- block@6, temp#2 <- block@15)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@6, results#2 <- block@15)
        let continue_looping%0#0: bool = (< temp#1 10u)
        goto continue_looping%0#0 ? block@15 : block@16
    block@15: // for_body_L21
        let aggregate%as_bytes%5#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob temp#1)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%5#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(len+uint64[])%5#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%5#0
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let results#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let temp#2: uint64 = (+ temp#1 3u)
        goto block@14
    block@16: // after_for_L21
        let tmp%1#1: bytes = (concat 0x151f7c75 results#1)
        (log tmp%1#1)
        exit 1u
    block@9: // after_if_else_L4
        fail
    block@10: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u