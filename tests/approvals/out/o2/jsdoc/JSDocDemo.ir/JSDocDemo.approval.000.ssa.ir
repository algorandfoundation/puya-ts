main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__() -> bool:
    block@0: // L20
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L20
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L20
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test(uint64,byte[])(uint64)" => block@3, method "test2(byte[])(byte[])" => block@4, * => block@5}
    block@3: // test_route_L30
        tests/approvals/jsdoc.algo.ts::JSDocDemo.test[routing]()
        goto block@5
    block@4: // test2_route_L39
        tests/approvals/jsdoc.algo.ts::JSDocDemo.test2[routing]()
        goto block@5
    block@5: // switch_case_next_L20
        goto block@7
    block@6: // create_NoOp_L20
        goto block@7
    block@7: // after_if_else_L20
        goto block@9
    block@8: // __algots__.defaultCreate_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate()
        exit 1u
    block@9: // after_if_else_L20
        exit 0u

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test[routing]() -> void:
    block@0: // L30
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = decode_bytes<uint64>(as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%0#0: uint64 = array_len(tmp%2#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for (len+uint8[])
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%2#0
        let tmp%3#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%4#0: Encoded(uint64) = tests/approvals/jsdoc.algo.ts::JSDocDemo.test(tmp%1#0, tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test2[routing]() -> void:
    block@0: // L39
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: Encoded((len+uint8[])) = tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test(a: uint64, b: bytes) -> Encoded(uint64):
    block@0: // L30
        let tmp%0#0: Encoded(uint64) = bytes_encode<uint64>(a#0)
        let tmp%1#0: Encoded(uint64) = bytes_encode<(uint64)>(tmp%0#0)
        return tmp%1#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(a: bytes) -> Encoded((len+uint8[])):
    block@0: // L39
        let tmp%0#0: Encoded((len+uint8[])) = bytes_encode<((len+uint8[]))>(a#0)
        return tmp%0#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate() -> void:
    block@0: // L20
        return 