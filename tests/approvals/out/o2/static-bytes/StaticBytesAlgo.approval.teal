#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 1 0
    bytecblock 0x151f7c75
    intc_2 // 0
    pushbytes ""
    // tests/approvals/static-bytes.algo.ts:17
    // class StaticBytesAlgo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@16
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x25bb3465 0x63fbedbe 0x5c6f499c 0xd71280ea 0xa78000de 0xb976788f 0x9d52c38f 0xdf920f37 0x3d46345c // method "hashAddresses(byte[32],byte[32])byte[32]", method "receiveB32(byte[32])byte[32]", method "receiveBytes(byte[],uint64)void", method "returnLength(byte[32])uint64", method "test()void", method "testArray()void", method "test2()byte[]", method "test3()void", method "test4()void"
    txna ApplicationArgs 0
    match main_hashAddresses_route@4 main_receiveB32_route@5 main_receiveBytes_route@6 main_returnLength_route@7 main_test_route@8 main_testArray_route@9 main_test2_route@10 main_test3_route@11 main_test3_route@11
    err

main_test3_route@11:
    // tests/approvals/static-bytes.algo.ts:67
    // test3() {
    intc_1 // 1
    return

main_test2_route@10:
    // tests/approvals/static-bytes.algo.ts:58
    // let result = Bytes.fromHex(EMPTY_HASH)
    pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
    bury 2
    // tests/approvals/static-bytes.algo.ts:60
    // for (let i: uint64 = 0; i < 5; i = i + 1) {
    intc_2 // 0
    bury 1

main_while_top@24:
    // tests/approvals/static-bytes.algo.ts:60
    // for (let i: uint64 = 0; i < 5; i = i + 1) {
    dup
    pushint 5 // 5
    <
    bz main_after_while@26
    // tests/approvals/static-bytes.algo.ts:61
    // result = op.sha256(op.concat(result, result))
    dig 1
    dup
    concat
    sha256
    bury 2
    // tests/approvals/static-bytes.algo.ts:60
    // for (let i: uint64 = 0; i < 5; i = i + 1) {
    dup
    intc_1 // 1
    +
    bury 1
    b main_while_top@24

main_after_while@26:
    // tests/approvals/static-bytes.algo.ts:57
    // test2() {
    dig 1
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_testArray_route@9:
    // tests/approvals/static-bytes.algo.ts:49
    // const a = [Txn.sender.bytes, Txn.sender.bytes] as const
    txn Sender
    // tests/approvals/static-bytes.algo.ts:49-50
    // const a = [Txn.sender.bytes, Txn.sender.bytes] as const
    // const b = new ReferenceArray<bytes<32>>(Txn.sender.bytes)
    dupn 2
    // tests/approvals/static-bytes.algo.ts:51
    // b.push(...a)
    dig 2
    uncover 2
    concat
    concat // on error: max array length exceeded
    // tests/approvals/static-bytes.algo.ts:53
    // const bitAnd = a[0].bitwiseAnd(b[0])
    extract 0 32 // on error: index access is out of bounds
    b&
    // tests/approvals/static-bytes.algo.ts:54
    // assert(bitAnd === Txn.sender.bytes)
    txn Sender
    ==
    // tests/approvals/static-bytes.algo.ts:48
    // testArray() {
    return

main_test_route@8:
    // tests/approvals/static-bytes.algo.ts:35
    // this.receiveB32(Txn.sender.bytes)
    txn Sender
    callsub receiveB32
    pop
    // tests/approvals/static-bytes.algo.ts:43
    // const padded = padTo32(Txn.sender.bytes.slice(0, 16).toFixed({ length: 16 }))
    txn Sender
    substring 0 16
    dup
    len
    pushint 16 // 16
    ==
    assert // Length must be 16
    // tests/approvals/static-bytes.algo.ts:14
    // return b.bitwiseOr(bzero(32)).toFixed({ length: 32, strategy: 'unsafe-cast' })
    intc_0 // 32
    bzero
    b|
    // tests/approvals/static-bytes.algo.ts:45
    // assert(padded.length === 32)
    len
    intc_0 // 32
    ==
    // tests/approvals/static-bytes.algo.ts:34
    // test() {
    return

main_returnLength_route@7:
    // tests/approvals/static-bytes.algo.ts:30
    // returnLength(b: bytes<32>): uint64 {
    txna ApplicationArgs 1
    len
    dup
    intc_0 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_receiveBytes_route@6:
    // tests/approvals/static-bytes.algo.ts:26
    // receiveBytes(b: bytes, length: uint64) {
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // tests/approvals/static-bytes.algo.ts:27
    // assert(b.length === length)
    swap
    len
    ==
    // tests/approvals/static-bytes.algo.ts:26
    // receiveBytes(b: bytes, length: uint64) {
    return

main_receiveB32_route@5:
    // tests/approvals/static-bytes.algo.ts:22
    // receiveB32(b: bytes<32>) {
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    callsub receiveB32
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_hashAddresses_route@4:
    // tests/approvals/static-bytes.algo.ts:18
    // hashAddresses(a1: B32, a2: B32): B32Alias {
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // tests/approvals/static-bytes.algo.ts:19
    // return sha512_256(a1.concat(a2))
    concat
    sha512_256
    // tests/approvals/static-bytes.algo.ts:18
    // hashAddresses(a1: B32, a2: B32): B32Alias {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main___algots__.defaultCreate@16:
    // tests/approvals/static-bytes.algo.ts:17
    // class StaticBytesAlgo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(b: bytes) -> bytes:
receiveB32:
    // tests/approvals/static-bytes.algo.ts:22
    // receiveB32(b: bytes<32>) {
    proto 1 1
    // tests/approvals/static-bytes.algo.ts:23
    // assert(b.length === 32)
    frame_dig -1
    len
    intc_0 // 32
    ==
    assert
    // tests/approvals/static-bytes.algo.ts:24
    // return sha512_256(b)
    frame_dig -1
    sha512_256
    retsub
