{
    "hints": {
        "hashAddresses(byte[32],byte[32])byte[32]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveB32(byte[32])byte[32]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveBytes(byte[],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "returnLength(byte[32])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testArray()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAzMgogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MTQKICAgIC8vIGNsYXNzIFN0YXRpY0J5dGVzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMQogICAgcHVzaGJ5dGVzcyAweDI1YmIzNDY1IDB4NjNmYmVkYmUgMHg1YzZmNDk5YyAweGQ3MTI4MGVhIDB4YTc4MDAwZGUgMHhiOTc2Nzg4ZiAvLyBtZXRob2QgImhhc2hBZGRyZXNzZXMoYnl0ZVszMl0sYnl0ZVszMl0pYnl0ZVszMl0iLCBtZXRob2QgInJlY2VpdmVCMzIoYnl0ZVszMl0pYnl0ZVszMl0iLCBtZXRob2QgInJlY2VpdmVCeXRlcyhieXRlW10sdWludDY0KXZvaWQiLCBtZXRob2QgInJldHVybkxlbmd0aChieXRlWzMyXSl1aW50NjQiLCBtZXRob2QgInRlc3QoKXZvaWQiLCBtZXRob2QgInRlc3RBcnJheSgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5faGFzaEFkZHJlc3Nlc19yb3V0ZUAzIG1haW5fcmVjZWl2ZUIzMl9yb3V0ZUA0IG1haW5fcmVjZWl2ZUJ5dGVzX3JvdXRlQDUgbWFpbl9yZXR1cm5MZW5ndGhfcm91dGVANiBtYWluX3Rlc3Rfcm91dGVANyBtYWluX3Rlc3RBcnJheV9yb3V0ZUA4CgptYWluX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MTQKICAgIC8vIGNsYXNzIFN0YXRpY0J5dGVzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHB1c2hpbnQgMCAvLyAwCiAgICByZXR1cm4KCm1haW5fdGVzdEFycmF5X3JvdXRlQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6NDEKICAgIC8vIHRlc3RBcnJheSgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjQyCiAgICAvLyBjb25zdCBhID0gW1R4bi5zZW5kZXIuYnl0ZXMsIFR4bi5zZW5kZXIuYnl0ZXNdIGFzIGNvbnN0CiAgICB0eG4gU2VuZGVyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6NDItNDMKICAgIC8vIGNvbnN0IGEgPSBbVHhuLnNlbmRlci5ieXRlcywgVHhuLnNlbmRlci5ieXRlc10gYXMgY29uc3QKICAgIC8vIGNvbnN0IGIgPSBuZXcgTXV0YWJsZUFycmF5PGJ5dGVzPDMyPj4oVHhuLnNlbmRlci5ieXRlcykKICAgIGR1cG4gMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjQ0CiAgICAvLyBiLnB1c2goLi4uYSkKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6NDYKICAgIC8vIGNvbnN0IGJpdEFuZCA9IGFbMF0uYml0d2lzZUFuZChiWzBdKQogICAgZXh0cmFjdCAwIDMyCiAgICBleHRyYWN0IDAgMzIKICAgIGImCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6NDcKICAgIC8vIGFzc2VydChiaXRBbmQgPT09IFR4bi5zZW5kZXIuYnl0ZXMpCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6NDEKICAgIC8vIHRlc3RBcnJheSgpIHsKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdF9yb3V0ZUA3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjMxCiAgICAvLyB0ZXN0KCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MzIKICAgIC8vIHRoaXMucmVjZWl2ZUIzMihUeG4uc2VuZGVyLmJ5dGVzKQogICAgdHhuIFNlbmRlcgogICAgY2FsbHN1YiByZWNlaXZlQjMyCiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czozMQogICAgLy8gdGVzdCgpIHsKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcmV0dXJuTGVuZ3RoX3JvdXRlQDY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MjcKICAgIC8vIHJldHVybkxlbmd0aChiOiBieXRlczwzMj4pOiB1aW50NjQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MTQKICAgIC8vIGNsYXNzIFN0YXRpY0J5dGVzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoyOAogICAgLy8gcmV0dXJuIGIubGVuZ3RoCiAgICBsZW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoyNwogICAgLy8gcmV0dXJuTGVuZ3RoKGI6IGJ5dGVzPDMyPik6IHVpbnQ2NCB7CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlY2VpdmVCeXRlc19yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjIzCiAgICAvLyByZWNlaXZlQnl0ZXMoYjogYnl0ZXMsIGxlbmd0aDogdWludDY0KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoxNAogICAgLy8gY2xhc3MgU3RhdGljQnl0ZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoyNAogICAgLy8gYXNzZXJ0KGIubGVuZ3RoID09PSBsZW5ndGgpCiAgICBzd2FwCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoyMwogICAgLy8gcmVjZWl2ZUJ5dGVzKGI6IGJ5dGVzLCBsZW5ndGg6IHVpbnQ2NCkgewogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZWNlaXZlQjMyX3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MTkKICAgIC8vIHJlY2VpdmVCMzIoYjogYnl0ZXM8MzI+KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoxNAogICAgLy8gY2xhc3MgU3RhdGljQnl0ZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjE5CiAgICAvLyByZWNlaXZlQjMyKGI6IGJ5dGVzPDMyPikgewogICAgY2FsbHN1YiByZWNlaXZlQjMyCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9oYXNoQWRkcmVzc2VzX3JvdXRlQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MTUKICAgIC8vIGhhc2hBZGRyZXNzZXMoYTE6IGJ5dGVzPDMyPiwgYTI6IGJ5dGVzPDMyPik6IGJ5dGVzPDMyPiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoxNAogICAgLy8gY2xhc3MgU3RhdGljQnl0ZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjE2CiAgICAvLyByZXR1cm4gc2hhNTEyXzI1NihhMS5jb25jYXQoYTIpKQogICAgY29uY2F0CiAgICBzaGE1MTJfMjU2CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6MTUKICAgIC8vIGhhc2hBZGRyZXNzZXMoYTE6IGJ5dGVzPDMyPiwgYTI6IGJ5dGVzPDMyPik6IGJ5dGVzPDMyPiB7CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoxNAogICAgLy8gY2xhc3MgU3RhdGljQnl0ZXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0cy9hcHByb3ZhbHMvc3RhdGljLWJ5dGVzLmFsZ28udHM6OlN0YXRpY0J5dGVzQWxnby5yZWNlaXZlQjMyKGI6IGJ5dGVzKSAtPiBieXRlczoKcmVjZWl2ZUIzMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9zdGF0aWMtYnl0ZXMuYWxnby50czoxOQogICAgLy8gcmVjZWl2ZUIzMihiOiBieXRlczwzMj4pIHsKICAgIHByb3RvIDEgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjIwCiAgICAvLyBhc3NlcnQoYi5sZW5ndGggPT09IDMyKQogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3N0YXRpYy1ieXRlcy5hbGdvLnRzOjIxCiAgICAvLyByZXR1cm4gc2hhNTEyXzI1NihiKQogICAgZnJhbWVfZGlnIC0xCiAgICBzaGE1MTJfMjU2CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StaticBytesAlgo",
        "methods": [
            {
                "name": "hashAddresses",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "a1"
                    },
                    {
                        "type": "byte[32]",
                        "name": "a2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "receiveB32",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "receiveBytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "returnLength",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testArray",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}