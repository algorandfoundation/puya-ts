{
    "hints": {
        "hashAddresses(byte[32],byte[32])byte[32]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveB32(byte[32])byte[32]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveBytes(byte[],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "returnLength(byte[32])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testArray()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test2()byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test3()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test4()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StaticBytesAlgo",
        "methods": [
            {
                "name": "hashAddresses",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "a1"
                    },
                    {
                        "type": "byte[32]",
                        "name": "a2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "receiveB32",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "receiveBytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "returnLength",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testArray",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test2",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "test3",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test4",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}