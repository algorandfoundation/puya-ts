#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 8 0 1 16
    bytecblock 0x151f7c75 "plugins" "main"
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@18
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x89388ddd 0xef322d6d 0x02458807 0xcb81deb8 0xba27a9ba 0x2f670a55 0xd4c81f5b 0xf4835c23 0x3814f92a 0x007a4cb0 0xa9bc61f1 // method "testVectorCreationAndEquality()void", method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)", method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)", method "implicitCastingAndSpreading((uint64,uint64))void", method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void", method "testMethodSelector()void", method "testAssertMatch(uint64)void", method "testArc4Encoding((uint64,uint64))void", method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])", method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])", method "setPlugin(string)void"
    txna ApplicationArgs 0
    match main_testVectorCreationAndEquality_route@4 main_addVectors_route@5 main_mutateVector_route@6 main_implicitCastingAndSpreading_route@7 main_testNestedObjects_route@8 main_testMethodSelector_route@9 main_testAssertMatch_route@10 main_testArc4Encoding_route@11 main_getPlugin_route@12 main_getMain_route@13 main_setPlugin_route@14
    err

main_setPlugin_route@14:
    // tests/approvals/mutable-object.algo.ts:123
    // public setPlugin(key: string) {
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:103
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:124-136
    // this.plugins(key).value = {
    //   lastValidRound: new arc4.Uint64(1),
    //   cooldown: new arc4.Uint64(),
    //   lastCalled: new arc4.Uint64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   methods: [
    //     {
    //       selector: new arc4.StaticBytes(methodSelector('test()void')),
    //       cooldown: new arc4.Uint64(1),
    //       lastCalled: new arc4.Uint64(1),
    //     },
    //   ],
    // }
    dup
    box_del
    pop
    pushbytes 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001
    box_put
    // tests/approvals/mutable-object.algo.ts:123
    // public setPlugin(key: string) {
    intc_2 // 1
    return

main_getMain_route@13:
    // tests/approvals/mutable-object.algo.ts:105
    // plugin = Box<PluginInfo>({ key: 'main' })
    bytec_2 // "main"
    // tests/approvals/mutable-object.algo.ts:114
    // const value = clone(this.plugin.value)
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:105
    // plugin = Box<PluginInfo>({ key: 'main' })
    bytec_2 // "main"
    // tests/approvals/mutable-object.algo.ts:114-115
    // const value = clone(this.plugin.value)
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    intc_3 // 16
    intc_0 // 8
    box_extract
    // tests/approvals/mutable-object.algo.ts:115
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    btoi
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:113
    // public getMain() {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_getPlugin_route@12:
    // tests/approvals/mutable-object.algo.ts:107
    // public getPlugin(key: string): PluginInfo {
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:103
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:108
    // const value = clone(this.plugins(key).value)
    dup
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:108-109
    // const value = clone(this.plugins(key).value)
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    swap
    intc_3 // 16
    intc_0 // 8
    box_extract
    // tests/approvals/mutable-object.algo.ts:109
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    btoi
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:107
    // public getPlugin(key: string): PluginInfo {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_testArc4Encoding_route@11:
    // tests/approvals/mutable-object.algo.ts:92
    // testArc4Encoding(p: Point) {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 16
    ==
    assert // invalid number of bytes for (uint64,uint64)
    // tests/approvals/mutable-object.algo.ts:93
    // assert(p.x !== p.y, 'For the purpose of this test, a should not equal b')
    dup
    intc_0 // 8
    extract_uint64
    dig 1
    intc_1 // 0
    extract_uint64
    dup2
    !=
    assert // For the purpose of this test, a should not equal b
    // tests/approvals/mutable-object.algo.ts:94-97
    // const obj: Vector = {
    //   x: p.x,
    //   y: p.y,
    // }
    swap
    itob
    swap
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:100
    // assert(pEncoded === objEncoded.slice(8).concat(objEncoded.slice(0, 8)), 'Encoded order should be swapped')
    dup
    len
    intc_0 // 8
    dig 1
    >=
    intc_0 // 8
    dig 2
    uncover 2
    select
    dig 2
    dig 1
    dig 3
    substring3
    intc_1 // 0
    dig 3
    >=
    intc_1 // 0
    uncover 4
    uncover 2
    select
    cover 2
    cover 3
    substring3
    concat
    ==
    // tests/approvals/mutable-object.algo.ts:92
    // testArc4Encoding(p: Point) {
    return // on error: Encoded order should be swapped

main_testAssertMatch_route@10:
    // tests/approvals/mutable-object.algo.ts:75
    // testAssertMatch(x: uint64) {
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    // tests/approvals/mutable-object.algo.ts:78
    // y: (b = x * 2),
    dup
    pushint 2 // 2
    *
    // tests/approvals/mutable-object.algo.ts:77-80
    // const obj: Vector = {
    //   y: (b = x * 2),
    //   x: b,
    // }
    dup
    itob
    dup
    concat
    // tests/approvals/mutable-object.algo.ts:81-84
    // assertMatch(obj, {
    //   y: x * 2,
    //   x: x * 2,
    // })
    dup
    intc_0 // 8
    extract_uint64
    dup
    dig 3
    ==
    uncover 2
    intc_1 // 0
    extract_uint64
    dup
    uncover 4
    ==
    uncover 2
    &&
    assert // assert target is match for conditions
    // tests/approvals/mutable-object.algo.ts:85
    // const v = { y: obj.y, x: obj.x }
    dig 1
    itob
    dig 1
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:87
    // assertMatch(obj, { x: v.x, y: v.y })
    dup
    intc_0 // 8
    extract_uint64
    dig 2
    ==
    swap
    intc_1 // 0
    extract_uint64
    dig 3
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/mutable-object.algo.ts:88
    // assertMatch(obj, { y: { greaterThan: x } })
    swap
    dig 2
    >
    assert // assert target is match for conditions
    // tests/approvals/mutable-object.algo.ts:89
    // assertMatch(obj, { x: { greaterThan: x } })
    <
    // tests/approvals/mutable-object.algo.ts:75
    // testAssertMatch(x: uint64) {
    return // on error: assert target is match for conditions

main_testMethodSelector_route@9:
    // tests/approvals/mutable-object.algo.ts:60
    // public testMethodSelector() {
    intc_2 // 1
    return

main_testNestedObjects_route@8:
    // tests/approvals/mutable-object.algo.ts:49
    // public testNestedObjects(vp: VectorPoint) {
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for ((uint64,uint64),(uint64,uint64))
    // tests/approvals/mutable-object.algo.ts:50
    // const v1 = { x: vp.v.x, y: vp.v.y }
    dup
    extract 0 16
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_0 // 8
    extract_uint64
    dig 1
    itob
    dig 1
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:51
    // const p1 = { x: vp.p.x, y: vp.p.y }
    uncover 3
    extract 16 16
    dup
    intc_0 // 8
    extract_uint64
    swap
    intc_1 // 0
    extract_uint64
    dig 1
    itob
    dig 1
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:52
    // const vp1 = { v: clone(v1), p: clone(p1) }
    uncover 3
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:53
    // log(vp1.v.x)
    dup
    extract 0 16
    dup
    intc_1 // 0
    extract_uint64
    dup
    itob
    log
    // tests/approvals/mutable-object.algo.ts:54
    // log(vp1.v.y)
    swap
    // tests/approvals/mutable-object.algo.ts:53-54
    // log(vp1.v.x)
    // log(vp1.v.y)
    intc_0 // 8
    // tests/approvals/mutable-object.algo.ts:54
    // log(vp1.v.y)
    extract_uint64
    dup
    itob
    log
    // tests/approvals/mutable-object.algo.ts:55
    // log(vp1.p.x)
    uncover 2
    extract 16 16
    dup
    intc_1 // 0
    extract_uint64
    dup
    itob
    log
    // tests/approvals/mutable-object.algo.ts:56
    // log(vp1.p.y)
    swap
    // tests/approvals/mutable-object.algo.ts:55-56
    // log(vp1.p.x)
    // log(vp1.p.y)
    intc_0 // 8
    // tests/approvals/mutable-object.algo.ts:56
    // log(vp1.p.y)
    extract_uint64
    dup
    itob
    log
    // tests/approvals/mutable-object.algo.ts:57
    // assertMatch(vp1, vp)
    uncover 3
    uncover 7
    ==
    uncover 3
    uncover 6
    ==
    &&
    swap
    uncover 3
    ==
    uncover 2
    uncover 3
    ==
    &&
    &&
    // tests/approvals/mutable-object.algo.ts:49
    // public testNestedObjects(vp: VectorPoint) {
    return // on error: assert target is match for conditions

main_implicitCastingAndSpreading_route@7:
    // tests/approvals/mutable-object.algo.ts:34
    // public implicitCastingAndSpreading(v1: Vector) {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 16
    ==
    assert // invalid number of bytes for (uint64,uint64)
    // tests/approvals/mutable-object.algo.ts:36
    // const v3 = { ...v2 }
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_0 // 8
    extract_uint64
    dig 1
    itob
    dig 1
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:40
    // assert(v3.x === v1.x)
    dup
    intc_1 // 0
    extract_uint64
    uncover 3
    ==
    dup
    assert
    // tests/approvals/mutable-object.algo.ts:41
    // assert(v3.y === v1.y)
    swap
    intc_0 // 8
    extract_uint64
    uncover 2
    ==
    dup
    assert
    // tests/approvals/mutable-object.algo.ts:42
    // assertMatch(v3, v1)
    &&
    // tests/approvals/mutable-object.algo.ts:34
    // public implicitCastingAndSpreading(v1: Vector) {
    return // on error: assert target is match for conditions

main_mutateVector_route@6:
    // tests/approvals/mutable-object.algo.ts:28
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 16
    ==
    assert // invalid number of bytes for (uint64,uint64)
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 3
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for uint64
    // tests/approvals/mutable-object.algo.ts:29
    // v1.x = newX
    cover 2
    replace2 0
    // tests/approvals/mutable-object.algo.ts:30
    // v1.y = newY
    swap
    replace2 8
    // tests/approvals/mutable-object.algo.ts:28
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_addVectors_route@5:
    // tests/approvals/mutable-object.algo.ts:21
    // public addVectors(v1: Vector, v2: Vector): Vector {
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 16
    ==
    assert // invalid number of bytes for (uint64,uint64)
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 16
    ==
    assert // invalid number of bytes for (uint64,uint64)
    // tests/approvals/mutable-object.algo.ts:23
    // x: v1.x + v2.x,
    dig 1
    intc_1 // 0
    extract_uint64
    dig 1
    intc_1 // 0
    extract_uint64
    +
    // tests/approvals/mutable-object.algo.ts:24
    // y: v1.y + v2.y,
    uncover 2
    intc_0 // 8
    extract_uint64
    uncover 2
    intc_0 // 8
    extract_uint64
    +
    // tests/approvals/mutable-object.algo.ts:22-25
    // return {
    //   x: v1.x + v2.x,
    //   y: v1.y + v2.y,
    // }
    swap
    itob
    swap
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:21
    // public addVectors(v1: Vector, v2: Vector): Vector {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_testVectorCreationAndEquality_route@4:
    // tests/approvals/mutable-object.algo.ts:14
    // const v1: Vector = { y: 1, x: 0 }
    intc_1 // 0
    itob
    intc_2 // 1
    itob
    // tests/approvals/mutable-object.algo.ts:15
    // log(v1.x)
    swap
    log
    // tests/approvals/mutable-object.algo.ts:16
    // log(v1.y)
    log
    // tests/approvals/mutable-object.algo.ts:13
    // public testVectorCreationAndEquality() {
    intc_2 // 1
    return

main___algots__.defaultCreate@18:
    // tests/approvals/mutable-object.algo.ts:12
    // export class MutableObjectDemo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
