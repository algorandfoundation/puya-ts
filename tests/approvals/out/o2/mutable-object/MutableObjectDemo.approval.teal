#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 20 16
    bytecblock 0x151f7c75 "plugins" 0x0000000000000000
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@14
    pushbytess 0x89388ddd 0xef322d6d 0x02458807 0xcb81deb8 0xf79d6c46 0x3814f92a 0x007a4cb0 0x4d21bca6 0xa9bc61f1 // method "testVectorCreationAndEquality()void", method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)", method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)", method "implicitCastingAndSpreading((uint64,uint64))void", method "toAndFromBytes((uint64,uint64))(uint64,uint64)", method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])", method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])", method "setLastCalled(string,uint64,uint64)void", method "setPlugin(string)void"
    txna ApplicationArgs 0
    match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_mutateVector_route@5 main_implicitCastingAndSpreading_route@6 main_toAndFromBytes_route@7 main_getPlugin_route@8 main_getMain_route@9 main_setLastCalled_route@10 main_setPlugin_route@11

main_after_if_else@18:
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    intc_1 // 0
    return

main_setPlugin_route@11:
    // tests/approvals/mutable-object.algo.ts:64
    // public setPlugin(key: string) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:44
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:65-77
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: 0,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   methods: new arc4.DynamicArray(
    //     new MethodInfo({
    //       selector: new arc4.StaticBytes(methodSelector('test()void')),
    //       cooldown: 1,
    //       lastCalled: new arc4.UintN64(1),
    //     }),
    //   ),
    // })
    dup
    box_del
    pop
    pushbytes 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001
    box_put
    // tests/approvals/mutable-object.algo.ts:64
    // public setPlugin(key: string) {
    intc_0 // 1
    return

main_setLastCalled_route@10:
    // tests/approvals/mutable-object.algo.ts:60
    // public setLastCalled(key: string, index: uint64, lastCalled: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/approvals/mutable-object.algo.ts:61
    // this.plugins(key).value.methods[index].lastCalled = new arc4.UintN64(lastCalled)
    itob
    // tests/approvals/mutable-object.algo.ts:44
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    uncover 3
    concat
    // tests/approvals/mutable-object.algo.ts:61
    // this.plugins(key).value.methods[index].lastCalled = new arc4.UintN64(lastCalled)
    dup
    box_get
    assert // Box must have value
    dup
    pushint 25 // 25
    extract_uint16
    dig 1
    len
    dig 2
    dig 2
    uncover 2
    substring3
    dup
    extract 2 0
    dig 6
    intc_2 // 20
    *
    swap
    dig 1
    intc_2 // 20
    extract3 // on error: Index access is out of bounds
    uncover 6
    replace2 12
    dig 2
    intc_1 // 0
    extract_uint16
    uncover 7
    >
    assert // Index access is out of bounds
    swap
    pushint 2 // 2
    +
    swap
    replace3
    uncover 2
    intc_1 // 0
    uncover 3
    extract3
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    // tests/approvals/mutable-object.algo.ts:60
    // public setLastCalled(key: string, index: uint64, lastCalled: uint64) {
    intc_0 // 1
    return

main_getMain_route@9:
    // tests/approvals/mutable-object.algo.ts:54
    // public getMain() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:46
    // plugin = Box<PluginInfo>({ key: 'main' })
    pushbytes "main"
    // tests/approvals/mutable-object.algo.ts:55
    // const value = this.plugin.value.copy()
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:56
    // assert(value.lastCalled.native > 0, 'Last called not zero')
    dup
    intc_3 // 16
    extract_uint64
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:54
    // public getMain() {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getPlugin_route@8:
    // tests/approvals/mutable-object.algo.ts:48
    // public getPlugin(key: string): PluginInfo {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:44
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    swap
    concat
    // tests/approvals/mutable-object.algo.ts:49
    // const value = this.plugins(key).value.copy()
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:50
    // assert(value.lastCalled.native > 0, 'Last called not zero')
    dup
    intc_3 // 16
    extract_uint64
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:48
    // public getPlugin(key: string): PluginInfo {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_toAndFromBytes_route@7:
    // tests/approvals/mutable-object.algo.ts:39
    // public toAndFromBytes(v1: Vector): Vector {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/mutable-object.algo.ts:39
    // public toAndFromBytes(v1: Vector): Vector {
    concat
    log
    intc_0 // 1
    return

main_implicitCastingAndSpreading_route@6:
    // tests/approvals/mutable-object.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/mutable-object.algo.ts:33
    // const v2 = new Vector(v1)
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    concat
    // tests/approvals/mutable-object.algo.ts:34
    // const v3 = new Vector({ ...v2 })
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    concat
    // tests/approvals/mutable-object.algo.ts:35
    // assert(v1.bytes === v2.bytes)
    dig 2
    uncover 2
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:36
    // assert(v3.bytes === v1.bytes)
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    intc_0 // 1
    return

main_mutateVector_route@5:
    // tests/approvals/mutable-object.algo.ts:26
    // public mutateVector(v1: Vector, newX: ARC4Uint64, newY: ARC4Uint64): Vector {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 3
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/mutable-object.algo.ts:27
    // v1.x = newX
    replace2 0
    // tests/approvals/mutable-object.algo.ts:28
    // v1.y = newY
    swap
    replace2 8
    // tests/approvals/mutable-object.algo.ts:26
    // public mutateVector(v1: Vector, newX: ARC4Uint64, newY: ARC4Uint64): Vector {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_addVectors_route@4:
    // tests/approvals/mutable-object.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/mutable-object.algo.ts:21
    // x: new ARC4Uint64(v1.x.native + v2.x.native),
    dig 1
    intc_1 // 0
    extract_uint64
    dig 1
    intc_1 // 0
    extract_uint64
    +
    itob
    // tests/approvals/mutable-object.algo.ts:22
    // y: new ARC4Uint64(v1.y.native + v2.y.native),
    uncover 2
    pushint 8 // 8
    extract_uint64
    uncover 2
    pushint 8 // 8
    extract_uint64
    +
    itob
    // tests/approvals/mutable-object.algo.ts:20-23
    // return new Vector({
    //   x: new ARC4Uint64(v1.x.native + v2.x.native),
    //   y: new ARC4Uint64(v1.y.native + v2.y.native),
    // })
    concat
    // tests/approvals/mutable-object.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_testVectorCreationAndEquality_route@3:
    // tests/approvals/mutable-object.algo.ts:11
    // public testVectorCreationAndEquality() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:13
    // log(v1.x)
    bytec_2 // 0x0000000000000000
    log
    // tests/approvals/mutable-object.algo.ts:14
    // log(v1.y)
    bytec_2 // 0x0000000000000000
    log
    // tests/approvals/mutable-object.algo.ts:11
    // public testVectorCreationAndEquality() {
    intc_0 // 1
    return

main_bare_routing@14:
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
