main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" => block@7, method "testMethodSelector()void" => block@8, method "testAssertMatch(uint64)void" => block@9, method "testArc4Encoding((uint64,uint64))void" => block@10, method "getPlugin(string)(uint64,uint64,uint64,bool)" => block@11, method "getMain()(uint64,uint64,uint64,bool)" => block@12, method "setPlugin(string)void" => block@13, * => block@20}
    block@3: // testVectorCreationAndEquality_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let array%val_as_bytes%1#1: bytes[8] = (itob 1u)
        (log array%val_as_bytes%0#1)
        (log array%val_as_bytes%1#1)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@21
    block@4: // addVectors_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let v1#5: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let v2#1: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let values%0#4: uint64 = (extract_uint64 v1#5 0u)
        let values%1#4: uint64 = (extract_uint64 v2#1 0u)
        let tmp%0#7: uint64 = (+ values%0#4 values%1#4)
        let values%2#4: uint64 = (extract_uint64 v1#5 8u)
        let values%3#4: uint64 = (extract_uint64 v2#1 8u)
        let tmp%1#5: uint64 = (+ values%2#4 values%3#4)
        let array%val_as_bytes%4#1: bytes[8] = (itob tmp%0#7)
        let array%val_as_bytes%5#1: bytes[8] = (itob tmp%1#5)
        let array%encoded%7#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%4#1 array%val_as_bytes%5#1)
        let tmp%12#0: bytes = (concat 0x151f7c75 array%encoded%7#1)
        (log tmp%12#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@21
    block@5: // mutateVector_route_L28
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let v1#2: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let newX#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let newY#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let array%val_as_bytes%6#1: bytes[8] = (itob newX#0)
        let v1#3: Encoded(uint64,uint64) = ((replace2 0) v1#2 array%val_as_bytes%6#1)
        let array%val_as_bytes%7#1: bytes[8] = (itob newY#0)
        let v1#4: Encoded(uint64,uint64) = ((replace2 8) v1#3 array%val_as_bytes%7#1)
        let tmp%20#0: bytes = (concat 0x151f7c75 v1#4)
        (log tmp%20#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@21
    block@6: // implicitCastingAndSpreading_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let v1#1: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%item0%0#1: uint64 = (extract_uint64 v1#1 0u)
        let array%item1%0#1: uint64 = (extract_uint64 v1#1 8u)
        let array%val_as_bytes%8#1: bytes[8] = (itob array%item0%0#1)
        let array%val_as_bytes%9#1: bytes[8] = (itob array%item1%0#1)
        let v2#0: Encoded(uint64,uint64) = (concat array%val_as_bytes%8#1 array%val_as_bytes%9#1)
        let values%0#3: uint64 = (extract_uint64 v2#0 0u)
        let values%1#3: uint64 = (extract_uint64 v2#0 8u)
        let array%val_as_bytes%10#1: bytes[8] = (itob values%0#3)
        let array%val_as_bytes%11#1: bytes[8] = (itob values%1#3)
        let v3#0: Encoded(uint64,uint64) = (concat array%val_as_bytes%10#1 array%val_as_bytes%11#1)
        let tmp%2#3: bool = (== array%item0%0#1 values%0#3)
        (assert tmp%2#3)
        let tmp%3#4: bool = (== array%item1%0#1 values%1#3)
        (assert tmp%3#4)
        let tmp%4#3: bool = (== v1#1 v2#0)
        (assert tmp%4#3)
        let x#1: uint64 = (extract_uint64 v3#0 0u)
        let tmp%5#4: bool = (== x#1 array%item0%0#1)
        (assert tmp%5#4)
        let y#0: uint64 = (extract_uint64 v3#0 8u)
        let tmp%6#2: bool = (== y#0 array%item1%0#1)
        (assert tmp%6#2)
        let tmp%7#3: bool = (== v3#0 v1#1)
        (assert tmp%7#3)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@21
    block@7: // testNestedObjects_route_L49
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let vp#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let array%extract%25#1: bytes = ((extract 0 16) vp#0)
        let values%0#2: uint64 = (extract_uint64 array%extract%25#1 0u)
        let values%1#2: uint64 = (extract_uint64 array%extract%25#1 8u)
        let array%val_as_bytes%12#1: bytes[8] = (itob values%0#2)
        let array%val_as_bytes%13#1: bytes[8] = (itob values%1#2)
        let v1#0: Encoded(uint64,uint64) = (concat array%val_as_bytes%12#1 array%val_as_bytes%13#1)
        let array%extract%31#1: bytes = ((extract 16 16) vp#0)
        let values%2#2: uint64 = (extract_uint64 array%extract%31#1 8u)
        let values%3#2: uint64 = (extract_uint64 array%extract%31#1 0u)
        let array%val_as_bytes%14#1: bytes[8] = (itob values%3#2)
        let array%val_as_bytes%15#1: bytes[8] = (itob values%2#2)
        let p1#0: Encoded(uint64,uint64) = (concat array%val_as_bytes%14#1 array%val_as_bytes%15#1)
        let vp1#0: Encoded((uint64,uint64),(uint64,uint64)) = (concat v1#0 p1#0)
        let array%extract%37#1: bytes = ((extract 0 16) vp1#0)
        let values%4#1: uint64 = (extract_uint64 array%extract%37#1 0u)
        let tmp%3#3: bytes[8] = (itob values%4#1)
        (log tmp%3#3)
        let values%5#1: uint64 = (extract_uint64 array%extract%37#1 8u)
        let tmp%4#2: bytes[8] = (itob values%5#1)
        (log tmp%4#2)
        let array%extract%43#1: bytes = ((extract 16 16) vp1#0)
        let values%6#1: uint64 = (extract_uint64 array%extract%43#1 8u)
        let tmp%5#3: bytes[8] = (itob values%6#1)
        (log tmp%5#3)
        let values%7#1: uint64 = (extract_uint64 array%extract%43#1 0u)
        let tmp%6#1: bytes[8] = (itob values%7#1)
        (log tmp%6#1)
        let tmp%7#2: bool = (== vp1#0 vp#0)
        (assert tmp%7#2)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@21
    block@8: // testMethodSelector_route_L60
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@21
    block@9: // testAssertMatch_route_L72
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let b#0: uint64 = (* x#0 2u)
        let array%val_as_bytes%16#1: bytes[8] = (itob b#0)
        let obj#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%16#1 array%val_as_bytes%16#1)
        let values%0#1: uint64 = (extract_uint64 obj#1 8u)
        let tmp%3#2: bool = (== values%0#1 b#0)
        goto tmp%3#2 ? block@33 : block@35
    block@33: // and_contd_L78
        let values%1#1: uint64 = (extract_uint64 obj#1 0u)
        let tmp%5#2: bool = (== values%1#1 b#0)
        goto tmp%5#2 ? block@34 : block@35
    block@34: // bool_true_L78
        let and_result%0#0: bool = 1u
        goto block@36
    block@35: // bool_false_L78
        let and_result%0#1: bool = 0u
        goto block@36
    block@36: // bool_merge_L78
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@34, and_result%0#1 <- block@35)
        (assert and_result%0#2) // assert target is match for conditions
        let values%3#1: uint64 = (extract_uint64 obj#1 0u)
        let array%val_as_bytes%18#1: bytes[8] = (itob values%0#1)
        let array%val_as_bytes%19#1: bytes[8] = (itob values%3#1)
        let v#0: Encoded(uint64,uint64) = (concat array%val_as_bytes%18#1 array%val_as_bytes%19#1)
        let values%5#0: uint64 = (extract_uint64 v#0 8u)
        let tmp%7#1: bool = (== values%3#1 values%5#0)
        goto tmp%7#1 ? block@37 : block@39
    block@37: // and_contd_L84
        let values%7#0: uint64 = (extract_uint64 v#0 0u)
        let tmp%8#1: bool = (== values%0#1 values%7#0)
        goto tmp%8#1 ? block@38 : block@39
    block@38: // bool_true_L84
        let and_result%1#0: bool = 1u
        goto block@40
    block@39: // bool_false_L84
        let and_result%1#1: bool = 0u
        goto block@40
    block@40: // bool_merge_L84
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@38, and_result%1#1 <- block@39)
        (assert and_result%1#2) // assert target is match for conditions
        let tmp%9#1: bool = (> values%0#1 x#0)
        (assert tmp%9#1) // assert target is match for conditions
        let tmp%10#1: bool = (> values%3#1 x#0)
        (assert tmp%10#1) // assert target is match for conditions
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@21
    block@10: // testArc4Encoding_route_L89
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let p#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 p#0 8u)
        let values%1#0: uint64 = (extract_uint64 p#0 0u)
        let tmp%0#5: bool = (!= values%0#0 values%1#0)
        (assert tmp%0#5) // For the purpose of this test, a should not equal b
        let array%val_as_bytes%20#1: bytes[8] = (itob values%0#0)
        let array%val_as_bytes%21#1: bytes[8] = (itob values%1#0)
        let obj#0: Encoded(uint64,uint64) = (concat array%val_as_bytes%20#1 array%val_as_bytes%21#1)
        let length%0#0: uint64 = (len obj#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%2#1: bytes = (substring3 obj#0 bounded_index%0#0 length%0#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%0#0)
        let bounded_index%1#0: uint64 = (select 0u length%0#0 is_out_of_bounds%1#0)
        let tmp%3#1: bytes = (substring3 obj#0 bounded_index%1#0 bounded_index%0#0)
        let tmp%4#1: bytes = (concat tmp%2#1 tmp%3#1)
        let tmp%5#1: bool = (== p#0 tmp%4#1)
        (assert tmp%5#1) // Encoded order should be swapped
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@21
    block@11: // getPlugin_route_L104
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let box_prefixed_key%0#1: bytes = (concat "plugins" key#1)
        let (value#1: Encoded(uint64,uint64,uint64,bool1), maybe_exists%0#1: bool) = (box_get box_prefixed_key%0#1)
        (assert maybe_exists%0#1) // Box must have value
        let tmp%0#4: uint64 = (extract_uint64 value#1 16u)
        (assert tmp%0#4) // Last called not zero
        let tmp%48#0: bytes = (concat 0x151f7c75 value#1)
        (log tmp%48#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@21
    block@12: // getMain_route_L110
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        let (value#0: Encoded(uint64,uint64,uint64,bool1), maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let tmp%0#3: uint64 = (extract_uint64 value#0 16u)
        (assert tmp%0#3) // Last called not zero
        let tmp%54#0: bytes = (concat 0x151f7c75 value#0)
        (log tmp%54#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@21
    block@13: // setPlugin_route_L120
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_put box_prefixed_key%0#0 0x00000000000000010000000000000000000000000000000000)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@21
    block@16: // bare_routing_L12
        let tmp%60#0: uint64 = (txn OnCompletion)
        goto tmp%60#0 ? block@20 : block@17
    block@17: // __algots__.defaultCreate_L12
        let tmp%61#0: uint64 = (txn ApplicationID)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // can only call when creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11: bool = 1u
        goto block@21
    block@20: // after_if_else_L12
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12: bool = 0u
        goto block@21
    block@21: // after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6 <- block@40, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11 <- block@17, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12 <- block@20)
        return tmp%0#0