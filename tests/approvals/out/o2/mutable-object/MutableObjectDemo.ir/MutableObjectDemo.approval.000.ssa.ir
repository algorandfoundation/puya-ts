main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__() -> bool:
    block@0: // L12
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@15
    block@1: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@2, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@3, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@4, method "implicitCastingAndSpreading((uint64,uint64))void" => block@5, method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" => block@6, method "testMethodSelector()void" => block@7, method "testAssertMatch(uint64)void" => block@8, method "testArc4Encoding((uint64,uint64))void" => block@9, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@10, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@11, method "setPlugin(string)void" => block@12, * => block@13}
    block@2: // testVectorCreationAndEquality_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality()
        return 1u
    block@3: // addVectors_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let tmp%11#0: Encoded(uint64,uint64) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(reinterpret_Encoded(uint64,uint64)%0#0, reinterpret_Encoded(uint64,uint64)%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        return 1u
    block@4: // mutateVector_route_L28
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%18#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let tmp%19#0: Encoded(uint64,uint64) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(reinterpret_Encoded(uint64,uint64)%2#0, tmp%17#0, tmp%18#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
        (log tmp%20#0)
        return 1u
    block@5: // implicitCastingAndSpreading_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(reinterpret_Encoded(uint64,uint64)%3#0)
        return 1u
    block@6: // testNestedObjects_route_L49
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0)
        return 1u
    block@7: // testMethodSelector_route_L60
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testMethodSelector()
        return 1u
    block@8: // testAssertMatch_route_L72
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%37#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(tmp%37#0)
        return 1u
    block@9: // testArc4Encoding_route_L89
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%4#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(reinterpret_Encoded(uint64,uint64)%4#0)
        return 1u
    block@10: // getPlugin_route_L104
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%46#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%47#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(tmp%46#0)
        let tmp%48#0: bytes = (concat 0x151f7c75 tmp%47#0)
        (log tmp%48#0)
        return 1u
    block@11: // getMain_route_L110
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (== tmp%49#0 NoOp)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (!= tmp%51#0 0u)
        (assert tmp%52#0) // can only call when not creating
        let tmp%53#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain()
        let tmp%54#0: bytes = (concat 0x151f7c75 tmp%53#0)
        (log tmp%54#0)
        return 1u
    block@12: // setPlugin_route_L120
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (== tmp%55#0 NoOp)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        let tmp%58#0: bool = (!= tmp%57#0 0u)
        (assert tmp%58#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%59#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%1#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(tmp%59#0)
        return 1u
    block@13: // switch_case_default_L12
        goto block@14
    block@14: // switch_case_next_L12
        goto block@19
    block@15: // bare_routing_L12
        let tmp%60#0: uint64 = (txn OnCompletion)
        switch tmp%60#0 {0u => block@16, * => block@17}
    block@16: // __algots__.defaultCreate_L12
        let tmp%61#0: uint64 = (txn ApplicationID)
        let tmp%62#0: bool = (== tmp%61#0 0u)
        (assert tmp%62#0) // can only call when creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate()
        return 1u
    block@17: // switch_case_default_L12
        goto block@18
    block@18: // switch_case_next_L12
        goto block@19
    block@19: // after_if_else_L12
        return 0u

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality() -> void:
    block@0: // L13
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0u, 1u)
        let v1#0: Encoded(uint64,uint64) = tmp%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: bytes[8] = (itob values%0#0)
        (log tmp%1#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%2#0: bytes[8] = (itob values%1#0)
        (log tmp%2#0)
        let tmp%3#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0u, 1u)
        let v2#0: Encoded(uint64,uint64) = tmp%3#0
        let tuple_item%2#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(v2#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%4#0: bool = (== values%2#0 values%3#0)
        goto tmp%4#0 ? block@1 : block@3
    block@1: // and_contd_L18
        let tuple_item%4#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%4#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(v2#0, 1)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tmp%5#0: bool = (== values%4#0 values%5#0)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L18
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L18
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L18
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(v1: Encoded(uint64,uint64), v2: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L21
        let tuple_item%0#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(v2#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%0#0: uint64 = (+ values%0#0 values%1#0)
        let tuple_item%2#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(v2#0, 1)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%1#0: uint64 = (+ values%2#0 values%3#0)
        let tmp%2#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%0#0, tmp%1#0)
        return tmp%2#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(v1: Encoded(uint64,uint64), newX: uint64, newY: uint64) -> Encoded(uint64,uint64):
    block@0: // L28
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(newX#0)
        let updated_tuple%0#0: Encoded(uint64,uint64) = replace_value(v1#0, 0, encoded_value%0#0)
        let v1#1: Encoded(uint64,uint64) = updated_tuple%0#0
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(newY#0)
        let updated_tuple%1#0: Encoded(uint64,uint64) = replace_value(v1#1, 1, encoded_value%1#0)
        let v1#2: Encoded(uint64,uint64) = updated_tuple%1#0
        return v1#2

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(v1: Encoded(uint64,uint64)) -> void:
    block@0: // L34
        let v2#0: Encoded(uint64,uint64) = v1#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(v2#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(v2#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(values%0#0, values%1#0)
        let v3#0: Encoded(uint64,uint64) = tmp%0#0
        let tuple_item%2#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(v2#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%1#0: bool = (== values%2#0 values%3#0)
        (assert tmp%1#0)
        let tuple_item%4#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%4#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(v2#0, 1)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tmp%2#0: bool = (== values%4#0 values%5#0)
        (assert tmp%2#0)
        let tuple_item%6#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%6#0: uint64 = decode_bytes<uint64>(tuple_item%6#0)
        let tuple_item%7#0: Encoded(uint64) = extract_value(v2#0, 0)
        let values%7#0: uint64 = decode_bytes<uint64>(tuple_item%7#0)
        let tmp%3#0: bool = (== values%6#0 values%7#0)
        goto tmp%3#0 ? block@1 : block@3
    block@1: // and_contd_L39
        let tuple_item%8#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%8#0: uint64 = decode_bytes<uint64>(tuple_item%8#0)
        let tuple_item%9#0: Encoded(uint64) = extract_value(v2#0, 1)
        let values%9#0: uint64 = decode_bytes<uint64>(tuple_item%9#0)
        let tmp%4#0: bool = (== values%8#0 values%9#0)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // bool_true_L39
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L39
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L39
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let tuple_item%10#0: Encoded(uint64) = extract_value(v3#0, 0)
        let values%10#0: uint64 = decode_bytes<uint64>(tuple_item%10#0)
        let tuple_item%11#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%11#0: uint64 = decode_bytes<uint64>(tuple_item%11#0)
        let tmp%5#0: bool = (== values%10#0 values%11#0)
        (assert tmp%5#0)
        let tuple_item%12#0: Encoded(uint64) = extract_value(v3#0, 1)
        let values%12#0: uint64 = decode_bytes<uint64>(tuple_item%12#0)
        let tuple_item%13#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%13#0: uint64 = decode_bytes<uint64>(tuple_item%13#0)
        let tmp%6#0: bool = (== values%12#0 values%13#0)
        (assert tmp%6#0)
        let tuple_item%14#0: Encoded(uint64) = extract_value(v3#0, 0)
        let values%14#0: uint64 = decode_bytes<uint64>(tuple_item%14#0)
        let tuple_item%15#0: Encoded(uint64) = extract_value(v1#0, 0)
        let values%15#0: uint64 = decode_bytes<uint64>(tuple_item%15#0)
        let tmp%7#0: bool = (== values%14#0 values%15#0)
        goto tmp%7#0 ? block@5 : block@7
    block@5: // and_contd_L42
        let tuple_item%16#0: Encoded(uint64) = extract_value(v3#0, 1)
        let values%16#0: uint64 = decode_bytes<uint64>(tuple_item%16#0)
        let tuple_item%17#0: Encoded(uint64) = extract_value(v1#0, 1)
        let values%17#0: uint64 = decode_bytes<uint64>(tuple_item%17#0)
        let tmp%8#0: bool = (== values%16#0 values%17#0)
        goto tmp%8#0 ? block@6 : block@7
    block@6: // bool_true_L42
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L42
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L42
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // assert target is match for conditions
        let tuple_item%18#0: Encoded(uint64) = extract_value(v3#0, 0)
        let values%18#0: uint64 = decode_bytes<uint64>(tuple_item%18#0)
        let tuple_item%19#0: Encoded(uint64) = extract_value(v3#0, 1)
        let values%19#0: uint64 = decode_bytes<uint64>(tuple_item%19#0)
        let x#0: uint64 = values%18#0
        let y#0: uint64 = values%19#0
        let tuple_item%20#0: Encoded(uint64) = extract_value(v3#0, 0)
        let values%20#0: uint64 = decode_bytes<uint64>(tuple_item%20#0)
        let tmp%9#0: bool = (== x#0 values%20#0)
        (assert tmp%9#0)
        let tuple_item%21#0: Encoded(uint64) = extract_value(v3#0, 1)
        let values%21#0: uint64 = decode_bytes<uint64>(tuple_item%21#0)
        let tmp%10#0: bool = (== y#0 values%21#0)
        (assert tmp%10#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(vp: Encoded((uint64,uint64),(uint64,uint64))) -> void:
    block@0: // L49
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(vp#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(tuple_item%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64,uint64) = extract_value(vp#0, 0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(tuple_item%2#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(values%0#0, values%1#0)
        let v1#0: Encoded(uint64,uint64) = tmp%0#0
        let tuple_item%4#0: Encoded(uint64,uint64) = extract_value(vp#0, 1)
        let tuple_item%5#0: Encoded(uint64) = extract_value(tuple_item%4#0, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tuple_item%6#0: Encoded(uint64,uint64) = extract_value(vp#0, 1)
        let tuple_item%7#0: Encoded(uint64) = extract_value(tuple_item%6#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%7#0)
        let tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(values%2#0, values%3#0)
        let p1#0: Encoded(uint64,uint64) = tmp%1#0
        let tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = bytes_encode<((uint64,uint64),(uint64,uint64))>(v1#0, p1#0)
        let vp1#0: Encoded((uint64,uint64),(uint64,uint64)) = tmp%2#0
        let tuple_item%8#0: Encoded(uint64,uint64) = extract_value(vp1#0, 0)
        let tuple_item%9#0: Encoded(uint64) = extract_value(tuple_item%8#0, 0)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%9#0)
        let tmp%3#0: bytes[8] = (itob values%4#0)
        (log tmp%3#0)
        let tuple_item%10#0: Encoded(uint64,uint64) = extract_value(vp1#0, 0)
        let tuple_item%11#0: Encoded(uint64) = extract_value(tuple_item%10#0, 1)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%11#0)
        let tmp%4#0: bytes[8] = (itob values%5#0)
        (log tmp%4#0)
        let tuple_item%12#0: Encoded(uint64,uint64) = extract_value(vp1#0, 1)
        let tuple_item%13#0: Encoded(uint64) = extract_value(tuple_item%12#0, 0)
        let values%6#0: uint64 = decode_bytes<uint64>(tuple_item%13#0)
        let tmp%5#0: bytes[8] = (itob values%6#0)
        (log tmp%5#0)
        let tuple_item%14#0: Encoded(uint64,uint64) = extract_value(vp1#0, 1)
        let tuple_item%15#0: Encoded(uint64) = extract_value(tuple_item%14#0, 1)
        let values%7#0: uint64 = decode_bytes<uint64>(tuple_item%15#0)
        let tmp%6#0: bytes[8] = (itob values%7#0)
        (log tmp%6#0)
        let tuple_item%16#0: Encoded(uint64,uint64) = extract_value(vp1#0, 0)
        let tuple_item%17#0: Encoded(uint64) = extract_value(tuple_item%16#0, 0)
        let values%8#0: uint64 = decode_bytes<uint64>(tuple_item%17#0)
        let tuple_item%18#0: Encoded(uint64,uint64) = extract_value(vp#0, 0)
        let tuple_item%19#0: Encoded(uint64) = extract_value(tuple_item%18#0, 0)
        let values%9#0: uint64 = decode_bytes<uint64>(tuple_item%19#0)
        let tmp%7#0: bool = (== values%8#0 values%9#0)
        goto tmp%7#0 ? block@1 : block@5
    block@1: // and_contd_L57
        let tuple_item%20#0: Encoded(uint64,uint64) = extract_value(vp1#0, 0)
        let tuple_item%21#0: Encoded(uint64) = extract_value(tuple_item%20#0, 1)
        let values%10#0: uint64 = decode_bytes<uint64>(tuple_item%21#0)
        let tuple_item%22#0: Encoded(uint64,uint64) = extract_value(vp#0, 0)
        let tuple_item%23#0: Encoded(uint64) = extract_value(tuple_item%22#0, 1)
        let values%11#0: uint64 = decode_bytes<uint64>(tuple_item%23#0)
        let tmp%8#0: bool = (== values%10#0 values%11#0)
        goto tmp%8#0 ? block@2 : block@5
    block@2: // and_contd_L57
        let tuple_item%24#0: Encoded(uint64,uint64) = extract_value(vp1#0, 1)
        let tuple_item%25#0: Encoded(uint64) = extract_value(tuple_item%24#0, 1)
        let values%12#0: uint64 = decode_bytes<uint64>(tuple_item%25#0)
        let tuple_item%26#0: Encoded(uint64,uint64) = extract_value(vp#0, 1)
        let tuple_item%27#0: Encoded(uint64) = extract_value(tuple_item%26#0, 0)
        let values%13#0: uint64 = decode_bytes<uint64>(tuple_item%27#0)
        let tmp%9#0: bool = (== values%12#0 values%13#0)
        goto tmp%9#0 ? block@3 : block@5
    block@3: // and_contd_L57
        let tuple_item%28#0: Encoded(uint64,uint64) = extract_value(vp1#0, 1)
        let tuple_item%29#0: Encoded(uint64) = extract_value(tuple_item%28#0, 0)
        let values%14#0: uint64 = decode_bytes<uint64>(tuple_item%29#0)
        let tuple_item%30#0: Encoded(uint64,uint64) = extract_value(vp#0, 1)
        let tuple_item%31#0: Encoded(uint64) = extract_value(tuple_item%30#0, 1)
        let values%15#0: uint64 = decode_bytes<uint64>(tuple_item%31#0)
        let tmp%10#0: bool = (== values%14#0 values%15#0)
        goto tmp%10#0 ? block@4 : block@5
    block@4: // bool_true_L57
        let and_result%0#0: bool = 1u
        goto block@6
    block@5: // bool_false_L57
        let and_result%0#1: bool = 0u
        goto block@6
    block@6: // bool_merge_L57
        let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testMethodSelector() -> void:
    block@0: // L60
        let tmp%0#0: bool = (== method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)")
        (assert tmp%0#0)
        let tmp%1#0: bool = (== method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" method "getPlugin(string)(uint64,uint64,uint64,bool)")
        (assert tmp%1#0)
        let tmp%2#0: bool = (== method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void")
        (assert tmp%2#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(x: uint64) -> void:
    block@0: // L72
        let awst_tmp%0#0: uint64 = (* x#0 2u)
        let b#0: uint64 = awst_tmp%0#0
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(b#0, b#0)
        let obj#0: Encoded(uint64,uint64) = tmp%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(obj#0, 1)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: uint64 = (* x#0 2u)
        let tmp%2#0: bool = (== values%0#0 tmp%1#0)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // and_contd_L78
        let tuple_item%1#0: Encoded(uint64) = extract_value(obj#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%3#0: uint64 = (* x#0 2u)
        let tmp%4#0: bool = (== values%1#0 tmp%3#0)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // bool_true_L78
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L78
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L78
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let tuple_item%2#0: Encoded(uint64) = extract_value(obj#0, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(obj#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%5#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(values%2#0, values%3#0)
        let v#0: Encoded(uint64,uint64) = tmp%5#0
        let tuple_item%4#0: Encoded(uint64) = extract_value(obj#0, 0)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%4#0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(v#0, 1)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tmp%6#0: bool = (== values%4#0 values%5#0)
        goto tmp%6#0 ? block@5 : block@7
    block@5: // and_contd_L84
        let tuple_item%6#0: Encoded(uint64) = extract_value(obj#0, 1)
        let values%6#0: uint64 = decode_bytes<uint64>(tuple_item%6#0)
        let tuple_item%7#0: Encoded(uint64) = extract_value(v#0, 0)
        let values%7#0: uint64 = decode_bytes<uint64>(tuple_item%7#0)
        let tmp%7#0: bool = (== values%6#0 values%7#0)
        goto tmp%7#0 ? block@6 : block@7
    block@6: // bool_true_L84
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L84
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L84
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // assert target is match for conditions
        let tuple_item%8#0: Encoded(uint64) = extract_value(obj#0, 1)
        let values%8#0: uint64 = decode_bytes<uint64>(tuple_item%8#0)
        let tmp%8#0: bool = (> values%8#0 x#0)
        (assert tmp%8#0) // assert target is match for conditions
        let tuple_item%9#0: Encoded(uint64) = extract_value(obj#0, 0)
        let values%9#0: uint64 = decode_bytes<uint64>(tuple_item%9#0)
        let tmp%9#0: bool = (> values%9#0 x#0)
        (assert tmp%9#0) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(p: Encoded(uint64,uint64)) -> void:
    block@0: // L89
        let tuple_item%0#0: Encoded(uint64) = extract_value(p#0, 1)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(p#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%0#0: bool = (!= values%0#0 values%1#0)
        (assert tmp%0#0) // For the purpose of this test, a should not equal b
        let tuple_item%2#0: Encoded(uint64) = extract_value(p#0, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(p#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(values%2#0, values%3#0)
        let obj#0: Encoded(uint64,uint64) = tmp%1#0
        let awst_tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(p#0)
        let pEncoded#0: bytes = awst_tmp%0#0
        let awst_tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(obj#0)
        let objEncoded#0: bytes = awst_tmp%1#0
        let length%0#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%2#0: bytes = (substring3 objEncoded#0 bounded_index%0#0 length%0#0)
        let length%1#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%1#0)
        let bounded_index%1#0: uint64 = (select 0u length%1#0 is_out_of_bounds%1#0)
        let is_out_of_bounds%2#0: bool = (>= 8u length%1#0)
        let bounded_index%2#0: uint64 = (select 8u length%1#0 is_out_of_bounds%2#0)
        let tmp%3#0: bytes = (substring3 objEncoded#0 bounded_index%1#0 bounded_index%2#0)
        let tmp%4#0: bytes = (concat tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (== pEncoded#0 tmp%4#0)
        (assert tmp%5#0) // Encoded order should be swapped
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(key: string) -> Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])):
    block@0: // L104
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = storage_value%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(value#0, 2)
        let tmp%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain() -> Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])):
    block@0: // L110
        let storage_value%0#0: bytes = box_read("main")
        let value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = storage_value%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(value#0, 2)
        let tmp%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: string) -> void:
    block@0: // L120
        let tmp%0#0: Encoded(bool8) = bytes_encode<bool8>(0u)
        let tmp%1#0: Encoded(uint8[4]) = bytes_encode<uint8[4]>(method "test()void")
        let tmp%2#0: Encoded(uint8[4],uint64,uint64) = bytes_encode<(uint8[4],uint64,uint64)>(tmp%1#0, 0x0000000000000001, 0x0000000000000001)
        let encoded_array%0#0: Encoded(len+(uint8[4],uint64,uint64)[]) = bytes_encode<(len+(uint8[4],uint64,uint64)[])>(tmp%2#0)
        let tmp%3#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = bytes_encode<(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[]))>(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, tmp%0#0, encoded_array%0#0)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        box_write(box_prefixed_key%0#0, tmp%3#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__algots__.defaultCreate() -> void:
    block@0: // L12
        return 