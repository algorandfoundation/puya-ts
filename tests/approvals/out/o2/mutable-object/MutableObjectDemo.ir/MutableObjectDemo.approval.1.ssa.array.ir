main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" => block@7, method "testMethodSelector()void" => block@8, method "testAssertMatch(uint64)void" => block@9, method "testArc4Encoding((uint64,uint64))void" => block@10, method "getPlugin(string)(uint64,uint64,uint64,bool)" => block@11, method "getMain()(uint64,uint64,uint64,bool)" => block@12, method "setPlugin(string)void" => block@13, * => block@20}
    block@3: // testVectorCreationAndEquality_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let v1#6: Encoded(uint64,uint64) = array%encoded%2#1
        let array%extract%0#1: bytes = (extract3 v1#6 0u 8u)
        let tuple_item%0#7: Encoded(uint64) = array%extract%0#1
        let values%0#5: uint64 = (btoi tuple_item%0#7)
        let tmp%1#6: bytes[8] = (itob values%0#5)
        (log tmp%1#6)
        let array%extract%1#1: bytes = (extract3 v1#6 8u 8u)
        let tuple_item%1#5: Encoded(uint64) = array%extract%1#1
        let values%1#5: uint64 = (btoi tuple_item%1#5)
        let tmp%2#5: bytes[8] = (itob values%1#5)
        (log tmp%2#5)
        let array%val_as_bytes%2#1: bytes[8] = (itob 0u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 array%as_Encoded(uint64)%3#1)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let v2#2: Encoded(uint64,uint64) = array%encoded%5#1
        let tmp%4#4: bool = (== v1#6 v2#2)
        (assert tmp%4#4)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@21
    block@4: // addVectors_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let v1#5: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let v2#1: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let array%extract%2#1: bytes = (extract3 v1#5 0u 8u)
        let tuple_item%0#6: Encoded(uint64) = array%extract%2#1
        let values%0#4: uint64 = (btoi tuple_item%0#6)
        let array%extract%3#1: bytes = (extract3 v2#1 0u 8u)
        let tuple_item%1#4: Encoded(uint64) = array%extract%3#1
        let values%1#4: uint64 = (btoi tuple_item%1#4)
        let tmp%0#7: uint64 = (+ values%0#4 values%1#4)
        let array%extract%4#1: bytes = (extract3 v1#5 8u 8u)
        let tuple_item%2#4: Encoded(uint64) = array%extract%4#1
        let values%2#4: uint64 = (btoi tuple_item%2#4)
        let array%extract%5#1: bytes = (extract3 v2#1 8u 8u)
        let tuple_item%3#4: Encoded(uint64) = array%extract%5#1
        let values%3#4: uint64 = (btoi tuple_item%3#4)
        let tmp%1#5: uint64 = (+ values%2#4 values%3#4)
        let array%val_as_bytes%4#1: bytes[8] = (itob tmp%0#7)
        let array%as_Encoded(uint64)%4#1: Encoded(uint64) = array%val_as_bytes%4#1
        let array%encoded%6#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%4#1)
        let array%val_as_bytes%5#1: bytes[8] = (itob tmp%1#5)
        let array%as_Encoded(uint64)%5#1: Encoded(uint64) = array%val_as_bytes%5#1
        let array%encoded%7#1: Encoded(uint64,uint64) = (concat array%encoded%6#1 array%as_Encoded(uint64)%5#1)
        let array%encoded%8#1: Encoded(uint64,uint64) = (concat array%encoded%7#1 0x)
        let tmp%2#4: Encoded(uint64,uint64) = array%encoded%8#1
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%2#4)
        (log tmp%12#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@21
    block@5: // mutateVector_route_L28
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let v1#2: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let newX#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let newY#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let array%val_as_bytes%6#1: bytes[8] = (itob newX#0)
        let array%as_Encoded(uint64)%6#1: Encoded(uint64) = array%val_as_bytes%6#1
        let encoded_value%0#0: Encoded(uint64) = array%as_Encoded(uint64)%6#1
        let array%extract%6#1: bytes = (extract3 v1#2 0u 8u)
        let array%updated_data%0#1: bytes = (replace3 v1#2 0u encoded_value%0#0)
        let v1#3: Encoded(uint64,uint64) = array%updated_data%0#1
        let array%val_as_bytes%7#1: bytes[8] = (itob newY#0)
        let array%as_Encoded(uint64)%7#1: Encoded(uint64) = array%val_as_bytes%7#1
        let encoded_value%1#0: Encoded(uint64) = array%as_Encoded(uint64)%7#1
        let array%extract%7#1: bytes = (extract3 v1#3 8u 8u)
        let array%updated_data%1#1: bytes = (replace3 v1#3 8u encoded_value%1#0)
        let v1#4: Encoded(uint64,uint64) = array%updated_data%1#1
        let tmp%20#0: bytes = (concat 0x151f7c75 v1#4)
        (log tmp%20#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@21
    block@6: // implicitCastingAndSpreading_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let v1#1: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%extract%8#1: bytes = (extract3 v1#1 0u 8u)
        let tuple_item%0#5: Encoded(uint64) = array%extract%8#1
        let values%0#3: uint64 = (btoi tuple_item%0#5)
        let array%extract%9#1: bytes = (extract3 v1#1 8u 8u)
        let tuple_item%1#3: Encoded(uint64) = array%extract%9#1
        let values%1#3: uint64 = (btoi tuple_item%1#3)
        let array%val_as_bytes%8#1: bytes[8] = (itob values%0#3)
        let array%as_Encoded(uint64)%8#1: Encoded(uint64) = array%val_as_bytes%8#1
        let array%encoded%9#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%8#1)
        let array%val_as_bytes%9#1: bytes[8] = (itob values%1#3)
        let array%as_Encoded(uint64)%9#1: Encoded(uint64) = array%val_as_bytes%9#1
        let array%encoded%10#1: Encoded(uint64,uint64) = (concat array%encoded%9#1 array%as_Encoded(uint64)%9#1)
        let array%encoded%11#1: Encoded(uint64,uint64) = (concat array%encoded%10#1 0x)
        let v2#0: Encoded(uint64,uint64) = array%encoded%11#1
        let array%extract%10#1: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%2#3: Encoded(uint64) = array%extract%10#1
        let values%2#3: uint64 = (btoi tuple_item%2#3)
        let array%extract%11#1: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%3#3: Encoded(uint64) = array%extract%11#1
        let values%3#3: uint64 = (btoi tuple_item%3#3)
        let array%val_as_bytes%10#1: bytes[8] = (itob values%2#3)
        let array%as_Encoded(uint64)%10#1: Encoded(uint64) = array%val_as_bytes%10#1
        let array%encoded%12#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%10#1)
        let array%val_as_bytes%11#1: bytes[8] = (itob values%3#3)
        let array%as_Encoded(uint64)%11#1: Encoded(uint64) = array%val_as_bytes%11#1
        let array%encoded%13#1: Encoded(uint64,uint64) = (concat array%encoded%12#1 array%as_Encoded(uint64)%11#1)
        let array%encoded%14#1: Encoded(uint64,uint64) = (concat array%encoded%13#1 0x)
        let v3#0: Encoded(uint64,uint64) = array%encoded%14#1
        let array%extract%12#1: bytes = (extract3 v1#1 0u 8u)
        let tuple_item%4#2: Encoded(uint64) = array%extract%12#1
        let values%4#2: uint64 = (btoi tuple_item%4#2)
        let array%extract%13#1: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%5#2: Encoded(uint64) = array%extract%13#1
        let values%5#2: uint64 = (btoi tuple_item%5#2)
        let tmp%2#3: bool = (== values%4#2 values%5#2)
        (assert tmp%2#3)
        let array%extract%14#1: bytes = (extract3 v1#1 8u 8u)
        let tuple_item%6#2: Encoded(uint64) = array%extract%14#1
        let values%6#2: uint64 = (btoi tuple_item%6#2)
        let array%extract%15#1: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%7#2: Encoded(uint64) = array%extract%15#1
        let values%7#2: uint64 = (btoi tuple_item%7#2)
        let tmp%3#4: bool = (== values%6#2 values%7#2)
        (assert tmp%3#4)
        let tmp%4#3: bool = (== v1#1 v2#0)
        (assert tmp%4#3)
        let array%extract%16#1: bytes = (extract3 v3#0 0u 8u)
        let tuple_item%8#2: Encoded(uint64) = array%extract%16#1
        let values%8#1: uint64 = (btoi tuple_item%8#2)
        let array%extract%17#1: bytes = (extract3 v1#1 0u 8u)
        let tuple_item%9#2: Encoded(uint64) = array%extract%17#1
        let values%9#1: uint64 = (btoi tuple_item%9#2)
        let tmp%5#4: bool = (== values%8#1 values%9#1)
        (assert tmp%5#4)
        let array%extract%18#1: bytes = (extract3 v3#0 8u 8u)
        let tuple_item%10#1: Encoded(uint64) = array%extract%18#1
        let values%10#0: uint64 = (btoi tuple_item%10#1)
        let array%extract%19#1: bytes = (extract3 v1#1 8u 8u)
        let tuple_item%11#1: Encoded(uint64) = array%extract%19#1
        let values%11#0: uint64 = (btoi tuple_item%11#1)
        let tmp%6#2: bool = (== values%10#0 values%11#0)
        (assert tmp%6#2)
        let tmp%7#3: bool = (== v3#0 v1#1)
        (assert tmp%7#3)
        let array%extract%20#1: bytes = (extract3 v3#0 0u 8u)
        let tuple_item%12#1: Encoded(uint64) = array%extract%20#1
        let x#1: uint64 = (btoi tuple_item%12#1)
        let array%extract%21#1: bytes = (extract3 v3#0 8u 8u)
        let tuple_item%13#1: Encoded(uint64) = array%extract%21#1
        let y#0: uint64 = (btoi tuple_item%13#1)
        let array%extract%22#1: bytes = (extract3 v3#0 0u 8u)
        let tuple_item%14#1: Encoded(uint64) = array%extract%22#1
        let values%14#0: uint64 = (btoi tuple_item%14#1)
        let tmp%8#2: bool = (== x#1 values%14#0)
        (assert tmp%8#2)
        let array%extract%23#1: bytes = (extract3 v3#0 8u 8u)
        let tuple_item%15#1: Encoded(uint64) = array%extract%23#1
        let values%15#0: uint64 = (btoi tuple_item%15#1)
        let tmp%9#2: bool = (== y#0 values%15#0)
        (assert tmp%9#2)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@21
    block@7: // testNestedObjects_route_L49
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let vp#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let array%extract%24#1: bytes = (extract3 vp#0 0u 16u)
        let tuple_item%0#4: Encoded(uint64,uint64) = array%extract%24#1
        let array%extract%25#1: bytes = (extract3 vp#0 0u 16u)
        let array%extract%26#1: bytes = (extract3 array%extract%25#1 0u 8u)
        let tuple_item%1#2: Encoded(uint64) = array%extract%26#1
        let values%0#2: uint64 = (btoi tuple_item%1#2)
        let array%extract%27#1: bytes = (extract3 vp#0 0u 16u)
        let tuple_item%2#2: Encoded(uint64,uint64) = array%extract%27#1
        let array%extract%28#1: bytes = (extract3 vp#0 0u 16u)
        let array%extract%29#1: bytes = (extract3 array%extract%28#1 8u 8u)
        let tuple_item%3#2: Encoded(uint64) = array%extract%29#1
        let values%1#2: uint64 = (btoi tuple_item%3#2)
        let array%val_as_bytes%12#1: bytes[8] = (itob values%0#2)
        let array%as_Encoded(uint64)%12#1: Encoded(uint64) = array%val_as_bytes%12#1
        let array%encoded%15#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%12#1)
        let array%val_as_bytes%13#1: bytes[8] = (itob values%1#2)
        let array%as_Encoded(uint64)%13#1: Encoded(uint64) = array%val_as_bytes%13#1
        let array%encoded%16#1: Encoded(uint64,uint64) = (concat array%encoded%15#1 array%as_Encoded(uint64)%13#1)
        let array%encoded%17#1: Encoded(uint64,uint64) = (concat array%encoded%16#1 0x)
        let v1#0: Encoded(uint64,uint64) = array%encoded%17#1
        let array%extract%30#1: bytes = (extract3 vp#0 16u 16u)
        let tuple_item%4#1: Encoded(uint64,uint64) = array%extract%30#1
        let array%extract%31#1: bytes = (extract3 vp#0 16u 16u)
        let array%extract%32#1: bytes = (extract3 array%extract%31#1 8u 8u)
        let tuple_item%5#1: Encoded(uint64) = array%extract%32#1
        let values%2#2: uint64 = (btoi tuple_item%5#1)
        let array%extract%33#1: bytes = (extract3 vp#0 16u 16u)
        let tuple_item%6#1: Encoded(uint64,uint64) = array%extract%33#1
        let array%extract%34#1: bytes = (extract3 vp#0 16u 16u)
        let array%extract%35#1: bytes = (extract3 array%extract%34#1 0u 8u)
        let tuple_item%7#1: Encoded(uint64) = array%extract%35#1
        let values%3#2: uint64 = (btoi tuple_item%7#1)
        let array%val_as_bytes%14#1: bytes[8] = (itob values%3#2)
        let array%as_Encoded(uint64)%14#1: Encoded(uint64) = array%val_as_bytes%14#1
        let array%encoded%18#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%14#1)
        let array%val_as_bytes%15#1: bytes[8] = (itob values%2#2)
        let array%as_Encoded(uint64)%15#1: Encoded(uint64) = array%val_as_bytes%15#1
        let array%encoded%19#1: Encoded(uint64,uint64) = (concat array%encoded%18#1 array%as_Encoded(uint64)%15#1)
        let array%encoded%20#1: Encoded(uint64,uint64) = (concat array%encoded%19#1 0x)
        let p1#0: Encoded(uint64,uint64) = array%encoded%20#1
        let array%encoded%21#1: Encoded((uint64,uint64)) = (concat 0x v1#0)
        let array%encoded%22#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%21#1 p1#0)
        let array%encoded%23#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%22#1 0x)
        let vp1#0: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%23#1
        let array%extract%36#1: bytes = (extract3 vp1#0 0u 16u)
        let tuple_item%8#1: Encoded(uint64,uint64) = array%extract%36#1
        let array%extract%37#1: bytes = (extract3 vp1#0 0u 16u)
        let array%extract%38#1: bytes = (extract3 array%extract%37#1 0u 8u)
        let tuple_item%9#1: Encoded(uint64) = array%extract%38#1
        let values%4#1: uint64 = (btoi tuple_item%9#1)
        let tmp%3#3: bytes[8] = (itob values%4#1)
        (log tmp%3#3)
        let array%extract%39#1: bytes = (extract3 vp1#0 0u 16u)
        let tuple_item%10#0: Encoded(uint64,uint64) = array%extract%39#1
        let array%extract%40#1: bytes = (extract3 vp1#0 0u 16u)
        let array%extract%41#1: bytes = (extract3 array%extract%40#1 8u 8u)
        let tuple_item%11#0: Encoded(uint64) = array%extract%41#1
        let values%5#1: uint64 = (btoi tuple_item%11#0)
        let tmp%4#2: bytes[8] = (itob values%5#1)
        (log tmp%4#2)
        let array%extract%42#1: bytes = (extract3 vp1#0 16u 16u)
        let tuple_item%12#0: Encoded(uint64,uint64) = array%extract%42#1
        let array%extract%43#1: bytes = (extract3 vp1#0 16u 16u)
        let array%extract%44#1: bytes = (extract3 array%extract%43#1 8u 8u)
        let tuple_item%13#0: Encoded(uint64) = array%extract%44#1
        let values%6#1: uint64 = (btoi tuple_item%13#0)
        let tmp%5#3: bytes[8] = (itob values%6#1)
        (log tmp%5#3)
        let array%extract%45#1: bytes = (extract3 vp1#0 16u 16u)
        let tuple_item%14#0: Encoded(uint64,uint64) = array%extract%45#1
        let array%extract%46#1: bytes = (extract3 vp1#0 16u 16u)
        let array%extract%47#1: bytes = (extract3 array%extract%46#1 0u 8u)
        let tuple_item%15#0: Encoded(uint64) = array%extract%47#1
        let values%7#1: uint64 = (btoi tuple_item%15#0)
        let tmp%6#1: bytes[8] = (itob values%7#1)
        (log tmp%6#1)
        let tmp%7#2: bool = (== vp1#0 vp#0)
        (assert tmp%7#2)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@21
    block@8: // testMethodSelector_route_L60
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@21
    block@9: // testAssertMatch_route_L72
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let b#0: uint64 = (* x#0 2u)
        let array%val_as_bytes%16#1: bytes[8] = (itob b#0)
        let array%as_Encoded(uint64)%16#1: Encoded(uint64) = array%val_as_bytes%16#1
        let array%encoded%24#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%16#1)
        let array%val_as_bytes%17#1: bytes[8] = (itob b#0)
        let array%as_Encoded(uint64)%17#1: Encoded(uint64) = array%val_as_bytes%17#1
        let array%encoded%25#1: Encoded(uint64,uint64) = (concat array%encoded%24#1 array%as_Encoded(uint64)%17#1)
        let array%encoded%26#1: Encoded(uint64,uint64) = (concat array%encoded%25#1 0x)
        let obj#1: Encoded(uint64,uint64) = array%encoded%26#1
        let array%extract%48#1: bytes = (extract3 obj#1 8u 8u)
        let tuple_item%0#3: Encoded(uint64) = array%extract%48#1
        let values%0#1: uint64 = (btoi tuple_item%0#3)
        let tmp%3#2: bool = (== values%0#1 b#0)
        goto tmp%3#2 ? block@33 : block@35
    block@33: // and_contd_L78
        let array%extract%49#1: bytes = (extract3 obj#1 0u 8u)
        let tuple_item%1#1: Encoded(uint64) = array%extract%49#1
        let values%1#1: uint64 = (btoi tuple_item%1#1)
        let tmp%5#2: bool = (== values%1#1 b#0)
        goto tmp%5#2 ? block@34 : block@35
    block@34: // bool_true_L78
        let and_result%0#0: bool = 1u
        goto block@36
    block@35: // bool_false_L78
        let and_result%0#1: bool = 0u
        goto block@36
    block@36: // bool_merge_L78
        let and_result%0#2: bool = φ(and_result%0#0 <- block@34, and_result%0#1 <- block@35)
        (assert and_result%0#2) // assert target is match for conditions
        let array%extract%50#1: bytes = (extract3 obj#1 8u 8u)
        let tuple_item%2#1: Encoded(uint64) = array%extract%50#1
        let values%2#1: uint64 = (btoi tuple_item%2#1)
        let array%extract%51#1: bytes = (extract3 obj#1 0u 8u)
        let tuple_item%3#1: Encoded(uint64) = array%extract%51#1
        let values%3#1: uint64 = (btoi tuple_item%3#1)
        let array%val_as_bytes%18#1: bytes[8] = (itob values%2#1)
        let array%as_Encoded(uint64)%18#1: Encoded(uint64) = array%val_as_bytes%18#1
        let array%encoded%27#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%18#1)
        let array%val_as_bytes%19#1: bytes[8] = (itob values%3#1)
        let array%as_Encoded(uint64)%19#1: Encoded(uint64) = array%val_as_bytes%19#1
        let array%encoded%28#1: Encoded(uint64,uint64) = (concat array%encoded%27#1 array%as_Encoded(uint64)%19#1)
        let array%encoded%29#1: Encoded(uint64,uint64) = (concat array%encoded%28#1 0x)
        let v#0: Encoded(uint64,uint64) = array%encoded%29#1
        let array%extract%52#1: bytes = (extract3 obj#1 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = array%extract%52#1
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let array%extract%53#1: bytes = (extract3 v#0 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = array%extract%53#1
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let tmp%7#1: bool = (== values%4#0 values%5#0)
        goto tmp%7#1 ? block@37 : block@39
    block@37: // and_contd_L84
        let array%extract%54#1: bytes = (extract3 obj#1 8u 8u)
        let tuple_item%6#0: Encoded(uint64) = array%extract%54#1
        let values%6#0: uint64 = (btoi tuple_item%6#0)
        let array%extract%55#1: bytes = (extract3 v#0 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = array%extract%55#1
        let values%7#0: uint64 = (btoi tuple_item%7#0)
        let tmp%8#1: bool = (== values%6#0 values%7#0)
        goto tmp%8#1 ? block@38 : block@39
    block@38: // bool_true_L84
        let and_result%1#0: bool = 1u
        goto block@40
    block@39: // bool_false_L84
        let and_result%1#1: bool = 0u
        goto block@40
    block@40: // bool_merge_L84
        let and_result%1#2: bool = φ(and_result%1#0 <- block@38, and_result%1#1 <- block@39)
        (assert and_result%1#2) // assert target is match for conditions
        let array%extract%56#1: bytes = (extract3 obj#1 8u 8u)
        let tuple_item%8#0: Encoded(uint64) = array%extract%56#1
        let values%8#0: uint64 = (btoi tuple_item%8#0)
        let tmp%9#1: bool = (> values%8#0 x#0)
        (assert tmp%9#1) // assert target is match for conditions
        let array%extract%57#1: bytes = (extract3 obj#1 0u 8u)
        let tuple_item%9#0: Encoded(uint64) = array%extract%57#1
        let values%9#0: uint64 = (btoi tuple_item%9#0)
        let tmp%10#1: bool = (> values%9#0 x#0)
        (assert tmp%10#1) // assert target is match for conditions
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@21
    block@10: // testArc4Encoding_route_L89
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let p#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%extract%58#1: bytes = (extract3 p#0 8u 8u)
        let tuple_item%0#2: Encoded(uint64) = array%extract%58#1
        let values%0#0: uint64 = (btoi tuple_item%0#2)
        let array%extract%59#1: bytes = (extract3 p#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%59#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#5: bool = (!= values%0#0 values%1#0)
        (assert tmp%0#5) // For the purpose of this test, a should not equal b
        let array%extract%60#1: bytes = (extract3 p#0 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = array%extract%60#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let array%extract%61#1: bytes = (extract3 p#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = array%extract%61#1
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let array%val_as_bytes%20#1: bytes[8] = (itob values%2#0)
        let array%as_Encoded(uint64)%20#1: Encoded(uint64) = array%val_as_bytes%20#1
        let array%encoded%30#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%20#1)
        let array%val_as_bytes%21#1: bytes[8] = (itob values%3#0)
        let array%as_Encoded(uint64)%21#1: Encoded(uint64) = array%val_as_bytes%21#1
        let array%encoded%31#1: Encoded(uint64,uint64) = (concat array%encoded%30#1 array%as_Encoded(uint64)%21#1)
        let array%encoded%32#1: Encoded(uint64,uint64) = (concat array%encoded%31#1 0x)
        let obj#0: Encoded(uint64,uint64) = array%encoded%32#1
        let length%0#0: uint64 = (len obj#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%2#1: bytes = (substring3 obj#0 bounded_index%0#0 length%0#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%0#0)
        let bounded_index%1#0: uint64 = (select 0u length%0#0 is_out_of_bounds%1#0)
        let tmp%3#1: bytes = (substring3 obj#0 bounded_index%1#0 bounded_index%0#0)
        let tmp%4#1: bytes = (concat tmp%2#1 tmp%3#1)
        let tmp%5#1: bool = (== p#0 tmp%4#1)
        (assert tmp%5#1) // Encoded order should be swapped
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@21
    block@11: // getPlugin_route_L104
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let box_prefixed_key%0#1: bytes = (concat "plugins" key#1)
        let (value#1: Encoded(uint64,uint64,uint64,bool1), maybe_exists%0#1: bool) = (box_get box_prefixed_key%0#1)
        (assert maybe_exists%0#1) // Box must have value
        let array%extract%62#1: bytes = (extract3 value#1 16u 8u)
        let tuple_item%0#1: Encoded(uint64) = array%extract%62#1
        let tmp%0#4: uint64 = (btoi tuple_item%0#1)
        (assert tmp%0#4) // Last called not zero
        let tmp%48#0: bytes = (concat 0x151f7c75 value#1)
        (log tmp%48#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@21
    block@12: // getMain_route_L110
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        let (value#0: Encoded(uint64,uint64,uint64,bool1), maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let array%extract%63#1: bytes = (extract3 value#0 16u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%63#1
        let tmp%0#3: uint64 = (btoi tuple_item%0#0)
        (assert tmp%0#3) // Last called not zero
        let tmp%54#0: bytes = (concat 0x151f7c75 value#0)
        (log tmp%54#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@21
    block@13: // setPlugin_route_L120
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let array%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 0u)
        let array%as_Encoded(bool8)%0#1: Encoded(bool8) = array%encoded_bool%0#1
        let tmp%0#2: Encoded(bool8) = array%as_Encoded(bool8)%0#1
        let array%encoded%33#1: Encoded(uint64) = (concat 0x 0x0000000000000001)
        let array%encoded%34#1: Encoded(uint64,uint64) = (concat array%encoded%33#1 0x0000000000000000)
        let array%encoded%35#1: Encoded(uint64,uint64,uint64) = (concat array%encoded%34#1 0x0000000000000000)
        let array%encoded%36#1: Encoded(uint64,uint64,uint64,bool1) = (concat array%encoded%35#1 tmp%0#2)
        let array%encoded%37#1: Encoded(uint64,uint64,uint64,bool1) = (concat array%encoded%36#1 0x)
        let tmp%1#1: Encoded(uint64,uint64,uint64,bool1) = array%encoded%37#1
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_put box_prefixed_key%0#0 tmp%1#1)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@21
    block@16: // bare_routing_L12
        let tmp%60#0: uint64 = (txn OnCompletion)
        goto tmp%60#0 ? block@20 : block@17
    block@17: // __algots__.defaultCreate_L12
        let tmp%61#0: uint64 = (txn ApplicationID)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // can only call when creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11: bool = 1u
        goto block@21
    block@20: // after_if_else_L12
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12: bool = 0u
        goto block@21
    block@21: // after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6 <- block@40, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11 <- block@17, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12 <- block@20)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1