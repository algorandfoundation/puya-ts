main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@18
    block@2: // abi_routing_L12
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testVectorCreationAndEquality()void" => block@4, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@5, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@6, method "implicitCastingAndSpreading((uint64,uint64))void" => block@7, method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" => block@8, method "testMethodSelector()void" => block@9, method "testAssertMatch(uint64)void" => block@10, method "testArc4Encoding((uint64,uint64))void" => block@11, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@12, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@13, method "setPlugin(string)void" => block@14, * => block@17}
    block@4: // testVectorCreationAndEquality_route_L13
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let v1#6: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 v1#6 0u 8u)
        let tuple_item%0#7: Encoded(uint64) = aggregate%extract%0#0
        let values%0#5: uint64 = (btoi tuple_item%0#7)
        let tmp%1#12: bytes[8] = (itob values%0#5)
        (log tmp%1#12)
        let aggregate%extract%1#0: bytes = (extract3 v1#6 8u 8u)
        let tuple_item%1#5: Encoded(uint64) = aggregate%extract%1#0
        let values%1#5: uint64 = (btoi tuple_item%1#5)
        let tmp%2#7: bytes[8] = (itob values%1#5)
        (log tmp%2#7)
        exit 1u
    block@5: // addVectors_route_L21
        let v1#5: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#7: uint64 = (len v1#5)
        let eq%0#7: bool = (== len%0#7 16u)
        (assert eq%0#7) // invalid number of bytes for tests/approvals/mutable-object.algo.ts::Vector
        let v2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len v2#0)
        let eq%1#1: bool = (== len%1#1 16u)
        (assert eq%1#1) // invalid number of bytes for tests/approvals/mutable-object.algo.ts::Vector
        let aggregate%extract%2#0: bytes = (extract3 v1#5 0u 8u)
        let tuple_item%0#6: Encoded(uint64) = aggregate%extract%2#0
        let values%0#4: uint64 = (btoi tuple_item%0#6)
        let aggregate%extract%3#0: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%1#4: Encoded(uint64) = aggregate%extract%3#0
        let values%1#4: uint64 = (btoi tuple_item%1#4)
        let tmp%0#13: uint64 = (+ values%0#4 values%1#4)
        let aggregate%extract%4#0: bytes = (extract3 v1#5 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%4#0
        let values%2#1: uint64 = (btoi tuple_item%2#0)
        let aggregate%extract%5#0: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%3#1: Encoded(uint64) = aggregate%extract%5#0
        let values%3#1: uint64 = (btoi tuple_item%3#1)
        let tmp%1#11: uint64 = (+ values%2#1 values%3#1)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#13)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%1#11)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%2#6: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let tmp%3#7: bytes = (concat 0x151f7c75 tmp%2#6)
        (log tmp%3#7)
        exit 1u
    block@6: // mutateVector_route_L28
        let v1#2: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#6: uint64 = (len v1#2)
        let eq%0#6: bool = (== len%0#6 16u)
        (assert eq%0#6) // invalid number of bytes for tests/approvals/mutable-object.algo.ts::Vector
        let tmp%1#9: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#9)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let tmp%3#6: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%3#6)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let aggregate%extract%6#0: bytes = (extract3 v1#2 0u 8u)
        let aggregate%updated_data%0#0: bytes = (replace3 v1#2 0u tmp%1#9)
        let v1#3: Encoded(uint64,uint64) = aggregate%updated_data%0#0
        let aggregate%extract%7#0: bytes = (extract3 v1#3 8u 8u)
        let aggregate%updated_data%1#0: bytes = (replace3 v1#3 8u tmp%3#6)
        let v1#4: Encoded(uint64,uint64) = aggregate%updated_data%1#0
        let tmp%6#4: bytes = (concat 0x151f7c75 v1#4)
        (log tmp%6#4)
        exit 1u
    block@7: // implicitCastingAndSpreading_route_L34
        let v1#1: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#5: uint64 = (len v1#1)
        let eq%0#5: bool = (== len%0#5 16u)
        (assert eq%0#5) // invalid number of bytes for tests/approvals/mutable-object.algo.ts::Vector
        let aggregate%extract%8#0: bytes = (extract3 v1#1 0u 8u)
        let tuple_item%0#5: Encoded(uint64) = aggregate%extract%8#0
        let values%0#3: uint64 = (btoi tuple_item%0#5)
        let aggregate%extract%9#0: bytes = (extract3 v1#1 8u 8u)
        let tuple_item%1#3: Encoded(uint64) = aggregate%extract%9#0
        let values%1#3: uint64 = (btoi tuple_item%1#3)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%0#3)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob values%1#3)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%5#0
        let v3#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#0
        let aggregate%extract%10#0: bytes = (extract3 v3#0 0u 8u)
        let tuple_item%10#0: Encoded(uint64) = aggregate%extract%10#0
        let x#1: uint64 = (btoi tuple_item%10#0)
        let tmp%6#3: bool = (== x#1 values%0#3)
        (assert tmp%6#3)
        let aggregate%extract%11#0: bytes = (extract3 v3#0 8u 8u)
        let tuple_item%12#1: Encoded(uint64) = aggregate%extract%11#0
        let y#0: uint64 = (btoi tuple_item%12#1)
        let tmp%7#2: bool = (== y#0 values%1#3)
        (assert tmp%7#2)
        let tmp%10#3: bool = (&& tmp%6#3 tmp%7#2)
        (assert tmp%10#3) // assert target is match for conditions
        exit 1u
    block@8: // testNestedObjects_route_L49
        let vp#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let len%0#4: uint64 = (len vp#0)
        let eq%0#4: bool = (== len%0#4 32u)
        (assert eq%0#4) // invalid number of bytes for tests/approvals/mutable-object.algo.ts::VectorPoint
        let aggregate%extract%12#0: bytes = (extract3 vp#0 0u 16u)
        let aggregate%extract%13#0: bytes = (extract3 aggregate%extract%12#0 0u 8u)
        let tuple_item%1#2: Encoded(uint64) = aggregate%extract%13#0
        let values%0#2: uint64 = (btoi tuple_item%1#2)
        let aggregate%extract%14#0: bytes = (extract3 vp#0 0u 16u)
        let aggregate%extract%15#0: bytes = (extract3 aggregate%extract%14#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%15#0
        let values%1#2: uint64 = (btoi tuple_item%3#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob values%0#2)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob values%1#2)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%as_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = aggregate%head%7#0
        let v1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%3#0
        let aggregate%extract%16#0: bytes = (extract3 vp#0 16u 16u)
        let aggregate%extract%17#0: bytes = (extract3 aggregate%extract%16#0 8u 8u)
        let tuple_item%5#1: Encoded(uint64) = aggregate%extract%17#0
        let values%2#0: uint64 = (btoi tuple_item%5#1)
        let aggregate%extract%18#0: bytes = (extract3 vp#0 16u 16u)
        let aggregate%extract%19#0: bytes = (extract3 aggregate%extract%18#0 0u 8u)
        let tuple_item%7#1: Encoded(uint64) = aggregate%extract%19#0
        let values%3#0: uint64 = (btoi tuple_item%7#1)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob values%2#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%8#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%as_Encoded(uint64,uint64)%4#0: Encoded(uint64,uint64) = aggregate%head%9#0
        let p1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%4#0
        let aggregate%head%10#0: bytes = (concat 0x v1#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 p1#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%11#0
        let vp1#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0
        let aggregate%extract%20#0: bytes = (extract3 vp1#0 0u 16u)
        let aggregate%extract%21#0: bytes = (extract3 aggregate%extract%20#0 0u 8u)
        let tuple_item%9#0: Encoded(uint64) = aggregate%extract%21#0
        let values%4#0: uint64 = (btoi tuple_item%9#0)
        let tmp%3#5: bytes[8] = (itob values%4#0)
        (log tmp%3#5)
        let aggregate%extract%22#0: bytes = (extract3 vp1#0 0u 16u)
        let aggregate%extract%23#0: bytes = (extract3 aggregate%extract%22#0 8u 8u)
        let tuple_item%11#0: Encoded(uint64) = aggregate%extract%23#0
        let values%5#1: uint64 = (btoi tuple_item%11#0)
        let tmp%4#2: bytes[8] = (itob values%5#1)
        (log tmp%4#2)
        let aggregate%extract%24#0: bytes = (extract3 vp1#0 16u 16u)
        let aggregate%extract%25#0: bytes = (extract3 aggregate%extract%24#0 0u 8u)
        let tuple_item%13#0: Encoded(uint64) = aggregate%extract%25#0
        let values%6#0: uint64 = (btoi tuple_item%13#0)
        let tmp%5#3: bytes[8] = (itob values%6#0)
        (log tmp%5#3)
        let aggregate%extract%26#0: bytes = (extract3 vp1#0 16u 16u)
        let aggregate%extract%27#0: bytes = (extract3 aggregate%extract%26#0 8u 8u)
        let tuple_item%15#0: Encoded(uint64) = aggregate%extract%27#0
        let values%7#1: uint64 = (btoi tuple_item%15#0)
        let tmp%6#2: bytes[8] = (itob values%7#1)
        (log tmp%6#2)
        let tmp%7#1: bool = (== values%4#0 values%0#2)
        let tmp%8#2: bool = (== values%5#1 values%1#2)
        let tmp%9#2: bool = (&& tmp%7#1 tmp%8#2)
        let tmp%10#2: bool = (== values%7#1 values%3#0)
        let tmp%11#2: bool = (== values%6#0 values%2#0)
        let tmp%12#1: bool = (&& tmp%10#2 tmp%11#2)
        let tmp%13#0: bool = (&& tmp%9#2 tmp%12#1)
        (assert tmp%13#0) // assert target is match for conditions
        exit 1u
    block@9: // testMethodSelector_route_L60
        exit 1u
    block@10: // testAssertMatch_route_L75
        let tmp%0#10: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#10)
        let eq%0#3: bool = (== len%0#3 8u)
        (assert eq%0#3) // invalid number of bytes for arc4.uint64
        let x#0: uint64 = (btoi tmp%0#10)
        let b#0: uint64 = (* x#0 2u)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%10#0)
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%11#0: Encoded(uint64) = aggregate%val_as_bytes%11#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint64)%11#0)
        let aggregate%as_Encoded(uint64,uint64)%5#0: Encoded(uint64,uint64) = aggregate%head%13#0
        let obj#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%5#0
        let aggregate%extract%28#0: bytes = (extract3 obj#1 8u 8u)
        let tuple_item%0#3: Encoded(uint64) = aggregate%extract%28#0
        let values%0#1: uint64 = (btoi tuple_item%0#3)
        let tmp%3#4: bool = (== values%0#1 b#0)
        let aggregate%extract%29#0: bytes = (extract3 obj#1 0u 8u)
        let tuple_item%1#1: Encoded(uint64) = aggregate%extract%29#0
        let values%1#1: uint64 = (btoi tuple_item%1#1)
        let tmp%5#2: bool = (== values%1#1 b#0)
        let tmp%6#1: bool = (&& tmp%3#4 tmp%5#2)
        (assert tmp%6#1) // assert target is match for conditions
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob values%0#1)
        let aggregate%as_Encoded(uint64)%12#0: Encoded(uint64) = aggregate%val_as_bytes%12#0
        let aggregate%head%14#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%12#0)
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob values%1#1)
        let aggregate%as_Encoded(uint64)%13#0: Encoded(uint64) = aggregate%val_as_bytes%13#0
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%as_Encoded(uint64)%13#0)
        let aggregate%as_Encoded(uint64,uint64)%6#0: Encoded(uint64,uint64) = aggregate%head%15#0
        let v#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%6#0
        let aggregate%extract%30#0: bytes = (extract3 v#0 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%30#0
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let tmp%8#1: bool = (== values%1#1 values%5#0)
        let aggregate%extract%31#0: bytes = (extract3 v#0 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = aggregate%extract%31#0
        let values%7#0: uint64 = (btoi tuple_item%7#0)
        let tmp%9#1: bool = (== values%0#1 values%7#0)
        let tmp%10#1: bool = (&& tmp%8#1 tmp%9#1)
        (assert tmp%10#1) // assert target is match for conditions
        let tmp%11#1: bool = (> values%0#1 x#0)
        (assert tmp%11#1) // assert target is match for conditions
        let tmp%12#0: bool = (> values%1#1 x#0)
        (assert tmp%12#0) // assert target is match for conditions
        exit 1u
    block@11: // testArc4Encoding_route_L92
        let p#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#2: uint64 = (len p#0)
        let eq%0#2: bool = (== len%0#2 16u)
        (assert eq%0#2) // invalid number of bytes for tests/approvals/mutable-object.algo.ts::Point
        let aggregate%extract%32#0: bytes = (extract3 p#0 8u 8u)
        let tuple_item%0#2: Encoded(uint64) = aggregate%extract%32#0
        let values%0#0: uint64 = (btoi tuple_item%0#2)
        let aggregate%extract%33#0: bytes = (extract3 p#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%33#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#9: bool = (!= values%0#0 values%1#0)
        (assert tmp%0#9) // For the purpose of this test, a should not equal b
        let aggregate%val_as_bytes%14#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%14#0: Encoded(uint64) = aggregate%val_as_bytes%14#0
        let aggregate%head%16#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%14#0)
        let aggregate%val_as_bytes%15#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%15#0: Encoded(uint64) = aggregate%val_as_bytes%15#0
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%as_Encoded(uint64)%15#0)
        let aggregate%as_Encoded(uint64,uint64)%7#0: Encoded(uint64,uint64) = aggregate%head%17#0
        let obj#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%7#0
        let length%0#2: uint64 = (len obj#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#2)
        let bounded_index%0#0: uint64 = (select 8u length%0#2 is_out_of_bounds%0#0)
        let tmp%2#2: bytes = (substring3 obj#0 bounded_index%0#0 length%0#2)
        let is_out_of_bounds%1#0: bool = (>= 0u length%0#2)
        let bounded_index%1#0: uint64 = (select 0u length%0#2 is_out_of_bounds%1#0)
        let tmp%3#3: bytes = (substring3 obj#0 bounded_index%1#0 bounded_index%0#0)
        let tmp%4#1: bytes = (concat tmp%2#2 tmp%3#3)
        let tmp%5#1: bool = (== p#0 tmp%4#1)
        (assert tmp%5#1) // Encoded order should be swapped
        exit 1u
    block@12: // getPlugin_route_L107
        let tmp%0#6: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#6 0u) // on error: invalid array length header
        let length%0#1: uint64 = aggregate%array_length%0#0
        let add%0#1: uint64 = (+ length%0#1 2u)
        let len%0#1: uint64 = (len tmp%0#6)
        let eq%0#1: bool = (== len%0#1 add%0#1)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#1: string = ((extract 2 0) tmp%0#6)
        let box_prefixed_key%0#1: bytes = (concat "plugins" key#1)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#1)
        (assert aggregate%box_get%1#0) // Box must have value
        let value#1: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%box_get%0#0
        let box%box_extract%0#1: Encoded(uint64) = (box_extract box_prefixed_key%0#1 16u 8u)
        let tmp%0#7: uint64 = (btoi box%box_extract%0#1)
        (assert tmp%0#7) // Last called not zero
        let tmp%3#2: bytes = (concat 0x151f7c75 value#1)
        (log tmp%3#2)
        exit 1u
    block@13: // getMain_route_L113
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "main")
        (assert aggregate%box_get%3#0) // Box must have value
        let value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%box_get%2#0
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "main" 16u 8u)
        let tmp%0#5: uint64 = (btoi box%box_extract%0#0)
        (assert tmp%0#5) // Last called not zero
        let tmp%1#3: bytes = (concat 0x151f7c75 value#0)
        (log tmp%1#3)
        exit 1u
    block@14: // setPlugin_route_L123
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%0#2 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%1#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#0: string = ((extract 2 0) tmp%0#2)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#3: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%length%0#0: uint64 = (len method "test()void")
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 4u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[4])%0#0: Encoded(uint8[4]) = method "test()void"
        let tmp%1#2: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#0
        let aggregate%head%18#0: bytes = (concat 0x tmp%1#2)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 0x0000000000000001)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 0x0000000000000001)
        let aggregate%as_Encoded(uint8[4],uint64,uint64)%0#0: Encoded(uint8[4],uint64,uint64) = aggregate%head%20#0
        let tmp%2#1: Encoded(uint8[4],uint64,uint64) = aggregate%as_Encoded(uint8[4],uint64,uint64)%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%21#0: bytes = (concat aggregate%len_u16%0#0 tmp%2#1)
        let aggregate%as_Encoded(len+(uint8[4],uint64,uint64)[])%0#0: Encoded(len+(uint8[4],uint64,uint64)[]) = aggregate%head%21#0
        let encoded_array%0#0: Encoded(len+(uint8[4],uint64,uint64)[]) = aggregate%as_Encoded(len+(uint8[4],uint64,uint64)[])%0#0
        let aggregate%head%22#0: bytes = (concat 0x 0x0000000000000001)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 0x0000000000000000)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 0x0000000000000000)
        let aggregate%head%25#0: bytes = (concat aggregate%head%24#0 tmp%0#3)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 27u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%26#0: bytes = (concat aggregate%head%25#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len encoded_array%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 27u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%26#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[]))%0#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%concat%0#0
        let tmp%3#1: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%as_Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[]))%0#0
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 tmp%3#1)
        exit 1u
    block@17: // after_if_else_L12
        fail
    block@18: // __algots__.defaultCreate_L12
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#1)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#1 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@4: // after_for_L342
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let tmp%3#1: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#1)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#1 <- block@0, value_internal%0#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L282
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#0 <- block@0, value_internal%0#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L342
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1