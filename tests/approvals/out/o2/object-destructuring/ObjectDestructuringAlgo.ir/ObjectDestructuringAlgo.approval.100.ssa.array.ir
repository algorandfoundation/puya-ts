main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L96
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@10}
    block@3: // test_route_L97
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64,uint64)%0#1: Encoded(uint64,uint64) = aggregate%head%1#1
        let tmp%7#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#1
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob 30u)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%head%3#1: bytes = (concat aggregate%head%2#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%as_Encoded(uint64,uint64)%1#1: Encoded(uint64,uint64) = aggregate%head%3#1
        let tmp%8#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#1
        let aggregate%head%4#1: bytes = (concat 0x tmp%7#1)
        let aggregate%head%5#1: bytes = (concat aggregate%head%4#1 tmp%8#1)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#1: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%5#1
        let arg#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#1
        let aggregate%extract%0#1: bytes = (extract3 arg#0 0u 16u)
        let aggregate%extract%1#1: bytes = (extract3 aggregate%extract%0#1 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let x#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#1: bytes = (extract3 arg#0 0u 16u)
        let aggregate%extract%3#1: bytes = (extract3 aggregate%extract%2#1 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#1
        let y#0: uint64 = (btoi tuple_item%3#0)
        let tmp%11#0: bool = (== x#0 10u)
        let tmp%12#0: bool = (&& 1u tmp%11#0)
        let tmp%13#0: bool = (== y#0 20u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // assert target is match for conditions
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob 434u)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%head%6#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#1)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%head%6#1
        let y#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#1
        let aggregate%extract%4#1: bytes = (extract3 y#1 0u 8u)
        let tuple_item%0#1: Encoded(uint64) = aggregate%extract%4#1
        let values%0#1: uint64 = (btoi tuple_item%0#1)
        let tmp%2#2: bool = (== values%0#1 434u)
        let tmp%3#2: bool = (&& 1u tmp%2#2)
        let tmp%5#2: bool = (&& tmp%3#2 tmp%2#2)
        (assert tmp%5#2) // assert target is match for conditions
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%head%7#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#1)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%head%8#1: bytes = (concat aggregate%head%7#1 aggregate%as_Encoded(uint64)%7#1)
        let aggregate%as_Encoded(uint64,uint64)%2#1: Encoded(uint64,uint64) = aggregate%head%8#1
        let awst_tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#1
        let aggregate%extract%5#1: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%0#2: Encoded(uint64) = aggregate%extract%5#1
        let f#0: uint64 = (btoi tuple_item%0#2)
        let aggregate%extract%6#1: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%1#1: Encoded(uint64) = aggregate%extract%6#1
        let e#0: uint64 = (btoi tuple_item%1#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 4u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob e#0)
        let aggregate%as_Encoded(uint64)%8#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%head%9#1: bytes = (concat aggregate%len_u16%0#1 aggregate%as_Encoded(uint64)%8#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob f#0)
        let aggregate%as_Encoded(uint64)%9#1: Encoded(uint64) = aggregate%val_as_bytes%8#1
        let aggregate%head%10#1: bytes = (concat aggregate%head%9#1 aggregate%as_Encoded(uint64)%9#1)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%10#1: Encoded(uint64) = aggregate%val_as_bytes%9#1
        let aggregate%head%11#1: bytes = (concat aggregate%head%10#1 aggregate%as_Encoded(uint64)%10#1)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%11#1: Encoded(uint64) = aggregate%val_as_bytes%10#1
        let aggregate%head%12#1: bytes = (concat aggregate%head%11#1 aggregate%as_Encoded(uint64)%11#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%head%12#1
        let res3#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let array_length%0#0: uint64 = (extract_uint16 res3#0 0u)
        let tmp%16#0: bool = (== array_length%0#0 4u)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%17#0: bool = (== values%0#0 4u)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%1#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%19#0: bool = (== values%1#0 1u)
        let tmp%20#0: bool = (&& tmp%18#0 tmp%19#0)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%21#0: bool = (== values%2#0 4u)
        let tmp%22#0: bool = (&& tmp%20#0 tmp%21#0)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) res3#0)
        let aggregate%bytes_offset%3#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%23#0: bool = (== values%3#0 1u)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        (assert tmp%24#0) // assert target is match for conditions
        let aggregate%val_as_bytes%11#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%12#1: Encoded(uint64) = aggregate%val_as_bytes%11#1
        let aggregate%head%13#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%12#1)
        let aggregate%length%0#1: uint64 = (len "")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "")
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let aggregate%as_bytes%2#1: bytes[8] = (itob 75u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%head%14#1: bytes = (concat aggregate%head%13#1 aggregate%offset_as_uint16%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 75u aggregate%data_length%0#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%15#1: bytes = (concat aggregate%head%14#1 aggregate%encoded_bool%0#1)
        let aggregate%value_len%0#1: uint64 = (len 999b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 999b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let aggregate%head%16#1: bytes = (concat aggregate%head%15#1 aggregate%as_Encoded(uint512)%0#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%16#1 aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%as_Encoded(uint64,(len+uint8[]),bool1,uint512)%0#1: Encoded(uint64,(len+uint8[]),bool1,uint512) = aggregate%concat%0#1
        let f#1: Encoded(uint64,(len+uint8[]),bool1,uint512) = aggregate%as_Encoded(uint64,(len+uint8[]),bool1,uint512)%0#1
        let aggregate%extract%7#1: bytes = (extract3 f#1 0u 8u)
        let tuple_item%0#3: Encoded(uint64) = aggregate%extract%7#1
        let a#0: uint64 = (btoi tuple_item%0#3)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 f#1 8u)
        let aggregate%len%0#1: uint64 = (len f#1)
        let aggregate%substring3%0#1: bytes = (substring3 f#1 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%1#2: Encoded(len+uint8[]) = aggregate%substring3%0#1
        let b#0: bytes = ((extract 2 0) tuple_item%1#2)
        let aggregate%extract%8#1: bytes = (extract3 f#1 11u 64u)
        let tuple_item%3#1: Encoded(uint512) = aggregate%extract%8#1
        let d#0: biguint = tuple_item%3#1
        let aggregate%val_as_bytes%12#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%13#1: Encoded(uint64) = aggregate%val_as_bytes%12#1
        let aggregate%head%17#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%13#1)
        let aggregate%value_len%1#1: uint64 = (len d#0)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| d#0 aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint512)%1#1: Encoded(uint512) = aggregate%arc4_encoded%1#1
        let aggregate%head%18#1: bytes = (concat aggregate%head%17#1 aggregate%as_Encoded(uint512)%1#1)
        let aggregate%as_Encoded(uint64,uint512)%0#1: Encoded(uint64,uint512) = aggregate%head%18#1
        let x#1: Encoded(uint64,uint512) = aggregate%as_Encoded(uint64,uint512)%0#1
        let aggregate%val_as_bytes%13#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%14#1: Encoded(uint64) = aggregate%val_as_bytes%13#1
        let aggregate%head%19#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%14#1)
        let aggregate%val_as_bytes%14#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%15#1: Encoded(uint64) = aggregate%val_as_bytes%14#1
        let aggregate%head%20#1: bytes = (concat aggregate%head%19#1 aggregate%as_Encoded(uint64)%15#1)
        let aggregate%as_Encoded(uint64,uint64)%3#1: Encoded(uint64,uint64) = aggregate%head%20#1
        let tmp%0#4: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%3#1
        let aggregate%head%21#1: bytes = (concat 0x tmp%0#4)
        let aggregate%head%22#1: bytes = (concat aggregate%head%21#1 awst_tmp%0#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%1#1: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%22#1
        let f#2: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%1#1
        let aggregate%extract%9#1: bytes = (extract3 f#2 0u 16u)
        let aggregate%extract%10#1: bytes = (extract3 aggregate%extract%9#1 0u 8u)
        let tuple_item%1#3: Encoded(uint64) = aggregate%extract%10#1
        let x#2: uint64 = (btoi tuple_item%1#3)
        let aggregate%extract%11#1: bytes = (extract3 f#2 0u 16u)
        let aggregate%extract%12#1: bytes = (extract3 aggregate%extract%11#1 8u 8u)
        let tuple_item%3#2: Encoded(uint64) = aggregate%extract%12#1
        let y#2: uint64 = (btoi tuple_item%3#2)
        let aggregate%val_as_bytes%15#1: bytes[8] = (itob x#2)
        let aggregate%as_Encoded(uint64)%16#1: Encoded(uint64) = aggregate%val_as_bytes%15#1
        let aggregate%head%23#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%16#1)
        let aggregate%val_as_bytes%16#1: bytes[8] = (itob y#2)
        let aggregate%as_Encoded(uint64)%17#1: Encoded(uint64) = aggregate%val_as_bytes%16#1
        let aggregate%head%24#1: bytes = (concat aggregate%head%23#1 aggregate%as_Encoded(uint64)%17#1)
        let aggregate%as_Encoded(uint64,uint64)%4#1: Encoded(uint64,uint64) = aggregate%head%24#1
        let tmp%0#3: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%4#1
        let aggregate%head%25#1: bytes = (concat 0x tmp%0#3)
        let aggregate%as_Encoded((uint64,uint64))%0#1: Encoded((uint64,uint64)) = aggregate%head%25#1
        let a#1: Encoded((uint64,uint64)) = aggregate%as_Encoded((uint64,uint64))%0#1
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L96
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L96
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L96
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0