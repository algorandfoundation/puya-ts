main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L96
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@10}
    block@3: // test_route_L97
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%val_as_bytes%0#1: bytes[8] = (itob 10u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 20u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let tmp%5#1: Encoded(uint64,uint64) = array%encoded%2#1
        let array%val_as_bytes%2#1: bytes[8] = (itob 20u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 30u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 array%as_Encoded(uint64)%3#1)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let tmp%6#1: Encoded(uint64,uint64) = array%encoded%5#1
        let array%encoded%6#1: Encoded((uint64,uint64)) = (concat 0x tmp%5#1)
        let array%encoded%7#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%6#1 tmp%6#1)
        let array%encoded%8#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%7#1 0x)
        let arg#0: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%8#1
        let array%extract%0#1: bytes = (extract3 arg#0 0u 16u)
        let tuple_item%0#1: Encoded(uint64,uint64) = array%extract%0#1
        let array%extract%1#1: bytes = (extract3 arg#0 0u 16u)
        let array%extract%2#1: bytes = (extract3 array%extract%1#1 0u 8u)
        let tuple_item%1#1: Encoded(uint64) = array%extract%2#1
        let x#1: uint64 = (btoi tuple_item%1#1)
        let array%extract%3#1: bytes = (extract3 arg#0 0u 16u)
        let tuple_item%2#1: Encoded(uint64,uint64) = array%extract%3#1
        let array%extract%4#1: bytes = (extract3 arg#0 0u 16u)
        let array%extract%5#1: bytes = (extract3 array%extract%4#1 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = array%extract%5#1
        let y#1: uint64 = (btoi tuple_item%3#0)
        let tmp%9#1: bool = (== x#1 10u)
        goto tmp%9#1 ? block@16 : block@18
    block@16: // and_contd_L104
        let tmp%10#0: bool = (== y#1 20u)
        goto tmp%10#0 ? block@17 : block@18
    block@17: // bool_true_L104
        let and_result%1#0: bool = 1u
        goto block@19
    block@18: // bool_false_L104
        let and_result%1#1: bool = 0u
        goto block@19
    block@19: // bool_merge_L104
        let and_result%1#2: bool = φ(and_result%1#0 <- block@17, and_result%1#1 <- block@18)
        (assert and_result%1#2) // assert target is match for conditions
        let array%val_as_bytes%4#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%4#1: Encoded(uint64) = array%val_as_bytes%4#1
        let array%encoded%9#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%4#1)
        let array%val_as_bytes%5#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%5#1: Encoded(uint64) = array%val_as_bytes%5#1
        let array%encoded%10#1: Encoded(uint64,uint64) = (concat array%encoded%9#1 array%as_Encoded(uint64)%5#1)
        let array%val_as_bytes%6#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%6#1: Encoded(uint64) = array%val_as_bytes%6#1
        let array%encoded%11#1: Encoded(uint64,uint64,uint64) = (concat array%encoded%10#1 array%as_Encoded(uint64)%6#1)
        let array%val_as_bytes%7#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%7#1: Encoded(uint64) = array%val_as_bytes%7#1
        let array%encoded%12#1: Encoded(uint64,uint64,uint64,uint64) = (concat array%encoded%11#1 array%as_Encoded(uint64)%7#1)
        let array%as_bytes%0#1: bytes[8] = (itob 4u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%13#1: bytes = (concat array%len_u16%0#1 array%encoded%12#1)
        let array%encoded%14#1: Encoded(len+uint64[]) = (concat array%encoded%13#1 0x)
        let res3#0: Encoded(len+uint64[]) = array%encoded%14#1
        let array_length%0#0: uint64 = (extract_uint16 res3#0 0u)
        let tmp%12#0: bool = (== array_length%0#0 4u)
        goto tmp%12#0 ? block@20 : block@25
    block@20: // and_contd_L109
        let array%array_trimmed%0#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%0#1: uint64 = (* 0u 8u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = array%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%13#0: bool = (== values%0#0 4u)
        goto tmp%13#0 ? block@21 : block@25
    block@21: // and_contd_L109
        let array%array_trimmed%1#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%1#1: uint64 = (* 1u 8u)
        let array%encoded_element%1#1: bytes = (extract3 array%array_trimmed%1#1 array%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = array%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%14#0: bool = (== values%1#0 1u)
        goto tmp%14#0 ? block@22 : block@25
    block@22: // and_contd_L109
        let array%array_trimmed%2#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%2#1: uint64 = (* 2u 8u)
        let array%encoded_element%2#1: bytes = (extract3 array%array_trimmed%2#1 array%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = array%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%15#0: bool = (== values%2#0 4u)
        goto tmp%15#0 ? block@23 : block@25
    block@23: // and_contd_L109
        let array%array_trimmed%3#1: bytes = ((extract 2 0) res3#0)
        let array%bytes_offset%3#1: uint64 = (* 3u 8u)
        let array%encoded_element%3#1: bytes = (extract3 array%array_trimmed%3#1 array%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = array%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%16#0: bool = (== values%3#0 1u)
        goto tmp%16#0 ? block@24 : block@25
    block@24: // bool_true_L109
        let and_result%2#0: bool = 1u
        goto block@26
    block@25: // bool_false_L109
        let and_result%2#1: bool = 0u
        goto block@26
    block@26: // bool_merge_L109
        let and_result%2#2: bool = φ(and_result%2#0 <- block@24, and_result%2#1 <- block@25)
        (assert and_result%2#2) // assert target is match for conditions
        let array%val_as_bytes%8#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%8#1: Encoded(uint64) = array%val_as_bytes%8#1
        let array%encoded%15#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%8#1)
        let array%val_as_bytes%9#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%9#1: Encoded(uint64) = array%val_as_bytes%9#1
        let array%encoded%16#1: Encoded(uint64,uint64) = (concat array%encoded%15#1 array%as_Encoded(uint64)%9#1)
        let array%encoded%17#1: Encoded(uint64,uint64) = (concat array%encoded%16#1 0x)
        let tmp%0#3: Encoded(uint64,uint64) = array%encoded%17#1
        let array%val_as_bytes%10#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%10#1: Encoded(uint64) = array%val_as_bytes%10#1
        let array%encoded%18#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%10#1)
        let array%val_as_bytes%11#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%11#1: Encoded(uint64) = array%val_as_bytes%11#1
        let array%encoded%19#1: Encoded(uint64,uint64) = (concat array%encoded%18#1 array%as_Encoded(uint64)%11#1)
        let array%encoded%20#1: Encoded(uint64,uint64) = (concat array%encoded%19#1 0x)
        let tmp%1#2: Encoded(uint64,uint64) = array%encoded%20#1
        let array%encoded%21#1: Encoded((uint64,uint64)) = (concat 0x tmp%0#3)
        let array%encoded%22#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%21#1 tmp%1#2)
        let array%encoded%23#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%22#1 0x)
        let tmp%2#2: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%23#1
        let array%extract%6#1: bytes = (extract3 tmp%2#2 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = array%extract%6#1
        let array%extract%7#1: bytes = (extract3 tmp%2#2 0u 16u)
        let array%extract%8#1: bytes = (extract3 array%extract%7#1 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%8#1
        let x#0: uint64 = (btoi tuple_item%1#0)
        let array%extract%9#1: bytes = (extract3 tmp%2#2 0u 16u)
        let array%extract%10#1: bytes = (extract3 array%extract%9#1 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = array%extract%10#1
        let y#0: uint64 = (btoi tuple_item%2#0)
        let array%extract%11#1: bytes = (extract3 tmp%2#2 16u 16u)
        let c2#0: Encoded(uint64,uint64) = array%extract%11#1
        let array%val_as_bytes%12#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%12#1: Encoded(uint64) = array%val_as_bytes%12#1
        let array%encoded%24#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%12#1)
        let array%val_as_bytes%13#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%13#1: Encoded(uint64) = array%val_as_bytes%13#1
        let array%encoded%25#1: Encoded(uint64,uint64) = (concat array%encoded%24#1 array%as_Encoded(uint64)%13#1)
        let array%encoded%26#1: Encoded(uint64,uint64) = (concat array%encoded%25#1 0x)
        let tmp%0#4: Encoded(uint64,uint64) = array%encoded%26#1
        let array%val_as_bytes%14#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%14#1: Encoded(uint64) = array%val_as_bytes%14#1
        let array%encoded%27#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%14#1)
        let array%val_as_bytes%15#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%15#1: Encoded(uint64) = array%val_as_bytes%15#1
        let array%encoded%28#1: Encoded(uint64,uint64) = (concat array%encoded%27#1 array%as_Encoded(uint64)%15#1)
        let array%encoded%29#1: Encoded(uint64,uint64) = (concat array%encoded%28#1 0x)
        let tmp%1#3: Encoded(uint64,uint64) = array%encoded%29#1
        let array%encoded%30#1: Encoded((uint64,uint64)) = (concat 0x tmp%0#4)
        let array%encoded%31#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%30#1 tmp%1#3)
        let array%encoded%32#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%31#1 0x)
        let tmp%2#3: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%32#1
        let array%extract%12#1: bytes = (extract3 tmp%2#3 0u 16u)
        let tuple_item%4#0: Encoded(uint64,uint64) = array%extract%12#1
        let array%extract%13#1: bytes = (extract3 tmp%2#3 0u 16u)
        let array%extract%14#1: bytes = (extract3 array%extract%13#1 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = array%extract%14#1
        let b#0: uint64 = (btoi tuple_item%5#0)
        let array%val_as_bytes%16#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%16#1: Encoded(uint64) = array%val_as_bytes%16#1
        let array%encoded%33#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%16#1)
        let array%val_as_bytes%17#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%17#1: Encoded(uint64) = array%val_as_bytes%17#1
        let array%encoded%34#1: Encoded(uint64,uint64) = (concat array%encoded%33#1 array%as_Encoded(uint64)%17#1)
        let array%encoded%35#1: Encoded(uint64,uint64) = (concat array%encoded%34#1 0x)
        let tmp%0#5: Encoded(uint64,uint64) = array%encoded%35#1
        let array%val_as_bytes%18#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%18#1: Encoded(uint64) = array%val_as_bytes%18#1
        let array%encoded%36#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%18#1)
        let array%val_as_bytes%19#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%19#1: Encoded(uint64) = array%val_as_bytes%19#1
        let array%encoded%37#1: Encoded(uint64,uint64) = (concat array%encoded%36#1 array%as_Encoded(uint64)%19#1)
        let array%encoded%38#1: Encoded(uint64,uint64) = (concat array%encoded%37#1 0x)
        let tmp%1#4: Encoded(uint64,uint64) = array%encoded%38#1
        let array%encoded%39#1: Encoded((uint64,uint64)) = (concat 0x tmp%0#5)
        let array%encoded%40#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%39#1 tmp%1#4)
        let array%encoded%41#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%40#1 0x)
        let f#0: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%41#1
        let array%extract%15#1: bytes = (extract3 f#0 0u 16u)
        let tuple_item%6#0: Encoded(uint64,uint64) = array%extract%15#1
        let array%extract%16#1: bytes = (extract3 f#0 0u 16u)
        let array%extract%17#1: bytes = (extract3 array%extract%16#1 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = array%extract%17#1
        let g#0: uint64 = (btoi tuple_item%7#0)
        let array%extract%18#1: bytes = (extract3 f#0 16u 16u)
        let i#0: Encoded(uint64,uint64) = array%extract%18#1
        let array%val_as_bytes%20#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%20#1: Encoded(uint64) = array%val_as_bytes%20#1
        let array%encoded%42#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%20#1)
        let array%val_as_bytes%21#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%21#1: Encoded(uint64) = array%val_as_bytes%21#1
        let array%encoded%43#1: Encoded(uint64,uint64) = (concat array%encoded%42#1 array%as_Encoded(uint64)%21#1)
        let array%encoded%44#1: Encoded(uint64,uint64) = (concat array%encoded%43#1 0x)
        let tmp%0#6: Encoded(uint64,uint64) = array%encoded%44#1
        let array%val_as_bytes%22#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%22#1: Encoded(uint64) = array%val_as_bytes%22#1
        let array%encoded%45#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%22#1)
        let array%val_as_bytes%23#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%23#1: Encoded(uint64) = array%val_as_bytes%23#1
        let array%encoded%46#1: Encoded(uint64,uint64) = (concat array%encoded%45#1 array%as_Encoded(uint64)%23#1)
        let array%encoded%47#1: Encoded(uint64,uint64) = (concat array%encoded%46#1 0x)
        let tmp%1#5: Encoded(uint64,uint64) = array%encoded%47#1
        let array%encoded%48#1: Encoded((uint64,uint64)) = (concat 0x tmp%0#6)
        let array%encoded%49#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%48#1 tmp%1#5)
        let array%encoded%50#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%49#1 0x)
        let tmp%2#5: Encoded((uint64,uint64),(uint64,uint64)) = array%encoded%50#1
        let array%extract%19#1: bytes = (extract3 tmp%2#5 0u 16u)
        let tuple_item%9#0: Encoded(uint64,uint64) = array%extract%19#1
        let array%extract%20#1: bytes = (extract3 tmp%2#5 0u 16u)
        let array%extract%21#1: bytes = (extract3 array%extract%20#1 0u 8u)
        let tuple_item%10#0: Encoded(uint64) = array%extract%21#1
        let a.c1.x#0: uint64 = (btoi tuple_item%10#0)
        let array%extract%22#1: bytes = (extract3 tmp%2#5 0u 16u)
        let array%extract%23#1: bytes = (extract3 array%extract%22#1 8u 8u)
        let tuple_item%11#0: Encoded(uint64) = array%extract%23#1
        let a.c1.y#0: uint64 = (btoi tuple_item%11#0)
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L96
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L96
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L96
        let tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#0 <- block@26, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0