main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/object-destructuring.algo.ts::testPartialDestructure(arg.x: uint64, arg.y: uint64, arg.z: biguint) -> <uint64, uint64>:
    block@0: // L7
        let x#0: uint64 = arg.x#0
        let y#0: uint64 = arg.y#0
        return x#0 y#0

subroutine tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(arg: Encoded((uint64,uint64),(uint64,uint64))) -> <uint64, uint64, Encoded((uint64,uint64),(uint64,uint64))>:
    block@0: // L15
        let arg%is_original#0: bool = 1u
        let arg%out#0: Encoded((uint64,uint64),(uint64,uint64)) = arg#0
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(arg#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(tuple_item%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let x#0: uint64 = values%0#0
        let tuple_item%2#0: Encoded(uint64,uint64) = extract_value(arg#0, 0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(tuple_item%2#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let y#0: uint64 = values%1#0
        return x#0 y#0 arg#0

subroutine tests/approvals/object-destructuring.algo.ts::test() -> void:
    block@0: // L27
        let awst_tmp%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let tuple_item%0#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = extract_value(awst_tmp%0#0, 1)
        let values%1#0: bytes = decode_bytes<bytes>(tuple_item%1#0)
        let tuple_item%2#0: bool = extract_value(awst_tmp%0#0, 2)
        let tuple_item%3#0: Encoded(uint512) = extract_value(awst_tmp%0#0, 3)
        let values%2#0: biguint = decode_bytes<biguint>(tuple_item%3#0)
        let a#0: uint64 = values%0#0
        let b#0: bytes = values%1#0
        let c#0: bool = tuple_item%2#0
        let d#0: biguint = values%2#0
        let awst_tmp%1#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let tuple_item%4#0: Encoded(uint512) = extract_value(awst_tmp%1#0, 3)
        let values%3#0: biguint = decode_bytes<biguint>(tuple_item%4#0)
        let e#0: biguint = values%3#0
        let awst_tmp%2#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let tuple_item%5#0: Encoded(uint64) = extract_value(awst_tmp%2#0, 0)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%5#0)
        let tuple_item%6#0: Encoded(uint512) = extract_value(awst_tmp%2#0, 3)
        let values%5#0: biguint = decode_bytes<biguint>(tuple_item%6#0)
        let g#0: uint64 = values%4#0
        let i#0: biguint = values%5#0
        let f#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = awst_tmp%2#0
        let awst_tmp%3#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let tuple_item%7#0: Encoded(uint64) = extract_value(awst_tmp%3#0, 0)
        let values%6#0: uint64 = decode_bytes<uint64>(tuple_item%7#0)
        let tuple_item%8#0: Encoded(uint512) = extract_value(awst_tmp%3#0, 3)
        let values%7#0: biguint = decode_bytes<biguint>(tuple_item%8#0)
        let tmp%0#0: Encoded(uint64,uint512) = bytes_encode<(uint64,uint512)>(values%6#0, values%7#0)
        let receivePartial%0#0: Encoded(uint64,uint512) = tests/approvals/object-destructuring.algo.ts::receivePartial(tmp%0#0)
        return 

subroutine tests/approvals/object-destructuring.algo.ts::testMutableObject() -> void:
    block@0: // L35
        let awst_tmp%0#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(awst_tmp%0#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(tuple_item%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64,uint64) = extract_value(awst_tmp%0#0, 0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(tuple_item%2#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tuple_item%4#0: Encoded(uint64,uint64) = extract_value(awst_tmp%0#0, 1)
        let x#0: uint64 = values%0#0
        let y#0: uint64 = values%1#0
        let c2#0: Encoded(uint64,uint64) = tuple_item%4#0
        let awst_tmp%1#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let tuple_item%5#0: Encoded(uint64,uint64) = extract_value(awst_tmp%1#0, 0)
        let tuple_item%6#0: Encoded(uint64) = extract_value(tuple_item%5#0, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%6#0)
        let b#0: uint64 = values%2#0
        let awst_tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let tuple_item%7#0: Encoded(uint64,uint64) = extract_value(awst_tmp%2#0, 0)
        let tuple_item%8#0: Encoded(uint64) = extract_value(tuple_item%7#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%8#0)
        let tuple_item%9#0: Encoded(uint64,uint64) = extract_value(awst_tmp%2#0, 1)
        let g#0: uint64 = values%3#0
        let i#0: Encoded(uint64,uint64) = tuple_item%9#0
        let f#0: Encoded((uint64,uint64),(uint64,uint64)) = awst_tmp%2#0
        let awst_tmp%3#0: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let tuple_item%10#0: Encoded(uint64,uint64) = extract_value(awst_tmp%3#0, 0)
        let tuple_item%11#0: Encoded(uint64) = extract_value(tuple_item%10#0, 0)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%11#0)
        let tuple_item%12#0: Encoded(uint64) = extract_value(tuple_item%10#0, 1)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%12#0)
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(values%4#0, values%5#0)
        let tmp%1#0: Encoded((uint64,uint64)) = bytes_encode<((uint64,uint64))>(tmp%0#0)
        let receivePartialMutableObject%0#0: Encoded((uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(tmp%1#0)
        return 

subroutine tests/approvals/object-destructuring.algo.ts::produceItems() -> Encoded(uint64,(len+uint8[]),bool1,uint512):
    block@0: // L51
        let tmp%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = bytes_encode<(uint64,(len+uint8[]),bool1,uint512)>(1u, "", 0u, 999b)
        return tmp%0#0

subroutine tests/approvals/object-destructuring.algo.ts::produceVector() -> Encoded((uint64,uint64),(uint64,uint64)):
    block@0: // L60
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(1u, 2u)
        let tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(4u, 1u)
        let tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = bytes_encode<((uint64,uint64),(uint64,uint64))>(tmp%0#0, tmp%1#0)
        return tmp%2#0

subroutine tests/approvals/object-destructuring.algo.ts::receivePartial(x: Encoded(uint64,uint512)) -> Encoded(uint64,uint512):
    block@0: // L64
        let x%is_original#0: bool = 1u
        let x%out#0: Encoded(uint64,uint512) = x#0
        return x%out#0

subroutine tests/approvals/object-destructuring.algo.ts::receivePartialMutableObject(a: Encoded((uint64,uint64))) -> Encoded((uint64,uint64)):
    block@0: // L66
        let a%is_original#0: bool = 1u
        let a%out#0: Encoded((uint64,uint64)) = a#0
        return a%out#0

subroutine tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral() -> Encoded(len+uint64[]):
    block@0: // L68
        let c#0: uint64 = 4u
        let d#0: uint64 = 1u
        let awst_tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(4u, 1u)
        let tuple_item%0#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 1)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let f#0: uint64 = values%0#0
        let e#0: uint64 = values%1#0
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(e#0, f#0, c#0, d#0)
        return encoded_array%0#0

subroutine tests/approvals/object-destructuring.algo.ts::testNumericResolution() -> void:
    block@0: // L78
        let tmp%0#0: Encoded(uint64) = bytes_encode<(uint64)>(434u)
        let y#0: Encoded(uint64) = tmp%0#0
        let x#0: Encoded(uint64) = y#0
        let tmp%1#0: bool = (== 2u 2u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // and_contd_L81
        let tuple_item%0#0: Encoded(uint64) = extract_value(x#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%2#0: bool = (== values%0#0 434u)
        goto tmp%2#0 ? block@2 : block@4
    block@2: // and_contd_L81
        let tuple_item%1#0: Encoded(uint64) = extract_value(y#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%3#0: bool = (== values%1#0 434u)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // bool_true_L81
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L81
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L81
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__puya_arc4_router__() -> bool:
    block@0: // L96
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L96
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@2, * => block@3}
    block@2: // test_route_L97
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test()
        return 1u
    block@3: // switch_case_default_L96
        goto block@4
    block@4: // switch_case_next_L96
        goto block@9
    block@5: // bare_routing_L96
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L96
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L96
        goto block@8
    block@8: // switch_case_next_L96
        goto block@9
    block@9: // after_if_else_L96
        return 0u

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test() -> void:
    block@0: // L97
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: uint64) = tests/approvals/object-destructuring.algo.ts::testPartialDestructure(1u, 4u, 123b)
        let (res.0#0: uint64, res.1#0: uint64) = (awst_tmp%0#0, awst_tmp%1#0)
        let tmp%0#0: bool = (== 2u 2u)
        goto tmp%0#0 ? block@1 : block@4
    block@1: // and_contd_L99
        let tmp%1#0: bool = (== res.0#0 1u)
        goto tmp%1#0 ? block@2 : block@4
    block@2: // and_contd_L99
        let tmp%2#0: bool = (== res.1#0 4u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // bool_true_L99
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L99
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L99
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%3#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(10u, 20u)
        let tmp%4#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(20u, 30u)
        let tmp%5#0: Encoded((uint64,uint64),(uint64,uint64)) = bytes_encode<((uint64,uint64),(uint64,uint64))>(tmp%3#0, tmp%4#0)
        let (testPartialDestructureMutableObject%0#0: uint64, testPartialDestructureMutableObject%1#0: uint64, testPartialDestructureMutableObject%2#0: Encoded((uint64,uint64),(uint64,uint64))) = tests/approvals/object-destructuring.algo.ts::testPartialDestructureMutableObject(tmp%5#0)
        let (res2.0#0: uint64, res2.1#0: uint64) = (testPartialDestructureMutableObject%0#0, testPartialDestructureMutableObject%1#0)
        let tmp%6#0: bool = (== 2u 2u)
        goto tmp%6#0 ? block@6 : block@9
    block@6: // and_contd_L102
        let tmp%7#0: bool = (== res2.0#0 10u)
        goto tmp%7#0 ? block@7 : block@9
    block@7: // and_contd_L102
        let tmp%8#0: bool = (== res2.1#0 20u)
        goto tmp%8#0 ? block@8 : block@9
    block@8: // bool_true_L102
        let and_result%1#0: bool = 1u
        goto block@10
    block@9: // bool_false_L102
        let and_result%1#1: bool = 0u
        goto block@10
    block@10: // bool_merge_L102
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@8, and_result%1#1 <- block@9)
        (assert and_result%1#2) // assert target is match for conditions
        tests/approvals/object-destructuring.algo.ts::testNumericResolution()
        let awst_tmp%2#0: Encoded(len+uint64[]) = tests/approvals/object-destructuring.algo.ts::testLiteralToLiteral()
        let res3#0: Encoded(len+uint64[]) = awst_tmp%2#0
        let array_length%0#0: uint64 = (extract_uint16 res3#0 0u)
        let tmp%9#0: bool = (== array_length%0#0 4u)
        goto tmp%9#0 ? block@11 : block@16
    block@11: // and_contd_L107
        let array_item%0#0: Encoded(uint64) = extract_value(res3#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%10#0: bool = (== values%0#0 4u)
        goto tmp%10#0 ? block@12 : block@16
    block@12: // and_contd_L107
        let array_item%1#0: Encoded(uint64) = extract_value(res3#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%11#0: bool = (== values%1#0 1u)
        goto tmp%11#0 ? block@13 : block@16
    block@13: // and_contd_L107
        let array_item%2#0: Encoded(uint64) = extract_value(res3#0, 2u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%12#0: bool = (== values%2#0 4u)
        goto tmp%12#0 ? block@14 : block@16
    block@14: // and_contd_L107
        let array_item%3#0: Encoded(uint64) = extract_value(res3#0, 3u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%13#0: bool = (== values%3#0 1u)
        goto tmp%13#0 ? block@15 : block@16
    block@15: // bool_true_L107
        let and_result%2#0: bool = 1u
        goto block@17
    block@16: // bool_false_L107
        let and_result%2#1: bool = 0u
        goto block@17
    block@17: // bool_merge_L107
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@15, and_result%2#1 <- block@16)
        (assert and_result%2#2) // assert target is match for conditions
        tests/approvals/object-destructuring.algo.ts::test()
        tests/approvals/object-destructuring.algo.ts::testMutableObject()
        return 

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L96
        return 