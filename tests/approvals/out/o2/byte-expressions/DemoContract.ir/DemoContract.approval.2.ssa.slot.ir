main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L32
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()bool" => block@3, * => block@10}
    block@3: // test_route_L33
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c7580)
        let tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L32
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L32
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L32
        let tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/byte-expressions.algo.ts::DemoContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0