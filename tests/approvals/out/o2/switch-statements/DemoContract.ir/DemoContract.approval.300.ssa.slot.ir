main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "run()void" => block@4, method "test_side_effects(uint64)void" => block@5, method "test_non_trivial_termination_of_clause(uint64,uint64)uint64" => block@6, * => block@9}
    block@4: // run_route_L5
        exit 1u
    block@5: // test_side_effects_route_L68
        let reinterpret_Encoded(uint64)%0#1: Encoded(uint64) = (txna ApplicationArgs 1)
        let n#1: uint64 = (btoi reinterpret_Encoded(uint64)%0#1)
        (app_global_put "evalCount" 0u)
        let tmp%0#5: uint64 = (- n#1 1u)
        let tmp%1#3: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(tmp%0#5)
        let tmp%2#3: bool = (== n#1 tmp%1#3)
        goto tmp%2#3 ? block@23 : block@21
    block@21: // after_if_else_L72
        let tmp%3#3: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n#1)
        let tmp%4#2: bool = (== n#1 tmp%3#3)
        goto tmp%4#2 ? block@23 : block@22
    block@22: // after_if_else_L74
        let tmp%5#1: uint64 = (+ n#1 1u)
        let tmp%6#1: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(tmp%5#1)
        goto block@23
    block@23: // L71
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "evalCount")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%8#1: bool = (== maybe_value%0#0 2u)
        (assert tmp%8#1) // Only two functions should be evaluated
        exit 1u
    block@6: // test_non_trivial_termination_of_clause_route_L83
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let n#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let y#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%0#3: bool = (== n#0 1u)
        goto tmp%0#3 ? block@14 : block@17
    block@14: // if_body_L85
        let tmp%1#2: uint64 = (% y#0 2u)
        goto tmp%1#2 ? block@16 : block@15
    block@15: // if_body_L86
        goto block@18
    block@16: // else_body_L88
        goto block@18
    block@17: // after_if_else_L85
        let tmp%3#2: uint64 = (* y#0 n#0)
        goto block@18
    block@18: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause_L83
        let tmp%2#1: uint64 = Ï†(y#0 <- block@15, n#0 <- block@16, tmp%3#2 <- block@17)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#1)
        let tmp%4#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#1)
        exit 1u
    block@9: // after_if_else_L4
        fail
    block@10: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n: uint64) -> uint64:
    block@0: // L63
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "evalCount")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "evalCount" tmp%0#0)
        return n#0