main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "run()void" => block@3, method "test_side_effects(uint64)void" => block@4, method "test_non_trivial_termination_of_clause(uint64,uint64)uint64" => block@5, * => block@12}
    block@3: // run_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // test_side_effects_route_L68
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let n#1: uint64 = (btoi reinterpret_bytes[8]%0#0)
        (app_global_put "evalCount" 0u)
        let tmp%0#3: uint64 = (- n#1 1u)
        let tmp%1#2: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(tmp%0#3)
        let tmp%2#2: bool = (== n#1 tmp%1#2)
        goto tmp%2#2 ? block@25 : block@23
    block@23: // after_if_else_L72
        let tmp%3#2: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n#1)
        let tmp%4#1: bool = (== n#1 tmp%3#2)
        goto tmp%4#1 ? block@25 : block@24
    block@24: // after_if_else_L74
        let tmp%5#1: uint64 = (+ n#1 1u)
        let tmp%6#1: uint64 = tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(tmp%5#1)
        goto block@25
    block@25: // L71
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "evalCount")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%8#1: bool = (== maybe_value%0#0 2u)
        (assert tmp%8#1) // Only two functions should be evaluated
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // test_non_trivial_termination_of_clause_route_L83
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let n#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 2)
        let y#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let tmp%0#2: bool = (== n#0 1u)
        goto tmp%0#2 ? block@17 : block@20
    block@17: // if_body_L85
        let tmp%1#1: uint64 = (% y#0 2u)
        goto tmp%1#1 ? block@19 : block@18
    block@18: // if_body_L86
        goto block@21
    block@19: // else_body_L88
        goto block@21
    block@20: // after_if_else_L85
        let tmp%3#1: uint64 = (* y#0 n#0)
        goto block@21
    block@21: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause_L83
        let to_encode%0#0: uint64 = φ(y#0 <- block@18, n#0 <- block@19, tmp%3#1 <- block@20)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%18#0)
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L4
        let tmp%19#0: uint64 = (txn OnCompletion)
        goto tmp%19#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L4
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // can only call when creating
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L4
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#1 <- block@25, tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#2 <- block@21, tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#3 <- block@9, tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n: uint64) -> uint64:
    block@0: // L63
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "evalCount")
        (assert maybe_exists%0#0) // check GlobalState exists
        let materialized_values%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "evalCount" materialized_values%0#0)
        return n#0