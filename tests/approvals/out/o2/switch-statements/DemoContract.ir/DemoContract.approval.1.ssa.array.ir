main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "run()void" => block@3, * => block@10}
    block@3: // run_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        switch "hmmm" {"hmmm" => block@31, 0xff => block@31, ZHNmc2Rmc2Q= => block@31, ONSGMZ3OMJTGOZDGMRSGM => block@31, * => block@32}
    block@31: // L55
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#0: bool = 1u
        goto block@33
    block@32: // switch_case_default_L51
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#1: bool = 0u
        goto block@33
    block@33: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes_L5
        let tmp%18#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#0 <- block@31, tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#1 <- block@32)
        (assert tmp%18#0)
        switch 0xff {"hmmm" => block@34, 0xff => block@34, ZHNmc2Rmc2Q= => block@34, ONSGMZ3OMJTGOZDGMRSGM => block@34, * => block@35}
    block@34: // L55
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#2: bool = 1u
        goto block@36
    block@35: // switch_case_default_L51
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#3: bool = 0u
        goto block@36
    block@36: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes_L5
        let tmp%19#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#2 <- block@34, tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#3 <- block@35)
        (assert tmp%19#0)
        switch ZHNmc2Rmc2Q= {"hmmm" => block@37, 0xff => block@37, ZHNmc2Rmc2Q= => block@37, ONSGMZ3OMJTGOZDGMRSGM => block@37, * => block@38}
    block@37: // L55
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#4: bool = 1u
        goto block@39
    block@38: // switch_case_default_L51
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#5: bool = 0u
        goto block@39
    block@39: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes_L5
        let tmp%20#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#4 <- block@37, tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#5 <- block@38)
        (assert tmp%20#0)
        switch ONSGMZ3OMJTGOZDGMRSGM {"hmmm" => block@40, 0xff => block@40, ZHNmc2Rmc2Q= => block@40, ONSGMZ3OMJTGOZDGMRSGM => block@40, * => block@41}
    block@40: // L55
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#6: bool = 1u
        goto block@42
    block@41: // switch_case_default_L51
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#7: bool = 0u
        goto block@42
    block@42: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes_L5
        let tmp%21#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#6 <- block@40, tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#7 <- block@41)
        (assert tmp%21#0)
        switch 0x {"hmmm" => block@43, 0xff => block@43, ZHNmc2Rmc2Q= => block@43, ONSGMZ3OMJTGOZDGMRSGM => block@43, * => block@44}
    block@43: // L55
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#8: bool = 1u
        goto block@45
    block@44: // switch_case_default_L51
        let tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#9: bool = 0u
        goto block@45
    block@45: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes_L5
        let tmp%22#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#8 <- block@43, tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes%0#9 <- block@44)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0)
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#0 <- block@45, tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/switch-statements.algo.ts::DemoContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0