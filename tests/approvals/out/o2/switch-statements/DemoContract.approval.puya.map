{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/switch-statements.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;;AAAA;AA+Ce;AACN;AACA;AACA;AAtCsB;AAkC7B;;;;;;;;;;AAOO;AAzCP;AAmCa;AACN;AACA;AACA;AArCgB;AAiCvB;;;;;;;;;;AAOO;AAxCP;AAkCa;AACN;AACA;AACA;AApCgB;AAgCvB;;;;;;;;;;AAOO;AAvCP;AAiCa;AACN;AACA;AACA;AAnCgB;AA+BvB;;;;;;;;;;AAOO;AAtCP;AAgCa;AACN;AACA;AACA;AAlCiB;;AA8BxB;;;;;;;;;;AAOO;AArCA;AAAP;AAhBF;;AAmDa;AAnCH;;;AAmCG;AApCJ;;;AAoCI;AArCJ;;;AAqCI;AAtCJ;;;AAsCI;AAvCJ;;;AAbX;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"hmmm\" 0xff base64(ZHNmc2Rmc2Q=) base32(ONSGMZ3OMJTGOZDGMRSGM)"
    },
    "37": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "42": {
      "op": "pushbytes 0xa6ff944a // method \"run()void\""
    },
    "48": {
      "op": "txna ApplicationArgs 0"
    },
    "51": {
      "op": "match main_run_route@3"
    },
    "55": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "return"
    },
    "57": {
      "block": "main_run_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "60": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "63": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "64": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "65": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "\"hmmm\"",
        "0xff"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff"
      ]
    },
    "66": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ]
    },
    "67": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "68": {
      "op": "bytec_0 // \"hmmm\"",
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "\"hmmm\""
      ]
    },
    "69": {
      "op": "match main_block@31 main_block@31 main_block@31 main_block@31",
      "stack_out": []
    },
    "79": {
      "op": "intc_1 // 0"
    },
    "80": {
      "block": "main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@33",
      "stack_in": [
        "tmp%18#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "81": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "82": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "\"hmmm\"",
        "0xff"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff"
      ]
    },
    "83": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ]
    },
    "84": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "85": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "0xff"
      ]
    },
    "86": {
      "op": "match main_block@34 main_block@34 main_block@34 main_block@34",
      "stack_out": []
    },
    "96": {
      "op": "intc_1 // 0"
    },
    "97": {
      "block": "main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@36",
      "stack_in": [
        "tmp%19#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "98": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "99": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "\"hmmm\"",
        "0xff"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff"
      ]
    },
    "100": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ]
    },
    "101": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "102": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ]
    },
    "103": {
      "op": "match main_block@37 main_block@37 main_block@37 main_block@37",
      "stack_out": []
    },
    "113": {
      "op": "intc_1 // 0"
    },
    "114": {
      "block": "main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@39",
      "stack_in": [
        "tmp%20#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "115": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "116": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "\"hmmm\"",
        "0xff"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff"
      ]
    },
    "117": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ]
    },
    "118": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "119": {
      "op": "dup",
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "120": {
      "op": "match main_block@40 main_block@40 main_block@40 main_block@40",
      "stack_out": []
    },
    "130": {
      "op": "intc_1 // 0"
    },
    "131": {
      "block": "main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@42",
      "stack_in": [
        "tmp%21#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "132": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "133": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "\"hmmm\"",
        "0xff"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff"
      ]
    },
    "134": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ]
    },
    "135": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "136": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"hmmm\"",
        "0x",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "0x"
      ]
    },
    "138": {
      "op": "match main_block@43 main_block@43 main_block@43 main_block@43",
      "stack_out": []
    },
    "148": {
      "op": "intc_1 // 0"
    },
    "149": {
      "block": "main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@45",
      "stack_in": [
        "tmp%22#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "150": {
      "op": "assert",
      "stack_out": []
    },
    "151": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return"
    },
    "153": {
      "block": "main_block@43",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "154": {
      "op": "b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@45"
    },
    "157": {
      "block": "main_block@40",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "158": {
      "op": "b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@42"
    },
    "161": {
      "block": "main_block@37",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "162": {
      "op": "b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@39"
    },
    "165": {
      "block": "main_block@34",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "166": {
      "op": "b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@36"
    },
    "169": {
      "block": "main_block@31",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "170": {
      "op": "b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes@33"
    },
    "173": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "175": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "178": {
      "op": "txn ApplicationID"
    },
    "180": {
      "op": "!"
    },
    "181": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "182": {
      "op": "intc_0 // 1"
    },
    "183": {
      "op": "return"
    }
  }
}