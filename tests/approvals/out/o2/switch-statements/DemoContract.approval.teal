#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 2
    bytecblock "evalCount"
    pushbytes ""
    dup
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xa6ff944a 0x97d4cf00 0xa81a47ab // method "run()void", method "test_side_effects(uint64)void", method "test_non_trivial_termination_of_clause(uint64,uint64)uint64"
    txna ApplicationArgs 0
    match main_run_route@4 main_test_side_effects_route@5 main_test_non_trivial_termination_of_clause_route@6
    err

main_test_non_trivial_termination_of_clause_route@6:
    // tests/approvals/switch-statements.algo.ts:83
    // public test_non_trivial_termination_of_clause(n: uint64, y: uint64): uint64 {
    txna ApplicationArgs 1
    btoi
    dup
    bury 3
    txna ApplicationArgs 2
    btoi
    bury 2
    // tests/approvals/switch-statements.algo.ts:85
    // case 1:
    intc_0 // 1
    ==
    // tests/approvals/switch-statements.algo.ts:85-90
    // case 1:
    //   if (y % 2 === 0) {
    //     return y
    //   } else {
    //     return n
    //   }
    bz main_after_if_else@17
    // tests/approvals/switch-statements.algo.ts:86
    // if (y % 2 === 0) {
    dup
    intc_2 // 2
    %
    bnz main_else_body@16
    dup

main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause@18:
    // tests/approvals/switch-statements.algo.ts:83
    // public test_non_trivial_termination_of_clause(n: uint64, y: uint64): uint64 {
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_else_body@16:
    dig 1
    // tests/approvals/switch-statements.algo.ts:83
    // public test_non_trivial_termination_of_clause(n: uint64, y: uint64): uint64 {
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause@18

main_after_if_else@17:
    // tests/approvals/switch-statements.algo.ts:92
    // return y * n
    dup
    dig 2
    *
    // tests/approvals/switch-statements.algo.ts:83
    // public test_non_trivial_termination_of_clause(n: uint64, y: uint64): uint64 {
    b main_after_inlined_tests/approvals/switch-statements.algo.ts::DemoContract.test_non_trivial_termination_of_clause@18

main_test_side_effects_route@5:
    // tests/approvals/switch-statements.algo.ts:68
    // public test_side_effects(n: uint64) {
    txna ApplicationArgs 1
    btoi
    dup
    bury 3
    // tests/approvals/switch-statements.algo.ts:61
    // evalCount = GlobalState<uint64>()
    bytec_0 // "evalCount"
    // tests/approvals/switch-statements.algo.ts:69
    // this.evalCount.value = 0
    intc_1 // 0
    app_global_put
    // tests/approvals/switch-statements.algo.ts:72
    // case this.increaseEvalAndReturn(n - 1):
    dup
    intc_0 // 1
    -
    callsub increaseEvalAndReturn
    ==
    // tests/approvals/switch-statements.algo.ts:72-73
    // case this.increaseEvalAndReturn(n - 1):
    //   break
    bnz main_block@23
    // tests/approvals/switch-statements.algo.ts:74
    // case this.increaseEvalAndReturn(n):
    dig 1
    dup
    callsub increaseEvalAndReturn
    ==
    // tests/approvals/switch-statements.algo.ts:74-75
    // case this.increaseEvalAndReturn(n):
    //   break
    bnz main_block@23
    // tests/approvals/switch-statements.algo.ts:76
    // case this.increaseEvalAndReturn(n + 1):
    dig 1
    intc_0 // 1
    +
    callsub increaseEvalAndReturn
    pop

main_block@23:
    // tests/approvals/switch-statements.algo.ts:80
    // assert(this.evalCount.value === 2, 'Only two functions should be evaluated')
    intc_1 // 0
    // tests/approvals/switch-statements.algo.ts:61
    // evalCount = GlobalState<uint64>()
    bytec_0 // "evalCount"
    // tests/approvals/switch-statements.algo.ts:80
    // assert(this.evalCount.value === 2, 'Only two functions should be evaluated')
    app_global_get_ex
    assert // check GlobalState exists
    intc_2 // 2
    ==
    // tests/approvals/switch-statements.algo.ts:68
    // public test_side_effects(n: uint64) {
    return // on error: Only two functions should be evaluated

main_run_route@4:
    // tests/approvals/switch-statements.algo.ts:5
    // run() {
    intc_0 // 1
    return

main___algots__.defaultCreate@10:
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/switch-statements.algo.ts::DemoContract.increaseEvalAndReturn(n: uint64) -> uint64:
increaseEvalAndReturn:
    // tests/approvals/switch-statements.algo.ts:63
    // private increaseEvalAndReturn(n: uint64) {
    proto 1 1
    // tests/approvals/switch-statements.algo.ts:64
    // this.evalCount.value++
    intc_1 // 0
    // tests/approvals/switch-statements.algo.ts:61
    // evalCount = GlobalState<uint64>()
    bytec_0 // "evalCount"
    // tests/approvals/switch-statements.algo.ts:64
    // this.evalCount.value++
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 1
    +
    // tests/approvals/switch-statements.algo.ts:61
    // evalCount = GlobalState<uint64>()
    bytec_0 // "evalCount"
    // tests/approvals/switch-statements.algo.ts:64
    // this.evalCount.value++
    swap
    app_global_put
    // tests/approvals/switch-statements.algo.ts:65
    // return n
    frame_dig -1
    retsub
