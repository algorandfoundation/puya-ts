main tests/approvals/property-ordering.algo.ts::Demo.approvalProgram:
    block@0: // L28
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 8u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 8u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let obj#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 obj#0 8u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%3#0: bool = (== values%0#0 8u)
        let aggregate%extract%1#0: bytes = (extract3 obj#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%5#0: bool = (== values%1#0 8u)
        let tmp%6#0: bool = (&& tmp%3#0 tmp%5#0)
        (assert tmp%6#0) // assert target is match for conditions
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let xEncoded#0: bytes = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%5#0
        let objEncoded#0: bytes = aggregate%as_Encoded(uint64,uint64)%2#0
        let length%0#0: uint64 = (len objEncoded#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%3#1: bytes = (substring3 objEncoded#0 bounded_index%0#0 length%0#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%0#0)
        let bounded_index%1#0: uint64 = (select 0u length%0#0 is_out_of_bounds%1#0)
        let tmp%4#1: bytes = (substring3 objEncoded#0 bounded_index%1#0 bounded_index%0#0)
        let tmp%5#1: bytes = (concat tmp%3#1 tmp%4#1)
        let tmp%6#1: bool = (== xEncoded#0 tmp%5#1)
        (assert tmp%6#1) // Encoded order should be swapped
        return 1u