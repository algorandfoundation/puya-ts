main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L8
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test((uint64,byte[],bool))void" => block@4, method "testMutable((uint64,byte[],bool))void" => block@5, method "init()void" => block@6, * => block@9}
    block@4: // test_route_L9
        let reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let test%0#1: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0)
        exit 1u
    block@5: // testMutable_route_L13
        let p#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let a#0: Encoded(uint64) = ((extract 0 8) p#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#0: uint64 = (len p#0)
        let b#0: Encoded(len+uint8[]) = (substring3 p#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%get_bit%0#0: bool = (getbit p#0 80u)
        let c#0: Encoded(bool8) = (setbit 0x00 0u aggregate%get_bit%0#0)
        let tmp%0#3: bytes = (concat a#0 b#0)
        let tmp%1#1: bytes = (concat tmp%0#3 c#0)
        (log tmp%1#1)
        exit 1u
    block@6: // init_route_L17
        let test%0#0: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(0x00000000000001c8000b000000)
        let temp#1: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(0x0000000000000002000b80000548656c6c6f)
        exit 1u
    block@9: // after_if_else_L8
        fail
    block@10: // __algots__.defaultCreate_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(p: Encoded(uint64,(len+uint8[]),bool1)) -> Encoded(uint64,(len+uint8[]),bool1):
    block@0: // L9
        let aggregate%extract%0#0: bytes = ((extract 0 8) p#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#0: uint64 = (len p#0)
        let aggregate%substring3%0#0: bytes = (substring3 p#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let b#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let c#0: bool = (getbit p#0 80u)
        let tmp%1#0: bytes[8] = (concat aggregate%extract%0#0 b#0)
        let tmp%2#0: bytes[8] = (itob c#0)
        let tmp%3#0: bytes[8] = (concat tmp%1#0 tmp%2#0)
        (log tmp%3#0)
        return p#0