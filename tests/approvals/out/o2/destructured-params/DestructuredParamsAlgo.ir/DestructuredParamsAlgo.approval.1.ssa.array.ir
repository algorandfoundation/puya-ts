main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((uint64,byte[],bool))void" => block@3, method "testMutable((uint64,byte[],bool))void" => block@4, method "init()void" => block@5, * => block@12}
    block@3: // test_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0 8u)
        let aggregate%len%0#1: uint64 = (len reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%0#1)
        let aggregate%get_bit%0#1: uint64 = (getbit reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0 80u)
        let aggregate%item2%0#1: bool = (getbit aggregate%get_bit%0#1 0u)
        let (tmp%7#0: uint64, tmp%8#0: bytes, tmp%9#0: bool) = (aggregate%item0%0#1, aggregate%item1%0#1, aggregate%item2%0#1)
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(tmp%7#0, tmp%8#0, tmp%9#0)
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // testMutable_route_L13
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let p#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let aggregate%extract%1#1: bytes = (extract3 p#0 0u 8u)
        let a#0: Encoded(uint64) = aggregate%extract%1#1
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%1#1: uint64 = (len p#0)
        let aggregate%substring3%1#1: bytes = (substring3 p#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let b#0: Encoded(len+uint8[]) = aggregate%substring3%1#1
        let aggregate%get_bit%1#1: uint64 = (getbit p#0 80u)
        let tuple_item%2#0: bool = aggregate%get_bit%1#1
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tuple_item%2#0)
        let c#0: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%0#2: bytes = (concat a#0 b#0)
        let tmp%1#1: bytes = (concat tmp%0#2 c#0)
        (log tmp%1#1)
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // init_route_L17
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(456u, "", 0u)
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(2u, "Hello", 1u)
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L8
        let tmp%18#0: uint64 = (txn OnCompletion)
        goto tmp%18#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L8
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L8
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#3 <- block@9, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(p.a: uint64, p.b: bytes, p.c: bool) -> void:
    block@0: // L9
        let tmp%0#0: bytes[8] = (itob p.a#0)
        let tmp%1#0: bytes[8] = (concat tmp%0#0 p.b#0)
        let tmp%2#0: bytes[8] = (itob p.c#0)
        let tmp%3#0: bytes[8] = (concat tmp%1#0 tmp%2#0)
        (log tmp%3#0)
        return 