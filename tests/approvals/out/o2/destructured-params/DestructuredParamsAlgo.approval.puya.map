{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/destructured-params.algo.ts"
  ],
  "mappings": ";;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAKE;;AAAA;AAAA;AAAA;;AAAA;AACiB;;;AAAc;;AAAQ;AAArC;;;AACyB;;AAAa;;;;;;;AAAa;AACnD;;;AAHF;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AACE;;;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AACE;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0xfefea766 0x83f14748 // method \"test((uint64,byte[],bool))void\", method \"init()void\""
    },
    "22": {
      "op": "txna ApplicationArgs 0"
    },
    "25": {
      "op": "match main_test_route@3 main_init_route@4"
    },
    "31": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "return"
    },
    "33": {
      "block": "main_init_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "36": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "39": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "40": {
      "op": "pushint 456 // 456",
      "defined_out": [
        "456"
      ],
      "stack_out": [
        "456"
      ]
    },
    "43": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "456"
      ],
      "stack_out": [
        "456",
        "\"\""
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"\"",
        "0",
        "456"
      ],
      "stack_out": [
        "456",
        "\"\"",
        "0"
      ]
    },
    "46": {
      "callsub": "tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test",
      "op": "callsub test",
      "stack_out": []
    },
    "49": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "51": {
      "op": "pushbytes \"Hello\"",
      "defined_out": [
        "\"Hello\"",
        "2"
      ],
      "stack_out": [
        "2",
        "\"Hello\""
      ]
    },
    "58": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"Hello\"",
        "1",
        "2"
      ],
      "stack_out": [
        "2",
        "\"Hello\"",
        "1"
      ]
    },
    "59": {
      "callsub": "tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test",
      "op": "callsub test",
      "stack_out": []
    },
    "62": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "return"
    },
    "64": {
      "block": "main_test_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "71": {
      "op": "txna ApplicationArgs 1"
    },
    "74": {
      "op": "dup"
    },
    "75": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "76": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0"
      ]
    },
    "77": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "79": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "item0%0%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "tmp%7#0 (copy)",
        "8"
      ]
    },
    "81": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item_start_offset%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "item_start_offset%0#0"
      ]
    },
    "82": {
      "op": "dig 2",
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "item_start_offset%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "84": {
      "op": "len",
      "defined_out": [
        "item0%0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "85": {
      "op": "dig 3",
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "87": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "tmp%7#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "89": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "90": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "93": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%7#0"
      ]
    },
    "95": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%7#0",
        "80"
      ]
    },
    "97": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "is_true%0#0"
      ]
    },
    "98": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "102": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "104": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "encoded_bool%0#0"
      ]
    },
    "105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "106": {
      "op": "getbit",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0"
      ]
    },
    "107": {
      "callsub": "tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test",
      "op": "callsub test",
      "stack_out": []
    },
    "110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "return"
    },
    "112": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "114": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "117": {
      "op": "txn ApplicationID"
    },
    "119": {
      "op": "!"
    },
    "120": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "121": {
      "op": "intc_1 // 1"
    },
    "122": {
      "op": "return"
    },
    "123": {
      "subroutine": "tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test",
      "params": {
        "p.a#0": "uint64",
        "p.b#0": "bytes",
        "p.c#0": "uint64"
      },
      "block": "test",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "126": {
      "op": "frame_dig -3",
      "defined_out": [
        "p.a#0 (copy)"
      ],
      "stack_out": [
        "p.a#0 (copy)"
      ]
    },
    "128": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "frame_dig -2",
      "defined_out": [
        "p.b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "p.b#0 (copy)"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "defined_out": [
        "p.c#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "p.c#0 (copy)"
      ]
    },
    "134": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "136": {
      "op": "log",
      "stack_out": []
    },
    "137": {
      "retsub": true,
      "op": "retsub"
    }
  }
}