#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 2 0
    intc_2 // 0
    pushbytes ""
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x398e270d 0x80acbe10 0xe213f5b6 0x63e40e8d // method "aliasing(uint64[])void", method "receive(uint64[])void", method "receiveReadonly(uint64[])void", method "structReturn((uint64,string,(byte[],uint8)))(byte[],uint8)"
    txna ApplicationArgs 0
    match main_aliasing_route@3 main_receive_route@4 main_receiveReadonly_route@5 main_structReturn_route@6

main_after_if_else@13:
    err

main_structReturn_route@6:
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/arc4-clone.algo.ts:55
    // assert(arg.shared === echo(arg.shared), "this won't error")
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    len
    substring3
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_receiveReadonly_route@5:
    // tests/approvals/arc4-clone.algo.ts:51
    // receiveReadonly(a: readonly uint64[]) {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_receive_route@4:
    // tests/approvals/arc4-clone.algo.ts:49
    // receive(mutable: uint64[]) {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_aliasing_route@3:
    // tests/approvals/arc4-clone.algo.ts:17
    // aliasing(mutable: uint64[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x
    bury 2
    intc_2 // 0
    bury 1

main_for_header@24:
    dup
    intc_1 // 2
    <
    bz main_after_for@26
    // tests/approvals/arc4-clone.algo.ts:43
    // const m4 = clone(nestedMutables).concat([Uint64(123)])
    pushbytes 0x000200010000000000000001
    dig 1
    dup
    cover 2
    extract_uint16
    intc_1 // 2
    +
    itob
    extract 6 2
    dig 3
    swap
    concat
    bury 3
    intc_1 // 2
    +
    bury 1
    b main_for_header@24

main_after_for@26:
    intc_2 // 0
    bury 1

main_for_header@27:
    dup
    intc_1 // 2
    <
    bz main_after_for@29
    // tests/approvals/arc4-clone.algo.ts:43
    // const m4 = clone(nestedMutables).concat([Uint64(123)])
    pushbytes 0x00020001000000000000007b
    dig 1
    dup
    cover 2
    extract_uint16
    pushint 12 // 12
    +
    itob
    extract 6 2
    dig 3
    swap
    concat
    bury 3
    intc_1 // 2
    +
    bury 1
    b main_for_header@27

main_after_for@29:
    // tests/approvals/arc4-clone.algo.ts:17
    // aliasing(mutable: uint64[]) {
    intc_0 // 1
    return

main_bare_routing@9:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
