main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L42
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getBoolConstants()(bool,bool)" => block@4, method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)" => block@5, method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)" => block@6, method "getStringConstants()string[]" => block@7, * => block@10}
    block@4: // getBoolConstants_route_L43
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u 1u)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%set_bit%0#0)
        let aggregate%as_Encoded(bool1,bool1)%0#0: Encoded(bool1,bool1) = aggregate%head%0#0
        let tmp%2#1: Encoded(bool1,bool1) = aggregate%as_Encoded(bool1,bool1)%0#0
        let tmp%3#1: bytes = (concat 0x151f7c75 tmp%2#1)
        (log tmp%3#1)
        exit 1u
    block@5: // getUintConstants_route_L46
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 12u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 8u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 100u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob 40u)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 8u)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%as_Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = aggregate%head%11#0
        let tmp%11#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)%0#0
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#1)
        (log tmp%12#0)
        exit 1u
    block@6: // getBigUintConstants_route_L49
        let aggregate%value_len%0#0: uint64 = (len 12b)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| 12b aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%0#0)
        let aggregate%value_len%1#0: uint64 = (len 8b)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| 8b aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint512)%1#0)
        let aggregate%value_len%2#0: uint64 = (len 20b)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| 20b aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%as_Encoded(uint512)%2#0)
        let aggregate%value_len%3#0: uint64 = (len 5b)
        let aggregate%len_ok%3#0: bool = (<= aggregate%value_len%3#0 64u)
        (assert aggregate%len_ok%3#0) // overflow
        let aggregate%bzero%3#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%3#0: bytes[64] = (b| 5b aggregate%bzero%3#0)
        let aggregate%as_Encoded(uint512)%3#0: Encoded(uint512) = aggregate%arc4_encoded%3#0
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%as_Encoded(uint512)%3#0)
        let aggregate%value_len%4#0: uint64 = (len 0b)
        let aggregate%len_ok%4#0: bool = (<= aggregate%value_len%4#0 64u)
        (assert aggregate%len_ok%4#0) // overflow
        let aggregate%bzero%4#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%4#0: bytes[64] = (b| 0b aggregate%bzero%4#0)
        let aggregate%as_Encoded(uint512)%4#0: Encoded(uint512) = aggregate%arc4_encoded%4#0
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 aggregate%as_Encoded(uint512)%4#0)
        let aggregate%value_len%5#0: uint64 = (len 10b)
        let aggregate%len_ok%5#0: bool = (<= aggregate%value_len%5#0 64u)
        (assert aggregate%len_ok%5#0) // overflow
        let aggregate%bzero%5#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%5#0: bytes[64] = (b| 10b aggregate%bzero%5#0)
        let aggregate%as_Encoded(uint512)%5#0: Encoded(uint512) = aggregate%arc4_encoded%5#0
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%as_Encoded(uint512)%5#0)
        let aggregate%value_len%6#0: uint64 = (len 8b)
        let aggregate%len_ok%6#0: bool = (<= aggregate%value_len%6#0 64u)
        (assert aggregate%len_ok%6#0) // overflow
        let aggregate%bzero%6#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%6#0: bytes[64] = (b| 8b aggregate%bzero%6#0)
        let aggregate%as_Encoded(uint512)%6#0: Encoded(uint512) = aggregate%arc4_encoded%6#0
        let aggregate%head%18#0: bytes = (concat aggregate%head%17#0 aggregate%as_Encoded(uint512)%6#0)
        let aggregate%value_len%7#0: uint64 = (len 2b)
        let aggregate%len_ok%7#0: bool = (<= aggregate%value_len%7#0 64u)
        (assert aggregate%len_ok%7#0) // overflow
        let aggregate%bzero%7#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%7#0: bytes[64] = (b| 2b aggregate%bzero%7#0)
        let aggregate%as_Encoded(uint512)%7#0: Encoded(uint512) = aggregate%arc4_encoded%7#0
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%as_Encoded(uint512)%7#0)
        let aggregate%as_Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)%0#0: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = aggregate%head%19#0
        let tmp%8#1: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = aggregate%as_Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)%0#0
        let tmp%9#1: bytes = (concat 0x151f7c75 tmp%8#1)
        (log tmp%9#1)
        exit 1u
    block@7: // getStringConstants_route_L52
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%length%0#0: uint64 = (len "ab")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "ab")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%20#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 2u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%20#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%0#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let tmp%1#1: bytes = (concat 0x151f7c75 encoded_array%0#0)
        (log tmp%1#1)
        exit 1u
    block@10: // after_if_else_L42
        fail
    block@11: // __algots__.defaultCreate_L42
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u