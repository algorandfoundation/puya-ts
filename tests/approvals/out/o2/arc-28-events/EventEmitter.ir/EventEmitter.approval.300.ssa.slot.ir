main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emitSwapped(uint8,uint8)void" => block@3, method "emitCustom(string,bool)void" => block@4, method "emitDynamicBytes(byte[],byte[])void" => block@5, * => block@12}
    block@3: // emitSwapped_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let a#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let x#1: Encoded(uint8,uint8) = (concat b#0 a#0)
        let event%0#2: bytes = (concat method "Swapped(uint8,uint8)" x#1)
        (log event%0#2)
        (log event%0#2)
        let event%2#0: bytes = (concat method "SwappedArc4(uint8,uint8)" x#1)
        (log event%2#0)
        (log event%0#2)
        (log event%0#2)
        let aggregate%head%3#1: bytes = (concat b#0 b#0)
        let aggregate%head%5#1: bytes = (concat aggregate%head%3#1 a#0)
        let event%5#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" aggregate%head%5#1)
        (log event%5#0)
        (log event%5#0)
        let aggregate%head%6#1: bytes = (concat 0x0002 b#0)
        let aggregate%head%7#1: bytes = (concat aggregate%head%6#1 b#0)
        let aggregate%head%9#1: bytes = (concat 0x0003 a#0)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%9#1 aggregate%head%7#1)
        let event%7#0: bytes = (concat method "Swapped(uint8[],uint8)" aggregate%concat%0#1)
        (log event%7#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // emitCustom_route_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let aggregate%head%11#1: bytes = (concat 0x0003 reinterpret_Encoded(bool8)%0#0)
        let aggregate%concat%1#1: bytes = (concat aggregate%head%11#1 reinterpret_Encoded(len+utf8[])%0#0)
        let event%0#1: bytes = (concat method "Custom(string,bool)" aggregate%concat%1#1)
        (log event%0#1)
        (log event%0#1)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // emitDynamicBytes_route_L40
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let y#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let aggregate%data_length%2#1: uint64 = (len reinterpret_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%head%13#1: bytes = (concat 0x0004 aggregate%offset_as_uint16%3#1)
        let aggregate%concat%2#1: bytes = (concat aggregate%head%13#1 reinterpret_Encoded(len+uint8[])%0#0)
        let aggregate%concat%3#1: bytes = (concat aggregate%concat%2#1 y#0)
        let event%0#0: bytes = (concat method "DB(byte[],byte[])" aggregate%concat%3#1)
        (log event%0#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L13
        let tmp%18#0: uint64 = (txn OnCompletion)
        goto tmp%18#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L13
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L13
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3 <- block@9, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0