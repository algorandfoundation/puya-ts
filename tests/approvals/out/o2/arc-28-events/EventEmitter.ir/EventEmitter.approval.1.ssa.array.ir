main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emitSwapped(uint8,uint8)void" => block@3, method "emitCustom(string,bool)void" => block@4, method "emitDynamicBytes(byte[],byte[])void" => block@5, * => block@12}
    block@3: // emitSwapped_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let a#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let aggregate%encoded%0#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%1#1: Encoded(uint8,uint8) = (concat aggregate%encoded%0#1 a#0)
        let aggregate%encoded%2#1: Encoded(uint8,uint8) = (concat aggregate%encoded%1#1 0x)
        let tmp%0#4: Encoded(uint8,uint8) = aggregate%encoded%2#1
        let event%0#2: bytes = (concat method "Swapped(uint8,uint8)" tmp%0#4)
        (log event%0#2)
        let aggregate%encoded%3#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%4#1: Encoded(uint8,uint8) = (concat aggregate%encoded%3#1 a#0)
        let aggregate%encoded%5#1: Encoded(uint8,uint8) = (concat aggregate%encoded%4#1 0x)
        let tmp%1#3: Encoded(uint8,uint8) = aggregate%encoded%5#1
        let event%1#1: bytes = (concat method "Swapped(uint8,uint8)" tmp%1#3)
        (log event%1#1)
        let aggregate%encoded%6#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%7#1: Encoded(uint8,uint8) = (concat aggregate%encoded%6#1 a#0)
        let aggregate%encoded%8#1: Encoded(uint8,uint8) = (concat aggregate%encoded%7#1 0x)
        let y#1: Encoded(uint8,uint8) = aggregate%encoded%8#1
        let event%2#0: bytes = (concat method "SwappedArc4(uint8,uint8)" y#1)
        (log event%2#0)
        let aggregate%encoded%9#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%10#1: Encoded(uint8,uint8) = (concat aggregate%encoded%9#1 a#0)
        let aggregate%encoded%11#1: Encoded(uint8,uint8) = (concat aggregate%encoded%10#1 0x)
        let tmp%3#2: Encoded(uint8,uint8) = aggregate%encoded%11#1
        let event%3#0: bytes = (concat method "Swapped(uint8,uint8)" tmp%3#2)
        (log event%3#0)
        let aggregate%encoded%12#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%13#1: Encoded(uint8,uint8) = (concat aggregate%encoded%12#1 a#0)
        let aggregate%encoded%14#1: Encoded(uint8,uint8) = (concat aggregate%encoded%13#1 0x)
        let tmp%4#2: Encoded(uint8,uint8) = aggregate%encoded%14#1
        let event%4#0: bytes = (concat method "Swapped(uint8,uint8)" tmp%4#2)
        (log event%4#0)
        let aggregate%encoded%15#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%16#1: Encoded(uint8,uint8) = (concat aggregate%encoded%15#1 b#0)
        let aggregate%encoded%17#1: Encoded(uint8,uint8) = (concat aggregate%encoded%16#1 0x)
        let tmp%5#2: Encoded(uint8,uint8) = aggregate%encoded%17#1
        let aggregate%encoded%18#1: Encoded((uint8,uint8)) = (concat 0x tmp%5#2)
        let aggregate%encoded%19#1: Encoded((uint8,uint8),uint8) = (concat aggregate%encoded%18#1 a#0)
        let aggregate%encoded%20#1: Encoded((uint8,uint8),uint8) = (concat aggregate%encoded%19#1 0x)
        let tmp%6#1: Encoded((uint8,uint8),uint8) = aggregate%encoded%20#1
        let event%5#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" tmp%6#1)
        (log event%5#0)
        let aggregate%encoded%21#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%22#1: Encoded(uint8,uint8) = (concat aggregate%encoded%21#1 b#0)
        let aggregate%encoded%23#1: Encoded(uint8,uint8) = (concat aggregate%encoded%22#1 0x)
        let tmp%7#1: Encoded(uint8,uint8) = aggregate%encoded%23#1
        let aggregate%encoded%24#1: Encoded((uint8,uint8)) = (concat 0x tmp%7#1)
        let aggregate%encoded%25#1: Encoded((uint8,uint8),uint8) = (concat aggregate%encoded%24#1 a#0)
        let aggregate%encoded%26#1: Encoded((uint8,uint8),uint8) = (concat aggregate%encoded%25#1 0x)
        let tmp%8#1: Encoded((uint8,uint8),uint8) = aggregate%encoded%26#1
        let event%6#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" tmp%8#1)
        (log event%6#0)
        let aggregate%encoded%27#1: Encoded(uint8) = (concat 0x b#0)
        let aggregate%encoded%28#1: Encoded(uint8,uint8) = (concat aggregate%encoded%27#1 b#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%29#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%28#1)
        let aggregate%encoded%30#1: Encoded(len+uint8[]) = (concat aggregate%encoded%29#1 0x)
        let tmp%9#1: Encoded(len+uint8[]) = aggregate%encoded%30#1
        let aggregate%tail%0#1: bytes = (concat 0x tmp%9#1)
        let aggregate%data_length%0#1: uint64 = (len tmp%9#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 3u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%31#1: Encoded((len+uint8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%32#1: Encoded((len+uint8[]),uint8) = (concat aggregate%encoded%31#1 a#0)
        let aggregate%encoded%33#1: Encoded((len+uint8[]),uint8) = (concat aggregate%encoded%32#1 aggregate%tail%0#1)
        let tmp%10#1: Encoded((len+uint8[]),uint8) = aggregate%encoded%33#1
        let event%7#0: bytes = (concat method "Swapped(uint8[],uint8)" tmp%10#1)
        (log event%7#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // emitCustom_route_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let arg0#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let arg1#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let aggregate%length%0#1: uint64 = (len arg0#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 arg0#0)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#3: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u arg1#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%1#2: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%tail%1#1: bytes = (concat 0x tmp%0#3)
        let aggregate%data_length%1#1: uint64 = (len tmp%0#3)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 3u aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%34#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%35#1: Encoded((len+utf8[]),bool1) = (concat aggregate%encoded%34#1 tmp%1#2)
        let aggregate%encoded%36#1: Encoded((len+utf8[]),bool1) = (concat aggregate%encoded%35#1 aggregate%tail%1#1)
        let tmp%2#1: Encoded((len+utf8[]),bool1) = aggregate%encoded%36#1
        let event%0#1: bytes = (concat method "Custom(string,bool)" tmp%2#1)
        (log event%0#1)
        let aggregate%length%1#1: uint64 = (len arg0#0)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 arg0#0)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%3#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u arg1#0)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let tmp%4#1: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let aggregate%tail%2#1: bytes = (concat 0x tmp%3#1)
        let aggregate%data_length%2#1: uint64 = (len tmp%3#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 3u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%37#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%encoded%38#1: Encoded((len+utf8[]),bool1) = (concat aggregate%encoded%37#1 tmp%4#1)
        let aggregate%encoded%39#1: Encoded((len+utf8[]),bool1) = (concat aggregate%encoded%38#1 aggregate%tail%2#1)
        let tmp%5#1: Encoded((len+utf8[]),bool1) = aggregate%encoded%39#1
        let event%1#0: bytes = (concat method "Custom(string,bool)" tmp%5#1)
        (log event%1#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // emitDynamicBytes_route_L40
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let x#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let y#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let aggregate%length%2#1: uint64 = (len x#0)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 x#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let tmp%0#2: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%tail%3#1: bytes = (concat 0x tmp%0#2)
        let aggregate%data_length%3#1: uint64 = (len tmp%0#2)
        let aggregate%current_tail_offset%3#1: uint64 = (+ 4u aggregate%data_length%3#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%40#1: Encoded((len+uint8[])) = (concat 0x aggregate%offset_as_uint16%3#1)
        let aggregate%tail%4#1: bytes = (concat aggregate%tail%3#1 y#0)
        let aggregate%data_length%4#1: uint64 = (len y#0)
        let aggregate%current_tail_offset%4#1: uint64 = (+ aggregate%current_tail_offset%3#1 aggregate%data_length%4#1)
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%current_tail_offset%3#1)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded%41#1: Encoded((len+uint8[]),(len+uint8[])) = (concat aggregate%encoded%40#1 aggregate%offset_as_uint16%4#1)
        let aggregate%encoded%42#1: Encoded((len+uint8[]),(len+uint8[])) = (concat aggregate%encoded%41#1 aggregate%tail%4#1)
        let tmp%1#1: Encoded((len+uint8[]),(len+uint8[])) = aggregate%encoded%42#1
        let event%0#0: bytes = (concat method "DB(byte[],byte[])" tmp%1#1)
        (log event%0#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L13
        let tmp%18#0: uint64 = (txn OnCompletion)
        goto tmp%18#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L13
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L13
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3 <- block@9, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0