{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc-28-events.algo.ts"
  ],
  "mappings": ";;;;;AAYA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAwBE;;AAAA;AAAA;AAAA;;AAAA;AAxBF;;;AAAA;;;AAAA;;;AAyB8B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA1B;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AADF;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAAA;;;AAAA;;;;AAAA;AAoBmB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAM;;;AAAA;AAAA;;AAAA;AAArB;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAFF;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;;;AAEkB;AAAA;;AAAA;AAAd;;;;;;AAAA;;AAAA;AAAA;AAAA;AAGA;AAAA;AAMA;;;;;;AAAA;;AAAA;AAAA;AAEA;AAAA;AAEA;AACsC;AAAA;AAAtC;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAfF;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0x8769b79a 0xf14889d7 0xd4c97c9c // method \"emitSwapped(uint8,uint8)void\", method \"emitCustom(string,bool)void\", method \"emitDynamicBytes(byte[],byte[])void\""
    },
    "27": {
      "op": "txna ApplicationArgs 0"
    },
    "30": {
      "op": "match main_emitSwapped_route@3 main_emitCustom_route@4 main_emitDynamicBytes_route@5"
    },
    "38": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "return"
    },
    "40": {
      "block": "main_emitDynamicBytes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "50": {
      "op": "extract 2 0",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "53": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "56": {
      "op": "dig 1",
      "defined_out": [
        "x#0",
        "x#0 (copy)",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "x#0 (copy)"
      ]
    },
    "58": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "length%0#0"
      ]
    },
    "59": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "as_bytes%0#0"
      ]
    },
    "60": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "length_uint16%0#0"
      ]
    },
    "63": {
      "op": "uncover 2",
      "stack_out": [
        "y#0",
        "length_uint16%0#0",
        "x#0"
      ]
    },
    "65": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0"
      ]
    },
    "66": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "67": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "data_length%0#0"
      ]
    },
    "68": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "encoded_value%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "data_length%0#0",
        "4"
      ]
    },
    "70": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "71": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "as_bytes%2#0"
      ]
    },
    "72": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "75": {
      "op": "pushbytes 0x0004",
      "defined_out": [
        "0x0004",
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "0x0004"
      ]
    },
    "79": {
      "op": "swap",
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "0x0004",
        "offset_as_uint16%1#0"
      ]
    },
    "80": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "81": {
      "op": "swap",
      "stack_out": [
        "y#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "82": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "y#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "85": {
      "op": "pushbytes 0x4524e1dd // method \"DB(byte[],byte[])\"",
      "defined_out": [
        "Method(DB(byte[],byte[]))",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "Method(DB(byte[],byte[]))"
      ]
    },
    "91": {
      "op": "swap",
      "stack_out": [
        "Method(DB(byte[],byte[]))",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "92": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "93": {
      "op": "log",
      "stack_out": []
    },
    "94": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "return"
    },
    "96": {
      "block": "main_emitCustom_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "98": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "99": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "100": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "102": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "103": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "106": {
      "op": "extract 2 0",
      "defined_out": [
        "arg0#0"
      ],
      "stack_out": [
        "arg0#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "arg0#0",
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "arg0#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "112": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arg0#0",
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "arg0#0",
        "reinterpret_bytes[1]%2#0",
        "0"
      ]
    },
    "113": {
      "op": "getbit",
      "defined_out": [
        "arg0#0",
        "arg1#0"
      ],
      "stack_out": [
        "arg0#0",
        "arg1#0"
      ]
    },
    "114": {
      "op": "dig 1",
      "defined_out": [
        "arg0#0",
        "arg0#0 (copy)",
        "arg1#0"
      ],
      "stack_out": [
        "arg0#0",
        "arg1#0",
        "arg0#0 (copy)"
      ]
    },
    "116": {
      "op": "len",
      "defined_out": [
        "arg0#0",
        "arg1#0",
        "length%0#0"
      ],
      "stack_out": [
        "arg0#0",
        "arg1#0",
        "length%0#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "arg0#0",
        "arg1#0",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "arg0#0",
        "arg1#0",
        "as_bytes%0#0"
      ]
    },
    "118": {
      "op": "extract 6 2",
      "defined_out": [
        "arg0#0",
        "arg1#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "arg0#0",
        "arg1#0",
        "length_uint16%0#0"
      ]
    },
    "121": {
      "op": "uncover 2",
      "stack_out": [
        "arg1#0",
        "length_uint16%0#0",
        "arg0#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "arg1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arg1#0",
        "encoded_value%0#0"
      ]
    },
    "124": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "arg1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arg1#0",
        "encoded_value%0#0",
        "0x00"
      ]
    },
    "127": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arg1#0",
        "encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "128": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "0x00",
        "0",
        "arg1#0"
      ]
    },
    "130": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0"
      ]
    },
    "131": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "0x0003"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x0003",
        "encoded_bool%0#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "139": {
      "op": "pushbytes 0xa313c066 // method \"Custom(string,bool)\"",
      "defined_out": [
        "Method(Custom(string,bool))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(Custom(string,bool))"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "Method(Custom(string,bool))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ],
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "148": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "149": {
      "op": "log",
      "stack_out": []
    },
    "150": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return"
    },
    "152": {
      "block": "main_emitSwapped_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "158": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "159": {
      "op": "txna ApplicationArgs 1"
    },
    "162": {
      "op": "txna ApplicationArgs 2"
    },
    "165": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "166": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "y#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "y#1"
      ]
    },
    "169": {
      "op": "pushbytes 0x0b6325ed // method \"Swapped(uint8,uint8)\"",
      "defined_out": [
        "Method(Swapped(uint8,uint8))",
        "a#0",
        "b#0",
        "y#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "Method(Swapped(uint8,uint8))"
      ]
    },
    "175": {
      "op": "dig 1",
      "defined_out": [
        "Method(Swapped(uint8,uint8))",
        "a#0",
        "b#0",
        "y#1",
        "y#1 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "Method(Swapped(uint8,uint8))",
        "y#1 (copy)"
      ]
    },
    "177": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "event%0#0",
        "y#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "event%0#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "event%0#0",
        "event%0#0 (copy)",
        "y#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "179": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "event%0#0"
      ]
    },
    "180": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "181": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "event%0#0"
      ]
    },
    "182": {
      "op": "pushbytes 0x441e2cd8 // method \"SwappedArc4(uint8,uint8)\"",
      "defined_out": [
        "Method(SwappedArc4(uint8,uint8))",
        "a#0",
        "b#0",
        "event%0#0",
        "y#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "y#1",
        "event%0#0",
        "Method(SwappedArc4(uint8,uint8))"
      ]
    },
    "188": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "event%0#0",
        "Method(SwappedArc4(uint8,uint8))",
        "y#1"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "event%0#0",
        "event%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "event%0#0",
        "event%2#0"
      ]
    },
    "191": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0",
        "event%0#0"
      ]
    },
    "192": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0",
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "193": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0",
        "event%0#0"
      ]
    },
    "194": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "195": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0 (copy)",
        "b#0"
      ]
    },
    "196": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "a#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "a#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0"
      ]
    },
    "199": {
      "op": "pushbytes 0x388cc12d // method \"Swapped((uint8,uint8),uint8)\"",
      "defined_out": [
        "Method(Swapped((uint8,uint8),uint8))",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "Method(Swapped((uint8,uint8),uint8))"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "Method(Swapped((uint8,uint8),uint8))",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "event%5#0"
      ],
      "stack_out": [
        "event%5#0"
      ]
    },
    "207": {
      "op": "log",
      "stack_out": []
    },
    "208": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "return"
    },
    "210": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "212": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "215": {
      "op": "txn ApplicationID"
    },
    "217": {
      "op": "!"
    },
    "218": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "219": {
      "op": "intc_0 // 1"
    },
    "220": {
      "op": "return"
    }
  }
}