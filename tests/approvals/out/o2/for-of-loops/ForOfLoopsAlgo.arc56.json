{
    "name": "ForOfLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_of_loop_tuple",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_tuple",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_object",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_dynamic_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_static_array",
            "args": [
                {
                    "type": "uint64[5]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_immutable_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_mutable_array",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iterable_props",
            "args": [
                {
                    "type": "uint64[3]",
                    "name": "static_array"
                },
                {
                    "type": "uint64[3]",
                    "name": "fixed_array"
                },
                {
                    "type": "uint64[]",
                    "name": "dyn_array"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        28
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        829
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        630
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        603
                    ],
                    "errorMessage": "invalid number of bytes for (len+(uint64,uint64)[])"
                },
                {
                    "pc": [
                        129,
                        401,
                        531,
                        686
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint64[])"
                },
                {
                    "pc": [
                        306,
                        747
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64,uint64)"
                },
                {
                    "pc": [
                        103,
                        111
                    ],
                    "errorMessage": "invalid number of bytes for uint64[3]"
                },
                {
                    "pc": [
                        462
                    ],
                    "errorMessage": "invalid number of bytes for uint64[5]"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAAEIKiYBBBUffHUiSYAARxIxG0EDHTEZFEQxGESCCATPHyC4BMKivWsE87T+yASMFu6HBLLHU78E0bW+7gShzA2UBJYYRsY2GgCOCAKEAjsB5wGgAWUBHgDLAAEANhoBFYEYEkQ2GgIVgRgSRDYaA0kiWUlFECQLgQIITBUSRCJFDSJFCEsHgQMMQQAPSwwjCEUNSwcjCEUIQv/pIkUGSwWBAwxBAA9LDCMIRQ1LBSMIRQZC/+kiRQVLBIEDDEEAD0sMIwhFDUsEIwhFBUL/6SJFBEsDgQMMQQAPSwwjCEUNSwMjCEUEQv/pIkUDSwJLDgxBAA9LDCMIRQ1LAiMIRQNC/+kiRQJLAUsODEEAD0sMIwhFDUsBIwhFAkL/6UsMFihMULAjQzYaAUkVgRgSRElXAAhLAVcICE8CVxAITgJQTFBJRRUiRQIVJApFEyJFDEsLSxMMQQAZSxNLDCQLW0oIRQIlEkAACUsLIwhFDEL/30kWKExQsCNDNhoBSUUWSSJZSUURJAuBAghMFRJEIkUBIkUMSwtLDwxBABxLFFcCAEsMJAtbSghFAiUSQAAJSwsjCEUMQv/cSRYoTFCwI0M2GgFJRRYVgSgSRCJFASJFDEsLgQUMQQAaSwskC0sVTFtKCEUCJRJAAAlLCyMIRQxC/95JFihMULAjQzYaAUlFFkkiWUlFEiQLgQIITBUSRCJFASJFDEsLSxAMQQAcSxRXAgBLDCQLW0oIRQIlEkAACUsLIwhFDEL/3EkWKExQsCNDNhoBSUUWSSJZSUUTgRALgQIITBUSRCJFASJFDEsLSxEMQQAoSxRXAgBLDIEQC4EQWEkiW0wkWwhLAQhJRQIlD0AACUsLIwhFDEL/0EkWKExQsCNDNhoBSUUWSSJZSUUUJAuBAghMFRJEIkUBIkUHSwZLEgxBAB5LFFcCAEsHJAtbSwEISUUCJQ9AAAlLBiMIRQdC/9pJFihMULAjQzYaAUkVgRgSREkiW0sBJFtFDUyBEFtFCyJFAiJFCkUISUsISU4CCEUCJRJAAAhLCI0CABMACEkWKExQsCNDgQJFCUsJRQhC/9cjRQlLCkUIQv/NMRkUMRgUEEM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}