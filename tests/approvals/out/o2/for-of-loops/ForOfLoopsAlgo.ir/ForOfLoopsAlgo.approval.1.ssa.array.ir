main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@3, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@4, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@5, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@6, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@7, * => block@14}
    block@3: // test_for_of_loop_tuple_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[24]%0#0: bytes[24] = (txna ApplicationArgs 1)
        let items.0#1: uint64 = (extract_uint64 reinterpret_bytes[24]%0#0 0u)
        let items.1#1: uint64 = (extract_uint64 reinterpret_bytes[24]%0#0 8u)
        let items.2#1: uint64 = (extract_uint64 reinterpret_bytes[24]%0#0 16u)
        let total#20: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@51
    block@51: // for_body_L10
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@3, loop_counter%0#2 <- block@53, loop_counter%0#3 <- block@54)
        let total#21: uint64 = φ(total#20 <- block@3, total#22 <- block@53, total#22 <- block@54)
        let item#5: uint64 = φ(items.0#1 <- block@3, items.1#1 <- block@53, items.2#1 <- block@54)
        let total#22: uint64 = (+ total#21 item#5)
        let tmp%0#6: bool = (== item#5 42u)
        goto tmp%0#6 ? block@55 : block@52
    block@52: // after_if_else_L12
        goto_nth [block@53, block@54][loop_counter%0#1] else goto block@55
    block@53: // for_header_1_L10
        let loop_counter%0#2: uint64 = 1u
        goto block@51
    block@54: // for_header_2_L10
        let loop_counter%0#3: uint64 = 2u
        goto block@51
    block@55: // L10
        let val_as_bytes%0#0: bytes[8] = (itob total#22)
        let tmp%7#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%7#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // test_for_of_loop_arc4_dynamic_array_route_L17
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let items#2: bytes = (txna ApplicationArgs 1)
        let total#15: uint64 = 0u
        let array_length%0#2: uint64 = (extract_uint16 items#2 0u)
        let item_index_internal%0#9: uint64 = 0u
        goto block@43
    block@43: // for_header_L19
        let item_index_internal%0#10: uint64 = φ(item_index_internal%0#9 <- block@4, item_index_internal%0#11 <- block@46)
        let total#16: uint64 = φ(total#15 <- block@4, total#17 <- block@46)
        let continue_looping%0#3: bool = (< item_index_internal%0#10 array_length%0#2)
        goto continue_looping%0#3 ? block@44 : block@47
    block@44: // for_body_L19
        let array_head_and_tail%0#1: bytes = ((extract 2 0) items#2)
        let item_offset%0#2: uint64 = (* item_index_internal%0#10 8u)
        let tmp%0#5: uint64 = (extract_uint64 array_head_and_tail%0#1 item_offset%0#2)
        let total#17: uint64 = (+ total#16 tmp%0#5)
        let tmp%2#2: bool = (== tmp%0#5 42u)
        goto tmp%2#2 ? block@45 : block@46
    block@45: // if_body_L21
        goto block@48
    block@46: // after_if_else_L21
        let item_index_internal%0#11: uint64 = (+ item_index_internal%0#10 1u)
        goto block@43
    block@47: // after_for_L19
        goto block@48
    block@48: // L19
        let total#19: uint64 = φ(total#17 <- block@45, total#16 <- block@47)
        let val_as_bytes%1#0: bytes[8] = (itob total#19)
        let tmp%13#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%13#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // test_for_of_loop_arc4_static_array_route_L26
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        let items#1: bytes[40] = (txna ApplicationArgs 1)
        let total#10: uint64 = 0u
        let item_index_internal%0#6: uint64 = 0u
        goto block@35
    block@35: // for_header_L28
        let item_index_internal%0#7: uint64 = φ(item_index_internal%0#6 <- block@5, item_index_internal%0#8 <- block@38)
        let total#11: uint64 = φ(total#10 <- block@5, total#12 <- block@38)
        let continue_looping%0#2: bool = (< item_index_internal%0#7 5u)
        goto continue_looping%0#2 ? block@36 : block@39
    block@36: // for_body_L28
        let item_offset%0#1: uint64 = (* item_index_internal%0#7 8u)
        let tmp%0#4: uint64 = (extract_uint64 items#1 item_offset%0#1)
        let total#12: uint64 = (+ total#11 tmp%0#4)
        let tmp%2#1: bool = (== tmp%0#4 42u)
        goto tmp%2#1 ? block@37 : block@38
    block@37: // if_body_L30
        goto block@40
    block@38: // after_if_else_L30
        let item_index_internal%0#8: uint64 = (+ item_index_internal%0#7 1u)
        goto block@35
    block@39: // after_for_L28
        goto block@40
    block@40: // L28
        let total#14: uint64 = φ(total#12 <- block@37, total#11 <- block@39)
        let val_as_bytes%2#0: bytes[8] = (itob total#14)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%18#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // test_for_of_loop_native_immutable_array_route_L35
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let items#0: uint64[] = (txna ApplicationArgs 1)
        let total#5: uint64 = 0u
        let array_length%0#1: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#3: uint64 = 0u
        goto block@27
    block@27: // for_header_L37
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@6, item_index_internal%0#5 <- block@30)
        let total#6: uint64 = φ(total#5 <- block@6, total#7 <- block@30)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 array_length%0#1)
        goto continue_looping%0#1 ? block@28 : block@31
    block@28: // for_body_L37
        let array_head_and_tail%0#0: bytes = ((extract 2 0) items#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#4 8u)
        let item#1: uint64 = (extract_uint64 array_head_and_tail%0#0 item_offset%0#0)
        let total#7: uint64 = (+ total#6 item#1)
        let tmp%0#3: bool = (== item#1 42u)
        goto tmp%0#3 ? block@29 : block@30
    block@29: // if_body_L39
        goto block@32
    block@30: // after_if_else_L39
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@27
    block@31: // after_for_L37
        goto block@32
    block@32: // L37
        let total#9: uint64 = φ(total#7 <- block@29, total#6 <- block@31)
        let val_as_bytes%3#0: bytes[8] = (itob total#9)
        let tmp%23#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%23#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // test_for_of_loop_native_mutable_array_route_L44
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_bytes[24]%1#0: bytes[24] = (txna ApplicationArgs 1)
        let items.0#0: uint64 = (extract_uint64 reinterpret_bytes[24]%1#0 0u)
        let items.1#0: uint64 = (extract_uint64 reinterpret_bytes[24]%1#0 8u)
        let items.2#0: uint64 = (extract_uint64 reinterpret_bytes[24]%1#0 16u)
        let array%sub_item%0#1: bytes[8] = (itob items.0#0)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let array%sub_item%1#1: bytes[8] = (itob items.1#0)
        let array%encoded%1#1: uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: uint64[] = (concat array%data%0#1 array%encoded%1#1)
        let array%sub_item%2#1: bytes[8] = (itob items.2#0)
        let array%encoded%2#1: uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: uint64[] = (concat array%data%1#1 array%encoded%2#1)
        let encoded%0#0: uint64[] = array%data%2#1
        let mutable#0: uint64[]* = new()
        write(mutable#0, encoded%0#0)
        let total#0: uint64 = 0u
        let array%bytes_len%0#1: uint64 = (len encoded%0#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 8u)
        let array_length%0#0: uint64 = array%array_len%0#1
        let item_index_internal%0#0: uint64 = 0u
        goto block@19
    block@19: // for_header_L47
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@7, item_index_internal%0#2 <- block@22)
        let total#1: uint64 = φ(total#0 <- block@7, total#2 <- block@22)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@20 : block@23
    block@20: // for_body_L47
        let slot_contents%1#0: uint64[] = read(mutable#0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#1 8u)
        let array%value%0#1: bytes = (extract3 slot_contents%1#0 array%bytes_index%0#1 8u)
        let array%sub_item%3#1: bytes = (extract3 array%value%0#1 0u 8u)
        let array%sub_item%4#1: uint64 = (btoi array%sub_item%3#1)
        let item#0: uint64 = array%sub_item%4#1
        let total#2: uint64 = (+ total#1 item#0)
        let tmp%0#2: bool = (== item#0 42u)
        goto tmp%0#2 ? block@21 : block@22
    block@21: // if_body_L49
        goto block@24
    block@22: // after_if_else_L49
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@19
    block@23: // after_for_L47
        goto block@24
    block@24: // L47
        let total#4: uint64 = φ(total#2 <- block@21, total#1 <- block@23)
        let val_as_bytes%4#0: bytes[8] = (itob total#4)
        let tmp%28#0: bytes = (concat 0x151f7c75 val_as_bytes%4#0)
        (log tmp%28#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // bare_routing_L7
        let tmp%29#0: uint64 = (txn OnCompletion)
        goto tmp%29#0 ? block@14 : block@11
    block@11: // __algots__.defaultCreate_L7
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // can only call when creating
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@14: // after_if_else_L7
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0 <- block@55, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1 <- block@48, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2 <- block@40, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3 <- block@32, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4 <- block@24, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5 <- block@11, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0