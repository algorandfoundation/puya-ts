main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@3, method "test_for_of_loop_destructured_tuple(uint64[])uint64" => block@4, method "test_for_of_loop_destructured_object((uint64,uint64)[])uint64" => block@5, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@6, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@7, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@8, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@9, * => block@16}
    block@3: // test_for_of_loop_tuple_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let items.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 0u)
        let items.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 8u)
        let items.2#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 16u)
        let total#24: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@69
    block@69: // for_body_L11
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@3, loop_counter%0#2 <- block@71, loop_counter%0#3 <- block@72)
        let temp#6: uint64 = φ(items.0#0 <- block@3, items.1#0 <- block@71, items.2#0 <- block@72)
        let total#25: uint64 = φ(total#24 <- block@3, total#26 <- block@71, total#26 <- block@72)
        let total#26: uint64 = (+ total#25 temp#6)
        let tmp%1#3: bool = (== temp#6 42u)
        goto tmp%1#3 ? block@73 : block@70
    block@70: // after_if_else_L13
        goto_nth [block@71, block@72][loop_counter%0#1] else goto block@73
    block@71: // for_header_1_L11
        let loop_counter%0#2: uint64 = 1u
        goto block@69
    block@72: // for_header_2_L11
        let loop_counter%0#3: uint64 = 2u
        goto block@69
    block@73: // L11
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob total#26)
        let tmp%12#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#1)
        (log tmp%12#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@4: // test_for_of_loop_destructured_tuple_route_L18
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let items#5: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#20: uint64 = 0u
        let array_length%0#3: uint64 = (extract_uint16 items#5 0u)
        let item_index_internal%0#15: uint64 = 0u
        goto block@61
    block@61: // for_header_L20
        let temp.0#0: uint64 = φ(item_index_internal%0#15 <- block@4, item_index_internal%0#17 <- block@64)
        let total#21: uint64 = φ(total#20 <- block@4, total#22 <- block@64)
        let continue_looping%0#5: bool = (< temp.0#0 array_length%0#3)
        goto continue_looping%0#5 ? block@62 : block@65
    block@62: // for_body_L20
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#5)
        let aggregate%bytes_offset%0#1: uint64 = (* temp.0#0 8u)
        let tmp%0#5: uint64 = (extract_uint64 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1)
        let total#22: uint64 = (+ total#21 tmp%0#5)
        let tmp%2#2: bool = (>= total#22 42u)
        goto tmp%2#2 ? block@63 : block@64
    block@63: // if_body_L22
        goto block@66
    block@64: // after_if_else_L22
        let item_index_internal%0#17: uint64 = (+ temp.0#0 1u)
        goto block@61
    block@65: // after_for_L20
        goto block@66
    block@66: // L20
        let total#23: uint64 = φ(total#22 <- block@63, total#21 <- block@65)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob total#23)
        let tmp%19#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#1)
        (log tmp%19#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@5: // test_for_of_loop_destructured_object_route_L27
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let items#4: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let total#16: uint64 = 0u
        let array_length%0#2: uint64 = (extract_uint16 items#4 0u)
        let item_index_internal%0#12: uint64 = 0u
        goto block@53
    block@53: // for_header_L29
        let item_index_internal%0#13: uint64 = φ(item_index_internal%0#12 <- block@5, item_index_internal%0#14 <- block@56)
        let total#17: uint64 = φ(total#16 <- block@5, total#18 <- block@56)
        let continue_looping%0#4: bool = (< item_index_internal%0#13 array_length%0#2)
        goto continue_looping%0#4 ? block@54 : block@57
    block@54: // for_body_L29
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) items#4)
        let aggregate%bytes_offset%1#1: uint64 = (* item_index_internal%0#13 16u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 16u) // on error: index access is out of bounds
        let x#0: uint64 = (extract_uint64 aggregate%encoded_element%1#1 0u)
        let y#0: uint64 = (extract_uint64 aggregate%encoded_element%1#1 8u)
        let tmp%0#4: uint64 = (+ x#0 y#0)
        let total#18: uint64 = (+ total#17 tmp%0#4)
        let tmp%2#1: bool = (>= total#18 42u)
        goto tmp%2#1 ? block@55 : block@56
    block@55: // if_body_L31
        goto block@58
    block@56: // after_if_else_L31
        let item_index_internal%0#14: uint64 = (+ item_index_internal%0#13 1u)
        goto block@53
    block@57: // after_for_L29
        goto block@58
    block@58: // L29
        let total#19: uint64 = φ(total#18 <- block@55, total#17 <- block@57)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob total#19)
        let tmp%26#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#1)
        (log tmp%26#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@6: // test_for_of_loop_arc4_dynamic_array_route_L36
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let items#3: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#12: uint64 = 0u
        let array_length%0#1: uint64 = (extract_uint16 items#3 0u)
        let item_index_internal%0#9: uint64 = 0u
        goto block@45
    block@45: // for_header_L38
        let item_index_internal%0#10: uint64 = φ(item_index_internal%0#9 <- block@6, item_index_internal%0#11 <- block@48)
        let total#13: uint64 = φ(total#12 <- block@6, total#14 <- block@48)
        let continue_looping%0#3: bool = (< item_index_internal%0#10 array_length%0#1)
        goto continue_looping%0#3 ? block@46 : block@49
    block@46: // for_body_L38
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) items#3)
        let aggregate%bytes_offset%3#1: uint64 = (* item_index_internal%0#10 8u)
        let tmp%0#3: uint64 = (extract_uint64 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1)
        let total#14: uint64 = (+ total#13 tmp%0#3)
        let tmp%3#2: bool = (== tmp%0#3 42u)
        goto tmp%3#2 ? block@47 : block@48
    block@47: // if_body_L40
        goto block@50
    block@48: // after_if_else_L40
        let item_index_internal%0#11: uint64 = (+ item_index_internal%0#10 1u)
        goto block@45
    block@49: // after_for_L38
        goto block@50
    block@50: // L38
        let total#15: uint64 = φ(total#14 <- block@47, total#13 <- block@49)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob total#15)
        let tmp%33#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%3#1)
        (log tmp%33#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@7: // test_for_of_loop_arc4_static_array_route_L45
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let items#2: Encoded(uint64[5]) = (txna ApplicationArgs 1)
        let total#8: uint64 = 0u
        let item_index_internal%0#6: uint64 = 0u
        goto block@37
    block@37: // for_header_L47
        let item_index_internal%0#7: uint64 = φ(item_index_internal%0#6 <- block@7, item_index_internal%0#8 <- block@40)
        let total#9: uint64 = φ(total#8 <- block@7, total#10 <- block@40)
        let continue_looping%0#2: bool = (< item_index_internal%0#7 5u)
        goto continue_looping%0#2 ? block@38 : block@41
    block@38: // for_body_L47
        let aggregate%bytes_offset%4#1: uint64 = (* item_index_internal%0#7 8u)
        let tmp%0#2: uint64 = (extract_uint64 items#2 aggregate%bytes_offset%4#1)
        let total#10: uint64 = (+ total#9 tmp%0#2)
        let tmp%3#1: bool = (== tmp%0#2 42u)
        goto tmp%3#1 ? block@39 : block@40
    block@39: // if_body_L49
        goto block@42
    block@40: // after_if_else_L49
        let item_index_internal%0#8: uint64 = (+ item_index_internal%0#7 1u)
        goto block@37
    block@41: // after_for_L47
        goto block@42
    block@42: // L47
        let total#11: uint64 = φ(total#10 <- block@39, total#9 <- block@41)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob total#11)
        let tmp%40#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%4#1)
        (log tmp%40#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@8: // test_for_of_loop_native_immutable_array_route_L54
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let items#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#4: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#1 0u)
        let item_index_internal%0#3: uint64 = 0u
        goto block@29
    block@29: // for_header_L56
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@8, item_index_internal%0#5 <- block@32)
        let total#5: uint64 = φ(total#4 <- block@8, total#6 <- block@32)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 array_length%0#0)
        goto continue_looping%0#1 ? block@30 : block@33
    block@30: // for_body_L56
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) items#1)
        let aggregate%bytes_offset%5#1: uint64 = (* item_index_internal%0#4 8u)
        let temp#1: uint64 = (extract_uint64 aggregate%array_trimmed%4#1 aggregate%bytes_offset%5#1)
        let total#6: uint64 = (+ total#5 temp#1)
        let tmp%1#2: bool = (== temp#1 42u)
        goto tmp%1#2 ? block@31 : block@32
    block@31: // if_body_L58
        goto block@34
    block@32: // after_if_else_L58
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@29
    block@33: // after_for_L56
        goto block@34
    block@34: // L56
        let total#7: uint64 = φ(total#6 <- block@31, total#5 <- block@33)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob total#7)
        let tmp%47#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%5#1)
        (log tmp%47#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@9: // test_for_of_loop_native_mutable_array_route_L63
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let items#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 items#0 0u)
        let values%1#0: uint64 = (extract_uint64 items#0 8u)
        let values%2#0: uint64 = (extract_uint64 items#0 16u)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob values%0#0)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob values%1#0)
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%6#1 aggregate%val_as_bytes%7#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob values%2#0)
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%val_as_bytes%8#1)
        store(local.0, aggregate%encoded%2#1)
        let total#0: uint64 = 0u
        let bytes_len%0#0: uint64 = (len aggregate%encoded%2#1)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@21
    block@21: // for_header_L66
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@9, item_index_internal%0#2 <- block@24)
        let total#1: uint64 = φ(total#0 <- block@9, total#2 <- block@24)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_len%0#0)
        goto continue_looping%0#0 ? block@22 : block@25
    block@22: // for_body_L66
        let slot_contents%1#0: Encoded(uint64[]) = load(local.0)
        let aggregate%bytes_offset%6#1: uint64 = (* item_index_internal%0#1 8u)
        let temp#0: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%6#1)
        let total#2: uint64 = (+ total#1 temp#0)
        let tmp%1#1: bool = (== temp#0 42u)
        goto tmp%1#1 ? block@23 : block@24
    block@23: // if_body_L68
        goto block@26
    block@24: // after_if_else_L68
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@21
    block@25: // after_for_L66
        goto block@26
    block@26: // L66
        let total#3: uint64 = φ(total#2 <- block@23, total#1 <- block@25)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob total#3)
        let tmp%54#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%9#1)
        (log tmp%54#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // bare_routing_L8
        let tmp%55#0: uint64 = (txn OnCompletion)
        goto tmp%55#0 ? block@16 : block@13
    block@13: // __algots__.defaultCreate_L8
        let tmp%56#0: uint64 = (txn ApplicationID)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // can only call when creating
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@16: // after_if_else_L8
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#8: bool = 0u
        goto block@17
    block@17: // after_inlined_tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0 <- block@73, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1 <- block@66, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2 <- block@58, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3 <- block@50, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4 <- block@42, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5 <- block@34, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6 <- block@26, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#7 <- block@13, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#8 <- block@16)
        return tmp%0#0