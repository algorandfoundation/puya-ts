main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@3, method "test_for_of_loop_destructured_tuple(uint64[])uint64" => block@4, method "test_for_of_loop_destructured_object((uint64,uint64)[])uint64" => block@5, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@6, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@7, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@8, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@9, method "test_iterable_props(uint64[3],uint64[3],uint64[])uint64" => block@10, * => block@17}
    block@3: // test_for_of_loop_tuple_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let items.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 0u)
        let items.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 8u)
        let items.2#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 16u)
        let total#24: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@90
    block@90: // for_body_L11
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@3, loop_counter%0#2 <- block@92, loop_counter%0#3 <- block@93)
        let temp#9: uint64 = φ(items.0#0 <- block@3, items.1#0 <- block@92, items.2#0 <- block@93)
        let total#25: uint64 = φ(total#24 <- block@3, total#26 <- block@92, total#26 <- block@93)
        let total#26: uint64 = (+ total#25 temp#9)
        let tmp%1#3: bool = (== temp#9 42u)
        goto tmp%1#3 ? block@94 : block@91
    block@91: // after_if_else_L13
        goto_nth [block@92, block@93][loop_counter%0#1] else goto block@94
    block@92: // for_header_1_L11
        let loop_counter%0#2: uint64 = 1u
        goto block@90
    block@93: // for_header_2_L11
        let loop_counter%0#3: uint64 = 2u
        goto block@90
    block@94: // L11
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#26)
        let tmp%12#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%12#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // test_for_of_loop_destructured_tuple_route_L18
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let items#5: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#20: uint64 = 0u
        let array_length%0#4: uint64 = (extract_uint16 items#5 0u)
        let item_index_internal%0#18: uint64 = 0u
        goto block@82
    block@82: // for_header_L20
        let temp.0#0: uint64 = φ(item_index_internal%0#18 <- block@4, item_index_internal%0#20 <- block@85)
        let total#21: uint64 = φ(total#20 <- block@4, total#22 <- block@85)
        let continue_looping%0#6: bool = (< temp.0#0 array_length%0#4)
        goto continue_looping%0#6 ? block@83 : block@86
    block@83: // for_body_L20
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) items#5)
        let aggregate%bytes_offset%0#0: uint64 = (* temp.0#0 8u)
        let tmp%0#5: uint64 = (extract_uint64 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0)
        let total#22: uint64 = (+ total#21 tmp%0#5)
        let tmp%2#2: bool = (>= total#22 42u)
        goto tmp%2#2 ? block@84 : block@85
    block@84: // if_body_L22
        goto block@87
    block@85: // after_if_else_L22
        let item_index_internal%0#20: uint64 = (+ temp.0#0 1u)
        goto block@82
    block@86: // after_for_L20
        goto block@87
    block@87: // L20
        let total#23: uint64 = φ(total#22 <- block@84, total#21 <- block@86)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#23)
        let tmp%19#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%19#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // test_for_of_loop_destructured_object_route_L27
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let items#4: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let total#16: uint64 = 0u
        let array_length%0#3: uint64 = (extract_uint16 items#4 0u)
        let item_index_internal%0#15: uint64 = 0u
        goto block@74
    block@74: // for_header_L29
        let item_index_internal%0#16: uint64 = φ(item_index_internal%0#15 <- block@5, item_index_internal%0#17 <- block@77)
        let total#17: uint64 = φ(total#16 <- block@5, total#18 <- block@77)
        let continue_looping%0#5: bool = (< item_index_internal%0#16 array_length%0#3)
        goto continue_looping%0#5 ? block@75 : block@78
    block@75: // for_body_L29
        let aggregate%array_trimmed%1#0: bytes = ((extract 2 0) items#4)
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%0#16 16u)
        let temp#7: Encoded(uint64,uint64) = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let x#0: uint64 = (extract_uint64 temp#7 0u)
        let y#0: uint64 = (extract_uint64 temp#7 8u)
        let tmp%0#4: uint64 = (+ x#0 y#0)
        let total#18: uint64 = (+ total#17 tmp%0#4)
        let tmp%2#1: bool = (>= total#18 42u)
        goto tmp%2#1 ? block@76 : block@77
    block@76: // if_body_L31
        goto block@79
    block@77: // after_if_else_L31
        let item_index_internal%0#17: uint64 = (+ item_index_internal%0#16 1u)
        goto block@74
    block@78: // after_for_L29
        goto block@79
    block@79: // L29
        let total#19: uint64 = φ(total#18 <- block@76, total#17 <- block@78)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob total#19)
        let tmp%26#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#0)
        (log tmp%26#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // test_for_of_loop_arc4_dynamic_array_route_L36
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let items#3: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#12: uint64 = 0u
        let array_length%0#2: uint64 = (extract_uint16 items#3 0u)
        let item_index_internal%0#12: uint64 = 0u
        goto block@66
    block@66: // for_header_L38
        let item_index_internal%0#13: uint64 = φ(item_index_internal%0#12 <- block@6, item_index_internal%0#14 <- block@69)
        let total#13: uint64 = φ(total#12 <- block@6, total#14 <- block@69)
        let continue_looping%0#4: bool = (< item_index_internal%0#13 array_length%0#2)
        goto continue_looping%0#4 ? block@67 : block@70
    block@67: // for_body_L38
        let aggregate%array_trimmed%2#0: bytes = ((extract 2 0) items#3)
        let aggregate%bytes_offset%2#0: uint64 = (* item_index_internal%0#13 8u)
        let tmp%0#3: uint64 = (extract_uint64 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0)
        let total#14: uint64 = (+ total#13 tmp%0#3)
        let tmp%3#2: bool = (== tmp%0#3 42u)
        goto tmp%3#2 ? block@68 : block@69
    block@68: // if_body_L40
        goto block@71
    block@69: // after_if_else_L40
        let item_index_internal%0#14: uint64 = (+ item_index_internal%0#13 1u)
        goto block@66
    block@70: // after_for_L38
        goto block@71
    block@71: // L38
        let total#15: uint64 = φ(total#14 <- block@68, total#13 <- block@70)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob total#15)
        let tmp%33#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%3#0)
        (log tmp%33#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // test_for_of_loop_arc4_static_array_route_L45
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let items#2: Encoded(uint64[5]) = (txna ApplicationArgs 1)
        let total#8: uint64 = 0u
        let item_index_internal%0#9: uint64 = 0u
        goto block@58
    block@58: // for_header_L47
        let item_index_internal%0#10: uint64 = φ(item_index_internal%0#9 <- block@7, item_index_internal%0#11 <- block@61)
        let total#9: uint64 = φ(total#8 <- block@7, total#10 <- block@61)
        let continue_looping%0#3: bool = (< item_index_internal%0#10 5u)
        goto continue_looping%0#3 ? block@59 : block@62
    block@59: // for_body_L47
        let aggregate%bytes_offset%3#0: uint64 = (* item_index_internal%0#10 8u)
        let tmp%0#2: uint64 = (extract_uint64 items#2 aggregate%bytes_offset%3#0)
        let total#10: uint64 = (+ total#9 tmp%0#2)
        let tmp%3#1: bool = (== tmp%0#2 42u)
        goto tmp%3#1 ? block@60 : block@61
    block@60: // if_body_L49
        goto block@63
    block@61: // after_if_else_L49
        let item_index_internal%0#11: uint64 = (+ item_index_internal%0#10 1u)
        goto block@58
    block@62: // after_for_L47
        goto block@63
    block@63: // L47
        let total#11: uint64 = φ(total#10 <- block@60, total#9 <- block@62)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob total#11)
        let tmp%40#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%4#0)
        (log tmp%40#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // test_for_of_loop_native_immutable_array_route_L54
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let items#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#4: uint64 = 0u
        let array_length%0#1: uint64 = (extract_uint16 items#1 0u)
        let item_index_internal%0#6: uint64 = 0u
        goto block@50
    block@50: // for_header_L56
        let item_index_internal%0#7: uint64 = φ(item_index_internal%0#6 <- block@8, item_index_internal%0#8 <- block@53)
        let total#5: uint64 = φ(total#4 <- block@8, total#6 <- block@53)
        let continue_looping%0#2: bool = (< item_index_internal%0#7 array_length%0#1)
        goto continue_looping%0#2 ? block@51 : block@54
    block@51: // for_body_L56
        let aggregate%array_trimmed%3#0: bytes = ((extract 2 0) items#1)
        let aggregate%bytes_offset%4#0: uint64 = (* item_index_internal%0#7 8u)
        let temp#4: uint64 = (extract_uint64 aggregate%array_trimmed%3#0 aggregate%bytes_offset%4#0)
        let total#6: uint64 = (+ total#5 temp#4)
        let tmp%1#2: bool = (== temp#4 42u)
        goto tmp%1#2 ? block@52 : block@53
    block@52: // if_body_L58
        goto block@55
    block@53: // after_if_else_L58
        let item_index_internal%0#8: uint64 = (+ item_index_internal%0#7 1u)
        goto block@50
    block@54: // after_for_L56
        goto block@55
    block@55: // L56
        let total#7: uint64 = φ(total#6 <- block@52, total#5 <- block@54)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob total#7)
        let tmp%47#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%5#0)
        (log tmp%47#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // test_for_of_loop_native_mutable_array_route_L63
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let items#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 items#0 0u)
        let values%1#0: uint64 = (extract_uint64 items#0 8u)
        let values%2#0: uint64 = (extract_uint64 items#0 16u)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob values%0#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob values%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%6#0 aggregate%val_as_bytes%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob values%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%8#0)
        store(local.0, aggregate%head%2#0)
        let total#0: uint64 = 0u
        let bytes_len%0#0: uint64 = (len aggregate%head%2#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let item_index_internal%0#3: uint64 = 0u
        goto block@42
    block@42: // for_header_L66
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@9, item_index_internal%0#5 <- block@45)
        let total#1: uint64 = φ(total#0 <- block@9, total#2 <- block@45)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 array_len%0#0)
        goto continue_looping%0#1 ? block@43 : block@46
    block@43: // for_body_L66
        let slot_contents%1#0: Encoded(uint64[]) = load(local.0)
        let aggregate%bytes_offset%5#0: uint64 = (* item_index_internal%0#4 8u)
        let temp#3: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%5#0)
        let total#2: uint64 = (+ total#1 temp#3)
        let tmp%1#1: bool = (== temp#3 42u)
        goto tmp%1#1 ? block@44 : block@45
    block@44: // if_body_L68
        goto block@47
    block@45: // after_if_else_L68
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@42
    block@46: // after_for_L66
        goto block@47
    block@47: // L66
        let total#3: uint64 = φ(total#2 <- block@44, total#1 <- block@46)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob total#3)
        let tmp%54#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%9#0)
        (log tmp%54#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // test_iterable_props_route_L73
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let dyn_array#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        let i#0: uint64 = 0u
        let temp#0: uint64 = 0u
        goto block@22
    block@22: // for_header_L75
        let temp#1: uint64 = φ(temp#0 <- block@10, temp#2 <- block@23)
        let i#1: uint64 = φ(i#0 <- block@10, i#2 <- block@23)
        let continue_looping%0#0: bool = (< temp#1 3u)
        goto continue_looping%0#0 ? block@23 : block@24
    block@23: // for_body_L75
        let i#2: uint64 = (+ i#1 1u)
        let temp#2: uint64 = (+ temp#1 1u)
        goto block@22
    block@24: // after_for_L75
        let item_index_internal%0#0: uint64 = 0u
        goto block@25
    block@25: // for_header_L78
        let temp₁.0#0: uint64 = φ(item_index_internal%0#0 <- block@24, item_index_internal%0#2 <- block@26)
        let i#3: uint64 = φ(i#1 <- block@24, i#4 <- block@26)
        let continue_looping%1#0: bool = (< temp₁.0#0 3u)
        goto continue_looping%1#0 ? block@26 : block@27
    block@26: // for_body_L78
        let i#4: uint64 = (+ i#3 1u)
        let item_index_internal%0#2: uint64 = (+ temp₁.0#0 1u)
        goto block@25
    block@27: // after_for_L78
        let temp₂#0: uint64 = 0u
        goto block@28
    block@28: // for_header_L81
        let temp₂#1: uint64 = φ(temp₂#0 <- block@27, temp₂#2 <- block@29)
        let i#5: uint64 = φ(i#3 <- block@27, i#6 <- block@29)
        let continue_looping%2#0: bool = (< temp₂#1 3u)
        goto continue_looping%2#0 ? block@29 : block@30
    block@29: // for_body_L81
        let i#6: uint64 = (+ i#5 1u)
        let temp₂#2: uint64 = (+ temp₂#1 1u)
        goto block@28
    block@30: // after_for_L81
        let item_index_internal%1#0: uint64 = 0u
        goto block@31
    block@31: // for_header_L84
        let temp₃.0#0: uint64 = φ(item_index_internal%1#0 <- block@30, item_index_internal%1#2 <- block@32)
        let i#7: uint64 = φ(i#5 <- block@30, i#8 <- block@32)
        let continue_looping%3#0: bool = (< temp₃.0#0 3u)
        goto continue_looping%3#0 ? block@32 : block@33
    block@32: // for_body_L84
        let i#8: uint64 = (+ i#7 1u)
        let item_index_internal%1#2: uint64 = (+ temp₃.0#0 1u)
        goto block@31
    block@33: // after_for_L84
        let array_length%0#0: uint64 = (extract_uint16 dyn_array#0 0u)
        let temp₄#0: uint64 = 0u
        goto block@34
    block@34: // for_header_L87
        let temp₄#1: uint64 = φ(temp₄#0 <- block@33, temp₄#2 <- block@35)
        let i#9: uint64 = φ(i#7 <- block@33, i#10 <- block@35)
        let continue_looping%4#0: bool = (< temp₄#1 array_length%0#0)
        goto continue_looping%4#0 ? block@35 : block@36
    block@35: // for_body_L87
        let i#10: uint64 = (+ i#9 1u)
        let temp₄#2: uint64 = (+ temp₄#1 1u)
        goto block@34
    block@36: // after_for_L87
        let item_index_internal%2#0: uint64 = 0u
        goto block@37
    block@37: // for_header_L90
        let temp₅.0#0: uint64 = φ(item_index_internal%2#0 <- block@36, item_index_internal%2#2 <- block@38)
        let i#11: uint64 = φ(i#9 <- block@36, i#12 <- block@38)
        let continue_looping%5#0: bool = (< temp₅.0#0 array_length%0#0)
        goto continue_looping%5#0 ? block@38 : block@39
    block@38: // for_body_L90
        let i#12: uint64 = (+ i#11 1u)
        let item_index_internal%2#2: uint64 = (+ temp₅.0#0 1u)
        goto block@37
    block@39: // after_for_L90
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob i#11)
        let tmp%61#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%10#0)
        (log tmp%61#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L8
        let tmp%62#0: uint64 = (txn OnCompletion)
        goto tmp%62#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L8
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // can only call when creating
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L8
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0 <- block@94, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1 <- block@87, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2 <- block@79, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3 <- block@71, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4 <- block@63, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5 <- block@55, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6 <- block@47, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#7 <- block@39, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0