#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8 42
    bytecblock 0x151f7c75
    intc_0 // 0
    dup
    pushbytes ""
    dupn 7
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@12
    pushbytess 0xcf1f20b8 0xc2a2bd6b 0xf3b4fec8 0x8c16ee87 0xb2c753bf 0xd1b5beee 0xa1cc0d94 // method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64", method "test_for_of_loop_destructured_tuple(uint64[])uint64", method "test_for_of_loop_destructured_object((uint64,uint64)[])uint64", method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64", method "test_for_of_loop_arc4_static_array(uint64[5])uint64", method "test_for_of_loop_native_immutable_array(uint64[])uint64", method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64"
    txna ApplicationArgs 0
    match main_test_for_of_loop_tuple_route@3 main_test_for_of_loop_destructured_tuple_route@4 main_test_for_of_loop_destructured_object_route@5 main_test_for_of_loop_arc4_dynamic_array_route@6 main_test_for_of_loop_arc4_static_array_route@7 main_test_for_of_loop_native_immutable_array_route@8 main_test_for_of_loop_native_mutable_array_route@9

main_after_if_else@16:
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    intc_0 // 0
    return

main_test_for_of_loop_native_mutable_array_route@9:
    // tests/approvals/for-of-loops.algo.ts:63
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:64
    // const mutable = new ReferenceArray(...items)
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    uncover 2
    pushint 16 // 16
    extract_uint64
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    itob
    concat
    dup
    bury 10
    // tests/approvals/for-of-loops.algo.ts:65
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:66
    // for (const item of mutable) {
    len
    intc_2 // 8
    /
    bury 8
    intc_0 // 0
    bury 6

main_for_header@21:
    // tests/approvals/for-of-loops.algo.ts:66
    // for (const item of mutable) {
    dig 5
    dig 8
    <
    bz main_block@26
    dig 8
    dig 6
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:67
    // total += item
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:68
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@26
    dig 5
    intc_1 // 1
    +
    bury 6
    b main_for_header@21

main_block@26:
    // tests/approvals/for-of-loops.algo.ts:63
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_native_immutable_array_route@8:
    // tests/approvals/for-of-loops.algo.ts:54
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    bury 11
    // tests/approvals/for-of-loops.algo.ts:55
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:56
    // for (const item of items) {
    intc_0 // 0
    extract_uint16
    bury 7
    intc_0 // 0
    bury 6

main_for_header@29:
    // tests/approvals/for-of-loops.algo.ts:56
    // for (const item of items) {
    dig 5
    dig 7
    <
    bz main_block@34
    dig 9
    extract 2 0
    dig 6
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:57
    // total += item
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:58
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@34
    dig 5
    intc_1 // 1
    +
    bury 6
    b main_for_header@29

main_block@34:
    // tests/approvals/for-of-loops.algo.ts:54
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_arc4_static_array_route@7:
    // tests/approvals/for-of-loops.algo.ts:45
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    bury 10
    // tests/approvals/for-of-loops.algo.ts:46
    // let total: uint64 = 0
    intc_0 // 0
    bury 1
    intc_0 // 0
    bury 6

main_for_header@37:
    // tests/approvals/for-of-loops.algo.ts:47
    // for (const item of items) {
    dig 5
    pushint 5 // 5
    <
    bz main_block@42
    dig 5
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:48
    // total += item.native
    dig 10
    swap
    extract_uint64
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:49
    // if (item.native === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@42
    dig 5
    intc_1 // 1
    +
    bury 6
    b main_for_header@37

main_block@42:
    // tests/approvals/for-of-loops.algo.ts:45
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_arc4_dynamic_array_route@6:
    // tests/approvals/for-of-loops.algo.ts:36
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    bury 11
    // tests/approvals/for-of-loops.algo.ts:37
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:38
    // for (const item of items) {
    intc_0 // 0
    extract_uint16
    bury 7
    intc_0 // 0
    bury 6

main_for_header@45:
    // tests/approvals/for-of-loops.algo.ts:38
    // for (const item of items) {
    dig 5
    dig 7
    <
    bz main_block@50
    dig 9
    extract 2 0
    dig 6
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:39
    // total += item.native
    extract_uint64
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:40
    // if (item.native === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@50
    dig 5
    intc_1 // 1
    +
    bury 6
    b main_for_header@45

main_block@50:
    // tests/approvals/for-of-loops.algo.ts:36
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_destructured_object_route@5:
    // tests/approvals/for-of-loops.algo.ts:27
    // test_for_of_loop_destructured_object(items: Point[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    bury 11
    // tests/approvals/for-of-loops.algo.ts:28
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:29
    // for (const { x, y } of items) {
    intc_0 // 0
    extract_uint16
    bury 7
    intc_0 // 0
    bury 6

main_for_header@53:
    // tests/approvals/for-of-loops.algo.ts:29
    // for (const { x, y } of items) {
    dig 5
    dig 7
    <
    bz main_block@58
    dig 9
    extract 2 0
    dig 6
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:30
    // total += x + y
    +
    dig 1
    +
    dup
    bury 2
    // tests/approvals/for-of-loops.algo.ts:31
    // if (total >= stopNumber) break
    intc_3 // 42
    >=
    bnz main_block@58
    dig 5
    intc_1 // 1
    +
    bury 6
    b main_for_header@53

main_block@58:
    // tests/approvals/for-of-loops.algo.ts:27
    // test_for_of_loop_destructured_object(items: Point[]) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_destructured_tuple_route@4:
    // tests/approvals/for-of-loops.algo.ts:18
    // test_for_of_loop_destructured_tuple(items: DynamicArray<UintN64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    bury 11
    // tests/approvals/for-of-loops.algo.ts:19
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:20
    // for (const [index, v] of items.entries()) {
    intc_0 // 0
    extract_uint16
    bury 7
    intc_0 // 0
    bury 2

main_for_header@61:
    // tests/approvals/for-of-loops.algo.ts:20
    // for (const [index, v] of items.entries()) {
    dig 1
    dig 7
    <
    bz main_block@66
    dig 9
    extract 2 0
    dig 2
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:21
    // total += v.native
    extract_uint64
    dig 1
    +
    dup
    bury 2
    // tests/approvals/for-of-loops.algo.ts:22
    // if (total >= stopNumber) break
    intc_3 // 42
    >=
    bnz main_block@66
    dig 1
    intc_1 // 1
    +
    bury 2
    b main_for_header@61

main_block@66:
    // tests/approvals/for-of-loops.algo.ts:18
    // test_for_of_loop_destructured_tuple(items: DynamicArray<UintN64>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_tuple_route@3:
    // tests/approvals/for-of-loops.algo.ts:9
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    bury 7
    swap
    pushint 16 // 16
    extract_uint64
    bury 5
    // tests/approvals/for-of-loops.algo.ts:10
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    intc_0 // 0
    bury 4

main_for_body@69:
    // tests/approvals/for-of-loops.algo.ts:12
    // total += item
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:13
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@73
    // tests/approvals/for-of-loops.algo.ts:11
    // for (const item of items) {
    dig 2
    switch main_for_header_1@71 main_for_header_2@72

main_block@73:
    // tests/approvals/for-of-loops.algo.ts:9
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_for_header_2@72:
    pushint 2 // 2
    bury 3
    dig 3
    b main_for_body@69

main_for_header_1@71:
    intc_1 // 1
    bury 3
    dig 4
    b main_for_body@69

main_bare_routing@12:
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@16
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
