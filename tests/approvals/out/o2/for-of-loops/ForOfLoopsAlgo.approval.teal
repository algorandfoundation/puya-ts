#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8 42
    bytecblock 0x151f7c75
    intc_0 // 0
    dup
    pushbytes ""
    dupn 6
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xcf1f20b8 0x8c16ee87 0xb2c753bf 0xd1b5beee 0xa1cc0d94 // method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64", method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64", method "test_for_of_loop_arc4_static_array(uint64[5])uint64", method "test_for_of_loop_native_immutable_array(uint64[])uint64", method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64"
    txna ApplicationArgs 0
    match main_test_for_of_loop_tuple_route@3 main_test_for_of_loop_arc4_dynamic_array_route@4 main_test_for_of_loop_arc4_static_array_route@5 main_test_for_of_loop_native_immutable_array_route@6 main_test_for_of_loop_native_mutable_array_route@7

main_after_if_else@14:
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    intc_0 // 0
    return

main_test_for_of_loop_native_mutable_array_route@7:
    // tests/approvals/for-of-loops.algo.ts:44
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    uncover 2
    pushint 16 // 16
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:45
    // const mutable = new MutableArray(...items)
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    itob
    concat
    dup
    bury 9
    // tests/approvals/for-of-loops.algo.ts:46
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:47
    // for (const item of mutable) {
    len
    intc_2 // 8
    /
    bury 7
    intc_0 // 0
    bury 5

main_for_header@19:
    // tests/approvals/for-of-loops.algo.ts:47
    // for (const item of mutable) {
    dig 4
    dig 7
    <
    bz main_block@24
    dig 7
    dig 5
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:48
    // total += item
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:49
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@24
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@19

main_block@24:
    // tests/approvals/for-of-loops.algo.ts:44
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_native_immutable_array_route@6:
    // tests/approvals/for-of-loops.algo.ts:35
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    bury 10
    // tests/approvals/for-of-loops.algo.ts:36
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:37
    // for (const item of items) {
    intc_0 // 0
    extract_uint16
    bury 6
    intc_0 // 0
    bury 5

main_for_header@27:
    // tests/approvals/for-of-loops.algo.ts:37
    // for (const item of items) {
    dig 4
    dig 6
    <
    bz main_block@32
    dig 8
    extract 2 0
    dig 5
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:38
    // total += item
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:39
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@32
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@27

main_block@32:
    // tests/approvals/for-of-loops.algo.ts:35
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_arc4_static_array_route@5:
    // tests/approvals/for-of-loops.algo.ts:26
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    bury 9
    // tests/approvals/for-of-loops.algo.ts:27
    // let total: uint64 = 0
    intc_0 // 0
    bury 1
    intc_0 // 0
    bury 5

main_for_header@35:
    // tests/approvals/for-of-loops.algo.ts:28
    // for (const item of items) {
    dig 4
    pushint 5 // 5
    <
    bz main_block@40
    dig 4
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:29
    // total += item.native
    dig 9
    swap
    extract_uint64
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:30
    // if (item.native === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@40
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@35

main_block@40:
    // tests/approvals/for-of-loops.algo.ts:26
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_arc4_dynamic_array_route@4:
    // tests/approvals/for-of-loops.algo.ts:17
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    bury 10
    // tests/approvals/for-of-loops.algo.ts:18
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    // tests/approvals/for-of-loops.algo.ts:19
    // for (const item of items) {
    intc_0 // 0
    extract_uint16
    bury 6
    intc_0 // 0
    bury 5

main_for_header@43:
    // tests/approvals/for-of-loops.algo.ts:19
    // for (const item of items) {
    dig 4
    dig 6
    <
    bz main_block@48
    dig 8
    extract 2 0
    dig 5
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:20
    // total += item.native
    extract_uint64
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:21
    // if (item.native === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@48
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@43

main_block@48:
    // tests/approvals/for-of-loops.algo.ts:17
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_tuple_route@3:
    // tests/approvals/for-of-loops.algo.ts:8
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    bury 6
    swap
    pushint 16 // 16
    extract_uint64
    bury 4
    // tests/approvals/for-of-loops.algo.ts:9
    // let total: uint64 = 0
    intc_0 // 0
    bury 2
    intc_0 // 0
    bury 3

main_for_body@51:
    // tests/approvals/for-of-loops.algo.ts:11
    // total += item
    dup2
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:12
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz main_block@55
    // tests/approvals/for-of-loops.algo.ts:10
    // for (const item of items) {
    dig 1
    switch main_for_header_1@53 main_for_header_2@54

main_block@55:
    // tests/approvals/for-of-loops.algo.ts:8
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_for_header_2@54:
    pushint 2 // 2
    bury 2
    dig 2
    b main_for_body@51

main_for_header_1@53:
    intc_1 // 1
    bury 2
    dig 3
    b main_for_body@51

main_bare_routing@10:
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
