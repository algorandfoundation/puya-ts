{
    "hints": {
        "setBoxes(uint64,byte[],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "checkKeys()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createManyInts()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setManyInts(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sumManyInts()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteBoxes()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "indirectExtractAndReplace()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "readBoxes()(uint64,byte[],string,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxesExist()(bool,bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sliceBox()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4Box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testBoxRef()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createBools()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBool(uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sumBools(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Arc4BoxContract",
        "methods": [
            {
                "name": "setBoxes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "checkKeys",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createManyInts",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setManyInts",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sumManyInts",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "deleteBoxes",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "indirectExtractAndReplace",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "readBoxes",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],string,uint64)"
                }
            },
            {
                "name": "boxesExist",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,bool,bool,bool)"
                }
            },
            {
                "name": "sliceBox",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc4Box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testBoxRef",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createBools",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setBool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "bool",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sumBools",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stopAtTotal"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}