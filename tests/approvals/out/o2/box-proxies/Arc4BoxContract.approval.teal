#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8 2 4096
    bytecblock "blob" "BOX_C" "boxLarge" "boxA" "b" "tooManyBools" 0x00010203 0x151f7c75 "manyInts" "boxD" "hello" "boxRef" 0x00023432 "42" 0x068101
    pushbytes ""
    dupn 2
    // tests/approvals/box-proxies.algo.ts:340
    // class Arc4BoxContract extends arc4.Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@24
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x27f76b69 0x9123617a 0xf7263948 0x09bcba5e 0x7a0d3dc8 0x7d039b43 0x3bc3b2f9 0xdcde614d 0xe1391721 0x683b5c64 0xa5a626fe 0x9039edde 0x28b2e241 0x8dced79b 0x1c77f496 // method "setBoxes(uint64,byte[],string)void", method "checkKeys()void", method "createManyInts()void", method "setManyInts(uint64,uint64)void", method "sumManyInts()uint64", method "deleteBoxes()void", method "indirectExtractAndReplace()void", method "readBoxes()(uint64,byte[],string,uint64)", method "boxesExist()(bool,bool,bool,bool)", method "sliceBox()void", method "arc4Box()void", method "testBoxRef()void", method "createBools()void", method "setBool(uint64,bool)void", method "sumBools(uint64)uint64"
    txna ApplicationArgs 0
    match main_setBoxes_route@6 main_checkKeys_route@7 main_createManyInts_route@8 main_setManyInts_route@9 main_sumManyInts_route@10 main_deleteBoxes_route@11 main_indirectExtractAndReplace_route@12 main_readBoxes_route@13 main_boxesExist_route@14 main_sliceBox_route@15 main_arc4Box_route@16 main_testBoxRef_route@17 main_createBools_route@18 main_setBool_route@19 main_sumBools_route@20
    err

main_sumBools_route@20:
    // tests/approvals/box-proxies.algo.ts:510
    // sumBools(stopAtTotal: uint64): uint64 {
    txna ApplicationArgs 1
    btoi
    bury 2
    // tests/approvals/box-proxies.algo.ts:511
    // ensureBudget(13_000)
    pushint 13000 // 13000
    intc_1 // 0
    callsub ensure_budget
    // tests/approvals/box-proxies.algo.ts:512
    // let total: uint64 = 0
    intc_1 // 0
    bury 1
    // tests/approvals/box-proxies.algo.ts:352
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 5 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:513
    // for (const value of this.tooManyBools.value) {
    box_len
    bury 1
    assert // Box must have value
    intc_1 // 0
    bury 3

main_for_header@28:
    // tests/approvals/box-proxies.algo.ts:513
    // for (const value of this.tooManyBools.value) {
    dig 2
    pushint 33000 // 33000
    <
    bz main_block@35
    dig 2
    dup
    intc_2 // 8
    /
    swap
    intc_2 // 8
    %
    // tests/approvals/box-proxies.algo.ts:352
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 5 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:513
    // for (const value of this.tooManyBools.value) {
    uncover 2
    intc_0 // 1
    box_extract
    swap
    getbit
    // tests/approvals/box-proxies.algo.ts:514
    // if (value) {
    bz main_after_if_else@31
    // tests/approvals/box-proxies.algo.ts:515
    // total += 1
    dup
    intc_0 // 1
    +
    bury 1

main_after_if_else@31:
    // tests/approvals/box-proxies.algo.ts:517
    // if (total === stopAtTotal) {
    dup
    dig 2
    ==
    bnz main_block@35
    dig 2
    intc_0 // 1
    +
    bury 3
    b main_for_header@28

main_block@35:
    // tests/approvals/box-proxies.algo.ts:510
    // sumBools(stopAtTotal: uint64): uint64 {
    dup
    itob
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_setBool_route@19:
    // tests/approvals/box-proxies.algo.ts:506
    // setBool(index: uint64, value: boolean) {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_1 // 0
    getbit
    // tests/approvals/box-proxies.algo.ts:507
    // this.tooManyBools.value[index] = value
    dig 1
    intc_2 // 8
    /
    uncover 2
    intc_2 // 8
    %
    // tests/approvals/box-proxies.algo.ts:352
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 5 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:507
    // this.tooManyBools.value[index] = value
    dig 2
    intc_0 // 1
    box_extract
    dig 1
    intc_2 // 8
    <
    assert // index access is out of bounds
    swap
    uncover 3
    setbit
    // tests/approvals/box-proxies.algo.ts:352
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 5 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:507
    // this.tooManyBools.value[index] = value
    cover 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:506
    // setBool(index: uint64, value: boolean) {
    intc_0 // 1
    return

main_createBools_route@18:
    // tests/approvals/box-proxies.algo.ts:352
    // tooManyBools = Box<FixedArray<boolean, 33_000>>({ key: 'tooManyBools' })
    bytec 5 // "tooManyBools"
    // tests/approvals/box-proxies.algo.ts:503
    // this.tooManyBools.create()
    pushint 4125 // 4125
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:502
    // createBools() {
    intc_0 // 1
    return

main_testBoxRef_route@17:
    // tests/approvals/box-proxies.algo.ts:466
    // assert(!boxRef1.exists, 'no data')
    bytec_0 // "blob"
    box_len
    bury 1
    !
    assert // no data
    // tests/approvals/box-proxies.algo.ts:471
    // assert(boxRef1.create({ size: Uint64(32) }))
    bytec_0 // "blob"
    pushint 32 // 32
    box_create
    assert
    // tests/approvals/box-proxies.algo.ts:474
    // const senderBytes = Txn.sender.bytes
    txn Sender
    // tests/approvals/box-proxies.algo.ts:475
    // const appAddress = Global.currentApplicationAddress.bytes
    global CurrentApplicationAddress
    // tests/approvals/box-proxies.algo.ts:477
    // boxRef1.replace(0, senderBytes)
    bytec_0 // "blob"
    intc_1 // 0
    dig 3
    box_replace
    // tests/approvals/box-proxies.algo.ts:478
    // boxRef1.resize(8000)
    bytec_0 // "blob"
    pushint 8000 // 8000
    box_resize
    // tests/approvals/box-proxies.algo.ts:479
    // boxRef1.splice(0, 0, appAddress)
    bytec_0 // "blob"
    intc_1 // 0
    dup
    dig 3
    box_splice
    // tests/approvals/box-proxies.algo.ts:480
    // boxRef1.replace(64, value3)
    bytec_0 // "blob"
    pushint 64 // 64
    bytec 10 // "hello"
    box_replace
    // tests/approvals/box-proxies.algo.ts:481
    // const prefix = boxRef1.extract(0, 32 * 2 + value3.length)
    bytec_0 // "blob"
    intc_1 // 0
    pushint 69 // 69
    box_extract
    // tests/approvals/box-proxies.algo.ts:482
    // assert(prefix === appAddress.concat(senderBytes).concat(value3))
    dig 1
    dig 3
    concat
    bytec 10 // "hello"
    concat
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:484
    // boxRef1.delete()
    bytec_0 // "blob"
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:487
    // const [value, exists] = boxRef1.maybe()
    bytec_0 // "blob"
    box_get
    // tests/approvals/box-proxies.algo.ts:488
    // assert(!exists)
    dup
    !
    assert
    // tests/approvals/box-proxies.algo.ts:489
    // assert(value === Bytes(''))
    dig 1
    pushbytes ""
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:490
    // assert(boxRef1.get({ default: senderBytes }) === senderBytes)
    dig 3
    cover 2
    select
    dig 2
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:492
    // boxRef1.value = senderBytes.concat(appAddress)
    concat
    bytec_0 // "blob"
    box_del
    pop
    bytec_0 // "blob"
    swap
    box_put
    // tests/approvals/box-proxies.algo.ts:493
    // assert(boxRef1.exists, 'Blob exists')
    bytec_0 // "blob"
    box_len
    pop
    // tests/approvals/box-proxies.algo.ts:494
    // assert(boxRef1.length === 64)
    pushint 64 // 64
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:346
    // boxRef = Box<bytes>({ key: 'boxRef' })
    bytec 11 // "boxRef"
    // tests/approvals/box-proxies.algo.ts:497
    // this.boxRef.create({ size: Uint64(32) })
    pushint 32 // 32
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:346
    // boxRef = Box<bytes>({ key: 'boxRef' })
    bytec 11 // "boxRef"
    // tests/approvals/box-proxies.algo.ts:499
    // this.boxRef.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:463
    // testBoxRef() {
    intc_0 // 1
    return

main_arc4Box_route@16:
    // tests/approvals/box-proxies.algo.ts:456
    // boxD.value = new arc4.StaticArray(new arc4.Uint8(0), new arc4.Uint8(1), new arc4.Uint8(2), new arc4.Uint8(3))
    pushbytes "d"
    bytec 6 // 0x00010203
    box_put
    bytec 6 // 0x00010203
    // tests/approvals/box-proxies.algo.ts:457
    // assert(boxD.value[0].asUint64() === 0)
    intc_1 // 0
    getbyte
    !
    assert
    // tests/approvals/box-proxies.algo.ts:456
    // boxD.value = new arc4.StaticArray(new arc4.Uint8(0), new arc4.Uint8(1), new arc4.Uint8(2), new arc4.Uint8(3))
    bytec 6 // 0x00010203
    // tests/approvals/box-proxies.algo.ts:458
    // assert(boxD.value[1].asUint64() === 1)
    intc_0 // 1
    getbyte
    intc_0 // 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:456
    // boxD.value = new arc4.StaticArray(new arc4.Uint8(0), new arc4.Uint8(1), new arc4.Uint8(2), new arc4.Uint8(3))
    bytec 6 // 0x00010203
    // tests/approvals/box-proxies.algo.ts:459
    // assert(boxD.value[2].asUint64() === 2)
    intc_3 // 2
    getbyte
    intc_3 // 2
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:456
    // boxD.value = new arc4.StaticArray(new arc4.Uint8(0), new arc4.Uint8(1), new arc4.Uint8(2), new arc4.Uint8(3))
    bytec 6 // 0x00010203
    // tests/approvals/box-proxies.algo.ts:460
    // assert(boxD.value[3].asUint64() === 3)
    pushint 3 // 3
    getbyte
    pushint 3 // 3
    ==
    // tests/approvals/box-proxies.algo.ts:454
    // arc4Box() {
    return

main_sliceBox_route@15:
    // tests/approvals/box-proxies.algo.ts:447
    // box0.value = Bytes('Testing testing 123')
    pushbytes "0"
    box_del
    pop
    pushbytess "0" "Testing testing 123" // "0", "Testing testing 123"
    box_put
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:450
    // this.boxC.value = new arc4.Str('Hello')
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:450
    // this.boxC.value = new arc4.Str('Hello')
    pushbytes 0x000548656c6c6f
    box_put
    // tests/approvals/box-proxies.algo.ts:445
    // sliceBox() {
    intc_0 // 1
    return

main_boxesExist_route@14:
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:442
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    bury 1
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:442
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    cover 2
    pop
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:442
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    cover 3
    pop
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:442
    // return [this.boxA.exists, this.boxB.exists, this.boxC.exists, this.boxLarge.exists] as const
    box_len
    cover 4
    pop
    // tests/approvals/box-proxies.algo.ts:441
    // boxesExist(): readonly [boolean, boolean, boolean, boolean] {
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_0 // 1
    uncover 2
    setbit
    intc_3 // 2
    uncover 2
    setbit
    pushint 3 // 3
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_readBoxes_route@13:
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:526
    // return Uint64(box.value + 1)
    box_get
    assert // Box must have value
    btoi
    intc_0 // 1
    +
    // tests/approvals/box-proxies.algo.ts:438
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    intc_0 // 1
    -
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:438
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    box_get
    assert // Box must have value
    extract 2 0
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:438
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:438
    // return [Uint64(getBoxValuePlus1(this.boxA) - 1), this.boxB.value.native, this.boxC.value, this.boxLarge.value.e] as const
    intc 4 // 4096
    intc_2 // 8
    box_extract
    btoi
    // tests/approvals/box-proxies.algo.ts:437
    // readBoxes(): readonly [uint64, bytes, arc4.Str, uint64] {
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    pushbytes 0x0014
    concat
    dig 1
    len
    pushint 20 // 20
    +
    itob
    extract 6 2
    concat
    uncover 2
    itob
    concat
    swap
    concat
    swap
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_indirectExtractAndReplace_route@12:
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:432-433
    // const large = clone(this.boxLarge.value)
    // large.e += 1
    intc 4 // 4096
    intc_2 // 8
    box_extract
    // tests/approvals/box-proxies.algo.ts:433
    // large.e += 1
    btoi
    intc_0 // 1
    +
    itob
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:432-434
    // const large = clone(this.boxLarge.value)
    // large.e += 1
    // this.boxLarge.value = clone(large)
    intc 4 // 4096
    uncover 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:431
    // indirectExtractAndReplace() {
    intc_0 // 1
    return

main_deleteBoxes_route@11:
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:419
    // this.boxA.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:420
    // this.boxB.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:421
    // this.boxC.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:422
    // assert(this.boxA.get({ default: Uint64(42) }) === 42)
    box_get
    swap
    btoi
    pushint 42 // 42
    dig 1
    dig 3
    select
    pushint 42 // 42
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:423
    // assert(this.boxB.get({ default: new arc4.DynamicBytes(Bytes('42')) }).native === Bytes('42'))
    box_get
    bytec 12 // 0x00023432
    cover 2
    select
    extract 2 0
    bytec 13 // "42"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:424
    // assert(this.boxC.get({ default: new arc4.Str('42') }).native === '42')
    box_get
    bytec 12 // 0x00023432
    cover 2
    select
    extract 2 0
    bytec 13 // "42"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:427
    // assert(!aExists)
    swap
    !
    assert
    // tests/approvals/box-proxies.algo.ts:428
    // assert(a === 0)
    !
    assert
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:429
    // this.boxLarge.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:418
    // deleteBoxes() {
    intc_0 // 1
    return

main_sumManyInts_route@10:
    // tests/approvals/box-proxies.algo.ts:410
    // ensureBudget(10_500)
    pushint 10500 // 10500
    intc_1 // 0
    callsub ensure_budget
    // tests/approvals/box-proxies.algo.ts:411
    // let total = Uint64(0)
    intc_1 // 0
    bury 1
    // tests/approvals/box-proxies.algo.ts:348
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:412
    // for (const val of this.manyInts.value) {
    box_len
    bury 1
    assert // Box must have value
    intc_1 // 0
    bury 3

main_for_header@56:
    // tests/approvals/box-proxies.algo.ts:412
    // for (const val of this.manyInts.value) {
    dig 2
    pushint 513 // 513
    <
    bz main_after_for@58
    dig 2
    dup
    intc_2 // 8
    *
    // tests/approvals/box-proxies.algo.ts:348
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:412
    // for (const val of this.manyInts.value) {
    swap
    intc_2 // 8
    box_extract
    btoi
    // tests/approvals/box-proxies.algo.ts:413
    // total = total + val
    dig 2
    +
    bury 2
    intc_0 // 1
    +
    bury 3
    b main_for_header@56

main_after_for@58:
    // tests/approvals/box-proxies.algo.ts:409
    // sumManyInts() {
    dup
    itob
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_setManyInts_route@9:
    // tests/approvals/box-proxies.algo.ts:405
    // setManyInts(index: uint64, value: uint64) {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // tests/approvals/box-proxies.algo.ts:406
    // this.manyInts.value[index] = value
    swap
    intc_2 // 8
    *
    // tests/approvals/box-proxies.algo.ts:348
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:406
    // this.manyInts.value[index] = value
    swap
    uncover 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:405
    // setManyInts(index: uint64, value: uint64) {
    intc_0 // 1
    return

main_createManyInts_route@8:
    // tests/approvals/box-proxies.algo.ts:348
    // manyInts = Box<ManyInts>({ key: 'manyInts' })
    bytec 8 // "manyInts"
    // tests/approvals/box-proxies.algo.ts:402
    // this.manyInts.create()
    pushint 4104 // 4104
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:401
    // createManyInts() {
    intc_0 // 1
    return

main_checkKeys_route@7:
    // tests/approvals/box-proxies.algo.ts:394
    // checkKeys() {
    intc_0 // 1
    return

main_setBoxes_route@6:
    // tests/approvals/box-proxies.algo.ts:359
    // setBoxes(a: uint64, b: bytes, c: arc4.Str) {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    dup
    extract 2 0
    txna ApplicationArgs 3
    // tests/approvals/box-proxies.algo.ts:361
    // this.boxA.value = a
    uncover 3
    itob
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:361
    // this.boxA.value = a
    swap
    box_put
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:362
    // this.boxB.value = dynamicBytes
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:362
    // this.boxB.value = dynamicBytes
    dig 3
    box_put
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:363
    // this.boxC.value = c
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:363
    // this.boxC.value = c
    dig 1
    box_put
    // tests/approvals/box-proxies.algo.ts:344
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 9 // "boxD"
    // tests/approvals/box-proxies.algo.ts:364
    // this.boxD.value = dynamicBytes.native
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:344
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 9 // "boxD"
    // tests/approvals/box-proxies.algo.ts:364
    // this.boxD.value = dynamicBytes.native
    dig 2
    box_put
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:365
    // this.boxLarge.create()
    pushint 6160 // 6160
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:366
    // this.boxLarge.value.e = 42
    pushint 42 // 42
    itob
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:366
    // this.boxLarge.value.e = 42
    intc 4 // 4096
    uncover 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:367
    // this.boxLarge.replace(arc4.sizeOf<Bytes1024>() * 4, new arc4.Uint64(42).bytes)
    intc 4 // 4096
    pushbytes 0x000000000000002a
    box_replace
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:371
    // this.boxA.value += 3
    box_get
    assert // Box must have value
    btoi
    pushint 3 // 3
    +
    itob
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:371
    // this.boxA.value += 3
    swap
    box_put
    // tests/approvals/box-proxies.algo.ts:341
    // boxA = Box<uint64>({ key: 'boxA' })
    bytec_3 // "boxA"
    // tests/approvals/box-proxies.algo.ts:374
    // assert(this.boxA.length === 8)
    box_len
    pop
    intc_2 // 8
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:342
    // boxB = Box<arc4.DynamicBytes>({ key: 'b' })
    bytec 4 // "b"
    // tests/approvals/box-proxies.algo.ts:375
    // assert(this.boxB.length === dynamicBytes.bytes.length)
    box_len
    pop
    dig 3
    len
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:376
    // assert(this.boxC.length === c.bytes.length)
    box_len
    assert // Box must have value
    dig 1
    len
    swap
    dig 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:344
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 9 // "boxD"
    // tests/approvals/box-proxies.algo.ts:377
    // assert(this.boxD.length === dynamicBytes.native.length)
    box_len
    pop
    dig 3
    len
    swap
    dig 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:343
    // boxC = Box<arc4.Str>({ key: 'BOX_C' })
    bytec_1 // "BOX_C"
    // tests/approvals/box-proxies.algo.ts:380
    // assert(this.boxC.value.bytes.at(0) === c.bytes.at(0))
    box_get
    pop
    dup
    extract 0 1
    dig 4
    extract 0 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:381
    // assert(this.boxC.value.bytes.at(-1) === c.bytes.at(-1))
    dup
    len
    dup
    intc_0 // 1
    -
    dig 2
    swap
    intc_0 // 1
    extract3
    dig 4
    intc_0 // 1
    -
    dig 6
    swap
    intc_0 // 1
    extract3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:382
    // assert(this.boxC.value.bytes.slice(0, -1) === c.bytes.slice(0, -1))
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dup
    dig 2
    <
    dig 2
    swap
    select
    dig 3
    dig 2
    uncover 2
    substring3
    intc_1 // 0
    dig 6
    >=
    intc_1 // 0
    dig 7
    uncover 2
    select
    intc_0 // 1
    dig 7
    >=
    intc_0 // 1
    dig 8
    uncover 2
    select
    dig 7
    swap
    -
    dup
    dig 2
    <
    dig 2
    swap
    select
    dig 8
    dig 2
    uncover 2
    substring3
    uncover 2
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:383
    // assert(this.boxC.value.bytes.slice(0, 2) === c.bytes.slice(0, 2))
    intc_3 // 2
    dig 3
    >=
    intc_3 // 2
    uncover 4
    uncover 2
    select
    swap
    cover 3
    substring3
    intc_3 // 2
    dig 4
    >=
    intc_3 // 2
    uncover 5
    uncover 2
    select
    uncover 4
    uncover 3
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:344
    // boxD = Box<bytes>({ key: 'boxD' })
    bytec 9 // "boxD"
    // tests/approvals/box-proxies.algo.ts:386
    // assert(this.boxD.value.at(0) === dynamicBytes.native.at(0))
    box_get
    pop
    dup
    extract 0 1
    uncover 4
    extract 2 1
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:387
    // assert(this.boxD.value.at(-1) === dynamicBytes.native.at(-1))
    dup
    len
    dup
    intc_0 // 1
    -
    dig 2
    swap
    intc_0 // 1
    extract3
    dig 3
    intc_0 // 1
    -
    dig 5
    swap
    intc_0 // 1
    extract3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:388
    // assert(this.boxD.value.slice(0, -1) === dynamicBytes.native.slice(0, -1))
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dup
    dig 2
    <
    dig 2
    swap
    select
    dig 3
    dig 2
    uncover 2
    substring3
    intc_1 // 0
    dig 5
    >=
    intc_1 // 0
    dig 6
    uncover 2
    select
    intc_0 // 1
    dig 6
    >=
    intc_0 // 1
    dig 7
    uncover 2
    select
    dig 6
    swap
    -
    dup
    dig 2
    <
    dig 2
    swap
    select
    dig 7
    dig 2
    uncover 2
    substring3
    uncover 2
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:389
    // assert(this.boxD.value.slice(0, 5) === dynamicBytes.native.slice(0, 5))
    pushint 5 // 5
    dig 3
    >=
    pushint 5 // 5
    dig 4
    uncover 2
    select
    dig 4
    dig 3
    uncover 2
    substring3
    pushint 5 // 5
    dig 6
    >=
    pushint 5 // 5
    dig 7
    uncover 2
    select
    dig 7
    dig 3
    uncover 2
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:390
    // assert(this.boxD.value.slice(0, Uint64(2)) === dynamicBytes.native.slice(0, Uint64(2)))
    intc_3 // 2
    dig 3
    >=
    intc_3 // 2
    uncover 4
    uncover 2
    select
    swap
    cover 3
    substring3
    intc_3 // 2
    dig 3
    >=
    intc_3 // 2
    uncover 4
    uncover 2
    select
    swap
    cover 3
    substring3
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:347
    // boxLarge = Box<LargeStruct>({ key: 'boxLarge' })
    bytec_2 // "boxLarge"
    // tests/approvals/box-proxies.algo.ts:391
    // assert(this.boxLarge.length === arc4.sizeOf<LargeStruct>())
    box_len
    pop
    pushint 6160 // 6160
    ==
    // tests/approvals/box-proxies.algo.ts:359
    // setBoxes(a: uint64, b: bytes, c: arc4.Str) {
    return

main___algots__.defaultCreate@24:
    // tests/approvals/box-proxies.algo.ts:340
    // class Arc4BoxContract extends arc4.Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@6
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 14 // 0x068101
    itxn_field ApprovalProgram
    bytec 14 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_1 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub
