main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@24
    block@4: // abi_routing_L342
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "setBoxes(uint64,byte[],string)void" => block@6, method "checkKeys()void" => block@7, method "createManyInts()void" => block@8, method "setManyInts(uint64,uint64)void" => block@9, method "sumManyInts()uint64" => block@10, method "deleteBoxes()void" => block@11, method "indirectExtractAndReplace()void" => block@12, method "readBoxes()(uint64,byte[],string,uint64)" => block@13, method "boxesExist()(bool,bool,bool,bool)" => block@14, method "sliceBox()void" => block@15, method "arc4Box()void" => block@16, method "testBoxRef()void" => block@17, method "createBools()void" => block@18, method "setBool(uint64,bool)void" => block@19, method "sumBools(uint64)uint64" => block@20, * => block@23}
    block@6: // setBoxes_route_L361
        let reinterpret_Encoded(uint64)%0#3: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#1: uint64 = (btoi reinterpret_Encoded(uint64)%0#3)
        let dynamicBytes#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) dynamicBytes#0)
        let c#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let encoded_value%0#3: bytes[8] = (itob a#1)
        (box_put "boxA" encoded_value%0#3)
        (box_del "b")
        (box_put "b" dynamicBytes#0)
        (box_del "BOX_C")
        (box_put "BOX_C" c#0)
        (box_del "boxD")
        (box_put "boxD" b#0)
        (box_create "boxLarge" 6160u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        (box_replace "boxLarge" 4096u aggregate%val_as_bytes%0#0)
        (box_replace "boxLarge" 4096u 0x000000000000002a)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "boxA")
        (assert aggregate%box_get%1#0) // Box must have value
        let maybe_value_converted%0#1: uint64 = (btoi aggregate%box_get%0#0)
        let tmp%6#4: uint64 = (+ maybe_value_converted%0#1 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%6#4)
        (box_put "boxA" encoded_value%2#0)
        let (value%0#1: uint64, check%0#1: bool) = (box_len "boxA")
        let tmp%7#4: bool = (== value%0#1 8u)
        (assert tmp%7#4)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        let tmp%8#2: uint64 = (len dynamicBytes#0)
        let tmp%9#2: bool = (== value%1#0 tmp%8#2)
        (assert tmp%9#2)
        let (value%2#0: uint64, check%2#0: bool) = (box_len "BOX_C")
        (assert check%2#0) // Box must have value
        let tmp%10#2: uint64 = (len c#0)
        let tmp%11#2: bool = (== value%2#0 tmp%10#2)
        (assert tmp%11#2)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "boxD")
        let tmp%13#1: uint64 = (len b#0)
        let tmp%14#1: bool = (== value%3#0 tmp%13#1)
        (assert tmp%14#1)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "BOX_C")
        let extract%0#0: bytes = ((extract 0 1) aggregate%box_get%2#0)
        let extract%1#0: bytes = ((extract 0 1) c#0)
        let tmp%15#1: bool = (== extract%0#0 extract%1#0)
        (assert tmp%15#1)
        let tmp%16#1: uint64 = (len aggregate%box_get%2#0)
        let tmp%17#0: uint64 = (- tmp%16#1 1u)
        let extract%2#0: bytes = (extract3 aggregate%box_get%2#0 tmp%17#0 1u)
        let tmp%19#0: uint64 = (- tmp%10#2 1u)
        let extract%3#0: bytes = (extract3 c#0 tmp%19#0 1u)
        let tmp%20#0: bool = (== extract%2#0 extract%3#0)
        (assert tmp%20#0)
        let is_out_of_bounds%0#1: bool = (>= 0u tmp%16#1)
        let bounded_index%0#1: uint64 = (select 0u tmp%16#1 is_out_of_bounds%0#1)
        let is_out_of_bounds%1#1: bool = (>= 1u tmp%16#1)
        let bounded_offset%0#0: uint64 = (select 1u tmp%16#1 is_out_of_bounds%1#1)
        let bounded_index%1#1: uint64 = (- tmp%16#1 bounded_offset%0#0)
        let end_before_start%0#0: bool = (< bounded_index%1#1 bounded_index%0#1)
        let end%0#0: uint64 = (select bounded_index%1#1 bounded_index%0#1 end_before_start%0#0)
        let tmp%21#0: bytes = (substring3 aggregate%box_get%2#0 bounded_index%0#1 end%0#0)
        let is_out_of_bounds%2#1: bool = (>= 0u tmp%10#2)
        let bounded_index%2#1: uint64 = (select 0u tmp%10#2 is_out_of_bounds%2#1)
        let is_out_of_bounds%3#1: bool = (>= 1u tmp%10#2)
        let bounded_offset%1#0: uint64 = (select 1u tmp%10#2 is_out_of_bounds%3#1)
        let bounded_index%3#1: uint64 = (- tmp%10#2 bounded_offset%1#0)
        let end_before_start%1#0: bool = (< bounded_index%3#1 bounded_index%2#1)
        let end%1#0: uint64 = (select bounded_index%3#1 bounded_index%2#1 end_before_start%1#0)
        let tmp%22#0: bytes = (substring3 c#0 bounded_index%2#1 end%1#0)
        let tmp%23#0: bool = (== tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        let is_out_of_bounds%5#0: bool = (>= 2u tmp%16#1)
        let bounded_index%5#0: uint64 = (select 2u tmp%16#1 is_out_of_bounds%5#0)
        let tmp%24#0: bytes = (substring3 aggregate%box_get%2#0 bounded_index%0#1 bounded_index%5#0)
        let is_out_of_bounds%7#0: bool = (>= 2u tmp%10#2)
        let bounded_index%7#0: uint64 = (select 2u tmp%10#2 is_out_of_bounds%7#0)
        let tmp%25#0: bytes = (substring3 c#0 bounded_index%2#1 bounded_index%7#0)
        let tmp%26#0: bool = (== tmp%24#0 tmp%25#0)
        (assert tmp%26#0)
        let (aggregate%box_get%12#0: bytes, aggregate%box_get%13#0: bool) = (box_get "boxD")
        let extract%4#0: bytes = ((extract 0 1) aggregate%box_get%12#0)
        let extract%5#0: bytes = ((extract 2 1) dynamicBytes#0)
        let tmp%28#0: bool = (== extract%4#0 extract%5#0)
        (assert tmp%28#0)
        let tmp%29#0: uint64 = (len aggregate%box_get%12#0)
        let tmp%30#0: uint64 = (- tmp%29#0 1u)
        let extract%6#0: bytes = (extract3 aggregate%box_get%12#0 tmp%30#0 1u)
        let tmp%34#0: uint64 = (- tmp%13#1 1u)
        let extract%7#0: bytes = (extract3 b#0 tmp%34#0 1u)
        let tmp%35#0: bool = (== extract%6#0 extract%7#0)
        (assert tmp%35#0)
        let is_out_of_bounds%8#0: bool = (>= 0u tmp%29#0)
        let bounded_index%8#0: uint64 = (select 0u tmp%29#0 is_out_of_bounds%8#0)
        let is_out_of_bounds%9#0: bool = (>= 1u tmp%29#0)
        let bounded_offset%2#0: uint64 = (select 1u tmp%29#0 is_out_of_bounds%9#0)
        let bounded_index%9#0: uint64 = (- tmp%29#0 bounded_offset%2#0)
        let end_before_start%2#0: bool = (< bounded_index%9#0 bounded_index%8#0)
        let end%2#0: uint64 = (select bounded_index%9#0 bounded_index%8#0 end_before_start%2#0)
        let tmp%36#0: bytes = (substring3 aggregate%box_get%12#0 bounded_index%8#0 end%2#0)
        let is_out_of_bounds%10#0: bool = (>= 0u tmp%13#1)
        let bounded_index%10#0: uint64 = (select 0u tmp%13#1 is_out_of_bounds%10#0)
        let is_out_of_bounds%11#0: bool = (>= 1u tmp%13#1)
        let bounded_offset%3#0: uint64 = (select 1u tmp%13#1 is_out_of_bounds%11#0)
        let bounded_index%11#0: uint64 = (- tmp%13#1 bounded_offset%3#0)
        let end_before_start%3#0: bool = (< bounded_index%11#0 bounded_index%10#0)
        let end%3#0: uint64 = (select bounded_index%11#0 bounded_index%10#0 end_before_start%3#0)
        let tmp%38#0: bytes = (substring3 b#0 bounded_index%10#0 end%3#0)
        let tmp%39#0: bool = (== tmp%36#0 tmp%38#0)
        (assert tmp%39#0)
        let is_out_of_bounds%13#0: bool = (>= 5u tmp%29#0)
        let bounded_index%13#0: uint64 = (select 5u tmp%29#0 is_out_of_bounds%13#0)
        let tmp%40#0: bytes = (substring3 aggregate%box_get%12#0 bounded_index%8#0 bounded_index%13#0)
        let is_out_of_bounds%15#0: bool = (>= 5u tmp%13#1)
        let bounded_index%15#0: uint64 = (select 5u tmp%13#1 is_out_of_bounds%15#0)
        let tmp%42#0: bytes = (substring3 b#0 bounded_index%10#0 bounded_index%15#0)
        let tmp%43#0: bool = (== tmp%40#0 tmp%42#0)
        (assert tmp%43#0)
        let is_out_of_bounds%17#0: bool = (>= 2u tmp%29#0)
        let bounded_index%17#0: uint64 = (select 2u tmp%29#0 is_out_of_bounds%17#0)
        let tmp%44#0: bytes = (substring3 aggregate%box_get%12#0 bounded_index%8#0 bounded_index%17#0)
        let is_out_of_bounds%19#0: bool = (>= 2u tmp%13#1)
        let bounded_index%19#0: uint64 = (select 2u tmp%13#1 is_out_of_bounds%19#0)
        let tmp%46#0: bytes = (substring3 b#0 bounded_index%10#0 bounded_index%19#0)
        let tmp%47#0: bool = (== tmp%44#0 tmp%46#0)
        (assert tmp%47#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "boxLarge")
        let tmp%48#0: bool = (== value%4#0 6160u)
        (assert tmp%48#0)
        exit 1u
    block@7: // checkKeys_route_L396
        exit 1u
    block@8: // createManyInts_route_L403
        (box_create "manyInts" 4104u)
        exit 1u
    block@9: // setManyInts_route_L407
        let reinterpret_Encoded(uint64)%0#2: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#1: uint64 = (btoi reinterpret_Encoded(uint64)%0#2)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let box%element_offset%0#1: uint64 = (* index#1 8u)
        (box_replace "manyInts" box%element_offset%0#1 reinterpret_Encoded(uint64)%1#0)
        exit 1u
    block@10: // sumManyInts_route_L411
        _puya_lib.util.ensure_budget(10500u, 0u)
        let total#5: uint64 = 0u
        let (aggregate%box_get%24#0: uint64, aggregate%box_get%25#0: bool) = (box_len "manyInts")
        (assert aggregate%box_get%25#0) // Box must have value
        let item_index_internal%0#3: uint64 = 0u
        goto block@56
    block@56: // for_header_L414
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@10, item_index_internal%0#5 <- block@57)
        let total#6: uint64 = φ(total#5 <- block@10, total#7 <- block@57)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 513u)
        goto continue_looping%0#1 ? block@57 : block@58
    block@57: // for_body_L414
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#4 8u)
        let box%box_extract%0#4: Encoded(uint64) = (box_extract "manyInts" box%element_offset%0#0 8u)
        let temp#1: uint64 = (btoi box%box_extract%0#4)
        let total#7: uint64 = (+ total#6 temp#1)
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@56
    block@58: // after_for_L414
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#6)
        let tmp%2#8: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%2#8)
        exit 1u
    block@11: // deleteBoxes_route_L420
        (box_del "boxA")
        (box_del "b")
        (box_del "BOX_C")
        let (maybe_value%0#0: bytes, aExists#0: bool) = (box_get "boxA")
        let a#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#1: uint64 = (select 42u a#0 aExists#0)
        let tmp%0#9: bool = (== state_get%0#1 42u)
        (assert tmp%0#9)
        let (maybe_value%1#1: bytes, maybe_exists%1#2: bool) = (box_get "b")
        let state_get%1#0: bytes = (select 0x00023432 maybe_value%1#1 maybe_exists%1#2)
        let tmp%1#8: bytes = ((extract 2 0) state_get%1#0)
        let tmp%2#7: bool = (== tmp%1#8 "42")
        (assert tmp%2#7)
        let (maybe_value%2#0: bytes, maybe_exists%2#2: bool) = (box_get "BOX_C")
        let state_get%2#0: bytes = (select 0x00023432 maybe_value%2#0 maybe_exists%2#2)
        let tmp%4#6: string = ((extract 2 0) state_get%2#0)
        let tmp%5#4: bool = (== tmp%4#6 "42")
        (assert tmp%5#4)
        let tmp%6#3: bool = (! aExists#0)
        (assert tmp%6#3)
        let tmp%7#3: bool = (! a#0)
        (assert tmp%7#3)
        (box_del "boxLarge")
        exit 1u
    block@12: // indirectExtractAndReplace_route_L433
        let box%box_extract%0#3: Encoded(uint64) = (box_extract "boxLarge" 4096u 8u)
        let values%0#1: uint64 = (btoi box%box_extract%0#3)
        let tmp%0#8: uint64 = (+ values%0#1 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#8)
        (box_replace "boxLarge" 4096u aggregate%val_as_bytes%2#0)
        exit 1u
    block@13: // readBoxes_route_L439
        let (aggregate%box_get%26#0: bytes, aggregate%box_get%27#0: bool) = (box_get "boxA")
        (assert aggregate%box_get%27#0) // Box must have value
        let maybe_value_converted%0#2: uint64 = (btoi aggregate%box_get%26#0)
        let tmp%0#10: uint64 = (+ maybe_value_converted%0#2 1u)
        let tmp%1#7: uint64 = (- tmp%0#10 1u)
        let (aggregate%box_get%28#0: bytes, aggregate%box_get%29#0: bool) = (box_get "b")
        (assert aggregate%box_get%29#0) // Box must have value
        let tmp%2#6: bytes = ((extract 2 0) aggregate%box_get%28#0)
        let (aggregate%box_get%30#0: bytes, aggregate%box_get%31#0: bool) = (box_get "BOX_C")
        (assert aggregate%box_get%31#0) // Box must have value
        let box%box_extract%0#2: Encoded(uint64) = (box_extract "boxLarge" 4096u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#2)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%1#7)
        let aggregate%length%1#0: uint64 = (len tmp%2#6)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%2#6)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%3#0 0x0014)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%1#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 20u aggregate%data_length%0#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%val_as_bytes%4#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%box_get%30#0)
        let tmp%5#3: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%5#3)
        exit 1u
    block@14: // boxesExist_route_L443
        let (_%0#1: uint64, maybe_exists%0#1: bool) = (box_len "boxA")
        let (_%1#1: uint64, maybe_exists%1#1: bool) = (box_len "b")
        let (_%2#1: uint64, maybe_exists%2#1: bool) = (box_len "BOX_C")
        let (_%3#1: uint64, maybe_exists%3#0: bool) = (box_len "boxLarge")
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#1)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u maybe_exists%1#1)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u maybe_exists%2#1)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u maybe_exists%3#0)
        let tmp%5#2: bytes = (concat 0x151f7c75 aggregate%set_bit%2#0)
        (log tmp%5#2)
        exit 1u
    block@15: // sliceBox_route_L447
        (box_del "0")
        (box_put "0" "Testing testing 123")
        (box_del "BOX_C")
        (box_put "BOX_C" 0x000548656c6c6f)
        exit 1u
    block@16: // arc4Box_route_L456
        (box_put "d" 0x00010203)
        let tmp%0#4: uint64 = (getbyte 0x00010203 0u)
        let tmp%1#4: bool = (! tmp%0#4)
        (assert tmp%1#4)
        let tmp%2#3: uint64 = (getbyte 0x00010203 1u)
        let tmp%3#3: bool = (== tmp%2#3 1u)
        (assert tmp%3#3)
        let tmp%4#2: uint64 = (getbyte 0x00010203 2u)
        let tmp%5#1: bool = (== tmp%4#2 2u)
        (assert tmp%5#1)
        let tmp%6#2: uint64 = (getbyte 0x00010203 3u)
        let tmp%7#2: bool = (== tmp%6#2 3u)
        (assert tmp%7#2)
        exit 1u
    block@17: // testBoxRef_route_L465
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#3: bool = (! maybe_exists%0#0)
        (assert tmp%0#3) // no data
        let tmp%2#2: bool = (box_create "blob" 32u)
        (assert tmp%2#2)
        let senderBytes#0: bytes[32] = (txn Sender)
        let appAddress#0: bytes[32] = (global CurrentApplicationAddress)
        (box_replace "blob" 0u senderBytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u appAddress#0)
        (box_replace "blob" 64u "hello")
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%6#1: bytes = (concat appAddress#0 senderBytes#0)
        let tmp%7#1: bytes = (concat tmp%6#1 "hello")
        let tmp%8#1: bool = (== prefix#0 tmp%7#1)
        (assert tmp%8#1)
        (box_del "blob")
        let (value#1: bytes, exists#0: bool) = (box_get "blob")
        let tmp%10#1: bool = (! exists#0)
        (assert tmp%10#1)
        let tmp%11#1: bool = (== value#1 "")
        (assert tmp%11#1)
        let state_get%0#0: bytes = (select senderBytes#0 value#1 exists#0)
        let tmp%12#0: bool = (== state_get%0#0 senderBytes#0)
        (assert tmp%12#0)
        let tmp%13#0: bytes = (concat senderBytes#0 appAddress#0)
        (box_del "blob")
        (box_put "blob" tmp%13#0)
        let (_%3#0: uint64, maybe_exists%5#0: bool) = (box_len "blob")
        let tmp%14#0: bool = (== _%3#0 64u)
        (assert tmp%14#0)
        (box_create "boxRef" 32u)
        (box_del "boxRef")
        exit 1u
    block@18: // createBools_route_L504
        (box_create "tooManyBools" 4125u)
        exit 1u
    block@19: // setBool_route_L508
        let reinterpret_Encoded(uint64)%0#1: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#1)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let value#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let box%element_byte_offset%0#1: uint64 = (/ index#0 8u)
        let box%element_bit_offset%0#1: uint64 = (% index#0 8u)
        let box%box_extract%0#1: Encoded(bool1[8]) = (box_extract "tooManyBools" box%element_byte_offset%0#1 1u)
        let aggregate%lt%0#0: bool = (< box%element_bit_offset%0#1 8u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%updated_target%0#0: Encoded(bool1[8]) = (setbit box%box_extract%0#1 box%element_bit_offset%0#1 value#0)
        (box_replace "tooManyBools" box%element_byte_offset%0#1 aggregate%updated_target%0#0)
        exit 1u
    block@20: // sumBools_route_L512
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let stopAtTotal#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        _puya_lib.util.ensure_budget(13000u, 0u)
        let total#0: uint64 = 0u
        let (aggregate%box_get%44#0: uint64, aggregate%box_get%45#0: bool) = (box_len "tooManyBools")
        (assert aggregate%box_get%45#0) // Box must have value
        let item_index_internal%0#0: uint64 = 0u
        goto block@28
    block@28: // for_header_L515
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@20, item_index_internal%0#2 <- block@33)
        let total#1: uint64 = φ(total#0 <- block@20, total#3 <- block@33)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 33000u)
        goto continue_looping%0#0 ? block@29 : block@34
    block@29: // for_body_L515
        let box%element_byte_offset%0#0: uint64 = (/ item_index_internal%0#1 8u)
        let box%element_bit_offset%0#0: uint64 = (% item_index_internal%0#1 8u)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tooManyBools" box%element_byte_offset%0#0 1u)
        let temp#0: bool = (getbit box%box_extract%0#0 box%element_bit_offset%0#0)
        goto temp#0 ? block@30 : block@31
    block@30: // if_body_L516
        let total#2: uint64 = (+ total#1 1u)
        goto block@31
    block@31: // after_if_else_L516
        let total#3: uint64 = φ(total#1 <- block@29, total#2 <- block@30)
        let tmp%1#2: bool = (== total#3 stopAtTotal#0)
        goto tmp%1#2 ? block@32 : block@33
    block@32: // if_body_L519
        goto block@35
    block@33: // after_if_else_L519
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@28
    block@34: // after_for_L515
        goto block@35
    block@35: // L515
        let total#4: uint64 = φ(total#3 <- block@32, total#1 <- block@34)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob total#4)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%5#0)
        (log tmp%3#1)
        exit 1u
    block@23: // after_if_else_L342
        fail
    block@24: // __algots__.defaultCreate_L342
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let required_budget_with_buffer#0: uint64 = (+ required_budget#0 10u)
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        goto_nth [block@3, block@4][fee_source#0] else goto block@5
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 