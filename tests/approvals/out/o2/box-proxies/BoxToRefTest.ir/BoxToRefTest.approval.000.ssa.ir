main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/box-proxies.algo.ts::BoxToRefTest.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::BoxToRefTest.__puya_arc4_router__() -> bool:
    block@0: // L237
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L237
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@2, * => block@3}
    block@2: // test_route_L240
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/box-proxies.algo.ts::BoxToRefTest.test[routing]()
        goto block@3
    block@3: // switch_case_next_L237
        goto block@5
    block@4: // __algots__.defaultCreate_L237
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/box-proxies.algo.ts::BoxToRefTest.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L237
        exit 0u

subroutine tests/approvals/box-proxies.algo.ts::BoxToRefTest.test[routing]() -> void:
    block@0: // L240
        tests/approvals/box-proxies.algo.ts::BoxToRefTest.test()
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::BoxToRefTest.test() -> void:
    block@0: // L240
        let materialized_values%0#0: account = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "" materialized_values%0#0)
        let boxForCaller#0: bytes = box_prefixed_key%0#0
        (box_create boxForCaller#0 4u)
        let boxRef#0: bytes = boxForCaller#0
        (box_replace boxRef#0 0u 0x7b)
        let storage_value%0#0: bytes = box_read(boxForCaller#0)
        let array_item%0#0: Encoded(uint8) = extract_value(storage_value%0#0, 0u)
        let tmp%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%1#0: bool = (== tmp%0#0 123u)
        (assert tmp%1#0) // First array item in box should be 123
        return 

subroutine tests/approvals/box-proxies.algo.ts::BoxToRefTest.__algots__.defaultCreate() -> void:
    block@0: // L237
        return 