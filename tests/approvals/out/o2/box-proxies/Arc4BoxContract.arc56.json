{
    "name": "Arc4BoxContract",
    "structs": {
        "DynamicArrayInAStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "arr2",
                "type": "uint64[]"
            }
        ],
        "LargeStruct": [
            {
                "name": "a",
                "type": "byte[1024]"
            },
            {
                "name": "b",
                "type": "byte[1024]"
            },
            {
                "name": "c",
                "type": "byte[1024]"
            },
            {
                "name": "d",
                "type": "byte[1024]"
            },
            {
                "name": "e",
                "type": "uint64"
            },
            {
                "name": "f",
                "type": "byte[1024]"
            },
            {
                "name": "g",
                "type": "byte[1024]"
            },
            {
                "name": "h",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "setBoxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkKeys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createManyInts",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setManyInts",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sumManyInts",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBoxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "indirectExtractAndReplace",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "readBoxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxesExist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sliceBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBoxRef",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createBools",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBool",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sumBools",
            "args": [
                {
                    "type": "uint64",
                    "name": "stopAtTotal"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "boxA": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym94QQ=="
                },
                "boxB": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "boxC": {
                    "keyType": "AVMString",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "boxD": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94RA=="
                },
                "boxRef": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94UmVm"
                },
                "boxLarge": {
                    "keyType": "AVMString",
                    "valueType": "LargeStruct",
                    "key": "Ym94TGFyZ2U="
                },
                "manyInts": {
                    "keyType": "AVMString",
                    "valueType": "uint64[513]",
                    "key": "bWFueUludHM="
                },
                "dynamicBox": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "ZHluYW1pY0JveA=="
                },
                "dynamicArrStruct": {
                    "keyType": "AVMString",
                    "valueType": "DynamicArrayInAStruct",
                    "key": "ZHluYW1pY0FyclN0cnVjdA=="
                },
                "tooManyBools": {
                    "keyType": "AVMString",
                    "valueType": "bool[33000]",
                    "key": "dG9vTWFueUJvb2xz"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        255,
                        607,
                        616,
                        622,
                        770,
                        962,
                        987
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        1357
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        355
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        878
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint8[])"
                },
                {
                    "pc": [
                        899
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        334
                    ],
                    "errorMessage": "invalid number of bytes for bool8"
                },
                {
                    "pc": [
                        236,
                        325,
                        822,
                        831,
                        861
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "no data"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAFAQAIAoAgJg8EYmxvYgVCT1hfQwhib3hMYXJnZQRib3hBAWIMdG9vTWFueUJvb2xzBAABAgMEFR98dQhtYW55SW50cwRib3hEBWhlbGxvBmJveFJlZgQAAjQyAjQyAwaBAYAARwIxG0EE2TEZFEQxGESCDwQn92tpBJEjYXoE9yY5SAQJvLpeBHoNPcgEfQObQwQ7w7L5BNzeYU0E4TkXIQRoO1xkBKWmJv4EkDnt3gQosuJBBI3O15sEHHf0ljYaAI4PAnICcAJnAksCDwHPAb4BeQFKARwA+QCUAIsAWgABADYaAUkVJBJEF0UCgchlI4gEVyNFAScFvUUBRCNFA0sCgeiBAgxBAChLAkkkCkwkGCcFTwIiukxTQQAFSSIIRQFJSwISQAAJSwIiCEUDQv/OSRYnB0xQsCJDNhoBSRUkEkQXNhoCSRUiEkQjU0sBJApPAiQYJwVLAiK6SwEkDERMTwNUJwVOArsiQycFgZ0guUgiQyi9RQEURCiBILlEMQAyCigjSwO7KIHAPtMoI0lLA9IogUAnCrsoI4FFuksBSwNQJwpQEkQovEgovkkUREsBgAASREsDTgJNSwISRFAovEgoTL8ovUiBQBJEJwuBILlIJwu8SCJDgAFkJwa/JwYjVRREJwYiVSISRCcGJVUlEkQnBoEDVYEDEkOAATC8SIICATATVGVzdGluZyB0ZXN0aW5nIDEyM78pvEgpgAcABUhlbGxvvyJDK71FAScEvU4CSCm9TgNIKr1OBEiAAQAjTwJUIk8CVCVPAlSBA08CVCcHTFCwIkMrvkQXIggiCScEvkRXAgApvkQqIQQkuhdPAxZLAxUWVwYCTwRQTIACABRQSwEVgRQIFlcGAlBPAhZQTFBMUCcHTFCwIkMqIQQkuhciCBYqIQRPArsiQyu8SCcEvEgpvEgrvkwXgSpLAUsDTYEqEkQnBL4nDE4CTVcCACcNEkQpvicMTgJNVwIAJw0SREwURBREKrxIIkOBhFIjiAJUI0UBJwi9RQFEI0UDSwKBgQQMQQAXSwJJJAsnCEwkuhdLAghFAiIIRQNC/+BJFicHTFCwIkM2GgFJFSQSRBc2GgJJFSQSREwkCycITE8CuyJDJwiBiCC5SCJDIkM2GgFJFSQSRBc2GgJJI1klCEsBFUlPAhJESwFXAgA2GgNJI1klCEsBFUlPAhJETwUWK0y/JwS8SCcESwW/KbxIKUsCvycJvEgnCUsDvyqBkDC5SIEqFiohBE8CuyohBIAIAAAAAAAAACq7K75EF4EDCBYrTL8rvUgkEkQnBL1ITwQSRCm9REsBEkQnCb1ISwMVTEsBEkQpvkhJVwABSwRXAAESREkVSSIJSwJMIlhLBCIJSwZMIlgSRCNLAQ8jSwJPAk0iSwIPIksDTwJNSwJMCUlLAgxLAkxNSwNLAk8CUiNLBg8jSwdPAk0iSwcPIksITwJNSwdMCUlLAgxLAkxNSwhLAk8CUk8CEkQlSwMPJU8ETwJNTE4DUiVLBA8lTwVPAk1PBE8DTwJSEkQnCb5ISVcAAU8EVwIBEkRJFUkiCUsCTCJYSwMiCUsFTCJYEkQjSwEPI0sCTwJNIksCDyJLA08CTUsCTAlJSwIMSwJMTUsDSwJPAlIjSwUPI0sGTwJNIksGDyJLB08CTUsGTAlJSwIMSwJMTUsHSwJPAlJPAhJEgQVLAw+BBUsETwJNSwRLA08CUoEFSwYPgQVLB08CTUsHSwNPAlISRCVLAw8lTwRPAk1MTgNSJUsDDyVPBE8CTUxOA1ISRCq9SIGQMBJDMRkUMRgUEEOKAgCL/oEKCIsAMgwNQQAqsYEGshCBBbIZJw6yHicOsh+L/40CAAsABLNC/9syALIBQv/1I7IBQv/viQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}