main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L139
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "createBoxes()void" => block@3, * => block@4}
    block@3: // createBoxes_route_L148
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        (box_create "a" 10u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "a")
        let tmp%0#2: bool = (== value%0#0 10u)
        (assert tmp%0#2)
        (box_create "b" 8u)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        let tmp%1#1: bool = (== value%1#0 8u)
        (assert tmp%1#1)
        (box_create "c" 40u)
        let (value%2#0: uint64, check%2#0: bool) = (box_len "c")
        let tmp%2#1: bool = (== value%2#0 40u)
        (assert tmp%2#1)
        (box_create "d" 2u)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "d")
        let tmp%3#1: bool = (== value%3#0 2u)
        (assert tmp%3#1)
        (box_create "e" 3u)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "e")
        let tmp%4#1: bool = (== value%4#0 3u)
        (assert tmp%4#1)
        (box_create "bool" 8u)
        let (value%5#0: uint64, check%5#0: bool) = (box_len "bool")
        let tmp%5#1: bool = (== value%5#0 8u)
        (assert tmp%5#1)
        (box_create "arc4b" 1u)
        let (value%6#0: uint64, check%6#0: bool) = (box_len "arc4b")
        let tmp%6#1: bool = (== value%6#0 1u)
        (assert tmp%6#1)
        exit 1u
    block@4: // switch_case_next_L139
        fail
    block@5: // __algots__.defaultCreate_L139
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u