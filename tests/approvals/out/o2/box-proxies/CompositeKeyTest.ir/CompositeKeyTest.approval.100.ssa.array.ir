main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L251
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((uint64,uint64),string)void" => block@3, * => block@4}
    block@3: // test_route_L254
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let key#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len key#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for (uint64,uint64)
        let tmp%1#1: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%1#1 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%1#0: uint64 = (len tmp%1#1)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for (len+utf8[])
        let val#0: string = ((extract 2 0) tmp%1#1)
        (box_del key#0)
        (box_put key#0 val#0)
        exit 1u
    block@4: // switch_case_next_L251
        fail
    block@5: // __algots__.defaultCreate_L251
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u