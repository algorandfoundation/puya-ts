#pragma version 10
#pragma typetrack false

// tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram() -> uint64:
main:
    intcblock 1 4 99 0
    bytecblock "one" "three" "A" "twowhat?" "what?" "abc" "aaaaaargh" 0xffffffff
    // tests/approvals/box-proxies.algo.ts:99
    // if (Txn.applicationId.id !== 0) {
    txn ApplicationID
    bz main_after_if_else@2
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:8
    // box.value = value
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:100
    // testBox(this.boxOne, 'aaaaaargh')
    bytec 6 // "aaaaaargh"
    // tests/approvals/box-proxies.algo.ts:8
    // box.value = value
    box_put
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:9
    // boxA.value = value
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:100
    // testBox(this.boxOne, 'aaaaaargh')
    bytec 6 // "aaaaaargh"
    // tests/approvals/box-proxies.algo.ts:9
    // boxA.value = value
    box_put
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:14
    // assert(box.value === boxA.value)
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:14
    // assert(box.value === boxA.value)
    box_get
    assert // Box must have value
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:16
    // assert(box.exists && boxA.exists)
    box_len
    bury 1
    bz main_bool_false@6
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:16
    // assert(box.exists && boxA.exists)
    box_len
    bury 1
    bz main_bool_false@6
    intc_0 // 1

main_bool_merge@7:
    // tests/approvals/box-proxies.algo.ts:16
    // assert(box.exists && boxA.exists)
    assert
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:18
    // assert(box.length)
    box_len
    assert // Box must have value
    assert
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:20
    // assert(box.delete(), 'delete failed')
    box_del
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:21
    // const isBoxADeleted = boxA.delete()
    box_del
    // tests/approvals/box-proxies.algo.ts:22
    // assert(isBoxADeleted, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:23
    // assert(!box.exists && !boxA.exists)
    box_len
    bury 1
    bnz main_bool_false@10
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:23
    // assert(!box.exists && !boxA.exists)
    box_len
    bury 1
    bnz main_bool_false@10
    intc_0 // 1

main_bool_merge@11:
    // tests/approvals/box-proxies.algo.ts:23
    // assert(!box.exists && !boxA.exists)
    assert
    // tests/approvals/box-proxies.algo.ts:6
    // const boxA = Box<string>({ key: Bytes('A') })
    bytec_2 // "A"
    // tests/approvals/box-proxies.algo.ts:26
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    box_get
    // tests/approvals/box-proxies.algo.ts:25
    // const defaultVal = 'O'
    pushbytes "O"
    // tests/approvals/box-proxies.algo.ts:26
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    cover 2
    select
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:26
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    box_get
    // tests/approvals/box-proxies.algo.ts:25
    // const defaultVal = 'O'
    pushbytes "O"
    // tests/approvals/box-proxies.algo.ts:26
    // assert(boxA.get({ default: defaultVal }) === box.get({ default: defaultVal }))
    cover 2
    select
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:28
    // let [, e] = box.maybe()
    box_get
    bury 1
    // tests/approvals/box-proxies.algo.ts:29
    // assert(!e)
    !
    assert
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:30
    // box.value = value
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:100
    // testBox(this.boxOne, 'aaaaaargh')
    bytec 6 // "aaaaaargh"
    // tests/approvals/box-proxies.algo.ts:30
    // box.value = value
    box_put
    // tests/approvals/box-proxies.algo.ts:94
    // boxOne = Box<string>({ key: 'one' })
    bytec_0 // "one"
    // tests/approvals/box-proxies.algo.ts:31
    // ;[, e] = box.maybe()
    box_get
    bury 1
    // tests/approvals/box-proxies.algo.ts:32
    // assert(e)
    assert
    // tests/approvals/box-proxies.algo.ts:102
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    pushint 256456 // 256456
    itob
    // tests/approvals/box-proxies.algo.ts:38
    // box(key).value = value
    bytec_3 // "twowhat?"
    box_del
    pop
    bytec_3 // "twowhat?"
    dig 1
    box_put
    // tests/approvals/box-proxies.algo.ts:102
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    bytec 4 // "what?"
    // tests/approvals/box-proxies.algo.ts:39
    // boxMap(key).value = value
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:102
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    bytec 4 // "what?"
    // tests/approvals/box-proxies.algo.ts:39
    // boxMap(key).value = value
    swap
    box_put
    // tests/approvals/box-proxies.algo.ts:102
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    bytec 4 // "what?"
    // tests/approvals/box-proxies.algo.ts:43
    // assert(boxMapItem.exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:48
    // assert(box(key).length)
    bytec_3 // "twowhat?"
    box_len
    assert // Box must have value
    assert
    // tests/approvals/box-proxies.algo.ts:50
    // assert(box(key).maybe()[1])
    bytec_3 // "twowhat?"
    box_get
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:52
    // assert(box(key).value === boxMap(key).value)
    bytec_3 // "twowhat?"
    box_get
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:102
    // testBoxMap(this.boxMapTwo, 'what?', itob(256456))
    bytec 4 // "what?"
    // tests/approvals/box-proxies.algo.ts:52
    // assert(box(key).value === boxMap(key).value)
    box_get
    assert // Box must have value
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:54
    // const isBoxDeleted = box(key).delete()
    bytec_3 // "twowhat?"
    box_del
    // tests/approvals/box-proxies.algo.ts:55
    // assert(isBoxDeleted, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:57
    // assert(box(`${key}x`).get({ default: Bytes('b') }) === boxMap(`${key}x`).get({ default: Bytes('b') }))
    pushbytes "twowhat?x"
    box_get
    pushbytes "b"
    cover 2
    select
    pushbytes "what?x"
    box_get
    pushbytes "b"
    cover 2
    select
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:60
    // const boxRef = BoxRef({ key: 'abc' })
    bytec 5 // "abc"
    // tests/approvals/box-proxies.algo.ts:66
    // if (!boxRef.exists) {
    box_len
    bury 1
    bnz main_else_body@17
    // tests/approvals/box-proxies.algo.ts:60
    // const boxRef = BoxRef({ key: 'abc' })
    bytec 5 // "abc"
    // tests/approvals/box-proxies.algo.ts:67
    // boxRef.create({ size: 1000 })
    pushint 1000 // 1000
    box_create
    pop

main_after_if_else@20:
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:71
    // if (box.exists) {
    box_len
    bury 1
    bz main_else_body@22
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:72
    // box.resize(4)
    intc_1 // 4
    box_resize

main_after_if_else@23:
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:76
    // const someBytes = Bytes.fromHex('FFFFFFFF')
    bytec 7 // 0xffffffff
    // tests/approvals/box-proxies.algo.ts:77
    // box.put(someBytes)
    box_put
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:79
    // assert(box.get({ default: Bytes() }) === Bytes.fromHex('FFFFFFFF'))
    box_get
    pushbytes 0x
    cover 2
    select
    bytec 7 // 0xffffffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:81
    // const maybeBox = box.maybe()
    box_get
    bury 1
    // tests/approvals/box-proxies.algo.ts:82
    // assert(maybeBox[1])
    assert
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:84
    // assert(box.value === Bytes.fromHex('FFFFFFFF'))
    box_get
    assert // Box must have value
    bytec 7 // 0xffffffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:85
    // box.splice(1, 1, Bytes.fromHex('00'))
    intc_0 // 1
    dup
    pushbytes 0x00
    box_splice
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:86
    // assert(box.value === Bytes.fromHex('FF00FFFF'))
    box_get
    assert // Box must have value
    pushbytes 0xff00ffff
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:88
    // const x = box.delete()
    box_del
    // tests/approvals/box-proxies.algo.ts:89
    // assert(x, 'delete failed')
    assert // delete failed
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:90
    // assert(!box.exists)
    box_len
    bury 1
    !
    assert

main_after_if_else@2:
    // tests/approvals/box-proxies.algo.ts:106
    // return true
    intc_0 // 1
    return

main_else_body@22:
    // tests/approvals/box-proxies.algo.ts:96
    // boxRefThree = BoxRef({ key: 'three' })
    bytec_1 // "three"
    // tests/approvals/box-proxies.algo.ts:74
    // box.create({ size: 4 })
    intc_1 // 4
    box_create
    pop
    b main_after_if_else@23

main_else_body@17:
    // tests/approvals/box-proxies.algo.ts:60
    // const boxRef = BoxRef({ key: 'abc' })
    bytec 5 // "abc"
    // tests/approvals/box-proxies.algo.ts:68
    // } else if (boxRef.length !== length) {
    box_len
    assert // Box must have value
    // tests/approvals/box-proxies.algo.ts:104
    // testBoxRef(this.boxRefThree, 99)
    intc_2 // 99
    // tests/approvals/box-proxies.algo.ts:68
    // } else if (boxRef.length !== length) {
    !=
    bz main_after_if_else@20
    // tests/approvals/box-proxies.algo.ts:60
    // const boxRef = BoxRef({ key: 'abc' })
    bytec 5 // "abc"
    // tests/approvals/box-proxies.algo.ts:104
    // testBoxRef(this.boxRefThree, 99)
    intc_2 // 99
    // tests/approvals/box-proxies.algo.ts:69
    // boxRef.resize(length)
    box_resize
    b main_after_if_else@20

main_bool_false@10:
    intc_3 // 0
    b main_bool_merge@11

main_bool_false@6:
    intc_3 // 0
    b main_bool_merge@7
