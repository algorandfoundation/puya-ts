main tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram:
    block@0: // L101
        let tmp%0#0: uint64 = (txn ApplicationID)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L102
        (box_del "one")
        (box_put "one" 0x0004000f0009616161616161726768000161)
        (box_del "A")
        (box_put "A" 0x0004000f0009616161616161726768000161)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "one")
        goto maybe_exists%0#0 ? block@4 : block@5
    block@4: // ternary_true_L15
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 2 0) item0%0#0)
        goto block@6
    block@5: // ternary_false_L15
        let ternary_result%0.0#1: bytes = undefined
        goto block@6
    block@6: // ternary_merge_L15
        let ternary_result%0.0#2: bytes = φ(item0%1#0 <- block@4, ternary_result%0.0#1 <- block@5)
        (assert maybe_exists%0#0) // Box must have value
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "A")
        goto maybe_exists%1#0 ? block@7 : block@8
    block@7: // ternary_true_L15
        let item_start_offset%2#0: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let item_end_offset%2#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let item0%2#0: bytes = (substring3 maybe_value%1#0 item_start_offset%2#0 item_end_offset%2#0)
        let item0%3#0: bytes = ((extract 2 0) item0%2#0)
        goto block@9
    block@8: // ternary_false_L15
        let ternary_result%1.0#1: bytes = undefined
        goto block@9
    block@9: // ternary_merge_L15
        let ternary_result%1.0#2: bytes = φ(item0%3#0 <- block@7, ternary_result%1.0#1 <- block@8)
        (assert maybe_exists%1#0) // Box must have value
        let tmp%2#1: bool = (== ternary_result%0.0#2 ternary_result%1.0#2)
        (assert tmp%2#1)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "one")
        goto maybe_exists%2#0 ? block@10 : block@11
    block@10: // ternary_true_L16
        let item_end_offset%4#0: uint64 = (extract_uint16 maybe_value%2#0 2u)
        let item_end_offset%5#0: uint64 = (len maybe_value%2#0)
        let item1%4#0: bytes = (substring3 maybe_value%2#0 item_end_offset%4#0 item_end_offset%5#0)
        let item1%5#0: bytes = ((extract 2 0) item1%4#0)
        goto block@12
    block@11: // ternary_false_L16
        let ternary_result%2.1#1: bytes = undefined
        goto block@12
    block@12: // ternary_merge_L16
        let ternary_result%2.1#2: bytes = φ(item1%5#0 <- block@10, ternary_result%2.1#1 <- block@11)
        (assert maybe_exists%2#0) // Box must have value
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "A")
        goto maybe_exists%3#0 ? block@13 : block@14
    block@13: // ternary_true_L16
        let item_end_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item_end_offset%7#0: uint64 = (len maybe_value%3#0)
        let item1%6#0: bytes = (substring3 maybe_value%3#0 item_end_offset%6#0 item_end_offset%7#0)
        let item1%7#0: bytes = ((extract 2 0) item1%6#0)
        goto block@15
    block@14: // ternary_false_L16
        let ternary_result%3.1#1: bytes = undefined
        goto block@15
    block@15: // ternary_merge_L16
        let ternary_result%3.1#2: bytes = φ(item1%7#0 <- block@13, ternary_result%3.1#1 <- block@14)
        (assert maybe_exists%3#0) // Box must have value
        let tmp%3#0: bool = (== ternary_result%2.1#2 ternary_result%3.1#2)
        (assert tmp%3#0)
        let (_%0#0: uint64, maybe_exists%4#0: bool) = (box_len "one")
        goto maybe_exists%4#0 ? block@16 : block@18
    block@16: // and_contd_L18
        let (_%1#0: uint64, maybe_exists%5#0: bool) = (box_len "A")
        goto maybe_exists%5#0 ? block@17 : block@18
    block@17: // bool_true_L18
        let and_result%0#0: bool = 1u
        goto block@19
    block@18: // bool_false_L18
        let and_result%0#1: bool = 0u
        goto block@19
    block@19: // bool_merge_L18
        let and_result%0#2: bool = φ(and_result%0#0 <- block@17, and_result%0#1 <- block@18)
        (assert and_result%0#2)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "one")
        (assert check%0#0) // Box must have value
        (assert value%0#0)
        let tmp%4#0: bool = (box_del "one")
        (assert tmp%4#0) // delete failed
        let isBoxADeleted#0: bool = (box_del "A")
        (assert isBoxADeleted#0) // delete failed
        let (_%2#0: uint64, maybe_exists%6#0: bool) = (box_len "one")
        goto maybe_exists%6#0 ? block@22 : block@20
    block@20: // and_contd_L25
        let (_%3#0: uint64, maybe_exists%7#0: bool) = (box_len "A")
        goto maybe_exists%7#0 ? block@22 : block@21
    block@21: // bool_true_L25
        let and_result%1#0: bool = 1u
        goto block@23
    block@22: // bool_false_L25
        let and_result%1#1: bool = 0u
        goto block@23
    block@23: // bool_merge_L25
        let and_result%1#2: bool = φ(and_result%1#0 <- block@21, and_result%1#1 <- block@22)
        (assert and_result%1#2)
        let (maybe_value%4#0: bytes, maybe_exists%8#0: bool) = (box_get "A")
        goto maybe_exists%8#0 ? block@24 : block@25
    block@24: // ternary_true_L28
        let item_start_offset%8#0: uint64 = (extract_uint16 maybe_value%4#0 0u)
        let item_end_offset%8#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item0%8#0: bytes = (substring3 maybe_value%4#0 item_start_offset%8#0 item_end_offset%8#0)
        let item0%9#0: bytes = ((extract 2 0) item0%8#0)
        goto block@26
    block@25: // ternary_false_L28
        let ternary_result%4.0#1: bytes = undefined
        goto block@26
    block@26: // ternary_merge_L28
        let ternary_result%4.0#2: bytes = φ(item0%9#0 <- block@24, ternary_result%4.0#1 <- block@25)
        goto maybe_exists%8#0 ? block@27 : block@28
    block@27: // ternary_true_L28
        goto block@29
    block@28: // ternary_false_L28
        let ternary_result%5.0#1: bytes = "O"
        goto block@29
    block@29: // ternary_merge_L28
        let ternary_result%5.0#2: bytes = φ(ternary_result%4.0#2 <- block@27, ternary_result%5.0#1 <- block@28)
        let (maybe_value%5#0: bytes, maybe_exists%9#0: bool) = (box_get "one")
        goto maybe_exists%9#0 ? block@30 : block@31
    block@30: // ternary_true_L28
        let item_start_offset%10#0: uint64 = (extract_uint16 maybe_value%5#0 0u)
        let item_end_offset%10#0: uint64 = (extract_uint16 maybe_value%5#0 2u)
        let item0%10#0: bytes = (substring3 maybe_value%5#0 item_start_offset%10#0 item_end_offset%10#0)
        let item0%11#0: bytes = ((extract 2 0) item0%10#0)
        goto block@32
    block@31: // ternary_false_L28
        let ternary_result%6.0#1: bytes = undefined
        goto block@32
    block@32: // ternary_merge_L28
        let ternary_result%6.0#2: bytes = φ(item0%11#0 <- block@30, ternary_result%6.0#1 <- block@31)
        goto maybe_exists%9#0 ? block@33 : block@34
    block@33: // ternary_true_L28
        goto block@35
    block@34: // ternary_false_L28
        let ternary_result%7.0#1: bytes = "O"
        goto block@35
    block@35: // ternary_merge_L28
        let ternary_result%7.0#2: bytes = φ(ternary_result%6.0#2 <- block@33, ternary_result%7.0#1 <- block@34)
        let tmp%5#0: bool = (== ternary_result%5.0#2 ternary_result%7.0#2)
        (assert tmp%5#0)
        let (maybe_value%6#0: bytes, maybe_exists%10#0: bool) = (box_get "A")
        goto maybe_exists%10#0 ? block@36 : block@37
    block@36: // ternary_true_L29
        let item_end_offset%12#0: uint64 = (extract_uint16 maybe_value%6#0 2u)
        let item_end_offset%13#0: uint64 = (len maybe_value%6#0)
        let item1%12#0: bytes = (substring3 maybe_value%6#0 item_end_offset%12#0 item_end_offset%13#0)
        let item1%13#0: bytes = ((extract 2 0) item1%12#0)
        goto block@38
    block@37: // ternary_false_L29
        let ternary_result%8.1#1: bytes = undefined
        goto block@38
    block@38: // ternary_merge_L29
        let ternary_result%8.1#2: bytes = φ(item1%13#0 <- block@36, ternary_result%8.1#1 <- block@37)
        goto maybe_exists%10#0 ? block@39 : block@40
    block@39: // ternary_true_L29
        goto block@41
    block@40: // ternary_false_L29
        let ternary_result%9.1#1: bytes = "0"
        goto block@41
    block@41: // ternary_merge_L29
        let ternary_result%9.1#2: bytes = φ(ternary_result%8.1#2 <- block@39, ternary_result%9.1#1 <- block@40)
        let (maybe_value%7#0: bytes, maybe_exists%11#0: bool) = (box_get "one")
        goto maybe_exists%11#0 ? block@42 : block@43
    block@42: // ternary_true_L29
        let item_end_offset%14#0: uint64 = (extract_uint16 maybe_value%7#0 2u)
        let item_end_offset%15#0: uint64 = (len maybe_value%7#0)
        let item1%14#0: bytes = (substring3 maybe_value%7#0 item_end_offset%14#0 item_end_offset%15#0)
        let item1%15#0: bytes = ((extract 2 0) item1%14#0)
        goto block@44
    block@43: // ternary_false_L29
        let ternary_result%10.1#1: bytes = undefined
        goto block@44
    block@44: // ternary_merge_L29
        let ternary_result%10.1#2: bytes = φ(item1%15#0 <- block@42, ternary_result%10.1#1 <- block@43)
        goto maybe_exists%11#0 ? block@45 : block@46
    block@45: // ternary_true_L29
        goto block@47
    block@46: // ternary_false_L29
        let ternary_result%11.1#1: bytes = "0"
        goto block@47
    block@47: // ternary_merge_L29
        let ternary_result%11.1#2: bytes = φ(ternary_result%10.1#2 <- block@45, ternary_result%11.1#1 <- block@46)
        let tmp%6#0: bool = (== ternary_result%9.1#2 ternary_result%11.1#2)
        (assert tmp%6#0)
        let (maybe_value%8#0: bytes, e#0: bool) = (box_get "one")
        let tmp%7#0: bool = (! e#0)
        (assert tmp%7#0)
        (box_del "one")
        (box_put "one" 0x0004000f0009616161616161726768000161)
        let (maybe_value%9#0: bytes, e#1: bool) = (box_get "one")
        (assert e#1)
        let value#0: bytes = (itob 256456u)
        (box_del "twowhat?")
        (box_put "twowhat?" value#0)
        (box_del "what?")
        (box_put "what?" value#0)
        let (_%0#1: uint64, maybe_exists%0#1: bool) = (box_len "what?")
        (assert maybe_exists%0#1)
        let (value%0#1: uint64, check%0#1: bool) = (box_len "twowhat?")
        (assert check%0#1) // Box must have value
        (assert value%0#1)
        let (maybe_value%0#1: bytes, maybe_exists%1#1: bool) = (box_get "twowhat?")
        (assert maybe_exists%1#1)
        let (maybe_value%1#1: bytes, maybe_exists%2#1: bool) = (box_get "twowhat?")
        (assert maybe_exists%2#1) // Box must have value
        let (maybe_value%2#1: bytes, maybe_exists%3#1: bool) = (box_get "what?")
        (assert maybe_exists%3#1) // Box must have value
        let tmp%8#0: bool = (== maybe_value%1#1 maybe_value%2#1)
        (assert tmp%8#0)
        let isBoxDeleted#0: bool = (box_del "twowhat?")
        (assert isBoxDeleted#0) // delete failed
        let (maybe_value%3#1: bytes, maybe_exists%4#1: bool) = (box_get "twowhat?x")
        let state_get%0#0: bytes = (select "b" maybe_value%3#1 maybe_exists%4#1)
        let (maybe_value%4#1: bytes, maybe_exists%5#1: bool) = (box_get "what?x")
        let state_get%1#0: bytes = (select "b" maybe_value%4#1 maybe_exists%5#1)
        let tmp%16#0: bool = (== state_get%0#0 state_get%1#0)
        (assert tmp%16#0)
        let (_%0#2: uint64, maybe_exists%0#2: bool) = (box_len "abc")
        goto maybe_exists%0#2 ? block@59 : block@58
    block@58: // if_body_L69
        (box_create "abc" 1000u)
        goto block@62
    block@59: // else_body_L71
        let (value%0#2: uint64, check%0#2: bool) = (box_len "abc")
        (assert check%0#2) // Box must have value
        let tmp%2#3: bool = (!= value%0#2 99u)
        goto tmp%2#3 ? block@60 : block@62
    block@60: // if_body_L71
        (box_resize "abc" 99u)
        goto block@62
    block@62: // after_if_else_L69
        let (_%1#1: uint64, maybe_exists%1#2: bool) = (box_len "three")
        goto maybe_exists%1#2 ? block@63 : block@64
    block@63: // if_body_L74
        (box_resize "three" 4u)
        goto block@65
    block@64: // else_body_L76
        (box_create "three" 4u)
        goto block@65
    block@65: // after_if_else_L74
        (box_put "three" 0xffffffff)
        let (maybe_value%0#2: bytes, maybe_exists%2#2: bool) = (box_get "three")
        let state_get%0#1: bytes = (select 0x maybe_value%0#2 maybe_exists%2#2)
        let tmp%3#2: bool = (== state_get%0#1 0xffffffff)
        (assert tmp%3#2)
        let (maybeBox.0#0: bytes, maybeBox.1#0: bool) = (box_get "three")
        (assert maybeBox.1#0)
        let (maybe_value%2#2: bytes, maybe_exists%4#2: bool) = (box_get "three")
        (assert maybe_exists%4#2) // Box must have value
        let tmp%4#2: bool = (== maybe_value%2#2 0xffffffff)
        (assert tmp%4#2)
        (box_splice "three" 1u 1u 0x00)
        let (maybe_value%3#2: bytes, maybe_exists%5#2: bool) = (box_get "three")
        (assert maybe_exists%5#2) // Box must have value
        let tmp%5#2: bool = (== maybe_value%3#2 0xff00ffff)
        (assert tmp%5#2)
        let x#0: bool = (box_del "three")
        (assert x#0) // delete failed
        let (_%2#1: uint64, maybe_exists%6#1: bool) = (box_len "three")
        let tmp%6#2: bool = (! maybe_exists%6#1)
        (assert tmp%6#2)
        goto block@2
    block@2: // after_if_else_L102
        return 1u