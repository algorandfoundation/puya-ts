{
    "name": "TupleBox",
    "structs": {
        "": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBoxMap",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "key": "dDE="
                },
                "box2": {
                    "keyType": "AVMString",
                    "valueType": "",
                    "key": "dDI="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "prefix": "dG0x"
                },
                "boxMap2": {
                    "keyType": "AVMString",
                    "valueType": "",
                    "prefix": "dG0y"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        102,
                        232
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        298
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        105,
                        235
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAKFCYIBHRtMWECdDECdDIEdG0yYRMABQAMgAAFaGVsbG8ABXdvcmxkBHRtMWIPAAUACgAAA2FiYwADZGVmBHRtMmIxG0EA1oICBPwZxG4Enx8Y5TYaAI4CAIQAAiNDMRkURDEYRCi9RQEURCu9RQEURCi8SCgnBL8rvEgrJwS/KL1FAUQovkhJI1lLAYECWUsCTwJLAlJXAgCABWhlbGxvEkRLARVLAk4CUlcCAIAFd29ybGQSRIEgU0QnBbxIJwUnBr8nB7xIJwcnBr8ovEgovUUBFEQrvEgrvUUBFEQiQzEZFEQxGEQpJLlIKiW5SCm9SCQSRCq9SCUSRCm8SCknBL8qvEgqJwS/KbxIKb1FARREKrxIKr1FARREIkMxGUD/OjEYFEQiQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}