{
    "name": "TupleBox",
    "structs": {
        "ObjectB8AC7445": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ],
        "BoxMap2": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testBoxMap",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "key": "dDE="
                },
                "box2": {
                    "keyType": "AVMString",
                    "valueType": "ObjectB8AC7445",
                    "key": "dDI="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap1": {
                    "keyType": "AVMString",
                    "valueType": "(string,byte[],bool)",
                    "prefix": "dG0x"
                },
                "boxMap2": {
                    "keyType": "AVMString",
                    "valueType": "BoxMap2",
                    "prefix": "dG0y"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        102,
                        238
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        320
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        105,
                        241
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAECiYIBHRtMWECdDECdDIEdG0yYRMABQAMgAAFaGVsbG8ABXdvcmxkBHRtMWIPAAUACgAAA2FiYwADZGVmBHRtMmIxG0EA7IICBPwZxG4Enx8Y5TYaAI4CAIoAAiNDMRkURDEYRCi9RQEURCu9RQEURCi8SCgnBL8rvEgrJwS/KL1FAUQovkhJI1lLAYECWUsCTwJLAlJXAgCABWhlbGxvEkRLARVSVwIAgAV3b3JsZBJEKCQiuiNTRCskIrojU0QnBbxIJwUnBr8nB7xIJwcnBr8ovEgovUUBFEQrvEgrvUUBFEQiQzEZFEQxGEQpJblIKoEUuUgpvUglEkQqvUiBFBJEKbxIKScEvykkIrojU0QqvEgqJwS/KiQiuiNTRCm8SCm9RQEURCq8SCq9RQEURCJDMRlA/yQxGBREIkM=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}