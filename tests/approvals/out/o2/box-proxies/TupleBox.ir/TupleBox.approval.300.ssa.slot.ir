main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L174
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testBox()void" => block@4, method "testBoxMap()void" => block@5, * => block@8}
    block@4: // testBox_route_L180
        (box_create "t1" 10u)
        (box_create "t2" 20u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "t1")
        let tmp%0#3: bool = (== value%0#0 10u)
        (assert tmp%0#3)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "t2")
        let tmp%1#2: bool = (== value%1#0 20u)
        (assert tmp%1#2)
        (box_del "t1")
        (box_put "t1" 0x0005000c80000568656c6c6f0005776f726c64)
        let box%box_extract%0#1: Encoded(bool1[8]) = (box_extract "t1" 4u 1u)
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#1 0u)
        (assert aggregate%get_bit%0#0)
        (box_del "t2")
        (box_put "t2" 0x0005000c80000568656c6c6f0005776f726c64)
        let box%box_extract%1#1: Encoded(bool1[8]) = (box_extract "t2" 4u 1u)
        let aggregate%get_bit%1#0: bool = (getbit box%box_extract%1#1 0u)
        (assert aggregate%get_bit%1#0)
        (box_del "t1")
        let (_%2#1: uint64, maybe_exists%2#1: bool) = (box_len "t1")
        let tmp%8#2: bool = (! maybe_exists%2#1)
        (assert tmp%8#2)
        (box_del "t2")
        let (_%3#1: uint64, maybe_exists%3#1: bool) = (box_len "t2")
        let tmp%9#1: bool = (! maybe_exists%3#1)
        (assert tmp%9#1)
        exit 1u
    block@5: // testBoxMap_route_L206
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "tm1a")
        let tmp%0#2: bool = (! maybe_exists%0#0)
        (assert tmp%0#2)
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "tm2a")
        let tmp%1#1: bool = (! maybe_exists%1#0)
        (assert tmp%1#1)
        (box_del "tm1a")
        (box_put "tm1a" 0x0005000c80000568656c6c6f0005776f726c64)
        (box_del "tm2a")
        (box_put "tm2a" 0x0005000c80000568656c6c6f0005776f726c64)
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "tm1a")
        (assert maybe_exists%2#0)
        let (aggregate%box_get%8#0: bytes, aggregate%box_get%9#0: bool) = (box_get "tm1a")
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 aggregate%box_get%8#0 0u)
        let aggregate%extract_uint16%7#0: uint64 = (extract_uint16 aggregate%box_get%8#0 2u)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%box_get%8#0 aggregate%extract_uint16%6#0 aggregate%extract_uint16%7#0)
        let values%0#0: string = ((extract 2 0) aggregate%substring3%4#0)
        let tmp%4#1: bool = (== values%0#0 "hello")
        (assert tmp%4#1)
        let aggregate%len%2#0: uint64 = (len aggregate%box_get%8#0)
        let aggregate%substring3%5#0: bytes = (substring3 aggregate%box_get%8#0 aggregate%extract_uint16%7#0 aggregate%len%2#0)
        let values%1#0: bytes = ((extract 2 0) aggregate%substring3%5#0)
        let tmp%5#1: bool = (== values%1#0 "world")
        (assert tmp%5#1)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tm1a" 4u 1u)
        let aggregate%get_bit%2#0: bool = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%2#0)
        let box%box_extract%1#0: Encoded(bool1[8]) = (box_extract "tm2a" 4u 1u)
        let aggregate%get_bit%3#0: bool = (getbit box%box_extract%1#0 0u)
        (assert aggregate%get_bit%3#0)
        (box_del "tm1b")
        (box_put "tm1b" 0x0005000a0000036162630003646566)
        (box_del "tm2b")
        (box_put "tm2b" 0x0005000a0000036162630003646566)
        (box_del "tm1a")
        let (_%6#0: uint64, maybe_exists%6#0: bool) = (box_len "tm1a")
        let tmp%10#1: bool = (! maybe_exists%6#0)
        (assert tmp%10#1)
        (box_del "tm2a")
        let (_%7#0: uint64, maybe_exists%7#0: bool) = (box_len "tm2a")
        let tmp%11#1: bool = (! maybe_exists%7#0)
        (assert tmp%11#1)
        exit 1u
    block@8: // after_if_else_L174
        fail
    block@9: // __algots__.defaultCreate_L174
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u