main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L158
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testBox()void" => block@3, method "testBoxMap()void" => block@4, * => block@11}
    block@3: // testBox_route_L164
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (box_create "t1" 10u)
        (box_create "t2" 20u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "t1")
        (assert check%0#0) // Box must have value
        let tmp%0#3: bool = (== value%0#0 10u)
        (assert tmp%0#3)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "t2")
        (assert check%1#0) // Box must have value
        let tmp%1#2: bool = (== value%1#0 20u)
        (assert tmp%1#2)
        let (_%0#1: uint64, maybe_exists%0#1: bool) = (box_len "t1")
        (assert maybe_exists%0#1)
        let (_%1#1: uint64, maybe_exists%1#1: bool) = (box_len "t2")
        (assert maybe_exists%1#1)
        (box_del "t1")
        (box_put "t1" 0x0005000c80000568656c6c6f0005776f726c64)
        let (maybe_value%0#1: bytes, maybe_exists%2#1: bool) = (box_get "t1")
        goto maybe_exists%2#1 ? block@36 : block@37
    block@36: // ternary_true_L174
        let item_start_offset%0#1: uint64 = (extract_uint16 maybe_value%0#1 0u)
        let item_end_offset%0#1: uint64 = (extract_uint16 maybe_value%0#1 2u)
        let item0%0#1: bytes = (substring3 maybe_value%0#1 item_start_offset%0#1 item_end_offset%0#1)
        let item0%1#1: bytes = ((extract 2 0) item0%0#1)
        goto block@38
    block@37: // ternary_false_L174
        let ternary_result%0.0#4: bytes = undefined
        goto block@38
    block@38: // ternary_merge_L174
        let ternary_result%0.0#5: bytes = φ(item0%1#1 <- block@36, ternary_result%0.0#4 <- block@37)
        (assert maybe_exists%2#1) // Box must have value
        let tmp%2#2: bool = (== ternary_result%0.0#5 "hello")
        (assert tmp%2#2)
        let (maybe_value%1#1: bytes, maybe_exists%3#1: bool) = (box_get "t1")
        goto maybe_exists%3#1 ? block@39 : block@40
    block@39: // ternary_true_L175
        let item_end_offset%2#1: uint64 = (extract_uint16 maybe_value%1#1 2u)
        let item_end_offset%3#1: uint64 = (len maybe_value%1#1)
        let item1%2#1: bytes = (substring3 maybe_value%1#1 item_end_offset%2#1 item_end_offset%3#1)
        let item1%3#1: bytes = ((extract 2 0) item1%2#1)
        goto block@41
    block@40: // ternary_false_L175
        let ternary_result%1.1#4: bytes = undefined
        goto block@41
    block@41: // ternary_merge_L175
        let ternary_result%1.1#5: bytes = φ(item1%3#1 <- block@39, ternary_result%1.1#4 <- block@40)
        (assert maybe_exists%3#1) // Box must have value
        let tmp%3#2: bool = (== ternary_result%1.1#5 "world")
        (assert tmp%3#2)
        let (maybe_value%2#1: bytes, maybe_exists%4#1: bool) = (box_get "t1")
        goto maybe_exists%4#1 ? block@42 : block@43
    block@42: // ternary_true_L176
        let is_true%2#1: uint64 = (getbit maybe_value%2#1 32u)
        let encoded_bool%3#1: bytes[1] = (setbit 0x00 0u is_true%2#1)
        let item2%2#1: bool = (getbit encoded_bool%3#1 0u)
        goto block@44
    block@43: // ternary_false_L176
        let ternary_result%2.2#4: bool = undefined
        goto block@44
    block@44: // ternary_merge_L176
        let ternary_result%2.2#5: bool = φ(item2%2#1 <- block@42, ternary_result%2.2#4 <- block@43)
        (assert maybe_exists%4#1) // Box must have value
        (assert ternary_result%2.2#5)
        (box_del "t2")
        (box_put "t2" 0x0005000c80000568656c6c6f0005776f726c64)
        let (maybe_value%3#1: bytes, maybe_exists%5#1: bool) = (box_get "t2")
        goto maybe_exists%5#1 ? block@45 : block@46
    block@45: // ternary_true_L179
        let item_start_offset%6#1: uint64 = (extract_uint16 maybe_value%3#1 0u)
        let item_end_offset%6#1: uint64 = (extract_uint16 maybe_value%3#1 2u)
        let item0%6#1: bytes = (substring3 maybe_value%3#1 item_start_offset%6#1 item_end_offset%6#1)
        let item0%7#1: bytes = ((extract 2 0) item0%6#1)
        goto block@47
    block@46: // ternary_false_L179
        let ternary_result%3.a#4: bytes = undefined
        goto block@47
    block@47: // ternary_merge_L179
        let ternary_result%3.a#5: bytes = φ(item0%7#1 <- block@45, ternary_result%3.a#4 <- block@46)
        (assert maybe_exists%5#1) // Box must have value
        let tmp%4#2: bool = (== ternary_result%3.a#5 "hello")
        (assert tmp%4#2)
        let (maybe_value%4#1: bytes, maybe_exists%6#1: bool) = (box_get "t2")
        goto maybe_exists%6#1 ? block@48 : block@49
    block@48: // ternary_true_L180
        let item_end_offset%8#1: uint64 = (extract_uint16 maybe_value%4#1 2u)
        let item_end_offset%9#1: uint64 = (len maybe_value%4#1)
        let item1%8#1: bytes = (substring3 maybe_value%4#1 item_end_offset%8#1 item_end_offset%9#1)
        let item1%9#1: bytes = ((extract 2 0) item1%8#1)
        goto block@50
    block@49: // ternary_false_L180
        let ternary_result%4.b#4: bytes = undefined
        goto block@50
    block@50: // ternary_merge_L180
        let ternary_result%4.b#5: bytes = φ(item1%9#1 <- block@48, ternary_result%4.b#4 <- block@49)
        (assert maybe_exists%6#1) // Box must have value
        let tmp%5#2: bool = (== ternary_result%4.b#5 "world")
        (assert tmp%5#2)
        let (maybe_value%5#1: bytes, maybe_exists%7#1: bool) = (box_get "t2")
        goto maybe_exists%7#1 ? block@51 : block@52
    block@51: // ternary_true_L181
        let is_true%5#1: uint64 = (getbit maybe_value%5#1 32u)
        let encoded_bool%7#1: bytes[1] = (setbit 0x00 0u is_true%5#1)
        let item2%5#1: bool = (getbit encoded_bool%7#1 0u)
        goto block@53
    block@52: // ternary_false_L181
        let ternary_result%5.c#4: bool = undefined
        goto block@53
    block@53: // ternary_merge_L181
        let ternary_result%5.c#5: bool = φ(item2%5#1 <- block@51, ternary_result%5.c#4 <- block@52)
        (assert maybe_exists%7#1) // Box must have value
        (assert ternary_result%5.c#5)
        (box_del "t1")
        let (_%2#1: uint64, maybe_exists%8#1: bool) = (box_len "t1")
        let tmp%6#2: bool = (! maybe_exists%8#1)
        (assert tmp%6#2)
        (box_del "t2")
        let (_%3#1: uint64, maybe_exists%9#1: bool) = (box_len "t2")
        let tmp%7#2: bool = (! maybe_exists%9#1)
        (assert tmp%7#2)
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testBoxMap_route_L190
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "tm1a")
        let tmp%1#1: bool = (! maybe_exists%0#0)
        (assert tmp%1#1)
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "tm2a")
        let tmp%3#1: bool = (! maybe_exists%1#0)
        (assert tmp%3#1)
        (box_del "tm1a")
        (box_put "tm1a" 0x0005000c80000568656c6c6f0005776f726c64)
        (box_del "tm2a")
        (box_put "tm2a" 0x0005000c80000568656c6c6f0005776f726c64)
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "tm1a")
        (assert maybe_exists%2#0)
        let (maybe_value%0#0: bytes, maybe_exists%3#0: bool) = (box_get "tm1a")
        goto maybe_exists%3#0 ? block@16 : block@17
    block@16: // ternary_true_L198
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 2 0) item0%0#0)
        goto block@18
    block@17: // ternary_false_L198
        let ternary_result%0.0#1: bytes = undefined
        goto block@18
    block@18: // ternary_merge_L198
        let ternary_result%0.0#2: bytes = φ(item0%1#0 <- block@16, ternary_result%0.0#1 <- block@17)
        (assert maybe_exists%3#0) // Box must have value
        let tmp%8#1: bool = (== ternary_result%0.0#2 "hello")
        (assert tmp%8#1)
        let (maybe_value%1#0: bytes, maybe_exists%4#0: bool) = (box_get "tm1a")
        goto maybe_exists%4#0 ? block@19 : block@20
    block@19: // ternary_true_L199
        let item_end_offset%2#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let item_end_offset%3#0: uint64 = (len maybe_value%1#0)
        let item1%2#0: bytes = (substring3 maybe_value%1#0 item_end_offset%2#0 item_end_offset%3#0)
        let item1%3#0: bytes = ((extract 2 0) item1%2#0)
        goto block@21
    block@20: // ternary_false_L199
        let ternary_result%1.1#1: bytes = undefined
        goto block@21
    block@21: // ternary_merge_L199
        let ternary_result%1.1#2: bytes = φ(item1%3#0 <- block@19, ternary_result%1.1#1 <- block@20)
        (assert maybe_exists%4#0) // Box must have value
        let tmp%10#1: bool = (== ternary_result%1.1#2 "world")
        (assert tmp%10#1)
        let (maybe_value%2#0: bytes, maybe_exists%5#0: bool) = (box_get "tm1a")
        goto maybe_exists%5#0 ? block@22 : block@23
    block@22: // ternary_true_L200
        let is_true%2#0: uint64 = (getbit maybe_value%2#0 32u)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let item2%2#0: bool = (getbit encoded_bool%4#0 0u)
        goto block@24
    block@23: // ternary_false_L200
        let ternary_result%2.2#1: bool = undefined
        goto block@24
    block@24: // ternary_merge_L200
        let ternary_result%2.2#2: bool = φ(item2%2#0 <- block@22, ternary_result%2.2#1 <- block@23)
        (assert maybe_exists%5#0) // Box must have value
        (assert ternary_result%2.2#2)
        let (_%3#0: uint64, maybe_exists%6#0: bool) = (box_len "tm2a")
        (assert maybe_exists%6#0)
        let (maybe_value%3#0: bytes, maybe_exists%7#0: bool) = (box_get "tm2a")
        goto maybe_exists%7#0 ? block@25 : block@26
    block@25: // ternary_true_L203
        let item_start_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item0%6#0: bytes = (substring3 maybe_value%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let item0%7#0: bytes = ((extract 2 0) item0%6#0)
        goto block@27
    block@26: // ternary_false_L203
        let ternary_result%3.a#1: bytes = undefined
        goto block@27
    block@27: // ternary_merge_L203
        let ternary_result%3.a#2: bytes = φ(item0%7#0 <- block@25, ternary_result%3.a#1 <- block@26)
        (assert maybe_exists%7#0) // Box must have value
        let tmp%14#0: bool = (== ternary_result%3.a#2 "hello")
        (assert tmp%14#0)
        let (maybe_value%4#0: bytes, maybe_exists%8#0: bool) = (box_get "tm2a")
        goto maybe_exists%8#0 ? block@28 : block@29
    block@28: // ternary_true_L204
        let item_end_offset%8#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item_end_offset%9#0: uint64 = (len maybe_value%4#0)
        let item1%8#0: bytes = (substring3 maybe_value%4#0 item_end_offset%8#0 item_end_offset%9#0)
        let item1%9#0: bytes = ((extract 2 0) item1%8#0)
        goto block@30
    block@29: // ternary_false_L204
        let ternary_result%4.b#1: bytes = undefined
        goto block@30
    block@30: // ternary_merge_L204
        let ternary_result%4.b#2: bytes = φ(item1%9#0 <- block@28, ternary_result%4.b#1 <- block@29)
        (assert maybe_exists%8#0) // Box must have value
        let tmp%16#0: bool = (== ternary_result%4.b#2 "world")
        (assert tmp%16#0)
        let (maybe_value%5#0: bytes, maybe_exists%9#0: bool) = (box_get "tm2a")
        goto maybe_exists%9#0 ? block@31 : block@32
    block@31: // ternary_true_L205
        let is_true%5#0: uint64 = (getbit maybe_value%5#0 32u)
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u is_true%5#0)
        let item2%5#0: bool = (getbit encoded_bool%7#0 0u)
        goto block@33
    block@32: // ternary_false_L205
        let ternary_result%5.c#1: bool = undefined
        goto block@33
    block@33: // ternary_merge_L205
        let ternary_result%5.c#2: bool = φ(item2%5#0 <- block@31, ternary_result%5.c#1 <- block@32)
        (assert maybe_exists%9#0) // Box must have value
        (assert ternary_result%5.c#2)
        (box_del "tm1b")
        (box_put "tm1b" 0x0005000a0000036162630003646566)
        let (_%4#0: uint64, maybe_exists%10#0: bool) = (box_len "tm1b")
        (assert maybe_exists%10#0)
        (box_del "tm2b")
        (box_put "tm2b" 0x0005000a0000036162630003646566)
        let (_%5#0: uint64, maybe_exists%11#0: bool) = (box_len "tm2b")
        (assert maybe_exists%11#0)
        (box_del "tm1a")
        let (_%6#0: uint64, maybe_exists%12#0: bool) = (box_len "tm1a")
        let tmp%24#0: bool = (! maybe_exists%12#0)
        (assert tmp%24#0)
        (box_del "tm2a")
        let (_%7#0: uint64, maybe_exists%13#0: bool) = (box_len "tm2a")
        let tmp%27#0: bool = (! maybe_exists%13#0)
        (assert tmp%27#0)
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L158
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L158
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L158
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0 <- block@53, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1 <- block@33, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2 <- block@8, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0