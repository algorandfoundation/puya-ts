main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@10}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%head%0#0
        let tmp%1#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = aggregate%head%3#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64,uint64,uint64)%0#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%1#1)
        let aggregate%as_Encoded((uint64,uint64,uint64),(uint64))%0#0: Encoded((uint64,uint64,uint64),(uint64)) = aggregate%head%5#0
        let o2#0: Encoded((uint64,uint64,uint64),(uint64)) = aggregate%as_Encoded((uint64,uint64,uint64),(uint64))%0#0
        let aggregate%head%6#0: bytes = (concat 0x tmp%1#1)
        let aggregate%as_Encoded((uint64))%0#0: Encoded((uint64)) = aggregate%head%6#0
        let o3#0: Encoded((uint64)) = aggregate%as_Encoded((uint64))%0#0
        let tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/object-literals.algo.ts::ObjectLiteralsAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0