main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testAsset(uint64)void" => block@3, * => block@4}
    block@3: // testAsset_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#3: bytes[8] = (itob asset#0)
        (log tmp%0#3)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetTotal) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#1: bytes[8] = (itob value%0#0)
        (log tmp%1#1)
        let (value%1#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let tmp%2#1: bytes[8] = (itob value%1#0)
        (log tmp%2#1)
        let (value%2#0: bool, check%2#0: bool) = ((asset_params_get AssetDefaultFrozen) asset#0)
        (assert check%2#0) // asset exists
        let tmp%3#1: bytes[8] = (itob value%2#0)
        (log tmp%3#1)
        let (value%3#0: bytes, check%3#0: bool) = ((asset_params_get AssetUnitName) asset#0)
        (assert check%3#0) // asset exists
        (log value%3#0)
        let (value%4#0: bytes, check%4#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%4#0) // asset exists
        (log value%4#0)
        let (value%5#0: bytes, check%5#0: bool) = ((asset_params_get AssetURL) asset#0)
        (assert check%5#0) // asset exists
        (log value%5#0)
        let (value%6#0: bytes, check%6#0: bool) = ((asset_params_get AssetMetadataHash) asset#0)
        (assert check%6#0) // asset exists
        (log value%6#0)
        let (value%7#0: account, check%7#0: bool) = ((asset_params_get AssetManager) asset#0)
        (assert check%7#0) // asset exists
        (log value%7#0)
        let (value%8#0: account, check%8#0: bool) = ((asset_params_get AssetReserve) asset#0)
        (assert check%8#0) // asset exists
        (log value%8#0)
        let (value%9#0: account, check%9#0: bool) = ((asset_params_get AssetFreeze) asset#0)
        (assert check%9#0) // asset exists
        (log value%9#0)
        let (value%10#0: account, check%10#0: bool) = ((asset_params_get AssetClawback) asset#0)
        (assert check%10#0) // asset exists
        (log value%10#0)
        let (value%11#0: account, check%11#0: bool) = ((asset_params_get AssetCreator) asset#0)
        (assert check%11#0) // asset exists
        (log value%11#0)
        let tmp%4#1: account = (txn Sender)
        let (value%12#0: uint64, check%12#0: bool) = ((asset_holding_get AssetBalance) tmp%4#1 asset#0)
        (assert check%12#0) // account opted into asset
        let tmp%5#1: bytes[8] = (itob value%12#0)
        (log tmp%5#1)
        let tmp%6#1: account = (txn Sender)
        let (value%13#0: bool, check%13#0: bool) = ((asset_holding_get AssetFrozen) tmp%6#1 asset#0)
        (assert check%13#0) // account opted into asset
        let tmp%7#1: bytes[8] = (itob value%13#0)
        (log tmp%7#1)
        exit 1u
    block@4: // switch_case_next_L4
        fail
    block@5: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u