#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 123
    bytecblock 0x151f7c750008626173652d74776f 0x151f7c750006636f6d6d6f6e "stateCommon"
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/approvals/multi-inheritance.algo.ts:7
    // stateCommon = GlobalState<uint64>({ initialValue: 123 })
    bytec_2 // "stateCommon"
    intc_1 // 123
    app_global_put
    // tests/approvals/multi-inheritance.algo.ts:19
    // stateOne = GlobalState({ initialValue: Uint64(45) })
    pushbytes "stateOne"
    pushint 45 // 45
    app_global_put
    // tests/approvals/multi-inheritance.algo.ts:7
    // stateCommon = GlobalState<uint64>({ initialValue: 123 })
    bytec_2 // "stateCommon"
    intc_1 // 123
    app_global_put
    // tests/approvals/multi-inheritance.algo.ts:26
    // stateTwo = GlobalState({ initialValue: 'Hello' })
    pushbytess "stateTwo" "Hello" // "stateTwo", "Hello"
    app_global_put
    // tests/approvals/multi-inheritance.algo.ts:42
    // stateMulti = GlobalState({ initialValue: 'Hmmm' })
    pushbytess "stateMulti" "Hmmm" // "stateMulti", "Hmmm"
    app_global_put

main_after_if_else@2:
    // tests/approvals/multi-inheritance.algo.ts:41
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    txn NumAppArgs
    bz main_bare_routing@15
    pushbytess 0x290eba9f 0x839d96ff 0xa978ca56 0x88547eb8 0xc32533e3 0x455c8d09 0xf9f5142c 0x363b329e // method "methodMulti()string", method "methodCallsSuper()string", method "callB2CantOverride()string", method "callB2Common()string", method "methodOne()string", method "methodCommon()string", method "b2CantOverride()string", method "methodTwo()string"
    txna ApplicationArgs 0
    match main_methodMulti_route@5 main_methodCallsSuper_route@6 main_callB2CantOverride_route@7 main_callB2Common_route@8 main_methodOne_route@9 main_methodCommon_route@10 main_b2CantOverride_route@11 main_methodTwo_route@12

main_after_if_else@19:
    // tests/approvals/multi-inheritance.algo.ts:41
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    pushint 0 // 0
    return

main_methodTwo_route@12:
    // tests/approvals/multi-inheritance.algo.ts:27
    // methodTwo() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c750008626173652d74776f
    log
    intc_0 // 1
    return

main_b2CantOverride_route@11:
    // tests/approvals/multi-inheritance.algo.ts:13
    // b2CantOverride(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750006636f6d6d6f6e
    log
    intc_0 // 1
    return

main_methodCommon_route@10:
    // tests/approvals/multi-inheritance.algo.ts:9
    // methodCommon() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750006636f6d6d6f6e
    log
    intc_0 // 1
    return

main_methodOne_route@9:
    // tests/approvals/multi-inheritance.algo.ts:20
    // methodOne() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750008626173652d6f6e65
    log
    intc_0 // 1
    return

main_callB2Common_route@8:
    // tests/approvals/multi-inheritance.algo.ts:56
    // callB2Common() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750006636f6d6d6f6e
    log
    intc_0 // 1
    return

main_callB2CantOverride_route@7:
    // tests/approvals/multi-inheritance.algo.ts:52
    // callB2CantOverride() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c750008626173652d74776f
    log
    intc_0 // 1
    return

main_methodCallsSuper_route@6:
    // tests/approvals/multi-inheritance.algo.ts:48
    // methodCallsSuper() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c750008626173652d74776f
    log
    intc_0 // 1
    return

main_methodMulti_route@5:
    // tests/approvals/multi-inheritance.algo.ts:44
    // methodMulti() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75000b6d756c74692d6261736573
    log
    intc_0 // 1
    return

main_bare_routing@15:
    // tests/approvals/multi-inheritance.algo.ts:41
    // export class MultiBases extends classes(BaseOne, BaseTwo) {
    txn OnCompletion
    bnz main_after_if_else@19
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
