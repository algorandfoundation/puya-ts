main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L65
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test(uint64)void" => block@4, method "add(uint64,uint64)uint64" => block@5, * => block@8}
    block@4: // test_route_L66
        let tmp%0#4: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#4)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = (btoi tmp%0#4)
        itxn_begin
        ((itxn_field ApplicationArgs) method "methodTwo()string")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#5: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#2: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#2) // Bytes has valid prefix
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#5 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#2: uint64 = (len tmp%0#5)
        let eq%0#2: bool = (== len%0#2 add%0#0)
        (assert eq%0#2) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        itxn_begin
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        ((itxn_field ApplicationArgs) method "add(uint64,uint64)uint64")
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#2: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#1: bool = (== tmp%7#1 0x151f7c75)
        (assert tmp%8#1) // Bytes has valid prefix
        let len%1#1: uint64 = (len tmp%6#2)
        let eq%1#1: bool = (== len%1#1 8u)
        (assert eq%1#1) // invalid number of bytes for arc4.uint64
        let result#0: uint64 = (btoi tmp%6#2)
        let tmp%10#1: bool = (== result#0 3u)
        (assert tmp%10#1)
        exit 1u
    block@5: // add_route_L79
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let a#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let b#0: uint64 = (btoi tmp%2#1)
        let tmp%0#3: uint64 = (+ a#0 b#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#3)
        let tmp%6#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#0)
        (log tmp%6#1)
        exit 1u
    block@8: // after_if_else_L65
        fail
    block@9: // __algots__.defaultCreate_L65
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u