main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L65
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(application)void" => block@3, method "add(uint64,uint64)uint64" => block@4, * => block@11}
    block@3: // test_route_L66
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let app#0: uint64 = ((txnas Applications) tmp%7#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "methodTwo()string")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#3: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#1: bool = (== tmp%1#1 0x151f7c75)
        (assert tmp%2#1) // Bytes has valid prefix
        let tmp%3#1: string = ((extract 2 0) tmp%0#3)
        itxn_begin
        let array%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let tmp%4#1: Encoded(uint64) = array%as_Encoded(uint64)%0#1
        let array%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let tmp%5#1: Encoded(uint64) = array%as_Encoded(uint64)%1#1
        ((itxn_field ApplicationArgs) method "add(uint64,uint64)uint64")
        ((itxn_field ApplicationArgs) tmp%4#1)
        ((itxn_field ApplicationArgs) tmp%5#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#1: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#1: bool = (== tmp%7#1 0x151f7c75)
        (assert tmp%8#1) // Bytes has valid prefix
        let result#0: uint64 = (btoi tmp%6#1)
        let tmp%10#1: bool = (== result#0 3u)
        (assert tmp%10#1)
        let tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // add_route_L79
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%0#2: uint64 = (+ a#0 b#0)
        let array%val_as_bytes%2#1: bytes[8] = (itob tmp%0#2)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let tmp%16#0: Encoded(uint64) = array%as_Encoded(uint64)%2#1
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
        (log tmp%17#0)
        let tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L65
        let tmp%18#0: uint64 = (txn OnCompletion)
        goto tmp%18#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L65
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        let tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L65
        let tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#0 <- block@3, tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#1 <- block@4, tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#2 <- block@8, tests/approvals/multi-inheritance.algo.ts::AbiCallMultiInheritance.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0