main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        (app_global_put "stateCommon" 123u)
        (app_global_put "stateOne" 45u)
        (app_global_put "stateCommon" 123u)
        (app_global_put "stateTwo" "Hello")
        (app_global_put "stateMulti" "Hmmm")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@17
    block@4: // abi_routing_L45
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "methodMulti()string" => block@6, method "methodCallsSuper()string" => block@7, method "callB2CantOverride()string" => block@8, method "callB2Common()string" => block@9, method "methodOne()string" => block@10, method "methodCommon()string" => block@11, method "b2CantOverride()string" => block@12, method "methodTwo()string" => block@13, * => block@16}
    block@6: // methodMulti_route_L48
        let aggregate%length%0#0: uint64 = (len "multi-bases")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "multi-bases")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#8: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%2#8: bytes = (concat 0x151f7c75 tmp%1#8)
        (log tmp%2#8)
        exit 1u
    block@7: // methodCallsSuper_route_L52
        let aggregate%length%1#0: uint64 = (len "base-two")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "base-two")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#7: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%2#7: bytes = (concat 0x151f7c75 tmp%1#7)
        (log tmp%2#7)
        exit 1u
    block@8: // callB2CantOverride_route_L56
        let aggregate%length%2#0: uint64 = (len "base-two")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "base-two")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%1#6: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        let tmp%2#6: bytes = (concat 0x151f7c75 tmp%1#6)
        (log tmp%2#6)
        exit 1u
    block@9: // callB2Common_route_L60
        let aggregate%length%3#0: uint64 = (len "common")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "common")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%1#5: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let tmp%2#5: bytes = (concat 0x151f7c75 tmp%1#5)
        (log tmp%2#5)
        exit 1u
    block@10: // methodOne_route_L24
        let aggregate%length%4#0: uint64 = (len "base-one")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 "base-one")
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let tmp%1#4: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#0
        let tmp%2#4: bytes = (concat 0x151f7c75 tmp%1#4)
        (log tmp%2#4)
        exit 1u
    block@11: // methodCommon_route_L13
        let aggregate%length%5#0: uint64 = (len "common")
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 "common")
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%encoded_value%5#0
        let tmp%1#3: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let tmp%2#3: bytes = (concat 0x151f7c75 tmp%1#3)
        (log tmp%2#3)
        exit 1u
    block@12: // b2CantOverride_route_L17
        let aggregate%length%6#0: uint64 = (len "common")
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 "common")
        let aggregate%as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = aggregate%encoded_value%6#0
        let tmp%1#2: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#0
        let tmp%2#2: bytes = (concat 0x151f7c75 tmp%1#2)
        (log tmp%2#2)
        exit 1u
    block@13: // methodTwo_route_L31
        let aggregate%length%7#0: uint64 = (len "base-two")
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 "base-two")
        let aggregate%as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = aggregate%encoded_value%7#0
        let tmp%1#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#0
        let tmp%2#1: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%2#1)
        exit 1u
    block@16: // after_if_else_L45
        fail
    block@17: // __algots__.defaultCreate_L45
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u