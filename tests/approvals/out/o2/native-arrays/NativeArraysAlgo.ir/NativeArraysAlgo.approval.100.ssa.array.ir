main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@3, method "doThings()void" => block@4, method "arc4Interop()void" => block@5, method "structs((uint64,uint64))(uint64,uint64)[]" => block@6, method "booleans()bool[]" => block@7, method "booleansStatic()(bool,bool,bool)" => block@8, method "arc4Booleans()bool[]" => block@9, method "arc4BooleansStatic()(bool,bool,bool)" => block@10, * => block@17}
    block@3: // buildArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%sub_item%0#1: bytes[8] = (itob 1u)
        let array%encoded%0#1: encoded_uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: encoded_uint64[] = (concat 0x array%encoded%0#1)
        let array%sub_item%1#1: bytes[8] = (itob 2u)
        let array%encoded%1#1: encoded_uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: encoded_uint64[] = (concat array%data%0#1 array%encoded%1#1)
        let array%sub_item%2#1: bytes[8] = (itob 3u)
        let array%encoded%2#1: encoded_uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: encoded_uint64[] = (concat array%data%1#1 array%encoded%2#1)
        let array%sub_item%3#1: bytes[8] = (itob 4u)
        let array%encoded%3#1: encoded_uint64[] = (concat 0x array%sub_item%3#1)
        let array%data%3#1: encoded_uint64[] = (concat array%data%2#1 array%encoded%3#1)
        let encoded%0#4: encoded_uint64[] = array%data%3#1
        let byte_len%0#4: uint64 = (len encoded%0#4)
        let len_%0#4: uint64 = (/ byte_len%0#4 8u)
        let as_bytes%0#4: bytes[8] = (itob len_%0#4)
        let len_16_bit%0#4: bytes = ((extract 6 2) as_bytes%0#4)
        let concat_result%0#3: bytes = (concat len_16_bit%0#4 encoded%0#4)
        let tmp%8#0: bytes = (concat 0x151f7c75 concat_result%0#3)
        (log tmp%8#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // doThings_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let array%sub_item%4#1: bytes[8] = (itob 1u)
        let array%encoded%4#1: encoded_uint64[] = (concat 0x array%sub_item%4#1)
        let array%data%4#1: encoded_uint64[] = (concat 0x array%encoded%4#1)
        let array%sub_item%5#1: bytes[8] = (itob 2u)
        let array%encoded%5#1: encoded_uint64[] = (concat 0x array%sub_item%5#1)
        let array%data%5#1: encoded_uint64[] = (concat array%data%4#1 array%encoded%5#1)
        let array%sub_item%6#1: bytes[8] = (itob 3u)
        let array%encoded%6#1: encoded_uint64[] = (concat 0x array%sub_item%6#1)
        let array%data%6#1: encoded_uint64[] = (concat array%data%5#1 array%encoded%6#1)
        let array%sub_item%7#1: bytes[8] = (itob 4u)
        let array%encoded%7#1: encoded_uint64[] = (concat 0x array%sub_item%7#1)
        let array%data%7#1: encoded_uint64[] = (concat array%data%6#1 array%encoded%7#1)
        let encoded%0#3: encoded_uint64[] = array%data%7#1
        let byte_len%0#3: uint64 = (len encoded%0#3)
        let len_%0#3: uint64 = (/ byte_len%0#3 8u)
        let as_bytes%0#3: bytes[8] = (itob len_%0#3)
        let len_16_bit%0#3: bytes = ((extract 6 2) as_bytes%0#3)
        let arr#0: encoded_uint64[] = (concat len_16_bit%0#3 encoded%0#3)
        let tmp%0#4: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#3: bool = (== tmp%0#4 4u)
        goto tmp%1#3 ? block@48 : block@53
    block@48: // and_contd_L14
        let tmp%2#3: uint64 = (extract_uint64 arr#0 2u)
        let tmp%3#3: bool = (== tmp%2#3 1u)
        goto tmp%3#3 ? block@49 : block@53
    block@49: // and_contd_L14
        let tmp%4#2: uint64 = (extract_uint64 arr#0 10u)
        let tmp%5#2: bool = (== tmp%4#2 2u)
        goto tmp%5#2 ? block@50 : block@53
    block@50: // and_contd_L14
        let tmp%6#2: uint64 = (extract_uint64 arr#0 18u)
        let tmp%7#2: bool = (== tmp%6#2 3u)
        goto tmp%7#2 ? block@51 : block@53
    block@51: // and_contd_L14
        let tmp%8#2: uint64 = (extract_uint64 arr#0 26u)
        let tmp%9#2: bool = (== tmp%8#2 4u)
        goto tmp%9#2 ? block@52 : block@53
    block@52: // bool_true_L14
        let and_result%0#6: bool = 1u
        goto block@54
    block@53: // bool_false_L14
        let and_result%0#7: bool = 0u
        goto block@54
    block@54: // bool_merge_L14
        let and_result%0#8: bool = φ(and_result%0#6 <- block@52, and_result%0#7 <- block@53)
        (assert and_result%0#8) // assert target is match for conditions
        let expr_value_trimmed%0#2: bytes = ((extract 2 0) arr#0)
        let array%sub_item%8#1: bytes[8] = (itob 5u)
        let array%encoded%8#1: encoded_uint64[] = (concat 0x array%sub_item%8#1)
        let array%data%8#1: encoded_uint64[] = (concat 0x array%encoded%8#1)
        let encoded%0#2: encoded_uint64[] = array%data%8#1
        let byte_len%0#2: uint64 = (len encoded%0#2)
        let len_%0#2: uint64 = (/ byte_len%0#2 8u)
        let as_bytes%0#2: bytes[8] = (itob len_%0#2)
        let len_16_bit%0#2: bytes = ((extract 6 2) as_bytes%0#2)
        let concat_result%0#2: bytes = (concat len_16_bit%0#2 encoded%0#2)
        let expr_value_trimmed%2#1: bytes = ((extract 2 0) concat_result%0#2)
        let concatenated%1#1: bytes = (concat expr_value_trimmed%0#2 expr_value_trimmed%2#1)
        let byte_len%1#1: uint64 = (len concatenated%1#1)
        let len_%1#1: uint64 = (/ byte_len%1#1 8u)
        let as_bytes%1#1: bytes[8] = (itob len_%1#1)
        let len_16_bit%1#1: bytes = ((extract 6 2) as_bytes%1#1)
        let arr#3: encoded_uint64[] = (concat len_16_bit%1#1 concatenated%1#1)
        let tmp%10#2: uint64 = (extract_uint16 arr#3 0u)
        let tmp%11#2: bool = (== tmp%10#2 5u)
        goto tmp%11#2 ? block@55 : block@61
    block@55: // and_contd_L19
        let tmp%12#2: uint64 = (extract_uint64 arr#3 2u)
        let tmp%13#2: bool = (== tmp%12#2 1u)
        goto tmp%13#2 ? block@56 : block@61
    block@56: // and_contd_L19
        let tmp%14#1: uint64 = (extract_uint64 arr#3 10u)
        let tmp%15#1: bool = (== tmp%14#1 2u)
        goto tmp%15#1 ? block@57 : block@61
    block@57: // and_contd_L19
        let tmp%16#1: uint64 = (extract_uint64 arr#3 18u)
        let tmp%17#1: bool = (== tmp%16#1 3u)
        goto tmp%17#1 ? block@58 : block@61
    block@58: // and_contd_L19
        let tmp%18#1: uint64 = (extract_uint64 arr#3 26u)
        let tmp%19#1: bool = (== tmp%18#1 4u)
        goto tmp%19#1 ? block@59 : block@61
    block@59: // and_contd_L19
        let tmp%20#1: uint64 = (extract_uint64 arr#3 34u)
        let tmp%21#1: bool = (== tmp%20#1 5u)
        goto tmp%21#1 ? block@60 : block@61
    block@60: // bool_true_L19
        let and_result%1#0: bool = 1u
        goto block@62
    block@61: // bool_false_L19
        let and_result%1#1: bool = 0u
        goto block@62
    block@62: // bool_merge_L19
        let and_result%1#2: bool = φ(and_result%1#0 <- block@60, and_result%1#1 <- block@61)
        (assert and_result%1#2) // assert target is match for conditions
        let tmp%23#1: uint64 = (- tmp%10#2 1u)
        let array_head_and_tail%9#0: bytes = ((extract 2 0) arr#3)
        let item_offset%9#0: uint64 = (* tmp%23#1 8u)
        let top#0: uint64 = (extract_uint64 array_head_and_tail%9#0 item_offset%9#0)
        let tmp%24#1: bool = (== top#0 5u)
        (assert tmp%24#1)
        let array%sub_item%9#1: bytes[8] = (itob 1u)
        let array%encoded%9#1: encoded_uint64[] = (concat 0x array%sub_item%9#1)
        let array%data%9#1: encoded_uint64[] = (concat 0x array%encoded%9#1)
        let array%sub_item%10#1: bytes[8] = (itob 2u)
        let array%encoded%10#1: encoded_uint64[] = (concat 0x array%sub_item%10#1)
        let array%data%10#1: encoded_uint64[] = (concat array%data%9#1 array%encoded%10#1)
        let array%sub_item%11#1: bytes[8] = (itob 3u)
        let array%encoded%11#1: encoded_uint64[] = (concat 0x array%sub_item%11#1)
        let array%data%11#1: encoded_uint64[] = (concat array%data%10#1 array%encoded%11#1)
        let array%sub_item%12#1: bytes[8] = (itob 4u)
        let array%encoded%12#1: encoded_uint64[] = (concat 0x array%sub_item%12#1)
        let array%data%12#1: encoded_uint64[] = (concat array%data%11#1 array%encoded%12#1)
        let encoded%1#0: encoded_uint64[] = array%data%12#1
        let byte_len%2#1: uint64 = (len encoded%1#0)
        let len_%2#1: uint64 = (/ byte_len%2#1 8u)
        let as_bytes%2#1: bytes[8] = (itob len_%2#1)
        let len_16_bit%2#1: bytes = ((extract 6 2) as_bytes%2#1)
        let arr#6: encoded_uint64[] = (concat len_16_bit%2#1 encoded%1#0)
        let tmp%25#1: uint64 = (extract_uint16 arr#6 0u)
        let tmp%26#1: bool = (== tmp%25#1 4u)
        goto tmp%26#1 ? block@63 : block@68
    block@63: // and_contd_L28
        let tmp%27#1: uint64 = (extract_uint64 arr#6 2u)
        let tmp%28#1: bool = (== tmp%27#1 1u)
        goto tmp%28#1 ? block@64 : block@68
    block@64: // and_contd_L28
        let tmp%29#1: uint64 = (extract_uint64 arr#6 10u)
        let tmp%30#1: bool = (== tmp%29#1 2u)
        goto tmp%30#1 ? block@65 : block@68
    block@65: // and_contd_L28
        let tmp%31#1: uint64 = (extract_uint64 arr#6 18u)
        let tmp%32#1: bool = (== tmp%31#1 3u)
        goto tmp%32#1 ? block@66 : block@68
    block@66: // and_contd_L28
        let tmp%33#1: uint64 = (extract_uint64 arr#6 26u)
        let tmp%34#1: bool = (== tmp%33#1 4u)
        goto tmp%34#1 ? block@67 : block@68
    block@67: // bool_true_L28
        let and_result%2#0: bool = 1u
        goto block@69
    block@68: // bool_false_L28
        let and_result%2#1: bool = 0u
        goto block@69
    block@69: // bool_merge_L28
        let and_result%2#2: bool = φ(and_result%2#0 <- block@67, and_result%2#1 <- block@68)
        (assert and_result%2#2) // assert target is match for conditions
        let val_as_bytes%0#0: bytes[8] = (itob 10u)
        let index_is_in_bounds%0#0: bool = (< 1u tmp%25#1)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let arr#9: encoded_uint64[] = ((replace2 10) arr#6 val_as_bytes%0#0)
        let tmp%35#1: uint64 = (extract_uint16 arr#9 0u)
        let tmp%36#1: bool = (== tmp%35#1 4u)
        goto tmp%36#1 ? block@70 : block@75
    block@70: // and_contd_L33
        let tmp%37#1: uint64 = (extract_uint64 arr#9 2u)
        let tmp%38#1: bool = (== tmp%37#1 1u)
        goto tmp%38#1 ? block@71 : block@75
    block@71: // and_contd_L33
        let tmp%39#1: uint64 = (extract_uint64 arr#9 10u)
        let tmp%40#1: bool = (== tmp%39#1 10u)
        goto tmp%40#1 ? block@72 : block@75
    block@72: // and_contd_L33
        let tmp%41#1: uint64 = (extract_uint64 arr#9 18u)
        let tmp%42#1: bool = (== tmp%41#1 3u)
        goto tmp%42#1 ? block@73 : block@75
    block@73: // and_contd_L33
        let tmp%43#1: uint64 = (extract_uint64 arr#9 26u)
        let tmp%44#1: bool = (== tmp%43#1 4u)
        goto tmp%44#1 ? block@74 : block@75
    block@74: // bool_true_L33
        let and_result%3#0: bool = 1u
        goto block@76
    block@75: // bool_false_L33
        let and_result%3#1: bool = 0u
        goto block@76
    block@76: // bool_merge_L33
        let and_result%3#2: bool = φ(and_result%3#0 <- block@74, and_result%3#1 <- block@75)
        (assert and_result%3#2) // assert target is match for conditions
        let expr_value_trimmed%4#0: bytes = ((extract 2 0) arr#9)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%4#0 expr_value_trimmed%4#0)
        let byte_len%3#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%3#0 8u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let expr_value_trimmed%6#0: bytes = ((extract 2 0) concat_result%3#0)
        let array%sub_item%13#1: bytes[8] = (itob 11u)
        let array%encoded%13#1: encoded_uint64[] = (concat 0x array%sub_item%13#1)
        let array%data%13#1: encoded_uint64[] = (concat 0x array%encoded%13#1)
        let encoded%2#0: encoded_uint64[] = array%data%13#1
        let concatenated%4#0: bytes = (concat expr_value_trimmed%6#0 encoded%2#0)
        let byte_len%4#0: uint64 = (len concatenated%4#0)
        let len_%4#0: uint64 = (/ byte_len%4#0 8u)
        let as_bytes%4#0: bytes[8] = (itob len_%4#0)
        let len_16_bit%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let concat_result%4#0: bytes = (concat len_16_bit%4#0 concatenated%4#0)
        let expr_value_trimmed%7#0: bytes = ((extract 2 0) concat_result%4#0)
        let array%sub_item%14#1: bytes[8] = (itob 12u)
        let array%encoded%14#1: encoded_uint64[] = (concat 0x array%sub_item%14#1)
        let array%data%14#1: encoded_uint64[] = (concat 0x array%encoded%14#1)
        let array%sub_item%15#1: bytes[8] = (itob 13u)
        let array%encoded%15#1: encoded_uint64[] = (concat 0x array%sub_item%15#1)
        let array%data%15#1: encoded_uint64[] = (concat array%data%14#1 array%encoded%15#1)
        let encoded%3#0: encoded_uint64[] = array%data%15#1
        let concatenated%5#0: bytes = (concat expr_value_trimmed%7#0 encoded%3#0)
        let byte_len%5#0: uint64 = (len concatenated%5#0)
        let len_%5#0: uint64 = (/ byte_len%5#0 8u)
        let as_bytes%5#0: bytes[8] = (itob len_%5#0)
        let len_16_bit%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let arr#12: encoded_uint64[] = (concat len_16_bit%5#0 concatenated%5#0)
        let tmp%45#1: uint64 = (extract_uint16 arr#12 0u)
        let tmp%46#1: bool = (== tmp%45#1 11u)
        goto tmp%46#1 ? block@77 : block@89
    block@77: // and_contd_L39
        let tmp%47#1: uint64 = (extract_uint64 arr#12 2u)
        let tmp%48#0: bool = (== tmp%47#1 1u)
        goto tmp%48#0 ? block@78 : block@89
    block@78: // and_contd_L39
        let tmp%49#0: uint64 = (extract_uint64 arr#12 10u)
        let tmp%50#0: bool = (== tmp%49#0 10u)
        goto tmp%50#0 ? block@79 : block@89
    block@79: // and_contd_L39
        let tmp%51#0: uint64 = (extract_uint64 arr#12 18u)
        let tmp%52#0: bool = (== tmp%51#0 3u)
        goto tmp%52#0 ? block@80 : block@89
    block@80: // and_contd_L39
        let tmp%53#0: uint64 = (extract_uint64 arr#12 26u)
        let tmp%54#0: bool = (== tmp%53#0 4u)
        goto tmp%54#0 ? block@81 : block@89
    block@81: // and_contd_L39
        let tmp%55#0: uint64 = (extract_uint64 arr#12 34u)
        let tmp%56#0: bool = (== tmp%55#0 1u)
        goto tmp%56#0 ? block@82 : block@89
    block@82: // and_contd_L39
        let tmp%57#0: uint64 = (extract_uint64 arr#12 42u)
        let tmp%58#0: bool = (== tmp%57#0 10u)
        goto tmp%58#0 ? block@83 : block@89
    block@83: // and_contd_L39
        let tmp%59#0: uint64 = (extract_uint64 arr#12 50u)
        let tmp%60#0: bool = (== tmp%59#0 3u)
        goto tmp%60#0 ? block@84 : block@89
    block@84: // and_contd_L39
        let tmp%61#0: uint64 = (extract_uint64 arr#12 58u)
        let tmp%62#0: bool = (== tmp%61#0 4u)
        goto tmp%62#0 ? block@85 : block@89
    block@85: // and_contd_L39
        let tmp%63#0: uint64 = (extract_uint64 arr#12 66u)
        let tmp%64#0: bool = (== tmp%63#0 11u)
        goto tmp%64#0 ? block@86 : block@89
    block@86: // and_contd_L39
        let tmp%65#0: uint64 = (extract_uint64 arr#12 74u)
        let tmp%66#0: bool = (== tmp%65#0 12u)
        goto tmp%66#0 ? block@87 : block@89
    block@87: // and_contd_L39
        let tmp%67#0: uint64 = (extract_uint64 arr#12 82u)
        let tmp%68#0: bool = (== tmp%67#0 13u)
        goto tmp%68#0 ? block@88 : block@89
    block@88: // bool_true_L39
        let and_result%4#0: bool = 1u
        goto block@90
    block@89: // bool_false_L39
        let and_result%4#1: bool = 0u
        goto block@90
    block@90: // bool_merge_L39
        let and_result%4#2: bool = φ(and_result%4#0 <- block@88, and_result%4#1 <- block@89)
        (assert and_result%4#2) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // arc4Interop_route_L42
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let array%encoded%16#1: bytes[4][] = (concat 0x 0x0000007b)
        let array%data%16#1: bytes[4][] = (concat 0x array%encoded%16#1)
        let array%encoded%17#1: bytes[4][] = (concat 0x 0x0000007b)
        let array%data%17#1: bytes[4][] = (concat array%data%16#1 array%encoded%17#1)
        let encoded%0#1: bytes[4][] = array%data%17#1
        let byte_len%0#1: uint64 = (len encoded%0#1)
        let len_%0#1: uint64 = (/ byte_len%0#1 4u)
        let as_bytes%0#1: bytes[8] = (itob len_%0#1)
        let len_16_bit%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let a1#0: bytes[4][] = (concat len_16_bit%0#1 encoded%0#1)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) a1#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 0x0000007b0000007b)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) concat_result%1#0)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 0x0000007b0000007b)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 4u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let a1#1: bytes[4][] = (concat len_16_bit%2#0 concatenated%2#0)
        let tmp%0#3: uint64 = (extract_uint16 a1#1 0u)
        let tmp%1#2: bool = (== tmp%0#3 6u)
        goto tmp%1#2 ? block@37 : block@44
    block@37: // and_contd_L51
        let tmp%2#2: bytes = ((extract 2 4) a1#1)
        let tmp%3#2: bool = (== tmp%2#2 0x0000007b)
        goto tmp%3#2 ? block@38 : block@44
    block@38: // and_contd_L51
        let tmp%4#1: bytes = ((extract 6 4) a1#1)
        let tmp%5#1: bool = (== tmp%4#1 0x0000007b)
        goto tmp%5#1 ? block@39 : block@44
    block@39: // and_contd_L51
        let tmp%6#1: bytes = ((extract 10 4) a1#1)
        let tmp%7#1: bool = (== tmp%6#1 0x0000007b)
        goto tmp%7#1 ? block@40 : block@44
    block@40: // and_contd_L51
        let tmp%8#1: bytes = ((extract 14 4) a1#1)
        let tmp%9#1: bool = (== tmp%8#1 0x0000007b)
        goto tmp%9#1 ? block@41 : block@44
    block@41: // and_contd_L51
        let tmp%10#1: bytes = ((extract 18 4) a1#1)
        let tmp%11#1: bool = (== tmp%10#1 0x0000007b)
        goto tmp%11#1 ? block@42 : block@44
    block@42: // and_contd_L51
        let tmp%12#1: bytes = ((extract 22 4) a1#1)
        let tmp%13#1: bool = (== tmp%12#1 0x0000007b)
        goto tmp%13#1 ? block@43 : block@44
    block@43: // bool_true_L51
        let and_result%0#3: bool = 1u
        goto block@45
    block@44: // bool_false_L51
        let and_result%0#4: bool = 0u
        goto block@45
    block@45: // bool_merge_L51
        let and_result%0#5: bool = φ(and_result%0#3 <- block@43, and_result%0#4 <- block@44)
        (assert and_result%0#5) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // structs_route_L54
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let p.x#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let p.y#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        let array%sub_item%16#1: bytes[8] = (itob p.x#0)
        let array%encoded%18#1: (encoded_uint64,encoded_uint64)[] = (concat 0x array%sub_item%16#1)
        let array%sub_item%17#1: bytes[8] = (itob p.y#0)
        let array%encoded%19#1: (encoded_uint64,encoded_uint64)[] = (concat array%encoded%18#1 array%sub_item%17#1)
        let array%data%18#1: (encoded_uint64,encoded_uint64)[] = (concat 0x array%encoded%19#1)
        let encoded%0#0: (encoded_uint64,encoded_uint64)[] = array%data%18#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let myVectors#1: (encoded_uint64,encoded_uint64)[] = (concat len_16_bit%0#0 encoded%0#0)
        let tmp%0#2: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#1: bool = (== tmp%0#2 1u)
        goto tmp%1#1 ? block@30 : block@33
    block@30: // and_contd_L59
        let arc4_item%0#0: bytes = ((extract 2 16) myVectors#1)
        let item0%1#1: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let tmp%2#1: bool = (== item0%1#1 p.x#0)
        goto tmp%2#1 ? block@31 : block@33
    block@31: // and_contd_L59
        let item1%3#0: uint64 = (extract_uint64 arc4_item%0#0 8u)
        let tmp%3#1: bool = (== item1%3#0 p.y#0)
        goto tmp%3#1 ? block@32 : block@33
    block@32: // bool_true_L59
        let and_result%0#0: bool = 1u
        goto block@34
    block@33: // bool_false_L59
        let and_result%0#1: bool = 0u
        goto block@34
    block@34: // bool_merge_L59
        let and_result%0#2: bool = φ(and_result%0#0 <- block@32, and_result%0#1 <- block@33)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%22#0: bytes = (concat 0x151f7c75 myVectors#1)
        (log tmp%22#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // booleans_route_L63
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let concat_result%0#1: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, 0x800080, 3u, 8u)
        let tmp%28#0: bytes = (concat 0x151f7c75 concat_result%0#1)
        (log tmp%28#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // booleansStatic_route_L67
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // arc4Booleans_route_L71
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, 0x800080, 3u, 8u)
        let tmp%39#0: bytes = (concat 0x151f7c75 concat_result%0#0)
        (log tmp%39#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // arc4BooleansStatic_route_L75
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L6
        let tmp%45#0: uint64 = (txn OnCompletion)
        goto tmp%45#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L6
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@90, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@45, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@34, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#1: bytes = (concat result#0 tmp%5#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%6#0: bool = (< write_offset#1 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2