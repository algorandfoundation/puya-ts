main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@21
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "readonlyArray()void" => block@3, method "arrayInObject()void" => block@4, method "buildArray()uint64[]" => block@5, method "arrayFromCtor()uint64[]" => block@6, method "buildReadonly()uint64[]" => block@7, method "doThings()void" => block@8, method "fixedArray(uint64[50])void" => block@9, method "arc4Interop()void" => block@10, method "structs((uint64,uint64))(uint64,uint64)[]" => block@11, method "booleans()bool[]" => block@12, method "booleansStatic()(bool,bool,bool)" => block@13, method "arc4Booleans()bool[]" => block@14, method "arc4BooleansStatic()(bool,bool,bool)" => block@15, method "aliasing(uint64[],uint64[])void" => block@16, method "receiveMutable(uint64[])void" => block@17, method "receiveReadonly(uint64[])void" => block@18, * => block@25}
    block@3: // readonlyArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat aggregate%len_u16%0#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%head%2#1
        let myArray#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%head%3#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#1)
        let aggregate%as_Encoded(uint64[])%0#1: Encoded(uint64[]) = aggregate%head%3#1
        let tmp%0#9: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#1
        let concat%0#3: Encoded(len+uint64[]) = (concat myArray#0 tmp%0#9) // on error: max array length exceeded
        let extract_uint16%0#2: uint64 = (extract_uint16 myArray#0 0u)
        let add%0#2: uint64 = (+ extract_uint16%0#2 1u)
        let as_bytes%0#3: bytes[8] = (itob add%0#2)
        let as_u16_bytes%0#3: bytes = ((extract 6 2) as_bytes%0#3)
        let myArray#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#3 as_u16_bytes%0#3)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%head%4#1: bytes = (concat aggregate%len_u16%1#1 aggregate%as_Encoded(uint64)%4#1)
        let aggregate%as_Encoded(len+uint64[])%1#1: Encoded(len+uint64[]) = aggregate%head%4#1
        let encoded_array%1#1: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#1
        let extract_to_end%0#2: bytes = ((extract 2 0) encoded_array%1#1)
        let concat%1#2: Encoded(len+uint64[]) = (concat myArray#1 extract_to_end%0#2) // on error: max array length exceeded
        let extract_to_end%1#2: bytes = ((extract 2 0) concat%1#2)
        let len%0#2: uint64 = (len extract_to_end%1#2)
        let div_floor%0#2: uint64 = (/ len%0#2 8u)
        let as_bytes%1#2: bytes[8] = (itob div_floor%0#2)
        let as_u16_bytes%1#2: bytes = ((extract 6 2) as_bytes%1#2)
        let myArray#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#2 as_u16_bytes%1#2)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let encoded_value%0#3: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#1
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) myArray#2)
        let aggregate%bytes_offset%0#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#1: uint64 = (* 2u 8u)
        let aggregate%write_offset_with_length_header%0#1: uint64 = (+ aggregate%write_offset%0#1 2u)
        let aggregate%updated_array%0#1: bytes = (replace3 myArray#2 aggregate%write_offset_with_length_header%0#1 encoded_value%0#3)
        let myArray#3: Encoded(len+uint64[]) = aggregate%updated_array%0#1
        let array_length%5#1: uint64 = (extract_uint16 myArray#3 0u)
        let tmp%1#10: bool = (== array_length%5#1 5u)
        goto tmp%1#10 ? block@280 : block@286
    block@280: // and_contd_L17
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) myArray#3)
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%0#5: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%0#3: uint64 = (btoi array_item%0#5)
        let tmp%2#6: bool = (== values%0#3 1u)
        goto tmp%2#6 ? block@281 : block@286
    block@281: // and_contd_L17
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) myArray#3)
        let aggregate%bytes_offset%2#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%1#4: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%1#3: uint64 = (btoi array_item%1#4)
        let tmp%3#4: bool = (== values%1#3 2u)
        goto tmp%3#4 ? block@282 : block@286
    block@282: // and_contd_L17
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) myArray#3)
        let aggregate%bytes_offset%3#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%2#2: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%2#2: uint64 = (btoi array_item%2#2)
        let tmp%4#4: bool = (== values%2#2 3u)
        goto tmp%4#4 ? block@283 : block@286
    block@283: // and_contd_L17
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) myArray#3)
        let aggregate%bytes_offset%4#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%4#1 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%3#3: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%3#3: uint64 = (btoi array_item%3#3)
        let tmp%5#4: bool = (== values%3#3 5u)
        goto tmp%5#4 ? block@284 : block@286
    block@284: // and_contd_L17
        let aggregate%array_trimmed%5#1: bytes = ((extract 2 0) myArray#3)
        let aggregate%bytes_offset%5#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 aggregate%array_trimmed%5#1 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%4#3: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%4#2: uint64 = (btoi array_item%4#3)
        let tmp%6#4: bool = (== values%4#2 4u)
        goto tmp%6#4 ? block@285 : block@286
    block@285: // bool_true_L17
        let and_result%0#12: bool = 1u
        goto block@287
    block@286: // bool_false_L17
        let and_result%0#13: bool = 0u
        goto block@287
    block@287: // bool_merge_L17
        let and_result%0#14: bool = Ï†(and_result%0#12 <- block@285, and_result%0#13 <- block@286)
        (assert and_result%0#14) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@26
    block@4: // arrayInObject_route_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let aggregate%as_bytes%2#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob 1337u)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%head%5#1: bytes = (concat aggregate%len_u16%2#1 aggregate%as_Encoded(uint64)%6#1)
        let aggregate%as_Encoded(len+uint64[])%2#1: Encoded(len+uint64[]) = aggregate%head%5#1
        let person.favouriteNumbers#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#1
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%head%6#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%7#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%6#1
        let tmp%0#8: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#2: Encoded(len+uint64[]) = (concat person.favouriteNumbers#0 tmp%0#8) // on error: max array length exceeded
        let extract_uint16%0#1: uint64 = (extract_uint16 person.favouriteNumbers#0 0u)
        let add%0#1: uint64 = (+ extract_uint16%0#1 1u)
        let as_bytes%0#2: bytes[8] = (itob add%0#1)
        let as_u16_bytes%0#2: bytes = ((extract 6 2) as_bytes%0#2)
        let person.favouriteNumbers#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#2 as_u16_bytes%0#2)
        let length#0: uint64 = (extract_uint16 person.favouriteNumbers#1 0u)
        let tmp%1#9: bool = (== length#0 2u)
        (assert tmp%1#9)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@26
    block@5: // buildArray_route_L30
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let aggregate%as_bytes%3#1: bytes[8] = (itob 4u)
        let aggregate%len_u16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%8#1: Encoded(uint64) = aggregate%val_as_bytes%8#1
        let aggregate%head%7#1: bytes = (concat aggregate%len_u16%3#1 aggregate%as_Encoded(uint64)%8#1)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%9#1: Encoded(uint64) = aggregate%val_as_bytes%9#1
        let aggregate%head%8#1: bytes = (concat aggregate%head%7#1 aggregate%as_Encoded(uint64)%9#1)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%10#1: Encoded(uint64) = aggregate%val_as_bytes%10#1
        let aggregate%head%9#1: bytes = (concat aggregate%head%8#1 aggregate%as_Encoded(uint64)%10#1)
        let aggregate%val_as_bytes%11#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%11#1: Encoded(uint64) = aggregate%val_as_bytes%11#1
        let aggregate%head%10#1: bytes = (concat aggregate%head%9#1 aggregate%as_Encoded(uint64)%11#1)
        let aggregate%as_Encoded(len+uint64[])%3#1: Encoded(len+uint64[]) = aggregate%head%10#1
        let encoded_array%0#4: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%3#1
        let tmp%16#0: bytes = (concat 0x151f7c75 encoded_array%0#4)
        (log tmp%16#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@26
    block@6: // arrayFromCtor_route_L34
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let aggregate%as_bytes%4#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%val_as_bytes%12#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%12#1: Encoded(uint64) = aggregate%val_as_bytes%12#1
        let aggregate%head%11#1: bytes = (concat aggregate%len_u16%4#1 aggregate%as_Encoded(uint64)%12#1)
        let aggregate%val_as_bytes%13#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%13#1: Encoded(uint64) = aggregate%val_as_bytes%13#1
        let aggregate%head%12#1: bytes = (concat aggregate%head%11#1 aggregate%as_Encoded(uint64)%13#1)
        let aggregate%val_as_bytes%14#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%14#1: Encoded(uint64) = aggregate%val_as_bytes%14#1
        let aggregate%head%13#1: bytes = (concat aggregate%head%12#1 aggregate%as_Encoded(uint64)%14#1)
        let aggregate%as_Encoded(len+uint64[])%4#1: Encoded(len+uint64[]) = aggregate%head%13#1
        let encoded_array%0#3: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%4#1
        let tmp%22#0: bytes = (concat 0x151f7c75 encoded_array%0#3)
        (log tmp%22#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@26
    block@7: // buildReadonly_route_L38
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let aggregate%as_bytes%5#1: bytes[8] = (itob 4u)
        let aggregate%len_u16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%val_as_bytes%15#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%15#1: Encoded(uint64) = aggregate%val_as_bytes%15#1
        let aggregate%head%14#1: bytes = (concat aggregate%len_u16%5#1 aggregate%as_Encoded(uint64)%15#1)
        let aggregate%val_as_bytes%16#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%16#1: Encoded(uint64) = aggregate%val_as_bytes%16#1
        let aggregate%head%15#1: bytes = (concat aggregate%head%14#1 aggregate%as_Encoded(uint64)%16#1)
        let aggregate%val_as_bytes%17#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%17#1: Encoded(uint64) = aggregate%val_as_bytes%17#1
        let aggregate%head%16#1: bytes = (concat aggregate%head%15#1 aggregate%as_Encoded(uint64)%17#1)
        let aggregate%val_as_bytes%18#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%18#1: Encoded(uint64) = aggregate%val_as_bytes%18#1
        let aggregate%head%17#1: bytes = (concat aggregate%head%16#1 aggregate%as_Encoded(uint64)%18#1)
        let aggregate%as_Encoded(len+uint64[])%5#1: Encoded(len+uint64[]) = aggregate%head%17#1
        let encoded_array%0#2: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%5#1
        let tmp%28#0: bytes = (concat 0x151f7c75 encoded_array%0#2)
        (log tmp%28#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@26
    block@8: // doThings_route_L42
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        goto block@90
    block@90: // while_top_L20
        let tmp%1#8: uint64 = (global OpcodeBudget)
        let tmp%2#5: bool = (> 1410u tmp%1#8)
        goto tmp%2#5 ? block@91 : block@93
    block@91: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@90
    block@93: // after_while_L20
        let aggregate%as_bytes%6#1: bytes[8] = (itob 4u)
        let aggregate%len_u16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%val_as_bytes%19#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%19#1: Encoded(uint64) = aggregate%val_as_bytes%19#1
        let aggregate%head%18#1: bytes = (concat aggregate%len_u16%6#1 aggregate%as_Encoded(uint64)%19#1)
        let aggregate%val_as_bytes%20#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%20#1: Encoded(uint64) = aggregate%val_as_bytes%20#1
        let aggregate%head%19#1: bytes = (concat aggregate%head%18#1 aggregate%as_Encoded(uint64)%20#1)
        let aggregate%val_as_bytes%21#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%21#1: Encoded(uint64) = aggregate%val_as_bytes%21#1
        let aggregate%head%20#1: bytes = (concat aggregate%head%19#1 aggregate%as_Encoded(uint64)%21#1)
        let aggregate%val_as_bytes%22#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%22#1: Encoded(uint64) = aggregate%val_as_bytes%22#1
        let aggregate%head%21#1: bytes = (concat aggregate%head%20#1 aggregate%as_Encoded(uint64)%22#1)
        let aggregate%as_Encoded(len+uint64[])%6#1: Encoded(len+uint64[]) = aggregate%head%21#1
        let arr#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%6#1
        let aggregate%val_as_bytes%23#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%23#1: Encoded(uint64) = aggregate%val_as_bytes%23#1
        let aggregate%head%22#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%23#1)
        let aggregate%as_Encoded(uint64[])%2#1: Encoded(uint64[]) = aggregate%head%22#1
        let tmp%1#7: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#1
        let concat%0#1: Encoded(len+uint64[]) = (concat arr#0 tmp%1#7) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#1: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#1 as_u16_bytes%0#1)
        let (tmp%2#4: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 8u)
        let tmp%4#3: uint64 = (btoi tmp%2#4)
        let tmp%5#3: bool = (== tmp%4#3 5u)
        (assert tmp%5#3)
        let array_length%1#1: uint64 = (extract_uint16 arr#2 0u)
        let tmp%6#3: bool = (== array_length%1#1 4u)
        goto tmp%6#3 ? block@94 : block@99
    block@94: // and_contd_L48
        let aggregate%array_trimmed%6#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%6#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 aggregate%array_trimmed%6#1 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%0#4: Encoded(uint64) = aggregate%encoded_element%6#1
        let values%0#2: uint64 = (btoi array_item%0#4)
        let tmp%7#2: bool = (== values%0#2 1u)
        goto tmp%7#2 ? block@95 : block@99
    block@95: // and_contd_L48
        let aggregate%array_trimmed%7#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%7#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%7#1: bytes = (extract3 aggregate%array_trimmed%7#1 aggregate%bytes_offset%7#1 8u) // on error: index access is out of bounds
        let array_item%1#3: Encoded(uint64) = aggregate%encoded_element%7#1
        let values%1#2: uint64 = (btoi array_item%1#3)
        let tmp%8#2: bool = (== values%1#2 2u)
        goto tmp%8#2 ? block@96 : block@99
    block@96: // and_contd_L48
        let aggregate%array_trimmed%8#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%8#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%8#1: bytes = (extract3 aggregate%array_trimmed%8#1 aggregate%bytes_offset%8#1 8u) // on error: index access is out of bounds
        let array_item%2#1: Encoded(uint64) = aggregate%encoded_element%8#1
        let values%2#1: uint64 = (btoi array_item%2#1)
        let tmp%9#2: bool = (== values%2#1 3u)
        goto tmp%9#2 ? block@97 : block@99
    block@97: // and_contd_L48
        let aggregate%array_trimmed%9#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%9#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%9#1: bytes = (extract3 aggregate%array_trimmed%9#1 aggregate%bytes_offset%9#1 8u) // on error: index access is out of bounds
        let array_item%3#2: Encoded(uint64) = aggregate%encoded_element%9#1
        let values%3#2: uint64 = (btoi array_item%3#2)
        let tmp%10#2: bool = (== values%3#2 4u)
        goto tmp%10#2 ? block@98 : block@99
    block@98: // bool_true_L48
        let and_result%0#9: bool = 1u
        goto block@100
    block@99: // bool_false_L48
        let and_result%0#10: bool = 0u
        goto block@100
    block@100: // bool_merge_L48
        let and_result%0#11: bool = Ï†(and_result%0#9 <- block@98, and_result%0#10 <- block@99)
        (assert and_result%0#11) // assert target is match for conditions
        let aggregate%array_trimmed%10#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%10#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%10#1: bytes = (extract3 aggregate%array_trimmed%10#1 aggregate%bytes_offset%10#1 8u) // on error: index access is out of bounds
        let array_item%4#2: Encoded(uint64) = aggregate%encoded_element%10#1
        let values%4#1: uint64 = (btoi array_item%4#2)
        let tmp%11#2: bool = (== values%4#1 1u)
        (assert tmp%11#2)
        let tmp%12#2: uint64 = (- array_length%1#1 1u)
        let aggregate%array_trimmed%11#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%11#1: uint64 = (* tmp%12#2 8u)
        let aggregate%encoded_element%11#1: bytes = (extract3 aggregate%array_trimmed%11#1 aggregate%bytes_offset%11#1 8u) // on error: index access is out of bounds
        let array_item%5#2: Encoded(uint64) = aggregate%encoded_element%11#1
        let values%5#1: uint64 = (btoi array_item%5#2)
        let tmp%13#2: bool = (== values%5#1 4u)
        (assert tmp%13#2)
        let concat%1#1: Encoded(len+uint64[]) = (concat arr#2 tmp%1#7) // on error: max array length exceeded
        let add%1#0: uint64 = (+ array_length%1#1 1u)
        let as_bytes%1#1: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#1: bytes = ((extract 6 2) as_bytes%1#1)
        let arr#5: Encoded(len+uint64[]) = ((replace2 0) concat%1#1 as_u16_bytes%1#1)
        let array_length%4#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%15#1: bool = (== array_length%4#0 5u)
        goto tmp%15#1 ? block@101 : block@107
    block@101: // and_contd_L57
        let aggregate%array_trimmed%12#1: bytes = ((extract 2 0) arr#5)
        let aggregate%bytes_offset%12#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%12#1: bytes = (extract3 aggregate%array_trimmed%12#1 aggregate%bytes_offset%12#1 8u) // on error: index access is out of bounds
        let array_item%6#1: Encoded(uint64) = aggregate%encoded_element%12#1
        let values%6#1: uint64 = (btoi array_item%6#1)
        let tmp%16#2: bool = (== values%6#1 1u)
        goto tmp%16#2 ? block@102 : block@107
    block@102: // and_contd_L57
        let aggregate%array_trimmed%13#1: bytes = ((extract 2 0) arr#5)
        let aggregate%bytes_offset%13#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%13#1: bytes = (extract3 aggregate%array_trimmed%13#1 aggregate%bytes_offset%13#1 8u) // on error: index access is out of bounds
        let array_item%7#1: Encoded(uint64) = aggregate%encoded_element%13#1
        let values%7#1: uint64 = (btoi array_item%7#1)
        let tmp%17#2: bool = (== values%7#1 2u)
        goto tmp%17#2 ? block@103 : block@107
    block@103: // and_contd_L57
        let aggregate%array_trimmed%14#1: bytes = ((extract 2 0) arr#5)
        let aggregate%bytes_offset%14#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%14#1: bytes = (extract3 aggregate%array_trimmed%14#1 aggregate%bytes_offset%14#1 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%14#1
        let values%8#1: uint64 = (btoi array_item%8#0)
        let tmp%18#2: bool = (== values%8#1 3u)
        goto tmp%18#2 ? block@104 : block@107
    block@104: // and_contd_L57
        let aggregate%array_trimmed%15#1: bytes = ((extract 2 0) arr#5)
        let aggregate%bytes_offset%15#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%15#1: bytes = (extract3 aggregate%array_trimmed%15#1 aggregate%bytes_offset%15#1 8u) // on error: index access is out of bounds
        let array_item%9#1: Encoded(uint64) = aggregate%encoded_element%15#1
        let values%9#1: uint64 = (btoi array_item%9#1)
        let tmp%19#1: bool = (== values%9#1 4u)
        goto tmp%19#1 ? block@105 : block@107
    block@105: // and_contd_L57
        let aggregate%array_trimmed%16#1: bytes = ((extract 2 0) arr#5)
        let aggregate%bytes_offset%16#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%16#1: bytes = (extract3 aggregate%array_trimmed%16#1 aggregate%bytes_offset%16#1 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%16#1
        let values%10#1: uint64 = (btoi array_item%10#0)
        let tmp%20#2: bool = (== values%10#1 5u)
        goto tmp%20#2 ? block@106 : block@107
    block@106: // bool_true_L57
        let and_result%1#3: bool = 1u
        goto block@108
    block@107: // bool_false_L57
        let and_result%1#4: bool = 0u
        goto block@108
    block@108: // bool_merge_L57
        let and_result%1#5: bool = Ï†(and_result%1#3 <- block@106, and_result%1#4 <- block@107)
        (assert and_result%1#5) // assert target is match for conditions
        let (tmp%21#2: bytes, arr#8: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#5, 8u)
        let top#0: uint64 = (btoi tmp%21#2)
        let tmp%24#2: bool = (== top#0 5u)
        (assert tmp%24#2)
        let array_length%5#0: uint64 = (extract_uint16 arr#8 0u)
        let tmp%25#2: bool = (== array_length%5#0 4u)
        goto tmp%25#2 ? block@109 : block@114
    block@109: // and_contd_L63
        let aggregate%array_trimmed%17#1: bytes = ((extract 2 0) arr#8)
        let aggregate%bytes_offset%17#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%17#1: bytes = (extract3 aggregate%array_trimmed%17#1 aggregate%bytes_offset%17#1 8u) // on error: index access is out of bounds
        let array_item%11#1: Encoded(uint64) = aggregate%encoded_element%17#1
        let values%11#1: uint64 = (btoi array_item%11#1)
        let tmp%26#2: bool = (== values%11#1 1u)
        goto tmp%26#2 ? block@110 : block@114
    block@110: // and_contd_L63
        let aggregate%array_trimmed%18#1: bytes = ((extract 2 0) arr#8)
        let aggregate%bytes_offset%18#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%18#1: bytes = (extract3 aggregate%array_trimmed%18#1 aggregate%bytes_offset%18#1 8u) // on error: index access is out of bounds
        let array_item%12#0: Encoded(uint64) = aggregate%encoded_element%18#1
        let values%12#1: uint64 = (btoi array_item%12#0)
        let tmp%27#2: bool = (== values%12#1 2u)
        goto tmp%27#2 ? block@111 : block@114
    block@111: // and_contd_L63
        let aggregate%array_trimmed%19#1: bytes = ((extract 2 0) arr#8)
        let aggregate%bytes_offset%19#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%19#1: bytes = (extract3 aggregate%array_trimmed%19#1 aggregate%bytes_offset%19#1 8u) // on error: index access is out of bounds
        let array_item%13#1: Encoded(uint64) = aggregate%encoded_element%19#1
        let values%13#1: uint64 = (btoi array_item%13#1)
        let tmp%28#2: bool = (== values%13#1 3u)
        goto tmp%28#2 ? block@112 : block@114
    block@112: // and_contd_L63
        let aggregate%array_trimmed%20#1: bytes = ((extract 2 0) arr#8)
        let aggregate%bytes_offset%20#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%20#1: bytes = (extract3 aggregate%array_trimmed%20#1 aggregate%bytes_offset%20#1 8u) // on error: index access is out of bounds
        let array_item%14#1: Encoded(uint64) = aggregate%encoded_element%20#1
        let values%14#1: uint64 = (btoi array_item%14#1)
        let tmp%29#2: bool = (== values%14#1 4u)
        goto tmp%29#2 ? block@113 : block@114
    block@113: // bool_true_L63
        let and_result%2#3: bool = 1u
        goto block@115
    block@114: // bool_false_L63
        let and_result%2#4: bool = 0u
        goto block@115
    block@115: // bool_merge_L63
        let and_result%2#5: bool = Ï†(and_result%2#3 <- block@113, and_result%2#4 <- block@114)
        (assert and_result%2#5) // assert target is match for conditions
        let aggregate%val_as_bytes%24#1: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%24#1: Encoded(uint64) = aggregate%val_as_bytes%24#1
        let encoded_value%0#2: Encoded(uint64) = aggregate%as_Encoded(uint64)%24#1
        let aggregate%array_trimmed%21#1: bytes = ((extract 2 0) arr#8)
        let aggregate%bytes_offset%21#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%21#1: bytes = (extract3 aggregate%array_trimmed%21#1 aggregate%bytes_offset%21#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#1: uint64 = (* 1u 8u)
        let aggregate%write_offset_with_length_header%1#1: uint64 = (+ aggregate%write_offset%1#1 2u)
        let aggregate%updated_array%1#1: bytes = (replace3 arr#8 aggregate%write_offset_with_length_header%1#1 encoded_value%0#2)
        let arr#11: Encoded(len+uint64[]) = aggregate%updated_array%1#1
        let aggregate%val_as_bytes%25#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%25#1: Encoded(uint64) = aggregate%val_as_bytes%25#1
        let encoded_value%1#2: Encoded(uint64) = aggregate%as_Encoded(uint64)%25#1
        let aggregate%array_trimmed%22#1: bytes = ((extract 2 0) arr#11)
        let aggregate%bytes_offset%22#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%22#1: bytes = (extract3 aggregate%array_trimmed%22#1 aggregate%bytes_offset%22#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%2#1: uint64 = (* 1u 8u)
        let aggregate%write_offset_with_length_header%2#1: uint64 = (+ aggregate%write_offset%2#1 2u)
        let aggregate%updated_array%2#1: bytes = (replace3 arr#11 aggregate%write_offset_with_length_header%2#1 encoded_value%1#2)
        let arr2#0: Encoded(len+uint64[]) = aggregate%updated_array%2#1
        let array_length%6#0: uint64 = (extract_uint16 arr#11 0u)
        let tmp%30#2: bool = (== array_length%6#0 4u)
        goto tmp%30#2 ? block@116 : block@121
    block@116: // and_contd_L70
        let aggregate%array_trimmed%23#1: bytes = ((extract 2 0) arr#11)
        let aggregate%bytes_offset%23#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%23#1: bytes = (extract3 aggregate%array_trimmed%23#1 aggregate%bytes_offset%23#1 8u) // on error: index access is out of bounds
        let array_item%15#1: Encoded(uint64) = aggregate%encoded_element%23#1
        let values%15#1: uint64 = (btoi array_item%15#1)
        let tmp%31#1: bool = (== values%15#1 1u)
        goto tmp%31#1 ? block@117 : block@121
    block@117: // and_contd_L70
        let aggregate%array_trimmed%24#1: bytes = ((extract 2 0) arr#11)
        let aggregate%bytes_offset%24#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%24#1: bytes = (extract3 aggregate%array_trimmed%24#1 aggregate%bytes_offset%24#1 8u) // on error: index access is out of bounds
        let array_item%16#1: Encoded(uint64) = aggregate%encoded_element%24#1
        let values%16#1: uint64 = (btoi array_item%16#1)
        let tmp%32#2: bool = (== values%16#1 10u)
        goto tmp%32#2 ? block@118 : block@121
    block@118: // and_contd_L70
        let aggregate%array_trimmed%25#1: bytes = ((extract 2 0) arr#11)
        let aggregate%bytes_offset%25#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%25#1: bytes = (extract3 aggregate%array_trimmed%25#1 aggregate%bytes_offset%25#1 8u) // on error: index access is out of bounds
        let array_item%17#1: Encoded(uint64) = aggregate%encoded_element%25#1
        let values%17#1: uint64 = (btoi array_item%17#1)
        let tmp%33#1: bool = (== values%17#1 3u)
        goto tmp%33#1 ? block@119 : block@121
    block@119: // and_contd_L70
        let aggregate%array_trimmed%26#1: bytes = ((extract 2 0) arr#11)
        let aggregate%bytes_offset%26#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%26#1: bytes = (extract3 aggregate%array_trimmed%26#1 aggregate%bytes_offset%26#1 8u) // on error: index access is out of bounds
        let array_item%18#1: Encoded(uint64) = aggregate%encoded_element%26#1
        let values%18#1: uint64 = (btoi array_item%18#1)
        let tmp%34#2: bool = (== values%18#1 4u)
        goto tmp%34#2 ? block@120 : block@121
    block@120: // bool_true_L70
        let and_result%3#3: bool = 1u
        goto block@122
    block@121: // bool_false_L70
        let and_result%3#4: bool = 0u
        goto block@122
    block@122: // bool_merge_L70
        let and_result%3#5: bool = Ï†(and_result%3#3 <- block@120, and_result%3#4 <- block@121)
        (assert and_result%3#5) // assert target is match for conditions
        let array_length%7#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%35#1: bool = (== array_length%7#0 4u)
        goto tmp%35#1 ? block@123 : block@128
    block@123: // and_contd_L71
        let aggregate%array_trimmed%27#1: bytes = ((extract 2 0) arr2#0)
        let aggregate%bytes_offset%27#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%27#1: bytes = (extract3 aggregate%array_trimmed%27#1 aggregate%bytes_offset%27#1 8u) // on error: index access is out of bounds
        let array_item%19#1: Encoded(uint64) = aggregate%encoded_element%27#1
        let values%19#1: uint64 = (btoi array_item%19#1)
        let tmp%36#2: bool = (== values%19#1 1u)
        goto tmp%36#2 ? block@124 : block@128
    block@124: // and_contd_L71
        let aggregate%array_trimmed%28#1: bytes = ((extract 2 0) arr2#0)
        let aggregate%bytes_offset%28#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%28#1: bytes = (extract3 aggregate%array_trimmed%28#1 aggregate%bytes_offset%28#1 8u) // on error: index access is out of bounds
        let array_item%20#1: Encoded(uint64) = aggregate%encoded_element%28#1
        let values%20#1: uint64 = (btoi array_item%20#1)
        let tmp%37#1: bool = (== values%20#1 5u)
        goto tmp%37#1 ? block@125 : block@128
    block@125: // and_contd_L71
        let aggregate%array_trimmed%29#1: bytes = ((extract 2 0) arr2#0)
        let aggregate%bytes_offset%29#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%29#1: bytes = (extract3 aggregate%array_trimmed%29#1 aggregate%bytes_offset%29#1 8u) // on error: index access is out of bounds
        let array_item%21#1: Encoded(uint64) = aggregate%encoded_element%29#1
        let values%21#0: uint64 = (btoi array_item%21#1)
        let tmp%38#2: bool = (== values%21#0 3u)
        goto tmp%38#2 ? block@126 : block@128
    block@126: // and_contd_L71
        let aggregate%array_trimmed%30#1: bytes = ((extract 2 0) arr2#0)
        let aggregate%bytes_offset%30#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%30#1: bytes = (extract3 aggregate%array_trimmed%30#1 aggregate%bytes_offset%30#1 8u) // on error: index access is out of bounds
        let array_item%22#0: Encoded(uint64) = aggregate%encoded_element%30#1
        let values%22#0: uint64 = (btoi array_item%22#0)
        let tmp%39#1: bool = (== values%22#0 4u)
        goto tmp%39#1 ? block@127 : block@128
    block@127: // bool_true_L71
        let and_result%4#3: bool = 1u
        goto block@129
    block@128: // bool_false_L71
        let and_result%4#4: bool = 0u
        goto block@129
    block@129: // bool_merge_L71
        let and_result%4#5: bool = Ï†(and_result%4#3 <- block@127, and_result%4#4 <- block@128)
        (assert and_result%4#5) // assert target is match for conditions
        let aggregate%val_as_bytes%26#1: bytes[8] = (itob 12u)
        let aggregate%as_Encoded(uint64)%26#1: Encoded(uint64) = aggregate%val_as_bytes%26#1
        let aggregate%head%23#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%26#1)
        let aggregate%val_as_bytes%27#1: bytes[8] = (itob 13u)
        let aggregate%as_Encoded(uint64)%27#1: Encoded(uint64) = aggregate%val_as_bytes%27#1
        let aggregate%head%24#1: bytes = (concat aggregate%head%23#1 aggregate%as_Encoded(uint64)%27#1)
        let aggregate%as_Encoded(uint64,uint64)%0#1: Encoded(uint64,uint64) = aggregate%head%24#1
        let t1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#1
        let extract_to_end%0#1: bytes = ((extract 2 0) arr#11)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#11 extract_to_end%0#1) // on error: max array length exceeded
        let extract_to_end%1#1: bytes = ((extract 2 0) concat%2#0)
        let len%0#1: uint64 = (len extract_to_end%1#1)
        let div_floor%0#1: uint64 = (/ len%0#1 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#1)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let aggregate%val_as_bytes%28#1: bytes[8] = (itob 11u)
        let aggregate%as_Encoded(uint64)%28#1: Encoded(uint64) = aggregate%val_as_bytes%28#1
        let aggregate%head%25#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%28#1)
        let aggregate%as_Encoded(uint64[])%3#1: Encoded(uint64[]) = aggregate%head%25#1
        let tmp%41#1: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%3#1
        let concat%3#0: Encoded(len+uint64[]) = (concat replace%2#0 tmp%41#1) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 replace%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat replace%3#0 t1#0) // on error: max array length exceeded
        let extract_to_end%2#1: bytes = ((extract 2 0) concat%4#0)
        let len%1#1: uint64 = (len extract_to_end%2#1)
        let div_floor%1#1: uint64 = (/ len%1#1 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#1)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr#16: Encoded(len+uint64[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let array_length%9#0: uint64 = (extract_uint16 arr#16 0u)
        let tmp%42#1: bool = (== array_length%9#0 11u)
        goto tmp%42#1 ? block@130 : block@142
    block@130: // and_contd_L76
        let aggregate%array_trimmed%31#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%31#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%31#1: bytes = (extract3 aggregate%array_trimmed%31#1 aggregate%bytes_offset%31#1 8u) // on error: index access is out of bounds
        let array_item%23#0: Encoded(uint64) = aggregate%encoded_element%31#1
        let values%23#0: uint64 = (btoi array_item%23#0)
        let tmp%43#1: bool = (== values%23#0 1u)
        goto tmp%43#1 ? block@131 : block@142
    block@131: // and_contd_L76
        let aggregate%array_trimmed%32#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%32#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%32#1: bytes = (extract3 aggregate%array_trimmed%32#1 aggregate%bytes_offset%32#1 8u) // on error: index access is out of bounds
        let array_item%24#0: Encoded(uint64) = aggregate%encoded_element%32#1
        let values%24#0: uint64 = (btoi array_item%24#0)
        let tmp%44#1: bool = (== values%24#0 10u)
        goto tmp%44#1 ? block@132 : block@142
    block@132: // and_contd_L76
        let aggregate%array_trimmed%33#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%33#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%33#1: bytes = (extract3 aggregate%array_trimmed%33#1 aggregate%bytes_offset%33#1 8u) // on error: index access is out of bounds
        let array_item%25#0: Encoded(uint64) = aggregate%encoded_element%33#1
        let values%25#0: uint64 = (btoi array_item%25#0)
        let tmp%45#1: bool = (== values%25#0 3u)
        goto tmp%45#1 ? block@133 : block@142
    block@133: // and_contd_L76
        let aggregate%array_trimmed%34#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%34#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%34#1: bytes = (extract3 aggregate%array_trimmed%34#1 aggregate%bytes_offset%34#1 8u) // on error: index access is out of bounds
        let array_item%26#0: Encoded(uint64) = aggregate%encoded_element%34#1
        let values%26#0: uint64 = (btoi array_item%26#0)
        let tmp%46#1: bool = (== values%26#0 4u)
        goto tmp%46#1 ? block@134 : block@142
    block@134: // and_contd_L76
        let aggregate%array_trimmed%35#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%35#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%35#1: bytes = (extract3 aggregate%array_trimmed%35#1 aggregate%bytes_offset%35#1 8u) // on error: index access is out of bounds
        let array_item%27#0: Encoded(uint64) = aggregate%encoded_element%35#1
        let values%27#0: uint64 = (btoi array_item%27#0)
        let tmp%47#1: bool = (== values%27#0 1u)
        goto tmp%47#1 ? block@135 : block@142
    block@135: // and_contd_L76
        let aggregate%array_trimmed%36#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%36#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%36#1: bytes = (extract3 aggregate%array_trimmed%36#1 aggregate%bytes_offset%36#1 8u) // on error: index access is out of bounds
        let array_item%28#0: Encoded(uint64) = aggregate%encoded_element%36#1
        let values%28#0: uint64 = (btoi array_item%28#0)
        let tmp%48#1: bool = (== values%28#0 10u)
        goto tmp%48#1 ? block@136 : block@142
    block@136: // and_contd_L76
        let aggregate%array_trimmed%37#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%37#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%37#1: bytes = (extract3 aggregate%array_trimmed%37#1 aggregate%bytes_offset%37#1 8u) // on error: index access is out of bounds
        let array_item%29#0: Encoded(uint64) = aggregate%encoded_element%37#1
        let values%29#0: uint64 = (btoi array_item%29#0)
        let tmp%49#1: bool = (== values%29#0 3u)
        goto tmp%49#1 ? block@137 : block@142
    block@137: // and_contd_L76
        let aggregate%array_trimmed%38#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%38#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%38#1: bytes = (extract3 aggregate%array_trimmed%38#1 aggregate%bytes_offset%38#1 8u) // on error: index access is out of bounds
        let array_item%30#0: Encoded(uint64) = aggregate%encoded_element%38#1
        let values%30#0: uint64 = (btoi array_item%30#0)
        let tmp%50#1: bool = (== values%30#0 4u)
        goto tmp%50#1 ? block@138 : block@142
    block@138: // and_contd_L76
        let aggregate%array_trimmed%39#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%39#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%39#1: bytes = (extract3 aggregate%array_trimmed%39#1 aggregate%bytes_offset%39#1 8u) // on error: index access is out of bounds
        let array_item%31#0: Encoded(uint64) = aggregate%encoded_element%39#1
        let values%31#0: uint64 = (btoi array_item%31#0)
        let tmp%51#1: bool = (== values%31#0 11u)
        goto tmp%51#1 ? block@139 : block@142
    block@139: // and_contd_L76
        let aggregate%array_trimmed%40#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%40#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%40#1: bytes = (extract3 aggregate%array_trimmed%40#1 aggregate%bytes_offset%40#1 8u) // on error: index access is out of bounds
        let array_item%32#0: Encoded(uint64) = aggregate%encoded_element%40#1
        let values%32#0: uint64 = (btoi array_item%32#0)
        let tmp%52#1: bool = (== values%32#0 12u)
        goto tmp%52#1 ? block@140 : block@142
    block@140: // and_contd_L76
        let aggregate%array_trimmed%41#1: bytes = ((extract 2 0) arr#16)
        let aggregate%bytes_offset%41#1: uint64 = (* 10u 8u)
        let aggregate%encoded_element%41#1: bytes = (extract3 aggregate%array_trimmed%41#1 aggregate%bytes_offset%41#1 8u) // on error: index access is out of bounds
        let array_item%33#0: Encoded(uint64) = aggregate%encoded_element%41#1
        let values%33#0: uint64 = (btoi array_item%33#0)
        let tmp%53#1: bool = (== values%33#0 13u)
        goto tmp%53#1 ? block@141 : block@142
    block@141: // bool_true_L76
        let and_result%5#0: bool = 1u
        goto block@143
    block@142: // bool_false_L76
        let and_result%5#1: bool = 0u
        goto block@143
    block@143: // bool_merge_L76
        let and_result%5#2: bool = Ï†(and_result%5#0 <- block@141, and_result%5#1 <- block@142)
        (assert and_result%5#2) // assert target is match for conditions
        let aggregate%as_bytes%7#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%val_as_bytes%29#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%29#1: Encoded(uint64) = aggregate%val_as_bytes%29#1
        let aggregate%head%26#1: bytes = (concat aggregate%len_u16%7#1 aggregate%as_Encoded(uint64)%29#1)
        let aggregate%val_as_bytes%30#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%30#1: Encoded(uint64) = aggregate%val_as_bytes%30#1
        let aggregate%head%27#1: bytes = (concat aggregate%head%26#1 aggregate%as_Encoded(uint64)%30#1)
        let aggregate%val_as_bytes%31#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%31#1: Encoded(uint64) = aggregate%val_as_bytes%31#1
        let aggregate%head%28#1: bytes = (concat aggregate%head%27#1 aggregate%as_Encoded(uint64)%31#1)
        let aggregate%as_Encoded(len+uint64[])%7#1: Encoded(len+uint64[]) = aggregate%head%28#1
        let rArr1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%7#1
        let aggregate%val_as_bytes%32#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%32#1: Encoded(uint64) = aggregate%val_as_bytes%32#1
        let aggregate%head%29#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%32#1)
        let aggregate%as_Encoded(uint64[])%4#1: Encoded(uint64[]) = aggregate%head%29#1
        let tmp%54#1: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%4#1
        let concat%5#0: Encoded(len+uint64[]) = (concat rArr1#0 tmp%54#1) // on error: max array length exceeded
        let extract_uint16%3#0: uint64 = (extract_uint16 rArr1#0 0u)
        let add%3#0: uint64 = (+ extract_uint16%3#0 1u)
        let as_bytes%5#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let rArr1#1: Encoded(len+uint64[]) = ((replace2 0) concat%5#0 as_u16_bytes%5#0)
        let aggregate%as_bytes%8#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%val_as_bytes%33#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%33#1: Encoded(uint64) = aggregate%val_as_bytes%33#1
        let aggregate%head%30#1: bytes = (concat aggregate%len_u16%8#1 aggregate%as_Encoded(uint64)%33#1)
        let aggregate%as_Encoded(len+uint64[])%8#1: Encoded(len+uint64[]) = aggregate%head%30#1
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%8#1
        let extract_to_end%3#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%6#0: Encoded(len+uint64[]) = (concat rArr1#1 extract_to_end%3#0) // on error: max array length exceeded
        let extract_to_end%4#0: bytes = ((extract 2 0) concat%6#0)
        let len%2#0: uint64 = (len extract_to_end%4#0)
        let div_floor%2#0: uint64 = (/ len%2#0 8u)
        let as_bytes%6#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let rArr1#2: Encoded(len+uint64[]) = ((replace2 0) concat%6#0 as_u16_bytes%6#0)
        let array_length%15#0: uint64 = (extract_uint16 rArr1#2 0u)
        let tmp%55#1: bool = (== array_length%15#0 5u)
        goto tmp%55#1 ? block@144 : block@150
    block@144: // and_contd_L81
        let aggregate%array_trimmed%42#1: bytes = ((extract 2 0) rArr1#2)
        let aggregate%bytes_offset%42#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%42#1: bytes = (extract3 aggregate%array_trimmed%42#1 aggregate%bytes_offset%42#1 8u) // on error: index access is out of bounds
        let array_item%34#0: Encoded(uint64) = aggregate%encoded_element%42#1
        let values%34#0: uint64 = (btoi array_item%34#0)
        let tmp%56#1: bool = (== values%34#0 1u)
        goto tmp%56#1 ? block@145 : block@150
    block@145: // and_contd_L81
        let aggregate%array_trimmed%43#1: bytes = ((extract 2 0) rArr1#2)
        let aggregate%bytes_offset%43#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%43#1: bytes = (extract3 aggregate%array_trimmed%43#1 aggregate%bytes_offset%43#1 8u) // on error: index access is out of bounds
        let array_item%35#0: Encoded(uint64) = aggregate%encoded_element%43#1
        let values%35#0: uint64 = (btoi array_item%35#0)
        let tmp%57#1: bool = (== values%35#0 2u)
        goto tmp%57#1 ? block@146 : block@150
    block@146: // and_contd_L81
        let aggregate%array_trimmed%44#1: bytes = ((extract 2 0) rArr1#2)
        let aggregate%bytes_offset%44#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%44#1: bytes = (extract3 aggregate%array_trimmed%44#1 aggregate%bytes_offset%44#1 8u) // on error: index access is out of bounds
        let array_item%36#0: Encoded(uint64) = aggregate%encoded_element%44#1
        let values%36#0: uint64 = (btoi array_item%36#0)
        let tmp%58#1: bool = (== values%36#0 3u)
        goto tmp%58#1 ? block@147 : block@150
    block@147: // and_contd_L81
        let aggregate%array_trimmed%45#1: bytes = ((extract 2 0) rArr1#2)
        let aggregate%bytes_offset%45#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%45#1: bytes = (extract3 aggregate%array_trimmed%45#1 aggregate%bytes_offset%45#1 8u) // on error: index access is out of bounds
        let array_item%37#0: Encoded(uint64) = aggregate%encoded_element%45#1
        let values%37#0: uint64 = (btoi array_item%37#0)
        let tmp%59#1: bool = (== values%37#0 4u)
        goto tmp%59#1 ? block@148 : block@150
    block@148: // and_contd_L81
        let aggregate%array_trimmed%46#1: bytes = ((extract 2 0) rArr1#2)
        let aggregate%bytes_offset%46#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%46#1: bytes = (extract3 aggregate%array_trimmed%46#1 aggregate%bytes_offset%46#1 8u) // on error: index access is out of bounds
        let array_item%38#0: Encoded(uint64) = aggregate%encoded_element%46#1
        let values%38#0: uint64 = (btoi array_item%38#0)
        let tmp%60#1: bool = (== values%38#0 5u)
        goto tmp%60#1 ? block@149 : block@150
    block@149: // bool_true_L81
        let and_result%6#0: bool = 1u
        goto block@151
    block@150: // bool_false_L81
        let and_result%6#1: bool = 0u
        goto block@151
    block@151: // bool_merge_L81
        let and_result%6#2: bool = Ï†(and_result%6#0 <- block@149, and_result%6#1 <- block@150)
        (assert and_result%6#2) // assert target is match for conditions
        let fArr1#0: Encoded(uint64[4]) = (bzero 32u)
        let aggregate%bytes_offset%47#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%47#1: bytes = (extract3 fArr1#0 aggregate%bytes_offset%47#1 8u) // on error: index access is out of bounds
        let array_item%39#0: Encoded(uint64) = aggregate%encoded_element%47#1
        let values%39#0: uint64 = (btoi array_item%39#0)
        goto values%39#0 ? block@156 : block@152
    block@152: // and_contd_L85
        let aggregate%bytes_offset%48#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%48#1: bytes = (extract3 fArr1#0 aggregate%bytes_offset%48#1 8u) // on error: index access is out of bounds
        let array_item%40#0: Encoded(uint64) = aggregate%encoded_element%48#1
        let values%40#0: uint64 = (btoi array_item%40#0)
        goto values%40#0 ? block@156 : block@153
    block@153: // and_contd_L85
        let aggregate%bytes_offset%49#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%49#1: bytes = (extract3 fArr1#0 aggregate%bytes_offset%49#1 8u) // on error: index access is out of bounds
        let array_item%41#0: Encoded(uint64) = aggregate%encoded_element%49#1
        let values%41#0: uint64 = (btoi array_item%41#0)
        goto values%41#0 ? block@156 : block@154
    block@154: // and_contd_L85
        let aggregate%bytes_offset%50#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%50#1: bytes = (extract3 fArr1#0 aggregate%bytes_offset%50#1 8u) // on error: index access is out of bounds
        let array_item%42#0: Encoded(uint64) = aggregate%encoded_element%50#1
        let values%42#0: uint64 = (btoi array_item%42#0)
        goto values%42#0 ? block@156 : block@155
    block@155: // bool_true_L85
        let and_result%7#0: bool = 1u
        goto block@157
    block@156: // bool_false_L85
        let and_result%7#1: bool = 0u
        goto block@157
    block@157: // bool_merge_L85
        let and_result%7#2: bool = Ï†(and_result%7#0 <- block@155, and_result%7#1 <- block@156)
        (assert and_result%7#2) // assert target is match for conditions
        let aggregate%array_trimmed%47#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%51#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%51#1: bytes = (extract3 aggregate%array_trimmed%47#1 aggregate%bytes_offset%51#1 8u) // on error: index access is out of bounds
        let array_item%43#0: Encoded(uint64) = aggregate%encoded_element%51#1
        let values%43#0: uint64 = (btoi array_item%43#0)
        goto values%43#0 ? block@166 : block@158
    block@158: // and_contd_L86
        let aggregate%array_trimmed%48#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%52#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%52#1: bytes = (extract3 aggregate%array_trimmed%48#1 aggregate%bytes_offset%52#1 8u) // on error: index access is out of bounds
        let array_item%44#0: Encoded(uint64) = aggregate%encoded_element%52#1
        let values%44#0: uint64 = (btoi array_item%44#0)
        goto values%44#0 ? block@166 : block@159
    block@159: // and_contd_L86
        let aggregate%array_trimmed%49#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%53#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%53#1: bytes = (extract3 aggregate%array_trimmed%49#1 aggregate%bytes_offset%53#1 8u) // on error: index access is out of bounds
        let array_item%45#0: Encoded(uint64) = aggregate%encoded_element%53#1
        let values%45#0: uint64 = (btoi array_item%45#0)
        goto values%45#0 ? block@166 : block@160
    block@160: // and_contd_L86
        let aggregate%array_trimmed%50#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%54#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%54#1: bytes = (extract3 aggregate%array_trimmed%50#1 aggregate%bytes_offset%54#1 8u) // on error: index access is out of bounds
        let array_item%46#0: Encoded(uint64) = aggregate%encoded_element%54#1
        let values%46#0: uint64 = (btoi array_item%46#0)
        goto values%46#0 ? block@166 : block@161
    block@161: // and_contd_L86
        let aggregate%array_trimmed%51#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%55#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%55#1: bytes = (extract3 aggregate%array_trimmed%51#1 aggregate%bytes_offset%55#1 8u) // on error: index access is out of bounds
        let array_item%47#0: Encoded(uint64) = aggregate%encoded_element%55#1
        let values%47#0: uint64 = (btoi array_item%47#0)
        goto values%47#0 ? block@166 : block@162
    block@162: // and_contd_L86
        let aggregate%array_trimmed%52#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%56#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%56#1: bytes = (extract3 aggregate%array_trimmed%52#1 aggregate%bytes_offset%56#1 8u) // on error: index access is out of bounds
        let array_item%48#0: Encoded(uint64) = aggregate%encoded_element%56#1
        let values%48#0: uint64 = (btoi array_item%48#0)
        goto values%48#0 ? block@166 : block@163
    block@163: // and_contd_L86
        let aggregate%array_trimmed%53#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%57#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%57#1: bytes = (extract3 aggregate%array_trimmed%53#1 aggregate%bytes_offset%57#1 8u) // on error: index access is out of bounds
        let array_item%49#0: Encoded(uint64) = aggregate%encoded_element%57#1
        let values%49#0: uint64 = (btoi array_item%49#0)
        goto values%49#0 ? block@166 : block@164
    block@164: // and_contd_L86
        let aggregate%array_trimmed%54#1: bytes = ((extract 2 0) 0x000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        let aggregate%bytes_offset%58#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%58#1: bytes = (extract3 aggregate%array_trimmed%54#1 aggregate%bytes_offset%58#1 8u) // on error: index access is out of bounds
        let array_item%50#0: Encoded(uint64) = aggregate%encoded_element%58#1
        let values%50#0: uint64 = (btoi array_item%50#0)
        goto values%50#0 ? block@166 : block@165
    block@165: // bool_true_L86
        let and_result%8#0: bool = 1u
        goto block@167
    block@166: // bool_false_L86
        let and_result%8#1: bool = 0u
        goto block@167
    block@167: // bool_merge_L86
        let and_result%8#2: bool = Ï†(and_result%8#0 <- block@165, and_result%8#1 <- block@166)
        (assert and_result%8#2) // assert target is match for conditions
        let concat%8#0: Encoded(len+uint64[]) = (concat rArr1#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) // on error: max array length exceeded
        let extract_to_end%7#0: bytes = ((extract 2 0) concat%8#0)
        let len%4#0: uint64 = (len extract_to_end%7#0)
        let div_floor%4#0: uint64 = (/ len%4#0 8u)
        let as_bytes%9#0: bytes[8] = (itob div_floor%4#0)
        let as_u16_bytes%9#0: bytes = ((extract 6 2) as_bytes%9#0)
        let arr3#0: Encoded(len+uint64[]) = ((replace2 0) concat%8#0 as_u16_bytes%9#0)
        let array_length%19#0: uint64 = (extract_uint16 arr3#0 0u)
        let tmp%76#1: bool = (== array_length%19#0 13u)
        goto tmp%76#1 ? block@168 : block@182
    block@168: // and_contd_L89
        let aggregate%array_trimmed%55#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%59#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%59#1: bytes = (extract3 aggregate%array_trimmed%55#1 aggregate%bytes_offset%59#1 8u) // on error: index access is out of bounds
        let array_item%51#0: Encoded(uint64) = aggregate%encoded_element%59#1
        let values%51#0: uint64 = (btoi array_item%51#0)
        let tmp%77#1: bool = (== values%51#0 1u)
        goto tmp%77#1 ? block@169 : block@182
    block@169: // and_contd_L89
        let aggregate%array_trimmed%56#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%60#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%60#1: bytes = (extract3 aggregate%array_trimmed%56#1 aggregate%bytes_offset%60#1 8u) // on error: index access is out of bounds
        let array_item%52#0: Encoded(uint64) = aggregate%encoded_element%60#1
        let values%52#0: uint64 = (btoi array_item%52#0)
        let tmp%78#1: bool = (== values%52#0 2u)
        goto tmp%78#1 ? block@170 : block@182
    block@170: // and_contd_L89
        let aggregate%array_trimmed%57#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%61#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%61#1: bytes = (extract3 aggregate%array_trimmed%57#1 aggregate%bytes_offset%61#1 8u) // on error: index access is out of bounds
        let array_item%53#0: Encoded(uint64) = aggregate%encoded_element%61#1
        let values%53#0: uint64 = (btoi array_item%53#0)
        let tmp%79#1: bool = (== values%53#0 3u)
        goto tmp%79#1 ? block@171 : block@182
    block@171: // and_contd_L89
        let aggregate%array_trimmed%58#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%62#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%62#1: bytes = (extract3 aggregate%array_trimmed%58#1 aggregate%bytes_offset%62#1 8u) // on error: index access is out of bounds
        let array_item%54#0: Encoded(uint64) = aggregate%encoded_element%62#1
        let values%54#0: uint64 = (btoi array_item%54#0)
        let tmp%80#1: bool = (== values%54#0 4u)
        goto tmp%80#1 ? block@172 : block@182
    block@172: // and_contd_L89
        let aggregate%array_trimmed%59#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%63#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%63#1: bytes = (extract3 aggregate%array_trimmed%59#1 aggregate%bytes_offset%63#1 8u) // on error: index access is out of bounds
        let array_item%55#0: Encoded(uint64) = aggregate%encoded_element%63#1
        let values%55#0: uint64 = (btoi array_item%55#0)
        let tmp%81#1: bool = (== values%55#0 5u)
        goto tmp%81#1 ? block@173 : block@182
    block@173: // and_contd_L89
        let aggregate%array_trimmed%60#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%64#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%64#1: bytes = (extract3 aggregate%array_trimmed%60#1 aggregate%bytes_offset%64#1 8u) // on error: index access is out of bounds
        let array_item%56#0: Encoded(uint64) = aggregate%encoded_element%64#1
        let values%56#0: uint64 = (btoi array_item%56#0)
        goto values%56#0 ? block@182 : block@174
    block@174: // and_contd_L89
        let aggregate%array_trimmed%61#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%65#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%65#1: bytes = (extract3 aggregate%array_trimmed%61#1 aggregate%bytes_offset%65#1 8u) // on error: index access is out of bounds
        let array_item%57#0: Encoded(uint64) = aggregate%encoded_element%65#1
        let values%57#0: uint64 = (btoi array_item%57#0)
        goto values%57#0 ? block@182 : block@175
    block@175: // and_contd_L89
        let aggregate%array_trimmed%62#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%66#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%66#1: bytes = (extract3 aggregate%array_trimmed%62#1 aggregate%bytes_offset%66#1 8u) // on error: index access is out of bounds
        let array_item%58#0: Encoded(uint64) = aggregate%encoded_element%66#1
        let values%58#0: uint64 = (btoi array_item%58#0)
        goto values%58#0 ? block@182 : block@176
    block@176: // and_contd_L89
        let aggregate%array_trimmed%63#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%67#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%67#1: bytes = (extract3 aggregate%array_trimmed%63#1 aggregate%bytes_offset%67#1 8u) // on error: index access is out of bounds
        let array_item%59#0: Encoded(uint64) = aggregate%encoded_element%67#1
        let values%59#0: uint64 = (btoi array_item%59#0)
        goto values%59#0 ? block@182 : block@177
    block@177: // and_contd_L89
        let aggregate%array_trimmed%64#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%68#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%68#1: bytes = (extract3 aggregate%array_trimmed%64#1 aggregate%bytes_offset%68#1 8u) // on error: index access is out of bounds
        let array_item%60#0: Encoded(uint64) = aggregate%encoded_element%68#1
        let values%60#0: uint64 = (btoi array_item%60#0)
        goto values%60#0 ? block@182 : block@178
    block@178: // and_contd_L89
        let aggregate%array_trimmed%65#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%69#1: uint64 = (* 10u 8u)
        let aggregate%encoded_element%69#1: bytes = (extract3 aggregate%array_trimmed%65#1 aggregate%bytes_offset%69#1 8u) // on error: index access is out of bounds
        let array_item%61#0: Encoded(uint64) = aggregate%encoded_element%69#1
        let values%61#0: uint64 = (btoi array_item%61#0)
        goto values%61#0 ? block@182 : block@179
    block@179: // and_contd_L89
        let aggregate%array_trimmed%66#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%70#1: uint64 = (* 11u 8u)
        let aggregate%encoded_element%70#1: bytes = (extract3 aggregate%array_trimmed%66#1 aggregate%bytes_offset%70#1 8u) // on error: index access is out of bounds
        let array_item%62#0: Encoded(uint64) = aggregate%encoded_element%70#1
        let values%62#0: uint64 = (btoi array_item%62#0)
        goto values%62#0 ? block@182 : block@180
    block@180: // and_contd_L89
        let aggregate%array_trimmed%67#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%71#1: uint64 = (* 12u 8u)
        let aggregate%encoded_element%71#1: bytes = (extract3 aggregate%array_trimmed%67#1 aggregate%bytes_offset%71#1 8u) // on error: index access is out of bounds
        let array_item%63#0: Encoded(uint64) = aggregate%encoded_element%71#1
        let values%63#0: uint64 = (btoi array_item%63#0)
        goto values%63#0 ? block@182 : block@181
    block@181: // bool_true_L89
        let and_result%9#0: bool = 1u
        goto block@183
    block@182: // bool_false_L89
        let and_result%9#1: bool = 0u
        goto block@183
    block@183: // bool_merge_L89
        let and_result%9#2: bool = Ï†(and_result%9#0 <- block@181, and_result%9#1 <- block@182)
        (assert and_result%9#2) // assert target is match for conditions
        let extract_to_end%8#0: bytes = ((extract 2 0) arr#16)
        let concat%9#0: Encoded(len+uint64[]) = (concat rArr1#2 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%9#0: bytes = ((extract 2 0) concat%9#0)
        let len%5#0: uint64 = (len extract_to_end%9#0)
        let div_floor%5#0: uint64 = (/ len%5#0 8u)
        let as_bytes%10#0: bytes[8] = (itob div_floor%5#0)
        let as_u16_bytes%10#0: bytes = ((extract 6 2) as_bytes%10#0)
        let arr4#0: Encoded(len+uint64[]) = ((replace2 0) concat%9#0 as_u16_bytes%10#0)
        let array_length%22#0: uint64 = (extract_uint16 arr4#0 0u)
        let tmp%90#1: bool = (== array_length%22#0 16u)
        goto tmp%90#1 ? block@184 : block@201
    block@184: // and_contd_L92
        let aggregate%array_trimmed%68#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%72#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%72#1: bytes = (extract3 aggregate%array_trimmed%68#1 aggregate%bytes_offset%72#1 8u) // on error: index access is out of bounds
        let array_item%64#0: Encoded(uint64) = aggregate%encoded_element%72#1
        let values%64#0: uint64 = (btoi array_item%64#0)
        let tmp%91#1: bool = (== values%64#0 1u)
        goto tmp%91#1 ? block@185 : block@201
    block@185: // and_contd_L92
        let aggregate%array_trimmed%69#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%73#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%73#1: bytes = (extract3 aggregate%array_trimmed%69#1 aggregate%bytes_offset%73#1 8u) // on error: index access is out of bounds
        let array_item%65#0: Encoded(uint64) = aggregate%encoded_element%73#1
        let values%65#0: uint64 = (btoi array_item%65#0)
        let tmp%92#0: bool = (== values%65#0 2u)
        goto tmp%92#0 ? block@186 : block@201
    block@186: // and_contd_L92
        let aggregate%array_trimmed%70#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%74#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%74#1: bytes = (extract3 aggregate%array_trimmed%70#1 aggregate%bytes_offset%74#1 8u) // on error: index access is out of bounds
        let array_item%66#0: Encoded(uint64) = aggregate%encoded_element%74#1
        let values%66#0: uint64 = (btoi array_item%66#0)
        let tmp%93#0: bool = (== values%66#0 3u)
        goto tmp%93#0 ? block@187 : block@201
    block@187: // and_contd_L92
        let aggregate%array_trimmed%71#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%75#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%75#1: bytes = (extract3 aggregate%array_trimmed%71#1 aggregate%bytes_offset%75#1 8u) // on error: index access is out of bounds
        let array_item%67#0: Encoded(uint64) = aggregate%encoded_element%75#1
        let values%67#0: uint64 = (btoi array_item%67#0)
        let tmp%94#0: bool = (== values%67#0 4u)
        goto tmp%94#0 ? block@188 : block@201
    block@188: // and_contd_L92
        let aggregate%array_trimmed%72#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%76#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%76#1: bytes = (extract3 aggregate%array_trimmed%72#1 aggregate%bytes_offset%76#1 8u) // on error: index access is out of bounds
        let array_item%68#0: Encoded(uint64) = aggregate%encoded_element%76#1
        let values%68#0: uint64 = (btoi array_item%68#0)
        let tmp%95#0: bool = (== values%68#0 5u)
        goto tmp%95#0 ? block@189 : block@201
    block@189: // and_contd_L92
        let aggregate%array_trimmed%73#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%77#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%77#1: bytes = (extract3 aggregate%array_trimmed%73#1 aggregate%bytes_offset%77#1 8u) // on error: index access is out of bounds
        let array_item%69#0: Encoded(uint64) = aggregate%encoded_element%77#1
        let values%69#0: uint64 = (btoi array_item%69#0)
        let tmp%96#0: bool = (== values%69#0 1u)
        goto tmp%96#0 ? block@190 : block@201
    block@190: // and_contd_L92
        let aggregate%array_trimmed%74#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%78#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%78#1: bytes = (extract3 aggregate%array_trimmed%74#1 aggregate%bytes_offset%78#1 8u) // on error: index access is out of bounds
        let array_item%70#0: Encoded(uint64) = aggregate%encoded_element%78#1
        let values%70#0: uint64 = (btoi array_item%70#0)
        let tmp%97#0: bool = (== values%70#0 10u)
        goto tmp%97#0 ? block@191 : block@201
    block@191: // and_contd_L92
        let aggregate%array_trimmed%75#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%79#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%79#1: bytes = (extract3 aggregate%array_trimmed%75#1 aggregate%bytes_offset%79#1 8u) // on error: index access is out of bounds
        let array_item%71#0: Encoded(uint64) = aggregate%encoded_element%79#1
        let values%71#0: uint64 = (btoi array_item%71#0)
        let tmp%98#0: bool = (== values%71#0 3u)
        goto tmp%98#0 ? block@192 : block@201
    block@192: // and_contd_L92
        let aggregate%array_trimmed%76#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%80#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%80#1: bytes = (extract3 aggregate%array_trimmed%76#1 aggregate%bytes_offset%80#1 8u) // on error: index access is out of bounds
        let array_item%72#0: Encoded(uint64) = aggregate%encoded_element%80#1
        let values%72#0: uint64 = (btoi array_item%72#0)
        let tmp%99#0: bool = (== values%72#0 4u)
        goto tmp%99#0 ? block@193 : block@201
    block@193: // and_contd_L92
        let aggregate%array_trimmed%77#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%81#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%81#1: bytes = (extract3 aggregate%array_trimmed%77#1 aggregate%bytes_offset%81#1 8u) // on error: index access is out of bounds
        let array_item%73#0: Encoded(uint64) = aggregate%encoded_element%81#1
        let values%73#0: uint64 = (btoi array_item%73#0)
        let tmp%100#0: bool = (== values%73#0 1u)
        goto tmp%100#0 ? block@194 : block@201
    block@194: // and_contd_L92
        let aggregate%array_trimmed%78#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%82#1: uint64 = (* 10u 8u)
        let aggregate%encoded_element%82#1: bytes = (extract3 aggregate%array_trimmed%78#1 aggregate%bytes_offset%82#1 8u) // on error: index access is out of bounds
        let array_item%74#0: Encoded(uint64) = aggregate%encoded_element%82#1
        let values%74#0: uint64 = (btoi array_item%74#0)
        let tmp%101#0: bool = (== values%74#0 10u)
        goto tmp%101#0 ? block@195 : block@201
    block@195: // and_contd_L92
        let aggregate%array_trimmed%79#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%83#1: uint64 = (* 11u 8u)
        let aggregate%encoded_element%83#1: bytes = (extract3 aggregate%array_trimmed%79#1 aggregate%bytes_offset%83#1 8u) // on error: index access is out of bounds
        let array_item%75#0: Encoded(uint64) = aggregate%encoded_element%83#1
        let values%75#0: uint64 = (btoi array_item%75#0)
        let tmp%102#0: bool = (== values%75#0 3u)
        goto tmp%102#0 ? block@196 : block@201
    block@196: // and_contd_L92
        let aggregate%array_trimmed%80#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%84#1: uint64 = (* 12u 8u)
        let aggregate%encoded_element%84#1: bytes = (extract3 aggregate%array_trimmed%80#1 aggregate%bytes_offset%84#1 8u) // on error: index access is out of bounds
        let array_item%76#0: Encoded(uint64) = aggregate%encoded_element%84#1
        let values%76#0: uint64 = (btoi array_item%76#0)
        let tmp%103#0: bool = (== values%76#0 4u)
        goto tmp%103#0 ? block@197 : block@201
    block@197: // and_contd_L92
        let aggregate%array_trimmed%81#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%85#1: uint64 = (* 13u 8u)
        let aggregate%encoded_element%85#1: bytes = (extract3 aggregate%array_trimmed%81#1 aggregate%bytes_offset%85#1 8u) // on error: index access is out of bounds
        let array_item%77#0: Encoded(uint64) = aggregate%encoded_element%85#1
        let values%77#0: uint64 = (btoi array_item%77#0)
        let tmp%104#0: bool = (== values%77#0 11u)
        goto tmp%104#0 ? block@198 : block@201
    block@198: // and_contd_L92
        let aggregate%array_trimmed%82#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%86#1: uint64 = (* 14u 8u)
        let aggregate%encoded_element%86#1: bytes = (extract3 aggregate%array_trimmed%82#1 aggregate%bytes_offset%86#1 8u) // on error: index access is out of bounds
        let array_item%78#0: Encoded(uint64) = aggregate%encoded_element%86#1
        let values%78#0: uint64 = (btoi array_item%78#0)
        let tmp%105#0: bool = (== values%78#0 12u)
        goto tmp%105#0 ? block@199 : block@201
    block@199: // and_contd_L92
        let aggregate%array_trimmed%83#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%bytes_offset%87#1: uint64 = (* 15u 8u)
        let aggregate%encoded_element%87#1: bytes = (extract3 aggregate%array_trimmed%83#1 aggregate%bytes_offset%87#1 8u) // on error: index access is out of bounds
        let array_item%79#0: Encoded(uint64) = aggregate%encoded_element%87#1
        let values%79#0: uint64 = (btoi array_item%79#0)
        let tmp%106#0: bool = (== values%79#0 13u)
        goto tmp%106#0 ? block@200 : block@201
    block@200: // bool_true_L92
        let and_result%10#0: bool = 1u
        goto block@202
    block@201: // bool_false_L92
        let and_result%10#1: bool = 0u
        goto block@202
    block@202: // bool_merge_L92
        let and_result%10#2: bool = Ï†(and_result%10#0 <- block@200, and_result%10#1 <- block@201)
        (assert and_result%10#2) // assert target is match for conditions
        let extract_to_end%10#0: bytes = ((extract 2 0) rArr1#2)
        let concat%10#0: Encoded(len+uint64[]) = (concat 0x00040000000000000000000000000000000000000000000000000000000000000000 extract_to_end%10#0) // on error: max array length exceeded
        let extract_to_end%11#0: bytes = ((extract 2 0) concat%10#0)
        let len%6#0: uint64 = (len extract_to_end%11#0)
        let div_floor%6#0: uint64 = (/ len%6#0 8u)
        let as_bytes%12#0: bytes[8] = (itob div_floor%6#0)
        let as_u16_bytes%12#0: bytes = ((extract 6 2) as_bytes%12#0)
        let arr5#0: Encoded(len+uint64[]) = ((replace2 0) concat%10#0 as_u16_bytes%12#0)
        let array_length%24#0: uint64 = (extract_uint16 arr5#0 0u)
        let tmp%107#0: bool = (== array_length%24#0 9u)
        goto tmp%107#0 ? block@203 : block@213
    block@203: // and_contd_L95
        let aggregate%array_trimmed%84#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%88#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%88#1: bytes = (extract3 aggregate%array_trimmed%84#1 aggregate%bytes_offset%88#1 8u) // on error: index access is out of bounds
        let array_item%80#0: Encoded(uint64) = aggregate%encoded_element%88#1
        let values%80#0: uint64 = (btoi array_item%80#0)
        goto values%80#0 ? block@213 : block@204
    block@204: // and_contd_L95
        let aggregate%array_trimmed%85#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%89#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%89#1: bytes = (extract3 aggregate%array_trimmed%85#1 aggregate%bytes_offset%89#1 8u) // on error: index access is out of bounds
        let array_item%81#0: Encoded(uint64) = aggregate%encoded_element%89#1
        let values%81#0: uint64 = (btoi array_item%81#0)
        goto values%81#0 ? block@213 : block@205
    block@205: // and_contd_L95
        let aggregate%array_trimmed%86#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%90#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%90#1: bytes = (extract3 aggregate%array_trimmed%86#1 aggregate%bytes_offset%90#1 8u) // on error: index access is out of bounds
        let array_item%82#0: Encoded(uint64) = aggregate%encoded_element%90#1
        let values%82#0: uint64 = (btoi array_item%82#0)
        goto values%82#0 ? block@213 : block@206
    block@206: // and_contd_L95
        let aggregate%array_trimmed%87#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%91#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%91#1: bytes = (extract3 aggregate%array_trimmed%87#1 aggregate%bytes_offset%91#1 8u) // on error: index access is out of bounds
        let array_item%83#0: Encoded(uint64) = aggregate%encoded_element%91#1
        let values%83#0: uint64 = (btoi array_item%83#0)
        goto values%83#0 ? block@213 : block@207
    block@207: // and_contd_L95
        let aggregate%array_trimmed%88#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%92#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%92#1: bytes = (extract3 aggregate%array_trimmed%88#1 aggregate%bytes_offset%92#1 8u) // on error: index access is out of bounds
        let array_item%84#0: Encoded(uint64) = aggregate%encoded_element%92#1
        let values%84#0: uint64 = (btoi array_item%84#0)
        let tmp%112#0: bool = (== values%84#0 1u)
        goto tmp%112#0 ? block@208 : block@213
    block@208: // and_contd_L95
        let aggregate%array_trimmed%89#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%93#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%93#1: bytes = (extract3 aggregate%array_trimmed%89#1 aggregate%bytes_offset%93#1 8u) // on error: index access is out of bounds
        let array_item%85#0: Encoded(uint64) = aggregate%encoded_element%93#1
        let values%85#0: uint64 = (btoi array_item%85#0)
        let tmp%113#0: bool = (== values%85#0 2u)
        goto tmp%113#0 ? block@209 : block@213
    block@209: // and_contd_L95
        let aggregate%array_trimmed%90#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%94#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%94#1: bytes = (extract3 aggregate%array_trimmed%90#1 aggregate%bytes_offset%94#1 8u) // on error: index access is out of bounds
        let array_item%86#0: Encoded(uint64) = aggregate%encoded_element%94#1
        let values%86#0: uint64 = (btoi array_item%86#0)
        let tmp%114#0: bool = (== values%86#0 3u)
        goto tmp%114#0 ? block@210 : block@213
    block@210: // and_contd_L95
        let aggregate%array_trimmed%91#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%95#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%95#1: bytes = (extract3 aggregate%array_trimmed%91#1 aggregate%bytes_offset%95#1 8u) // on error: index access is out of bounds
        let array_item%87#0: Encoded(uint64) = aggregate%encoded_element%95#1
        let values%87#0: uint64 = (btoi array_item%87#0)
        let tmp%115#0: bool = (== values%87#0 4u)
        goto tmp%115#0 ? block@211 : block@213
    block@211: // and_contd_L95
        let aggregate%array_trimmed%92#1: bytes = ((extract 2 0) arr5#0)
        let aggregate%bytes_offset%96#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%96#1: bytes = (extract3 aggregate%array_trimmed%92#1 aggregate%bytes_offset%96#1 8u) // on error: index access is out of bounds
        let array_item%88#0: Encoded(uint64) = aggregate%encoded_element%96#1
        let values%88#0: uint64 = (btoi array_item%88#0)
        let tmp%116#0: bool = (== values%88#0 5u)
        goto tmp%116#0 ? block@212 : block@213
    block@212: // bool_true_L95
        let and_result%11#0: bool = 1u
        goto block@214
    block@213: // bool_false_L95
        let and_result%11#1: bool = 0u
        goto block@214
    block@214: // bool_merge_L95
        let and_result%11#2: bool = Ï†(and_result%11#0 <- block@212, and_result%11#1 <- block@213)
        (assert and_result%11#2) // assert target is match for conditions
        let concat%11#0: Encoded(len+uint64[]) = (concat 0x00040000000000000000000000000000000000000000000000000000000000000000 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%13#0: bytes = ((extract 2 0) concat%11#0)
        let len%7#0: uint64 = (len extract_to_end%13#0)
        let div_floor%7#0: uint64 = (/ len%7#0 8u)
        let as_bytes%14#0: bytes[8] = (itob div_floor%7#0)
        let as_u16_bytes%14#0: bytes = ((extract 6 2) as_bytes%14#0)
        let arr6#0: Encoded(len+uint64[]) = ((replace2 0) concat%11#0 as_u16_bytes%14#0)
        let array_length%26#0: uint64 = (extract_uint16 arr6#0 0u)
        let tmp%117#0: bool = (== array_length%26#0 15u)
        goto tmp%117#0 ? block@215 : block@231
    block@215: // and_contd_L98
        let aggregate%array_trimmed%93#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%97#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%97#1: bytes = (extract3 aggregate%array_trimmed%93#1 aggregate%bytes_offset%97#1 8u) // on error: index access is out of bounds
        let array_item%89#0: Encoded(uint64) = aggregate%encoded_element%97#1
        let values%89#0: uint64 = (btoi array_item%89#0)
        goto values%89#0 ? block@231 : block@216
    block@216: // and_contd_L98
        let aggregate%array_trimmed%94#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%98#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%98#1: bytes = (extract3 aggregate%array_trimmed%94#1 aggregate%bytes_offset%98#1 8u) // on error: index access is out of bounds
        let array_item%90#0: Encoded(uint64) = aggregate%encoded_element%98#1
        let values%90#0: uint64 = (btoi array_item%90#0)
        goto values%90#0 ? block@231 : block@217
    block@217: // and_contd_L98
        let aggregate%array_trimmed%95#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%99#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%99#1: bytes = (extract3 aggregate%array_trimmed%95#1 aggregate%bytes_offset%99#1 8u) // on error: index access is out of bounds
        let array_item%91#0: Encoded(uint64) = aggregate%encoded_element%99#1
        let values%91#0: uint64 = (btoi array_item%91#0)
        goto values%91#0 ? block@231 : block@218
    block@218: // and_contd_L98
        let aggregate%array_trimmed%96#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%100#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%100#1: bytes = (extract3 aggregate%array_trimmed%96#1 aggregate%bytes_offset%100#1 8u) // on error: index access is out of bounds
        let array_item%92#0: Encoded(uint64) = aggregate%encoded_element%100#1
        let values%92#0: uint64 = (btoi array_item%92#0)
        goto values%92#0 ? block@231 : block@219
    block@219: // and_contd_L98
        let aggregate%array_trimmed%97#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%101#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%101#1: bytes = (extract3 aggregate%array_trimmed%97#1 aggregate%bytes_offset%101#1 8u) // on error: index access is out of bounds
        let array_item%93#0: Encoded(uint64) = aggregate%encoded_element%101#1
        let values%93#0: uint64 = (btoi array_item%93#0)
        let tmp%122#0: bool = (== values%93#0 1u)
        goto tmp%122#0 ? block@220 : block@231
    block@220: // and_contd_L98
        let aggregate%array_trimmed%98#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%102#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%102#1: bytes = (extract3 aggregate%array_trimmed%98#1 aggregate%bytes_offset%102#1 8u) // on error: index access is out of bounds
        let array_item%94#0: Encoded(uint64) = aggregate%encoded_element%102#1
        let values%94#0: uint64 = (btoi array_item%94#0)
        let tmp%123#0: bool = (== values%94#0 10u)
        goto tmp%123#0 ? block@221 : block@231
    block@221: // and_contd_L98
        let aggregate%array_trimmed%99#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%103#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%103#1: bytes = (extract3 aggregate%array_trimmed%99#1 aggregate%bytes_offset%103#1 8u) // on error: index access is out of bounds
        let array_item%95#0: Encoded(uint64) = aggregate%encoded_element%103#1
        let values%95#0: uint64 = (btoi array_item%95#0)
        let tmp%124#0: bool = (== values%95#0 3u)
        goto tmp%124#0 ? block@222 : block@231
    block@222: // and_contd_L98
        let aggregate%array_trimmed%100#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%104#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%104#1: bytes = (extract3 aggregate%array_trimmed%100#1 aggregate%bytes_offset%104#1 8u) // on error: index access is out of bounds
        let array_item%96#0: Encoded(uint64) = aggregate%encoded_element%104#1
        let values%96#0: uint64 = (btoi array_item%96#0)
        let tmp%125#0: bool = (== values%96#0 4u)
        goto tmp%125#0 ? block@223 : block@231
    block@223: // and_contd_L98
        let aggregate%array_trimmed%101#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%105#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%105#1: bytes = (extract3 aggregate%array_trimmed%101#1 aggregate%bytes_offset%105#1 8u) // on error: index access is out of bounds
        let array_item%97#0: Encoded(uint64) = aggregate%encoded_element%105#1
        let values%97#0: uint64 = (btoi array_item%97#0)
        let tmp%126#0: bool = (== values%97#0 1u)
        goto tmp%126#0 ? block@224 : block@231
    block@224: // and_contd_L98
        let aggregate%array_trimmed%102#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%106#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%106#1: bytes = (extract3 aggregate%array_trimmed%102#1 aggregate%bytes_offset%106#1 8u) // on error: index access is out of bounds
        let array_item%98#0: Encoded(uint64) = aggregate%encoded_element%106#1
        let values%98#0: uint64 = (btoi array_item%98#0)
        let tmp%127#0: bool = (== values%98#0 10u)
        goto tmp%127#0 ? block@225 : block@231
    block@225: // and_contd_L98
        let aggregate%array_trimmed%103#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%107#1: uint64 = (* 10u 8u)
        let aggregate%encoded_element%107#1: bytes = (extract3 aggregate%array_trimmed%103#1 aggregate%bytes_offset%107#1 8u) // on error: index access is out of bounds
        let array_item%99#0: Encoded(uint64) = aggregate%encoded_element%107#1
        let values%99#0: uint64 = (btoi array_item%99#0)
        let tmp%128#0: bool = (== values%99#0 3u)
        goto tmp%128#0 ? block@226 : block@231
    block@226: // and_contd_L98
        let aggregate%array_trimmed%104#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%108#1: uint64 = (* 11u 8u)
        let aggregate%encoded_element%108#1: bytes = (extract3 aggregate%array_trimmed%104#1 aggregate%bytes_offset%108#1 8u) // on error: index access is out of bounds
        let array_item%100#0: Encoded(uint64) = aggregate%encoded_element%108#1
        let values%100#0: uint64 = (btoi array_item%100#0)
        let tmp%129#0: bool = (== values%100#0 4u)
        goto tmp%129#0 ? block@227 : block@231
    block@227: // and_contd_L98
        let aggregate%array_trimmed%105#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%109#1: uint64 = (* 12u 8u)
        let aggregate%encoded_element%109#1: bytes = (extract3 aggregate%array_trimmed%105#1 aggregate%bytes_offset%109#1 8u) // on error: index access is out of bounds
        let array_item%101#0: Encoded(uint64) = aggregate%encoded_element%109#1
        let values%101#0: uint64 = (btoi array_item%101#0)
        let tmp%130#0: bool = (== values%101#0 11u)
        goto tmp%130#0 ? block@228 : block@231
    block@228: // and_contd_L98
        let aggregate%array_trimmed%106#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%110#1: uint64 = (* 13u 8u)
        let aggregate%encoded_element%110#1: bytes = (extract3 aggregate%array_trimmed%106#1 aggregate%bytes_offset%110#1 8u) // on error: index access is out of bounds
        let array_item%102#0: Encoded(uint64) = aggregate%encoded_element%110#1
        let values%102#0: uint64 = (btoi array_item%102#0)
        let tmp%131#0: bool = (== values%102#0 12u)
        goto tmp%131#0 ? block@229 : block@231
    block@229: // and_contd_L98
        let aggregate%array_trimmed%107#1: bytes = ((extract 2 0) arr6#0)
        let aggregate%bytes_offset%111#1: uint64 = (* 14u 8u)
        let aggregate%encoded_element%111#1: bytes = (extract3 aggregate%array_trimmed%107#1 aggregate%bytes_offset%111#1 8u) // on error: index access is out of bounds
        let array_item%103#0: Encoded(uint64) = aggregate%encoded_element%111#1
        let values%103#0: uint64 = (btoi array_item%103#0)
        let tmp%132#0: bool = (== values%103#0 13u)
        goto tmp%132#0 ? block@230 : block@231
    block@230: // bool_true_L98
        let and_result%12#0: bool = 1u
        goto block@232
    block@231: // bool_false_L98
        let and_result%12#1: bool = 0u
        goto block@232
    block@232: // bool_merge_L98
        let and_result%12#2: bool = Ï†(and_result%12#0 <- block@230, and_result%12#1 <- block@231)
        (assert and_result%12#2) // assert target is match for conditions
        let concat%12#0: Encoded(len+uint64[]) = (concat arr#16 extract_to_end%10#0) // on error: max array length exceeded
        let extract_to_end%15#0: bytes = ((extract 2 0) concat%12#0)
        let len%8#0: uint64 = (len extract_to_end%15#0)
        let div_floor%8#0: uint64 = (/ len%8#0 8u)
        let as_bytes%15#0: bytes[8] = (itob div_floor%8#0)
        let as_u16_bytes%15#0: bytes = ((extract 6 2) as_bytes%15#0)
        let arr7#0: Encoded(len+uint64[]) = ((replace2 0) concat%12#0 as_u16_bytes%15#0)
        let array_length%28#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%133#0: bool = (== array_length%28#0 16u)
        (assert tmp%133#0)
        goto tmp%133#0 ? block@233 : block@250
    block@233: // and_contd_L102
        let aggregate%array_trimmed%108#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%112#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%112#1: bytes = (extract3 aggregate%array_trimmed%108#1 aggregate%bytes_offset%112#1 8u) // on error: index access is out of bounds
        let array_item%104#0: Encoded(uint64) = aggregate%encoded_element%112#1
        let values%104#0: uint64 = (btoi array_item%104#0)
        let tmp%135#0: bool = (== values%104#0 1u)
        goto tmp%135#0 ? block@234 : block@250
    block@234: // and_contd_L102
        let aggregate%array_trimmed%109#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%113#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%113#1: bytes = (extract3 aggregate%array_trimmed%109#1 aggregate%bytes_offset%113#1 8u) // on error: index access is out of bounds
        let array_item%105#0: Encoded(uint64) = aggregate%encoded_element%113#1
        let values%105#0: uint64 = (btoi array_item%105#0)
        let tmp%136#0: bool = (== values%105#0 10u)
        goto tmp%136#0 ? block@235 : block@250
    block@235: // and_contd_L102
        let aggregate%array_trimmed%110#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%114#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%114#1: bytes = (extract3 aggregate%array_trimmed%110#1 aggregate%bytes_offset%114#1 8u) // on error: index access is out of bounds
        let array_item%106#0: Encoded(uint64) = aggregate%encoded_element%114#1
        let values%106#0: uint64 = (btoi array_item%106#0)
        let tmp%137#0: bool = (== values%106#0 3u)
        goto tmp%137#0 ? block@236 : block@250
    block@236: // and_contd_L102
        let aggregate%array_trimmed%111#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%115#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%115#1: bytes = (extract3 aggregate%array_trimmed%111#1 aggregate%bytes_offset%115#1 8u) // on error: index access is out of bounds
        let array_item%107#0: Encoded(uint64) = aggregate%encoded_element%115#1
        let values%107#0: uint64 = (btoi array_item%107#0)
        let tmp%138#0: bool = (== values%107#0 4u)
        goto tmp%138#0 ? block@237 : block@250
    block@237: // and_contd_L102
        let aggregate%array_trimmed%112#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%116#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%116#1: bytes = (extract3 aggregate%array_trimmed%112#1 aggregate%bytes_offset%116#1 8u) // on error: index access is out of bounds
        let array_item%108#0: Encoded(uint64) = aggregate%encoded_element%116#1
        let values%108#0: uint64 = (btoi array_item%108#0)
        let tmp%139#0: bool = (== values%108#0 1u)
        goto tmp%139#0 ? block@238 : block@250
    block@238: // and_contd_L102
        let aggregate%array_trimmed%113#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%117#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%117#1: bytes = (extract3 aggregate%array_trimmed%113#1 aggregate%bytes_offset%117#1 8u) // on error: index access is out of bounds
        let array_item%109#0: Encoded(uint64) = aggregate%encoded_element%117#1
        let values%109#0: uint64 = (btoi array_item%109#0)
        let tmp%140#0: bool = (== values%109#0 10u)
        goto tmp%140#0 ? block@239 : block@250
    block@239: // and_contd_L102
        let aggregate%array_trimmed%114#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%118#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%118#1: bytes = (extract3 aggregate%array_trimmed%114#1 aggregate%bytes_offset%118#1 8u) // on error: index access is out of bounds
        let array_item%110#0: Encoded(uint64) = aggregate%encoded_element%118#1
        let values%110#0: uint64 = (btoi array_item%110#0)
        let tmp%141#0: bool = (== values%110#0 3u)
        goto tmp%141#0 ? block@240 : block@250
    block@240: // and_contd_L102
        let aggregate%array_trimmed%115#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%119#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%119#1: bytes = (extract3 aggregate%array_trimmed%115#1 aggregate%bytes_offset%119#1 8u) // on error: index access is out of bounds
        let array_item%111#0: Encoded(uint64) = aggregate%encoded_element%119#1
        let values%111#0: uint64 = (btoi array_item%111#0)
        let tmp%142#0: bool = (== values%111#0 4u)
        goto tmp%142#0 ? block@241 : block@250
    block@241: // and_contd_L102
        let aggregate%array_trimmed%116#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%120#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%120#1: bytes = (extract3 aggregate%array_trimmed%116#1 aggregate%bytes_offset%120#1 8u) // on error: index access is out of bounds
        let array_item%112#0: Encoded(uint64) = aggregate%encoded_element%120#1
        let values%112#0: uint64 = (btoi array_item%112#0)
        let tmp%143#0: bool = (== values%112#0 11u)
        goto tmp%143#0 ? block@242 : block@250
    block@242: // and_contd_L102
        let aggregate%array_trimmed%117#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%121#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%121#1: bytes = (extract3 aggregate%array_trimmed%117#1 aggregate%bytes_offset%121#1 8u) // on error: index access is out of bounds
        let array_item%113#0: Encoded(uint64) = aggregate%encoded_element%121#1
        let values%113#0: uint64 = (btoi array_item%113#0)
        let tmp%144#0: bool = (== values%113#0 12u)
        goto tmp%144#0 ? block@243 : block@250
    block@243: // and_contd_L102
        let aggregate%array_trimmed%118#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%122#1: uint64 = (* 10u 8u)
        let aggregate%encoded_element%122#1: bytes = (extract3 aggregate%array_trimmed%118#1 aggregate%bytes_offset%122#1 8u) // on error: index access is out of bounds
        let array_item%114#0: Encoded(uint64) = aggregate%encoded_element%122#1
        let values%114#0: uint64 = (btoi array_item%114#0)
        let tmp%145#0: bool = (== values%114#0 13u)
        goto tmp%145#0 ? block@244 : block@250
    block@244: // and_contd_L102
        let aggregate%array_trimmed%119#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%123#1: uint64 = (* 11u 8u)
        let aggregate%encoded_element%123#1: bytes = (extract3 aggregate%array_trimmed%119#1 aggregate%bytes_offset%123#1 8u) // on error: index access is out of bounds
        let array_item%115#0: Encoded(uint64) = aggregate%encoded_element%123#1
        let values%115#0: uint64 = (btoi array_item%115#0)
        let tmp%146#0: bool = (== values%115#0 1u)
        goto tmp%146#0 ? block@245 : block@250
    block@245: // and_contd_L102
        let aggregate%array_trimmed%120#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%124#1: uint64 = (* 12u 8u)
        let aggregate%encoded_element%124#1: bytes = (extract3 aggregate%array_trimmed%120#1 aggregate%bytes_offset%124#1 8u) // on error: index access is out of bounds
        let array_item%116#0: Encoded(uint64) = aggregate%encoded_element%124#1
        let values%116#0: uint64 = (btoi array_item%116#0)
        let tmp%147#0: bool = (== values%116#0 2u)
        goto tmp%147#0 ? block@246 : block@250
    block@246: // and_contd_L102
        let aggregate%array_trimmed%121#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%125#1: uint64 = (* 13u 8u)
        let aggregate%encoded_element%125#1: bytes = (extract3 aggregate%array_trimmed%121#1 aggregate%bytes_offset%125#1 8u) // on error: index access is out of bounds
        let array_item%117#0: Encoded(uint64) = aggregate%encoded_element%125#1
        let values%117#0: uint64 = (btoi array_item%117#0)
        let tmp%148#0: bool = (== values%117#0 3u)
        goto tmp%148#0 ? block@247 : block@250
    block@247: // and_contd_L102
        let aggregate%array_trimmed%122#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%126#1: uint64 = (* 14u 8u)
        let aggregate%encoded_element%126#1: bytes = (extract3 aggregate%array_trimmed%122#1 aggregate%bytes_offset%126#1 8u) // on error: index access is out of bounds
        let array_item%118#0: Encoded(uint64) = aggregate%encoded_element%126#1
        let values%118#0: uint64 = (btoi array_item%118#0)
        let tmp%149#0: bool = (== values%118#0 4u)
        goto tmp%149#0 ? block@248 : block@250
    block@248: // and_contd_L102
        let aggregate%array_trimmed%123#1: bytes = ((extract 2 0) arr7#0)
        let aggregate%bytes_offset%127#1: uint64 = (* 15u 8u)
        let aggregate%encoded_element%127#1: bytes = (extract3 aggregate%array_trimmed%123#1 aggregate%bytes_offset%127#1 8u) // on error: index access is out of bounds
        let array_item%119#0: Encoded(uint64) = aggregate%encoded_element%127#1
        let values%119#0: uint64 = (btoi array_item%119#0)
        let tmp%150#0: bool = (== values%119#0 5u)
        goto tmp%150#0 ? block@249 : block@250
    block@249: // bool_true_L102
        let and_result%13#0: bool = 1u
        goto block@251
    block@250: // bool_false_L102
        let and_result%13#1: bool = 0u
        goto block@251
    block@251: // bool_merge_L102
        let and_result%13#2: bool = Ï†(and_result%13#0 <- block@249, and_result%13#1 <- block@250)
        (assert and_result%13#2) // assert target is match for conditions
        let concat%13#0: Encoded(len+uint64[]) = (concat arr#16 fArr1#0) // on error: max array length exceeded
        let extract_to_end%16#0: bytes = ((extract 2 0) concat%13#0)
        let len%9#0: uint64 = (len extract_to_end%16#0)
        let div_floor%9#0: uint64 = (/ len%9#0 8u)
        let as_bytes%16#0: bytes[8] = (itob div_floor%9#0)
        let as_u16_bytes%16#0: bytes = ((extract 6 2) as_bytes%16#0)
        let arr8#0: Encoded(len+uint64[]) = ((replace2 0) concat%13#0 as_u16_bytes%16#0)
        let array_length%30#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%151#0: bool = (== array_length%30#0 15u)
        (assert tmp%151#0)
        goto tmp%151#0 ? block@252 : block@268
    block@252: // and_contd_L106
        let aggregate%array_trimmed%124#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%128#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%128#1: bytes = (extract3 aggregate%array_trimmed%124#1 aggregate%bytes_offset%128#1 8u) // on error: index access is out of bounds
        let array_item%120#0: Encoded(uint64) = aggregate%encoded_element%128#1
        let values%120#0: uint64 = (btoi array_item%120#0)
        let tmp%153#0: bool = (== values%120#0 1u)
        goto tmp%153#0 ? block@253 : block@268
    block@253: // and_contd_L106
        let aggregate%array_trimmed%125#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%129#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%129#1: bytes = (extract3 aggregate%array_trimmed%125#1 aggregate%bytes_offset%129#1 8u) // on error: index access is out of bounds
        let array_item%121#0: Encoded(uint64) = aggregate%encoded_element%129#1
        let values%121#0: uint64 = (btoi array_item%121#0)
        let tmp%154#0: bool = (== values%121#0 10u)
        goto tmp%154#0 ? block@254 : block@268
    block@254: // and_contd_L106
        let aggregate%array_trimmed%126#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%130#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%130#1: bytes = (extract3 aggregate%array_trimmed%126#1 aggregate%bytes_offset%130#1 8u) // on error: index access is out of bounds
        let array_item%122#0: Encoded(uint64) = aggregate%encoded_element%130#1
        let values%122#0: uint64 = (btoi array_item%122#0)
        let tmp%155#0: bool = (== values%122#0 3u)
        goto tmp%155#0 ? block@255 : block@268
    block@255: // and_contd_L106
        let aggregate%array_trimmed%127#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%131#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%131#1: bytes = (extract3 aggregate%array_trimmed%127#1 aggregate%bytes_offset%131#1 8u) // on error: index access is out of bounds
        let array_item%123#0: Encoded(uint64) = aggregate%encoded_element%131#1
        let values%123#0: uint64 = (btoi array_item%123#0)
        let tmp%156#0: bool = (== values%123#0 4u)
        goto tmp%156#0 ? block@256 : block@268
    block@256: // and_contd_L106
        let aggregate%array_trimmed%128#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%132#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%132#1: bytes = (extract3 aggregate%array_trimmed%128#1 aggregate%bytes_offset%132#1 8u) // on error: index access is out of bounds
        let array_item%124#0: Encoded(uint64) = aggregate%encoded_element%132#1
        let values%124#0: uint64 = (btoi array_item%124#0)
        let tmp%157#0: bool = (== values%124#0 1u)
        goto tmp%157#0 ? block@257 : block@268
    block@257: // and_contd_L106
        let aggregate%array_trimmed%129#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%133#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%133#1: bytes = (extract3 aggregate%array_trimmed%129#1 aggregate%bytes_offset%133#1 8u) // on error: index access is out of bounds
        let array_item%125#0: Encoded(uint64) = aggregate%encoded_element%133#1
        let values%125#0: uint64 = (btoi array_item%125#0)
        let tmp%158#0: bool = (== values%125#0 10u)
        goto tmp%158#0 ? block@258 : block@268
    block@258: // and_contd_L106
        let aggregate%array_trimmed%130#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%134#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%134#1: bytes = (extract3 aggregate%array_trimmed%130#1 aggregate%bytes_offset%134#1 8u) // on error: index access is out of bounds
        let array_item%126#0: Encoded(uint64) = aggregate%encoded_element%134#1
        let values%126#0: uint64 = (btoi array_item%126#0)
        let tmp%159#0: bool = (== values%126#0 3u)
        goto tmp%159#0 ? block@259 : block@268
    block@259: // and_contd_L106
        let aggregate%array_trimmed%131#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%135#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%135#1: bytes = (extract3 aggregate%array_trimmed%131#1 aggregate%bytes_offset%135#1 8u) // on error: index access is out of bounds
        let array_item%127#0: Encoded(uint64) = aggregate%encoded_element%135#1
        let values%127#0: uint64 = (btoi array_item%127#0)
        let tmp%160#0: bool = (== values%127#0 4u)
        goto tmp%160#0 ? block@260 : block@268
    block@260: // and_contd_L106
        let aggregate%array_trimmed%132#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%136#1: uint64 = (* 8u 8u)
        let aggregate%encoded_element%136#1: bytes = (extract3 aggregate%array_trimmed%132#1 aggregate%bytes_offset%136#1 8u) // on error: index access is out of bounds
        let array_item%128#0: Encoded(uint64) = aggregate%encoded_element%136#1
        let values%128#0: uint64 = (btoi array_item%128#0)
        let tmp%161#0: bool = (== values%128#0 11u)
        goto tmp%161#0 ? block@261 : block@268
    block@261: // and_contd_L106
        let aggregate%array_trimmed%133#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%137#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%137#1: bytes = (extract3 aggregate%array_trimmed%133#1 aggregate%bytes_offset%137#1 8u) // on error: index access is out of bounds
        let array_item%129#0: Encoded(uint64) = aggregate%encoded_element%137#1
        let values%129#0: uint64 = (btoi array_item%129#0)
        let tmp%162#0: bool = (== values%129#0 12u)
        goto tmp%162#0 ? block@262 : block@268
    block@262: // and_contd_L106
        let aggregate%array_trimmed%134#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%138#1: uint64 = (* 10u 8u)
        let aggregate%encoded_element%138#1: bytes = (extract3 aggregate%array_trimmed%134#1 aggregate%bytes_offset%138#1 8u) // on error: index access is out of bounds
        let array_item%130#0: Encoded(uint64) = aggregate%encoded_element%138#1
        let values%130#0: uint64 = (btoi array_item%130#0)
        let tmp%163#0: bool = (== values%130#0 13u)
        goto tmp%163#0 ? block@263 : block@268
    block@263: // and_contd_L106
        let aggregate%array_trimmed%135#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%139#1: uint64 = (* 11u 8u)
        let aggregate%encoded_element%139#1: bytes = (extract3 aggregate%array_trimmed%135#1 aggregate%bytes_offset%139#1 8u) // on error: index access is out of bounds
        let array_item%131#0: Encoded(uint64) = aggregate%encoded_element%139#1
        let values%131#0: uint64 = (btoi array_item%131#0)
        goto values%131#0 ? block@268 : block@264
    block@264: // and_contd_L106
        let aggregate%array_trimmed%136#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%140#1: uint64 = (* 12u 8u)
        let aggregate%encoded_element%140#1: bytes = (extract3 aggregate%array_trimmed%136#1 aggregate%bytes_offset%140#1 8u) // on error: index access is out of bounds
        let array_item%132#0: Encoded(uint64) = aggregate%encoded_element%140#1
        let values%132#0: uint64 = (btoi array_item%132#0)
        goto values%132#0 ? block@268 : block@265
    block@265: // and_contd_L106
        let aggregate%array_trimmed%137#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%141#1: uint64 = (* 13u 8u)
        let aggregate%encoded_element%141#1: bytes = (extract3 aggregate%array_trimmed%137#1 aggregate%bytes_offset%141#1 8u) // on error: index access is out of bounds
        let array_item%133#0: Encoded(uint64) = aggregate%encoded_element%141#1
        let values%133#0: uint64 = (btoi array_item%133#0)
        goto values%133#0 ? block@268 : block@266
    block@266: // and_contd_L106
        let aggregate%array_trimmed%138#1: bytes = ((extract 2 0) arr8#0)
        let aggregate%bytes_offset%142#1: uint64 = (* 14u 8u)
        let aggregate%encoded_element%142#1: bytes = (extract3 aggregate%array_trimmed%138#1 aggregate%bytes_offset%142#1 8u) // on error: index access is out of bounds
        let array_item%134#0: Encoded(uint64) = aggregate%encoded_element%142#1
        let values%134#0: uint64 = (btoi array_item%134#0)
        goto values%134#0 ? block@268 : block@267
    block@267: // bool_true_L106
        let and_result%14#0: bool = 1u
        goto block@269
    block@268: // bool_false_L106
        let and_result%14#1: bool = 0u
        goto block@269
    block@269: // bool_merge_L106
        let and_result%14#2: bool = Ï†(and_result%14#0 <- block@267, and_result%14#1 <- block@268)
        (assert and_result%14#2) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@26
    block@9: // fixedArray_route_L109
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let y#1: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        let aggregate%val_as_bytes%34#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%34#1: Encoded(uint64) = aggregate%val_as_bytes%34#1
        let aggregate%head%31#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%34#1)
        let aggregate%val_as_bytes%35#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%35#1: Encoded(uint64) = aggregate%val_as_bytes%35#1
        let aggregate%head%32#1: bytes = (concat aggregate%head%31#1 aggregate%as_Encoded(uint64)%35#1)
        let aggregate%val_as_bytes%36#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%36#1: Encoded(uint64) = aggregate%val_as_bytes%36#1
        let aggregate%head%33#1: bytes = (concat aggregate%head%32#1 aggregate%as_Encoded(uint64)%36#1)
        let aggregate%val_as_bytes%37#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%37#1: Encoded(uint64) = aggregate%val_as_bytes%37#1
        let aggregate%head%34#1: bytes = (concat aggregate%head%33#1 aggregate%as_Encoded(uint64)%37#1)
        let aggregate%as_Encoded(uint64[4])%0#1: Encoded(uint64[4]) = aggregate%head%34#1
        let x#1: Encoded(uint64[4]) = aggregate%as_Encoded(uint64[4])%0#1
        let aggregate%val_as_bytes%38#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%38#1: Encoded(uint64) = aggregate%val_as_bytes%38#1
        let encoded_value%0#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%38#1
        let aggregate%bytes_offset%143#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%143#1: bytes = (extract3 x#1 aggregate%bytes_offset%143#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%3#1: uint64 = (* 0u 8u)
        let aggregate%updated_array%3#1: bytes = (replace3 x#1 aggregate%write_offset%3#1 encoded_value%0#1)
        let x#2: Encoded(uint64[4]) = aggregate%updated_array%3#1
        let aggregate%bytes_offset%144#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%144#1: bytes = (extract3 x#2 aggregate%bytes_offset%144#1 8u) // on error: index access is out of bounds
        let array_item%0#3: Encoded(uint64) = aggregate%encoded_element%144#1
        let values%0#1: uint64 = (btoi array_item%0#3)
        let aggregate%bytes_offset%145#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%145#1: bytes = (extract3 y#1 aggregate%bytes_offset%145#1 8u) // on error: index access is out of bounds
        let array_item%1#2: Encoded(uint64) = aggregate%encoded_element%145#1
        let values%1#1: uint64 = (btoi array_item%1#2)
        let tmp%0#7: bool = (== values%0#1 values%1#1)
        (assert tmp%0#7)
        let tmp%2#3: bool = (< values%0#1 1u)
        goto tmp%2#3 ? block@60 : block@64
    block@60: // and_contd_L114
        let aggregate%bytes_offset%146#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%146#1: bytes = (extract3 x#2 aggregate%bytes_offset%146#1 8u) // on error: index access is out of bounds
        let array_item%3#1: Encoded(uint64) = aggregate%encoded_element%146#1
        let values%3#1: uint64 = (btoi array_item%3#1)
        let tmp%3#3: bool = (== values%3#1 2u)
        goto tmp%3#3 ? block@61 : block@64
    block@61: // and_contd_L114
        let aggregate%bytes_offset%147#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%147#1: bytes = (extract3 x#2 aggregate%bytes_offset%147#1 8u) // on error: index access is out of bounds
        let array_item%4#1: Encoded(uint64) = aggregate%encoded_element%147#1
        let values%4#0: uint64 = (btoi array_item%4#1)
        let tmp%4#2: bool = (== values%4#0 3u)
        goto tmp%4#2 ? block@62 : block@64
    block@62: // and_contd_L114
        let aggregate%bytes_offset%148#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%148#1: bytes = (extract3 x#2 aggregate%bytes_offset%148#1 8u) // on error: index access is out of bounds
        let array_item%5#1: Encoded(uint64) = aggregate%encoded_element%148#1
        let values%5#0: uint64 = (btoi array_item%5#1)
        let tmp%5#2: bool = (== values%5#0 4u)
        goto tmp%5#2 ? block@63 : block@64
    block@63: // bool_true_L114
        let and_result%0#6: bool = 1u
        goto block@65
    block@64: // bool_false_L114
        let and_result%0#7: bool = 0u
        goto block@65
    block@65: // bool_merge_L114
        let and_result%0#8: bool = Ï†(and_result%0#6 <- block@63, and_result%0#7 <- block@64)
        (assert and_result%0#8) // assert target is match for conditions
        let aggregate%bytes_offset%149#1: uint64 = (* 49u 8u)
        let aggregate%encoded_element%149#1: bytes = (extract3 y#1 aggregate%bytes_offset%149#1 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%149#1
        let values%6#0: uint64 = (btoi array_item%6#0)
        let aggregate%val_as_bytes%39#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%39#1: Encoded(uint64) = aggregate%val_as_bytes%39#1
        let aggregate%head%35#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%39#1)
        let aggregate%val_as_bytes%40#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%40#1: Encoded(uint64) = aggregate%val_as_bytes%40#1
        let aggregate%head%36#1: bytes = (concat aggregate%head%35#1 aggregate%as_Encoded(uint64)%40#1)
        let aggregate%as_Encoded(uint64,uint64)%1#1: Encoded(uint64,uint64) = aggregate%head%36#1
        let tmp%7#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#1
        let aggregate%val_as_bytes%41#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%41#1: Encoded(uint64) = aggregate%val_as_bytes%41#1
        let aggregate%head%37#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%41#1)
        let aggregate%val_as_bytes%42#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%42#1: Encoded(uint64) = aggregate%val_as_bytes%42#1
        let aggregate%head%38#1: bytes = (concat aggregate%head%37#1 aggregate%as_Encoded(uint64)%42#1)
        let aggregate%as_Encoded(uint64,uint64)%2#1: Encoded(uint64,uint64) = aggregate%head%38#1
        let tmp%8#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#1
        let aggregate%head%39#1: bytes = (concat 0x tmp%7#1)
        let aggregate%head%40#1: bytes = (concat aggregate%head%39#1 tmp%8#1)
        let aggregate%as_Encoded((uint64,uint64)[2])%0#1: Encoded((uint64,uint64)[2]) = aggregate%head%40#1
        let myVectors#2: Encoded((uint64,uint64)[2]) = aggregate%as_Encoded((uint64,uint64)[2])%0#1
        let aggregate%bytes_offset%150#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%150#1: bytes = (extract3 myVectors#2 aggregate%bytes_offset%150#1 16u) // on error: index access is out of bounds
        let aggregate%extract%0#1: bytes = (extract3 aggregate%encoded_element%150#1 0u 8u)
        let tuple_item%0#1: Encoded(uint64) = aggregate%extract%0#1
        let values%7#0: uint64 = (btoi tuple_item%0#1)
        let tmp%10#1: bool = (== values%7#0 1u)
        goto tmp%10#1 ? block@66 : block@70
    block@66: // and_contd_L118
        let aggregate%bytes_offset%151#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%151#1: bytes = (extract3 myVectors#2 aggregate%bytes_offset%151#1 16u) // on error: index access is out of bounds
        let aggregate%extract%1#1: bytes = (extract3 aggregate%encoded_element%151#1 8u 8u)
        let tuple_item%1#1: Encoded(uint64) = aggregate%extract%1#1
        let values%8#0: uint64 = (btoi tuple_item%1#1)
        let tmp%11#1: bool = (== values%8#0 2u)
        goto tmp%11#1 ? block@67 : block@70
    block@67: // and_contd_L118
        let aggregate%bytes_offset%152#1: uint64 = (* 1u 16u)
        let aggregate%encoded_element%152#1: bytes = (extract3 myVectors#2 aggregate%bytes_offset%152#1 16u) // on error: index access is out of bounds
        let aggregate%extract%2#1: bytes = (extract3 aggregate%encoded_element%152#1 0u 8u)
        let tuple_item%2#1: Encoded(uint64) = aggregate%extract%2#1
        let values%9#0: uint64 = (btoi tuple_item%2#1)
        let tmp%12#1: bool = (== values%9#0 3u)
        goto tmp%12#1 ? block@68 : block@70
    block@68: // and_contd_L118
        let aggregate%bytes_offset%153#1: uint64 = (* 1u 16u)
        let aggregate%encoded_element%153#1: bytes = (extract3 myVectors#2 aggregate%bytes_offset%153#1 16u) // on error: index access is out of bounds
        let aggregate%extract%3#1: bytes = (extract3 aggregate%encoded_element%153#1 8u 8u)
        let tuple_item%3#1: Encoded(uint64) = aggregate%extract%3#1
        let values%10#0: uint64 = (btoi tuple_item%3#1)
        let tmp%13#1: bool = (== values%10#0 4u)
        goto tmp%13#1 ? block@69 : block@70
    block@69: // bool_true_L118
        let and_result%1#0: bool = 1u
        goto block@71
    block@70: // bool_false_L118
        let and_result%1#1: bool = 0u
        goto block@71
    block@71: // bool_merge_L118
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@69, and_result%1#1 <- block@70)
        (assert and_result%1#2) // assert target is match for conditions
        let aggregate%val_as_bytes%43#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%43#1: Encoded(uint64) = aggregate%val_as_bytes%43#1
        let aggregate%head%41#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%43#1)
        let aggregate%val_as_bytes%44#1: bytes[8] = (itob 6u)
        let aggregate%as_Encoded(uint64)%44#1: Encoded(uint64) = aggregate%val_as_bytes%44#1
        let aggregate%head%42#1: bytes = (concat aggregate%head%41#1 aggregate%as_Encoded(uint64)%44#1)
        let aggregate%as_Encoded(uint64,uint64)%3#1: Encoded(uint64,uint64) = aggregate%head%42#1
        let tmp%14#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%3#1
        let aggregate%head%43#1: bytes = (concat 0x tmp%14#1)
        let aggregate%as_Encoded((uint64,uint64)[1])%0#1: Encoded((uint64,uint64)[1]) = aggregate%head%43#1
        let encoded_array%2#0: Encoded((uint64,uint64)[1]) = aggregate%as_Encoded((uint64,uint64)[1])%0#1
        let aggregate%head%44#1: bytes = (concat 0x encoded_array%2#0)
        let aggregate%as_Encoded((uint64,uint64)[1])%1#1: Encoded((uint64,uint64)[1]) = aggregate%head%44#1
        let myObject#0: Encoded((uint64,uint64)[1]) = aggregate%as_Encoded((uint64,uint64)[1])%1#1
        let aggregate%extract%4#1: bytes = (extract3 myObject#0 0u 16u)
        let aggregate%bytes_offset%154#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%154#1: bytes = (extract3 aggregate%extract%4#1 aggregate%bytes_offset%154#1 16u) // on error: index access is out of bounds
        let aggregate%extract%5#1: bytes = (extract3 aggregate%encoded_element%154#1 0u 8u)
        let tuple_item%6#0: Encoded(uint64) = aggregate%extract%5#1
        let values%11#0: uint64 = (btoi tuple_item%6#0)
        let tmp%17#1: bool = (== values%11#0 5u)
        goto tmp%17#1 ? block@72 : block@74
    block@72: // and_contd_L124
        let aggregate%extract%6#1: bytes = (extract3 myObject#0 0u 16u)
        let aggregate%bytes_offset%155#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%155#1: bytes = (extract3 aggregate%extract%6#1 aggregate%bytes_offset%155#1 16u) // on error: index access is out of bounds
        let aggregate%extract%7#1: bytes = (extract3 aggregate%encoded_element%155#1 8u 8u)
        let tuple_item%8#0: Encoded(uint64) = aggregate%extract%7#1
        let values%12#0: uint64 = (btoi tuple_item%8#0)
        let tmp%18#1: bool = (== values%12#0 6u)
        goto tmp%18#1 ? block@73 : block@74
    block@73: // bool_true_L124
        let and_result%2#0: bool = 1u
        goto block@75
    block@74: // bool_false_L124
        let and_result%2#1: bool = 0u
        goto block@75
    block@75: // bool_merge_L124
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@73, and_result%2#1 <- block@74)
        (assert and_result%2#2) // assert target is match for conditions
        let z1#0: Encoded(uint64[4]) = (bzero 32u)
        let aggregate%bytes_offset%156#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%156#1: bytes = (extract3 z1#0 aggregate%bytes_offset%156#1 8u) // on error: index access is out of bounds
        let array_item%13#0: Encoded(uint64) = aggregate%encoded_element%156#1
        let values%13#0: uint64 = (btoi array_item%13#0)
        goto values%13#0 ? block@80 : block@76
    block@76: // and_contd_L128
        let aggregate%bytes_offset%157#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%157#1: bytes = (extract3 z1#0 aggregate%bytes_offset%157#1 8u) // on error: index access is out of bounds
        let array_item%14#0: Encoded(uint64) = aggregate%encoded_element%157#1
        let values%14#0: uint64 = (btoi array_item%14#0)
        goto values%14#0 ? block@80 : block@77
    block@77: // and_contd_L128
        let aggregate%bytes_offset%158#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%158#1: bytes = (extract3 z1#0 aggregate%bytes_offset%158#1 8u) // on error: index access is out of bounds
        let array_item%15#0: Encoded(uint64) = aggregate%encoded_element%158#1
        let values%15#0: uint64 = (btoi array_item%15#0)
        goto values%15#0 ? block@80 : block@78
    block@78: // and_contd_L128
        let aggregate%bytes_offset%159#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%159#1: bytes = (extract3 z1#0 aggregate%bytes_offset%159#1 8u) // on error: index access is out of bounds
        let array_item%16#0: Encoded(uint64) = aggregate%encoded_element%159#1
        let values%16#0: uint64 = (btoi array_item%16#0)
        goto values%16#0 ? block@80 : block@79
    block@79: // bool_true_L128
        let and_result%3#0: bool = 1u
        goto block@81
    block@80: // bool_false_L128
        let and_result%3#1: bool = 0u
        goto block@81
    block@81: // bool_merge_L128
        let and_result%3#2: bool = Ï†(and_result%3#0 <- block@79, and_result%3#1 <- block@80)
        (assert and_result%3#2) // assert target is match for conditions
        let aggregate%val_as_bytes%45#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%45#1: Encoded(uint64) = aggregate%val_as_bytes%45#1
        let encoded_value%1#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%45#1
        let aggregate%bytes_offset%160#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%160#1: bytes = (extract3 z1#0 aggregate%bytes_offset%160#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%4#1: uint64 = (* 0u 8u)
        let aggregate%updated_array%4#1: bytes = (replace3 z1#0 aggregate%write_offset%4#1 encoded_value%1#1)
        let z1#3: Encoded(uint64[4]) = aggregate%updated_array%4#1
        let aggregate%val_as_bytes%46#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%46#1: Encoded(uint64) = aggregate%val_as_bytes%46#1
        let encoded_value%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%46#1
        let aggregate%bytes_offset%161#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%161#1: bytes = (extract3 z1#3 aggregate%bytes_offset%161#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%5#1: uint64 = (* 1u 8u)
        let aggregate%updated_array%5#1: bytes = (replace3 z1#3 aggregate%write_offset%5#1 encoded_value%2#0)
        let z1#4: Encoded(uint64[4]) = aggregate%updated_array%5#1
        let aggregate%val_as_bytes%47#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%47#1: Encoded(uint64) = aggregate%val_as_bytes%47#1
        let encoded_value%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%47#1
        let aggregate%bytes_offset%162#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%162#1: bytes = (extract3 z1#4 aggregate%bytes_offset%162#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%6#1: uint64 = (* 2u 8u)
        let aggregate%updated_array%6#1: bytes = (replace3 z1#4 aggregate%write_offset%6#1 encoded_value%3#0)
        let z1#5: Encoded(uint64[4]) = aggregate%updated_array%6#1
        let aggregate%val_as_bytes%48#1: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%48#1: Encoded(uint64) = aggregate%val_as_bytes%48#1
        let encoded_value%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%48#1
        let aggregate%bytes_offset%163#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%163#1: bytes = (extract3 z1#5 aggregate%bytes_offset%163#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%7#1: uint64 = (* 3u 8u)
        let aggregate%updated_array%7#1: bytes = (replace3 z1#5 aggregate%write_offset%7#1 encoded_value%4#0)
        let z1#6: Encoded(uint64[4]) = aggregate%updated_array%7#1
        let aggregate%bytes_offset%164#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%164#1: bytes = (extract3 z1#6 aggregate%bytes_offset%164#1 8u) // on error: index access is out of bounds
        let array_item%17#0: Encoded(uint64) = aggregate%encoded_element%164#1
        let values%17#0: uint64 = (btoi array_item%17#0)
        let tmp%27#1: bool = (<= values%17#0 1u)
        goto tmp%27#1 ? block@82 : block@86
    block@82: // and_contd_L133
        let aggregate%bytes_offset%165#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%165#1: bytes = (extract3 z1#6 aggregate%bytes_offset%165#1 8u) // on error: index access is out of bounds
        let array_item%18#0: Encoded(uint64) = aggregate%encoded_element%165#1
        let values%18#0: uint64 = (btoi array_item%18#0)
        let tmp%28#1: bool = (== values%18#0 2u)
        goto tmp%28#1 ? block@83 : block@86
    block@83: // and_contd_L133
        let aggregate%bytes_offset%166#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%166#1: bytes = (extract3 z1#6 aggregate%bytes_offset%166#1 8u) // on error: index access is out of bounds
        let array_item%19#0: Encoded(uint64) = aggregate%encoded_element%166#1
        let values%19#0: uint64 = (btoi array_item%19#0)
        let tmp%29#1: bool = (== values%19#0 3u)
        goto tmp%29#1 ? block@84 : block@86
    block@84: // and_contd_L133
        let aggregate%bytes_offset%167#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%167#1: bytes = (extract3 z1#6 aggregate%bytes_offset%167#1 8u) // on error: index access is out of bounds
        let array_item%20#0: Encoded(uint64) = aggregate%encoded_element%167#1
        let values%20#0: uint64 = (btoi array_item%20#0)
        let tmp%30#1: bool = (== values%20#0 4u)
        goto tmp%30#1 ? block@85 : block@86
    block@85: // bool_true_L133
        let and_result%4#0: bool = 1u
        goto block@87
    block@86: // bool_false_L133
        let and_result%4#1: bool = 0u
        goto block@87
    block@87: // bool_merge_L133
        let and_result%4#2: bool = Ï†(and_result%4#0 <- block@85, and_result%4#1 <- block@86)
        (assert and_result%4#2) // assert target is match for conditions
        let z2#0: Encoded(bool1[3]) = (bzero 1u)
        let aggregate%lt%0#1: bool = (< 0u 3u)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%get_bit%0#1: uint64 = (getbit z2#0 0u)
        let array_item%21#0: bool = aggregate%get_bit%0#1
        let tmp%32#1: bool = (! array_item%21#0)
        (assert tmp%32#1)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@26
    block@10: // arc4Interop_route_L151
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let aggregate%as_bytes%9#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%head%45#1: bytes = (concat aggregate%len_u16%9#1 0x0000007b)
        let aggregate%head%46#1: bytes = (concat aggregate%head%45#1 0x0000007b)
        let aggregate%as_Encoded(len+uint32[])%0#1: Encoded(len+uint32[]) = aggregate%head%46#1
        let da1#0: Encoded(len+uint32[]) = aggregate%as_Encoded(len+uint32[])%0#1
        let aggregate%head%47#1: bytes = (concat 0x 0x0000007b)
        let aggregate%head%48#1: bytes = (concat aggregate%head%47#1 0x0000007b)
        let aggregate%as_Encoded(uint32[2])%0#1: Encoded(uint32[2]) = aggregate%head%48#1
        let sa1#0: Encoded(uint32[2]) = aggregate%as_Encoded(uint32[2])%0#1
        let extract_to_end%0#0: bytes = ((extract 2 0) da1#0)
        let concat%0#0: Encoded(len+uint32[]) = (concat da1#0 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 4u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let concat%1#0: Encoded(len+uint32[]) = (concat replace%0#0 sa1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let a1#1: Encoded(len+uint32[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%1#0: uint64 = (extract_uint16 a1#1 0u)
        let tmp%0#6: bool = (== array_length%1#0 6u)
        goto tmp%0#6 ? block@49 : block@56
    block@49: // and_contd_L161
        let aggregate%array_trimmed%139#1: bytes = ((extract 2 0) a1#1)
        let aggregate%bytes_offset%168#1: uint64 = (* 0u 4u)
        let aggregate%encoded_element%168#1: bytes = (extract3 aggregate%array_trimmed%139#1 aggregate%bytes_offset%168#1 4u) // on error: index access is out of bounds
        let array_item%0#2: Encoded(uint32) = aggregate%encoded_element%168#1
        let tmp%1#5: bool = (== array_item%0#2 0x0000007b)
        goto tmp%1#5 ? block@50 : block@56
    block@50: // and_contd_L161
        let aggregate%array_trimmed%140#1: bytes = ((extract 2 0) a1#1)
        let aggregate%bytes_offset%169#1: uint64 = (* 1u 4u)
        let aggregate%encoded_element%169#1: bytes = (extract3 aggregate%array_trimmed%140#1 aggregate%bytes_offset%169#1 4u) // on error: index access is out of bounds
        let array_item%1#1: Encoded(uint32) = aggregate%encoded_element%169#1
        let tmp%2#2: bool = (== array_item%1#1 0x0000007b)
        goto tmp%2#2 ? block@51 : block@56
    block@51: // and_contd_L161
        let aggregate%array_trimmed%141#1: bytes = ((extract 2 0) a1#1)
        let aggregate%bytes_offset%170#1: uint64 = (* 2u 4u)
        let aggregate%encoded_element%170#1: bytes = (extract3 aggregate%array_trimmed%141#1 aggregate%bytes_offset%170#1 4u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint32) = aggregate%encoded_element%170#1
        let tmp%3#2: bool = (== array_item%2#0 0x0000007b)
        goto tmp%3#2 ? block@52 : block@56
    block@52: // and_contd_L161
        let aggregate%array_trimmed%142#1: bytes = ((extract 2 0) a1#1)
        let aggregate%bytes_offset%171#1: uint64 = (* 3u 4u)
        let aggregate%encoded_element%171#1: bytes = (extract3 aggregate%array_trimmed%142#1 aggregate%bytes_offset%171#1 4u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint32) = aggregate%encoded_element%171#1
        let tmp%4#1: bool = (== array_item%3#0 0x0000007b)
        goto tmp%4#1 ? block@53 : block@56
    block@53: // and_contd_L161
        let aggregate%array_trimmed%143#1: bytes = ((extract 2 0) a1#1)
        let aggregate%bytes_offset%172#1: uint64 = (* 4u 4u)
        let aggregate%encoded_element%172#1: bytes = (extract3 aggregate%array_trimmed%143#1 aggregate%bytes_offset%172#1 4u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint32) = aggregate%encoded_element%172#1
        let tmp%5#1: bool = (== array_item%4#0 0x0000007b)
        goto tmp%5#1 ? block@54 : block@56
    block@54: // and_contd_L161
        let aggregate%array_trimmed%144#1: bytes = ((extract 2 0) a1#1)
        let aggregate%bytes_offset%173#1: uint64 = (* 5u 4u)
        let aggregate%encoded_element%173#1: bytes = (extract3 aggregate%array_trimmed%144#1 aggregate%bytes_offset%173#1 4u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint32) = aggregate%encoded_element%173#1
        let tmp%6#1: bool = (== array_item%5#0 0x0000007b)
        goto tmp%6#1 ? block@55 : block@56
    block@55: // bool_true_L161
        let and_result%0#3: bool = 1u
        goto block@57
    block@56: // bool_false_L161
        let and_result%0#4: bool = 0u
        goto block@57
    block@57: // bool_merge_L161
        let and_result%0#5: bool = Ï†(and_result%0#3 <- block@55, and_result%0#4 <- block@56)
        (assert and_result%0#5) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@26
    block@11: // structs_route_L164
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let p#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%8#1: bytes = (extract3 p#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%8#1
        let x#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%9#1: bytes = (extract3 p#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%9#1
        let y#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%as_bytes%10#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%10#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#1: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%10#1
        let myVectors#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#1
        let aggregate%val_as_bytes%49#1: bytes[8] = (itob x#0)
        let aggregate%as_Encoded(uint64)%49#1: Encoded(uint64) = aggregate%val_as_bytes%49#1
        let aggregate%head%49#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%49#1)
        let aggregate%val_as_bytes%50#1: bytes[8] = (itob y#0)
        let aggregate%as_Encoded(uint64)%50#1: Encoded(uint64) = aggregate%val_as_bytes%50#1
        let aggregate%head%50#1: bytes = (concat aggregate%head%49#1 aggregate%as_Encoded(uint64)%50#1)
        let aggregate%as_Encoded(uint64,uint64)%4#1: Encoded(uint64,uint64) = aggregate%head%50#1
        let tmp%0#5: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%4#1
        let aggregate%as_bytes%11#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%11#1: bytes = ((extract 6 2) aggregate%as_bytes%11#1)
        let aggregate%head%51#1: bytes = (concat aggregate%len_u16%11#1 tmp%0#5)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%1#1: Encoded(len+(uint64,uint64)[]) = aggregate%head%51#1
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%1#1
        let array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#4: bool = (== array_length%0#0 1u)
        goto tmp%1#4 ? block@42 : block@45
    block@42: // and_contd_L169
        let aggregate%array_trimmed%145#1: bytes = ((extract 2 0) myVectors#1)
        let aggregate%bytes_offset%174#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%174#1: bytes = (extract3 aggregate%array_trimmed%145#1 aggregate%bytes_offset%174#1 16u) // on error: index access is out of bounds
        let aggregate%extract%10#1: bytes = (extract3 aggregate%encoded_element%174#1 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%10#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%2#1: bool = (== values%2#0 x#0)
        goto tmp%2#1 ? block@43 : block@45
    block@43: // and_contd_L169
        let aggregate%array_trimmed%146#1: bytes = ((extract 2 0) myVectors#1)
        let aggregate%bytes_offset%175#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%175#1: bytes = (extract3 aggregate%array_trimmed%146#1 aggregate%bytes_offset%175#1 16u) // on error: index access is out of bounds
        let aggregate%extract%11#1: bytes = (extract3 aggregate%encoded_element%175#1 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%11#1
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let tmp%3#1: bool = (== values%3#0 y#0)
        goto tmp%3#1 ? block@44 : block@45
    block@44: // bool_true_L169
        let and_result%0#0: bool = 1u
        goto block@46
    block@45: // bool_false_L169
        let and_result%0#1: bool = 0u
        goto block@46
    block@46: // bool_merge_L169
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@44, and_result%0#1 <- block@45)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%46#0: bytes = (concat 0x151f7c75 myVectors#1)
        (log tmp%46#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@26
    block@12: // booleans_route_L173
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        let aggregate%as_bytes%12#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%12#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%set_bit%0#1: bytes[1] = (setbit aggregate%encoded_bool%0#1 1u 0u)
        let aggregate%set_bit%1#1: bytes[1] = (setbit aggregate%set_bit%0#1 2u 1u)
        let aggregate%head%52#1: bytes = (concat aggregate%len_u16%12#1 aggregate%set_bit%1#1)
        let aggregate%as_Encoded(len+bool1[])%0#1: Encoded(len+bool1[]) = aggregate%head%52#1
        let encoded_array%0#1: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#1
        let tmp%52#0: bytes = (concat 0x151f7c75 encoded_array%0#1)
        (log tmp%52#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9: bool = 1u
        goto block@26
    block@13: // booleansStatic_route_L177
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        (assert tmp%55#0) // can only call when not creating
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%set_bit%2#1: bytes[1] = (setbit aggregate%encoded_bool%1#1 1u 0u)
        let aggregate%set_bit%3#1: bytes[1] = (setbit aggregate%set_bit%2#1 2u 1u)
        let aggregate%head%53#1: bytes = (concat 0x aggregate%set_bit%3#1)
        let aggregate%as_Encoded(bool1,bool1,bool1)%0#1: Encoded(bool1,bool1,bool1) = aggregate%head%53#1
        let tmp%60#0: Encoded(bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1)%0#1
        let tmp%61#0: bytes = (concat 0x151f7c75 tmp%60#0)
        (log tmp%61#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10: bool = 1u
        goto block@26
    block@14: // arc4Booleans_route_L181
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        (assert tmp%64#0) // can only call when not creating
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%2#1
        let tmp%0#4: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#1: Encoded(bool8) = aggregate%encoded_bool%3#1
        let tmp%1#3: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#1
        let aggregate%as_bytes%13#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%13#1: bytes = ((extract 6 2) aggregate%as_bytes%13#1)
        let aggregate%get_bit%1#1: uint64 = (getbit tmp%1#3 0u)
        let aggregate%set_bit%4#1: Encoded(bool8) = (setbit tmp%0#4 1u aggregate%get_bit%1#1)
        let aggregate%get_bit%2#1: uint64 = (getbit tmp%0#4 0u)
        let aggregate%set_bit%5#1: Encoded(bool8) = (setbit aggregate%set_bit%4#1 2u aggregate%get_bit%2#1)
        let aggregate%head%54#1: bytes = (concat aggregate%len_u16%13#1 aggregate%set_bit%5#1)
        let aggregate%as_Encoded(len+bool1[])%1#1: Encoded(len+bool1[]) = aggregate%head%54#1
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%1#1
        let tmp%67#0: bytes = (concat 0x151f7c75 encoded_array%0#0)
        (log tmp%67#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11: bool = 1u
        goto block@26
    block@15: // arc4BooleansStatic_route_L185
        let tmp%68#0: uint64 = (txn OnCompletion)
        let tmp%69#0: bool = (! tmp%68#0)
        (assert tmp%69#0) // OnCompletion is not NoOp
        let tmp%70#0: uint64 = (txn ApplicationID)
        (assert tmp%70#0) // can only call when not creating
        let aggregate%encoded_bool%4#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%2#1: Encoded(bool8) = aggregate%encoded_bool%4#1
        let tmp%0#3: Encoded(bool8) = aggregate%as_Encoded(bool8)%2#1
        let aggregate%encoded_bool%5#1: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%3#1: Encoded(bool8) = aggregate%encoded_bool%5#1
        let tmp%1#2: Encoded(bool8) = aggregate%as_Encoded(bool8)%3#1
        let aggregate%get_bit%3#1: uint64 = (getbit tmp%1#2 0u)
        let aggregate%set_bit%6#1: Encoded(bool8) = (setbit tmp%0#3 1u aggregate%get_bit%3#1)
        let aggregate%get_bit%4#1: uint64 = (getbit tmp%0#3 0u)
        let aggregate%set_bit%7#1: Encoded(bool8) = (setbit aggregate%set_bit%6#1 2u aggregate%get_bit%4#1)
        let aggregate%head%55#1: bytes = (concat 0x aggregate%set_bit%7#1)
        let aggregate%as_Encoded(bool1,bool1,bool1)%1#1: Encoded(bool1,bool1,bool1) = aggregate%head%55#1
        let tmp%75#0: Encoded(bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1)%1#1
        let tmp%76#0: bytes = (concat 0x151f7c75 tmp%75#0)
        (log tmp%76#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12: bool = 1u
        goto block@26
    block@16: // aliasing_route_L189
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        (assert tmp%79#0) // can only call when not creating
        let mutable#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%val_as_bytes%51#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%51#1: Encoded(uint64) = aggregate%val_as_bytes%51#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%51#1
        let aggregate%array_trimmed%147#1: bytes = ((extract 2 0) mutable#0)
        let aggregate%bytes_offset%176#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%176#1: bytes = (extract3 aggregate%array_trimmed%147#1 aggregate%bytes_offset%176#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%176#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%0#2: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%52#1: bytes[8] = (itob tmp%0#2)
        let aggregate%as_Encoded(uint64)%52#1: Encoded(uint64) = aggregate%val_as_bytes%52#1
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%52#1
        let aggregate%array_trimmed%148#1: bytes = ((extract 2 0) mutable#0)
        let aggregate%bytes_offset%177#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%177#1: bytes = (extract3 aggregate%array_trimmed%148#1 aggregate%bytes_offset%177#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%8#1: uint64 = (* 1u 8u)
        let aggregate%write_offset_with_length_header%3#1: uint64 = (+ aggregate%write_offset%8#1 2u)
        let aggregate%updated_array%8#1: bytes = (replace3 mutable#0 aggregate%write_offset_with_length_header%3#1 encoded_value%1#0)
        let mutable#1: Encoded(len+uint64[]) = aggregate%updated_array%8#1
        let aggregate%array_trimmed%149#1: bytes = ((extract 2 0) mutable#1)
        let aggregate%bytes_offset%178#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%178#1: bytes = (extract3 aggregate%array_trimmed%149#1 aggregate%bytes_offset%178#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%178#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%1#1: bool = (!= values%1#0 values%0#0)
        (assert tmp%1#1) // These should not match
        let aggregate%val_as_bytes%53#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%53#1: Encoded(uint64) = aggregate%val_as_bytes%53#1
        let encoded_value%0#5: Encoded(uint64) = aggregate%as_Encoded(uint64)%53#1
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13: bool = 1u
        goto block@26
    block@17: // receiveMutable_route_L215
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let aggregate%val_as_bytes%54#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%54#1: Encoded(uint64) = aggregate%val_as_bytes%54#1
        let encoded_value%0#4: Encoded(uint64) = aggregate%as_Encoded(uint64)%54#1
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14: bool = 1u
        goto block@26
    block@18: // receiveReadonly_route_L219
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15: bool = 1u
        goto block@26
    block@21: // bare_routing_L6
        let tmp%89#0: uint64 = (txn OnCompletion)
        goto tmp%89#0 ? block@25 : block@22
    block@22: // __algots__.defaultCreate_L6
        let tmp%90#0: uint64 = (txn ApplicationID)
        let tmp%91#0: bool = (! tmp%90#0)
        (assert tmp%91#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16: bool = 1u
        goto block@26
    block@25: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#17: bool = 0u
        goto block@26
    block@26: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@287, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@269, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6 <- block@87, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7 <- block@57, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8 <- block@46, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11 <- block@14, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12 <- block@15, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13 <- block@16, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14 <- block@17, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15 <- block@18, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16 <- block@22, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#17 <- block@25)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = Ï†(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = Ï†(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = Ï†(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = Ï†(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = Ï†(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1