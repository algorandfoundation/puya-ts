main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@3, method "doThings()void" => block@4, method "arc4Interop()void" => block@5, method "structs((uint64,uint64))(uint64,uint64)[]" => block@6, * => block@13}
    block@3: // buildArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%sub_item%0#1: bytes[8] = (itob 1u)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let array%sub_item%1#1: bytes[8] = (itob 2u)
        let array%encoded%1#1: uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: uint64[] = (concat array%data%0#1 array%encoded%1#1)
        let array%sub_item%2#1: bytes[8] = (itob 3u)
        let array%encoded%2#1: uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: uint64[] = (concat array%data%1#1 array%encoded%2#1)
        let array%sub_item%3#1: bytes[8] = (itob 4u)
        let array%encoded%3#1: uint64[] = (concat 0x array%sub_item%3#1)
        let array%data%3#1: uint64[] = (concat array%data%2#1 array%encoded%3#1)
        let encoded%0#4: uint64[] = array%data%3#1
        let byte_len%0#4: uint64 = (len encoded%0#4)
        let len_%0#4: uint64 = (/ byte_len%0#4 8u)
        let as_bytes%0#4: bytes[8] = (itob len_%0#4)
        let len_16_bit%0#4: bytes = ((extract 6 2) as_bytes%0#4)
        let concat_result%0#1: bytes = (concat len_16_bit%0#4 encoded%0#4)
        let tmp%8#0: bytes = (concat 0x151f7c75 concat_result%0#1)
        (log tmp%8#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // doThings_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let array%sub_item%4#1: bytes[8] = (itob 1u)
        let array%encoded%4#1: uint64[] = (concat 0x array%sub_item%4#1)
        let array%data%4#1: uint64[] = (concat 0x array%encoded%4#1)
        let array%sub_item%5#1: bytes[8] = (itob 2u)
        let array%encoded%5#1: uint64[] = (concat 0x array%sub_item%5#1)
        let array%data%5#1: uint64[] = (concat array%data%4#1 array%encoded%5#1)
        let array%sub_item%6#1: bytes[8] = (itob 3u)
        let array%encoded%6#1: uint64[] = (concat 0x array%sub_item%6#1)
        let array%data%6#1: uint64[] = (concat array%data%5#1 array%encoded%6#1)
        let array%sub_item%7#1: bytes[8] = (itob 4u)
        let array%encoded%7#1: uint64[] = (concat 0x array%sub_item%7#1)
        let array%data%7#1: uint64[] = (concat array%data%6#1 array%encoded%7#1)
        let encoded%0#3: uint64[] = array%data%7#1
        let byte_len%0#3: uint64 = (len encoded%0#3)
        let len_%0#3: uint64 = (/ byte_len%0#3 8u)
        let as_bytes%0#3: bytes[8] = (itob len_%0#3)
        let len_16_bit%0#3: bytes = ((extract 6 2) as_bytes%0#3)
        let arr#0: uint64[] = (concat len_16_bit%0#3 encoded%0#3)
        let tmp%0#4: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#3: bool = (== tmp%0#4 4u)
        goto tmp%1#3 ? block@36 : block@41
    block@36: // and_contd_L14
        let tmp%2#3: uint64 = (extract_uint64 arr#0 2u)
        let tmp%3#3: bool = (== tmp%2#3 1u)
        goto tmp%3#3 ? block@37 : block@41
    block@37: // and_contd_L14
        let tmp%4#2: uint64 = (extract_uint64 arr#0 10u)
        let tmp%5#2: bool = (== tmp%4#2 2u)
        goto tmp%5#2 ? block@38 : block@41
    block@38: // and_contd_L14
        let tmp%6#2: uint64 = (extract_uint64 arr#0 18u)
        let tmp%7#2: bool = (== tmp%6#2 3u)
        goto tmp%7#2 ? block@39 : block@41
    block@39: // and_contd_L14
        let tmp%8#1: uint64 = (extract_uint64 arr#0 26u)
        let tmp%9#1: bool = (== tmp%8#1 4u)
        goto tmp%9#1 ? block@40 : block@41
    block@40: // bool_true_L14
        let and_result%0#6: bool = 1u
        goto block@42
    block@41: // bool_false_L14
        let and_result%0#7: bool = 0u
        goto block@42
    block@42: // bool_merge_L14
        let and_result%0#8: bool = φ(and_result%0#6 <- block@40, and_result%0#7 <- block@41)
        (assert and_result%0#8) // assert target is match for conditions
        let expr_value_trimmed%0#2: bytes = ((extract 2 0) arr#0)
        let array%sub_item%8#1: bytes[8] = (itob 5u)
        let array%encoded%8#1: uint64[] = (concat 0x array%sub_item%8#1)
        let array%data%8#1: uint64[] = (concat 0x array%encoded%8#1)
        let encoded%0#2: uint64[] = array%data%8#1
        let byte_len%0#2: uint64 = (len encoded%0#2)
        let len_%0#2: uint64 = (/ byte_len%0#2 8u)
        let as_bytes%0#2: bytes[8] = (itob len_%0#2)
        let len_16_bit%0#2: bytes = ((extract 6 2) as_bytes%0#2)
        let concat_result%0#0: bytes = (concat len_16_bit%0#2 encoded%0#2)
        let expr_value_trimmed%2#1: bytes = ((extract 2 0) concat_result%0#0)
        let concatenated%1#1: bytes = (concat expr_value_trimmed%0#2 expr_value_trimmed%2#1)
        let byte_len%1#1: uint64 = (len concatenated%1#1)
        let len_%1#1: uint64 = (/ byte_len%1#1 8u)
        let as_bytes%1#1: bytes[8] = (itob len_%1#1)
        let len_16_bit%1#1: bytes = ((extract 6 2) as_bytes%1#1)
        let arr#3: uint64[] = (concat len_16_bit%1#1 concatenated%1#1)
        let tmp%10#1: uint64 = (extract_uint16 arr#3 0u)
        let tmp%11#1: bool = (== tmp%10#1 5u)
        goto tmp%11#1 ? block@43 : block@49
    block@43: // and_contd_L19
        let tmp%12#1: uint64 = (extract_uint64 arr#3 2u)
        let tmp%13#1: bool = (== tmp%12#1 1u)
        goto tmp%13#1 ? block@44 : block@49
    block@44: // and_contd_L19
        let tmp%14#1: uint64 = (extract_uint64 arr#3 10u)
        let tmp%15#1: bool = (== tmp%14#1 2u)
        goto tmp%15#1 ? block@45 : block@49
    block@45: // and_contd_L19
        let tmp%16#1: uint64 = (extract_uint64 arr#3 18u)
        let tmp%17#1: bool = (== tmp%16#1 3u)
        goto tmp%17#1 ? block@46 : block@49
    block@46: // and_contd_L19
        let tmp%18#1: uint64 = (extract_uint64 arr#3 26u)
        let tmp%19#1: bool = (== tmp%18#1 4u)
        goto tmp%19#1 ? block@47 : block@49
    block@47: // and_contd_L19
        let tmp%20#1: uint64 = (extract_uint64 arr#3 34u)
        let tmp%21#1: bool = (== tmp%20#1 5u)
        goto tmp%21#1 ? block@48 : block@49
    block@48: // bool_true_L19
        let and_result%1#0: bool = 1u
        goto block@50
    block@49: // bool_false_L19
        let and_result%1#1: bool = 0u
        goto block@50
    block@50: // bool_merge_L19
        let and_result%1#2: bool = φ(and_result%1#0 <- block@48, and_result%1#1 <- block@49)
        (assert and_result%1#2) // assert target is match for conditions
        let tmp%23#1: uint64 = (- tmp%10#1 1u)
        let array_head_and_tail%9#0: bytes = ((extract 2 0) arr#3)
        let item_offset%9#0: uint64 = (* tmp%23#1 8u)
        let top#0: uint64 = (extract_uint64 array_head_and_tail%9#0 item_offset%9#0)
        let tmp%24#1: bool = (== top#0 5u)
        (assert tmp%24#1)
        let array%sub_item%9#1: bytes[8] = (itob 1u)
        let array%encoded%9#1: uint64[] = (concat 0x array%sub_item%9#1)
        let array%data%9#1: uint64[] = (concat 0x array%encoded%9#1)
        let array%sub_item%10#1: bytes[8] = (itob 2u)
        let array%encoded%10#1: uint64[] = (concat 0x array%sub_item%10#1)
        let array%data%10#1: uint64[] = (concat array%data%9#1 array%encoded%10#1)
        let array%sub_item%11#1: bytes[8] = (itob 3u)
        let array%encoded%11#1: uint64[] = (concat 0x array%sub_item%11#1)
        let array%data%11#1: uint64[] = (concat array%data%10#1 array%encoded%11#1)
        let array%sub_item%12#1: bytes[8] = (itob 4u)
        let array%encoded%12#1: uint64[] = (concat 0x array%sub_item%12#1)
        let array%data%12#1: uint64[] = (concat array%data%11#1 array%encoded%12#1)
        let encoded%1#0: uint64[] = array%data%12#1
        let byte_len%2#1: uint64 = (len encoded%1#0)
        let len_%2#1: uint64 = (/ byte_len%2#1 8u)
        let as_bytes%2#1: bytes[8] = (itob len_%2#1)
        let len_16_bit%2#1: bytes = ((extract 6 2) as_bytes%2#1)
        let arr#6: uint64[] = (concat len_16_bit%2#1 encoded%1#0)
        let tmp%25#1: uint64 = (extract_uint16 arr#6 0u)
        let tmp%26#0: bool = (== tmp%25#1 4u)
        goto tmp%26#0 ? block@51 : block@56
    block@51: // and_contd_L28
        let tmp%27#0: uint64 = (extract_uint64 arr#6 2u)
        let tmp%28#0: bool = (== tmp%27#0 1u)
        goto tmp%28#0 ? block@52 : block@56
    block@52: // and_contd_L28
        let tmp%29#0: uint64 = (extract_uint64 arr#6 10u)
        let tmp%30#0: bool = (== tmp%29#0 2u)
        goto tmp%30#0 ? block@53 : block@56
    block@53: // and_contd_L28
        let tmp%31#0: uint64 = (extract_uint64 arr#6 18u)
        let tmp%32#0: bool = (== tmp%31#0 3u)
        goto tmp%32#0 ? block@54 : block@56
    block@54: // and_contd_L28
        let tmp%33#0: uint64 = (extract_uint64 arr#6 26u)
        let tmp%34#0: bool = (== tmp%33#0 4u)
        goto tmp%34#0 ? block@55 : block@56
    block@55: // bool_true_L28
        let and_result%2#0: bool = 1u
        goto block@57
    block@56: // bool_false_L28
        let and_result%2#1: bool = 0u
        goto block@57
    block@57: // bool_merge_L28
        let and_result%2#2: bool = φ(and_result%2#0 <- block@55, and_result%2#1 <- block@56)
        (assert and_result%2#2) // assert target is match for conditions
        let val_as_bytes%0#0: bytes[8] = (itob 10u)
        let index_is_in_bounds%0#0: bool = (< 1u tmp%25#1)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let arr#9: uint64[] = ((replace2 10) arr#6 val_as_bytes%0#0)
        let tmp%35#0: uint64 = (extract_uint16 arr#9 0u)
        let tmp%36#0: bool = (== tmp%35#0 4u)
        goto tmp%36#0 ? block@58 : block@63
    block@58: // and_contd_L33
        let tmp%37#0: uint64 = (extract_uint64 arr#9 2u)
        let tmp%38#0: bool = (== tmp%37#0 1u)
        goto tmp%38#0 ? block@59 : block@63
    block@59: // and_contd_L33
        let tmp%39#0: uint64 = (extract_uint64 arr#9 10u)
        let tmp%40#0: bool = (== tmp%39#0 10u)
        goto tmp%40#0 ? block@60 : block@63
    block@60: // and_contd_L33
        let tmp%41#0: uint64 = (extract_uint64 arr#9 18u)
        let tmp%42#0: bool = (== tmp%41#0 3u)
        goto tmp%42#0 ? block@61 : block@63
    block@61: // and_contd_L33
        let tmp%43#0: uint64 = (extract_uint64 arr#9 26u)
        let tmp%44#0: bool = (== tmp%43#0 4u)
        goto tmp%44#0 ? block@62 : block@63
    block@62: // bool_true_L33
        let and_result%3#0: bool = 1u
        goto block@64
    block@63: // bool_false_L33
        let and_result%3#1: bool = 0u
        goto block@64
    block@64: // bool_merge_L33
        let and_result%3#2: bool = φ(and_result%3#0 <- block@62, and_result%3#1 <- block@63)
        (assert and_result%3#2) // assert target is match for conditions
        let expr_value_trimmed%4#0: bytes = ((extract 2 0) arr#9)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%4#0 expr_value_trimmed%4#0)
        let byte_len%3#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%3#0 8u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let expr_value_trimmed%6#0: bytes = ((extract 2 0) concat_result%3#0)
        let array%sub_item%13#1: bytes[8] = (itob 11u)
        let array%encoded%13#1: uint64[] = (concat 0x array%sub_item%13#1)
        let array%data%13#1: uint64[] = (concat 0x array%encoded%13#1)
        let encoded%2#0: uint64[] = array%data%13#1
        let concatenated%4#0: bytes = (concat expr_value_trimmed%6#0 encoded%2#0)
        let byte_len%4#0: uint64 = (len concatenated%4#0)
        let len_%4#0: uint64 = (/ byte_len%4#0 8u)
        let as_bytes%4#0: bytes[8] = (itob len_%4#0)
        let len_16_bit%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let concat_result%4#0: bytes = (concat len_16_bit%4#0 concatenated%4#0)
        let expr_value_trimmed%7#0: bytes = ((extract 2 0) concat_result%4#0)
        let array%sub_item%14#1: bytes[8] = (itob 12u)
        let array%encoded%14#1: uint64[] = (concat 0x array%sub_item%14#1)
        let array%data%14#1: uint64[] = (concat 0x array%encoded%14#1)
        let array%sub_item%15#1: bytes[8] = (itob 13u)
        let array%encoded%15#1: uint64[] = (concat 0x array%sub_item%15#1)
        let array%data%15#1: uint64[] = (concat array%data%14#1 array%encoded%15#1)
        let encoded%3#0: uint64[] = array%data%15#1
        let concatenated%5#0: bytes = (concat expr_value_trimmed%7#0 encoded%3#0)
        let byte_len%5#0: uint64 = (len concatenated%5#0)
        let len_%5#0: uint64 = (/ byte_len%5#0 8u)
        let as_bytes%5#0: bytes[8] = (itob len_%5#0)
        let len_16_bit%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let arr#12: uint64[] = (concat len_16_bit%5#0 concatenated%5#0)
        let tmp%45#0: uint64 = (extract_uint16 arr#12 0u)
        let tmp%46#0: bool = (== tmp%45#0 11u)
        goto tmp%46#0 ? block@65 : block@77
    block@65: // and_contd_L39
        let tmp%47#0: uint64 = (extract_uint64 arr#12 2u)
        let tmp%48#0: bool = (== tmp%47#0 1u)
        goto tmp%48#0 ? block@66 : block@77
    block@66: // and_contd_L39
        let tmp%49#0: uint64 = (extract_uint64 arr#12 10u)
        let tmp%50#0: bool = (== tmp%49#0 10u)
        goto tmp%50#0 ? block@67 : block@77
    block@67: // and_contd_L39
        let tmp%51#0: uint64 = (extract_uint64 arr#12 18u)
        let tmp%52#0: bool = (== tmp%51#0 3u)
        goto tmp%52#0 ? block@68 : block@77
    block@68: // and_contd_L39
        let tmp%53#0: uint64 = (extract_uint64 arr#12 26u)
        let tmp%54#0: bool = (== tmp%53#0 4u)
        goto tmp%54#0 ? block@69 : block@77
    block@69: // and_contd_L39
        let tmp%55#0: uint64 = (extract_uint64 arr#12 34u)
        let tmp%56#0: bool = (== tmp%55#0 1u)
        goto tmp%56#0 ? block@70 : block@77
    block@70: // and_contd_L39
        let tmp%57#0: uint64 = (extract_uint64 arr#12 42u)
        let tmp%58#0: bool = (== tmp%57#0 10u)
        goto tmp%58#0 ? block@71 : block@77
    block@71: // and_contd_L39
        let tmp%59#0: uint64 = (extract_uint64 arr#12 50u)
        let tmp%60#0: bool = (== tmp%59#0 3u)
        goto tmp%60#0 ? block@72 : block@77
    block@72: // and_contd_L39
        let tmp%61#0: uint64 = (extract_uint64 arr#12 58u)
        let tmp%62#0: bool = (== tmp%61#0 4u)
        goto tmp%62#0 ? block@73 : block@77
    block@73: // and_contd_L39
        let tmp%63#0: uint64 = (extract_uint64 arr#12 66u)
        let tmp%64#0: bool = (== tmp%63#0 11u)
        goto tmp%64#0 ? block@74 : block@77
    block@74: // and_contd_L39
        let tmp%65#0: uint64 = (extract_uint64 arr#12 74u)
        let tmp%66#0: bool = (== tmp%65#0 12u)
        goto tmp%66#0 ? block@75 : block@77
    block@75: // and_contd_L39
        let tmp%67#0: uint64 = (extract_uint64 arr#12 82u)
        let tmp%68#0: bool = (== tmp%67#0 13u)
        goto tmp%68#0 ? block@76 : block@77
    block@76: // bool_true_L39
        let and_result%4#0: bool = 1u
        goto block@78
    block@77: // bool_false_L39
        let and_result%4#1: bool = 0u
        goto block@78
    block@78: // bool_merge_L39
        let and_result%4#2: bool = φ(and_result%4#0 <- block@76, and_result%4#1 <- block@77)
        (assert and_result%4#2) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // arc4Interop_route_L42
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let array%encoded%16#1: bytes[4][] = (concat 0x 0x0000007b)
        let array%data%16#1: bytes[4][] = (concat 0x array%encoded%16#1)
        let array%encoded%17#1: bytes[4][] = (concat 0x 0x0000007b)
        let array%data%17#1: bytes[4][] = (concat array%data%16#1 array%encoded%17#1)
        let encoded%0#1: bytes[4][] = array%data%17#1
        let byte_len%0#1: uint64 = (len encoded%0#1)
        let len_%0#1: uint64 = (/ byte_len%0#1 4u)
        let as_bytes%0#1: bytes[8] = (itob len_%0#1)
        let len_16_bit%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let a1#0: bytes[4][] = (concat len_16_bit%0#1 encoded%0#1)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) a1#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 0x0000007b0000007b)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) concat_result%1#0)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 0x0000007b0000007b)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 4u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let a1#1: bytes[4][] = (concat len_16_bit%2#0 concatenated%2#0)
        let tmp%0#3: uint64 = (extract_uint16 a1#1 0u)
        let tmp%1#2: bool = (== tmp%0#3 6u)
        goto tmp%1#2 ? block@25 : block@32
    block@25: // and_contd_L51
        let arc4_item%0#1: bytes = ((extract 2 4) a1#1)
        let tmp%2#2: bool = (== arc4_item%0#1 0x0000007b)
        goto tmp%2#2 ? block@26 : block@32
    block@26: // and_contd_L51
        let arc4_item%1#0: bytes = ((extract 6 4) a1#1)
        let tmp%3#2: bool = (== arc4_item%1#0 0x0000007b)
        goto tmp%3#2 ? block@27 : block@32
    block@27: // and_contd_L51
        let arc4_item%2#0: bytes = ((extract 10 4) a1#1)
        let tmp%4#1: bool = (== arc4_item%2#0 0x0000007b)
        goto tmp%4#1 ? block@28 : block@32
    block@28: // and_contd_L51
        let arc4_item%3#0: bytes = ((extract 14 4) a1#1)
        let tmp%5#1: bool = (== arc4_item%3#0 0x0000007b)
        goto tmp%5#1 ? block@29 : block@32
    block@29: // and_contd_L51
        let arc4_item%4#0: bytes = ((extract 18 4) a1#1)
        let tmp%6#1: bool = (== arc4_item%4#0 0x0000007b)
        goto tmp%6#1 ? block@30 : block@32
    block@30: // and_contd_L51
        let arc4_item%5#0: bytes = ((extract 22 4) a1#1)
        let tmp%7#1: bool = (== arc4_item%5#0 0x0000007b)
        goto tmp%7#1 ? block@31 : block@32
    block@31: // bool_true_L51
        let and_result%0#3: bool = 1u
        goto block@33
    block@32: // bool_false_L51
        let and_result%0#4: bool = 0u
        goto block@33
    block@33: // bool_merge_L51
        let and_result%0#5: bool = φ(and_result%0#3 <- block@31, and_result%0#4 <- block@32)
        (assert and_result%0#5) // assert target is match for conditions
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // structs_route_L54
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let p.x#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let p.y#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        let array%sub_item%16#1: bytes[8] = (itob p.x#0)
        let array%encoded%18#1: (uint64,uint64)[] = (concat 0x array%sub_item%16#1)
        let array%sub_item%17#1: bytes[8] = (itob p.y#0)
        let array%encoded%19#1: (uint64,uint64)[] = (concat array%encoded%18#1 array%sub_item%17#1)
        let array%data%18#1: (uint64,uint64)[] = (concat 0x array%encoded%19#1)
        let encoded%0#0: (uint64,uint64)[] = array%data%18#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let myVectors#1: (uint64,uint64)[] = (concat len_16_bit%0#0 encoded%0#0)
        let tmp%0#2: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#1: bool = (== tmp%0#2 1u)
        goto tmp%1#1 ? block@18 : block@21
    block@18: // and_contd_L59
        let arc4_item%0#0: bytes = ((extract 2 16) myVectors#1)
        let item0%0%0#1: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let tmp%2#1: bool = (== item0%0%0#1 p.x#0)
        goto tmp%2#1 ? block@19 : block@21
    block@19: // and_contd_L59
        let item1%1%0#0: uint64 = (extract_uint64 arc4_item%0#0 8u)
        let tmp%3#1: bool = (== item1%1%0#0 p.y#0)
        goto tmp%3#1 ? block@20 : block@21
    block@20: // bool_true_L59
        let and_result%0#0: bool = 1u
        goto block@22
    block@21: // bool_false_L59
        let and_result%0#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L59
        let and_result%0#2: bool = φ(and_result%0#0 <- block@20, and_result%0#1 <- block@21)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%22#0: bytes = (concat 0x151f7c75 myVectors#1)
        (log tmp%22#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L6
        let tmp%23#0: uint64 = (txn OnCompletion)
        goto tmp%23#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L6
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@78, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@33, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@22, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0