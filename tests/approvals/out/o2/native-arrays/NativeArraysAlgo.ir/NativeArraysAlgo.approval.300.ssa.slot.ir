main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@23
    block@2: // abi_routing_L6
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "readonlyArray()void" => block@4, method "arrayInObject()void" => block@5, method "buildArray()uint64[]" => block@6, method "arrayFromCtor()uint64[]" => block@7, method "buildReadonly()uint64[]" => block@8, method "doThings()void" => block@29, method "fixedArray(uint64[50])void" => block@10, method "arc4Interop()void" => block@11, method "structs((uint64,uint64))(uint64,uint64)[]" => block@12, method "booleans()bool[]" => block@13, method "booleansStatic()(bool,bool,bool)" => block@14, method "arc4Booleans()bool[]" => block@15, method "arc4BooleansStatic()(bool,bool,bool)" => block@16, method "aliasing(uint64[],uint64[])void" => block@17, method "receiveMutable(uint64[])void" => block@18, method "receiveReadonly(uint64[])void" => block@19, * => block@22}
    block@4: // readonlyArray_route_L7
        exit 1u
    block@5: // arrayInObject_route_L20
        exit 1u
    block@6: // buildArray_route_L30
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        exit 1u
    block@7: // arrayFromCtor_route_L34
        (log 0x151f7c750003000000000000000100000000000000020000000000000003)
        exit 1u
    block@8: // buildReadonly_route_L38
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        exit 1u
    block@29: // while_top_L20
        let tmp%1#16: uint64 = (global OpcodeBudget)
        let tmp%2#6: bool = (> 1410u tmp%1#16)
        goto tmp%2#6 ? block@30 : block@34
    block@30: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@29
    block@34: // after_while_L20
        exit 1u
    block@10: // fixedArray_route_L109
        let y#1: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        let values%1#1: uint64 = (extract_uint64 y#1 0u)
        let tmp%6#3: bool = (! values%1#1)
        (assert tmp%6#3)
        exit 1u
    block@11: // arc4Interop_route_L157
        exit 1u
    block@12: // structs_route_L170
        let p#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (extract_uint64 p#0 0u)
        let y#0: uint64 = (extract_uint64 p#0 8u)
        let aggregate%val_as_bytes%49#0: bytes[8] = (itob x#0)
        let aggregate%val_as_bytes%50#0: bytes[8] = (itob y#0)
        let aggregate%head%50#0: bytes = (concat aggregate%val_as_bytes%49#0 aggregate%val_as_bytes%50#0)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = (concat 0x0001 aggregate%head%50#0)
        let aggregate%array_length%20#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%2#2: bool = (== aggregate%array_length%20#0 1u)
        let aggregate%encoded_element%172#0: bytes = ((extract 2 16) myVectors#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%encoded_element%172#0 0u)
        let tmp%3#3: bool = (== values%2#0 x#0)
        let values%3#0: uint64 = (extract_uint64 aggregate%encoded_element%172#0 8u)
        let tmp%4#3: bool = (== values%3#0 y#0)
        let tmp%5#1: bool = (&& tmp%3#3 tmp%4#3)
        let tmp%6#1: bool = (&& tmp%2#2 tmp%5#1)
        (assert tmp%6#1) // assert target is match for conditions
        let tmp%1#7: bytes = (concat 0x151f7c75 myVectors#1)
        (log tmp%1#7)
        exit 1u
    block@13: // booleans_route_L179
        (log 0x151f7c750003a0)
        exit 1u
    block@14: // booleansStatic_route_L183
        (log 0x151f7c75a0)
        exit 1u
    block@15: // arc4Booleans_route_L187
        (log 0x151f7c750003a0)
        exit 1u
    block@16: // arc4BooleansStatic_route_L191
        (log 0x151f7c75a0)
        exit 1u
    block@17: // aliasing_route_L195
        let mutable#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 mutable#0 10u)
        let tmp%1#1: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%51#0: bytes[8] = (itob tmp%1#1)
        let mutable#1: Encoded(len+uint64[]) = ((replace2 10) mutable#0 aggregate%val_as_bytes%51#0) // on error: index access is out of bounds
        let values%1#0: uint64 = (extract_uint64 mutable#1 10u)
        let tmp%2#1: bool = (!= values%1#0 values%0#0)
        (assert tmp%2#1) // These should not match
        exit 1u
    block@18: // receiveMutable_route_L221
        exit 1u
    block@19: // receiveReadonly_route_L225
        exit 1u
    block@22: // after_if_else_L6
        fail
    block@23: // __algots__.defaultCreate_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u