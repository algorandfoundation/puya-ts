#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8 2
    bytecblock 0x068101
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@23
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x7d318589 0xb0ac9066 0x0f4c11ca 0xaaa29f70 0xe2d5e035 0x13a588c8 0xd6ecc1e6 0x787b50b2 0xeb87a064 0xbc61d6b8 0x8f544473 0x43e7ee45 0xcbe3a4f8 0x143f223b 0xd9895442 0xe213f5b6 // method "readonlyArray()void", method "arrayInObject()void", method "buildArray()uint64[]", method "arrayFromCtor()uint64[]", method "buildReadonly()uint64[]", method "doThings()void", method "fixedArray(uint64[50])void", method "arc4Interop()void", method "structs((uint64,uint64))(uint64,uint64)[]", method "booleans()bool[]", method "booleansStatic()(bool,bool,bool)", method "arc4Booleans()bool[]", method "arc4BooleansStatic()(bool,bool,bool)", method "aliasing(uint64[],uint64[])void", method "receiveMutable(uint64[])void", method "receiveReadonly(uint64[])void"
    txna ApplicationArgs 0
    match main_readonlyArray_route@4 main_readonlyArray_route@4 main_buildArray_route@6 main_arrayFromCtor_route@7 main_buildArray_route@6 main_while_top@29 main_fixedArray_route@10 main_readonlyArray_route@4 main_structs_route@12 main_booleans_route@13 main_booleansStatic_route@14 main_booleans_route@13 main_booleansStatic_route@14 main_aliasing_route@17 main_receiveMutable_route@18 main_receiveReadonly_route@19
    err

main_receiveReadonly_route@19:
    // tests/approvals/native-arrays.algo.ts:225
    // receiveReadonly(a: readonly uint64[]) {}
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    intc_3 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<uint64>
    intc_0 // 1
    return

main_receiveMutable_route@18:
    // tests/approvals/native-arrays.algo.ts:221
    // receiveMutable(a: uint64[]) {
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    intc_3 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<uint64>
    intc_0 // 1
    return

main_aliasing_route@17:
    // tests/approvals/native-arrays.algo.ts:195
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<uint64>
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    intc_3 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<uint64>
    // tests/approvals/native-arrays.algo.ts:206
    // mutable[1] += 2
    dup
    pushint 10 // 10
    extract_uint64
    dup
    intc_3 // 2
    +
    itob
    uncover 2
    swap
    replace2 10 // on error: index access is out of bounds
    pushint 10 // 10
    // tests/approvals/native-arrays.algo.ts:208
    // assert(mutable[1] !== needClone2[1], 'These should not match')
    extract_uint64
    !=
    assert // These should not match
    // tests/approvals/native-arrays.algo.ts:195
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    intc_0 // 1
    return

main_booleansStatic_route@14:
    // tests/approvals/native-arrays.algo.ts:183
    // booleansStatic() {
    pushbytes 0x151f7c75a0
    log
    intc_0 // 1
    return

main_booleans_route@13:
    // tests/approvals/native-arrays.algo.ts:179
    // booleans() {
    pushbytes 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_structs_route@12:
    // tests/approvals/native-arrays.algo.ts:170
    // structs({ x, y }: Vector) {
    txna ApplicationArgs 1
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for tests/approvals/native-arrays.algo.ts::Vector
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    // tests/approvals/native-arrays.algo.ts:173
    // myVectors = [{ x, y }]
    dig 1
    itob
    dig 1
    itob
    concat
    pushbytes 0x0001
    swap
    concat
    // tests/approvals/native-arrays.algo.ts:175
    // assertMatch(myVectors, [{ x, y }])
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_0 // 1
    ==
    dig 1
    extract 2 16
    dup
    intc_1 // 0
    extract_uint64
    uncover 5
    ==
    swap
    intc_2 // 8
    extract_uint64
    uncover 4
    ==
    &&
    &&
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:170
    // structs({ x, y }: Vector) {
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_readonlyArray_route@4:
    // tests/approvals/native-arrays.algo.ts:7
    // readonlyArray() {
    intc_0 // 1
    return

main_fixedArray_route@10:
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    txna ApplicationArgs 1
    dup
    len
    pushint 400 // 400
    ==
    assert // invalid number of bytes for arc4.static_array<uint64, 50>
    // tests/approvals/native-arrays.algo.ts:119
    // assert(x[0] === y[0])
    intc_1 // 0
    extract_uint64
    !
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    return

main_while_top@29:
    pushint 1410 // 1410
    global OpcodeBudget
    >
    bz main_readonlyArray_route@4
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_0 // 0x068101
    itxn_field ApprovalProgram
    bytec_0 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b main_while_top@29

main_buildArray_route@6:
    // tests/approvals/native-arrays.algo.ts:30
    // buildArray(): Array<uint64> {
    pushbytes 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_arrayFromCtor_route@7:
    // tests/approvals/native-arrays.algo.ts:34
    // arrayFromCtor(): Array<uint64> {
    pushbytes 0x151f7c750003000000000000000100000000000000020000000000000003
    log
    intc_0 // 1
    return

main___algots__.defaultCreate@23:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return
