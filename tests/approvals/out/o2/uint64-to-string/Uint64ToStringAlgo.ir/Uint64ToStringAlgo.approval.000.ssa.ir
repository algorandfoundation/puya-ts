main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/uint64-to-string.algo.ts::Uint64ToStringAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine puya-ts::itoa(i: uint64) -> string:
    block@0: // L1
        let tmp%0#0: bool = (< i#0 10u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L1
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        let reinterpret_string%0#0: string = extract%0#0
        return reinterpret_string%0#0
    block@2: // else_body_L1
        let tmp%1#0: uint64 = (/ i#0 10u)
        let tmp%2#0: string = puya-ts::itoa(tmp%1#0)
        let tmp%3#0: uint64 = (% i#0 10u)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%3#0 1u)
        let reinterpret_string%1#0: string = extract%1#0
        let tmp%4#0: string = (concat tmp%2#0 reinterpret_string%1#0)
        return tmp%4#0

subroutine tests/approvals/uint64-to-string.algo.ts::Uint64ToStringAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64)string" => block@2, * => block@3}
    block@2: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: string = tests/approvals/uint64-to-string.algo.ts::Uint64ToStringAlgo.test(tmp%7#0)
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        return 1u
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        goto block@9
    block@5: // bare_routing_L4
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L4
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        tests/approvals/uint64-to-string.algo.ts::Uint64ToStringAlgo.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@9
    block@9: // after_if_else_L4
        return 0u

subroutine tests/approvals/uint64-to-string.algo.ts::Uint64ToStringAlgo.test(x: uint64) -> string:
    block@0: // L5
        let tmp%0#0: string = puya-ts::itoa(123u)
        let tmp%1#0: bool = (== tmp%0#0 "123")
        (assert tmp%1#0)
        let tmp%2#0: string = puya-ts::itoa(123u)
        let tmp%3#0: bytes = (concat "" tmp%2#0)
        let tmp%4#0: bool = (== tmp%3#0 "123")
        (assert tmp%4#0)
        let tmp%5#0: string = puya-ts::itoa(x#0)
        return tmp%5#0

subroutine tests/approvals/uint64-to-string.algo.ts::Uint64ToStringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 