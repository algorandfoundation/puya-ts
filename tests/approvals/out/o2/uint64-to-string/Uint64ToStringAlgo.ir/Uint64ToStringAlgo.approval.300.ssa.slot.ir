main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64)string" => block@3, * => block@4}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#3: string = puya-ts::itoa(123u)
        let tmp%1#2: bool = (== tmp%0#3 "123")
        (assert tmp%1#2)
        let tmp%2#2: string = puya-ts::itoa(123u)
        let tmp%4#1: bool = (== tmp%2#2 "123")
        (assert tmp%4#1)
        let tmp%5#1: string = puya-ts::itoa(x#0)
        let aggregate%length%0#0: uint64 = (len tmp%5#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%5#1)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%3#1)
        exit 1u
    block@4: // switch_case_next_L4
        fail
    block@5: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine puya-ts::itoa(i: uint64) -> string:
    block@0: // L1
        let tmp%0#0: bool = (< i#0 10u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L1
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        return extract%0#0
    block@2: // else_body_L1
        let tmp%1#0: uint64 = (/ i#0 10u)
        let tmp%2#0: string = puya-ts::itoa(tmp%1#0)
        let tmp%3#0: uint64 = (% i#0 10u)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%3#0 1u)
        let tmp%4#0: string = (concat tmp%2#0 extract%1#0)
        return tmp%4#0