{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/match-expr.algo.ts"
  ],
  "mappings": ";;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAGI;AAAuB;AAAvB;AAAA;AAEO;AAAgC;;AAAhC;AAAP;AACO;AAA6B;;AAA7B;AAAP;AACO;AAAkC;AAAlC;AAAP;AACO;AAA+B;AAA/B;AAAP;AAEgB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAET;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;AAAe;AAAf;AAAA;;;;AAAP;AACO;AAAA;;;AAAA;;;AAAA;AAA8B;;AAA9B;AAAA;;;;AAAP;AACO;AAAA;;;AAAA;;;AAAA;AAA2B;;AAA3B;AAAA;;;;AAAP;AACO;AAAA;;;AAAA;;;AAAA;AAAgC;AAAhC;AAAA;;;;AAAP;AACO;AAAA;;;AAAA;;;AAAA;AAA6B;AAA7B;AAAA;;;;AAAP;AAfF;;;;;;;;;;;;;;;;;;;;;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 5 2"
    },
    "7": {
      "op": "intc_0 // 0",
      "stack_out": [
        "xArray#0"
      ]
    },
    "8": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "10": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%0#1"
      ]
    },
    "12": {
      "op": "bz main_bare_routing@6",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "15": {
      "op": "pushbytes 0x937e729a // method \"testMatches(uint64)void\""
    },
    "21": {
      "op": "txna ApplicationArgs 0"
    },
    "24": {
      "op": "match main_testMatches_route@3"
    },
    "28": {
      "block": "main_after_if_else@10",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "29": {
      "op": "return"
    },
    "30": {
      "block": "main_testMatches_route@3",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%3#0"
      ]
    },
    "32": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%4#0"
      ]
    },
    "33": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "34": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%5#0"
      ]
    },
    "36": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "37": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "40": {
      "op": "btoi",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0"
      ]
    },
    "41": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)"
      ]
    },
    "42": {
      "op": "intc_2 // 5",
      "defined_out": [
        "5",
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)",
        "5"
      ]
    },
    "43": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "x#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "tmp%0#0"
      ]
    },
    "44": {
      "error": "x should be 5",
      "op": "assert // x should be 5",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0"
      ]
    },
    "45": {
      "op": "dup",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)"
      ]
    },
    "46": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)",
        "4"
      ]
    },
    "48": {
      "op": ">",
      "defined_out": [
        "tmp%1#1",
        "x#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "tmp%1#1"
      ]
    },
    "49": {
      "op": "assert",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0"
      ]
    },
    "50": {
      "op": "dup",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)"
      ]
    },
    "51": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)",
        "6"
      ]
    },
    "53": {
      "op": "<",
      "defined_out": [
        "tmp%2#1",
        "x#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "tmp%2#1"
      ]
    },
    "54": {
      "op": "assert",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0"
      ]
    },
    "55": {
      "op": "dup",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)"
      ]
    },
    "56": {
      "op": "intc_2 // 5",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)",
        "5"
      ]
    },
    "57": {
      "op": ">=",
      "defined_out": [
        "tmp%3#1",
        "x#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "tmp%3#1"
      ]
    },
    "58": {
      "op": "assert",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0"
      ]
    },
    "59": {
      "op": "dup",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)"
      ]
    },
    "60": {
      "op": "intc_2 // 5",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "x#0 (copy)",
        "5"
      ]
    },
    "61": {
      "op": "<=",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0",
        "tmp%4#0"
      ]
    },
    "62": {
      "op": "assert",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "x#0"
      ]
    },
    "63": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1"
      ]
    },
    "64": {
      "op": "dup",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%0#1 (copy)"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1",
        "array%sub_item%0#1 (copy)"
      ]
    },
    "65": {
      "op": "len",
      "defined_out": [
        "array%sub_item%0#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1",
        "byte_len%0#0"
      ]
    },
    "66": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "array%sub_item%0#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "68": {
      "op": "/",
      "defined_out": [
        "array%sub_item%0#1",
        "len_%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1",
        "len_%0#0"
      ]
    },
    "69": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1",
        "as_bytes%0#0"
      ]
    },
    "70": {
      "op": "extract 6 2",
      "defined_out": [
        "array%sub_item%0#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "array%sub_item%0#1",
        "len_16_bit%0#0"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "len_16_bit%0#0",
        "array%sub_item%0#1"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "xArray#0"
      ]
    },
    "75": {
      "op": "dup",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "xArray#0",
        "xArray#0"
      ]
    },
    "76": {
      "op": "bury 3",
      "defined_out": [
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "xArray#0"
      ]
    },
    "78": {
      "op": "intc_0 // 0",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "xArray#0",
        "0"
      ]
    },
    "79": {
      "op": "extract_uint16",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%5#0"
      ]
    },
    "80": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%5#0",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%5#0",
        "1"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "tmp%6#1",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "82": {
      "op": "dup",
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "83": {
      "op": "bury 2",
      "defined_out": [
        "tmp%6#1",
        "xArray#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "85": {
      "op": "bz main_bool_false@17",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "88": {
      "op": "dig 1"
    },
    "90": {
      "op": "intc_3 // 2"
    },
    "91": {
      "op": "extract_uint64"
    },
    "92": {
      "op": "intc_2 // 5"
    },
    "93": {
      "op": "=="
    },
    "94": {
      "op": "bz main_bool_false@17"
    },
    "97": {
      "op": "intc_1 // 1"
    },
    "98": {
      "block": "main_bool_merge@18",
      "stack_in": [
        "xArray#0",
        "tmp%6#1",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "100": {
      "op": "bz main_bool_false@21",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "103": {
      "op": "dig 1"
    },
    "105": {
      "op": "intc_3 // 2"
    },
    "106": {
      "op": "extract_uint64"
    },
    "107": {
      "op": "pushint 4 // 4"
    },
    "109": {
      "op": ">"
    },
    "110": {
      "op": "bz main_bool_false@21"
    },
    "113": {
      "op": "intc_1 // 1"
    },
    "114": {
      "block": "main_bool_merge@22",
      "stack_in": [
        "xArray#0",
        "tmp%6#1",
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "115": {
      "op": "dup",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "116": {
      "op": "bz main_bool_false@25",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "119": {
      "op": "dig 1"
    },
    "121": {
      "op": "intc_3 // 2"
    },
    "122": {
      "op": "extract_uint64"
    },
    "123": {
      "op": "pushint 6 // 6"
    },
    "125": {
      "op": "<"
    },
    "126": {
      "op": "bz main_bool_false@25"
    },
    "129": {
      "op": "intc_1 // 1"
    },
    "130": {
      "block": "main_bool_merge@26",
      "stack_in": [
        "xArray#0",
        "tmp%6#1",
        "and_result%2#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "131": {
      "op": "dup",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "132": {
      "op": "bz main_bool_false@29",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "135": {
      "op": "dig 1"
    },
    "137": {
      "op": "intc_3 // 2"
    },
    "138": {
      "op": "extract_uint64"
    },
    "139": {
      "op": "intc_2 // 5"
    },
    "140": {
      "op": ">="
    },
    "141": {
      "op": "bz main_bool_false@29"
    },
    "144": {
      "op": "intc_1 // 1"
    },
    "145": {
      "block": "main_bool_merge@30",
      "stack_in": [
        "xArray#0",
        "tmp%6#1",
        "and_result%3#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "146": {
      "op": "dup",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "147": {
      "op": "bz main_bool_false@33",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "150": {
      "op": "dig 1"
    },
    "152": {
      "op": "intc_3 // 2"
    },
    "153": {
      "op": "extract_uint64"
    },
    "154": {
      "op": "intc_2 // 5"
    },
    "155": {
      "op": "<="
    },
    "156": {
      "op": "bz main_bool_false@33"
    },
    "159": {
      "op": "intc_1 // 1"
    },
    "160": {
      "block": "main_bool_merge@34",
      "stack_in": [
        "xArray#0",
        "tmp%6#1",
        "and_result%4#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "return"
    },
    "163": {
      "block": "main_bool_false@33",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%4#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "and_result%4#0"
      ]
    },
    "164": {
      "op": "b main_bool_merge@34"
    },
    "167": {
      "block": "main_bool_false@29",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "and_result%3#0"
      ]
    },
    "168": {
      "op": "b main_bool_merge@30"
    },
    "171": {
      "block": "main_bool_false@25",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "and_result%2#0"
      ]
    },
    "172": {
      "op": "b main_bool_merge@26"
    },
    "175": {
      "block": "main_bool_false@21",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "and_result%1#0"
      ]
    },
    "176": {
      "op": "b main_bool_merge@22"
    },
    "179": {
      "block": "main_bool_false@17",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "and_result%0#0"
      ]
    },
    "180": {
      "op": "b main_bool_merge@18"
    },
    "183": {
      "block": "main_bare_routing@6",
      "stack_in": [
        "xArray#0",
        "tmp%6#1"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "xArray#0",
        "tmp%6#1",
        "tmp%8#0"
      ]
    },
    "185": {
      "op": "bnz main_after_if_else@10",
      "stack_out": [
        "xArray#0",
        "tmp%6#1"
      ]
    },
    "188": {
      "op": "txn ApplicationID"
    },
    "190": {
      "op": "!"
    },
    "191": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "192": {
      "op": "intc_1 // 1"
    },
    "193": {
      "op": "return"
    }
  }
}