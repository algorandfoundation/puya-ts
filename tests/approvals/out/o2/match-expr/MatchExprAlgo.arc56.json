{
    "name": "MatchExprAlgo",
    "structs": {},
    "methods": [
        {
            "name": "testMatches",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        33
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        55
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        197
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        36
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        44
                    ],
                    "errorMessage": "x should be 5"
                },
                {
                    "pc": [
                        49
                    ],
                    "errorMessage": "x should not be 3"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDUgMgogICAgaW50Y18wIC8vIDAKICAgIHB1c2hieXRlcyAiIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czo0CiAgICAvLyBjbGFzcyBNYXRjaEV4cHJBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDYKICAgIHB1c2hieXRlcyAweDkzN2U3MjlhIC8vIG1ldGhvZCAidGVzdE1hdGNoZXModWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3Rlc3RNYXRjaGVzX3JvdXRlQDMKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6NAogICAgLy8gY2xhc3MgTWF0Y2hFeHByQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fdGVzdE1hdGNoZXNfcm91dGVAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6NQogICAgLy8gcHVibGljIHRlc3RNYXRjaGVzKHg6IHVpbnQ2NCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjQKICAgIC8vIGNsYXNzIE1hdGNoRXhwckFsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjcKICAgIC8vIGFzc2VydE1hdGNoKHhPYmosIHsgeDogNSB9LCAneCBzaG91bGQgYmUgNScpCiAgICBkdXAKICAgIGludGNfMiAvLyA1CiAgICA9PQogICAgYXNzZXJ0IC8vIHggc2hvdWxkIGJlIDUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6OAogICAgLy8gYXNzZXJ0TWF0Y2goeE9iaiwgeyB4OiB7IG5vdDogMyB9IH0sICd4IHNob3VsZCBub3QgYmUgMycpCiAgICBkdXAKICAgIHB1c2hpbnQgMyAvLyAzCiAgICAhPQogICAgYXNzZXJ0IC8vIHggc2hvdWxkIG5vdCBiZSAzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjkKICAgIC8vIGFzc2VydE1hdGNoKFR4biwgeyBzZW5kZXI6IHsgbm90OiBHbG9iYWwuemVyb0FkZHJlc3MgfSB9KQogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6MTAKICAgIC8vIGFzc2VydChtYXRjaCh4T2JqLCB7IHg6IHsgZ3JlYXRlclRoYW46IDQgfSB9KSkKICAgIGR1cAogICAgcHVzaGludCA0IC8vIDQKICAgID4KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czoxMQogICAgLy8gYXNzZXJ0KG1hdGNoKHhPYmosIHsgeDogeyBsZXNzVGhhbjogNiB9IH0pKQogICAgZHVwCiAgICBwdXNoaW50IDYgLy8gNgogICAgPAogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjEyCiAgICAvLyBhc3NlcnQobWF0Y2goeE9iaiwgeyB4OiB7IGdyZWF0ZXJUaGFuRXE6IDUgfSB9KSkKICAgIGR1cAogICAgaW50Y18yIC8vIDUKICAgID49CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6MTMKICAgIC8vIGFzc2VydChtYXRjaCh4T2JqLCB7IHg6IHsgbGVzc1RoYW5FcTogNSB9IH0pKQogICAgZHVwCiAgICBpbnRjXzIgLy8gNQogICAgPD0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czoxNQogICAgLy8gY29uc3QgeEFycmF5ID0gW3hdCiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgwMDAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYnVyeSAzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjE3CiAgICAvLyBhc3NlcnQobWF0Y2goeEFycmF5LCBbNV0pKQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGR1cAogICAgYnVyeSAyCiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMTcKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA1CiAgICA9PQogICAgYnogbWFpbl9ib29sX2ZhbHNlQDE3CiAgICBpbnRjXzEgLy8gMQoKbWFpbl9ib29sX21lcmdlQDE4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czoxNwogICAgLy8gYXNzZXJ0KG1hdGNoKHhBcnJheSwgWzVdKSkKICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czoxOAogICAgLy8gYXNzZXJ0KG1hdGNoKHhBcnJheSwgW3sgZ3JlYXRlclRoYW46IDQgfV0pKQogICAgZHVwCiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMjEKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA+CiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMjEKICAgIGludGNfMSAvLyAxCgptYWluX2Jvb2xfbWVyZ2VAMjI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjE4CiAgICAvLyBhc3NlcnQobWF0Y2goeEFycmF5LCBbeyBncmVhdGVyVGhhbjogNCB9XSkpCiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6MTkKICAgIC8vIGFzc2VydChtYXRjaCh4QXJyYXksIFt7IGxlc3NUaGFuOiA2IH1dKSkKICAgIGR1cAogICAgYnogbWFpbl9ib29sX2ZhbHNlQDI1CiAgICBkaWcgMQogICAgaW50Y18zIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDYgLy8gNgogICAgPAogICAgYnogbWFpbl9ib29sX2ZhbHNlQDI1CiAgICBpbnRjXzEgLy8gMQoKbWFpbl9ib29sX21lcmdlQDI2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czoxOQogICAgLy8gYXNzZXJ0KG1hdGNoKHhBcnJheSwgW3sgbGVzc1RoYW46IDYgfV0pKQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjIwCiAgICAvLyBhc3NlcnQobWF0Y2goeEFycmF5LCBbeyBncmVhdGVyVGhhbkVxOiA1IH1dKSkKICAgIGR1cAogICAgYnogbWFpbl9ib29sX2ZhbHNlQDI5CiAgICBkaWcgMQogICAgaW50Y18zIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNQogICAgPj0KICAgIGJ6IG1haW5fYm9vbF9mYWxzZUAyOQogICAgaW50Y18xIC8vIDEKCm1haW5fYm9vbF9tZXJnZUAzMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6MjAKICAgIC8vIGFzc2VydChtYXRjaCh4QXJyYXksIFt7IGdyZWF0ZXJUaGFuRXE6IDUgfV0pKQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjIxCiAgICAvLyBhc3NlcnQobWF0Y2goeEFycmF5LCBbeyBsZXNzVGhhbkVxOiA1IH1dKSkKICAgIGR1cAogICAgYnogbWFpbl9ib29sX2ZhbHNlQDMzCiAgICBkaWcgMQogICAgaW50Y18zIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNQogICAgPD0KICAgIGJ6IG1haW5fYm9vbF9mYWxzZUAzMwogICAgaW50Y18xIC8vIDEKCm1haW5fYm9vbF9tZXJnZUAzNDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9tYXRjaC1leHByLmFsZ28udHM6MjEKICAgIC8vIGFzc2VydChtYXRjaCh4QXJyYXksIFt7IGxlc3NUaGFuRXE6IDUgfV0pKQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbWF0Y2gtZXhwci5hbGdvLnRzOjUKICAgIC8vIHB1YmxpYyB0ZXN0TWF0Y2hlcyh4OiB1aW50NjQpIHsKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYm9vbF9mYWxzZUAzMzoKICAgIGludGNfMCAvLyAwCiAgICBiIG1haW5fYm9vbF9tZXJnZUAzNAoKbWFpbl9ib29sX2ZhbHNlQDI5OgogICAgaW50Y18wIC8vIDAKICAgIGIgbWFpbl9ib29sX21lcmdlQDMwCgptYWluX2Jvb2xfZmFsc2VAMjU6CiAgICBpbnRjXzAgLy8gMAogICAgYiBtYWluX2Jvb2xfbWVyZ2VAMjYKCm1haW5fYm9vbF9mYWxzZUAyMToKICAgIGludGNfMCAvLyAwCiAgICBiIG1haW5fYm9vbF9tZXJnZUAyMgoKbWFpbl9ib29sX2ZhbHNlQDE3OgogICAgaW50Y18wIC8vIDAKICAgIGIgbWFpbl9ib29sX21lcmdlQDE4CgptYWluX2JhcmVfcm91dGluZ0A2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL21hdGNoLWV4cHIuYWxnby50czo0CiAgICAvLyBjbGFzcyBNYXRjaEV4cHJBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4K",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEFAiKAADEbQQCugASTfnKaNhoAjgEAAiJDMRkURDEYRDYaARdJJBJESYEDE0QxADIDE0RJgQQNREmBBgxESSQPREkkDkQWgAIAAUxQSUUDIlkjEklFAkEAW0sBJVskEkEAUiNESUEASEsBJVuBBA1BAD4jRElBADRLASVbgQYMQQAqI0RJQQAgSwElWyQPQQAXI0RJQQANSwElWyQOQQAEI0QjQyJC//kiQv/mIkL/0yJC/78iQv+rMRlA/1oxGBREI0M=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}