#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 5 2
    intc_0 // 0
    pushbytes ""
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x937e729a // method "testMatches(uint64)void"
    txna ApplicationArgs 0
    match main_testMatches_route@3

main_after_if_else@10:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    intc_0 // 0
    return

main_testMatches_route@3:
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // tests/approvals/match-expr.algo.ts:7
    // assertMatch(xObj, { x: 5 }, 'x should be 5')
    dup
    intc_2 // 5
    ==
    assert // x should be 5
    // tests/approvals/match-expr.algo.ts:9
    // assert(match(xObj, { x: { greaterThan: 4 } }))
    dup
    pushint 4 // 4
    >
    assert
    // tests/approvals/match-expr.algo.ts:10
    // assert(match(xObj, { x: { lessThan: 6 } }))
    dup
    pushint 6 // 6
    <
    assert
    // tests/approvals/match-expr.algo.ts:11
    // assert(match(xObj, { x: { greaterThanEq: 5 } }))
    dup
    intc_2 // 5
    >=
    assert
    // tests/approvals/match-expr.algo.ts:12
    // assert(match(xObj, { x: { lessThanEq: 5 } }))
    dup
    intc_2 // 5
    <=
    assert
    // tests/approvals/match-expr.algo.ts:14
    // const xArray = [x]
    itob
    pushbytes 0x0001
    swap
    concat
    dup
    bury 3
    // tests/approvals/match-expr.algo.ts:16
    // assert(match(xArray, [5]))
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    dup
    bury 2
    bz main_bool_false@17
    dig 1
    intc_3 // 2
    extract_uint64
    intc_2 // 5
    ==
    bz main_bool_false@17
    intc_1 // 1

main_bool_merge@18:
    // tests/approvals/match-expr.algo.ts:16
    // assert(match(xArray, [5]))
    assert
    // tests/approvals/match-expr.algo.ts:17
    // assert(match(xArray, [{ greaterThan: 4 }]))
    dup
    bz main_bool_false@21
    dig 1
    intc_3 // 2
    extract_uint64
    pushint 4 // 4
    >
    bz main_bool_false@21
    intc_1 // 1

main_bool_merge@22:
    // tests/approvals/match-expr.algo.ts:17
    // assert(match(xArray, [{ greaterThan: 4 }]))
    assert
    // tests/approvals/match-expr.algo.ts:18
    // assert(match(xArray, [{ lessThan: 6 }]))
    dup
    bz main_bool_false@25
    dig 1
    intc_3 // 2
    extract_uint64
    pushint 6 // 6
    <
    bz main_bool_false@25
    intc_1 // 1

main_bool_merge@26:
    // tests/approvals/match-expr.algo.ts:18
    // assert(match(xArray, [{ lessThan: 6 }]))
    assert
    // tests/approvals/match-expr.algo.ts:19
    // assert(match(xArray, [{ greaterThanEq: 5 }]))
    dup
    bz main_bool_false@29
    dig 1
    intc_3 // 2
    extract_uint64
    intc_2 // 5
    >=
    bz main_bool_false@29
    intc_1 // 1

main_bool_merge@30:
    // tests/approvals/match-expr.algo.ts:19
    // assert(match(xArray, [{ greaterThanEq: 5 }]))
    assert
    // tests/approvals/match-expr.algo.ts:20
    // assert(match(xArray, [{ lessThanEq: 5 }]))
    dup
    bz main_bool_false@33
    dig 1
    intc_3 // 2
    extract_uint64
    intc_2 // 5
    <=
    bz main_bool_false@33
    intc_1 // 1

main_bool_merge@34:
    // tests/approvals/match-expr.algo.ts:20
    // assert(match(xArray, [{ lessThanEq: 5 }]))
    assert
    // tests/approvals/match-expr.algo.ts:5
    // public testMatches(x: uint64) {
    intc_1 // 1
    return

main_bool_false@33:
    intc_0 // 0
    b main_bool_merge@34

main_bool_false@29:
    intc_0 // 0
    b main_bool_merge@30

main_bool_false@25:
    intc_0 // 0
    b main_bool_merge@26

main_bool_false@21:
    intc_0 // 0
    b main_bool_merge@22

main_bool_false@17:
    intc_0 // 0
    b main_bool_merge@18

main_bare_routing@6:
    // tests/approvals/match-expr.algo.ts:4
    // class MatchExprAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
