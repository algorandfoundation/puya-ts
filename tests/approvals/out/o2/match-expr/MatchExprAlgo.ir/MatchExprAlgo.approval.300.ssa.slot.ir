main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testMatches(uint64)void" => block@3, * => block@10}
    block@3: // testMatches_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let xObj#0: Encoded(uint64) = (itob x#0)
        let values%0#0: uint64 = (extract_uint64 xObj#0 0u)
        let tmp%1#1: bool = (== values%0#0 5u)
        (assert tmp%1#1) // x should be 5
        let tmp%2#1: bool = (!= values%0#0 3u)
        (assert tmp%2#1) // x should not be 3
        let tmp%3#1: account = (txn Sender)
        let tmp%4#1: account = (global ZeroAddress)
        let tmp%5#1: bool = (!= tmp%3#1 tmp%4#1)
        (assert tmp%5#1) // assert target is match for conditions
        let tmp%6#1: bool = (> values%0#0 4u)
        (assert tmp%6#1)
        let tmp%7#1: bool = (< values%0#0 6u)
        (assert tmp%7#1)
        let tmp%8#1: bool = (>= values%0#0 5u)
        (assert tmp%8#1)
        let tmp%9#1: bool = (<= values%0#0 5u)
        (assert tmp%9#1)
        let xArray#0: Encoded(len+uint64[]) = (concat 0x0001 xObj#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%11#0: bool = (== aggregate%array_length%0#0 1u)
        let values%6#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%12#0: bool = (== values%6#0 5u)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        let tmp%16#0: bool = (> values%6#0 4u)
        let tmp%17#0: bool = (&& tmp%11#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%20#0: bool = (< values%6#0 6u)
        let tmp%21#0: bool = (&& tmp%11#0 tmp%20#0)
        (assert tmp%21#0)
        let tmp%24#0: bool = (>= values%6#0 5u)
        let tmp%25#0: bool = (&& tmp%11#0 tmp%24#0)
        (assert tmp%25#0)
        let tmp%28#0: bool = (<= values%6#0 5u)
        let tmp%29#0: bool = (&& tmp%11#0 tmp%28#0)
        (assert tmp%29#0)
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0