main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testMatches(uint64)void" => block@3, * => block@10}
    block@3: // testMatches_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#2: bool = (== x#0 5u)
        (assert tmp%0#2) // x should be 5
        let tmp%1#1: bool = (!= x#0 3u)
        (assert tmp%1#1) // x should not be 3
        let tmp%2#1: account = (txn Sender)
        let tmp%3#1: account = (global ZeroAddress)
        let tmp%4#1: bool = (!= tmp%2#1 tmp%3#1)
        (assert tmp%4#1) // assert target is match for conditions
        let tmp%5#1: bool = (> x#0 4u)
        (assert tmp%5#1)
        let tmp%6#1: bool = (< x#0 6u)
        (assert tmp%6#1)
        let tmp%7#1: bool = (>= x#0 5u)
        (assert tmp%7#1)
        let tmp%8#1: bool = (<= x#0 5u)
        (assert tmp%8#1)
        let array%val_as_bytes%0#1: bytes[8] = (itob x#0)
        let xArray#0: Encoded(len+uint64[]) = (concat 0x0001 array%val_as_bytes%0#1)
        let array_length%0#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%9#1: bool = (== array_length%0#0 1u)
        goto tmp%9#1 ? block@15 : block@17
    block@15: // and_contd_L17
        let tmp%10#1: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%11#0: bool = (== tmp%10#1 5u)
        goto tmp%11#0 ? block@16 : block@17
    block@16: // bool_true_L17
        let and_result%0#0: bool = 1u
        goto block@18
    block@17: // bool_false_L17
        let and_result%0#1: bool = 0u
        goto block@18
    block@18: // bool_merge_L17
        let and_result%0#2: bool = φ(and_result%0#0 <- block@16, and_result%0#1 <- block@17)
        (assert and_result%0#2)
        goto tmp%9#1 ? block@19 : block@21
    block@19: // and_contd_L18
        let tmp%13#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%14#0: bool = (> tmp%13#0 4u)
        goto tmp%14#0 ? block@20 : block@21
    block@20: // bool_true_L18
        let and_result%1#0: bool = 1u
        goto block@22
    block@21: // bool_false_L18
        let and_result%1#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L18
        let and_result%1#2: bool = φ(and_result%1#0 <- block@20, and_result%1#1 <- block@21)
        (assert and_result%1#2)
        goto tmp%9#1 ? block@23 : block@25
    block@23: // and_contd_L19
        let tmp%16#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%17#0: bool = (< tmp%16#0 6u)
        goto tmp%17#0 ? block@24 : block@25
    block@24: // bool_true_L19
        let and_result%2#0: bool = 1u
        goto block@26
    block@25: // bool_false_L19
        let and_result%2#1: bool = 0u
        goto block@26
    block@26: // bool_merge_L19
        let and_result%2#2: bool = φ(and_result%2#0 <- block@24, and_result%2#1 <- block@25)
        (assert and_result%2#2)
        goto tmp%9#1 ? block@27 : block@29
    block@27: // and_contd_L20
        let tmp%19#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%20#0: bool = (>= tmp%19#0 5u)
        goto tmp%20#0 ? block@28 : block@29
    block@28: // bool_true_L20
        let and_result%3#0: bool = 1u
        goto block@30
    block@29: // bool_false_L20
        let and_result%3#1: bool = 0u
        goto block@30
    block@30: // bool_merge_L20
        let and_result%3#2: bool = φ(and_result%3#0 <- block@28, and_result%3#1 <- block@29)
        (assert and_result%3#2)
        goto tmp%9#1 ? block@31 : block@33
    block@31: // and_contd_L21
        let tmp%22#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%23#0: bool = (<= tmp%22#0 5u)
        goto tmp%23#0 ? block@32 : block@33
    block@32: // bool_true_L21
        let and_result%4#0: bool = 1u
        goto block@34
    block@33: // bool_false_L21
        let and_result%4#1: bool = 0u
        goto block@34
    block@34: // bool_merge_L21
        let and_result%4#2: bool = φ(and_result%4#0 <- block@32, and_result%4#1 <- block@33)
        (assert and_result%4#2)
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0 <- block@34, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0