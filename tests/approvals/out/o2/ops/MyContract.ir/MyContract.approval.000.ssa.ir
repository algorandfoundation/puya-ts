main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@2, * => block@3}
    block@2: // test_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/ops.algo.ts::MyContract.test[routing]()
        goto block@3
    block@3: // switch_case_next_L6
        goto block@5
    block@4: // __algots__.defaultCreate_L6
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L6
        exit 0u

subroutine tests/approvals/ops.algo.ts::MyContract.test[routing]() -> void:
    block@0: // L7
        tests/approvals/ops.algo.ts::MyContract.test()
        exit 1u

subroutine tests/approvals/ops.algo.ts::MyContract.test() -> void:
    block@0: // L7
        let tmp%0#0: bytes = (bzero 8u)
        let tmp%1#0: bytes = (b~ tmp%0#0)
        let a#0: bytes = tmp%1#0
        let tmp%2#0: uint64 = (btoi a#0)
        let b#0: uint64 = tmp%2#0
        let tmp%3#0: bool = (== b#0 18446744073709551615u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (shr b#0 32u)
        let c#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (== c#0 4294967295u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (txn GroupIndex)
        let tmp%7#0: uint64 = ((gtxns ApplicationID) tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        let tmp%10#0: bytes = ((txnas ApplicationArgs) 0u)
        let tmp%11#0: bool = (== tmp%10#0 method "test()void")
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (txn GroupIndex)
        let tmp%13#0: bytes = ((gtxnsas ApplicationArgs) tmp%12#0 0u)
        let tmp%14#0: bool = (== tmp%13#0 method "test()void")
        (assert tmp%14#0)
        return 

subroutine tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 