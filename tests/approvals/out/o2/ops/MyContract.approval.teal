#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    bytecblock 0xa78000de
    // tests/approvals/ops.algo.ts:7
    // class MyContract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    bytec_0 // method "test()void"
    pushbytes 0x0a4743a6 // method "test2(uint64)void"
    txna ApplicationArgs 0
    match main_test_route@4 main_test2_route@5
    err

main_test2_route@5:
    // tests/approvals/ops.algo.ts:23
    // test2(size: uint64) {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/ops.algo.ts:25
    // assert(a.length === size)
    dup
    bzero
    len
    ==
    // tests/approvals/ops.algo.ts:23
    // test2(size: uint64) {
    return

main_test_route@4:
    // tests/approvals/ops.algo.ts:17
    // assert(GTxn.applicationId(Txn.groupIndex) === Txn.applicationId)
    txn GroupIndex
    gtxns ApplicationID
    txn ApplicationID
    ==
    assert
    // tests/approvals/ops.algo.ts:19
    // assert(Txn.applicationArgs(0) === methodSelector('test()void'))
    pushint 0 // 0
    txnas ApplicationArgs
    bytec_0 // method "test()void"
    ==
    assert
    // tests/approvals/ops.algo.ts:20
    // assert(GTxn.applicationArgs(Txn.groupIndex, 0) === methodSelector(MyContract.prototype.test))
    txn GroupIndex
    pushint 0 // 0
    gtxnsas ApplicationArgs
    bytec_0 // method "test()void"
    ==
    // tests/approvals/ops.algo.ts:8
    // test() {
    return

main___algots__.defaultCreate@9:
    // tests/approvals/ops.algo.ts:7
    // class MyContract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
