#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    bytecblock 0xa78000de
    // tests/approvals/ops.algo.ts:6
    // class MyContract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    bytec_0 // method "test()void"
    txna ApplicationArgs 0
    match main_test_route@3
    err

main_test_route@3:
    // tests/approvals/ops.algo.ts:7
    // test() {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    // tests/approvals/ops.algo.ts:16
    // assert(GTxn.applicationId(Txn.groupIndex) === Txn.applicationId)
    txn GroupIndex
    gtxns ApplicationID
    txn ApplicationID
    ==
    assert
    // tests/approvals/ops.algo.ts:18
    // assert(Txn.applicationArgs(0) === methodSelector('test()void'))
    pushint 0 // 0
    txnas ApplicationArgs
    bytec_0 // method "test()void"
    ==
    assert
    // tests/approvals/ops.algo.ts:19
    // assert(GTxn.applicationArgs(Txn.groupIndex, 0) === methodSelector(MyContract.prototype.test))
    txn GroupIndex
    pushint 0 // 0
    gtxnsas ApplicationArgs
    bytec_0 // method "test()void"
    ==
    // tests/approvals/ops.algo.ts:7
    // test() {
    return

main___algots__.defaultCreate@5:
    // tests/approvals/ops.algo.ts:6
    // class MyContract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
