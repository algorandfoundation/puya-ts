{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/while-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;;AAEmB;AAAX;;AACG;AAAA;AAAP;;;AACE;;AAAK;AAAL;AAAA;;;;;AAHJ;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "i#0"
      ]
    },
    "7": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@6",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "13": {
      "op": "pushbytes 0x28a52d73 // method \"testWhile(uint64)uint64\""
    },
    "19": {
      "op": "txna ApplicationArgs 0"
    },
    "22": {
      "op": "match main_testWhile_route@3"
    },
    "26": {
      "block": "main_after_if_else@10",
      "stack_in": [
        "i#0",
        "stop#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "return"
    },
    "28": {
      "block": "main_testWhile_route@3",
      "stack_in": [
        "i#0",
        "stop#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%4#0"
      ]
    },
    "31": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "32": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%5#0"
      ]
    },
    "34": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "35": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "38": {
      "op": "btoi",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "stop#0"
      ]
    },
    "39": {
      "op": "bury 1",
      "defined_out": [
        "stop#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "41": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "i#0"
      ]
    },
    "42": {
      "op": "bury 2",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "44": {
      "block": "main_while_top@15",
      "stack_in": [
        "i#0",
        "stop#0"
      ],
      "op": "dup2",
      "defined_out": [
        "i#0",
        "stop#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "i#0",
        "stop#0"
      ]
    },
    "45": {
      "op": "<",
      "defined_out": [
        "i#0",
        "stop#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "bz main_after_while@17",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "49": {
      "op": "dig 1"
    },
    "51": {
      "op": "intc_0 // 1"
    },
    "52": {
      "op": "+"
    },
    "53": {
      "op": "bury 2"
    },
    "55": {
      "op": "b main_while_top@15"
    },
    "58": {
      "block": "main_after_while@17",
      "stack_in": [
        "i#0",
        "stop#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "i#0"
      ]
    },
    "60": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "val_as_bytes%0#0"
      ]
    },
    "61": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "67": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "stop#0",
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "68": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%8#0"
      ]
    },
    "69": {
      "op": "log",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "70": {
      "op": "intc_0 // 1",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "return"
    },
    "72": {
      "block": "main_bare_routing@6",
      "stack_in": [
        "i#0",
        "stop#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "stop#0",
        "tmp%9#0"
      ]
    },
    "74": {
      "op": "bnz main_after_if_else@10",
      "stack_out": [
        "i#0",
        "stop#0"
      ]
    },
    "77": {
      "op": "txn ApplicationID"
    },
    "79": {
      "op": "!"
    },
    "80": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "81": {
      "op": "intc_0 // 1"
    },
    "82": {
      "op": "return"
    }
  }
}