main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        (app_global_put "globalValue" 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bytes = (txna ApplicationArgs 0)
        switch tmp%0#1 {method "allActions()void" => block@4, * => block@5}
    block@4: // allActions_route_L9
        let tmp%1#0: uint64 = (txn ApplicationID)
        (assert tmp%1#0) // can only call when not creating
        exit 1u
    block@5: // switch_case_next_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion must be NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "readonlyAlt2()uint64" => block@6, * => block@7}
    block@6: // readonlyAlt2_route_L29
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#5: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#3: bytes = (concat 0x151f7c75 tmp%1#5)
        (log tmp%2#3)
        exit 1u
    block@7: // switch_case_next_L4
        let tmp%6#0: uint64 = (txn ApplicationID)
        goto tmp%6#0 ? block@8 : block@14
    block@8: // call_NoOp_L4
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "justNoop()void" => block@9, method "overrideReadonlyName()uint64" => block@10, method "methodWithDefaults(uint64,uint64,uint64)uint64" => block@11, method "readonlyAlt()uint64" => block@12, * => block@17}
    block@9: // justNoop_route_L5
        exit 1u
    block@10: // overrideReadonlyName_route_L11
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%1#4: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%2#2: bytes = (concat 0x151f7c75 tmp%1#4)
        (log tmp%2#2)
        exit 1u
    block@11: // methodWithDefaults_route_L18
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let c#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let tmp%0#3: uint64 = (* a#0 b#0)
        let tmp%1#3: uint64 = (+ tmp%0#3 c#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#3)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let tmp%4#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#0
        let tmp%5#1: bytes = (concat 0x151f7c75 tmp%4#1)
        (log tmp%5#1)
        exit 1u
    block@12: // readonlyAlt_route_L23
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let tmp%1#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#0
        let tmp%2#1: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%2#1)
        exit 1u
    block@14: // create_NoOp_L4
        let tmp%9#0: bytes = (txna ApplicationArgs 0)
        switch tmp%9#0 {method "createMethod()void" => block@15, * => block@17}
    block@15: // createMethod_route_L7
        exit 1u
    block@17: // after_if_else_L4
        fail