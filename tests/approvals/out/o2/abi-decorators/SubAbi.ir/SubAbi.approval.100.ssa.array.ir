main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L54
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "someMethod()string" => block@3, * => block@4}
    block@3: // someMethod_route_L55
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be OptIn && can only call when not creating
        let aggregate%length%0#0: uint64 = (len "sub-abi:optin")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "sub-abi:optin")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%2#1: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%2#1)
        exit 1u
    block@4: // switch_case_next_L54
        fail
    block@5: // __algots__.defaultCreate_L54
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u