{
    "name": "StructDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "toNativeResult": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "toAndFromBytes",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "toNative",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "toNativeResult"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setLastCalled",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                },
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "lastCalled"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        248,
                        325,
                        364
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        277,
                        289,
                        391,
                        395,
                        442,
                        447,
                        452,
                        457
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        329,
                        368
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        118,
                        202,
                        314,
                        339,
                        378,
                        408,
                        429,
                        474,
                        518,
                        568
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        586
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        121,
                        205,
                        317,
                        342,
                        381,
                        411,
                        432,
                        477,
                        521,
                        571
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        127,
                        211,
                        348
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        389,
                        419,
                        440,
                        485,
                        529,
                        537
                    ],
                    "errorMessage": "invalid number of bytes for Vector"
                },
                {
                    "pc": [
                        135,
                        219,
                        356
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        230,
                        239,
                        493,
                        501
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAQCCYDBBUffHUHcGx1Z2lucwgAAAAAAAAAADEbQQIeggoEiTiN3QTvMi1tBAJFiAcEy4HeuAT3nWxGBJGRVUUEOBT5KgQAekywBE0hvKYEqbxh8TYaAI4KAcQBkgFmATkBJAEGAN8AxgBWAAIjQzEZFEQxGEQ2GgFJI1mBAghLARUSRFcCAClMUEm8SIAxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAbAAGngADeAAAAAAAAAAEAAAAAAAAAAb8iQzEZFEQxGEQ2GgFJI1mBAghLARUSRFcCADYaAkkVJRJEFzYaA0kVJRJEFxYpTwNQSb5ESYEZWUsBFUsCSwJPAlJJVwIASwaBFAtMSwGBFFhPBlwMSwIjWU8HDURMgQIITF1PAiNPA1hMUEsBvEi/IkMxGRREMRhEgARtYWluvkRJJFtEKExQsCJDMRkURDEYRDYaAUkjWYECCEsBFRJEVwIAKUxQvkRJJFtEKExQsCJDMRkURDEYRDYaAUkVJBJESVcACExXCAhQKExQsCJDMRkURDEYRDYaAUkVJBJEKExQsCJDMRkURDEYRDYaAUkVJBJESVcACEsBVwgIUElXAAhLAVcICFBLAk8CEkQSRCJDMRkURDEYRDYaAUkVJBJENhoCSRUlEkQ2GgNJFSUSRE4CXABMXAgoTFCwIkMxGRREMRhENhoBSRUkEkQ2GgJJFSQSREsBI1tLASNbCBZPAiVbTwIlWwgWUChMULAiQzEZFEQxGEQqsCqwIkMxGUD+KjEYFEQiQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}