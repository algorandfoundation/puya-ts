main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@7, method "toNative((uint64,uint64))(uint64,uint64)" => block@8, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@9, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@10, method "setLastCalled(string,uint64,uint64)void" => block@11, method "setPlugin(string)void" => block@12, * => block@19}
    block@3: // testVectorCreationAndEquality_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x0000000000000000)
        (log 0x0000000000000000)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@4: // addVectors_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let v1#6: bytes[16] = (txna ApplicationArgs 1)
        let value_len%0#0: uint64 = (len v1#6)
        let size_is_correct%0#0: bool = (== value_len%0#0 16u)
        (assert size_is_correct%0#0) // invalid number of bytes for Vector
        let v2#1: bytes[16] = (txna ApplicationArgs 2)
        let value_len%1#0: uint64 = (len v2#1)
        let size_is_correct%1#0: bool = (== value_len%1#0 16u)
        (assert size_is_correct%1#0) // invalid number of bytes for Vector
        let tmp%1#5: uint64 = (extract_uint64 v1#6 0u)
        let tmp%3#3: uint64 = (extract_uint64 v2#1 0u)
        let to_encode%0#0: uint64 = (+ tmp%1#5 tmp%3#3)
        let val_as_bytes%0#1: bytes[8] = (itob to_encode%0#0)
        let tmp%5#1: uint64 = (extract_uint64 v1#6 8u)
        let tmp%7#1: uint64 = (extract_uint64 v2#1 8u)
        let to_encode%1#0: uint64 = (+ tmp%5#1 tmp%7#1)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let encoded_tuple_buffer%2#2: bytes = (concat val_as_bytes%0#1 val_as_bytes%1#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#2)
        (log tmp%14#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@5: // mutateVector_route_L26
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let v1#3: bytes[16] = (txna ApplicationArgs 1)
        let value_len%2#0: uint64 = (len v1#3)
        let size_is_correct%2#0: bool = (== value_len%2#0 16u)
        (assert size_is_correct%2#0) // invalid number of bytes for Vector
        let newX#0: bytes[8] = (txna ApplicationArgs 2)
        let value_len%3#0: uint64 = (len newX#0)
        let size_is_correct%3#0: bool = (== value_len%3#0 8u)
        (assert size_is_correct%3#0) // invalid number of bytes for arc4.uint64
        let newY#0: bytes[8] = (txna ApplicationArgs 3)
        let value_len%4#0: uint64 = (len newY#0)
        let size_is_correct%4#0: bool = (== value_len%4#0 8u)
        (assert size_is_correct%4#0) // invalid number of bytes for arc4.uint64
        let v1#4: bytes[16] = ((replace2 0) v1#3 newX#0)
        let v1#5: bytes[16] = ((replace2 8) v1#4 newY#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 v1#5)
        (log tmp%23#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@6: // implicitCastingAndSpreading_route_L32
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let v1#2: bytes[16] = (txna ApplicationArgs 1)
        let value_len%5#0: uint64 = (len v1#2)
        let size_is_correct%5#0: bool = (== value_len%5#0 16u)
        (assert size_is_correct%5#0) // invalid number of bytes for Vector
        let item0%0#1: bytes = ((extract 0 8) v1#2) // on error: Index access is out of bounds
        let item1%0#1: bytes = ((extract 8 8) v1#2) // on error: Index access is out of bounds
        let v2#0: bytes[16] = (concat item0%0#1 item1%0#1)
        let tmp%0#6: bytes = ((extract 0 8) v2#0) // on error: Index access is out of bounds
        let tmp%1#4: bytes = ((extract 8 8) v2#0) // on error: Index access is out of bounds
        let v3#0: bytes[16] = (concat tmp%0#6 tmp%1#4)
        let tmp%2#4: bool = (== v1#2 v2#0)
        (assert tmp%2#4)
        let tmp%3#2: bool = (== v3#0 v1#2)
        (assert tmp%3#2)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@7: // toAndFromBytes_route_L39
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let v1#1: bytes[16] = (txna ApplicationArgs 1)
        let value_len%6#0: uint64 = (len v1#1)
        let size_is_correct%6#0: bool = (== value_len%6#0 16u)
        (assert size_is_correct%6#0) // invalid number of bytes for Vector
        let tmp%35#0: bytes = (concat 0x151f7c75 v1#1)
        (log tmp%35#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@8: // toNative_route_L44
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let v1#0: bytes[16] = (txna ApplicationArgs 1)
        let value_len%7#0: uint64 = (len v1#0)
        let size_is_correct%7#0: bool = (== value_len%7#0 16u)
        (assert size_is_correct%7#0) // invalid number of bytes for Vector
        let item0%0#0: bytes = ((extract 0 8) v1#0) // on error: Index access is out of bounds
        let item1%0#0: bytes = ((extract 8 8) v1#0) // on error: Index access is out of bounds
        let encoded_tuple_buffer%2#0: bytes = (concat item0%0#0 item1%0#0)
        let tmp%41#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%41#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@9: // getPlugin_route_L52
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let tmp%46#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = (extract_uint16 tmp%46#0 0u) // on error: invalid array length header
        let num_bytes_with_header%0#0: uint64 = (+ length%0#0 2u)
        let value_len%8#0: uint64 = (len tmp%46#0)
        let size_is_correct%8#0: bool = (== value_len%8#0 num_bytes_with_header%0#0)
        (assert size_is_correct%8#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#2: bytes = ((extract 2 0) tmp%46#0)
        let tmp%0#5: bytes = (concat "plugins" key#2)
        let (value#1: bytes, maybe_exists%0#2: bool) = (box_get tmp%0#5)
        (assert maybe_exists%0#2) // Box must have value
        let tmp%2#3: uint64 = (extract_uint64 value#1 16u)
        (assert tmp%2#3) // Last called not zero
        let tmp%49#0: bytes = (concat 0x151f7c75 value#1)
        (log tmp%49#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@10: // getMain_route_L58
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let (value#0: bytes, maybe_exists%0#1: bool) = (box_get "main")
        (assert maybe_exists%0#1) // Box must have value
        let tmp%1#2: uint64 = (extract_uint64 value#0 16u)
        (assert tmp%1#2) // Last called not zero
        let tmp%55#0: bytes = (concat 0x151f7c75 value#0)
        (log tmp%55#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@11: // setLastCalled_route_L64
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        (assert tmp%58#0) // can only call when not creating
        let tmp%60#0: bytes = (txna ApplicationArgs 1)
        let length%1#0: uint64 = (extract_uint16 tmp%60#0 0u) // on error: invalid array length header
        let num_bytes_with_header%1#0: uint64 = (+ length%1#0 2u)
        let value_len%9#0: uint64 = (len tmp%60#0)
        let size_is_correct%9#0: bool = (== value_len%9#0 num_bytes_with_header%1#0)
        (assert size_is_correct%9#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#1: bytes = ((extract 2 0) tmp%60#0)
        let tmp%62#0: bytes = (txna ApplicationArgs 2)
        let value_len%10#0: uint64 = (len tmp%62#0)
        let size_is_correct%10#0: bool = (== value_len%10#0 8u)
        (assert size_is_correct%10#0) // invalid number of bytes for arc4.uint64
        let index#0: uint64 = (btoi tmp%62#0)
        let tmp%64#0: bytes = (txna ApplicationArgs 3)
        let value_len%11#0: uint64 = (len tmp%64#0)
        let size_is_correct%11#0: bool = (== value_len%11#0 8u)
        (assert size_is_correct%11#0) // invalid number of bytes for arc4.uint64
        let lastCalled#0: uint64 = (btoi tmp%64#0)
        let val_as_bytes%0#0: bytes[8] = (itob lastCalled#0)
        let tmp%0#3: bytes = (concat "plugins" key#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get tmp%0#3)
        (assert maybe_exists%0#0) // Box must have value
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 25u)
        let item_end_offset%0#0: uint64 = (len maybe_value%0#0)
        let tmp%1#1: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) tmp%1#1)
        let item_offset%0#0: uint64 = (* index#0 20u)
        let tmp%2#1: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 20u) // on error: Index access is out of bounds
        let updated_data%0#0: bytes = ((replace2 12) tmp%2#1 val_as_bytes%0#0)
        let array_length%0#0: uint64 = (extract_uint16 tmp%1#1 0u)
        let index_is_in_bounds%0#0: bool = (< index#0 array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#1: uint64 = (+ item_offset%0#0 2u)
        let updated_target%0#0: bytes = (replace3 tmp%1#1 write_offset%0#1 updated_data%0#0)
        let data_up_to_item%0#0: bytes = (extract3 maybe_value%0#0 0u item_start_offset%0#0)
        let updated_data%1#0: bytes = (concat data_up_to_item%0#0 updated_target%0#0)
        (box_del tmp%0#3)
        (box_put tmp%0#3 updated_data%1#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@12: // setPlugin_route_L68
        let tmp%66#0: uint64 = (txn OnCompletion)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // OnCompletion is not NoOp
        let tmp%68#0: uint64 = (txn ApplicationID)
        (assert tmp%68#0) // can only call when not creating
        let tmp%70#0: bytes = (txna ApplicationArgs 1)
        let length%2#0: uint64 = (extract_uint16 tmp%70#0 0u) // on error: invalid array length header
        let num_bytes_with_header%2#0: uint64 = (+ length%2#0 2u)
        let value_len%12#0: uint64 = (len tmp%70#0)
        let size_is_correct%12#0: bool = (== value_len%12#0 num_bytes_with_header%2#0)
        (assert size_is_correct%12#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#0: bytes = ((extract 2 0) tmp%70#0)
        let tmp%0#2: bytes = (concat "plugins" key#0)
        (box_del tmp%0#2)
        (box_put tmp%0#2 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@20
    block@15: // bare_routing_L10
        let tmp%72#0: uint64 = (txn OnCompletion)
        goto tmp%72#0 ? block@19 : block@16
    block@16: // __algots__.defaultCreate_L10
        let tmp%73#0: uint64 = (txn ApplicationID)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // can only call when creating
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@20
    block@19: // after_if_else_L10
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#11: bool = 0u
        goto block@20
    block@20: // after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#10 <- block@16, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#11 <- block@19)
        return tmp%0#0