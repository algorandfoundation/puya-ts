main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L10
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testVectorCreationAndEquality()void" => block@4, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@5, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@6, method "implicitCastingAndSpreading((uint64,uint64))void" => block@7, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@8, method "toNative((uint64,uint64))(uint64,uint64)" => block@9, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@10, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@11, method "setLastCalled(string,uint64,uint64)void" => block@12, method "setPlugin(string)void" => block@13, * => block@16}
    block@4: // testVectorCreationAndEquality_route_L11
        (log 0x0000000000000000)
        (log 0x0000000000000000)
        exit 1u
    block@5: // addVectors_route_L19
        let v1#6: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let v2#1: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let tmp%0#11: uint64 = (extract_uint64 v1#6 0u)
        let tmp%1#10: uint64 = (extract_uint64 v2#1 0u)
        let tmp%2#4: uint64 = (+ tmp%0#11 tmp%1#10)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#4)
        let tmp%4#1: uint64 = (extract_uint64 v1#6 8u)
        let tmp%5#1: uint64 = (extract_uint64 v2#1 8u)
        let tmp%6#1: uint64 = (+ tmp%4#1 tmp%5#1)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%6#1)
        let aggregate%head%3#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%1#9: bytes = (concat 0x151f7c75 aggregate%head%3#0)
        (log tmp%1#9)
        exit 1u
    block@6: // mutateVector_route_L26
        let v1#3: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let newX#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let newY#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let v1#4: Encoded(uint64,uint64) = ((replace2 0) v1#3 newX#0)
        let v1#5: Encoded(uint64,uint64) = ((replace2 8) v1#4 newY#0)
        let tmp%1#8: bytes = (concat 0x151f7c75 v1#5)
        (log tmp%1#8)
        exit 1u
    block@7: // implicitCastingAndSpreading_route_L32
        let v1#2: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%8#0: bytes = ((extract 0 8) v1#2)
        let aggregate%extract%9#0: bytes = ((extract 8 8) v1#2)
        let v2#0: Encoded(uint64,uint64) = (concat aggregate%extract%8#0 aggregate%extract%9#0)
        let aggregate%extract%10#0: bytes = ((extract 0 8) v2#0)
        let aggregate%extract%11#0: bytes = ((extract 8 8) v2#0)
        let v3#0: Encoded(uint64,uint64) = (concat aggregate%extract%10#0 aggregate%extract%11#0)
        let tmp%2#3: bool = (== v1#2 v2#0)
        (assert tmp%2#3)
        let tmp%3#2: bool = (== v3#0 v1#2)
        (assert tmp%3#2)
        exit 1u
    block@8: // toAndFromBytes_route_L39
        let v1#1: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%1#7: bytes = (concat 0x151f7c75 v1#1)
        (log tmp%1#7)
        exit 1u
    block@9: // toNative_route_L44
        let v1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%1#6: bytes = (concat 0x151f7c75 v1#0)
        (log tmp%1#6)
        exit 1u
    block@10: // getPlugin_route_L52
        let reinterpret_Encoded(len+utf8[])%0#2: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#2: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#2)
        let box_prefixed_key%0#2: bytes = (concat "plugins" key#2)
        let (value#1: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])), aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#2)
        (assert aggregate%box_get%1#0) // Box must have value
        let box%box_extract%0#1: Encoded(uint64) = (box_extract box_prefixed_key%0#2 16u 8u)
        let tmp%0#9: uint64 = (btoi box%box_extract%0#1)
        (assert tmp%0#9) // Last called not zero
        let tmp%2#2: bytes = (concat 0x151f7c75 value#1)
        (log tmp%2#2)
        exit 1u
    block@11: // getMain_route_L58
        let (value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])), aggregate%box_get%3#0: bool) = (box_get "main")
        (assert aggregate%box_get%3#0) // Box must have value
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "main" 16u 8u)
        let tmp%0#7: uint64 = (btoi box%box_extract%0#0)
        (assert tmp%0#7) // Last called not zero
        let tmp%1#2: bytes = (concat 0x151f7c75 value#0)
        (log tmp%1#2)
        exit 1u
    block@12: // setLastCalled_route_L64
        let reinterpret_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let box_prefixed_key%0#1: bytes = (concat "plugins" key#1)
        let box%element_offset%0#0: uint64 = (* index#0 20u)
        let box%offset%2#0: uint64 = (+ box%element_offset%0#0 41u)
        (box_replace box_prefixed_key%0#1 box%offset%2#0 reinterpret_Encoded(uint64)%1#0)
        exit 1u
    block@13: // setPlugin_route_L68
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001)
        exit 1u
    block@16: // after_if_else_L10
        fail
    block@17: // __algots__.defaultCreate_L10
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u