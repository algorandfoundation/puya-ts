main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@7, method "toNative((uint64,uint64))(uint64,uint64)" => block@8, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@9, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@10, method "setLastCalled(string,uint64,uint64)void" => block@11, method "setPlugin(string)void" => block@12, * => block@19}
    block@3: // testVectorCreationAndEquality_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x0000000000000000)
        (log 0x0000000000000000)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@4: // addVectors_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let v1#6: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let v2#1: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let tmp%0#6: uint64 = (extract_uint64 v1#6 0u)
        let tmp%1#4: uint64 = (extract_uint64 v2#1 0u)
        let tmp%2#3: uint64 = (+ tmp%0#6 tmp%1#4)
        let array%val_as_bytes%0#1: bytes[8] = (itob tmp%2#3)
        let tmp%4#1: uint64 = (extract_uint64 v1#6 8u)
        let tmp%5#1: uint64 = (extract_uint64 v2#1 8u)
        let tmp%6#1: uint64 = (+ tmp%4#1 tmp%5#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob tmp%6#1)
        let array%encoded%7#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%0#1 array%val_as_bytes%1#1)
        let tmp%12#0: bytes = (concat 0x151f7c75 array%encoded%7#1)
        (log tmp%12#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@5: // mutateVector_route_L26
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let v1#3: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let newX#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let newY#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let v1#4: Encoded(uint64,uint64) = ((replace2 0) v1#3 newX#0)
        let v1#5: Encoded(uint64,uint64) = ((replace2 8) v1#4 newY#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 v1#5)
        (log tmp%18#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@6: // implicitCastingAndSpreading_route_L32
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let v1#2: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%extract%8#1: bytes = ((extract 0 8) v1#2)
        let array%extract%9#1: bytes = ((extract 8 8) v1#2)
        let v2#0: Encoded(uint64,uint64) = (concat array%extract%8#1 array%extract%9#1)
        let array%extract%10#1: bytes = ((extract 0 8) v2#0)
        let array%extract%11#1: bytes = ((extract 8 8) v2#0)
        let v3#0: Encoded(uint64,uint64) = (concat array%extract%10#1 array%extract%11#1)
        let tmp%2#2: bool = (== v1#2 v2#0)
        (assert tmp%2#2)
        let tmp%3#2: bool = (== v3#0 v1#2)
        (assert tmp%3#2)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@7: // toAndFromBytes_route_L39
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let v1#1: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%28#0: bytes = (concat 0x151f7c75 v1#1)
        (log tmp%28#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@8: // toNative_route_L44
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let v1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%extract%12#1: bytes = ((extract 0 8) v1#0)
        let array%extract%13#1: bytes = ((extract 8 8) v1#0)
        let array%encoded%16#1: Encoded(uint64,uint64) = (concat array%extract%12#1 array%extract%13#1)
        let tmp%36#0: bytes = (concat 0x151f7c75 array%encoded%16#1)
        (log tmp%36#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@9: // getPlugin_route_L52
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#2: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let box_prefixed_key%0#2: bytes = (concat "plugins" key#2)
        let (value#1: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])), maybe_exists%0#2: bool) = (box_get box_prefixed_key%0#2)
        (assert maybe_exists%0#2) // Box must have value
        let tmp%0#5: uint64 = (extract_uint64 value#1 16u)
        (assert tmp%0#5) // Last called not zero
        let tmp%43#0: bytes = (concat 0x151f7c75 value#1)
        (log tmp%43#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@10: // getMain_route_L58
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let (value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])), maybe_exists%0#1: bool) = (box_get "main")
        (assert maybe_exists%0#1) // Box must have value
        let tmp%0#4: uint64 = (extract_uint64 value#0 16u)
        (assert tmp%0#4) // Last called not zero
        let tmp%49#0: bytes = (concat 0x151f7c75 value#0)
        (log tmp%49#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@11: // setLastCalled_route_L64
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let lastCalled#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let array%val_as_bytes%2#1: bytes[8] = (itob lastCalled#0)
        let box_prefixed_key%0#1: bytes = (concat "plugins" key#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#1)
        (assert maybe_exists%0#0) // Box must have value
        let array%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%0#0 25u)
        let array%len%0#1: uint64 = (len maybe_value%0#0)
        let array%substring3%0#1: bytes = (substring3 maybe_value%0#0 array%extract_uint16%0#1 array%len%0#1)
        let array%array_trimmed%0#1: bytes = ((extract 2 0) array%substring3%0#1)
        let array%bytes_offset%0#1: uint64 = (* index#0 20u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 20u) // on error: index access is out of bounds
        let array%updated_data%2#1: bytes = ((replace2 12) array%encoded_element%0#1 array%val_as_bytes%2#1)
        let array%write_offset_with_length_header%0#1: uint64 = (+ array%bytes_offset%0#1 2u)
        let array%updated_array%0#1: bytes = (replace3 array%substring3%0#1 array%write_offset_with_length_header%0#1 array%updated_data%2#1)
        let array%data_up_to_item%0#1: bytes = (extract3 maybe_value%0#0 0u array%extract_uint16%0#1)
        let array%updated_data%3#1: bytes = (concat array%data_up_to_item%0#1 array%updated_array%0#1)
        (box_del box_prefixed_key%0#1)
        (box_put box_prefixed_key%0#1 array%updated_data%3#1)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@12: // setPlugin_route_L68
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@20
    block@15: // bare_routing_L10
        let tmp%62#0: uint64 = (txn OnCompletion)
        goto tmp%62#0 ? block@19 : block@16
    block@16: // __algots__.defaultCreate_L10
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // can only call when creating
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@20
    block@19: // after_if_else_L10
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#11: bool = 0u
        goto block@20
    block@20: // after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#10 <- block@16, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#11 <- block@19)
        return tmp%0#0