main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "implicitCastingAndSpreading((uint64,uint64))void" => block@5, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@6, method "toNative((uint64,uint64))(uint64,uint64)" => block@7, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@8, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@9, method "setPlugin(string)void" => block@10, * => block@17}
    block@3: // testVectorCreationAndEquality_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x0000000000000000)
        (log 0x0000000000000000)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // addVectors_route_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let v1#3: bytes[16] = (txna ApplicationArgs 1)
        let v2#1: bytes[16] = (txna ApplicationArgs 2)
        let tmp%1#4: uint64 = (extract_uint64 v1#3 0u)
        let tmp%3#4: uint64 = (extract_uint64 v2#1 0u)
        let to_encode%0#0: uint64 = (+ tmp%1#4 tmp%3#4)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%5#3: uint64 = (extract_uint64 v1#3 8u)
        let tmp%7#2: uint64 = (extract_uint64 v2#1 8u)
        let to_encode%1#0: uint64 = (+ tmp%5#3 tmp%7#2)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%1#0)
        let encoded_tuple_buffer%2#2: bytes = (concat val_as_bytes%0#0 val_as_bytes%3#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#2)
        (log tmp%12#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // implicitCastingAndSpreading_route_L25
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let v1#2: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#1: bytes = ((extract 0 8) v1#2) // on error: Index access is out of bounds
        let item1%1#1: bytes = ((extract 8 8) v1#2) // on error: Index access is out of bounds
        let v2#0: bytes[16] = (concat item0%0#1 item1%1#1)
        let tmp%0#5: bytes = ((extract 0 8) v2#0) // on error: Index access is out of bounds
        let tmp%3#3: bytes = ((extract 8 8) v2#0) // on error: Index access is out of bounds
        let v3#0: bytes[16] = (concat tmp%0#5 tmp%3#3)
        let tmp%4#2: bool = (== v1#2 v2#0)
        (assert tmp%4#2)
        let tmp%5#2: bool = (== v3#0 v1#2)
        (assert tmp%5#2)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // toAndFromBytes_route_L32
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let v1#1: bytes[16] = (txna ApplicationArgs 1)
        let tmp%22#0: bytes = (concat 0x151f7c75 v1#1)
        (log tmp%22#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // toNative_route_L37
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let v1#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = ((extract 0 8) v1#0) // on error: Index access is out of bounds
        let item1%1#0: bytes = ((extract 8 8) v1#0) // on error: Index access is out of bounds
        let encoded_tuple_buffer%2#0: bytes = (concat item0%0#0 item1%1#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%27#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // getPlugin_route_L45
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let tmp%32#0: bytes = (txna ApplicationArgs 1)
        let key#1: bytes = ((extract 2 0) tmp%32#0)
        let tmp%0#4: bytes = (concat "plugins" key#1)
        let (value#1: bytes, maybe_exists%0#1: bool) = (box_get tmp%0#4)
        (assert maybe_exists%0#1) // Box must have value
        let tmp%2#3: uint64 = (extract_uint64 value#1 16u)
        (assert tmp%2#3) // Last called not zero
        let tmp%35#0: bytes = (concat 0x151f7c75 value#1)
        (log tmp%35#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // getMain_route_L51
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let (value#0: bytes, maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let tmp%1#2: uint64 = (extract_uint64 value#0 16u)
        (assert tmp%1#2) // Last called not zero
        let tmp%41#0: bytes = (concat 0x151f7c75 value#0)
        (log tmp%41#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // setPlugin_route_L57
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let tmp%46#0: bytes = (txna ApplicationArgs 1)
        let key#0: bytes = ((extract 2 0) tmp%46#0)
        let tmp%30#1: bytes = (concat "plugins" key#0)
        (box_del tmp%30#1)
        (box_put tmp%30#1 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L9
        let tmp%48#0: uint64 = (txn OnCompletion)
        goto tmp%48#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L9
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // can only call when creating
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L9
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0