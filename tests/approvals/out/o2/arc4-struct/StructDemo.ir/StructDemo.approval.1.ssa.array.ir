main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "implicitCastingAndSpreading((uint64,uint64))void" => block@5, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@6, * => block@13}
    block@3: // testVectorCreationAndEquality_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x0000000000000000)
        (log 0x0000000000000000)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // addVectors_route_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let v1#2: bytes[16] = (txna ApplicationArgs 1)
        let v2#1: bytes[16] = (txna ApplicationArgs 2)
        let tmp%1#1: uint64 = (extract_uint64 v1#2 0u)
        let tmp%3#2: uint64 = (extract_uint64 v2#1 0u)
        let to_encode%0#0: uint64 = (+ tmp%1#1 tmp%3#2)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%5#2: uint64 = (extract_uint64 v1#2 8u)
        let tmp%7#1: uint64 = (extract_uint64 v2#1 8u)
        let to_encode%1#0: uint64 = (+ tmp%5#2 tmp%7#1)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%3#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%12#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // implicitCastingAndSpreading_route_L25
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let v1#1: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = ((extract 0 8) v1#1) // on error: Index access is out of bounds
        let item1%1#0: bytes = ((extract 8 8) v1#1) // on error: Index access is out of bounds
        let v2#0: bytes[16] = (concat item0%0#0 item1%1#0)
        let tmp%0#2: bytes = ((extract 0 8) v2#0) // on error: Index access is out of bounds
        let tmp%3#1: bytes = ((extract 8 8) v2#0) // on error: Index access is out of bounds
        let v3#0: bytes[16] = (concat tmp%0#2 tmp%3#1)
        let tmp%4#1: bool = (== v1#1 v2#0)
        (assert tmp%4#1)
        let tmp%5#1: bool = (== v3#0 v1#1)
        (assert tmp%5#1)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // toAndFromBytes_route_L32
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let v1#0: bytes[16] = (txna ApplicationArgs 1)
        let tmp%22#0: bytes = (concat 0x151f7c75 v1#0)
        (log tmp%22#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L9
        let tmp%23#0: uint64 = (txn OnCompletion)
        goto tmp%23#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L9
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // can only call when creating
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L9
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0