#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    bytecblock 0x151f7c75 0x0000000000000000
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x89388ddd 0xef322d6d 0xcb81deb8 0xf79d6c46 // method "testVectorCreationAndEquality()void", method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)", method "implicitCastingAndSpreading((uint64,uint64))void", method "toAndFromBytes((uint64,uint64))(uint64,uint64)"
    txna ApplicationArgs 0
    match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_implicitCastingAndSpreading_route@5 main_toAndFromBytes_route@6

main_after_if_else@13:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    pushint 0 // 0
    return

main_toAndFromBytes_route@6:
    // tests/approvals/arc4-struct.algo.ts:32
    // public toAndFromBytes(v1: Vector): Vector {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/arc4-struct.algo.ts:32
    // public toAndFromBytes(v1: Vector): Vector {
    concat
    log
    intc_0 // 1
    return

main_implicitCastingAndSpreading_route@5:
    // tests/approvals/arc4-struct.algo.ts:25
    // public implicitCastingAndSpreading(v1: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/arc4-struct.algo.ts:26
    // const v2 = new Vector(v1)
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    concat
    // tests/approvals/arc4-struct.algo.ts:27
    // const v3 = new Vector({ ...v2 })
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    concat
    // tests/approvals/arc4-struct.algo.ts:28
    // assert(v1.bytes === v2.bytes)
    dig 2
    uncover 2
    ==
    assert
    // tests/approvals/arc4-struct.algo.ts:29
    // assert(v3.bytes === v1.bytes)
    ==
    assert
    // tests/approvals/arc4-struct.algo.ts:25
    // public implicitCastingAndSpreading(v1: Vector) {
    intc_0 // 1
    return

main_addVectors_route@4:
    // tests/approvals/arc4-struct.algo.ts:18
    // public addVectors(v1: Vector, v2: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/arc4-struct.algo.ts:20
    // x: new ARC4Uint64(v1.x.native + v2.x.native),
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    btoi
    +
    itob
    // tests/approvals/arc4-struct.algo.ts:21
    // y: new ARC4Uint64(v1.y.native + v2.y.native),
    uncover 2
    extract 8 8 // on error: Index access is out of bounds
    btoi
    uncover 2
    extract 8 8 // on error: Index access is out of bounds
    btoi
    +
    itob
    // tests/approvals/arc4-struct.algo.ts:19-22
    // return new Vector({
    //   x: new ARC4Uint64(v1.x.native + v2.x.native),
    //   y: new ARC4Uint64(v1.y.native + v2.y.native),
    // })
    concat
    // tests/approvals/arc4-struct.algo.ts:18
    // public addVectors(v1: Vector, v2: Vector) {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_testVectorCreationAndEquality_route@3:
    // tests/approvals/arc4-struct.algo.ts:10
    // public testVectorCreationAndEquality() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:12
    // log(v1.x)
    bytec_1 // 0x0000000000000000
    log
    // tests/approvals/arc4-struct.algo.ts:13
    // log(v1.y)
    bytec_1 // 0x0000000000000000
    log
    // tests/approvals/arc4-struct.algo.ts:10
    // public testVectorCreationAndEquality() {
    intc_0 // 1
    return

main_bare_routing@9:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
