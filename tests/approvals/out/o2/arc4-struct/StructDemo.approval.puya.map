{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc4-struct.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAQA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAuBE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAvBF;;;AAuBE;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAhBF;;;AAiB0B;AAAA;;;AAAA;;AAAA;;;AAAX;AACW;AAAA;;;AAAA;;AAAA;;;AAAX;AACJ;;AAAA;;AAAA;AAAP;AACO;AAAP;AAJF;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AATF;;;AAAA;;;AAW6B;;AAAF;AAAE;AAAc;;AAAF;AAAE;AAAnB;AAAf;AACoB;;AAAF;AAAE;AAAc;;AAAF;AAAE;AAAnB;AAAf;AAFE;AADT;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAES;AAAP;AACO;AAAP;AAHF;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000"
    },
    "22": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "24": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "27": {
      "op": "pushbytess 0x89388ddd 0xef322d6d 0xcb81deb8 0xf79d6c46 // method \"testVectorCreationAndEquality()void\", method \"addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)\", method \"implicitCastingAndSpreading((uint64,uint64))void\", method \"toAndFromBytes((uint64,uint64))(uint64,uint64)\""
    },
    "49": {
      "op": "txna ApplicationArgs 0"
    },
    "52": {
      "op": "match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_implicitCastingAndSpreading_route@5 main_toAndFromBytes_route@6"
    },
    "62": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "return"
    },
    "64": {
      "block": "main_toAndFromBytes_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "71": {
      "op": "bytec_0 // 0x151f7c75"
    },
    "72": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "v1#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "v1#0"
      ]
    },
    "75": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "76": {
      "op": "log",
      "stack_out": []
    },
    "77": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "78": {
      "op": "return"
    },
    "79": {
      "block": "main_implicitCastingAndSpreading_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "81": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "op": "txna ApplicationArgs 1"
    },
    "89": {
      "op": "dup",
      "defined_out": [
        "v1#0",
        "v1#0 (copy)"
      ],
      "stack_out": [
        "v1#0",
        "v1#0 (copy)"
      ]
    },
    "90": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "v1#0"
      ],
      "stack_out": [
        "v1#0",
        "item0%0#0"
      ]
    },
    "93": {
      "op": "dig 1",
      "stack_out": [
        "v1#0",
        "item0%0#0",
        "v1#0 (copy)"
      ]
    },
    "95": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "v1#0"
      ],
      "stack_out": [
        "v1#0",
        "item0%0#0",
        "item1%1#0"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "v1#0",
        "v2#0",
        "v2#0 (copy)"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "v2#0 (copy)"
      ]
    },
    "100": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#2",
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%0#2"
      ]
    },
    "103": {
      "op": "dig 1",
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%0#2",
        "v2#0 (copy)"
      ]
    },
    "105": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#2",
        "tmp%3#1",
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%0#2",
        "tmp%3#1"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "v1#0",
        "v2#0",
        "v3#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "v3#0"
      ]
    },
    "109": {
      "op": "dig 2",
      "stack_out": [
        "v1#0",
        "v2#0",
        "v3#0",
        "v1#0 (copy)"
      ]
    },
    "111": {
      "op": "uncover 2",
      "stack_out": [
        "v1#0",
        "v3#0",
        "v1#0 (copy)",
        "v2#0"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "v1#0",
        "v3#0"
      ],
      "stack_out": [
        "v1#0",
        "v3#0",
        "tmp%4#0"
      ]
    },
    "114": {
      "op": "assert",
      "stack_out": [
        "v1#0",
        "v3#0"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "116": {
      "op": "assert",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "return"
    },
    "119": {
      "block": "main_addVectors_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "122": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "125": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "126": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "v1#0"
      ],
      "stack_out": [
        "v1#0"
      ]
    },
    "129": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0"
      ]
    },
    "132": {
      "op": "dig 1",
      "defined_out": [
        "v1#0",
        "v1#0 (copy)",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "v1#0 (copy)"
      ]
    },
    "134": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "v1#0",
        "v1#0 (copy)",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "v1#0 (copy)",
        "0"
      ]
    },
    "135": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%1#1",
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%1#1"
      ]
    },
    "136": {
      "op": "dig 1",
      "defined_out": [
        "tmp%1#1",
        "v1#0",
        "v2#0",
        "v2#0 (copy)"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%1#1",
        "v2#0 (copy)"
      ]
    },
    "138": {
      "op": "intc_1 // 0",
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%1#1",
        "v2#0 (copy)",
        "0"
      ]
    },
    "139": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%1#1",
        "tmp%3#0",
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "tmp%1#1",
        "tmp%3#0"
      ]
    },
    "140": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0",
        "v1#0",
        "v2#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "to_encode%0#0"
      ]
    },
    "141": {
      "op": "itob",
      "defined_out": [
        "v1#0",
        "v2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "v1#0",
        "v2#0",
        "val_as_bytes%0#0"
      ]
    },
    "142": {
      "op": "uncover 2",
      "stack_out": [
        "v2#0",
        "val_as_bytes%0#0",
        "v1#0"
      ]
    },
    "144": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "v1#0",
        "v2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "v2#0",
        "val_as_bytes%0#0",
        "v1#0",
        "8"
      ]
    },
    "145": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%5#0",
        "v2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "v2#0",
        "val_as_bytes%0#0",
        "tmp%5#0"
      ]
    },
    "146": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%5#0",
        "v2#0"
      ]
    },
    "148": {
      "op": "intc_2 // 8",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%5#0",
        "v2#0",
        "8"
      ]
    },
    "149": {
      "op": "extract_uint64",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "150": {
      "op": "+",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%1#0"
      ]
    },
    "151": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "153": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "156": {
      "op": "log",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "return"
    },
    "159": {
      "block": "main_testVectorCreationAndEquality_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "162": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "163": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "165": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "166": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "169": {
      "op": "log",
      "stack_out": []
    },
    "170": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return"
    },
    "172": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "174": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID"
    },
    "179": {
      "op": "!"
    },
    "180": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "181": {
      "op": "intc_0 // 1"
    },
    "182": {
      "op": "return"
    }
  }
}