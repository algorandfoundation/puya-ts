main tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.approvalProgram:
    block@0: // L7
        let array%length%0#1: uint64 = (len "123")
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 "123")
        let array%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = array%encoded_value%0#1
        let array%tail%0#1: bytes = (concat 0x array%as_Encoded(len+uint8[])%0#1)
        let array%data_length%0#1: uint64 = (len array%as_Encoded(len+uint8[])%0#1)
        let array%current_tail_offset%0#1: uint64 = (+ 11u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 11u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%0#1: Encoded((len+uint8[])) = (concat 0x array%offset_as_uint16%0#1)
        let array%val_as_bytes%0#1: bytes[8] = (itob 123u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%1#1: Encoded((len+uint8[]),uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%0#1)
        let array%encoded_bit%0#1: bytes = (setbit 0x00 0u 0u)
        let array%encoded%2#1: Encoded((len+uint8[]),uint64,bool1) = (concat array%encoded%1#1 array%encoded_bit%0#1)
        let array%encoded%3#1: Encoded((len+uint8[]),uint64,bool1) = (concat array%encoded%2#1 array%tail%0#1)
        let tmp%0#1: Encoded((len+uint8[]),uint64,bool1) = array%encoded%3#1
        let array%extract_uint16%0#1: uint64 = (extract_uint16 tmp%0#1 0u)
        let array%len%0#1: uint64 = (len tmp%0#1)
        let array%substring3%0#1: bytes = (substring3 tmp%0#1 array%extract_uint16%0#1 array%len%0#1)
        let tuple_item%0#0: Encoded(len+uint8[]) = array%substring3%0#1
        let b#0: bytes = ((extract 2 0) tuple_item%0#0)
        let array%extract%0#1: bytes = (extract3 tmp%0#1 2u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%0#1
        let u#0: uint64 = (btoi tuple_item%1#0)
        let array%get_bit%0#1: uint64 = (getbit tmp%0#1 80u)
        let tuple_item%2#0: bool = array%get_bit%0#1
        let f#0: bool = (getbit tuple_item%2#0 0u)
        let tmp%0#0: bool = (== "123" b#0)
        (assert tmp%0#0) // a should be module const (bytes)
        let tmp%1#0: bool = (== u#0 123u)
        (assert tmp%1#0) // a should be local const (uint)
        let a₁#1: bool = (! f#0)
        (assert a₁#1) // a should be local let (bool)
        return 1u