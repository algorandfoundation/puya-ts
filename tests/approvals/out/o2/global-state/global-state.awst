contract TestContract
{
  globals {
    ["noInitial"]: bytes
    ["noInitialInt"]: uint64
    ["testState"]: uint64
    ["TESTSTATE"]: uint64
    ["baseTestState"]: string
  }
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    assert(STATE_EXISTS(GlobalState["testState"]), comment=State should have value)
    assert(GlobalState["testState"] == 2, comment=Value should equal 2)
    GlobalState["testState"]: uint64 = btoi(txnas<ApplicationArgs>(0))
    return True
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  constructor(): void
  {
    someValue: uint64 = 72057594037927936
    super.constructor()
    GlobalState["testState"]: uint64 = 2
    GlobalState["TESTSTATE"]: uint64 = 5
    assert(GlobalState["baseTestState"] == "testing 123", comment=Base class state should be initialized after super call)
    GlobalState["noInitialInt"]: uint64 = someValue * GlobalState["testState"]
  }
  
  BaseTestContract::constructor(): void
  {
    void
    GlobalState["baseTestState"]: string = "testing 123"
  }
  
}