main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L60
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testTuple()void" => block@3, * => block@10}
    block@3: // testTuple_route_L69
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%length%0#1: uint64 = (len "hello")
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 "hello")
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let array%tail%0#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%0#1)
        let array%data_length%0#1: uint64 = (len array%as_Encoded(len+utf8[])%0#1)
        let array%current_tail_offset%0#1: uint64 = (+ 11u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 11u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%0#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%0#1)
        let array%val_as_bytes%0#1: bytes[8] = (itob 123u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%1#1: Encoded((len+utf8[]),uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%0#1)
        let array%encoded_bit%0#1: bytes = (setbit 0x00 0u 1u)
        let array%encoded%2#1: Encoded((len+utf8[]),uint64,bool1) = (concat array%encoded%1#1 array%encoded_bit%0#1)
        let array%encoded%3#1: Encoded((len+utf8[]),uint64,bool1) = (concat array%encoded%2#1 array%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+utf8[]),uint64,bool1) = array%encoded%3#1
        (app_global_put "t1" encoded_for_storage%0#0)
        let array%extract_uint16%0#1: uint64 = (extract_uint16 encoded_for_storage%0#0 0u)
        let array%len%0#1: uint64 = (len encoded_for_storage%0#0)
        let array%substring3%0#1: bytes = (substring3 encoded_for_storage%0#0 array%extract_uint16%0#1 array%len%0#1)
        let array%item0%0#1: bytes = ((extract 2 0) array%substring3%0#1)
        let array%extract%0#1: bytes = (extract3 encoded_for_storage%0#0 2u 8u)
        let array%item1%0#1: uint64 = (btoi array%extract%0#1)
        let array%get_bit%0#1: uint64 = (getbit encoded_for_storage%0#0 80u)
        let array%item2%0#1: bool = (getbit array%get_bit%0#1 0u)
        let (tmp%0#2: string, tmp%1#1: uint64, tmp%2#1: bool) = (array%item0%0#1, array%item1%0#1, array%item2%0#1)
        let tmp%3#1: bool = (== tmp%0#2 "hello")
        (assert tmp%3#1) // Tuple value should be set
        let array%extract_uint16%1#1: uint64 = (extract_uint16 encoded_for_storage%0#0 0u)
        let array%len%1#1: uint64 = (len encoded_for_storage%0#0)
        let array%substring3%1#1: bytes = (substring3 encoded_for_storage%0#0 array%extract_uint16%1#1 array%len%1#1)
        let array%item0%1#1: bytes = ((extract 2 0) array%substring3%1#1)
        let array%extract%1#1: bytes = (extract3 encoded_for_storage%0#0 2u 8u)
        let array%item1%1#1: uint64 = (btoi array%extract%1#1)
        let array%get_bit%1#1: uint64 = (getbit encoded_for_storage%0#0 80u)
        let array%item2%1#1: bool = (getbit array%get_bit%1#1 0u)
        let (tmp%4#1: string, tmp%5#1: uint64, tmp%6#1: bool) = (array%item0%1#1, array%item1%1#1, array%item2%1#1)
        let tmp%7#1: bool = (== tmp%5#1 123u)
        (assert tmp%7#1) // Tuple value should be set
        let array%extract_uint16%2#1: uint64 = (extract_uint16 encoded_for_storage%0#0 0u)
        let array%len%2#1: uint64 = (len encoded_for_storage%0#0)
        let array%substring3%2#1: bytes = (substring3 encoded_for_storage%0#0 array%extract_uint16%2#1 array%len%2#1)
        let array%item0%2#1: bytes = ((extract 2 0) array%substring3%2#1)
        let array%extract%2#1: bytes = (extract3 encoded_for_storage%0#0 2u 8u)
        let array%item1%2#1: uint64 = (btoi array%extract%2#1)
        let array%get_bit%2#1: uint64 = (getbit encoded_for_storage%0#0 80u)
        let array%item2%2#1: bool = (getbit array%get_bit%2#1 0u)
        let (tmp%8#1: string, tmp%9#1: uint64, tmp%10#0: bool) = (array%item0%2#1, array%item1%2#1, array%item2%2#1)
        let tmp%11#0: bool = (== tmp%10#0 1u)
        (assert tmp%11#0) // Tuple value should be set
        let array%length%1#1: uint64 = (len "a")
        let array%as_bytes%2#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 "a")
        let array%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = array%encoded_value%1#1
        let array%tail%1#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%1#1)
        let array%data_length%1#1: uint64 = (len array%as_Encoded(len+utf8[])%1#1)
        let array%current_tail_offset%1#1: uint64 = (+ 4u array%data_length%1#1)
        let array%as_bytes%3#1: bytes[8] = (itob 4u)
        let array%offset_as_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%3#1)
        let array%encoded%4#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%1#1)
        let array%length%2#1: uint64 = (len "b")
        let array%as_bytes%4#1: bytes[8] = (itob array%length%2#1)
        let array%length_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%4#1)
        let array%encoded_value%2#1: bytes = (concat array%length_uint16%2#1 "b")
        let array%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = array%encoded_value%2#1
        let array%tail%2#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%2#1)
        let array%data_length%2#1: uint64 = (len array%as_Encoded(len+utf8[])%2#1)
        let array%current_tail_offset%2#1: uint64 = (+ 67u array%data_length%2#1)
        let array%as_bytes%5#1: bytes[8] = (itob 67u)
        let array%offset_as_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%5#1)
        let array%encoded%5#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%2#1)
        let array%value_len%0#1: uint64 = (len 456b)
        let array%len_ok%0#1: bool = (<= array%value_len%0#1 64u)
        (assert array%len_ok%0#1) // overflow
        let array%bzero%0#1: bytes = (bzero 64u)
        let array%arc4_encoded%0#1: bytes[64] = (b| 456b array%bzero%0#1)
        let array%as_Encoded(uint512)%0#1: Encoded(uint512) = array%arc4_encoded%0#1
        let array%encoded%6#1: Encoded((len+utf8[]),uint512) = (concat array%encoded%5#1 array%as_Encoded(uint512)%0#1)
        let array%encoded_bit%1#1: bytes = (setbit 0x00 0u 1u)
        let array%encoded%7#1: Encoded((len+utf8[]),uint512,bool1) = (concat array%encoded%6#1 array%encoded_bit%1#1)
        let array%encoded%8#1: Encoded((len+utf8[]),uint512,bool1) = (concat array%encoded%7#1 array%tail%2#1)
        let array%tail%3#1: bytes = (concat array%tail%1#1 array%encoded%8#1)
        let array%data_length%3#1: uint64 = (len array%encoded%8#1)
        let array%current_tail_offset%3#1: uint64 = (+ array%current_tail_offset%1#1 array%data_length%3#1)
        let array%as_bytes%6#1: bytes[8] = (itob array%current_tail_offset%1#1)
        let array%offset_as_uint16%3#1: bytes = ((extract 6 2) array%as_bytes%6#1)
        let array%encoded%9#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat array%encoded%4#1 array%offset_as_uint16%3#1)
        let array%encoded%10#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat array%encoded%9#1 array%tail%3#1)
        let encoded_for_storage%1#0: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = array%encoded%10#1
        (app_global_put "t2" encoded_for_storage%1#0)
        let array%extract_uint16%3#1: uint64 = (extract_uint16 encoded_for_storage%1#0 0u)
        let array%extract_uint16%4#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%substring3%3#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%3#1 array%extract_uint16%4#1)
        let array%item0%3#1: bytes = ((extract 2 0) array%substring3%3#1)
        let array%extract_uint16%5#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%len%3#1: uint64 = (len encoded_for_storage%1#0)
        let array%substring3%4#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%5#1 array%len%3#1)
        let array%extract_uint16%6#1: uint64 = (extract_uint16 array%substring3%4#1 0u)
        let array%len%4#1: uint64 = (len array%substring3%4#1)
        let array%substring3%5#1: bytes = (substring3 array%substring3%4#1 array%extract_uint16%6#1 array%len%4#1)
        let array%item0%4#1: bytes = ((extract 2 0) array%substring3%5#1)
        let array%extract%3#1: bytes = (extract3 array%substring3%4#1 2u 64u)
        let array%get_bit%3#1: uint64 = (getbit array%substring3%4#1 528u)
        let array%item2%3#1: bool = (getbit array%get_bit%3#1 0u)
        let (tmp%12#0: string, tmp%13#0: string, tmp%14#0: biguint, tmp%15#0: bool) = (array%item0%3#1, array%item0%4#1, array%extract%3#1, array%item2%3#1)
        let tmp%16#0: bool = (== tmp%12#0 "a")
        (assert tmp%16#0) // Tuple value should be set
        let array%extract_uint16%7#1: uint64 = (extract_uint16 encoded_for_storage%1#0 0u)
        let array%extract_uint16%8#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%substring3%6#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%7#1 array%extract_uint16%8#1)
        let array%item0%5#1: bytes = ((extract 2 0) array%substring3%6#1)
        let array%extract_uint16%9#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%len%5#1: uint64 = (len encoded_for_storage%1#0)
        let array%substring3%7#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%9#1 array%len%5#1)
        let array%extract_uint16%10#1: uint64 = (extract_uint16 array%substring3%7#1 0u)
        let array%len%6#1: uint64 = (len array%substring3%7#1)
        let array%substring3%8#1: bytes = (substring3 array%substring3%7#1 array%extract_uint16%10#1 array%len%6#1)
        let array%item0%6#1: bytes = ((extract 2 0) array%substring3%8#1)
        let array%extract%4#1: bytes = (extract3 array%substring3%7#1 2u 64u)
        let array%get_bit%4#1: uint64 = (getbit array%substring3%7#1 528u)
        let array%item2%4#1: bool = (getbit array%get_bit%4#1 0u)
        let (tmp%17#0: string, tmp%18#0: string, tmp%19#0: biguint, tmp%20#0: bool) = (array%item0%5#1, array%item0%6#1, array%extract%4#1, array%item2%4#1)
        let tmp%21#0: bool = (== tmp%18#0 "b")
        (assert tmp%21#0) // Tuple value should be set
        let array%extract_uint16%11#1: uint64 = (extract_uint16 encoded_for_storage%1#0 0u)
        let array%extract_uint16%12#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%substring3%9#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%11#1 array%extract_uint16%12#1)
        let array%item0%7#1: bytes = ((extract 2 0) array%substring3%9#1)
        let array%extract_uint16%13#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%len%7#1: uint64 = (len encoded_for_storage%1#0)
        let array%substring3%10#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%13#1 array%len%7#1)
        let array%extract_uint16%14#1: uint64 = (extract_uint16 array%substring3%10#1 0u)
        let array%len%8#1: uint64 = (len array%substring3%10#1)
        let array%substring3%11#1: bytes = (substring3 array%substring3%10#1 array%extract_uint16%14#1 array%len%8#1)
        let array%item0%8#1: bytes = ((extract 2 0) array%substring3%11#1)
        let array%extract%5#1: bytes = (extract3 array%substring3%10#1 2u 64u)
        let array%get_bit%5#1: uint64 = (getbit array%substring3%10#1 528u)
        let array%item2%5#1: bool = (getbit array%get_bit%5#1 0u)
        let (tmp%22#0: string, tmp%23#0: string, tmp%24#0: biguint, tmp%25#0: bool) = (array%item0%7#1, array%item0%8#1, array%extract%5#1, array%item2%5#1)
        let tmp%26#0: bool = (b== tmp%24#0 456b)
        (assert tmp%26#0) // Tuple value should be set
        let array%extract_uint16%15#1: uint64 = (extract_uint16 encoded_for_storage%1#0 0u)
        let array%extract_uint16%16#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%substring3%12#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%15#1 array%extract_uint16%16#1)
        let array%item0%9#1: bytes = ((extract 2 0) array%substring3%12#1)
        let array%extract_uint16%17#1: uint64 = (extract_uint16 encoded_for_storage%1#0 2u)
        let array%len%9#1: uint64 = (len encoded_for_storage%1#0)
        let array%substring3%13#1: bytes = (substring3 encoded_for_storage%1#0 array%extract_uint16%17#1 array%len%9#1)
        let array%extract_uint16%18#1: uint64 = (extract_uint16 array%substring3%13#1 0u)
        let array%len%10#1: uint64 = (len array%substring3%13#1)
        let array%substring3%14#1: bytes = (substring3 array%substring3%13#1 array%extract_uint16%18#1 array%len%10#1)
        let array%item0%10#1: bytes = ((extract 2 0) array%substring3%14#1)
        let array%extract%6#1: bytes = (extract3 array%substring3%13#1 2u 64u)
        let array%get_bit%6#1: uint64 = (getbit array%substring3%13#1 528u)
        let array%item2%6#1: bool = (getbit array%get_bit%6#1 0u)
        let (tmp%27#0: string, tmp%28#0: string, tmp%29#0: biguint, tmp%30#0: bool) = (array%item0%9#1, array%item0%10#1, array%extract%6#1, array%item2%6#1)
        let tmp%31#0: bool = (== tmp%30#0 1u)
        (assert tmp%31#0) // Tuple value should be set
        let array%length%3#1: uint64 = (len "hello")
        let array%as_bytes%7#1: bytes[8] = (itob array%length%3#1)
        let array%length_uint16%3#1: bytes = ((extract 6 2) array%as_bytes%7#1)
        let array%encoded_value%3#1: bytes = (concat array%length_uint16%3#1 "hello")
        let array%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = array%encoded_value%3#1
        let array%tail%4#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%3#1)
        let array%data_length%4#1: uint64 = (len array%as_Encoded(len+utf8[])%3#1)
        let array%current_tail_offset%4#1: uint64 = (+ 11u array%data_length%4#1)
        let array%as_bytes%8#1: bytes[8] = (itob 11u)
        let array%offset_as_uint16%4#1: bytes = ((extract 6 2) array%as_bytes%8#1)
        let array%encoded%11#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%4#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 123u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%12#1: Encoded((len+utf8[]),uint64) = (concat array%encoded%11#1 array%as_Encoded(uint64)%1#1)
        let array%encoded_bit%2#1: bytes = (setbit 0x00 0u 1u)
        let array%encoded%13#1: Encoded((len+utf8[]),uint64,bool1) = (concat array%encoded%12#1 array%encoded_bit%2#1)
        let array%encoded%14#1: Encoded((len+utf8[]),uint64,bool1) = (concat array%encoded%13#1 array%tail%4#1)
        let encoded_for_storage%2#0: Encoded((len+utf8[]),uint64,bool1) = array%encoded%14#1
        (app_global_put "t3" encoded_for_storage%2#0)
        let array%extract_uint16%19#1: uint64 = (extract_uint16 encoded_for_storage%2#0 0u)
        let array%len%11#1: uint64 = (len encoded_for_storage%2#0)
        let array%substring3%15#1: bytes = (substring3 encoded_for_storage%2#0 array%extract_uint16%19#1 array%len%11#1)
        let array%item0%11#1: bytes = ((extract 2 0) array%substring3%15#1)
        let array%extract%7#1: bytes = (extract3 encoded_for_storage%2#0 2u 8u)
        let array%item1%3#1: uint64 = (btoi array%extract%7#1)
        let array%get_bit%7#1: uint64 = (getbit encoded_for_storage%2#0 80u)
        let array%item2%7#1: bool = (getbit array%get_bit%7#1 0u)
        let (tmp%32#0: string, tmp%33#0: uint64, tmp%34#0: bool) = (array%item0%11#1, array%item1%3#1, array%item2%7#1)
        let tmp%35#0: bool = (== tmp%32#0 "hello")
        (assert tmp%35#0) // Object value should be set
        let array%extract_uint16%20#1: uint64 = (extract_uint16 encoded_for_storage%2#0 0u)
        let array%len%12#1: uint64 = (len encoded_for_storage%2#0)
        let array%substring3%16#1: bytes = (substring3 encoded_for_storage%2#0 array%extract_uint16%20#1 array%len%12#1)
        let array%item0%12#1: bytes = ((extract 2 0) array%substring3%16#1)
        let array%extract%8#1: bytes = (extract3 encoded_for_storage%2#0 2u 8u)
        let array%item1%4#1: uint64 = (btoi array%extract%8#1)
        let array%get_bit%8#1: uint64 = (getbit encoded_for_storage%2#0 80u)
        let array%item2%8#1: bool = (getbit array%get_bit%8#1 0u)
        let (tmp%36#0: string, tmp%37#0: uint64, tmp%38#0: bool) = (array%item0%12#1, array%item1%4#1, array%item2%8#1)
        let tmp%39#0: bool = (== tmp%37#0 123u)
        (assert tmp%39#0) // Object value should be set
        let array%extract_uint16%21#1: uint64 = (extract_uint16 encoded_for_storage%2#0 0u)
        let array%len%13#1: uint64 = (len encoded_for_storage%2#0)
        let array%substring3%17#1: bytes = (substring3 encoded_for_storage%2#0 array%extract_uint16%21#1 array%len%13#1)
        let array%item0%13#1: bytes = ((extract 2 0) array%substring3%17#1)
        let array%extract%9#1: bytes = (extract3 encoded_for_storage%2#0 2u 8u)
        let array%item1%5#1: uint64 = (btoi array%extract%9#1)
        let array%get_bit%9#1: uint64 = (getbit encoded_for_storage%2#0 80u)
        let array%item2%9#1: bool = (getbit array%get_bit%9#1 0u)
        let (tmp%40#0: string, tmp%41#0: uint64, tmp%42#0: bool) = (array%item0%13#1, array%item1%5#1, array%item2%9#1)
        let tmp%43#0: bool = (== tmp%42#0 1u)
        (assert tmp%43#0) // Object value should be set
        let array%length%4#1: uint64 = (len "a")
        let array%as_bytes%9#1: bytes[8] = (itob array%length%4#1)
        let array%length_uint16%4#1: bytes = ((extract 6 2) array%as_bytes%9#1)
        let array%encoded_value%4#1: bytes = (concat array%length_uint16%4#1 "a")
        let array%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = array%encoded_value%4#1
        let array%tail%5#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%4#1)
        let array%data_length%5#1: uint64 = (len array%as_Encoded(len+utf8[])%4#1)
        let array%current_tail_offset%5#1: uint64 = (+ 4u array%data_length%5#1)
        let array%as_bytes%10#1: bytes[8] = (itob 4u)
        let array%offset_as_uint16%5#1: bytes = ((extract 6 2) array%as_bytes%10#1)
        let array%encoded%15#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%5#1)
        let array%length%5#1: uint64 = (len "b")
        let array%as_bytes%11#1: bytes[8] = (itob array%length%5#1)
        let array%length_uint16%5#1: bytes = ((extract 6 2) array%as_bytes%11#1)
        let array%encoded_value%5#1: bytes = (concat array%length_uint16%5#1 "b")
        let array%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = array%encoded_value%5#1
        let array%tail%6#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%5#1)
        let array%data_length%6#1: uint64 = (len array%as_Encoded(len+utf8[])%5#1)
        let array%current_tail_offset%6#1: uint64 = (+ 67u array%data_length%6#1)
        let array%as_bytes%12#1: bytes[8] = (itob 67u)
        let array%offset_as_uint16%6#1: bytes = ((extract 6 2) array%as_bytes%12#1)
        let array%encoded%16#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%6#1)
        let array%value_len%1#1: uint64 = (len 456b)
        let array%len_ok%1#1: bool = (<= array%value_len%1#1 64u)
        (assert array%len_ok%1#1) // overflow
        let array%bzero%1#1: bytes = (bzero 64u)
        let array%arc4_encoded%1#1: bytes[64] = (b| 456b array%bzero%1#1)
        let array%as_Encoded(uint512)%1#1: Encoded(uint512) = array%arc4_encoded%1#1
        let array%encoded%17#1: Encoded((len+utf8[]),uint512) = (concat array%encoded%16#1 array%as_Encoded(uint512)%1#1)
        let array%encoded_bit%3#1: bytes = (setbit 0x00 0u 1u)
        let array%encoded%18#1: Encoded((len+utf8[]),uint512,bool1) = (concat array%encoded%17#1 array%encoded_bit%3#1)
        let array%encoded%19#1: Encoded((len+utf8[]),uint512,bool1) = (concat array%encoded%18#1 array%tail%6#1)
        let array%tail%7#1: bytes = (concat array%tail%5#1 array%encoded%19#1)
        let array%data_length%7#1: uint64 = (len array%encoded%19#1)
        let array%current_tail_offset%7#1: uint64 = (+ array%current_tail_offset%5#1 array%data_length%7#1)
        let array%as_bytes%13#1: bytes[8] = (itob array%current_tail_offset%5#1)
        let array%offset_as_uint16%7#1: bytes = ((extract 6 2) array%as_bytes%13#1)
        let array%encoded%20#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat array%encoded%15#1 array%offset_as_uint16%7#1)
        let array%encoded%21#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat array%encoded%20#1 array%tail%7#1)
        let encoded_for_storage%3#0: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = array%encoded%21#1
        (app_global_put "t4" encoded_for_storage%3#0)
        let array%extract_uint16%22#1: uint64 = (extract_uint16 encoded_for_storage%3#0 0u)
        let array%extract_uint16%23#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%substring3%18#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%22#1 array%extract_uint16%23#1)
        let array%item0%14#1: bytes = ((extract 2 0) array%substring3%18#1)
        let array%extract_uint16%24#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%len%14#1: uint64 = (len encoded_for_storage%3#0)
        let array%substring3%19#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%24#1 array%len%14#1)
        let array%extract_uint16%25#1: uint64 = (extract_uint16 array%substring3%19#1 0u)
        let array%len%15#1: uint64 = (len array%substring3%19#1)
        let array%substring3%20#1: bytes = (substring3 array%substring3%19#1 array%extract_uint16%25#1 array%len%15#1)
        let array%item0%15#1: bytes = ((extract 2 0) array%substring3%20#1)
        let array%extract%10#1: bytes = (extract3 array%substring3%19#1 2u 64u)
        let array%get_bit%10#1: uint64 = (getbit array%substring3%19#1 528u)
        let array%item2%10#1: bool = (getbit array%get_bit%10#1 0u)
        let (tmp%44#0: string, tmp%45#0: string, tmp%46#0: biguint, tmp%47#0: bool) = (array%item0%14#1, array%item0%15#1, array%extract%10#1, array%item2%10#1)
        let tmp%48#0: bool = (== tmp%44#0 "a")
        (assert tmp%48#0) // Tuple value should be set
        let array%extract_uint16%26#1: uint64 = (extract_uint16 encoded_for_storage%3#0 0u)
        let array%extract_uint16%27#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%substring3%21#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%26#1 array%extract_uint16%27#1)
        let array%item0%16#1: bytes = ((extract 2 0) array%substring3%21#1)
        let array%extract_uint16%28#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%len%16#1: uint64 = (len encoded_for_storage%3#0)
        let array%substring3%22#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%28#1 array%len%16#1)
        let array%extract_uint16%29#1: uint64 = (extract_uint16 array%substring3%22#1 0u)
        let array%len%17#1: uint64 = (len array%substring3%22#1)
        let array%substring3%23#1: bytes = (substring3 array%substring3%22#1 array%extract_uint16%29#1 array%len%17#1)
        let array%item0%17#1: bytes = ((extract 2 0) array%substring3%23#1)
        let array%extract%11#1: bytes = (extract3 array%substring3%22#1 2u 64u)
        let array%get_bit%11#1: uint64 = (getbit array%substring3%22#1 528u)
        let array%item2%11#1: bool = (getbit array%get_bit%11#1 0u)
        let (tmp%49#0: string, tmp%50#0: string, tmp%51#0: biguint, tmp%52#0: bool) = (array%item0%16#1, array%item0%17#1, array%extract%11#1, array%item2%11#1)
        let tmp%53#0: bool = (== tmp%50#0 "b")
        (assert tmp%53#0) // Tuple value should be set
        let array%extract_uint16%30#1: uint64 = (extract_uint16 encoded_for_storage%3#0 0u)
        let array%extract_uint16%31#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%substring3%24#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%30#1 array%extract_uint16%31#1)
        let array%item0%18#1: bytes = ((extract 2 0) array%substring3%24#1)
        let array%extract_uint16%32#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%len%18#1: uint64 = (len encoded_for_storage%3#0)
        let array%substring3%25#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%32#1 array%len%18#1)
        let array%extract_uint16%33#1: uint64 = (extract_uint16 array%substring3%25#1 0u)
        let array%len%19#1: uint64 = (len array%substring3%25#1)
        let array%substring3%26#1: bytes = (substring3 array%substring3%25#1 array%extract_uint16%33#1 array%len%19#1)
        let array%item0%19#1: bytes = ((extract 2 0) array%substring3%26#1)
        let array%extract%12#1: bytes = (extract3 array%substring3%25#1 2u 64u)
        let array%get_bit%12#1: uint64 = (getbit array%substring3%25#1 528u)
        let array%item2%12#1: bool = (getbit array%get_bit%12#1 0u)
        let (tmp%54#0: string, tmp%55#0: string, tmp%56#0: biguint, tmp%57#0: bool) = (array%item0%18#1, array%item0%19#1, array%extract%12#1, array%item2%12#1)
        let tmp%58#0: bool = (b== tmp%56#0 456b)
        (assert tmp%58#0) // Tuple value should be set
        let array%extract_uint16%34#1: uint64 = (extract_uint16 encoded_for_storage%3#0 0u)
        let array%extract_uint16%35#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%substring3%27#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%34#1 array%extract_uint16%35#1)
        let array%item0%20#1: bytes = ((extract 2 0) array%substring3%27#1)
        let array%extract_uint16%36#1: uint64 = (extract_uint16 encoded_for_storage%3#0 2u)
        let array%len%20#1: uint64 = (len encoded_for_storage%3#0)
        let array%substring3%28#1: bytes = (substring3 encoded_for_storage%3#0 array%extract_uint16%36#1 array%len%20#1)
        let array%extract_uint16%37#1: uint64 = (extract_uint16 array%substring3%28#1 0u)
        let array%len%21#1: uint64 = (len array%substring3%28#1)
        let array%substring3%29#1: bytes = (substring3 array%substring3%28#1 array%extract_uint16%37#1 array%len%21#1)
        let array%item0%21#1: bytes = ((extract 2 0) array%substring3%29#1)
        let array%extract%13#1: bytes = (extract3 array%substring3%28#1 2u 64u)
        let array%get_bit%13#1: uint64 = (getbit array%substring3%28#1 528u)
        let array%item2%13#1: bool = (getbit array%get_bit%13#1 0u)
        let (tmp%59#0: string, tmp%60#0: string, tmp%61#0: biguint, tmp%62#0: bool) = (array%item0%20#1, array%item0%21#1, array%extract%13#1, array%item2%13#1)
        let tmp%63#0: bool = (== tmp%62#0 1u)
        (assert tmp%63#0) // Tuple value should be set
        let array%length%6#1: uint64 = (len 0x576f726c64)
        let array%as_bytes%14#1: bytes[8] = (itob array%length%6#1)
        let array%length_uint16%6#1: bytes = ((extract 6 2) array%as_bytes%14#1)
        let array%encoded_value%6#1: bytes = (concat array%length_uint16%6#1 0x576f726c64)
        let array%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = array%encoded_value%6#1
        let encoded%0#0: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%6#1
        let array%length%7#1: uint64 = (len "hello")
        let array%as_bytes%15#1: bytes[8] = (itob array%length%7#1)
        let array%length_uint16%7#1: bytes = ((extract 6 2) array%as_bytes%15#1)
        let array%encoded_value%7#1: bytes = (concat array%length_uint16%7#1 "hello")
        let array%as_Encoded(len+utf8[])%7#1: Encoded(len+utf8[]) = array%encoded_value%7#1
        let array%tail%8#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%7#1)
        let array%data_length%8#1: uint64 = (len array%as_Encoded(len+utf8[])%7#1)
        let array%current_tail_offset%8#1: uint64 = (+ 13u array%data_length%8#1)
        let array%as_bytes%16#1: bytes[8] = (itob 13u)
        let array%offset_as_uint16%8#1: bytes = ((extract 6 2) array%as_bytes%16#1)
        let array%encoded%22#1: Encoded((len+utf8[])) = (concat 0x array%offset_as_uint16%8#1)
        let array%val_as_bytes%2#1: bytes[8] = (itob 123u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%23#1: Encoded((len+utf8[]),uint64) = (concat array%encoded%22#1 array%as_Encoded(uint64)%2#1)
        let array%encoded_bit%4#1: bytes = (setbit 0x00 0u 1u)
        let array%encoded%24#1: Encoded((len+utf8[]),uint64,bool1) = (concat array%encoded%23#1 array%encoded_bit%4#1)
        let array%tail%9#1: bytes = (concat array%tail%8#1 encoded%0#0)
        let array%data_length%9#1: uint64 = (len encoded%0#0)
        let array%current_tail_offset%9#1: uint64 = (+ array%current_tail_offset%8#1 array%data_length%9#1)
        let array%as_bytes%17#1: bytes[8] = (itob array%current_tail_offset%8#1)
        let array%offset_as_uint16%9#1: bytes = ((extract 6 2) array%as_bytes%17#1)
        let array%encoded%25#1: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = (concat array%encoded%24#1 array%offset_as_uint16%9#1)
        let array%encoded%26#1: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = (concat array%encoded%25#1 array%tail%9#1)
        let tmp%64#0: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = array%encoded%26#1
        (app_global_put "t5" tmp%64#0)
        let array%extract_uint16%38#1: uint64 = (extract_uint16 tmp%64#0 0u)
        let array%extract_uint16%39#1: uint64 = (extract_uint16 tmp%64#0 11u)
        let array%substring3%30#1: bytes = (substring3 tmp%64#0 array%extract_uint16%38#1 array%extract_uint16%39#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = array%substring3%30#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%65#0: bool = (== values%0#0 "hello")
        (assert tmp%65#0) // Mutable object value should be set
        let array%extract%14#1: bytes = (extract3 tmp%64#0 2u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%14#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%66#0: bool = (== values%1#0 123u)
        (assert tmp%66#0) // Mutable object value should be set
        let array%get_bit%14#1: uint64 = (getbit tmp%64#0 80u)
        let tuple_item%2#0: bool = array%get_bit%14#1
        let values%2#0: bool = (getbit tuple_item%2#0 0u)
        let tmp%67#0: bool = (== values%2#0 1u)
        (assert tmp%67#0) // Mutable object value should be set
        let array%extract_uint16%40#1: uint64 = (extract_uint16 tmp%64#0 11u)
        let array%len%22#1: uint64 = (len tmp%64#0)
        let array%substring3%31#1: bytes = (substring3 tmp%64#0 array%extract_uint16%40#1 array%len%22#1)
        let tuple_item%3#0: Encoded(len+utf8[]) = array%substring3%31#1
        let tmp%68#0: string = ((extract 2 0) tuple_item%3#0)
        let tmp%69#0: bool = (== tmp%68#0 "World")
        (assert tmp%69#0) // Mutable object value should be set
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L60
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L60
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L60
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#0 <- block@3, tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#1 <- block@7, tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0