main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__() -> bool:
    block@0: // L60
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L60
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testTuple()void" => block@2, * => block@3}
    block@2: // testTuple_route_L69
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/global-state.algo.ts::TestTuple.testTuple()
        return 1u
    block@3: // switch_case_default_L60
        goto block@4
    block@4: // switch_case_next_L60
        goto block@9
    block@5: // bare_routing_L60
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L60
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L60
        goto block@8
    block@8: // switch_case_next_L60
        goto block@9
    block@9: // after_if_else_L60
        return 0u

subroutine tests/approvals/global-state.algo.ts::TestTuple.testTuple() -> void:
    block@0: // L69
        let tmp%0#0: Encoded((len+utf8[]),uint64,bool1) = encode<((len+utf8[]),uint64,bool1)>("hello", 123u, 1u)
        (app_global_put "t1" tmp%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tuple_item%0#0: Encoded(len+utf8[]) = agg_read_index(maybe_value%0#0, 0)
        let values%0#0: string = decode<string>(tuple_item%0#0)
        let tmp%1#0: bool = (== values%0#0 "hello")
        (assert tmp%1#0) // Tuple value should be set
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%1#0) // check GlobalState exists
        let tuple_item%1#0: Encoded(uint64) = agg_read_index(maybe_value%1#0, 1)
        let values%1#0: uint64 = decode<uint64>(tuple_item%1#0)
        let tmp%2#0: bool = (== values%1#0 123u)
        (assert tmp%2#0) // Tuple value should be set
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%2#0) // check GlobalState exists
        let tuple_item%2#0: bool = agg_read_index(maybe_value%2#0, 2)
        let tmp%3#0: bool = (== tuple_item%2#0 1u)
        (assert tmp%3#0) // Tuple value should be set
        let tmp%4#0: Encoded((len+utf8[]),uint512,bool1) = encode<((len+utf8[]),uint512,bool1)>("b", 456b, 1u)
        let tmp%5#0: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = encode<((len+utf8[]),((len+utf8[]),uint512,bool1))>("a", tmp%4#0)
        (app_global_put "t2" tmp%5#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%3#0) // check GlobalState exists
        let tuple_item%3#0: Encoded(len+utf8[]) = agg_read_index(maybe_value%3#0, 0)
        let values%2#0: string = decode<string>(tuple_item%3#0)
        let tmp%6#0: bool = (== values%2#0 "a")
        (assert tmp%6#0) // Tuple value should be set
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%4#0) // check GlobalState exists
        let tuple_item%4#0: Encoded((len+utf8[]),uint512,bool1) = agg_read_index(maybe_value%4#0, 1)
        let tuple_item%5#0: Encoded(len+utf8[]) = agg_read_index(tuple_item%4#0, 0)
        let values%3#0: string = decode<string>(tuple_item%5#0)
        let tmp%7#0: bool = (== values%3#0 "b")
        (assert tmp%7#0) // Tuple value should be set
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%5#0) // check GlobalState exists
        let tuple_item%6#0: Encoded((len+utf8[]),uint512,bool1) = agg_read_index(maybe_value%5#0, 1)
        let tuple_item%7#0: Encoded(uint512) = agg_read_index(tuple_item%6#0, 1)
        let values%4#0: biguint = decode<biguint>(tuple_item%7#0)
        let tmp%8#0: bool = (b== values%4#0 456b)
        (assert tmp%8#0) // Tuple value should be set
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%6#0) // check GlobalState exists
        let tuple_item%8#0: Encoded((len+utf8[]),uint512,bool1) = agg_read_index(maybe_value%6#0, 1)
        let tuple_item%9#0: bool = agg_read_index(tuple_item%8#0, 2)
        let tmp%9#0: bool = (== tuple_item%9#0 1u)
        (assert tmp%9#0) // Tuple value should be set
        let encoded_for_storage%0#0: Encoded((len+utf8[]),uint64,bool1) = encode<((len+utf8[]),uint64,bool1)>("hello", 123u, 1u)
        (app_global_put "t3" encoded_for_storage%0#0)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%7#0) // check GlobalState exists
        let (tmp%10#0: string, tmp%11#0: uint64, tmp%12#0: bool) = decode<(string,uint64,bool,)>(maybe_value%7#0)
        let tmp%13#0: bool = (== tmp%10#0 "hello")
        (assert tmp%13#0) // Object value should be set
        let (maybe_value%8#0: bytes, maybe_exists%8#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%8#0) // check GlobalState exists
        let (tmp%14#0: string, tmp%15#0: uint64, tmp%16#0: bool) = decode<(string,uint64,bool,)>(maybe_value%8#0)
        let tmp%17#0: bool = (== tmp%15#0 123u)
        (assert tmp%17#0) // Object value should be set
        let (maybe_value%9#0: bytes, maybe_exists%9#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%9#0) // check GlobalState exists
        let (tmp%18#0: string, tmp%19#0: uint64, tmp%20#0: bool) = decode<(string,uint64,bool,)>(maybe_value%9#0)
        let tmp%21#0: bool = (== tmp%20#0 1u)
        (assert tmp%21#0) // Object value should be set
        let tmp%22#0: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = encode<((len+utf8[]),((len+utf8[]),uint512,bool1))>("a", "b", 456b, 1u)
        (app_global_put "t4" tmp%22#0)
        let (maybe_value%10#0: bytes, maybe_exists%10#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%10#0) // check GlobalState exists
        let tuple_item%10#0: Encoded(len+utf8[]) = agg_read_index(maybe_value%10#0, 0)
        let values%5#0: string = decode<string>(tuple_item%10#0)
        let tmp%23#0: bool = (== values%5#0 "a")
        (assert tmp%23#0) // Tuple value should be set
        let (maybe_value%11#0: bytes, maybe_exists%11#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%11#0) // check GlobalState exists
        let tuple_item%11#0: Encoded((len+utf8[]),uint512,bool1) = agg_read_index(maybe_value%11#0, 1)
        let (values%6#0: string, values%7#0: biguint, values%8#0: bool) = decode<(string,biguint,bool,)>(tuple_item%11#0)
        let tmp%24#0: bool = (== values%6#0 "b")
        (assert tmp%24#0) // Tuple value should be set
        let (maybe_value%12#0: bytes, maybe_exists%12#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%12#0) // check GlobalState exists
        let tuple_item%12#0: Encoded((len+utf8[]),uint512,bool1) = agg_read_index(maybe_value%12#0, 1)
        let (values%9#0: string, values%10#0: biguint, values%11#0: bool) = decode<(string,biguint,bool,)>(tuple_item%12#0)
        let tmp%25#0: bool = (b== values%10#0 456b)
        (assert tmp%25#0) // Tuple value should be set
        let (maybe_value%13#0: bytes, maybe_exists%13#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%13#0) // check GlobalState exists
        let tuple_item%13#0: Encoded((len+utf8[]),uint512,bool1) = agg_read_index(maybe_value%13#0, 1)
        let (values%12#0: string, values%13#0: biguint, values%14#0: bool) = decode<(string,biguint,bool,)>(tuple_item%13#0)
        let tmp%26#0: bool = (== values%14#0 1u)
        (assert tmp%26#0) // Tuple value should be set
        let encoded%0#0: Encoded(len+utf8[]) = encode<(len+utf8[])>(0x576f726c64)
        let tmp%27#0: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = encode<((len+utf8[]),uint64,bool1,(len+utf8[]))>("hello", 123u, 1u, encoded%0#0)
        (app_global_put "t5" tmp%27#0)
        let (maybe_value%14#0: bytes, maybe_exists%14#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%14#0) // check GlobalState exists
        let tuple_item%14#0: Encoded(len+utf8[]) = agg_read_index(maybe_value%14#0, 0)
        let values%15#0: string = decode<string>(tuple_item%14#0)
        let tmp%28#0: bool = (== values%15#0 "hello")
        (assert tmp%28#0) // Mutable object value should be set
        let (maybe_value%15#0: bytes, maybe_exists%15#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%15#0) // check GlobalState exists
        let tuple_item%15#0: Encoded(uint64) = agg_read_index(maybe_value%15#0, 1)
        let values%16#0: uint64 = decode<uint64>(tuple_item%15#0)
        let tmp%29#0: bool = (== values%16#0 123u)
        (assert tmp%29#0) // Mutable object value should be set
        let (maybe_value%16#0: bytes, maybe_exists%16#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%16#0) // check GlobalState exists
        let tuple_item%16#0: bool = agg_read_index(maybe_value%16#0, 2)
        let tmp%30#0: bool = (== tuple_item%16#0 1u)
        (assert tmp%30#0) // Mutable object value should be set
        let (maybe_value%17#0: bytes, maybe_exists%17#0: bool) = (app_global_get_ex 0u "t5")
        (assert maybe_exists%17#0) // check GlobalState exists
        let tuple_item%17#0: Encoded(len+utf8[]) = agg_read_index(maybe_value%17#0, 3)
        let tmp%31#0: string = decode<string>(tuple_item%17#0)
        let tmp%32#0: bool = (== tmp%31#0 "World")
        (assert tmp%32#0) // Mutable object value should be set
        return 

subroutine tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate() -> void:
    block@0: // L60
        return 