main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L59
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testTuple()void" => block@3, * => block@10}
    block@3: // testTuple_route_L68
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 11u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%1#1: Encoded((len+utf8[]),uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%1#1 aggregate%encoded_bool%0#1)
        let aggregate%encoded%3#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%2#1 aggregate%tail%0#1)
        let tmp%0#2: Encoded((len+utf8[]),uint64,bool1) = aggregate%encoded%3#1
        (app_global_put "t1" tmp%0#2)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 tmp%0#2 0u)
        let aggregate%len%0#1: uint64 = (len tmp%0#2)
        let aggregate%substring3%0#1: bytes = (substring3 tmp%0#2 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%1#1: bool = (== values%0#0 "hello")
        (assert tmp%1#1) // Tuple value should be set
        let aggregate%extract%0#1: bytes = (extract3 tmp%0#2 2u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%0#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%2#1: bool = (== values%1#0 123u)
        (assert tmp%2#1) // Tuple value should be set
        let aggregate%get_bit%0#1: uint64 = (getbit tmp%0#2 80u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#1
        let tmp%3#1: bool = (== tuple_item%2#0 1u)
        (assert tmp%3#1) // Tuple value should be set
        let aggregate%length%1#1: uint64 = (len "b")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "b")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%1#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%data_length%1#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 67u aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 67u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%4#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%value_len%0#1: uint64 = (len 456b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 456b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let aggregate%encoded%5#1: Encoded((len+utf8[]),uint512) = (concat aggregate%encoded%4#1 aggregate%as_Encoded(uint512)%0#1)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%encoded%6#1: Encoded((len+utf8[]),uint512,bool1) = (concat aggregate%encoded%5#1 aggregate%encoded_bool%1#1)
        let aggregate%encoded%7#1: Encoded((len+utf8[]),uint512,bool1) = (concat aggregate%encoded%6#1 aggregate%tail%1#1)
        let tmp%4#1: Encoded((len+utf8[]),uint512,bool1) = aggregate%encoded%7#1
        let aggregate%length%2#1: uint64 = (len "a")
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "a")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%8#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%2#1 tmp%4#1)
        let aggregate%data_length%3#1: uint64 = (len tmp%4#1)
        let aggregate%current_tail_offset%3#1: uint64 = (+ aggregate%current_tail_offset%2#1 aggregate%data_length%3#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%9#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat aggregate%encoded%8#1 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%10#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = (concat aggregate%encoded%9#1 aggregate%tail%3#1)
        let tmp%5#1: Encoded((len+utf8[]),((len+utf8[]),uint512,bool1)) = aggregate%encoded%10#1
        (app_global_put "t2" tmp%5#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 tmp%5#1 0u)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 tmp%5#1 2u)
        let aggregate%substring3%1#1: bytes = (substring3 tmp%5#1 aggregate%extract_uint16%1#1 aggregate%extract_uint16%2#1)
        let tuple_item%3#0: Encoded(len+utf8[]) = aggregate%substring3%1#1
        let values%2#0: string = ((extract 2 0) tuple_item%3#0)
        let tmp%6#1: bool = (== values%2#0 "a")
        (assert tmp%6#1) // Tuple value should be set
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 tmp%5#1 2u)
        let aggregate%len%1#1: uint64 = (len tmp%5#1)
        let aggregate%substring3%2#1: bytes = (substring3 tmp%5#1 aggregate%extract_uint16%3#1 aggregate%len%1#1)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 aggregate%substring3%2#1 0u)
        let aggregate%len%2#1: uint64 = (len aggregate%substring3%2#1)
        let aggregate%substring3%3#1: bytes = (substring3 aggregate%substring3%2#1 aggregate%extract_uint16%4#1 aggregate%len%2#1)
        let tuple_item%5#0: Encoded(len+utf8[]) = aggregate%substring3%3#1
        let values%3#0: string = ((extract 2 0) tuple_item%5#0)
        let tmp%7#1: bool = (== values%3#0 "b")
        (assert tmp%7#1) // Tuple value should be set
        let aggregate%extract_uint16%5#1: uint64 = (extract_uint16 tmp%5#1 2u)
        let aggregate%len%3#1: uint64 = (len tmp%5#1)
        let aggregate%substring3%4#1: bytes = (substring3 tmp%5#1 aggregate%extract_uint16%5#1 aggregate%len%3#1)
        let aggregate%extract%1#1: bytes = (extract3 aggregate%substring3%4#1 2u 64u)
        let tuple_item%7#0: Encoded(uint512) = aggregate%extract%1#1
        let values%4#0: biguint = tuple_item%7#0
        let tmp%8#1: bool = (b== values%4#0 456b)
        (assert tmp%8#1) // Tuple value should be set
        let aggregate%extract_uint16%6#1: uint64 = (extract_uint16 tmp%5#1 2u)
        let aggregate%len%4#1: uint64 = (len tmp%5#1)
        let aggregate%substring3%5#1: bytes = (substring3 tmp%5#1 aggregate%extract_uint16%6#1 aggregate%len%4#1)
        let aggregate%get_bit%1#1: uint64 = (getbit aggregate%substring3%5#1 528u)
        let tuple_item%9#0: bool = aggregate%get_bit%1#1
        let tmp%9#1: bool = (== tuple_item%9#0 1u)
        (assert tmp%9#1) // Tuple value should be set
        (app_global_put "t3" tmp%0#2)
        (app_global_put "t4" tmp%5#1)
        let aggregate%length%3#1: uint64 = (len 0x576f726c64)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x576f726c64)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let aggregate%length%4#1: uint64 = (len "hello")
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let aggregate%tail%4#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%4#1)
        let aggregate%data_length%4#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%4#1)
        let aggregate%current_tail_offset%4#1: uint64 = (+ 13u aggregate%data_length%4#1)
        let aggregate%as_bytes%9#1: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded%11#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%4#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%12#1: Encoded((len+utf8[]),uint64) = (concat aggregate%encoded%11#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%encoded%13#1: Encoded((len+utf8[]),uint64,bool1) = (concat aggregate%encoded%12#1 aggregate%encoded_bool%2#1)
        let aggregate%tail%5#1: bytes = (concat aggregate%tail%4#1 encoded%0#0)
        let aggregate%data_length%5#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%5#1: uint64 = (+ aggregate%current_tail_offset%4#1 aggregate%data_length%5#1)
        let aggregate%as_bytes%10#1: bytes[8] = (itob aggregate%current_tail_offset%4#1)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%14#1: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = (concat aggregate%encoded%13#1 aggregate%offset_as_uint16%5#1)
        let aggregate%encoded%15#1: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = (concat aggregate%encoded%14#1 aggregate%tail%5#1)
        let tmp%20#0: Encoded((len+utf8[]),uint64,bool1,(len+utf8[])) = aggregate%encoded%15#1
        (app_global_put "t5" tmp%20#0)
        let aggregate%extract_uint16%7#1: uint64 = (extract_uint16 tmp%20#0 0u)
        let aggregate%extract_uint16%8#1: uint64 = (extract_uint16 tmp%20#0 11u)
        let aggregate%substring3%6#1: bytes = (substring3 tmp%20#0 aggregate%extract_uint16%7#1 aggregate%extract_uint16%8#1)
        let tuple_item%20#0: Encoded(len+utf8[]) = aggregate%substring3%6#1
        let values%10#0: string = ((extract 2 0) tuple_item%20#0)
        let tmp%21#0: bool = (== values%10#0 "hello")
        (assert tmp%21#0) // Mutable object value should be set
        let aggregate%extract%2#1: bytes = (extract3 tmp%20#0 2u 8u)
        let tuple_item%21#0: Encoded(uint64) = aggregate%extract%2#1
        let values%11#0: uint64 = (btoi tuple_item%21#0)
        let tmp%22#0: bool = (== values%11#0 123u)
        (assert tmp%22#0) // Mutable object value should be set
        let aggregate%get_bit%2#1: uint64 = (getbit tmp%20#0 80u)
        let tuple_item%22#0: bool = aggregate%get_bit%2#1
        let tmp%23#0: bool = (== tuple_item%22#0 1u)
        (assert tmp%23#0) // Mutable object value should be set
        let aggregate%extract_uint16%9#1: uint64 = (extract_uint16 tmp%20#0 11u)
        let aggregate%len%5#1: uint64 = (len tmp%20#0)
        let aggregate%substring3%7#1: bytes = (substring3 tmp%20#0 aggregate%extract_uint16%9#1 aggregate%len%5#1)
        let tuple_item%23#0: Encoded(len+utf8[]) = aggregate%substring3%7#1
        let tmp%24#0: string = ((extract 2 0) tuple_item%23#0)
        let tmp%25#0: bool = (== tmp%24#0 "World")
        (assert tmp%25#0) // Mutable object value should be set
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L59
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L59
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L59
        let tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#0 <- block@3, tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#1 <- block@7, tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0