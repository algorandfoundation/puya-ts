#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 2 1 123
    bytecblock "t2" "t4" "t1" 0x00 "t3" 0x000b000000000000007b80000568656c6c6f "hello" 0x000400070001610043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c880000162 0x01c8
    // tests/approvals/global-state.algo.ts:46
    // export class TestTuple extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x125477f5 // method "testTuple()void"
    txna ApplicationArgs 0
    match main_testTuple_route@3

main_after_if_else@10:
    // tests/approvals/global-state.algo.ts:46
    // export class TestTuple extends Contract {
    intc_0 // 0
    return

main_testTuple_route@3:
    // tests/approvals/global-state.algo.ts:53
    // testTuple() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/global-state.algo.ts:47
    // t1 = GlobalState<[string, uint64, boolean]>()
    bytec_2 // "t1"
    bytec 5 // 0x000b000000000000007b80000568656c6c6f
    // tests/approvals/global-state.algo.ts:54
    // this.t1.value = ['hello', 123, true]
    app_global_put
    // tests/approvals/global-state.algo.ts:47
    // t1 = GlobalState<[string, uint64, boolean]>()
    intc_0 // 0
    bytec_2 // "t1"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    // tests/approvals/global-state.algo.ts:55
    // assert(this.t1.value[0] === 'hello', 'Tuple value should be set')
    bytec 6 // "hello"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:47
    // t1 = GlobalState<[string, uint64, boolean]>()
    intc_0 // 0
    bytec_2 // "t1"
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 2
    extract_uint64
    // tests/approvals/global-state.algo.ts:56
    // assert(this.t1.value[1] === 123, 'Tuple value should be set')
    intc_3 // 123
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:47
    // t1 = GlobalState<[string, uint64, boolean]>()
    intc_0 // 0
    bytec_2 // "t1"
    app_global_get_ex
    assert // check GlobalState exists
    pushint 80 // 80
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // tests/approvals/global-state.algo.ts:57
    // assert(this.t1.value[2] === true, 'Tuple value should be set')
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:48
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    bytec_0 // "t2"
    bytec 7 // 0x000400070001610043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c880000162
    // tests/approvals/global-state.algo.ts:59
    // this.t2.value = ['a', ['b', 456n, true]]
    app_global_put
    // tests/approvals/global-state.algo.ts:48
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    intc_0 // 0
    bytec_0 // "t2"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_1 // 2
    extract_uint16
    substring3
    extract 2 0
    // tests/approvals/global-state.algo.ts:60
    // assert(this.t2.value[0] === 'a', 'Tuple value should be set')
    pushbytes "a"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:48
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    intc_0 // 0
    bytec_0 // "t2"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    dig 1
    len
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    // tests/approvals/global-state.algo.ts:61
    // assert(this.t2.value[1][0] === 'b', 'Tuple value should be set')
    pushbytes "b"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:48
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    intc_0 // 0
    bytec_0 // "t2"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    dig 1
    len
    substring3
    extract 2 64 // on error: Index access is out of bounds
    // tests/approvals/global-state.algo.ts:62
    // assert(this.t2.value[1][1] === 456n, 'Tuple value should be set')
    bytec 8 // 0x01c8
    b==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:48
    // t2 = GlobalState<[string, [string, biguint, boolean]]>()
    intc_0 // 0
    bytec_0 // "t2"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    dig 1
    len
    substring3
    pushint 528 // 528
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // tests/approvals/global-state.algo.ts:63
    // assert(this.t2.value[1][2] === true, 'Tuple value should be set')
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:50
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    bytec 4 // "t3"
    bytec 5 // 0x000b000000000000007b80000568656c6c6f
    // tests/approvals/global-state.algo.ts:65
    // this.t3.value = { a: 'hello', b: 123, c: true }
    app_global_put
    // tests/approvals/global-state.algo.ts:50
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    intc_0 // 0
    bytec 4 // "t3"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    // tests/approvals/global-state.algo.ts:66
    // assert(this.t3.value.a === 'hello', 'Tuple value should be set')
    bytec 6 // "hello"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:50
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    intc_0 // 0
    bytec 4 // "t3"
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 2
    extract_uint64
    // tests/approvals/global-state.algo.ts:67
    // assert(this.t3.value.b === 123, 'Tuple value should be set')
    intc_3 // 123
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:50
    // t3 = GlobalState<{ a: string; b: uint64; c: boolean }>()
    intc_0 // 0
    bytec 4 // "t3"
    app_global_get_ex
    assert // check GlobalState exists
    pushint 80 // 80
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // tests/approvals/global-state.algo.ts:68
    // assert(this.t3.value.c === true, 'Tuple value should be set')
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:51
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    bytec_1 // "t4"
    bytec 7 // 0x000400070001610043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c880000162
    // tests/approvals/global-state.algo.ts:70
    // this.t4.value = ['a', { a: 'b', b: 456n, c: true }]
    app_global_put
    // tests/approvals/global-state.algo.ts:51
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    intc_0 // 0
    bytec_1 // "t4"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_1 // 2
    extract_uint16
    substring3
    extract 2 0
    // tests/approvals/global-state.algo.ts:71
    // assert(this.t4.value[0] === 'a', 'Tuple value should be set')
    pushbytes "a"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:51
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    intc_0 // 0
    bytec_1 // "t4"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    dig 1
    len
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    // tests/approvals/global-state.algo.ts:72
    // assert(this.t4.value[1].a === 'b', 'Tuple value should be set')
    pushbytes "b"
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:51
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    intc_0 // 0
    bytec_1 // "t4"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    dig 1
    len
    substring3
    extract 2 64 // on error: Index access is out of bounds
    // tests/approvals/global-state.algo.ts:73
    // assert(this.t4.value[1].b === 456n, 'Tuple value should be set')
    bytec 8 // 0x01c8
    b==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:51
    // t4 = GlobalState<[string, { a: string; b: biguint; c: boolean }]>()
    intc_0 // 0
    bytec_1 // "t4"
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_1 // 2
    extract_uint16
    dig 1
    len
    substring3
    pushint 528 // 528
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // tests/approvals/global-state.algo.ts:74
    // assert(this.t4.value[1].c === true, 'Tuple value should be set')
    intc_2 // 1
    ==
    assert // Tuple value should be set
    // tests/approvals/global-state.algo.ts:53
    // testTuple() {
    intc_2 // 1
    return

main_bare_routing@6:
    // tests/approvals/global-state.algo.ts:46
    // export class TestTuple extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return
