{
    "name": "TestTuple",
    "structs": {
        "object": [
            {
                "name": "a",
                "type": "string"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "testTuple",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "(string,uint64,bool)",
                    "key": "dDE="
                },
                "t2": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDI="
                },
                "t3": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "dDM="
                },
                "t4": {
                    "keyType": "AVMString",
                    "valueType": "(string,(string,uint512,bool))",
                    "key": "dDQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        265,
                        410
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        152
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        177,
                        186,
                        203,
                        227,
                        253,
                        271,
                        296,
                        320,
                        330,
                        348,
                        372,
                        398,
                        416,
                        441
                    ],
                    "errorMessage": "Tuple value should be set"
                },
                {
                    "pc": [
                        452
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        163,
                        181,
                        190,
                        211,
                        231,
                        257,
                        275,
                        306,
                        325,
                        335,
                        356,
                        376,
                        402,
                        420
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAIBeyYJAnQyAnQ0AnQxAQACdDMSAAsAAAAAAAAAe4AABWhlbGxvBWhlbGxvTQAEAAcAAWEAQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAciAAAFiAgHIMRtBATaABBJUd/U2GgCOAQACIkMxGRREMRhEKicFZyIqZURJIllLARVSVwIAJwYSRCIqZUQjWyUSRCIqZUSBUFMrIk8CVCJTJBJEKCcHZyIoZURJIllLASNZUlcCAIABYRJEIihlREkjWUsBFVJJIllLARVSVwIAgAFiEkQiKGVESSNZSwEVUlcCQCcIqEQiKGVESSNZSwEVUoGQBFMrIk8CVCJTJBJEJwQnBWciJwRlREkiWUsBFVJXAgAnBhJEIicEZUQjWyUSRCInBGVEgVBTKyJPAlQiUyQSRCknB2ciKWVESSJZSwEjWVJXAgCAAWESRCIpZURJI1lLARVSSSJZSwEVUlcCAIABYhJEIillREkjWUsBFVJXAkAnCKhEIillREkjWUsBFVKBkARTKyJPAlQiUyQSRCRDMRlA/tIxGBREJEM=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 8,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}