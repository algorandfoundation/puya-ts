main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L44
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "setState(string,uint64)void" => block@4, method "deleteState(string)void" => block@5, * => block@8}
    block@4: // setState_route_L46
        let tmp%0#3: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#3 0u) // on error: invalid array length header
        let length%0#1: uint64 = aggregate%array_length%0#0
        let add%0#1: uint64 = (+ length%0#1 2u)
        let len%0#1: uint64 = (len tmp%0#3)
        let eq%0#1: bool = (== len%0#1 add%0#1)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#1: string = ((extract 2 0) tmp%0#3)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let value#0: uint64 = (btoi tmp%2#1)
        (app_global_put key#1 value#0)
        exit 1u
    block@5: // deleteState_route_L52
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%0#2 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%1#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#0: string = ((extract 2 0) tmp%0#2)
        (app_global_del key#0)
        exit 1u
    block@8: // after_if_else_L44
        fail
    block@9: // __algots__.defaultCreate_L44
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u