{
    "name": "AssignmentsAlgo",
    "structs": {
        "Object3C0E3B9F": [
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "minBalance",
                "type": "uint64"
            }
        ],
        "Object3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ],
        "ReadonlyObject3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testPrimitives",
            "args": [
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAccountDestructure",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Object3C0E3B9F"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayDestructure",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "i_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64[]",
                    "name": "m_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayNarrowing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "m_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testTupleToArray",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "m_t"
                },
                {
                    "type": "(uint64,uint64)",
                    "name": "i_t"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNested",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "i_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDestructureObj",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "Object3EB715E7",
                    "name": "m"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "ReadonlyObject3EB715E7",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testObjLiteralNarrowing",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMixed",
            "args": [
                {
                    "type": "((uint64))[]",
                    "name": "m"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        25
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        615
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        578,
                        582
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        358,
                        390,
                        547
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        143
                    ],
                    "errorMessage": "getVal should only be called once"
                },
                {
                    "pc": [
                        154
                    ],
                    "errorMessage": "getVal should still be called once even though its result is not used"
                },
                {
                    "pc": [
                        425,
                        434
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        256
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        105,
                        178,
                        205,
                        218,
                        270,
                        339,
                        371,
                        398,
                        449,
                        472
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        183
                    ],
                    "errorMessage": "invalid number of bytes for Object3EB715E7"
                },
                {
                    "pc": [
                        210
                    ],
                    "errorMessage": "invalid number of bytes for ReadonlyObject3EB715E7"
                },
                {
                    "pc": [
                        113
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<Object7CFAF5D6>"
                },
                {
                    "pc": [
                        292
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<uint64>>"
                },
                {
                    "pc": [
                        407,
                        457,
                        480
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<uint64>"
                },
                {
                    "pc": [
                        312
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>"
                },
                {
                    "pc": [
                        303
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<uint64,uint64>"
                },
                {
                    "pc": [
                        122,
                        129,
                        414,
                        465,
                        605
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        170,
                        197
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))"
                },
                {
                    "pc": [
                        264
                    ],
                    "errorMessage": "invalid tail pointer for (len+(len+uint64[])[])"
                },
                {
                    "pc": [
                        165,
                        192
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        522
                    ],
                    "errorMessage": "logAndReturn called 3 times"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQACCCYBAgACI4AARwMxG0ECSjEZFEQxGESCCQRwLqEIBO3ahekEWy93EwSQzMs9BNi+k78EWj/sWgQnpPNnBNbJ9IYEbgOtDDYaAI4JAfQB2gFZASYAxAByADoAEQABADYaAUkjWSULJAhMFRJEIkM2GgEVJRJENhoCFSUSRCM1ADQAIgg1ADQAIhJENAAiCDUANAAkEkQiQzYaAUkVSwElWUmBChJETwJMSwJSI1mBDAgSRDYaAkkVSwElWUmBChJETwJMSwJSI1mBDAgSRCJDNhoBSSNZSUUGJAtFA0kVRQJXAgBFBSNFA0sCSwQMQQAnSwJJJAtLBklPAllJSwVJTgQSREsBFVIjWSULJAgIRQMiCEUDQv/RSwEkCEsBEkQiQzYaAUkVgRASRDYaAkkVgRASREkjW0wlW0sCI1tPAyVbSwEWKExQSwEWUEkjWSQSSwEkW08EEhBMgQpbTwISEERLARYoTFBLARZQSSNZJBJLASRbTwQSEEyBCltPAhIQRCJDNhoBSSNZJQskCEsBFRJENhoCFSUSREkkW0kiCBZLAkxcAkwkCBZPAkxcAkwkW0wkWxNDNhoBSSNZJQskCEwVEkQ2GgJJFSUSRBc2GgNJI1klCyQITBUSRCM1ADQAIgg1AEkWSbA0ACIINQBJsDQAIgg1AEmwSUsBUEsBUDQAgQMSREkjW0sDEiIQSwElW0sEEhBMgRBbTwMSEEQ0ACIINQBJsDQAIgg1AEmwNAAiCDUAsCJDMgpJcwBETHMBREwWTBZQgAQVH3x1TFCwIkM2GgEVJRJEIkMxGRQxGBQQRCJD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}