{
    "name": "AssignmentsAlgo",
    "structs": {
        "Object3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ],
        "ReadonlyObject3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testPrimitives",
            "args": [
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayDestructure",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "i_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64[]",
                    "name": "m_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayNarrowing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "m_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testTupleToArray",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "m_t"
                },
                {
                    "type": "(uint64,uint64)",
                    "name": "i_t"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNested",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "i_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDestructureObj",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "Object3EB715E7",
                    "name": "m"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "ReadonlyObject3EB715E7",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testObjLiteralNarrowing",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMixed",
            "args": [
                {
                    "type": "((uint64))[]",
                    "name": "m"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        96,
                        109,
                        122,
                        135,
                        154,
                        323,
                        368,
                        505
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        230,
                        258,
                        301,
                        454,
                        487
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        523
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        99,
                        112,
                        125,
                        138,
                        157,
                        326,
                        371,
                        508
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        144
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        414
                    ],
                    "errorMessage": "logAndReturn called 3 times"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDIgOAogICAgYnl0ZWNibG9jayAweDAwMDIKICAgIGludGNfMSAvLyAwCiAgICBkdXBuIDIKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA2CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoxOS0yMAogICAgLy8gQGNvbnRyYWN0KHsgc2NyYXRjaFNsb3RzOiBbY291bnRTbG90XSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEFzc2lnbm1lbnRzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweDcwMmVhMTA4IDB4NWIyZjc3MTMgMHg5MGNjY2IzZCAweGQ4YmU5M2JmIDB4NWEzZmVjNWEgMHgyN2E0ZjM2NyAweGQ2YzlmNDg2IDB4NmUwM2FkMGMgLy8gbWV0aG9kICJ0ZXN0UHJpbWl0aXZlcyh1aW50NjQpdm9pZCIsIG1ldGhvZCAidGVzdEFycmF5RGVzdHJ1Y3R1cmUodWludDY0W10sdWludDY0LHVpbnQ2NFtdKXZvaWQiLCBtZXRob2QgInRlc3RBcnJheU5hcnJvd2luZyh1aW50NjRbXSx1aW50NjQpdm9pZCIsIG1ldGhvZCAidGVzdFR1cGxlVG9BcnJheSgodWludDY0LHVpbnQ2NCksKHVpbnQ2NCx1aW50NjQpKXZvaWQiLCBtZXRob2QgInRlc3ROZXN0ZWQodWludDY0W11bXSl2b2lkIiwgbWV0aG9kICJ0ZXN0RGVzdHJ1Y3R1cmVPYmooKHVpbnQ2NCxzdHJpbmcpLCh1aW50NjQsc3RyaW5nKSl2b2lkIiwgbWV0aG9kICJ0ZXN0T2JqTGl0ZXJhbE5hcnJvd2luZyh1aW50NjQsdWludDY0KXZvaWQiLCBtZXRob2QgInRlc3RNaXhlZCgoKHVpbnQ2NCkpW10pdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fdGVzdFByaW1pdGl2ZXNfcm91dGVAMyBtYWluX3Rlc3RBcnJheURlc3RydWN0dXJlX3JvdXRlQDQgbWFpbl90ZXN0QXJyYXlOYXJyb3dpbmdfcm91dGVANSBtYWluX3Rlc3RUdXBsZVRvQXJyYXlfcm91dGVANiBtYWluX3Rlc3ROZXN0ZWRfcm91dGVANyBtYWluX3Rlc3REZXN0cnVjdHVyZU9ial9yb3V0ZUA4IG1haW5fdGVzdE9iakxpdGVyYWxOYXJyb3dpbmdfcm91dGVAOSBtYWluX3Rlc3RNaXhlZF9yb3V0ZUAxMAoKbWFpbl9hZnRlcl9pZl9lbHNlQDE3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6MTktMjAKICAgIC8vIEBjb250cmFjdCh7IHNjcmF0Y2hTbG90czogW2NvdW50U2xvdF0gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBBc3NpZ25tZW50c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgYnVyeSA0CgptYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6OkFzc2lnbm1lbnRzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxODoKICAgIGRpZyAzCiAgICByZXR1cm4KCm1haW5fdGVzdE1peGVkX3JvdXRlQDEwOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6OTYKICAgIC8vIHRlc3RNaXhlZChtOiBBcnJheTx7IGE6IFt1aW50NjRdIH0+KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICBidXJ5IDQKICAgIGIgbWFpbl9hZnRlcl9pbmxpbmVkX3Rlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjpBc3NpZ25tZW50c0FsZ28uX19wdXlhX2FyYzRfcm91dGVyX19AMTgKCm1haW5fdGVzdE9iakxpdGVyYWxOYXJyb3dpbmdfcm91dGVAOToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjgzCiAgICAvLyB0ZXN0T2JqTGl0ZXJhbE5hcnJvd2luZyhhOiB1aW50NjQsIGI6IHVpbnQ2NCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgYnVyeSA0CiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo6QXNzaWdubWVudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX3Rlc3REZXN0cnVjdHVyZU9ial9yb3V0ZUA4OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6NzgKICAgIC8vIHRlc3REZXN0cnVjdHVyZU9iaihtOiB7IGE6IHVpbnQ2NDsgYjogc3RyaW5nIH0sIGk6IFJlYWRvbmx5PHsgYTogdWludDY0OyBiOiBzdHJpbmcgfT4pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIGJ1cnkgNAogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6OkFzc2lnbm1lbnRzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxOAoKbWFpbl90ZXN0TmVzdGVkX3JvdXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo3MwogICAgLy8gdGVzdE5lc3RlZChpX2E6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHlBcnJheTx1aW50NjQ+PikgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoxOS0yMAogICAgLy8gQGNvbnRyYWN0KHsgc2NyYXRjaFNsb3RzOiBbY291bnRTbG90XSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEFzc2lnbm1lbnRzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjc0CiAgICAvLyBjb25zdCBbW2FdXSA9IGlfYQogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBhc3NlcnQgLy8gaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjczCiAgICAvLyB0ZXN0TmVzdGVkKGlfYTogUmVhZG9ubHlBcnJheTxSZWFkb25seUFycmF5PHVpbnQ2ND4+KSB7CiAgICBpbnRjXzAgLy8gMQogICAgYnVyeSA0CiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo6QXNzaWdubWVudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX3Rlc3RUdXBsZVRvQXJyYXlfcm91dGVANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjYzCiAgICAvLyB0ZXN0VHVwbGVUb0FycmF5KG1fdDogW3VpbnQ2NCwgdWludDY0XSwgaV90OiByZWFkb25seSBbdWludDY0LCB1aW50NjRdKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjE5LTIwCiAgICAvLyBAY29udHJhY3QoeyBzY3JhdGNoU2xvdHM6IFtjb3VudFNsb3RdIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQXNzaWdubWVudHNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZHVwCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGJ1cnkgOAogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBidXJ5IDYKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjY0CiAgICAvLyBjb25zdCBtX2E6IHVpbnQ2NFtdID0gY2xvbmUobV90KQogICAgZHVwCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgY292ZXIgMgogICAgYnVyeSA0CiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgY292ZXIgMgogICAgYnVyeSAzCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGR1cAogICAgYnVyeSA5CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo2NQogICAgLy8gYXNzZXJ0TWF0Y2gobV9hLCBtX3QpCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyAyCiAgICA9PQogICAgZHVwCiAgICBidXJ5IDUKICAgIGJ6IG1haW5fYm9vbF9mYWxzZUAzMwogICAgZGlnIDcKICAgIGludGNfMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDIKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMzMKICAgIGRpZyA3CiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMzMKICAgIGludGNfMCAvLyAxCgptYWluX2Jvb2xfbWVyZ2VAMzQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo2NQogICAgLy8gYXNzZXJ0TWF0Y2gobV9hLCBtX3QpCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6NjcKICAgIC8vIGFzc2VydE1hdGNoKGlfYSwgbV90KQogICAgZGlnIDMKICAgIGJ6IG1haW5fYm9vbF9mYWxzZUAzOAogICAgZGlnIDcKICAgIGludGNfMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDIKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMzgKICAgIGRpZyA3CiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VAMzgKICAgIGludGNfMCAvLyAxCgptYWluX2Jvb2xfbWVyZ2VAMzk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo2NwogICAgLy8gYXNzZXJ0TWF0Y2goaV9hLCBtX3QpCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6NjkKICAgIC8vIGNvbnN0IGlfYTI6IHJlYWRvbmx5IHVpbnQ2NFtdID0gaV90CiAgICBkaWcgNQogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDAwMDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZGlnIDUKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZHVwCiAgICBidXJ5IDEwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo3MAogICAgLy8gYXNzZXJ0TWF0Y2goaV9hMiwgaV90KQogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gMgogICAgPT0KICAgIGJ6IG1haW5fYm9vbF9mYWxzZUA0MwogICAgZGlnIDgKICAgIGludGNfMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDYKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VANDMKICAgIGRpZyA4CiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDUKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VANDMKICAgIGludGNfMCAvLyAxCgptYWluX2Jvb2xfbWVyZ2VANDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo3MAogICAgLy8gYXNzZXJ0TWF0Y2goaV9hMiwgaV90KQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjYzCiAgICAvLyB0ZXN0VHVwbGVUb0FycmF5KG1fdDogW3VpbnQ2NCwgdWludDY0XSwgaV90OiByZWFkb25seSBbdWludDY0LCB1aW50NjRdKSB7CiAgICBpbnRjXzAgLy8gMQogICAgYnVyeSA0CiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo6QXNzaWdubWVudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX2Jvb2xfZmFsc2VANDM6CiAgICBpbnRjXzEgLy8gMAogICAgYiBtYWluX2Jvb2xfbWVyZ2VANDQKCm1haW5fYm9vbF9mYWxzZUAzODoKICAgIGludGNfMSAvLyAwCiAgICBiIG1haW5fYm9vbF9tZXJnZUAzOQoKbWFpbl9ib29sX2ZhbHNlQDMzOgogICAgaW50Y18xIC8vIDAKICAgIGIgbWFpbl9ib29sX21lcmdlQDM0CgptYWluX3Rlc3RBcnJheU5hcnJvd2luZ19yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6NDkKICAgIC8vIHRlc3RBcnJheU5hcnJvd2luZyhtX2E6IHVpbnQ2NFtdLCB1OiB1aW50NjQpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6MTktMjAKICAgIC8vIEBjb250cmFjdCh7IHNjcmF0Y2hTbG90czogW2NvdW50U2xvdF0gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBBc3NpZ25tZW50c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo1MQogICAgLy8gbV9hWzBdICs9IDEKICAgIGR1cAogICAgaW50Y18yIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBkaWcgMgogICAgc3dhcAogICAgcmVwbGFjZTIgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6NTIKICAgIC8vIGRpcmVjdFswXSArPSAyCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgaXRvYgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICByZXBsYWNlMiAyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo1MwogICAgLy8gYXNzZXJ0KG1fYVswXSAhPT0gZGlyZWN0WzBdKQogICAgc3dhcAogICAgaW50Y18yIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBzd2FwCiAgICBpbnRjXzIgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgICE9CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjQ5CiAgICAvLyB0ZXN0QXJyYXlOYXJyb3dpbmcobV9hOiB1aW50NjRbXSwgdTogdWludDY0KSB7CiAgICBpbnRjXzAgLy8gMQogICAgYnVyeSA0CiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo6QXNzaWdubWVudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgptYWluX3Rlc3RBcnJheURlc3RydWN0dXJlX3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoyOQogICAgLy8gdGVzdEFycmF5RGVzdHJ1Y3R1cmUoaV9hOiBSZWFkb25seUFycmF5PHVpbnQ2ND4sIHU6IHVpbnQ2NCwgbV9hOiB1aW50NjRbXSkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoxOS0yMAogICAgLy8gQGNvbnRyYWN0KHsgc2NyYXRjaFNsb3RzOiBbY291bnRTbG90XSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEFzc2lnbm1lbnRzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIGR1cAogICAgYnVyeSA0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo5CiAgICAvLyBvcC5TY3JhdGNoLnN0b3JlKGNvdW50U2xvdCwgMCkKICAgIGludGNfMSAvLyAwCiAgICBzdG9yZSAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czozNAogICAgLy8gY29uc3QgYTUgPSAoW2EyLCBhM10gPSBbbG9nQW5kUmV0dXJuKHUpLCBsb2dBbmRSZXR1cm4odSksIGxvZ0FuZFJldHVybih1KV0pCiAgICBkdXAKICAgIGNhbGxzdWIgbG9nQW5kUmV0dXJuCiAgICBkaWcgMQogICAgY2FsbHN1YiBsb2dBbmRSZXR1cm4KICAgIGRpZyAyCiAgICBjYWxsc3ViIGxvZ0FuZFJldHVybgogICAgZGlnIDIKICAgIGl0b2IKICAgIGRpZyAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZHVwCiAgICBidXJ5IDE0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoxMgogICAgLy8gcmV0dXJuIG9wLlNjcmF0Y2gubG9hZFVpbnQ2NChjb3VudFNsb3QpCiAgICBsb2FkIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjM1CiAgICAvLyBhc3NlcnQoZ2V0Q291bnQoKSA9PT0gMywgJ2xvZ0FuZFJldHVybiBjYWxsZWQgMyB0aW1lcycpCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIGFzc2VydCAvLyBsb2dBbmRSZXR1cm4gY2FsbGVkIDMgdGltZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjM2CiAgICAvLyBhc3NlcnQoYTIgPT09IHUpCiAgICB1bmNvdmVyIDIKICAgIGRpZyAzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czozNwogICAgLy8gYXNzZXJ0KGEzID09PSB1KQogICAgc3dhcAogICAgZGlnIDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjM4CiAgICAvLyBhc3NlcnRNYXRjaChhNSwgW3UsIHUsIHVdKQogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICA9PQogICAgYnogbWFpbl9ib29sX2ZhbHNlQDUyCiAgICBkaWcgOQogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMwogICAgPT0KICAgIGJ6IG1haW5fYm9vbF9mYWxzZUA1MgogICAgZGlnIDkKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMwogICAgPT0KICAgIGJ6IG1haW5fYm9vbF9mYWxzZUA1MgogICAgaW50Y18wIC8vIDEKCm1haW5fYm9vbF9tZXJnZUA1MzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjM4CiAgICAvLyBhc3NlcnRNYXRjaChhNSwgW3UsIHUsIHVdKQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjQyCiAgICAvLyBjb25zdCBbYywgZF0gPSBbbG9nQW5kUmV0dXJuKHUpLCBsb2dBbmRSZXR1cm4odSksIGxvZ0FuZFJldHVybih1KV0KICAgIGRpZyAyCiAgICBkdXAKICAgIGNhbGxzdWIgbG9nQW5kUmV0dXJuCiAgICBkaWcgMQogICAgY2FsbHN1YiBsb2dBbmRSZXR1cm4KICAgIGJ1cnkgOQogICAgZGlnIDEKICAgIGNhbGxzdWIgbG9nQW5kUmV0dXJuCiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjQzCiAgICAvLyBhc3NlcnRNYXRjaChbYywgZF0sIFt1LCB1XSkKICAgID09CiAgICBieiBtYWluX2Jvb2xfZmFsc2VANTYKICAgIGRpZyA2CiAgICBkaWcgMwogICAgPT0KICAgIGJ6IG1haW5fYm9vbF9mYWxzZUA1NgogICAgaW50Y18wIC8vIDEKCm1haW5fYm9vbF9tZXJnZUA1NzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjQzCiAgICAvLyBhc3NlcnRNYXRjaChbYywgZF0sIFt1LCB1XSkKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoyOQogICAgLy8gdGVzdEFycmF5RGVzdHJ1Y3R1cmUoaV9hOiBSZWFkb25seUFycmF5PHVpbnQ2ND4sIHU6IHVpbnQ2NCwgbV9hOiB1aW50NjRbXSkgewogICAgaW50Y18wIC8vIDEKICAgIGJ1cnkgNAogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6OkFzc2lnbm1lbnRzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxOAoKbWFpbl9ib29sX2ZhbHNlQDU2OgogICAgaW50Y18xIC8vIDAKICAgIGIgbWFpbl9ib29sX21lcmdlQDU3CgptYWluX2Jvb2xfZmFsc2VANTI6CiAgICBpbnRjXzEgLy8gMAogICAgYiBtYWluX2Jvb2xfbWVyZ2VANTMKCm1haW5fdGVzdFByaW1pdGl2ZXNfcm91dGVAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjIxCiAgICAvLyB0ZXN0UHJpbWl0aXZlcyh1OiB1aW50NjQpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIGJ1cnkgNAogICAgYiBtYWluX2FmdGVyX2lubGluZWRfdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6OkFzc2lnbm1lbnRzQWxnby5fX3B1eWFfYXJjNF9yb3V0ZXJfX0AxOAoKbWFpbl9iYXJlX3JvdXRpbmdAMTM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoxOS0yMAogICAgLy8gQGNvbnRyYWN0KHsgc2NyYXRjaFNsb3RzOiBbY291bnRTbG90XSB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEFzc2lnbm1lbnRzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTcKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgYnVyeSA0CiAgICBiIG1haW5fYWZ0ZXJfaW5saW5lZF90ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czo6QXNzaWdubWVudHNBbGdvLl9fcHV5YV9hcmM0X3JvdXRlcl9fQDE4CgoKLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6OmxvZ0FuZFJldHVybih1OiB1aW50NjQpIC0+IHVpbnQ2NDoKbG9nQW5kUmV0dXJuOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6MTE0CiAgICAvLyBmdW5jdGlvbiBsb2dBbmRSZXR1cm4odTogdWludDY0KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2lnbm1lbnRzLmFsZ28udHM6MTYKICAgIC8vIG9wLlNjcmF0Y2guc3RvcmUoY291bnRTbG90LCBvcC5TY3JhdGNoLmxvYWRVaW50NjQoY291bnRTbG90KSArIDEpCiAgICBsb2FkIDAKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBzdG9yZSAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzaWdubWVudHMuYWxnby50czoxMTYKICAgIC8vIGxvZyh1KQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBsb2cKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NpZ25tZW50cy5hbGdvLnRzOjExNwogICAgLy8gcmV0dXJuIHUKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQACCCYBAgACI0cCgABHBjEbQQHrgggEcC6hCARbL3cTBJDMyz0E2L6TvwRaP+xaBCek82cE1sn0hgRuA60MNhoAjggBnwEWAOkAQAAtACAAEwAGI0UESwNDMRkURDEYRCJFBEL/8DEZFEQxGEQiRQRC/+MxGRREMRhEIkUEQv/WMRkURDEYRDYaASNZRCJFBEL/wzEZFEQxGEQ2GgE2GgJJI1tFCCVbRQZJI1tJTgJFBCVbSU4CRQMWKExQTBZQSUUJI1kkEklFBUEAbEsHJFtLAhJBAGJLB4EKW0sBEkEAVyJESwNBAExLByRbSwISQQBCSweBCltLARJBADciREsFFihMUEsFFlBJRQojWSQSQQAdSwgkW0sGEkEAE0sIgQpbSwUSQQAIIkQiRQRC/yYjQv/1I0L/xiNC/6YxGRREMRhENhoBSSRbSSIIFksCTFwCTCQIFk8CTFwCTCRbTCRbE0QiRQRC/u0xGRREMRhENhoCF0lFBCM1AEmIAJBLAYgAi0sCiACGSwIWSwIWUEwWUElFDjQAgQMSRE8CSwMSRExLAhJEI1sSQQBCSwklW0sDEkEAOEsJgRBbSwMSQQAtIkRLAkmIAEVLAYgAQEUJSwGIADlIEkEAEEsGSwMSQQAIIkQiRQRC/mwjQv/1I0L/0DEZFEQxGEQiRQRC/lcxGUD+TzEYFEQiRQRC/kiKAQE0ACIINQCL/xawi/+J",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}