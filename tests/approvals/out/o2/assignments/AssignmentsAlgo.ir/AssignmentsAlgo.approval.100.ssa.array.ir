main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L19
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testPrimitives(uint64)void" => block@4, method "testAccountDestructure()(uint64,uint64)" => block@5, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@6, method "testArrayNarrowing(uint64[],uint64)void" => block@7, method "testTupleToArray((uint64,uint64),(uint64,uint64))void" => block@8, method "testNested(uint64[][])void" => block@9, method "testDestructureObj((uint64,string),(uint64,string))void" => block@10, method "testObjLiteralNarrowing(uint64,uint64)void" => block@11, method "testMixed(((uint64))[])void" => block@12, * => block@15}
    block@4: // testPrimitives_route_L21
        let tmp%0#13: bytes = (txna ApplicationArgs 1)
        let len%0#5: uint64 = (len tmp%0#13)
        let eq%0#5: bool = (== len%0#5 8u)
        (assert eq%0#5) // invalid number of bytes for uint64
        exit 1u
    block@5: // testAccountDestructure_route_L29
        let awst_tmp%0#1: account = (global CurrentApplicationAddress)
        let (balance#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) awst_tmp%0#1)
        (assert check%0#0) // account funded
        let (minBalance#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) awst_tmp%0#1)
        (assert check%1#0) // account funded
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob balance#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob minBalance#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#12: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let tmp%1#6: bytes = (concat 0x151f7c75 tmp%0#12)
        (log tmp%1#6)
        exit 1u
    block@6: // testArrayDestructure_route_L34
        let i_a#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 i_a#1 0u)
        let length%0#2: uint64 = aggregate%array_length%0#0
        let mul%0#2: uint64 = (* length%0#2 8u)
        let add%0#2: uint64 = (+ mul%0#2 2u)
        let len%0#4: uint64 = (len i_a#1)
        let eq%0#4: bool = (== len%0#4 add%0#2)
        (assert eq%0#4) // invalid number of bytes for (len+uint64[])
        let tmp%1#5: bytes = (txna ApplicationArgs 2)
        let len%1#3: uint64 = (len tmp%1#5)
        let eq%1#3: bool = (== len%1#3 8u)
        (assert eq%1#3) // invalid number of bytes for uint64
        let u#0: uint64 = (btoi tmp%1#5)
        let m_a#3: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 m_a#3 0u)
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 8u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%2#0: uint64 = (len m_a#3)
        let eq%2#0: bool = (== len%2#0 add%1#0)
        (assert eq%2#0) // invalid number of bytes for (len+uint64[])
        ((store 0) 0u)
        let tmp%0#22: uint64 = (load 0)
        let tmp%1#9: uint64 = (+ tmp%0#22 1u)
        ((store 0) tmp%1#9)
        let tmp%0#16: bytes[8] = (itob u#0)
        (log tmp%0#16)
        let tmp%0#23: uint64 = (load 0)
        let tmp%1#10: uint64 = (+ tmp%0#23 1u)
        ((store 0) tmp%1#10)
        (log tmp%0#16)
        let tmp%0#24: uint64 = (load 0)
        let tmp%1#11: uint64 = (+ tmp%0#24 1u)
        ((store 0) tmp%1#11)
        (log tmp%0#16)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = aggregate%head%4#0
        let a5#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#0
        let tmp%0#19: uint64 = (load 0)
        let tmp%6#3: bool = (== tmp%0#19 3u)
        (assert tmp%6#3) // logAndReturn called 3 times
        let aggregate%extract%0#0: bytes = (extract3 a5#0 0u 8u)
        let tuple_item%0#1: Encoded(uint64) = aggregate%extract%0#0
        let values%2#2: uint64 = (btoi tuple_item%0#1)
        let tmp%10#1: bool = (== values%2#2 u#0)
        let tmp%11#2: bool = (&& 1u tmp%10#1)
        let aggregate%extract%1#0: bytes = (extract3 a5#0 8u 8u)
        let tuple_item%1#1: Encoded(uint64) = aggregate%extract%1#0
        let values%3#1: uint64 = (btoi tuple_item%1#1)
        let tmp%12#1: bool = (== values%3#1 u#0)
        let tmp%13#1: bool = (&& tmp%11#2 tmp%12#1)
        let aggregate%extract%2#0: bytes = (extract3 a5#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%4#1: uint64 = (btoi tuple_item%2#0)
        let tmp%14#1: bool = (== values%4#1 u#0)
        let tmp%15#1: bool = (&& tmp%13#1 tmp%14#1)
        (assert tmp%15#1) // assert target is match for conditions
        let tmp%0#25: uint64 = (load 0)
        let tmp%1#12: uint64 = (+ tmp%0#25 1u)
        ((store 0) tmp%1#12)
        (log tmp%0#16)
        let tmp%0#26: uint64 = (load 0)
        let tmp%1#13: uint64 = (+ tmp%0#26 1u)
        ((store 0) tmp%1#13)
        (log tmp%0#16)
        let tmp%0#27: uint64 = (load 0)
        let tmp%1#14: uint64 = (+ tmp%0#27 1u)
        ((store 0) tmp%1#14)
        (log tmp%0#16)
        exit 1u
    block@7: // testArrayNarrowing_route_L54
        let m_a#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 m_a#1 0u)
        let length%0#1: uint64 = aggregate%array_length%2#0
        let mul%0#1: uint64 = (* length%0#1 8u)
        let add%0#1: uint64 = (+ mul%0#1 2u)
        let len%0#3: uint64 = (len m_a#1)
        let eq%0#3: bool = (== len%0#3 add%0#1)
        (assert eq%0#3) // invalid number of bytes for (len+uint64[])
        let tmp%1#3: bytes = (txna ApplicationArgs 2)
        let len%1#2: uint64 = (len tmp%1#3)
        let eq%1#2: bool = (== len%1#2 8u)
        (assert eq%1#2) // invalid number of bytes for uint64
        let aggregate%total_length%0#0: uint64 = (len m_a#1)
        let aggregate%array_trimmed%0#0: bytes = (substring3 m_a#1 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#2: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#1: uint64 = (btoi array_item%0#2)
        let tmp%0#8: uint64 = (+ values%0#1 1u)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%0#8)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#0
        let aggregate%total_length%1#0: uint64 = (len m_a#1)
        let aggregate%array_trimmed%1#0: bytes = (substring3 m_a#1 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 m_a#1 aggregate%write_offset_with_length_header%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let m_a#2: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        let tmp%1#4: uint64 = (+ values%0#1 2u)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%1#4)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%6#0
        let aggregate%total_length%2#0: uint64 = (len m_a#1)
        let aggregate%array_trimmed%2#0: bytes = (substring3 m_a#1 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%1#0: uint64 = (+ aggregate%write_offset%1#0 2u)
        let aggregate%updated_array%1#0: bytes = (replace3 m_a#1 aggregate%write_offset_with_length_header%1#0 encoded_value%1#0) // on error: index access is out of bounds
        let direct#1: Encoded(len+uint64[]) = aggregate%updated_array%1#0
        let aggregate%total_length%3#0: uint64 = (len m_a#2)
        let aggregate%array_trimmed%3#0: bytes = (substring3 m_a#2 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%2#1: uint64 = (btoi array_item%2#0)
        let aggregate%total_length%4#0: uint64 = (len direct#1)
        let aggregate%array_trimmed%4#0: bytes = (substring3 direct#1 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%2#5: bool = (!= values%2#1 values%3#0)
        (assert tmp%2#5)
        exit 1u
    block@8: // testTupleToArray_route_L68
        let m_t#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#2: uint64 = (len m_t#0)
        let eq%0#2: bool = (== len%0#2 16u)
        (assert eq%0#2) // invalid number of bytes for (uint64,uint64)
        let tmp%1#1: bytes = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len tmp%1#1)
        let eq%1#1: bool = (== len%1#1 16u)
        (assert eq%1#1) // invalid number of bytes for (uint64,uint64)
        let aggregate%extract%3#0: bytes = (extract3 tmp%1#1 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%3#0)
        let aggregate%extract%4#0: bytes = (extract3 tmp%1#1 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%4#0)
        let (i_t.0#0: uint64, i_t.1#0: uint64) = (aggregate%item0%0#0, aggregate%item1%0#0)
        let aggregate%extract%5#0: bytes = (extract3 m_t#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%5#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%6#0: bytes = (extract3 m_t#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%6#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%5#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%6#0
        let m_a#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 m_a#0 0u)
        let tmp%0#6: uint64 = aggregate%array_length%3#0
        let tmp%1#2: bool = (== tmp%0#6 2u)
        let aggregate%total_length%5#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%5#0: bytes = (substring3 m_a#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%0#1: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%2#0: uint64 = (btoi array_item%0#1)
        let tmp%2#3: bool = (== values%2#0 values%0#0)
        let tmp%3#4: bool = (&& tmp%1#2 tmp%2#3)
        let aggregate%total_length%6#0: uint64 = (len m_a#0)
        let aggregate%array_trimmed%6#0: bytes = (substring3 m_a#0 2u aggregate%total_length%6#0)
        let aggregate%bytes_offset%6#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%6#0: bytes = (extract3 aggregate%array_trimmed%6#0 aggregate%bytes_offset%6#0 8u) // on error: index access is out of bounds
        let array_item%1#1: Encoded(uint64) = aggregate%encoded_element%6#0
        let values%4#0: uint64 = (btoi array_item%1#1)
        let tmp%4#2: bool = (== values%4#0 values%1#0)
        let tmp%5#1: bool = (&& tmp%3#4 tmp%4#2)
        (assert tmp%5#1) // assert target is match for conditions
        let aggregate%array_length%4#0: uint64 = (extract_uint16 m_a#0 0u)
        let tmp%6#2: uint64 = aggregate%array_length%4#0
        let tmp%7#2: bool = (== tmp%6#2 2u)
        let tmp%9#1: bool = (&& tmp%7#2 tmp%2#3)
        let tmp%11#1: bool = (&& tmp%9#1 tmp%4#2)
        (assert tmp%11#1) // assert target is match for conditions
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob i_t.0#0)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%7#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob i_t.1#0)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%8#0
        let i_a2#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let aggregate%array_length%5#0: uint64 = (extract_uint16 i_a2#0 0u)
        let tmp%12#0: uint64 = aggregate%array_length%5#0
        let tmp%13#0: bool = (== tmp%12#0 2u)
        let aggregate%total_length%7#0: uint64 = (len i_a2#0)
        let aggregate%array_trimmed%7#0: bytes = (substring3 i_a2#0 2u aggregate%total_length%7#0)
        let aggregate%bytes_offset%7#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%7#0: bytes = (extract3 aggregate%array_trimmed%7#0 aggregate%bytes_offset%7#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%7#0
        let values%12#0: uint64 = (btoi array_item%4#0)
        let tmp%14#0: bool = (== values%12#0 i_t.0#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        let aggregate%total_length%8#0: uint64 = (len i_a2#0)
        let aggregate%array_trimmed%8#0: bytes = (substring3 i_a2#0 2u aggregate%total_length%8#0)
        let aggregate%bytes_offset%8#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%8#0: bytes = (extract3 aggregate%array_trimmed%8#0 aggregate%bytes_offset%8#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%8#0
        let values%13#0: uint64 = (btoi array_item%5#0)
        let tmp%16#0: bool = (== values%13#0 i_t.1#0)
        let tmp%17#0: bool = (&& tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // assert target is match for conditions
        exit 1u
    block@9: // testNested_route_L78
        exit 1u
    block@10: // testDestructureObj_route_L83
        exit 1u
    block@11: // testObjLiteralNarrowing_route_L88
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#2)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for uint64
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        ((store 0) 0u)
        let tmp%0#20: uint64 = (load 0)
        let tmp%1#7: uint64 = (+ tmp%0#20 1u)
        ((store 0) tmp%1#7)
        let tmp%0#14: uint64 = (load 0)
        let tmp%4#1: bool = (== tmp%0#14 1u)
        (assert tmp%4#1) // getVal should only be called once
        let tmp%0#21: uint64 = (load 0)
        let tmp%1#8: uint64 = (+ tmp%0#21 1u)
        ((store 0) tmp%1#8)
        let tmp%0#15: uint64 = (load 0)
        let tmp%7#1: bool = (== tmp%0#15 2u)
        (assert tmp%7#1) // getVal should still be called once even though its result is not used
        exit 1u
    block@12: // testMixed_route_L103
        let m#0: Encoded(len+((uint64))[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 m#0 0u)
        let length%0#0: uint64 = aggregate%array_length%6#0
        let mul%0#0: uint64 = (* length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len m#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+((uint64))[])
        exit 1u
    block@15: // after_if_else_L19
        fail
    block@16: // __algots__.defaultCreate_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#1)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#1 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@4: // after_for_L342
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let tmp%3#1: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#1)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#1 <- block@0, value_internal%0#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L282
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#0 <- block@0, value_internal%0#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L342
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1