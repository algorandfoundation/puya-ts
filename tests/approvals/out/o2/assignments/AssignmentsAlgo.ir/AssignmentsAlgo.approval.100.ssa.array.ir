main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L19
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@3, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@4, method "testArrayNarrowing(uint64[],uint64)void" => block@5, method "testTupleToArray((uint64,uint64),(uint64,uint64))void" => block@6, method "testNested(uint64[][])void" => block@7, method "testDestructureObj((uint64,string),(uint64,string))void" => block@8, method "testObjLiteralNarrowing(uint64,uint64)void" => block@9, method "testMixed(((uint64))[])void" => block@10, * => block@17}
    block@3: // testPrimitives_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let u#2: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // testArrayDestructure_route_L29
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let i_a#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let u#1: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let m_a#3: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) i_a#1)
        let aggregate%bytes_offset%0#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#4: Encoded(uint64) = aggregate%encoded_element%0#1
        let a1#2: uint64 = (btoi array_item%0#4)
        ((store 0) 0u)
        let a2#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let a3#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let tmp%3#1: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a2#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob a3#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%3#1)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#1: Encoded(uint64,uint64,uint64) = aggregate%head%2#1
        let a5#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#1
        let tmp%0#7: uint64 = (load 0)
        let tmp%6#2: bool = (== tmp%0#7 3u)
        (assert tmp%6#2) // logAndReturn called 3 times
        let tmp%7#2: bool = (== a2#0 u#1)
        (assert tmp%7#2)
        let tmp%8#2: bool = (== a3#0 u#1)
        (assert tmp%8#2)
        let aggregate%extract%0#1: bytes = (extract3 a5#0 0u 8u)
        let tuple_item%0#3: Encoded(uint64) = aggregate%extract%0#1
        let values%2#2: uint64 = (btoi tuple_item%0#3)
        let tmp%10#1: bool = (== values%2#2 u#1)
        goto tmp%10#1 ? block@49 : block@52
    block@49: // and_contd_L38
        let aggregate%extract%1#1: bytes = (extract3 a5#0 8u 8u)
        let tuple_item%1#3: Encoded(uint64) = aggregate%extract%1#1
        let values%3#1: uint64 = (btoi tuple_item%1#3)
        let tmp%11#1: bool = (== values%3#1 u#1)
        goto tmp%11#1 ? block@50 : block@52
    block@50: // and_contd_L38
        let aggregate%extract%2#1: bytes = (extract3 a5#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%4#1: uint64 = (btoi tuple_item%2#0)
        let tmp%12#1: bool = (== values%4#1 u#1)
        goto tmp%12#1 ? block@51 : block@52
    block@51: // bool_true_L38
        let and_result%0#3: bool = 1u
        goto block@53
    block@52: // bool_false_L38
        let and_result%0#4: bool = 0u
        goto block@53
    block@53: // bool_merge_L38
        let and_result%0#5: bool = φ(and_result%0#3 <- block@51, and_result%0#4 <- block@52)
        (assert and_result%0#5) // assert target is match for conditions
        let c#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let d#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let tmp%17#1: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let tmp%19#1: bool = (== c#0 u#1)
        goto tmp%19#1 ? block@54 : block@56
    block@54: // and_contd_L43
        let tmp%20#1: bool = (== d#0 u#1)
        goto tmp%20#1 ? block@55 : block@56
    block@55: // bool_true_L43
        let and_result%1#3: bool = 1u
        goto block@57
    block@56: // bool_false_L43
        let and_result%1#4: bool = 0u
        goto block@57
    block@57: // bool_merge_L43
        let and_result%1#5: bool = φ(and_result%1#3 <- block@55, and_result%1#4 <- block@56)
        (assert and_result%1#5) // assert target is match for conditions
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) m_a#3)
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%2#2: Encoded(uint64) = aggregate%encoded_element%1#1
        let a6#0: uint64 = (btoi array_item%2#2)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) m_a#3)
        let aggregate%bytes_offset%2#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%3#2: Encoded(uint64) = aggregate%encoded_element%2#1
        let a7#0: uint64 = (btoi array_item%3#2)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // testArrayNarrowing_route_L49
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let m_a#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let u#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) m_a#1)
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%0#3: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%0#1: uint64 = (btoi array_item%0#3)
        let tmp%0#5: uint64 = (+ values%0#1 1u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%0#5)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#1
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) m_a#1)
        let aggregate%bytes_offset%4#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%4#1 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%0#1: uint64 = (+ aggregate%write_offset%0#1 2u)
        let aggregate%updated_array%0#1: bytes = (replace3 m_a#1 aggregate%write_offset_with_length_header%0#1 encoded_value%0#0)
        let m_a#2: Encoded(len+uint64[]) = aggregate%updated_array%0#1
        let tmp%1#3: uint64 = (+ values%0#1 2u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%1#3)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%4#1
        let aggregate%array_trimmed%5#1: bytes = ((extract 2 0) m_a#1)
        let aggregate%bytes_offset%5#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 aggregate%array_trimmed%5#1 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%1#1: uint64 = (+ aggregate%write_offset%1#1 2u)
        let aggregate%updated_array%1#1: bytes = (replace3 m_a#1 aggregate%write_offset_with_length_header%1#1 encoded_value%1#0)
        let direct#1: Encoded(len+uint64[]) = aggregate%updated_array%1#1
        let aggregate%array_trimmed%6#1: bytes = ((extract 2 0) m_a#2)
        let aggregate%bytes_offset%6#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 aggregate%array_trimmed%6#1 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%2#1: Encoded(uint64) = aggregate%encoded_element%6#1
        let values%2#1: uint64 = (btoi array_item%2#1)
        let aggregate%array_trimmed%7#1: bytes = ((extract 2 0) direct#1)
        let aggregate%bytes_offset%7#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%7#1: bytes = (extract3 aggregate%array_trimmed%7#1 aggregate%bytes_offset%7#1 8u) // on error: index access is out of bounds
        let array_item%3#1: Encoded(uint64) = aggregate%encoded_element%7#1
        let values%3#0: uint64 = (btoi array_item%3#1)
        let tmp%2#2: bool = (!= values%2#1 values%3#0)
        (assert tmp%2#2)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%head%3#1: bytes = (concat aggregate%len_u16%0#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%head%4#1: bytes = (concat aggregate%head%3#1 aggregate%as_Encoded(uint64)%6#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%head%5#1: bytes = (concat aggregate%head%4#1 aggregate%as_Encoded(uint64)%7#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%head%5#1
        let fromLit#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // testTupleToArray_route_L63
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let m_t#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let aggregate%extract%3#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%3#1)
        let aggregate%extract%4#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 8u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%4#1)
        let (i_t.0#0: uint64, i_t.1#0: uint64) = (aggregate%item0%0#1, aggregate%item1%0#1)
        let aggregate%extract%5#1: bytes = (extract3 m_t#0 0u 8u)
        let tuple_item%0#2: Encoded(uint64) = aggregate%extract%5#1
        let values%0#0: uint64 = (btoi tuple_item%0#2)
        let aggregate%extract%6#1: bytes = (extract3 m_t#0 8u 8u)
        let tuple_item%1#2: Encoded(uint64) = aggregate%extract%6#1
        let values%1#0: uint64 = (btoi tuple_item%1#2)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%8#1: Encoded(uint64) = aggregate%val_as_bytes%8#1
        let aggregate%head%6#1: bytes = (concat aggregate%len_u16%1#1 aggregate%as_Encoded(uint64)%8#1)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%9#1: Encoded(uint64) = aggregate%val_as_bytes%9#1
        let aggregate%head%7#1: bytes = (concat aggregate%head%6#1 aggregate%as_Encoded(uint64)%9#1)
        let aggregate%as_Encoded(len+uint64[])%1#1: Encoded(len+uint64[]) = aggregate%head%7#1
        let m_a#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#1
        let array_length%0#0: uint64 = (extract_uint16 m_a#0 0u)
        let tmp%0#4: bool = (== array_length%0#0 2u)
        goto tmp%0#4 ? block@30 : block@33
    block@30: // and_contd_L65
        let aggregate%array_trimmed%8#1: bytes = ((extract 2 0) m_a#0)
        let aggregate%bytes_offset%8#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%8#1: bytes = (extract3 aggregate%array_trimmed%8#1 aggregate%bytes_offset%8#1 8u) // on error: index access is out of bounds
        let array_item%0#2: Encoded(uint64) = aggregate%encoded_element%8#1
        let values%2#0: uint64 = (btoi array_item%0#2)
        let tmp%1#2: bool = (== values%2#0 values%0#0)
        goto tmp%1#2 ? block@31 : block@33
    block@31: // and_contd_L65
        let aggregate%array_trimmed%9#1: bytes = ((extract 2 0) m_a#0)
        let aggregate%bytes_offset%9#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%9#1: bytes = (extract3 aggregate%array_trimmed%9#1 aggregate%bytes_offset%9#1 8u) // on error: index access is out of bounds
        let array_item%1#1: Encoded(uint64) = aggregate%encoded_element%9#1
        let values%4#0: uint64 = (btoi array_item%1#1)
        let tmp%2#1: bool = (== values%4#0 values%1#0)
        goto tmp%2#1 ? block@32 : block@33
    block@32: // bool_true_L65
        let and_result%0#0: bool = 1u
        goto block@34
    block@33: // bool_false_L65
        let and_result%0#1: bool = 0u
        goto block@34
    block@34: // bool_merge_L65
        let and_result%0#2: bool = φ(and_result%0#0 <- block@32, and_result%0#1 <- block@33)
        (assert and_result%0#2) // assert target is match for conditions
        goto tmp%0#4 ? block@35 : block@38
    block@35: // and_contd_L67
        let aggregate%array_trimmed%10#1: bytes = ((extract 2 0) m_a#0)
        let aggregate%bytes_offset%10#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%10#1: bytes = (extract3 aggregate%array_trimmed%10#1 aggregate%bytes_offset%10#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%10#1
        let values%8#0: uint64 = (btoi array_item%2#0)
        let tmp%4#1: bool = (== values%8#0 values%0#0)
        goto tmp%4#1 ? block@36 : block@38
    block@36: // and_contd_L67
        let aggregate%array_trimmed%11#1: bytes = ((extract 2 0) m_a#0)
        let aggregate%bytes_offset%11#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%11#1: bytes = (extract3 aggregate%array_trimmed%11#1 aggregate%bytes_offset%11#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%11#1
        let values%10#0: uint64 = (btoi array_item%3#0)
        let tmp%5#1: bool = (== values%10#0 values%1#0)
        goto tmp%5#1 ? block@37 : block@38
    block@37: // bool_true_L67
        let and_result%1#0: bool = 1u
        goto block@39
    block@38: // bool_false_L67
        let and_result%1#1: bool = 0u
        goto block@39
    block@39: // bool_merge_L67
        let and_result%1#2: bool = φ(and_result%1#0 <- block@37, and_result%1#1 <- block@38)
        (assert and_result%1#2) // assert target is match for conditions
        let aggregate%as_bytes%2#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob i_t.0#0)
        let aggregate%as_Encoded(uint64)%10#1: Encoded(uint64) = aggregate%val_as_bytes%10#1
        let aggregate%head%8#1: bytes = (concat aggregate%len_u16%2#1 aggregate%as_Encoded(uint64)%10#1)
        let aggregate%val_as_bytes%11#1: bytes[8] = (itob i_t.1#0)
        let aggregate%as_Encoded(uint64)%11#1: Encoded(uint64) = aggregate%val_as_bytes%11#1
        let aggregate%head%9#1: bytes = (concat aggregate%head%8#1 aggregate%as_Encoded(uint64)%11#1)
        let aggregate%as_Encoded(len+uint64[])%2#1: Encoded(len+uint64[]) = aggregate%head%9#1
        let i_a2#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#1
        let array_length%2#0: uint64 = (extract_uint16 i_a2#0 0u)
        let tmp%6#1: bool = (== array_length%2#0 2u)
        goto tmp%6#1 ? block@40 : block@43
    block@40: // and_contd_L70
        let aggregate%array_trimmed%12#1: bytes = ((extract 2 0) i_a2#0)
        let aggregate%bytes_offset%12#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%12#1: bytes = (extract3 aggregate%array_trimmed%12#1 aggregate%bytes_offset%12#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%12#1
        let values%12#0: uint64 = (btoi array_item%4#0)
        let tmp%7#1: bool = (== values%12#0 i_t.0#0)
        goto tmp%7#1 ? block@41 : block@43
    block@41: // and_contd_L70
        let aggregate%array_trimmed%13#1: bytes = ((extract 2 0) i_a2#0)
        let aggregate%bytes_offset%13#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%13#1: bytes = (extract3 aggregate%array_trimmed%13#1 aggregate%bytes_offset%13#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%13#1
        let values%13#0: uint64 = (btoi array_item%5#0)
        let tmp%8#1: bool = (== values%13#0 i_t.1#0)
        goto tmp%8#1 ? block@42 : block@43
    block@42: // bool_true_L70
        let and_result%2#0: bool = 1u
        goto block@44
    block@43: // bool_false_L70
        let and_result%2#1: bool = 0u
        goto block@44
    block@44: // bool_merge_L70
        let and_result%2#2: bool = φ(and_result%2#0 <- block@42, and_result%2#1 <- block@43)
        (assert and_result%2#2) // assert target is match for conditions
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // testNested_route_L73
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let i_a#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) i_a#0)
        let aggregate%array_length%0#1: uint64 = (extract_uint16 i_a#0 0u)
        let aggregate%lt%0#1: bool = (< 0u aggregate%array_length%0#1)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%item_offset_offset%0#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1)
        let aggregate%item_length_in_bytes%0#1: uint64 = (* aggregate%item_length%0#1 8u)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length_in_bytes%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let aggregate%array_trimmed%14#1: bytes = ((extract 2 0) aggregate%item%0#1)
        let aggregate%bytes_offset%14#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%14#1: bytes = (extract3 aggregate%array_trimmed%14#1 aggregate%bytes_offset%14#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%14#1
        let a#1: uint64 = (btoi array_item%1#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // testDestructureObj_route_L78
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let m#2: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 2)
        let aggregate%extract%7#1: bytes = (extract3 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%7#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 8u)
        let aggregate%len%0#1: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%0#1)
        let (i.a#0: uint64, i.b#0: string) = (aggregate%item0%1#1, aggregate%item1%1#1)
        let aggregate%extract%8#1: bytes = (extract3 m#2 0u 8u)
        let tuple_item%0#1: Encoded(uint64) = aggregate%extract%8#1
        let a1#1: uint64 = (btoi tuple_item%0#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 m#2 8u)
        let aggregate%len%1#1: uint64 = (len m#2)
        let aggregate%substring3%1#1: bytes = (substring3 m#2 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let tuple_item%1#1: Encoded(len+utf8[]) = aggregate%substring3%1#1
        let b1#0: string = ((extract 2 0) tuple_item%1#1)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // testObjLiteralNarrowing_route_L83
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%12#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%12#1: Encoded(uint64) = aggregate%val_as_bytes%12#1
        let aggregate%head%10#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%12#1)
        let aggregate%val_as_bytes%13#1: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%13#1: Encoded(uint64) = aggregate%val_as_bytes%13#1
        let aggregate%head%11#1: bytes = (concat aggregate%head%10#1 aggregate%as_Encoded(uint64)%13#1)
        let aggregate%as_Encoded(uint64,uint64)%0#1: Encoded(uint64,uint64) = aggregate%head%11#1
        let mObj#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#1
        let aggregate%val_as_bytes%14#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%14#1: Encoded(uint64) = aggregate%val_as_bytes%14#1
        let aggregate%head%12#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%14#1)
        let aggregate%val_as_bytes%15#1: bytes[8] = (itob 456u)
        let aggregate%as_Encoded(uint64)%15#1: Encoded(uint64) = aggregate%val_as_bytes%15#1
        let aggregate%head%13#1: bytes = (concat aggregate%head%12#1 aggregate%as_Encoded(uint64)%15#1)
        let aggregate%as_Encoded(uint64,uint64)%1#1: Encoded(uint64,uint64) = aggregate%head%13#1
        let mObj2#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#1
        let aggregate%val_as_bytes%16#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%16#1: Encoded(uint64) = aggregate%val_as_bytes%16#1
        let aggregate%head%14#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%16#1)
        let aggregate%val_as_bytes%17#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%17#1: Encoded(uint64) = aggregate%val_as_bytes%17#1
        let aggregate%head%15#1: bytes = (concat aggregate%head%14#1 aggregate%as_Encoded(uint64)%17#1)
        let aggregate%as_Encoded(uint64,uint64)%2#1: Encoded(uint64,uint64) = aggregate%head%15#1
        let mObj3#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#1
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // testMixed_route_L96
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let m#0: Encoded(len+((uint64))[]) = (txna ApplicationArgs 1)
        let aggregate%array_trimmed%15#1: bytes = ((extract 2 0) m#0)
        let aggregate%bytes_offset%15#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%15#1: bytes = (extract3 aggregate%array_trimmed%15#1 aggregate%bytes_offset%15#1 8u) // on error: index access is out of bounds
        let aggregate%extract%9#1: bytes = (extract3 aggregate%encoded_element%15#1 0u 8u)
        let aggregate%extract%10#1: bytes = (extract3 aggregate%extract%9#1 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%10#1
        let a1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%val_as_bytes%18#1: bytes[8] = (itob 213u)
        let aggregate%as_Encoded(uint64)%18#1: Encoded(uint64) = aggregate%val_as_bytes%18#1
        let aggregate%head%16#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%18#1)
        let aggregate%as_Encoded(uint64)%19#1: Encoded(uint64) = aggregate%head%16#1
        let tmp%0#2: Encoded(uint64) = aggregate%as_Encoded(uint64)%19#1
        let aggregate%head%17#1: bytes = (concat 0x tmp%0#2)
        let aggregate%as_Encoded((uint64))%0#1: Encoded((uint64)) = aggregate%head%17#1
        let tmp%1#1: Encoded((uint64)) = aggregate%as_Encoded((uint64))%0#1
        let aggregate%as_bytes%3#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%head%18#1: bytes = (concat aggregate%len_u16%3#1 tmp%1#1)
        let aggregate%as_Encoded(len+((uint64))[])%0#1: Encoded(len+((uint64))[]) = aggregate%head%18#1
        let m#1: Encoded(len+((uint64))[]) = aggregate%as_Encoded(len+((uint64))[])%0#1
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L19
        let tmp%44#0: uint64 = (txn OnCompletion)
        goto tmp%44#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L19
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // can only call when creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L19
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1 <- block@57, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3 <- block@44, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
    block@0: // L114
        let tmp%0#1: uint64 = (load 0)
        let tmp%1#0: uint64 = (+ tmp%0#1 1u)
        ((store 0) tmp%1#0)
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        return u#0