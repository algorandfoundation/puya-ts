main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L19
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@3, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@4, method "testArrayNarrowing(uint64[],uint64)void" => block@5, method "testNested(uint64[][])void" => block@6, method "testDestructureObj((uint64,string),(uint64,string))void" => block@7, method "testObjLiteralNarrowing(uint64,uint64)void" => block@8, method "testMixed(((uint64))[])void" => block@9, * => block@16}
    block@3: // testPrimitives_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@4: // testArrayDestructure_route_L29
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let u#1: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        ((store 0) 0u)
        let a2#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let a3#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let tmp%3#1: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a2#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob a3#0)
        let aggregate%head%1#1: bytes = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%3#1)
        let a5#0: Encoded(uint64,uint64,uint64) = (concat aggregate%head%1#1 aggregate%val_as_bytes%2#1)
        let tmp%0#6: uint64 = (load 0)
        let tmp%6#1: bool = (== tmp%0#6 3u)
        (assert tmp%6#1) // logAndReturn called 3 times
        let tmp%7#1: bool = (== a2#0 u#1)
        (assert tmp%7#1)
        let tmp%8#1: bool = (== a3#0 u#1)
        (assert tmp%8#1)
        let values%2#1: uint64 = (extract_uint64 a5#0 0u)
        let tmp%10#1: bool = (== values%2#1 u#1)
        goto tmp%10#1 ? block@31 : block@34
    block@31: // and_contd_L38
        let values%3#1: uint64 = (extract_uint64 a5#0 8u)
        let tmp%11#1: bool = (== values%3#1 u#1)
        goto tmp%11#1 ? block@32 : block@34
    block@32: // and_contd_L38
        let values%4#0: uint64 = (extract_uint64 a5#0 16u)
        let tmp%12#1: bool = (== values%4#0 u#1)
        goto tmp%12#1 ? block@33 : block@34
    block@33: // bool_true_L38
        let and_result%0#0: bool = 1u
        goto block@35
    block@34: // bool_false_L38
        let and_result%0#1: bool = 0u
        goto block@35
    block@35: // bool_merge_L38
        let and_result%0#2: bool = φ(and_result%0#0 <- block@33, and_result%0#1 <- block@34)
        (assert and_result%0#2) // assert target is match for conditions
        let c#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let d#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let tmp%17#1: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#1)
        let tmp%19#1: bool = (== c#0 u#1)
        goto tmp%19#1 ? block@36 : block@38
    block@36: // and_contd_L43
        let tmp%20#1: bool = (== d#0 u#1)
        goto tmp%20#1 ? block@37 : block@38
    block@37: // bool_true_L43
        let and_result%1#0: bool = 1u
        goto block@39
    block@38: // bool_false_L43
        let and_result%1#1: bool = 0u
        goto block@39
    block@39: // bool_merge_L43
        let and_result%1#2: bool = φ(and_result%1#0 <- block@37, and_result%1#1 <- block@38)
        (assert and_result%1#2) // assert target is match for conditions
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@5: // testArrayNarrowing_route_L49
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let m_a#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%0#4: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%0#4)
        let m_a#1: Encoded(len+uint64[]) = ((replace2 2) m_a#0 aggregate%val_as_bytes%3#1)
        let tmp%1#2: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%1#2)
        let direct#1: Encoded(len+uint64[]) = ((replace2 2) m_a#0 aggregate%val_as_bytes%4#1)
        let values%2#0: uint64 = (extract_uint64 m_a#1 2u)
        let values%3#0: uint64 = (extract_uint64 direct#1 2u)
        let tmp%2#1: bool = (!= values%2#0 values%3#0)
        (assert tmp%2#1)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@6: // testNested_route_L63
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let i_a#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#1: uint64 = (extract_uint16 i_a#0 0u)
        (assert aggregate%array_length%0#1) // index access is out of bounds
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@7: // testDestructureObj_route_L68
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@8: // testObjLiteralNarrowing_route_L73
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@9: // testMixed_route_L86
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // bare_routing_L19
        let tmp%38#0: uint64 = (txn OnCompletion)
        goto tmp%38#0 ? block@16 : block@13
    block@13: // __algots__.defaultCreate_L19
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // can only call when creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@16: // after_if_else_L19
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8: bool = 0u
        goto block@17
    block@17: // after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1 <- block@39, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7 <- block@13, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8 <- block@16)
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
    block@0: // L104
        let tmp%0#1: uint64 = (load 0)
        let tmp%1#0: uint64 = (+ tmp%0#1 1u)
        ((store 0) tmp%1#0)
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        return u#0