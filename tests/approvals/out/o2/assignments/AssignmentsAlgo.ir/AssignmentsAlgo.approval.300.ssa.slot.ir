main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@14
    block@2: // abi_routing_L19
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@3, method "testAccountDestructure()(uint64,uint64)" => block@4, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@5, method "testArrayNarrowing(uint64[],uint64)void" => block@6, method "testTupleToArray((uint64,uint64),(uint64,uint64))void" => block@7, method "testNested(uint64[][])void" => block@8, method "testDestructureObj((uint64,string),(uint64,string))void" => block@9, method "testObjLiteralNarrowing(uint64,uint64)void" => block@10, method "testMixed(((uint64))[])void" => block@11, * => block@18}
    block@3: // testPrimitives_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@19
    block@4: // testAccountDestructure_route_L29
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let awst_tmp%0#1: account = (global CurrentApplicationAddress)
        let (balance#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) awst_tmp%0#1)
        (assert check%0#0) // account funded
        let (minBalance#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) awst_tmp%0#1)
        (assert check%1#0) // account funded
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob balance#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob minBalance#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 aggregate%head%1#0)
        (log tmp%13#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@19
    block@5: // testArrayDestructure_route_L34
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let u#1: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        ((store 0) 0u)
        let tmp%0#15: uint64 = (load 0)
        let tmp%1#5: uint64 = (+ tmp%0#15 1u)
        ((store 0) tmp%1#5)
        let tmp%0#9: bytes[8] = (itob u#1)
        (log tmp%0#9)
        let tmp%0#16: uint64 = (load 0)
        let tmp%1#6: uint64 = (+ tmp%0#16 1u)
        ((store 0) tmp%1#6)
        (log tmp%0#9)
        let tmp%0#17: uint64 = (load 0)
        let tmp%1#7: uint64 = (+ tmp%0#17 1u)
        ((store 0) tmp%1#7)
        (log tmp%0#9)
        let aggregate%head%3#0: bytes = (concat tmp%0#9 tmp%0#9)
        let a5#0: Encoded(uint64,uint64,uint64) = (concat aggregate%head%3#0 tmp%0#9)
        let tmp%0#12: uint64 = (load 0)
        let tmp%6#3: bool = (== tmp%0#12 3u)
        (assert tmp%6#3) // logAndReturn called 3 times
        let values%2#2: uint64 = (extract_uint64 a5#0 0u)
        let tmp%10#1: bool = (== values%2#2 u#1)
        let tmp%11#2: bool = (&& 1u tmp%10#1)
        let values%3#1: uint64 = (extract_uint64 a5#0 8u)
        let tmp%12#2: bool = (== values%3#1 u#1)
        let tmp%13#2: bool = (&& tmp%11#2 tmp%12#2)
        let values%4#1: uint64 = (extract_uint64 a5#0 16u)
        let tmp%14#2: bool = (== values%4#1 u#1)
        let tmp%15#2: bool = (&& tmp%13#2 tmp%14#2)
        (assert tmp%15#2) // assert target is match for conditions
        let tmp%0#18: uint64 = (load 0)
        let tmp%1#8: uint64 = (+ tmp%0#18 1u)
        ((store 0) tmp%1#8)
        (log tmp%0#9)
        let tmp%0#19: uint64 = (load 0)
        let tmp%1#9: uint64 = (+ tmp%0#19 1u)
        ((store 0) tmp%1#9)
        (log tmp%0#9)
        let tmp%0#20: uint64 = (load 0)
        let tmp%1#10: uint64 = (+ tmp%0#20 1u)
        ((store 0) tmp%1#10)
        (log tmp%0#9)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@19
    block@6: // testArrayNarrowing_route_L54
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let m_a#1: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let values%0#1: uint64 = (extract_uint64 m_a#1 2u)
        let tmp%0#4: uint64 = (+ values%0#1 1u)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%0#4)
        let m_a#2: Encoded(len+uint64[]) = ((replace2 2) m_a#1 aggregate%val_as_bytes%5#0) // on error: index access is out of bounds
        let tmp%1#2: uint64 = (+ values%0#1 2u)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%1#2)
        let direct#1: Encoded(len+uint64[]) = ((replace2 2) m_a#1 aggregate%val_as_bytes%6#0) // on error: index access is out of bounds
        let values%2#1: uint64 = (extract_uint64 m_a#2 2u)
        let values%3#0: uint64 = (extract_uint64 direct#1 2u)
        let tmp%2#2: bool = (!= values%2#1 values%3#0)
        (assert tmp%2#2)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@19
    block@7: // testTupleToArray_route_L68
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let m_t#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let i_t.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%1#0 0u)
        let i_t.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%1#0 8u)
        let values%0#0: uint64 = (extract_uint64 m_t#0 0u)
        let values%1#0: uint64 = (extract_uint64 m_t#0 8u)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob values%0#0)
        let aggregate%head%5#0: bytes = (concat 0x0002 aggregate%val_as_bytes%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob values%1#0)
        let m_a#0: Encoded(len+uint64[]) = (concat aggregate%head%5#0 aggregate%val_as_bytes%8#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 m_a#0 0u)
        let tmp%1#1: bool = (== aggregate%array_length%0#0 2u)
        let values%2#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%2#1: bool = (== values%2#0 values%0#0)
        let tmp%3#2: bool = (&& tmp%1#1 tmp%2#1)
        let values%4#0: uint64 = (extract_uint64 m_a#0 10u)
        let tmp%4#2: bool = (== values%4#0 values%1#0)
        let tmp%5#1: bool = (&& tmp%3#2 tmp%4#2)
        (assert tmp%5#1) // assert target is match for conditions
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob i_t.0#0)
        let aggregate%head%7#0: bytes = (concat 0x0002 aggregate%val_as_bytes%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob i_t.1#0)
        let i_a2#0: Encoded(len+uint64[]) = (concat aggregate%head%7#0 aggregate%val_as_bytes%10#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 i_a2#0 0u)
        let tmp%13#1: bool = (== aggregate%array_length%2#0 2u)
        let values%12#0: uint64 = (extract_uint64 i_a2#0 2u)
        let tmp%14#1: bool = (== values%12#0 i_t.0#0)
        let tmp%15#1: bool = (&& tmp%13#1 tmp%14#1)
        let values%13#0: uint64 = (extract_uint64 i_a2#0 10u)
        let tmp%16#1: bool = (== values%13#0 i_t.1#0)
        let tmp%17#1: bool = (&& tmp%15#1 tmp%16#1)
        (assert tmp%17#1) // assert target is match for conditions
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@19
    block@8: // testNested_route_L78
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        (assert tmp%32#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@19
    block@9: // testDestructureObj_route_L83
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@19
    block@10: // testObjLiteralNarrowing_route_L88
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        ((store 0) 0u)
        let tmp%0#13: uint64 = (load 0)
        let tmp%1#3: uint64 = (+ tmp%0#13 1u)
        ((store 0) tmp%1#3)
        let tmp%0#7: uint64 = (load 0)
        let tmp%4#1: bool = (== tmp%0#7 1u)
        (assert tmp%4#1) // getVal should only be called once
        let tmp%0#14: uint64 = (load 0)
        let tmp%1#4: uint64 = (+ tmp%0#14 1u)
        ((store 0) tmp%1#4)
        let tmp%0#8: uint64 = (load 0)
        let tmp%7#1: bool = (== tmp%0#8 2u)
        (assert tmp%7#1) // getVal should still be called once even though its result is not used
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@19
    block@11: // testMixed_route_L103
        let tmp%46#0: uint64 = (txn OnCompletion)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // OnCompletion is not NoOp
        let tmp%48#0: uint64 = (txn ApplicationID)
        (assert tmp%48#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@19
    block@14: // bare_routing_L19
        let tmp%50#0: uint64 = (txn OnCompletion)
        goto tmp%50#0 ? block@18 : block@15
    block@15: // __algots__.defaultCreate_L19
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // can only call when creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#9: bool = 1u
        goto block@19
    block@18: // after_if_else_L19
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#10: bool = 0u
        goto block@19
    block@19: // after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#9 <- block@15, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#10 <- block@18)
        return tmp%0#0