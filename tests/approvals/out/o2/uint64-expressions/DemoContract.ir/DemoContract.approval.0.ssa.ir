main tests/approvals/uint64-expressions.algo.ts::DemoContract.approvalProgram:
    block@0: // L14
        let tmp%0#0: bool = (== 2u 2u)
        goto tmp%0#0 ? block@1 : block@4
    block@1: // and_contd_L15
        let (tmp%1#0: uint64, tmp%2#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test2()
        let tmp%3#0: bool = (== tmp%1#0 123u)
        goto tmp%3#0 ? block@2 : block@4
    block@2: // and_contd_L15
        let (tmp%4#0: uint64, tmp%5#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test2()
        let tmp%6#0: bool = (== tmp%5#0 12300u)
        goto tmp%6#0 ? block@3 : block@4
    block@3: // bool_true_L15
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L15
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L15
        let and_result%0#2: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%7#0: bool = (== 5u 5u)
        goto tmp%7#0 ? block@6 : block@12
    block@6: // and_contd_L16
        let (tmp%8#0: uint64, tmp%9#0: uint64, tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%13#0: bool = (== tmp%8#0 0u)
        goto tmp%13#0 ? block@7 : block@12
    block@7: // and_contd_L16
        let (tmp%14#0: uint64, tmp%15#0: uint64, tmp%16#0: uint64, tmp%17#0: uint64, tmp%18#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%19#0: bool = (== tmp%15#0 0u)
        goto tmp%19#0 ? block@8 : block@12
    block@8: // and_contd_L16
        let (tmp%20#0: uint64, tmp%21#0: uint64, tmp%22#0: uint64, tmp%23#0: uint64, tmp%24#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%25#0: bool = (== tmp%22#0 1u)
        goto tmp%25#0 ? block@9 : block@12
    block@9: // and_contd_L16
        let (tmp%26#0: uint64, tmp%27#0: uint64, tmp%28#0: uint64, tmp%29#0: uint64, tmp%30#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%31#0: bool = (== tmp%29#0 1u)
        goto tmp%31#0 ? block@10 : block@12
    block@10: // and_contd_L16
        let (tmp%32#0: uint64, tmp%33#0: uint64, tmp%34#0: uint64, tmp%35#0: uint64, tmp%36#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%37#0: bool = (== tmp%36#0 1u)
        goto tmp%37#0 ? block@11 : block@12
    block@11: // bool_true_L16
        let and_result%1#0: bool = 1u
        goto block@13
    block@12: // bool_false_L16
        let and_result%1#1: bool = 0u
        goto block@13
    block@13: // bool_merge_L16
        let and_result%1#2: bool = φ(and_result%1#0 <- block@11, and_result%1#1 <- block@12)
        (assert and_result%1#2) // assert target is match for conditions
        return 1u

subroutine tests/approvals/uint64-expressions.algo.ts::test() -> <uint64, uint64, uint64, uint64, uint64>:
    block@0: // L3
        return 0u 0u 1u 1u 1u

subroutine tests/approvals/uint64-expressions.algo.ts::test2() -> <uint64, uint64>:
    block@0: // L7
        return 123u 12300u