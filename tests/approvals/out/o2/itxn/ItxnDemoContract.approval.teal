#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 6 5 3 1000
    bytecblock 0x098101 0x09361a00b08101 "1" "2" "AST2" "unit" "3" "5" "AST1" "AST3" "name" "10" "11" "12" "13" "14" "15" "16" "with args param set" "42" "3rd"
    intc_0 // 0
    dupn 3
    pushbytes ""
    dupn 2
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/approvals/itxn.algo.ts:21
    // name = GlobalState({ initialValue: Bytes() })
    bytec 10 // "name"
    pushbytes 0x
    app_global_put

main_after_if_else@2:
    // tests/approvals/itxn.algo.ts:20
    // export class ItxnDemoContract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@14
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x20254f91 0xf1908524 0xdf920f37 0x3d46345c 0xd4c6a8f5 // method "test1()void", method "test2()void", method "test3()void", method "test4()void", method "test5(uint64)void"
    txna ApplicationArgs 0
    match main_test1_route@6 main_test2_route@7 main_test3_route@8 main_test4_route@9 main_test5_route@10
    err

main_test5_route@10:
    // tests/approvals/itxn.algo.ts:207
    // public test5(appId: Application) {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/itxn.algo.ts:209
    // receiver: appId.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // tests/approvals/itxn.algo.ts:218
    // const [, appRes] = itxn.submitGroup(pay, app)
    itxn_begin
    // tests/approvals/itxn.algo.ts:210
    // amount: 1000,
    intc 4 // 1000
    itxn_field Amount
    itxn_field Receiver
    // tests/approvals/itxn.algo.ts:208-211
    // const pay = itxn.payment({
    //   receiver: appId.address,
    //   amount: 1000,
    // })
    pushint 1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:218
    // const [, appRes] = itxn.submitGroup(pay, app)
    itxn_next
    // tests/approvals/itxn.algo.ts:215
    // appArgs: [methodSelector(ItxnReceiver.prototype.receivePay), Uint64(1), new Str('hello')],
    pushbytes 0x1971d197 // method "receivePay(uint64,pay,string)(uint64,uint64,string)"
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000001
    itxn_field ApplicationArgs
    pushbytes 0x000568656c6c6f
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // tests/approvals/itxn.algo.ts:213-216
    // const app = itxn.applicationCall({
    //   appId,
    //   appArgs: [methodSelector(ItxnReceiver.prototype.receivePay), Uint64(1), new Str('hello')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:218
    // const [, appRes] = itxn.submitGroup(pay, app)
    itxn_submit
    itxn LastLog
    // tests/approvals/itxn.algo.ts:220
    // const returnValue = decodeArc4<[uint64, uint64, string]>(appRes.lastLog, 'log')
    dup
    extract 4 0
    dig 1
    extract 0 4
    pushbytes 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/itxn.algo.ts:222
    // assertMatch(returnValue, [1, 1000, 'hello'])
    dig 1
    pushint 4 // 4
    extract_uint64
    pushint 1 // 1
    ==
    pushint 1 // 1
    &&
    uncover 2
    pushint 12 // 12
    extract_uint64
    intc 4 // 1000
    ==
    &&
    dig 1
    pushint 16 // 16
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    pushbytes "hello"
    ==
    &&
    // tests/approvals/itxn.algo.ts:207
    // public test5(appId: Application) {
    return // on error: assert target is match for conditions

main_test4_route@9:
    // tests/approvals/itxn.algo.ts:185
    // const lotsOfBytes = op.bzero(2044)
    pushint 2044 // 2044
    bzero
    // tests/approvals/itxn.algo.ts:187
    // const approval2 = Bytes.fromHex('80' + 'FC0f')
    pushbytes 0x80fc0f
    // tests/approvals/itxn.algo.ts:187-188
    // const approval2 = Bytes.fromHex('80' + 'FC0f')
    //   .concat(lotsOfBytes)
    swap
    concat
    // tests/approvals/itxn.algo.ts:189
    // .concat(Bytes.fromHex('48'))
    pushbytes 0x48
    // tests/approvals/itxn.algo.ts:187-189
    // const approval2 = Bytes.fromHex('80' + 'FC0f')
    //   .concat(lotsOfBytes)
    //   .concat(Bytes.fromHex('48'))
    concat
    // tests/approvals/itxn.algo.ts:198
    // const app1 = appTxn1.submit()
    itxn_begin
    // tests/approvals/itxn.algo.ts:196
    // extraProgramPages: 3,
    intc_3 // 3
    itxn_field ExtraProgramPages
    // tests/approvals/itxn.algo.ts:195
    // appArgs: [Bytes('1')],
    bytec_2 // "1"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:194
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:193
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:192
    // approvalProgram: [approval1, approval2, approval2, approval2],
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    dup
    itxn_field ApprovalProgramPages
    dup
    itxn_field ApprovalProgramPages
    dup
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:191-197
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: [approval1, approval2, approval2, approval2],
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    //   extraProgramPages: 3,
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:198
    // const app1 = appTxn1.submit()
    itxn_submit
    itxn NumApprovalProgramPages
    itxn NumClearStateProgramPages
    itxn ExtraProgramPages
    // tests/approvals/itxn.algo.ts:199
    // assert(app1.extraProgramPages === 3, 'extra pages = 3')
    intc_3 // 3
    ==
    assert // extra pages = 3
    // tests/approvals/itxn.algo.ts:200
    // assert(app1.numApprovalProgramPages === 2, 'approval pages = 2')
    swap
    pushint 2 // 2
    ==
    assert // approval pages = 2
    // tests/approvals/itxn.algo.ts:201
    // assert(app1.approvalProgramPages(0) === approval1.concat(approval2).concat(approval2.slice(0, -3)), 'expected approval page 0')
    itxna ApprovalProgramPages 0
    bytec_0 // 0x098101
    dig 3
    concat
    dig 3
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    intc_3 // 3
    dig 2
    >=
    intc_3 // 3
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dup
    dig 2
    <
    dig 1
    dig 3
    uncover 2
    select
    dig 7
    uncover 3
    uncover 2
    substring3
    uncover 3
    swap
    concat
    uncover 3
    ==
    assert // expected approval page 0
    // tests/approvals/itxn.algo.ts:202
    // assert(app1.approvalProgramPages(1) === approval2.slice(-3).concat(approval2), 'expected approval page 1')
    itxna ApprovalProgramPages 1
    dig 4
    uncover 2
    uncover 3
    substring3
    uncover 3
    concat
    ==
    assert // expected approval page 1
    // tests/approvals/itxn.algo.ts:203
    // assert(app1.numClearStateProgramPages === 1, 'clear state pages = 1')
    pushint 1 // 1
    ==
    assert // clear state pages = 1
    // tests/approvals/itxn.algo.ts:204
    // assert(app1.clearStateProgramPages(0) === APPROVE, 'expected clear state page')
    itxna ClearStateProgramPages 0
    bytec_0 // 0x098101
    ==
    // tests/approvals/itxn.algo.ts:184
    // public test4() {
    return // on error: expected clear state page

main_test3_route@8:
    // tests/approvals/itxn.algo.ts:147-164
    // const [app1, app2, app3, app4, app5, app6, app7, app8, app9, app10, app11, app12, app13, app14, app15, app16] = itxn.submitGroup(
    //   appTxn1,
    //   appTxn2,
    //   appTxn3,
    //   appTxn4,
    //   appTxn5,
    //   appTxn6,
    //   appTxn7,
    //   appTxn8,
    //   appTxn9,
    //   appTxn10,
    //   appTxn11,
    //   appTxn12,
    //   appTxn13,
    //   appTxn14,
    //   appTxn15,
    //   appTxn16,
    // )
    itxn_begin
    // tests/approvals/itxn.algo.ts:113
    // appArgs: [Bytes('1')],
    bytec_2 // "1"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:149
    // appTxn2,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:117
    // appTxn2.set({ appArgs: [Bytes('2')] })
    bytec_3 // "2"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:150
    // appTxn3,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:119
    // appTxn3.set({ appArgs: [Bytes('3')] })
    bytec 6 // "3"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:151
    // appTxn4,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:121
    // appTxn4.set({ appArgs: [Bytes('4')] })
    pushbytes "4"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:152
    // appTxn5,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:123
    // appTxn5.set({ appArgs: [Bytes('5')] })
    bytec 7 // "5"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:153
    // appTxn6,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:125
    // appTxn6.set({ appArgs: [Bytes('6')] })
    pushbytes "6"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:154
    // appTxn7,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:127
    // appTxn7.set({ appArgs: [Bytes('7')] })
    pushbytes "7"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:155
    // appTxn8,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:129
    // appTxn8.set({ appArgs: [Bytes('8')] })
    pushbytes "8"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:156
    // appTxn9,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:131
    // appTxn9.set({ appArgs: [Bytes('9')] })
    pushbytes "9"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:157
    // appTxn10,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:133
    // appTxn10.set({ appArgs: [Bytes('10')] })
    bytec 11 // "10"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:158
    // appTxn11,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:135
    // appTxn11.set({ appArgs: [Bytes('11')] })
    bytec 12 // "11"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:159
    // appTxn12,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:137
    // appTxn12.set({ appArgs: [Bytes('12')] })
    bytec 13 // "12"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:160
    // appTxn13,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:139
    // appTxn13.set({ appArgs: [Bytes('13')] })
    bytec 14 // "13"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:161
    // appTxn14,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:141
    // appTxn14.set({ appArgs: [Bytes('14')] })
    bytec 15 // "14"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:162
    // appTxn15,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:143
    // appTxn15.set({ appArgs: [Bytes('15')] })
    bytec 16 // "15"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:163
    // appTxn16,
    itxn_next
    // tests/approvals/itxn.algo.ts:111
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:110
    // approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:145
    // appTxn16.set({ appArgs: [Bytes('16')] })
    bytec 17 // "16"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:112
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:109-114
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:147-164
    // const [app1, app2, app3, app4, app5, app6, app7, app8, app9, app10, app11, app12, app13, app14, app15, app16] = itxn.submitGroup(
    //   appTxn1,
    //   appTxn2,
    //   appTxn3,
    //   appTxn4,
    //   appTxn5,
    //   appTxn6,
    //   appTxn7,
    //   appTxn8,
    //   appTxn9,
    //   appTxn10,
    //   appTxn11,
    //   appTxn12,
    //   appTxn13,
    //   appTxn14,
    //   appTxn15,
    //   appTxn16,
    // )
    itxn_submit
    // tests/approvals/itxn.algo.ts:166
    // assert(app1.logs(0) === Bytes('1'))
    gitxna 0 Logs 0
    bytec_2 // "1"
    ==
    assert
    // tests/approvals/itxn.algo.ts:167
    // assert(app2.logs(0) === Bytes('2'))
    gitxna 1 Logs 0
    bytec_3 // "2"
    ==
    assert
    // tests/approvals/itxn.algo.ts:168
    // assert(app3.logs(0) === Bytes('3'))
    gitxna 2 Logs 0
    bytec 6 // "3"
    ==
    assert
    // tests/approvals/itxn.algo.ts:169
    // assert(app4.logs(0) === Bytes('4'))
    gitxna 3 Logs 0
    pushbytes "4"
    ==
    assert
    // tests/approvals/itxn.algo.ts:170
    // assert(app5.logs(0) === Bytes('5'))
    gitxna 4 Logs 0
    bytec 7 // "5"
    ==
    assert
    // tests/approvals/itxn.algo.ts:171
    // assert(app6.logs(0) === Bytes('6'))
    gitxna 5 Logs 0
    pushbytes "6"
    ==
    assert
    // tests/approvals/itxn.algo.ts:172
    // assert(app7.logs(0) === Bytes('7'))
    gitxna 6 Logs 0
    pushbytes "7"
    ==
    assert
    // tests/approvals/itxn.algo.ts:173
    // assert(app8.logs(0) === Bytes('8'))
    gitxna 7 Logs 0
    pushbytes "8"
    ==
    assert
    // tests/approvals/itxn.algo.ts:174
    // assert(app9.logs(0) === Bytes('9'))
    gitxna 8 Logs 0
    pushbytes "9"
    ==
    assert
    // tests/approvals/itxn.algo.ts:175
    // assert(app10.logs(0) === Bytes('10'))
    gitxna 9 Logs 0
    bytec 11 // "10"
    ==
    assert
    // tests/approvals/itxn.algo.ts:176
    // assert(app11.logs(0) === Bytes('11'))
    gitxna 10 Logs 0
    bytec 12 // "11"
    ==
    assert
    // tests/approvals/itxn.algo.ts:177
    // assert(app12.logs(0) === Bytes('12'))
    gitxna 11 Logs 0
    bytec 13 // "12"
    ==
    assert
    // tests/approvals/itxn.algo.ts:178
    // assert(app13.logs(0) === Bytes('13'))
    gitxna 12 Logs 0
    bytec 14 // "13"
    ==
    assert
    // tests/approvals/itxn.algo.ts:179
    // assert(app14.logs(0) === Bytes('14'))
    gitxna 13 Logs 0
    bytec 15 // "14"
    ==
    assert
    // tests/approvals/itxn.algo.ts:180
    // assert(app15.logs(0) === Bytes('15'))
    gitxna 14 Logs 0
    bytec 16 // "15"
    ==
    assert
    // tests/approvals/itxn.algo.ts:181
    // assert(app16.logs(0) === Bytes('16'))
    itxna Logs 0
    bytec 17 // "16"
    ==
    // tests/approvals/itxn.algo.ts:108
    // public test3() {
    return

main_test2_route@7:
    intc_0 // 0
    bury 5
    pushbytes ""
    bury 1
    // tests/approvals/itxn.algo.ts:73
    // if (Txn.numAppArgs) {
    txn NumAppArgs
    bz main_else_body@25
    // tests/approvals/itxn.algo.ts:74
    // const args = [Bytes('1'), Bytes('2')] as const
    bytec_2 // "1"
    bury 7
    bytec_3 // "2"
    bury 6
    // tests/approvals/itxn.algo.ts:78
    // appArgs: args,
    pushint 2 // 2
    bury 3
    // tests/approvals/itxn.algo.ts:79
    // onCompletion: OnCompleteAction.NoOp,
    intc_0 // 0
    bury 1
    pushint 1 // 1
    bury 2
    // tests/approvals/itxn.algo.ts:80
    // note: 'with args param set',
    bytec 18 // "with args param set"

main_after_if_else@26:
    // tests/approvals/itxn.algo.ts:90
    // const createAppTxn = createAppParams.submit()
    itxn_begin
    itxn_field Note
    dig 1
    bz main_next_field@28
    dup
    itxn_field OnCompletion

main_next_field@28:
    dig 6
    itxn_field ApplicationArgs
    dig 5
    itxn_field ApplicationArgs
    dig 2
    intc_3 // 3
    >=
    // tests/approvals/itxn.algo.ts:90
    // const createAppTxn = createAppParams.submit()
    bz main_next_field@30
    dig 4
    itxn_field ApplicationArgs

main_next_field@30:
    // tests/approvals/itxn.algo.ts:77
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:76
    // approvalProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:75-81
    // createAppParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   appArgs: args,
    //   onCompletion: OnCompleteAction.NoOp,
    //   note: 'with args param set',
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:90
    // const createAppTxn = createAppParams.submit()
    itxn_submit
    itxn Note
    bury 4
    // tests/approvals/itxn.algo.ts:91
    // assert(createAppTxn.appArgs(0) === Bytes('1'), 'correct args used 1')
    itxna ApplicationArgs 0
    bytec_2 // "1"
    ==
    assert // correct args used 1
    // tests/approvals/itxn.algo.ts:92
    // assert(createAppTxn.appArgs(1) === Bytes('2'), 'correct args used 2')
    itxna ApplicationArgs 1
    bytec_3 // "2"
    ==
    assert // correct args used 2
    // tests/approvals/itxn.algo.ts:94
    // if (Txn.numAppArgs > 1) {
    txn NumAppArgs
    pushint 1 // 1
    >
    bz main_after_if_else@32
    // tests/approvals/itxn.algo.ts:95-102
    // const createAppTxn2 = itxn
    //   .applicationCall({
    //     approvalProgram: APPROVE,
    //     clearStateProgram: APPROVE,
    //     onCompletion: OnCompleteAction.DeleteApplication,
    //     appArgs: [Bytes('42')],
    //   })
    //   .submit()
    itxn_begin
    // tests/approvals/itxn.algo.ts:100
    // appArgs: [Bytes('42')],
    bytec 19 // "42"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:98
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:97
    // approvalProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:95-101
    // const createAppTxn2 = itxn
    //   .applicationCall({
    //     approvalProgram: APPROVE,
    //     clearStateProgram: APPROVE,
    //     onCompletion: OnCompleteAction.DeleteApplication,
    //     appArgs: [Bytes('42')],
    //   })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:95-102
    // const createAppTxn2 = itxn
    //   .applicationCall({
    //     approvalProgram: APPROVE,
    //     clearStateProgram: APPROVE,
    //     onCompletion: OnCompleteAction.DeleteApplication,
    //     appArgs: [Bytes('42')],
    //   })
    //   .submit()
    itxn_submit
    // tests/approvals/itxn.algo.ts:103
    // assert(createAppTxn2.appArgs(0) === Bytes('42'), 'correct args used 2')
    itxna ApplicationArgs 0
    bytec 19 // "42"
    ==
    assert // correct args used 2
    // tests/approvals/itxn.algo.ts:104
    // assert(createAppTxn.note === Bytes('with args param set'))
    dig 3
    bytec 18 // "with args param set"
    ==
    assert

main_after_if_else@32:
    // tests/approvals/itxn.algo.ts:71
    // public test2() {
    pushint 1 // 1
    return

main_else_body@25:
    // tests/approvals/itxn.algo.ts:86
    // appArgs: [Bytes('3'), new Str('4'), Bytes('5')],
    pushbytes 0x000134
    bytec 6 // "3"
    bury 8
    bytec 7 // "5"
    bury 6
    intc_3 // 3
    bury 4
    // tests/approvals/itxn.algo.ts:87
    // note: 'no args param set',
    pushbytes "no args param set"
    swap
    // tests/approvals/itxn.algo.ts:83
    // createAppParams = itxn.applicationCall({
    intc_0 // 0
    bury 4
    bury 7
    b main_after_if_else@26

main_test1_route@6:
    // tests/approvals/itxn.algo.ts:31
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/itxn.algo.ts:32
    // reserve: Global.currentApplicationAddress,
    dup
    // tests/approvals/itxn.algo.ts:21
    // name = GlobalState({ initialValue: Bytes() })
    bytec 10 // "name"
    // tests/approvals/itxn.algo.ts:35
    // this.name.value = Bytes('AST2')
    bytec 4 // "AST2"
    app_global_put
    // tests/approvals/itxn.algo.ts:36
    // const asset1_txn = assetParams.submit()
    itxn_begin
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:30
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:29
    // unitName: 'unit',
    bytec 5 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:24
    // this.name.value = Bytes('AST1')
    bytec 8 // "AST1"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:27
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:26-33
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:36
    // const asset1_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/approvals/itxn.algo.ts:40
    // const asset2_txn = assetParams.submit()
    itxn_begin
    dig 2
    itxn_field ConfigAssetReserve
    dig 3
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:30
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:29
    // unitName: 'unit',
    bytec 5 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:35
    // this.name.value = Bytes('AST2')
    bytec 4 // "AST2"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:27
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:26-33
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:40
    // const asset2_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/approvals/itxn.algo.ts:42
    // assert(asset1_txn.assetName === Bytes('AST1'), 'asset1_txn is correct')
    uncover 3
    bytec 8 // "AST1"
    ==
    assert // asset1_txn is correct
    // tests/approvals/itxn.algo.ts:43
    // assert(asset2_txn.assetName === Bytes('AST2'), 'asset2_txn is correct')
    swap
    bytec 4 // "AST2"
    ==
    assert // asset2_txn is correct
    // tests/approvals/itxn.algo.ts:44
    // assert(asset1_txn.createdAsset.name === Bytes('AST1'), 'created asset 1 is correct')
    swap
    asset_params_get AssetName
    assert // asset exists
    bytec 8 // "AST1"
    ==
    assert // created asset 1 is correct
    // tests/approvals/itxn.algo.ts:45
    // assert(asset2_txn.createdAsset.name === Bytes('AST2'), 'created asset 2 is correct')
    asset_params_get AssetName
    assert // asset exists
    bytec 4 // "AST2"
    ==
    assert // created asset 2 is correct
    // tests/approvals/itxn.algo.ts:57
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/approvals/itxn.algo.ts:49
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:48
    // approvalProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:47-51
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   fee: 0,
    // })
    intc_1 // 6
    itxn_field TypeEnum
    // tests/approvals/itxn.algo.ts:50
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:57
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:30
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:29
    // unitName: 'unit',
    bytec 5 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:54
    // assetName: 'AST3',
    bytec 9 // "AST3"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:27
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:26-33
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:57
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    itxn ConfigAssetName
    gitxn 0 CreatedApplicationID
    // tests/approvals/itxn.algo.ts:59
    // assert(appCreateTxn.createdApp, 'app is created')
    assert // app is created
    // tests/approvals/itxn.algo.ts:60
    // assert(asset3_txn.assetName === Bytes('AST3'), 'asset3_txn is correct')
    bytec 9 // "AST3"
    ==
    assert // asset3_txn is correct
    // tests/approvals/itxn.algo.ts:68
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/approvals/itxn.algo.ts:63
    // note: '3rd',
    bytec 20 // "3rd"
    itxn_field Note
    // tests/approvals/itxn.algo.ts:49
    // clearStateProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:48
    // approvalProgram: APPROVE,
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:47-51
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   fee: 0,
    // })
    intc_1 // 6
    itxn_field TypeEnum
    // tests/approvals/itxn.algo.ts:50
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:68
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    // tests/approvals/itxn.algo.ts:66
    // note: '3rd',
    bytec 20 // "3rd"
    itxn_field Note
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:30
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:29
    // unitName: 'unit',
    bytec 5 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:54
    // assetName: 'AST3',
    bytec 9 // "AST3"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:27
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:26-33
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:68
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    // tests/approvals/itxn.algo.ts:23
    // public test1() {
    pushint 1 // 1
    return

main___algots__.defaultCreate@14:
    // tests/approvals/itxn.algo.ts:20
    // export class ItxnDemoContract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
