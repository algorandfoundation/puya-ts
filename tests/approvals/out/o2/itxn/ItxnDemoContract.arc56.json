{
    "name": "ItxnDemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test1",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test5",
            "args": [
                {
                    "type": "application",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bmFtZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        260
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        173,
                        330,
                        486,
                        950,
                        1137
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1292
                    ],
                    "errorMessage": "app is created"
                },
                {
                    "pc": [
                        186
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        394
                    ],
                    "errorMessage": "approval pages = 2"
                },
                {
                    "pc": [
                        319
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1232,
                        1239
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1223
                    ],
                    "errorMessage": "asset1_txn is correct"
                },
                {
                    "pc": [
                        1228
                    ],
                    "errorMessage": "asset2_txn is correct"
                },
                {
                    "pc": [
                        1296
                    ],
                    "errorMessage": "asset3_txn is correct"
                },
                {
                    "pc": [
                        1356
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        176,
                        333,
                        489,
                        953,
                        1140
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        473
                    ],
                    "errorMessage": "clear state pages = 1"
                },
                {
                    "pc": [
                        1038
                    ],
                    "errorMessage": "correct args used 1"
                },
                {
                    "pc": [
                        1044,
                        1080
                    ],
                    "errorMessage": "correct args used 2"
                },
                {
                    "pc": [
                        1236
                    ],
                    "errorMessage": "created asset 1 is correct"
                },
                {
                    "pc": [
                        1243
                    ],
                    "errorMessage": "created asset 2 is correct"
                },
                {
                    "pc": [
                        454
                    ],
                    "errorMessage": "expected approval page 0"
                },
                {
                    "pc": [
                        469
                    ],
                    "errorMessage": "expected approval page 1"
                },
                {
                    "pc": [
                        479
                    ],
                    "errorMessage": "expected clear state page"
                },
                {
                    "pc": [
                        389
                    ],
                    "errorMessage": "extra pages = 3"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAYFA+gHJhUDCYEBBwk2GgCwgQEBMQEyBEFTVDIEdW5pdAEzATUEQVNUMQRBU1QzBG5hbWUCMTACMTECMTICMTMCMTQCMTUCMTYTd2l0aCBhcmdzIHBhcmFtIHNldAI0MgMzcmQiRwSAAEcDMRhAAAUnCoAAZzEbQQTGggUEICVPkQTxkIUkBN+SDzcEPUY0XAQGQDxkNhoAjgUDxgMLATsAnwACIkMxGRREMRhENhoBF8AySXIIRLEhBLIIsgeBAbIQIrIBtoAEGXHRl7IagAgAAAAAAAAAAbIagAcABWhlbGxvshqyGCOyECKyAbO0PklXBABLAVcABIAEFR98dRJESwGBBFtPAoEMW0UDSwGBEFlLAhVPA04CUlcCAEUGgQESQQAaSSEEEkEAE0sEgAVoZWxsbxJBAAaBAUSBAUMiQv/4MRkURDEYRIH8D6+AA4D8D0xQgAFIULElsjgqshokshkoskIoskBJskBJskBJskAjshAisgGztEG0Q7Q4JRJETIECEkS1QAAoSwNQSwMVIksBDyJLAk8CTSVLAg8lSwNPAk1LAkwJSUsCDEsBSwNPAk1LB08DTwJSTwNMUE8DEkS1QAFLBE8CTwNSTwNQEkSBARJEtUIAKBJEgQFDMRkURDEYRLEqshokshkoskIpskAjshAisgG2KLJCKbJAK7IaJLIZI7IQIrIBtiiyQimyQCcGshokshkjshAisgG2KLJCKbJAgAE0shokshkjshAisgG2KLJCKbJAJweyGiSyGSOyECKyAbYoskIpskCAATayGiSyGSOyECKyAbYoskIpskCAATeyGiSyGSOyECKyAbYoskIpskCAATiyGiSyGSOyECKyAbYoskIpskCAATmyGiSyGSOyECKyAbYoskIpskAnC7IaJLIZI7IQIrIBtiiyQimyQCcMshokshkjshAisgG2KLJCKbJAJw2yGiSyGSOyECKyAbYoskIpskAnDrIaJLIZI7IQIrIBtiiyQimyQCcPshokshkjshAisgG2KLJCKbJAJxCyGiSyGSOyECKyAbYoskIpskAnEbIaJLIZI7IQIrIBs7gAOgAqEkS4AToAKxJEuAI6ACcGEkS4AzoAgAE0EkS4BDoAJwcSRLgFOgCAATYSRLgGOgCAATcSRLgHOgCAATgSRLgIOgCAATkSRLgJOgAnCxJEuAo6ACcMEkS4CzoAJw0SRLgMOgAnDhJEuA06ACcPEkS4DjoAJxASRLU6ACcREkSBAUMxGRREMRhEIkUHgABFAjEbQQB8KkUJK0UIgQJFBCJFAoEBRQMnErGyBUsCQQAESwGyGUsIshpLB7IaSwMlD0EABEsGshooskIoskAjshAisgGztAVFBrUaACoSRLUaASsSRDEbgQENQQAisScTshokshkoskIoskAjshAisgGztRoAJxMSREsFJxISRIEBQ4ADAAE0JwZFCicHRQglRQWAEW5vIGFyZ3MgcGFyYW0gc2V0TCJFBUUJQv9rMRkURDEYRDIKSScKJwRnsUmyKksBsiklsiMnBbIlJwiyJiEEsiIlshAisgGztCa0PLFLArIqSwOyKSWyIycFsiUnBLImIQSyIiWyECKyAbO0JrQ8TwMnCBJETCcEEkRMcQREJwgSRHEERCcEEkSxKLJCKLJAI7IQIrIBtkmyKksBsiklsiMnBbIlJwmyJiEEsiIlshAisgGztCa3AD1EJwkSRLEnFLIFKLJCKLJAI7IQIrIBticUsgWyKrIpJbIjJwWyJScJsiYhBLIiJbIQIrIBs4EBQzEZQPtfMRgURIEBQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}