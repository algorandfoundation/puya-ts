{
    "name": "ItxnDemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test1",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test5",
            "args": [
                {
                    "type": "application",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bmFtZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        264
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        173,
                        322,
                        478,
                        942,
                        1128
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1283
                    ],
                    "errorMessage": "app is created"
                },
                {
                    "pc": [
                        186
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        386
                    ],
                    "errorMessage": "approval pages = 2"
                },
                {
                    "pc": [
                        311
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1223,
                        1230
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1214
                    ],
                    "errorMessage": "asset1_txn is correct"
                },
                {
                    "pc": [
                        1219
                    ],
                    "errorMessage": "asset2_txn is correct"
                },
                {
                    "pc": [
                        1287
                    ],
                    "errorMessage": "asset3_txn is correct"
                },
                {
                    "pc": [
                        1347
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        176,
                        325,
                        481,
                        945,
                        1131
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        465
                    ],
                    "errorMessage": "clear state pages = 1"
                },
                {
                    "pc": [
                        1029
                    ],
                    "errorMessage": "correct args used 1"
                },
                {
                    "pc": [
                        1035,
                        1071
                    ],
                    "errorMessage": "correct args used 2"
                },
                {
                    "pc": [
                        1227
                    ],
                    "errorMessage": "created asset 1 is correct"
                },
                {
                    "pc": [
                        1234
                    ],
                    "errorMessage": "created asset 2 is correct"
                },
                {
                    "pc": [
                        446
                    ],
                    "errorMessage": "expected approval page 0"
                },
                {
                    "pc": [
                        461
                    ],
                    "errorMessage": "expected approval page 1"
                },
                {
                    "pc": [
                        471
                    ],
                    "errorMessage": "expected clear state page"
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "extra pages = 3"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAYFA+gHJhUDCYEBBwk2GgCwgQEBMQEyBEFTVDIEdW5pdAEzATUEQVNUMQRBU1QzBG5hbWUCMTACMTECMTICMTMCMTQCMTUCMTYTd2l0aCBhcmdzIHBhcmFtIHNldAI0MgMzcmQiRwWAAEcCMRhAAAUnCoAAZzEbQQS9ggUEICVPkQTxkIUkBN+SDzcEPUY0XAQGQDxkNhoAjgUDvQMDATMAlwACIkMxGRREMRhENhoBF8AySXIIRLEhBLIIsgeBAbIQIrIBtoAEGXHRl7IagAgAAAAAAAAAAbIagAcABWhlbGxvshqyGCOyECKyAbO0PklFCklXBABFBUlXAASABBUffHUSRIEEW4EBEkEAKUsIgQxbIQQSQQAeSwNJgRBZSwEVUlcCAIAFaGVsbG8SQQAGgQFEgQFDIkL/+DEZFEQxGESB/A+vgAOA/A9MUIABSFCxJbI4KrIaJLIZKLJCKLJASbJASbJASbJAI7IQIrIBs7RBtEO0OCUSREyBAhJEtUAAKEsDUEsDFSJLAQ8iSwJPAk0lSwIPJUsDTwJNSwJMCUlLAgxLAUsDTwJNSwdPA08CUk8DTFBPAxJEtUABSwRPAk8DUk8DUBJEgQESRLVCACgSRIEBQzEZFEQxGESxKrIaJLIZKLJCKbJAI7IQIrIBtiiyQimyQCuyGiSyGSOyECKyAbYoskIpskAnBrIaJLIZI7IQIrIBtiiyQimyQIABNLIaJLIZI7IQIrIBtiiyQimyQCcHshokshkjshAisgG2KLJCKbJAgAE2shokshkjshAisgG2KLJCKbJAgAE3shokshkjshAisgG2KLJCKbJAgAE4shokshkjshAisgG2KLJCKbJAgAE5shokshkjshAisgG2KLJCKbJAJwuyGiSyGSOyECKyAbYoskIpskAnDLIaJLIZI7IQIrIBtiiyQimyQCcNshokshkjshAisgG2KLJCKbJAJw6yGiSyGSOyECKyAbYoskIpskAnD7IaJLIZI7IQIrIBtiiyQimyQCcQshokshkjshAisgG2KLJCKbJAJxGyGiSyGSOyECKyAbO4ADoAKhJEuAE6ACsSRLgCOgAnBhJEuAM6AIABNBJEuAQ6ACcHEkS4BToAgAE2EkS4BjoAgAE3EkS4BzoAgAE4EkS4CDoAgAE5EkS4CToAJwsSRLgKOgAnDBJEuAs6ACcNEkS4DDoAJw4SRLgNOgAnDxJEuA46ACcQEkS1OgAnERJEgQFDMRkURDEYRCJFBoAARQExG0EAeypFCCtFB4ECRQMiRQGBAUUCJxKxsgVLAUEAA0myGUsHshpLBrIaSwIlD0EABEsFshooskIoskAjshAisgGztAVFBbUaACoSRLUaASsSRDEbgQENQQAisScTshokshkoskIoskAjshAisgGztRoAJxMSREsEJxISRIEBQ4ADAAE0JwZFCScHRQclRQSAEW5vIGFyZ3MgcGFyYW0gc2V0TCJFBEUIQv9sMRkURDEYRDIKSScKJwRnsUmyKksBsiklsiMnBbIlJwiyJiEEsiIlshAisgGztCa0PLFLArIqSwOyKSWyIycFsiUnBLImIQSyIiWyECKyAbO0JrQ8TwMnCBJETCcEEkRMcQREJwgSRHEERCcEEkSxKLJCKLJAI7IQIrIBtkmyKksBsiklsiMnBbIlJwmyJiEEsiIlshAisgGztCa3AD1EJwkSRLEnFLIFKLJCKLJAI7IQIrIBticUsgWyKrIpJbIjJwWyJScJsiYhBLIiJbIQIrIBs4EBQzEZQPtoMRgURIEBQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}