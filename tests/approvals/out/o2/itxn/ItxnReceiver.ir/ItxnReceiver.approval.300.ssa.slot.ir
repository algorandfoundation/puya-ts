main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L226
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "receivePay(uint64,pay,string)(uint64,uint64,string)" => block@3, * => block@4}
    block@3: // receivePay_route_L227
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#1: uint64 = (txn GroupIndex)
        let b#0: uint64 = (- tmp%1#1 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) b#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let c#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#3: uint64 = ((gtxns Amount) b#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#3)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%length%0#0: uint64 = (len c#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 c#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x0012)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%encoded_value%0#0)
        let tmp%4#1: bytes = (concat 0x151f7c75 aggregate%concat%0#0)
        (log tmp%4#1)
        exit 1u
    block@4: // switch_case_next_L226
        fail
    block@5: // __algots__.defaultCreate_L226
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u