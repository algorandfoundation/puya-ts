main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L227
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "receivePay(uint64,pay,string)(uint64,uint64,string)" => block@3, * => block@10}
    block@3: // receivePay_route_L228
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: uint64 = (txn GroupIndex)
        let b#0: uint64 = (- tmp%8#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) b#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let c#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#2: uint64 = ((gtxns Amount) b#0)
        let array%val_as_bytes%0#1: bytes[8] = (itob a#0)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob tmp%0#2)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%length%0#1: uint64 = (len c#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 c#0)
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let array%tail%0#1: bytes = (concat 0x array%as_Encoded(len+utf8[])%0#1)
        let array%data_length%0#1: uint64 = (len array%as_Encoded(len+utf8[])%0#1)
        let array%current_tail_offset%0#1: uint64 = (+ 18u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 18u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%2#1: Encoded(uint64,uint64,(len+utf8[])) = (concat array%encoded%1#1 array%offset_as_uint16%0#1)
        let array%encoded%3#1: Encoded(uint64,uint64,(len+utf8[])) = (concat array%encoded%2#1 array%tail%0#1)
        let tmp%13#0: Encoded(uint64,uint64,(len+utf8[])) = array%encoded%3#1
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        let tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L227
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L227
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        let tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L227
        let tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__%0#0 <- block@3, tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__%0#1 <- block@7, tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0