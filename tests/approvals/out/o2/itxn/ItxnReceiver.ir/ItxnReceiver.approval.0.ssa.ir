main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__() -> bool:
    block@0: // L227
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L227
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "receivePay(uint64,pay,string)(uint64,uint64,string)" => block@2, * => block@3}
    block@2: // receivePay_route_L228
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%8#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let tmp%9#0: string = decode<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let (tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: string) = tests/approvals/itxn.algo.ts::ItxnReceiver.receivePay(tmp%7#0, gtxn_idx%0#0, tmp%9#0)
        let tmp%13#0: Encoded(uint64,uint64,(len+utf8[])) = encode<(uint64,uint64,(len+utf8[]))>(tmp%10#0, tmp%11#0, tmp%12#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        return 1u
    block@3: // switch_case_default_L227
        goto block@4
    block@4: // switch_case_next_L227
        goto block@9
    block@5: // bare_routing_L227
        let tmp%15#0: uint64 = (txn OnCompletion)
        switch tmp%15#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L227
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (== tmp%16#0 0u)
        (assert tmp%17#0) // can only call when creating
        tests/approvals/itxn.algo.ts::ItxnReceiver.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L227
        goto block@8
    block@8: // switch_case_next_L227
        goto block@9
    block@9: // after_if_else_L227
        return 0u

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.receivePay(a: uint64, b: uint64, c: string) -> <uint64, uint64, string>:
    block@0: // L228
        let tmp%0#0: uint64 = ((gtxns Amount) b#0)
        return a#0 tmp%0#0 c#0

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.__algots__.defaultCreate() -> void:
    block@0: // L227
        return 