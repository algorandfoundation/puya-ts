{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template_and_custom_prefix",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_transactions",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_reference_types",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        600,
                        645,
                        693,
                        890,
                        1230,
                        1580,
                        1627,
                        2005,
                        2055,
                        2129,
                        2177
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        82
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        2224
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        697,
                        702
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        317
                    ],
                    "errorMessage": "asset exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}