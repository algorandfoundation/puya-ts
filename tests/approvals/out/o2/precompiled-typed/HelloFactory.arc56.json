{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template_and_custom_prefix",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_transactions",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_reference_types",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        618,
                        663,
                        711,
                        918,
                        1158,
                        1408,
                        1675,
                        1725,
                        1777
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        113,
                        308,
                        781,
                        948,
                        1202,
                        1448
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        715,
                        720
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        300
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1826
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        116,
                        311,
                        784,
                        951,
                        1205,
                        1451
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCA2IDEgMwogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IGJhc2U2NChDb0VCUXc9PSkgMHhkMGEyODIwMCAiVEVTVCIgIlQiIDB4MjQzNzhkM2MgMHgwMDA1Nzc2ZjcyNmM2NCAweDljZDg3ZGUzIDB4NGM1YzYxYmEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEzCiAgICAvLyBjbGFzcyBIZWxsb0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTEKICAgIHB1c2hieXRlc3MgMHgyYTE3OTk1YyAweGUzMjU0YmM5IDB4ZTJiN2M2OTIgMHgwMjk0N2NhMiAweDQ5NWUwMDEwIDB4Mjc1MTllN2IgLy8gbWV0aG9kICJ0ZXN0X2NvbXBpbGVfY29udHJhY3QoKXZvaWQiLCBtZXRob2QgInRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9hbmRfY3VzdG9tX3ByZWZpeCgpdm9pZCIsIG1ldGhvZCAidGVzdF9jb21waWxlX2NvbnRyYWN0X2xhcmdlKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF90cmFuc2FjdGlvbnMoKXZvaWQiLCBtZXRob2QgInRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlcygpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fdGVzdF9jb21waWxlX2NvbnRyYWN0X3JvdXRlQDMgbWFpbl90ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9yb3V0ZUA0IG1haW5fdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXhfcm91dGVANSBtYWluX3Rlc3RfY29tcGlsZV9jb250cmFjdF9sYXJnZV9yb3V0ZUA2IG1haW5fdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX3JvdXRlQDcgbWFpbl90ZXN0X2NhbGxfY29udHJhY3Rfd2l0aF9yZWZlcmVuY2VfdHlwZXNfcm91dGVAOAoKbWFpbl9hZnRlcl9pZl9lbHNlQDE1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTMKICAgIC8vIGNsYXNzIEhlbGxvRmFjdG9yeSBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfcmVmZXJlbmNlX3R5cGVzX3JvdXRlQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzgKICAgIC8vIHRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlcygpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTQxCiAgICAvLyBjb25zdCBhcHBJZCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzkKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoUmVjZWl2ZXNSZWZlcmVuY2VUeXBlcykKICAgIGJ5dGVjXzEgLy8gYmFzZTY0KENvRUJRdz09KQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgYmFzZTY0KENqRWJRUUE0Z0FTRFBSSVNOaG9BamdFQUE0RUFRekVaRkVReEdFUTJHZ0VYd0RJMkdnSVh3QncyR2dNWHdEQlBBbklJUkxCTXNIRUVSTENCQVVNeEdVRC8wREVZRkVTQkFVTT0pCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNDEKICAgIC8vIGNvbnN0IGFwcElkID0gY29tcGlsZWQuYmFyZUNyZWF0ZSgpLmNyZWF0ZWRBcHAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0My0xNDkKICAgIC8vIGNvbnN0IGFzc2V0ID0gaXR4bgogICAgLy8gICAuYXNzZXRDb25maWcoewogICAgLy8gICAgIHRvdGFsOiAxLAogICAgLy8gICAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgICAgYXNzZXROYW1lOiAnVEVTVCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKS5jcmVhdGVkQXNzZXQKICAgIGl0eG5fYmVnaW4KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0NwogICAgLy8gYXNzZXROYW1lOiAnVEVTVCcsCiAgICBieXRlY18zIC8vICJURVNUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0NgogICAgLy8gdW5pdE5hbWU6ICdUJywKICAgIGJ5dGVjIDQgLy8gIlQiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0NQogICAgLy8gdG90YWw6IDEsCiAgICBpbnRjXzIgLy8gMQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNDMtMTQ4CiAgICAvLyBjb25zdCBhc3NldCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICB0b3RhbDogMSwKICAgIC8vICAgICB1bml0TmFtZTogJ1QnLAogICAgLy8gICAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gICB9KQogICAgaW50Y18zIC8vIDMKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTQzLTE0OQogICAgLy8gY29uc3QgYXNzZXQgPSBpdHhuCiAgICAvLyAgIC5hc3NldENvbmZpZyh7CiAgICAvLyAgICAgdG90YWw6IDEsCiAgICAvLyAgICAgdW5pdE5hbWU6ICdUJywKICAgIC8vICAgICBhc3NldE5hbWU6ICdURVNUJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpLmNyZWF0ZWRBc3NldAogICAgaXR4bl9zdWJtaXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0OQogICAgLy8gLnN1Ym1pdCgpLmNyZWF0ZWRBc3NldAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTUxLTE1NAogICAgLy8gY29uc3QgcmVzdWx0ID0gY29tcGlsZWQuY2FsbC5yZWNlaXZlc1JlZmVyZW5jZVR5cGVzKHsKICAgIC8vICAgYXJnczogW0dsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlciwgYXNzZXRdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNTIKICAgIC8vIGFyZ3M6IFtHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXIsIGFzc2V0XSwKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgdHhuIFNlbmRlcgogICAgaXR4bl9maWVsZCBBY2NvdW50cwogICAgZGlnIDEKICAgIGl0eG5fZmllbGQgQXNzZXRzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTUxLTE1NAogICAgLy8gY29uc3QgcmVzdWx0ID0gY29tcGlsZWQuY2FsbC5yZWNlaXZlc1JlZmVyZW5jZVR5cGVzKHsKICAgIC8vICAgYXJnczogW0dsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCwgVHhuLnNlbmRlciwgYXNzZXRdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHg4MzNkMTIxMiAvLyBtZXRob2QgInJlY2VpdmVzUmVmZXJlbmNlVHlwZXMoYXBwbGljYXRpb24sYWNjb3VudCxhc3NldCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hieXRlcyAweDAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGJ5dGVzIDB4MDEKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE1MS0xNTQKICAgIC8vIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNSZWZlcmVuY2VUeXBlcyh7CiAgICAvLyAgIGFyZ3M6IFtHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQsIFR4bi5zZW5kZXIsIGFzc2V0XSwKICAgIC8vICAgYXBwSWQsCiAgICAvLyB9KQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxNTYKICAgIC8vIGFzc2VydChyZXN1bHQuaXR4bi5sb2dzKDApID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5ieXRlcykKICAgIGl0eG5hIExvZ3MgMAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE1NwogICAgLy8gYXNzZXJ0KHJlc3VsdC5pdHhuLmxvZ3MoMSkgPT09IFR4bi5zZW5kZXIuYnl0ZXMpCiAgICBpdHhuYSBMb2dzIDEKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE1OAogICAgLy8gYXNzZXJ0KHJlc3VsdC5pdHhuLmxvZ3MoMikgPT09IGFzc2V0Lm5hbWUpCiAgICBpdHhuYSBMb2dzIDIKICAgIHN3YXAKICAgIGFzc2V0X3BhcmFtc19nZXQgQXNzZXROYW1lCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzgKICAgIC8vIHRlc3RfY2FsbF9jb250cmFjdF93aXRoX3JlZmVyZW5jZV90eXBlcygpIHsKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zX3JvdXRlQDc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5NQogICAgLy8gdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5OAogICAgLy8gY29uc3QgYXBwSWQgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OTYKICAgIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZUFyYzQoUmVjZWl2ZXNUeG5zKQogICAgYnl0ZWNfMSAvLyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIHB1c2hieXRlcyBiYXNlNjQoQ2lBREFRTUFKZ0VFRlI5OGRZQUFSd014RzBFQTBZSUVCSTlva3U4RW5OaDk0d1RUWnNocEJJRzJjMUkyR2dDT0JBQ1dBRVlBSndBQ0pFTXhHUlJFTVJoRU1SYUJBZ2s0RUVrakVrUXhGaUlKT0JCSkloSkVUQ01TUkNJU1JDSkRNUmtVUkRFWVJERVdJZ2xKT0JBakVrUTRGNEFDQUNCTVVDaE1VTEFpUXpFWkZFUXhHRVF4RmlJSlNVVUNPQkJKUlFVakVrRUFHRWs0UEVsRkJFRUFDVXNDRmloTVVMQWlRMGs0SVVMLzgwc0RnUVlTUVFBVVNUZzlTVVVEUVFBRlN3RkMvOTFKT0JoQy85Y2tRdi9UTVJrVVJERVlSSUFNRlI5OGRRQUFBQUFBQUFBQnNDSkRNUmxBLzAweEdCUkVJa009KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6OTgKICAgIC8vIGNvbnN0IGFwcElkID0gY29tcGlsZWQuYmFyZUNyZWF0ZSgpLmNyZWF0ZWRBcHAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwNi0xMDkKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBbnlUeG4oewogICAgLy8gICBhcmdzOiBbYXNzZXRDcmVhdGVdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDMKICAgIC8vIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgYnl0ZWNfMyAvLyAiVEVTVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDIKICAgIC8vIHVuaXROYW1lOiAnVCcsCiAgICBieXRlYyA0IC8vICJUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDEKICAgIC8vIHRvdGFsOiAxLAogICAgaW50Y18yIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAwLTEwNAogICAgLy8gY29uc3QgYXNzZXRDcmVhdGUgPSBpdHhuLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgdG90YWw6IDEsCiAgICAvLyAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gfSkKICAgIGludGNfMyAvLyAzCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwNi0xMDkKICAgIC8vIGNvbXBpbGVkLmNhbGwucmVjZWl2ZXNBbnlUeG4oewogICAgLy8gICBhcmdzOiBbYXNzZXRDcmVhdGVdLAogICAgLy8gICBhcHBJZCwKICAgIC8vIH0pCiAgICBpdHhuX25leHQKICAgIGJ5dGVjIDcgLy8gbWV0aG9kICJyZWNlaXZlc0FueVR4bih0eG4pdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBnaXR4biAxIExhc3RMb2cKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTE2LTExOQogICAgLy8gY29tcGlsZWQuY2FsbC5yZWNlaXZlc0FueVR4bih7CiAgICAvLyAgIGFwcElkLAogICAgLy8gICBhcmdzOiBbYXBwQ2FsbF0sCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTEzCiAgICAvLyBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoUmVjZWl2ZXNUeG5zLnByb3RvdHlwZS5nZXRPbmUpXSwKICAgIHB1c2hieXRlcyAweDhmNjg5MmVmIC8vIG1ldGhvZCAiZ2V0T25lKCl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjExMS0xMTQKICAgIC8vIGNvbnN0IGFwcENhbGwgPSBpdHhuLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgIGFwcElkLAogICAgLy8gICBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoUmVjZWl2ZXNUeG5zLnByb3RvdHlwZS5nZXRPbmUpXSwKICAgIC8vIH0pCiAgICBpbnRjXzEgLy8gNgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMTYtMTE5CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQW55VHhuKHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthcHBDYWxsXSwKICAgIC8vIH0pCiAgICBpdHhuX25leHQKICAgIGJ5dGVjIDcgLy8gbWV0aG9kICJyZWNlaXZlc0FueVR4bih0eG4pdWludDY0IgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBnaXR4biAxIExhc3RMb2cKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTIxLTEyNAogICAgLy8gY29tcGlsZWQuY2FsbC5yZWNlaXZlc0Fzc2V0Q29uZmlnKHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthc3NldENyZWF0ZV0sCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAzCiAgICAvLyBhc3NldE5hbWU6ICdURVNUJywKICAgIGJ5dGVjXzMgLy8gIlRFU1QiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAyCiAgICAvLyB1bml0TmFtZTogJ1QnLAogICAgYnl0ZWMgNCAvLyAiVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAxCiAgICAvLyB0b3RhbDogMSwKICAgIGludGNfMiAvLyAxCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEwMC0xMDQKICAgIC8vIGNvbnN0IGFzc2V0Q3JlYXRlID0gaXR4bi5hc3NldENvbmZpZyh7CiAgICAvLyAgIHRvdGFsOiAxLAogICAgLy8gICB1bml0TmFtZTogJ1QnLAogICAgLy8gICBhc3NldE5hbWU6ICdURVNUJywKICAgIC8vIH0pCiAgICBpbnRjXzMgLy8gMwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMjEtMTI0CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWcoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlXSwKICAgIC8vIH0pCiAgICBpdHhuX25leHQKICAgIHB1c2hieXRlcyAweGQzNjZjODY5IC8vIG1ldGhvZCAicmVjZWl2ZXNBc3NldENvbmZpZyhhY2ZnKWJ5dGVbXSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgZ2l0eG4gMSBMYXN0TG9nCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEyNwogICAgLy8gcmVjZWl2ZXI6IGFwcElkLmFkZHJlc3MsCiAgICBkdXAKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEyOQogICAgLy8gc2VuZGVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTMyLTEzNQogICAgLy8gY29tcGlsZWQuY2FsbC5yZWNlaXZlc0Fzc2V0Q29uZmlnQW5kUGF5KHsKICAgIC8vICAgYXBwSWQsCiAgICAvLyAgIGFyZ3M6IFthc3NldENyZWF0ZSwgcGF5XSwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDMKICAgIC8vIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgYnl0ZWNfMyAvLyAiVEVTVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDIKICAgIC8vIHVuaXROYW1lOiAnVCcsCiAgICBieXRlYyA0IC8vICJUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMDEKICAgIC8vIHRvdGFsOiAxLAogICAgaW50Y18yIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTAwLTEwNAogICAgLy8gY29uc3QgYXNzZXRDcmVhdGUgPSBpdHhuLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgdG90YWw6IDEsCiAgICAvLyAgIHVuaXROYW1lOiAnVCcsCiAgICAvLyAgIGFzc2V0TmFtZTogJ1RFU1QnLAogICAgLy8gfSkKICAgIGludGNfMyAvLyAzCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEzNAogICAgLy8gYXJnczogW2Fzc2V0Q3JlYXRlLCBwYXldLAogICAgaXR4bl9uZXh0CiAgICBpdHhuX2ZpZWxkIFNlbmRlcgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTI4CiAgICAvLyBhbW91bnQ6IDEwMDAwMCwKICAgIHB1c2hpbnQgMTAwMDAwIC8vIDEwMDAwMAogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEyNi0xMzAKICAgIC8vIGNvbnN0IHBheSA9IGl0eG4ucGF5bWVudCh7CiAgICAvLyAgIHJlY2VpdmVyOiBhcHBJZC5hZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IDEwMDAwMCwKICAgIC8vICAgc2VuZGVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuYWRkcmVzcywKICAgIC8vIH0pCiAgICBpbnRjXzIgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoxMzItMTM1CiAgICAvLyBjb21waWxlZC5jYWxsLnJlY2VpdmVzQXNzZXRDb25maWdBbmRQYXkoewogICAgLy8gICBhcHBJZCwKICAgIC8vICAgYXJnczogW2Fzc2V0Q3JlYXRlLCBwYXldLAogICAgLy8gfSkKICAgIGl0eG5fbmV4dAogICAgcHVzaGJ5dGVzIDB4ODFiNjczNTIgLy8gbWV0aG9kICJyZWNlaXZlc0Fzc2V0Q29uZmlnQW5kUGF5KGFjZmcscGF5KXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5NQogICAgLy8gdGVzdF9jYWxsX2NvbnRyYWN0X3dpdGhfdHJhbnNhY3Rpb25zKCkgewogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl90ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2Vfcm91dGVANjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjc5CiAgICAvLyB0ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2UoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjgyCiAgICAvLyBjb25zdCBsYXJnZUFwcCA9IGNvbXBpbGVkLmJhcmVDcmVhdGUoKS5jcmVhdGVkQXBwCiAgICBpdHhuX2JlZ2luCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo4MAogICAgLy8gY29uc3QgY29tcGlsZWQgPSBjb21waWxlQXJjNChMYXJnZVByb2dyYW0pCiAgICBieXRlY18xIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDakViUVFBOWdnSUVBcjh3endRa040MDhOaG9BamdJQUR3QURnUUJETVJtQkJSSkVNUmhFZ1FGRE1Sa1VSREVZUklHQUlLOFZGb0FFRlI5OGRVeFFzSUVCUXpFWlFQL1RNUmdVUklFQlF3PT0pCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo4MgogICAgLy8gY29uc3QgbGFyZ2VBcHAgPSBjb21waWxlZC5iYXJlQ3JlYXRlKCkuY3JlYXRlZEFwcAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6ODQtODYKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlc3VsdCB9ID0gY29tcGlsZWQuY2FsbC5nZXRCaWdCeXRlc0xlbmd0aCh7CiAgICAvLyAgIGFwcElkOiBsYXJnZUFwcCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICBwdXNoYnl0ZXMgMHgwMmJmMzBjZiAvLyBtZXRob2QgImdldEJpZ0J5dGVzTGVuZ3RoKCl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo4OAogICAgLy8gYXNzZXJ0KHJlc3VsdCA9PT0gNDA5NikKICAgIHB1c2hpbnQgNDA5NiAvLyA0MDk2CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo5MC05MgogICAgLy8gY29tcGlsZWQuY2FsbC5kZWxldGUoewogICAgLy8gICBhcHBJZDogbGFyZ2VBcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgYnl0ZWMgNSAvLyBtZXRob2QgImRlbGV0ZSgpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjc5CiAgICAvLyB0ZXN0X2NvbXBpbGVfY29udHJhY3RfbGFyZ2UoKSB7CiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX2FuZF9jdXN0b21fcHJlZml4X3JvdXRlQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo2MgogICAgLy8gdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGVfYW5kX2N1c3RvbV9wcmVmaXgoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjY1CiAgICAvLyBjb25zdCBoZWxsb0FwcCA9IGNvbXBpbGVkLmNhbGwuY3JlYXRlKCkuaXR4bi5jcmVhdGVkQXBwCiAgICBpdHhuX2JlZ2luCiAgICBieXRlYyA4IC8vIG1ldGhvZCAiY3JlYXRlKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjYzCiAgICAvLyBjb25zdCBjb21waWxlZCA9IGNvbXBpbGVBcmM0KEhlbGxvVGVtcGxhdGVDdXN0b21QcmVmaXgsIHsgdGVtcGxhdGVWYXJzOiB7IEdSRUVUSU5HOiAnYm9uam91cicgfSwgdGVtcGxhdGVWYXJzUHJlZml4OiAnUFJGWF8nIH0pCiAgICBpbnRjXzIgLy8gMQogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIGJ5dGVjXzEgLy8gYmFzZTY0KENvRUJRdz09KQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgYmFzZTY0KENpQUNBUUFtQWdobmNtVmxkR2x1WndkaWIyNXFiM1Z5TVJoQUFBTW9LV2N4RzBFQUk0SUVCRXhjWWJvRUpEZU5QQVNnNkJoeUJOQ2lnZ0EyR2dDT0JBQkNBRGNBTEFBQ0kwTXhHUlJFTVJoRU5ob0JWd0lBSXlobFJJQUJJRkJNVUVrVkZsY0dBa3hRZ0FRVkgzeDFURkN3SWtNeEdZRUVFa1F4R0VRaVF6RVpnUVVTUkRFWVJDSkRNUmtVUkRFWUZFUWlRdz09KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjUKICAgIC8vIGNvbnN0IGhlbGxvQXBwID0gY29tcGlsZWQuY2FsbC5jcmVhdGUoKS5pdHhuLmNyZWF0ZWRBcHAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGdpdHhuIDAgQ3JlYXRlZEFwcGxpY2F0aW9uSUQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjY3LTcwCiAgICAvLyBjb25zdCB7IHJldHVyblZhbHVlOiByZXN1bHQgfSA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICBieXRlY18yIC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo2OAogICAgLy8gYXJnczogWyd3b3JsZCddLAogICAgYnl0ZWMgNiAvLyAweDAwMDU3NzZmNzI2YzY0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjctNzAKICAgIC8vIGNvbnN0IHsgcmV0dXJuVmFsdWU6IHJlc3VsdCB9ID0gY29tcGlsZWQuY2FsbC5ncmVldCh7CiAgICAvLyAgIGFyZ3M6IFsnd29ybGQnXSwKICAgIC8vICAgYXBwSWQ6IGhlbGxvQXBwLAogICAgLy8gfSkKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBleHRyYWN0IDYgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NzIKICAgIC8vIGFzc2VydChyZXN1bHQgPT09ICdib25qb3VyIHdvcmxkJykKICAgIHB1c2hieXRlcyAiYm9uam91ciB3b3JsZCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjc0LTc2CiAgICAvLyBjb21waWxlZC5jYWxsLmRlbGV0ZSh7CiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICBieXRlYyA1IC8vIG1ldGhvZCAiZGVsZXRlKCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NjIKICAgIC8vIHRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlX2FuZF9jdXN0b21fcHJlZml4KCkgewogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl90ZXN0X2NvbXBpbGVfY29udHJhY3Rfd2l0aF90ZW1wbGF0ZV9yb3V0ZUA0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NDUKICAgIC8vIHRlc3RfY29tcGlsZV9jb250cmFjdF93aXRoX3RlbXBsYXRlKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo0OAogICAgLy8gY29uc3QgaGVsbG9BcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSgpLml0eG4uY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgYnl0ZWMgOCAvLyBtZXRob2QgImNyZWF0ZSgpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo0NgogICAgLy8gY29uc3QgY29tcGlsZWQgPSBjb21waWxlQXJjNChIZWxsb1RlbXBsYXRlLCB7IHRlbXBsYXRlVmFyczogeyBHUkVFVElORzogJ2hleScgfSB9KQogICAgaW50Y18yIC8vIDEKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBieXRlY18xIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDaUFDQVFBbUFnaG5jbVZsZEdsdVp3Tm9aWGt4R0VBQUF5Z3BaekViUVFBamdnUUVURnhodWdRa040MDhCS0RvR0hJRTBLS0NBRFlhQUk0RUFFSUFOd0FzQUFJalF6RVpGRVF4R0VRMkdnRlhBZ0FqS0dWRWdBRWdVRXhRU1JVV1Z3WUNURkNBQkJVZmZIVk1VTEFpUXpFWmdRUVNSREVZUkNKRE1SbUJCUkpFTVJoRUlrTXhHUlJFTVJnVVJDSkQpCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo0OAogICAgLy8gY29uc3QgaGVsbG9BcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSgpLml0eG4uY3JlYXRlZEFwcAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgZ2l0eG4gMCBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NTAtNTMKICAgIC8vIGNvbnN0IHR4biA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICBieXRlY18yIC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo1MQogICAgLy8gYXJnczogWyd3b3JsZCddLAogICAgYnl0ZWMgNiAvLyAweDAwMDU3NzZmNzI2YzY0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NTAtNTMKICAgIC8vIGNvbnN0IHR4biA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBoZWxsb0FwcCwKICAgIC8vIH0pCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzEgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgZXh0cmFjdCA2IDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjU1CiAgICAvLyBhc3NlcnQodHhuLnJldHVyblZhbHVlID09PSAnaGV5IHdvcmxkJykKICAgIHB1c2hieXRlcyAiaGV5IHdvcmxkIgogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6NTctNTkKICAgIC8vIGNvbXBpbGVkLmNhbGwuZGVsZXRlKHsKICAgIC8vICAgYXBwSWQ6IGhlbGxvQXBwLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIGJ5dGVjIDUgLy8gbWV0aG9kICJkZWxldGUoKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGludCA1IC8vIDUKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czo0NQogICAgLy8gdGVzdF9jb21waWxlX2NvbnRyYWN0X3dpdGhfdGVtcGxhdGUoKSB7CiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfY29tcGlsZV9jb250cmFjdF9yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTQKICAgIC8vIHRlc3RfY29tcGlsZV9jb250cmFjdCgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTctMTkKICAgIC8vIGNvbnN0IGFwcCA9IGNvbXBpbGVkLmNhbGwuY3JlYXRlKHsKICAgIC8vICAgYXJnczogWydoZWxsbyddLAogICAgLy8gfSkuaXR4bi5jcmVhdGVkQXBwCiAgICBpdHhuX2JlZ2luCiAgICBwdXNoYnl0ZXMgMHgwMDkyMjVhZSAvLyBtZXRob2QgImhlbGxvQ3JlYXRlKHN0cmluZyl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE4CiAgICAvLyBhcmdzOiBbJ2hlbGxvJ10sCiAgICBwdXNoYnl0ZXMgMHgwMDA1Njg2NTZjNmM2ZgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE1CiAgICAvLyBjb25zdCBjb21waWxlZCA9IGNvbXBpbGVBcmM0KEhlbGxvKQogICAgaW50Y18yIC8vIDEKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBieXRlY18xIC8vIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDaUFDQVFBbUFRaG5jbVZsZEdsdVp6RVlRQUFFS0lBQVp6RWJRUUFqZ2dRRUFKSWxyZ1FrTjQwOEJLRG9HSElFMEtLQ0FEWWFBSTRFQUVJQU53QXNBQUlqUXpFWkZFUXhHRVEyR2dGWEFnQWpLR1ZFZ0FFZ1VFeFFTUlVXVndZQ1RGQ0FCQlVmZkhWTVVMQWlRekVaZ1FRU1JERVlSQ0pETVJtQkJSSkVNUmhFSWtNeEdSUkVNUmdVUkRZYUFWY0NBQ2hNWnlKRCkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE3LTE5CiAgICAvLyBjb25zdCBhcHAgPSBjb21waWxlZC5jYWxsLmNyZWF0ZSh7CiAgICAvLyAgIGFyZ3M6IFsnaGVsbG8nXSwKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MTkKICAgIC8vIH0pLml0eG4uY3JlYXRlZEFwcAogICAgZ2l0eG4gMCBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjEtMjQKICAgIC8vIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVkLmNhbGwuZ3JlZXQoewogICAgLy8gICBhcmdzOiBbJ3dvcmxkJ10sCiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaXR4bl9iZWdpbgogICAgYnl0ZWNfMiAvLyBtZXRob2QgImdyZWV0KHN0cmluZylzdHJpbmciCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjIKICAgIC8vIGFyZ3M6IFsnd29ybGQnXSwKICAgIGJ5dGVjIDYgLy8gMHgwMDA1Nzc2ZjcyNmM2NAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjIxLTI0CiAgICAvLyBjb25zdCByZXN1bHQgPSBjb21waWxlZC5jYWxsLmdyZWV0KHsKICAgIC8vICAgYXJnczogWyd3b3JsZCddLAogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMSAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBleHRyYWN0IDYgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjUKICAgIC8vIGFzc2VydChyZXN1bHQgPT09ICdoZWxsbyB3b3JsZCcpCiAgICBwdXNoYnl0ZXMgImhlbGxvIHdvcmxkIgogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MjctMzAKICAgIC8vIGNvbnN0IHJlc3VsdDIgPSBhYmlDYWxsKEhlbGxvLnByb3RvdHlwZS5ncmVldCwgewogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gICBhcmdzOiBbJ2FiaSddLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGl0eG5fYmVnaW4KICAgIGJ5dGVjXzIgLy8gbWV0aG9kICJncmVldChzdHJpbmcpc3RyaW5nIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjI5CiAgICAvLyBhcmdzOiBbJ2FiaSddLAogICAgcHVzaGJ5dGVzIDB4MDAwMzYxNjI2OQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czoyNy0zMAogICAgLy8gY29uc3QgcmVzdWx0MiA9IGFiaUNhbGwoSGVsbG8ucHJvdG90eXBlLmdyZWV0LCB7CiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyAgIGFyZ3M6IFsnYWJpJ10sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGV4dHJhY3QgNiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozMgogICAgLy8gYXNzZXJ0KHJlc3VsdDIgPT09ICdoZWxsbyBhYmknKQogICAgcHVzaGJ5dGVzICJoZWxsbyBhYmkiCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozNC0zNwogICAgLy8gY29uc3QgcmVzdWx0MyA9IGFiaUNhbGwoSGVsbG9TdHViYmVkLnByb3RvdHlwZS5ncmVldCwgewogICAgLy8gICBhcHBJZDogYXBwLAogICAgLy8gICBhcmdzOiBbJ3N0dWJiZWQnXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICBieXRlY18yIC8vIG1ldGhvZCAiZ3JlZXQoc3RyaW5nKXN0cmluZyIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozNgogICAgLy8gYXJnczogWydzdHViYmVkJ10sCiAgICBwdXNoYnl0ZXMgMHgwMDA3NzM3NDc1NjI2MjY1NjQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3ByZWNvbXBpbGVkLXR5cGVkLmFsZ28udHM6MzQtMzcKICAgIC8vIGNvbnN0IHJlc3VsdDMgPSBhYmlDYWxsKEhlbGxvU3R1YmJlZC5wcm90b3R5cGUuZ3JlZXQsIHsKICAgIC8vICAgYXBwSWQ6IGFwcCwKICAgIC8vICAgYXJnczogWydzdHViYmVkJ10sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGV4dHJhY3QgNiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcHJlY29tcGlsZWQtdHlwZWQuYWxnby50czozOAogICAgLy8gYXNzZXJ0KHJlc3VsdDMgPT09ICdoZWxsbyBzdHViYmVkJykKICAgIHB1c2hieXRlcyAiaGVsbG8gc3R1YmJlZCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjQwLTQyCiAgICAvLyBjb21waWxlZC5jYWxsLmRlbGV0ZSh7CiAgICAvLyAgIGFwcElkOiBhcHAsCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgYnl0ZWMgNSAvLyBtZXRob2QgImRlbGV0ZSgpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18xIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjE0CiAgICAvLyB0ZXN0X2NvbXBpbGVfY29udHJhY3QoKSB7CiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9wcmVjb21waWxlZC10eXBlZC5hbGdvLnRzOjEzCiAgICAvLyBjbGFzcyBIZWxsb0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE1CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}