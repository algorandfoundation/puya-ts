main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_compile_contract()void" => block@3, method "test_compile_contract_with_template()void" => block@4, method "test_compile_contract_with_template_and_custom_prefix()void" => block@5, method "test_compile_contract_large()void" => block@6, method "test_call_contract_with_transactions()void" => block@7, method "test_call_contract_with_reference_types()void" => block@8, * => block@15}
    block@3: // test_compile_contract_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        itxn_begin
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#2: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) tmp%0#2)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAwhncmVldGluZwEgBBUffHUxGEAABCiAAGcxG0EAKoIFBACSJa4EJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAHoAbwBkAEEAAQAxGRREMRhENhoBIyhlRClQSwEjWUsCgQJZSwNPAksCUlcCAE8CTFBLAhVMTgNSVwIAUEkVFlcGAkxQKkxQsCJDMRkURDEYRDYaAVcCACMoZUQpUExQSRUWVwYCTFAqTFCwIkMxGYEEEkQxGEQiQzEZgQUSRDEYRCJDMRkURDEYFEQ2GgFXAgAoTGciQw==)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (gitxn 0 CreatedApplicationID)
        itxn_begin
        let aggregate%length%1#0: uint64 = (len "world")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "world")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#6: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%2#6)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#4: bytes = (itxn LastLog)
        let tmp%3#6: bytes = ((extract 4 0) awst_tmp%0#4)
        let tmp%4#4: bytes = ((extract 0 4) awst_tmp%0#4)
        let tmp%5#3: bool = (== tmp%4#4 0x151f7c75)
        (assert tmp%5#3) // Bytes has valid prefix
        let result#2: string = ((extract 2 0) tmp%3#6)
        let tmp%7#4: bool = (== result#2 "hello world")
        (assert tmp%7#4)
        itxn_begin
        let aggregate%length%2#0: uint64 = (len "abi")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "abi")
        let aggregate%as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%8#2: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%8#2)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#2: bytes = (itxn LastLog)
        let tmp%9#3: bytes = ((extract 4 0) awst_tmp%1#2)
        let tmp%10#4: bytes = ((extract 0 4) awst_tmp%1#2)
        let tmp%11#4: bool = (== tmp%10#4 0x151f7c75)
        (assert tmp%11#4) // Bytes has valid prefix
        let result2#0: string = ((extract 2 0) tmp%9#3)
        let greetItxn.LastLog#0: bytes = (itxn LastLog)
        let tmp%13#2: bool = (== result2#0 "hello abi")
        (assert tmp%13#2)
        let aggregate%length%3#0: uint64 = (len "hello abi")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "hello abi")
        let aggregate%as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let tmp%14#2: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#0
        let tmp%15#1: bytes = (concat 0x151f7c75 tmp%14#2)
        let tmp%16#1: bool = (== greetItxn.LastLog#0 tmp%15#1)
        (assert tmp%16#1)
        itxn_begin
        let aggregate%length%4#0: uint64 = (len "stubbed")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 "stubbed")
        let aggregate%as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let tmp%17#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%17#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#1: bytes = (itxn LastLog)
        let tmp%18#1: bytes = ((extract 4 0) awst_tmp%2#1)
        let tmp%19#1: bytes = ((extract 0 4) awst_tmp%2#1)
        let tmp%20#1: bool = (== tmp%19#1 0x151f7c75)
        (assert tmp%20#1) // Bytes has valid prefix
        let result3#0: string = ((extract 2 0) tmp%18#1)
        let tmp%22#1: bool = (== result3#0 "hello stubbed")
        (assert tmp%22#1)
        itxn_begin
        let aggregate%length%5#0: uint64 = (len "!")
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 "!")
        let aggregate%as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = aggregate%encoded_value%5#0
        let tmp%23#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#0
        let aggregate%length%6#0: uint64 = (len "world")
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 "world")
        let aggregate%as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = aggregate%encoded_value%6#0
        let aggregate%as_bytes%7#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%6#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%23#1)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+utf8[])%6#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%23#1)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#0
        let tmp%24#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0
        ((itxn_field ApplicationArgs) method "sendGreetings((string,string))string")
        ((itxn_field ApplicationArgs) tmp%24#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%25#1: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%26#1: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%27#1: bool = (== tmp%26#1 0x151f7c75)
        (assert tmp%27#1) // Bytes has valid prefix
        let result4#0: string = ((extract 2 0) tmp%25#1)
        let tmp%29#1: bool = (== result4#0 "hello world!")
        (assert tmp%29#1)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@4: // test_compile_contract_with_template_route_L53
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        itxn_begin
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBAhncmVldGluZwEgBBUffHUDaGV5MRhAAAMoK2cxG0EAKoIFBExcYboEJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAHoAbwBkAEEAAQAxGRREMRhENhoBIyhlRClQSwEjWUsCgQJZSwNPAksCUlcCAE8CTFBLAhVMTgNSVwIAUEkVFlcGAkxQKkxQsCJDMRkURDEYRDYaAVcCACMoZUQpUExQSRUWVwYCTFAqTFCwIkMxGYEEEkQxGEQiQzEZgQUSRDEYRCJDMRkURDEYFEQiQw==)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let helloApp#1: uint64 = (gitxn 0 CreatedApplicationID)
        itxn_begin
        let aggregate%length%7#0: uint64 = (len "world")
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 "world")
        let aggregate%as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = aggregate%encoded_value%7#0
        let tmp%1#3: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#3)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) helloApp#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#3: bytes = (itxn LastLog)
        let tmp%2#5: bytes = ((extract 4 0) awst_tmp%0#3)
        let tmp%3#5: bytes = ((extract 0 4) awst_tmp%0#3)
        let tmp%4#3: bool = (== tmp%3#5 0x151f7c75)
        (assert tmp%4#3) // Bytes has valid prefix
        let txn1.returnValue#0: string = ((extract 2 0) tmp%2#5)
        let tmp%6#4: bool = (== txn1.returnValue#0 "hey world")
        (assert tmp%6#4)
        let aggregate%length%8#0: uint64 = (len "!")
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%8#0)
        let aggregate%length_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%8#0: bytes = (concat aggregate%length_uint16%8#0 "!")
        let aggregate%as_Encoded(len+utf8[])%8#0: Encoded(len+utf8[]) = aggregate%encoded_value%8#0
        let tmp%7#3: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%8#0
        let aggregate%length%9#0: uint64 = (len "world")
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%length%9#0)
        let aggregate%length_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%encoded_value%9#0: bytes = (concat aggregate%length_uint16%9#0 "world")
        let aggregate%as_Encoded(len+utf8[])%9#0: Encoded(len+utf8[]) = aggregate%encoded_value%9#0
        let aggregate%as_bytes%12#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%9#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len tmp%7#3)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+utf8[])%9#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%7#3)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%3#0
        let greeting#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0
        itxn_begin
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 greeting#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 greeting#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 greeting#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 greeting#0 2u)
        let aggregate%len%0#0: uint64 = (len greeting#0)
        let aggregate%substring3%1#0: bytes = (substring3 greeting#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let tuple_item%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%length%10#0: uint64 = (len values%0#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%length%10#0)
        let aggregate%length_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%encoded_value%10#0: bytes = (concat aggregate%length_uint16%10#0 values%0#0)
        let aggregate%as_Encoded(len+utf8[])%10#0: Encoded(len+utf8[]) = aggregate%encoded_value%10#0
        let aggregate%as_bytes%15#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%10#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 4u aggregate%data_length%4#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len tuple_item%1#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(len+utf8[])%10#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 tuple_item%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%2#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%5#0
        let tmp%9#2: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%2#0
        ((itxn_field ApplicationArgs) method "sendGreetings((string,string))string")
        ((itxn_field ApplicationArgs) tmp%9#2)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) helloApp#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#1: bytes = (itxn LastLog)
        let tmp%10#3: bytes = ((extract 4 0) awst_tmp%1#1)
        let tmp%11#3: bytes = ((extract 0 4) awst_tmp%1#1)
        let tmp%12#2: bool = (== tmp%11#3 0x151f7c75)
        (assert tmp%12#2) // Bytes has valid prefix
        let txn2.returnValue#0: string = ((extract 2 0) tmp%10#3)
        let tmp%14#1: bool = (== txn2.returnValue#0 "hey world!")
        (assert tmp%14#1)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) helloApp#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@5: // test_compile_contract_with_template_and_custom_prefix_route_L78
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        itxn_begin
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBAhncmVldGluZwEgBBUffHUHYm9uam91cjEYQAADKCtnMRtBACqCBQRMXGG6BCQ3jTwEoOgYcgTQooIABFGAuiA2GgCOBQB6AG8AZABBAAEAMRkURDEYRDYaASMoZUQpUEsBI1lLAoECWUsDTwJLAlJXAgBPAkxQSwIVTE4DUlcCAFBJFRZXBgJMUCpMULAiQzEZFEQxGEQ2GgFXAgAjKGVEKVBMUEkVFlcGAkxQKkxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBREIkM=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let helloApp#0: uint64 = (gitxn 0 CreatedApplicationID)
        itxn_begin
        let aggregate%length%11#0: uint64 = (len "world")
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%length%11#0)
        let aggregate%length_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%encoded_value%11#0: bytes = (concat aggregate%length_uint16%11#0 "world")
        let aggregate%as_Encoded(len+utf8[])%11#0: Encoded(len+utf8[]) = aggregate%encoded_value%11#0
        let tmp%1#2: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%11#0
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#2)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#2: bytes = (itxn LastLog)
        let tmp%2#4: bytes = ((extract 4 0) awst_tmp%0#2)
        let tmp%3#4: bytes = ((extract 0 4) awst_tmp%0#2)
        let tmp%4#2: bool = (== tmp%3#4 0x151f7c75)
        (assert tmp%4#2) // Bytes has valid prefix
        let result#1: string = ((extract 2 0) tmp%2#4)
        let tmp%6#3: bool = (== result#1 "bonjour world")
        (assert tmp%6#3)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@6: // test_compile_contract_large_route_L95
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CjEbQQA7ggIEAr8wzwQkN408NhoAjgIADQABADEZgQUSRDEYRIEBQzEZFEQxGESBgCCvFRaABBUffHVMULCBAUMxGUD/1TEYFESBAUM=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let largeApp#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationArgs) method "getBigBytesLength()uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) largeApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#1: bytes = (itxn LastLog)
        let tmp%1#1: bytes = ((extract 4 0) awst_tmp%0#1)
        let tmp%2#3: bytes = ((extract 0 4) awst_tmp%0#1)
        let tmp%3#3: bool = (== tmp%2#3 0x151f7c75)
        (assert tmp%3#3) // Bytes has valid prefix
        let result#0: uint64 = (btoi tmp%1#1)
        let tmp%5#2: bool = (== result#0 4096u)
        (assert tmp%5#2)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) largeApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@7: // test_call_contract_with_transactions_route_L111
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQOAAEcDMRtBANeCBASPaJLvBJzYfeME02bIaQSBtnNSNhoAjgQAnABGACYAAQAxGRREMRhEMRaBAgk4EEkjEkQxFiIJOBBJIhJETCMSRCISRCJDMRkURDEYRDEWIglJOBAjEkQ4F4AGFR98dQAgTFCwIkMxGRREMRhEMRYiCUlFAjgQSUUFIxJBAB1JODxJRQRBAA5LAhaABBUffHVMULAiQ0k4IUL/7ksDgQYSQQAUSTg9SUUDQQAFSwFC/9hJOBhC/9KBAEL/zTEZFEQxGESADBUffHUAAAAAAAAAAbAiQzEZQP9HMRgURCJD)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#1: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAnyTxn(txn)uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#2: bool = (== tmp%2#2 0x151f7c75)
        (assert tmp%3#2) // Bytes has valid prefix
        itxn_begin
        ((itxn_field ApplicationArgs) method "getOne()uint64")
        ((itxn_field ApplicationID) appId#1)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAnyTxn(txn)uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (gitxn 1 LastLog)
        let tmp%6#2: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#2: bool = (== tmp%6#2 0x151f7c75)
        (assert tmp%7#2) // Bytes has valid prefix
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAssetConfig(acfg)byte[]")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (gitxn 1 LastLog)
        let tmp%10#2: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#2: bool = (== tmp%10#2 0x151f7c75)
        (assert tmp%11#2) // Bytes has valid prefix
        let (value%0#1: account, check%0#1: bool) = ((app_params_get AppAddress) appId#1)
        (assert check%0#1) // application exists
        let tmp%13#1: uint64 = (global CurrentApplicationID)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) tmp%13#1)
        (assert check%1#0) // application exists
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field Sender) value%1#0)
        ((itxn_field Amount) 100000u)
        ((itxn_field Receiver) value%0#1)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAssetConfigAndPay(acfg,pay)void")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@8: // test_call_contract_with_reference_types_route_L154
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CjEbQQAvgARmaY0YNhoAjgEAAQAxGRREMRhENhoBFzYaAjYaAxdPAnIIRLBMsHEERLCBAUMxGUD/2TEYFESBAUM=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        let tmp%2#1: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#1: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%4#1
        let tmp%5#1: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%6#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        ((itxn_field ApplicationArgs) method "receivesReferenceTypes(uint64,address,uint64)void")
        ((itxn_field ApplicationArgs) tmp%3#1)
        ((itxn_field ApplicationArgs) tmp%5#1)
        ((itxn_field ApplicationArgs) tmp%6#1)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%7#1: bytes = (itxna Logs 0)
        let reinterpret_bytes[32]%0#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%8#1: bool = (== tmp%7#1 reinterpret_bytes[32]%0#0)
        (assert tmp%8#1)
        let tmp%9#1: bytes = (itxna Logs 1)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txn Sender)
        let tmp%10#1: bool = (== tmp%9#1 reinterpret_bytes[32]%1#0)
        (assert tmp%10#1)
        let tmp%11#1: bytes = (itxna Logs 2)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%12#1: bool = (== tmp%11#1 value%0#0)
        (assert tmp%12#1)
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#5: bool = 1u
        goto block@16
    block@11: // bare_routing_L13
        let tmp%27#0: uint64 = (txn OnCompletion)
        goto tmp%27#0 ? block@15 : block@12
    block@12: // __algots__.defaultCreate_L13
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // can only call when creating
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#6: bool = 1u
        goto block@16
    block@15: // after_if_else_L13
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#7: bool = 0u
        goto block@16
    block@16: // after_inlined_tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#0 <- block@3, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#1 <- block@4, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#2 <- block@5, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#3 <- block@6, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#4 <- block@7, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#5 <- block@8, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#6 <- block@12, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#7 <- block@15)
        return tmp%0#0