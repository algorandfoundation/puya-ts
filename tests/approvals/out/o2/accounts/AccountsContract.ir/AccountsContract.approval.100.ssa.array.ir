main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L8
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getAccountInfo(address,uint64)(byte[32],uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)" => block@4, method "otherAccount()void" => block@5, * => block@8}
    block@4: // getAccountInfo_route_L9
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let account#0: account = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        goto block@11
    block@11: // while_top_L20
        let tmp%1#3: uint64 = (global OpcodeBudget)
        let tmp%2#3: bool = (> 1410u tmp%1#3)
        goto tmp%2#3 ? block@12 : block@16
    block@12: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@11
    block@16: // after_while_L20
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let (value%1#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) account#0)
        (assert check%1#0) // account funded
        let (value%2#0: account, check%2#0: bool) = ((acct_params_get AcctAuthAddr) account#0)
        (assert check%2#0) // account funded
        let (value%3#0: uint64, check%3#0: bool) = ((acct_params_get AcctTotalNumUint) account#0)
        (assert check%3#0) // account funded
        let (value%4#0: uint64, check%4#0: bool) = ((acct_params_get AcctTotalNumByteSlice) account#0)
        (assert check%4#0) // account funded
        let (value%5#0: uint64, check%5#0: bool) = ((acct_params_get AcctTotalExtraAppPages) account#0)
        (assert check%5#0) // account funded
        let (value%6#0: uint64, check%6#0: bool) = ((acct_params_get AcctTotalAppsCreated) account#0)
        (assert check%6#0) // account funded
        let (value%7#0: uint64, check%7#0: bool) = ((acct_params_get AcctTotalAppsOptedIn) account#0)
        (assert check%7#0) // account funded
        let (value%8#0: uint64, check%8#0: bool) = ((acct_params_get AcctTotalAssetsCreated) account#0)
        (assert check%8#0) // account funded
        let (value%9#0: uint64, check%9#0: bool) = ((acct_params_get AcctTotalAssets) account#0)
        (assert check%9#0) // account funded
        let (value%10#0: uint64, check%10#0: bool) = ((acct_params_get AcctTotalBoxes) account#0)
        (assert check%10#0) // account funded
        let (value%11#0: uint64, check%11#0: bool) = ((acct_params_get AcctTotalBoxBytes) account#0)
        (assert check%11#0) // account funded
        let tmp%0#3: uint64 = (global CurrentApplicationID)
        let tmp%1#2: bool = (app_opted_in account#0 tmp%0#3)
        let (tmp%2#2: uint64, tmp%3#2: bool) = ((asset_holding_get AssetBalance) account#0 asset#0)
        let aggregate%length%0#0: uint64 = (len account#0)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 32u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = account#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob value%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%1#0: uint64 = (len value%2#0)
        let aggregate%lengths_equal%1#0: bool = (== aggregate%length%1#0 32u)
        (assert aggregate%lengths_equal%1#0) // invalid size
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = value%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob value%3#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob value%4#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob value%5#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob value%6#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob value%7#0)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob value%8#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob value%9#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob value%10#0)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob value%11#0)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#2)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%3#2)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%set_bit%0#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1)%0#0: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1) = aggregate%head%13#0
        let tmp%4#1: Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1) = aggregate%as_Encoded(uint8[32],uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool1,bool1)%0#0
        let tmp%3#1: bytes = (concat 0x151f7c75 tmp%4#1)
        (log tmp%3#1)
        exit 1u
    block@5: // otherAccount_route_L30
        exit 1u
    block@8: // after_if_else_L8
        fail
    block@9: // __algots__.defaultCreate_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u