main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L14
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getXY()(uint64,uint64)" => block@4, method "getYX()(uint64,uint64)" => block@5, method "getAnon()(uint64,uint64)" => block@6, method "test((uint64,uint64),(uint64,uint64))void" => block@7, method "testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))" => block@8, * => block@11}
    block@4: // getXY_route_L15
        (log 0x151f7c7500000000000000010000000000000002)
        exit 1u
    block@5: // getYX_route_L22
        (log 0x151f7c75000000000000006f00000000000000de)
        exit 1u
    block@6: // getAnon_route_L29
        (log 0x151f7c7500000000000000030000000000000004)
        exit 1u
    block@7: // test_route_L36
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for tests/approvals/named-types.algo.ts::XY
        let x.x#0: uint64 = (extract_uint64 tmp%0#2 0u)
        let x.y#0: uint64 = (extract_uint64 tmp%0#2 8u)
        let tmp%3#1: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%3#1)
        let eq%1#0: bool = (== len%1#0 16u)
        (assert eq%1#0) // invalid number of bytes for tests/approvals/named-types.algo.ts::YX
        let y.y#0: uint64 = (extract_uint64 tmp%3#1 0u)
        let y.x#0: uint64 = (extract_uint64 tmp%3#1 8u)
        let tmp%0#3: bool = (== x.y#0 y.y#0)
        let tmp%1#2: bool = (== x.x#0 y.x#0)
        let tmp%2#2: bool = (&& tmp%0#3 tmp%1#2)
        (assert tmp%2#2) // assert target is match for conditions
        exit 1u
    block@8: // testing_route_L40
        (log 0x151f7c7500000000000000010000000000000002000000000000006f00000000000000de00000000000000030000000000000004)
        exit 1u
    block@11: // after_if_else_L14
        fail
    block@12: // __algots__.defaultCreate_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u