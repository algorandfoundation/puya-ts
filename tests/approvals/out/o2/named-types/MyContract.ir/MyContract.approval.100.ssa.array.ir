main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L14
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getXY()(uint64,uint64)" => block@4, method "getYX()(uint64,uint64)" => block@5, method "getAnon()(uint64,uint64)" => block@6, method "test((uint64,uint64),(uint64,uint64))void" => block@7, method "testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))" => block@8, * => block@11}
    block@4: // getXY_route_L15
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%2#5: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let tmp%3#3: bytes = (concat 0x151f7c75 tmp%2#5)
        (log tmp%3#3)
        exit 1u
    block@5: // getYX_route_L22
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 111u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 222u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%2#4: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let tmp%3#2: bytes = (concat 0x151f7c75 tmp%2#4)
        (log tmp%3#2)
        exit 1u
    block@6: // getAnon_route_L29
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%5#0
        let tmp%2#3: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#0
        let tmp%3#1: bytes = (concat 0x151f7c75 tmp%2#3)
        (log tmp%3#1)
        exit 1u
    block@7: // test_route_L36
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%1#0)
        let (x.x#0: uint64, x.y#0: uint64) = (aggregate%item0%0#0, aggregate%item1%0#0)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let aggregate%extract%2#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%2#0)
        let aggregate%extract%3#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 8u 8u)
        let aggregate%item1%1#0: uint64 = (btoi aggregate%extract%3#0)
        let (y.y#0: uint64, y.x#0: uint64) = (aggregate%item0%1#0, aggregate%item1%1#0)
        let tmp%0#3: bool = (== x.y#0 y.y#0)
        let tmp%1#2: bool = (== x.x#0 y.x#0)
        let tmp%2#2: bool = (&& tmp%0#3 tmp%1#2)
        (assert tmp%2#2) // assert target is match for conditions
        exit 1u
    block@8: // testing_route_L40
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%as_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = aggregate%head%7#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64,uint64)%3#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob 111u)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%9#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%8#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 222u)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%as_Encoded(uint64,uint64)%4#0: Encoded(uint64,uint64) = aggregate%head%10#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64,uint64)%4#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%10#0)
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%11#0: Encoded(uint64) = aggregate%val_as_bytes%11#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint64)%11#0)
        let aggregate%as_Encoded(uint64,uint64)%5#0: Encoded(uint64,uint64) = aggregate%head%13#0
        let aggregate%head%14#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64,uint64)%5#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%head%14#0
        let tmp%6#1: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64))%0#0
        let tmp%7#1: bytes = (concat 0x151f7c75 tmp%6#1)
        (log tmp%7#1)
        exit 1u
    block@11: // after_if_else_L14
        fail
    block@12: // __algots__.defaultCreate_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u