main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getXY()(uint64,uint64)" => block@3, method "getYX()(uint64,uint64)" => block@4, method "getAnon()(uint64,uint64)" => block@5, method "test((uint64,uint64),(uint64,uint64))void" => block@6, method "testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))" => block@7, * => block@14}
    block@3: // getXY_route_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let array%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 array%as_Encoded(uint64)%1#1)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let tmp%9#0: Encoded(uint64,uint64) = array%encoded%2#1
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // getYX_route_L22
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let array%val_as_bytes%2#1: bytes[8] = (itob 111u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 222u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 array%as_Encoded(uint64)%3#1)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let tmp%17#0: Encoded(uint64,uint64) = array%encoded%5#1
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // getAnon_route_L29
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let array%val_as_bytes%4#1: bytes[8] = (itob 3u)
        let array%as_Encoded(uint64)%4#1: Encoded(uint64) = array%val_as_bytes%4#1
        let array%encoded%6#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%4#1)
        let array%val_as_bytes%5#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%5#1: Encoded(uint64) = array%val_as_bytes%5#1
        let array%encoded%7#1: Encoded(uint64,uint64) = (concat array%encoded%6#1 array%as_Encoded(uint64)%5#1)
        let array%encoded%8#1: Encoded(uint64,uint64) = (concat array%encoded%7#1 0x)
        let tmp%25#0: Encoded(uint64,uint64) = array%encoded%8#1
        let tmp%26#0: bytes = (concat 0x151f7c75 tmp%25#0)
        (log tmp%26#0)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // test_route_L36
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 0u 8u)
        let array%item0%0#1: uint64 = (btoi array%extract%0#1)
        let array%extract%1#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 8u 8u)
        let array%item1%0#1: uint64 = (btoi array%extract%1#1)
        let (x.x#0: uint64, x.y#0: uint64) = (array%item0%0#1, array%item1%0#1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let array%extract%2#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 0u 8u)
        let array%item0%1#1: uint64 = (btoi array%extract%2#1)
        let array%extract%3#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 8u 8u)
        let array%item1%1#1: uint64 = (btoi array%extract%3#1)
        let (y.y#0: uint64, y.x#0: uint64) = (array%item0%1#1, array%item1%1#1)
        let tmp%0#2: bool = (== x.y#0 y.y#0)
        goto tmp%0#2 ? block@21 : block@23
    block@21: // and_contd_L37
        let tmp%1#1: bool = (== x.x#0 y.x#0)
        goto tmp%1#1 ? block@22 : block@23
    block@22: // bool_true_L37
        let and_result%0#0: bool = 1u
        goto block@24
    block@23: // bool_false_L37
        let and_result%0#1: bool = 0u
        goto block@24
    block@24: // bool_merge_L37
        let and_result%0#2: bool = φ(and_result%0#0 <- block@22, and_result%0#1 <- block@23)
        (assert and_result%0#2) // assert target is match for conditions
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // testing_route_L40
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let array%val_as_bytes%6#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%6#1: Encoded(uint64) = array%val_as_bytes%6#1
        let array%encoded%9#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%6#1)
        let array%val_as_bytes%7#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%7#1: Encoded(uint64) = array%val_as_bytes%7#1
        let array%encoded%10#1: Encoded(uint64,uint64) = (concat array%encoded%9#1 array%as_Encoded(uint64)%7#1)
        let array%encoded%11#1: Encoded(uint64,uint64) = (concat array%encoded%10#1 0x)
        let array%encoded%12#1: Encoded((uint64,uint64)) = (concat 0x array%encoded%11#1)
        let array%val_as_bytes%8#1: bytes[8] = (itob 111u)
        let array%as_Encoded(uint64)%8#1: Encoded(uint64) = array%val_as_bytes%8#1
        let array%encoded%13#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%8#1)
        let array%val_as_bytes%9#1: bytes[8] = (itob 222u)
        let array%as_Encoded(uint64)%9#1: Encoded(uint64) = array%val_as_bytes%9#1
        let array%encoded%14#1: Encoded(uint64,uint64) = (concat array%encoded%13#1 array%as_Encoded(uint64)%9#1)
        let array%encoded%15#1: Encoded(uint64,uint64) = (concat array%encoded%14#1 0x)
        let array%encoded%16#1: Encoded((uint64,uint64),(uint64,uint64)) = (concat array%encoded%12#1 array%encoded%15#1)
        let array%val_as_bytes%10#1: bytes[8] = (itob 3u)
        let array%as_Encoded(uint64)%10#1: Encoded(uint64) = array%val_as_bytes%10#1
        let array%encoded%17#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%10#1)
        let array%val_as_bytes%11#1: bytes[8] = (itob 4u)
        let array%as_Encoded(uint64)%11#1: Encoded(uint64) = array%val_as_bytes%11#1
        let array%encoded%18#1: Encoded(uint64,uint64) = (concat array%encoded%17#1 array%as_Encoded(uint64)%11#1)
        let array%encoded%19#1: Encoded(uint64,uint64) = (concat array%encoded%18#1 0x)
        let array%encoded%20#1: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = (concat array%encoded%16#1 array%encoded%19#1)
        let array%encoded%21#1: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = (concat array%encoded%20#1 0x)
        let tmp%45#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = array%encoded%21#1
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // bare_routing_L14
        let tmp%47#0: uint64 = (txn OnCompletion)
        goto tmp%47#0 ? block@14 : block@11
    block@11: // __algots__.defaultCreate_L14
        let tmp%48#0: uint64 = (txn ApplicationID)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // can only call when creating
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@14: // after_if_else_L14
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#2 <- block@5, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#3 <- block@24, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#4 <- block@7, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#5 <- block@11, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0