{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/named-types.algo.ts"
  ],
  "mappings": ";;;;;;;;;AAaA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA0BE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtBF;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBI;AAAA;;;AAAA;AAAA;AAAA;;;;AAAA;AADF;;;;;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8"
    },
    "6": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "x.x#0"
      ]
    },
    "8": {
      "op": "dup",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "9": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#1"
      ]
    },
    "11": {
      "op": "bz main_bare_routing@10",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "14": {
      "op": "pushbytess 0xf02228b0 0xd908575b 0x577b1ffc 0xdc75f81d 0x040e2e4e // method \"getXY()(uint64,uint64)\", method \"getYX()(uint64,uint64)\", method \"getAnon()(uint64,uint64)\", method \"test((uint64,uint64),(uint64,uint64))void\", method \"testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))\""
    },
    "41": {
      "op": "txna ApplicationArgs 0"
    },
    "44": {
      "op": "match main_getXY_route@3 main_getYX_route@4 main_getAnon_route@5 main_test_route@6 main_testing_route@7"
    },
    "56": {
      "block": "main_after_if_else@14",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "57": {
      "op": "return"
    },
    "58": {
      "block": "main_testing_route@7",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%22#0"
      ]
    },
    "60": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%23#0"
      ]
    },
    "61": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%24#0"
      ]
    },
    "64": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "65": {
      "op": "pushbytes 0x151f7c7500000000000000010000000000000002000000000000006f00000000000000de00000000000000030000000000000004",
      "defined_out": [
        "0x151f7c7500000000000000010000000000000002000000000000006f00000000000000de00000000000000030000000000000004"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "0x151f7c7500000000000000010000000000000002000000000000006f00000000000000de00000000000000030000000000000004"
      ]
    },
    "119": {
      "op": "log",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "121": {
      "op": "return"
    },
    "122": {
      "block": "main_test_route@6",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%18#0"
      ]
    },
    "124": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%19#0"
      ]
    },
    "125": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "126": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%20#0"
      ]
    },
    "128": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "129": {
      "op": "txna ApplicationArgs 1"
    },
    "132": {
      "op": "dup"
    },
    "133": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "134": {
      "op": "extract_uint64",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "x.x#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "reinterpret_bytes[16]%0#0",
        "x.x#0"
      ]
    },
    "135": {
      "op": "bury 3",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "x.x#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "137": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "reinterpret_bytes[16]%0#0",
        "x.x#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "138": {
      "op": "extract_uint64",
      "defined_out": [
        "x.x#0",
        "x.y#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0"
      ]
    },
    "139": {
      "op": "txna ApplicationArgs 2"
    },
    "142": {
      "op": "dup"
    },
    "143": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "x.x#0",
        "x.y#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0"
      ]
    },
    "144": {
      "op": "extract_uint64",
      "defined_out": [
        "reinterpret_bytes[16]%1#0",
        "x.x#0",
        "x.y#0",
        "y.y#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0",
        "reinterpret_bytes[16]%1#0",
        "y.y#0"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0",
        "y.y#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "146": {
      "op": "intc_2 // 8",
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0",
        "y.y#0",
        "reinterpret_bytes[16]%1#0",
        "8"
      ]
    },
    "147": {
      "op": "extract_uint64",
      "defined_out": [
        "x.x#0",
        "x.y#0",
        "y.x#0",
        "y.y#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0",
        "y.y#0",
        "y.x#0"
      ]
    },
    "148": {
      "op": "bury 3",
      "defined_out": [
        "x.x#0",
        "x.y#0",
        "y.x#0",
        "y.y#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "x.y#0",
        "y.y#0"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "x.x#0",
        "y.x#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "bz main_bool_false@23",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "154": {
      "op": "dup2"
    },
    "155": {
      "op": "=="
    },
    "156": {
      "op": "bz main_bool_false@23"
    },
    "159": {
      "op": "intc_0 // 1"
    },
    "160": {
      "block": "main_bool_merge@24",
      "stack_in": [
        "x.x#0",
        "y.x#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "161": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "return"
    },
    "163": {
      "block": "main_bool_false@23",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "and_result%0#0"
      ]
    },
    "164": {
      "op": "b main_bool_merge@24"
    },
    "167": {
      "block": "main_getAnon_route@5",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%13#0"
      ]
    },
    "169": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%14#0"
      ]
    },
    "170": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "171": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%15#0"
      ]
    },
    "173": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "174": {
      "op": "pushbytes 0x151f7c7500000000000000030000000000000004",
      "defined_out": [
        "0x151f7c7500000000000000030000000000000004"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "0x151f7c7500000000000000030000000000000004"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return"
    },
    "199": {
      "block": "main_getYX_route@4",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%8#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%9#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%10#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "206": {
      "op": "pushbytes 0x151f7c75000000000000006f00000000000000de",
      "defined_out": [
        "0x151f7c75000000000000006f00000000000000de"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "0x151f7c75000000000000006f00000000000000de"
      ]
    },
    "228": {
      "op": "log",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "229": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "return"
    },
    "231": {
      "block": "main_getXY_route@3",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%3#0"
      ]
    },
    "233": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%4#0"
      ]
    },
    "234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%5#0"
      ]
    },
    "237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "238": {
      "op": "pushbytes 0x151f7c7500000000000000010000000000000002",
      "defined_out": [
        "0x151f7c7500000000000000010000000000000002"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "0x151f7c7500000000000000010000000000000002"
      ]
    },
    "260": {
      "op": "log",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "261": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%0#0"
      ]
    },
    "262": {
      "op": "return"
    },
    "263": {
      "block": "main_bare_routing@10",
      "stack_in": [
        "x.x#0",
        "y.x#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "x.x#0",
        "y.x#0",
        "tmp%27#0"
      ]
    },
    "265": {
      "op": "bnz main_after_if_else@14",
      "stack_out": [
        "x.x#0",
        "y.x#0"
      ]
    },
    "268": {
      "op": "txn ApplicationID"
    },
    "270": {
      "op": "!"
    },
    "271": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "272": {
      "op": "intc_0 // 1"
    },
    "273": {
      "op": "return"
    }
  }
}