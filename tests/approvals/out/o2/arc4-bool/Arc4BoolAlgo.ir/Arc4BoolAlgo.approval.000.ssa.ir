main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((bool,uint64,uint64,uint64,bool,bool))(bool,bool,bool,bool,bool)" => block@2, * => block@3}
    block@2: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.test[routing]()
        goto block@3
    block@3: // switch_case_next_L4
        goto block@5
    block@4: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L4
        exit 0u

subroutine tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.test[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 26u)
        (assert eq%0#0) // invalid number of bytes for ObjectCB267EF3
        let as_Encoded(bool1,uint64,uint64,uint64,bool1,bool1)%0#0: Encoded(bool1,uint64,uint64,uint64,bool1,bool1) = tmp%0#0
        let tmp%1#0: Encoded(bool1,bool1,bool1,bool1,bool1) = tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.test(as_Encoded(bool1,uint64,uint64,uint64,bool1,bool1)%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.test(p: Encoded(bool1,uint64,uint64,uint64,bool1,bool1)) -> Encoded(bool1,bool1,bool1,bool1,bool1):
    block@0: // L5
        let tuple_item%0#0: bool = extract_value(p#0, 0)
        let values%0#0: bool = decode_bytes<bool>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(p#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64) = extract_value(p#0, 2)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tuple_item%3#0: Encoded(uint64) = extract_value(p#0, 3)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tuple_item%4#0: bool = extract_value(p#0, 4)
        let values%4#0: bool = decode_bytes<bool>(tuple_item%4#0)
        let tuple_item%5#0: bool = extract_value(p#0, 5)
        let values%5#0: bool = decode_bytes<bool>(tuple_item%5#0)
        let useRounds#0: bool = values%0#0
        let lastValid#0: uint64 = values%1#0
        let cooldown#0: uint64 = values%2#0
        let lastCalled#0: uint64 = values%3#0
        let exists#0: bool = values%4#0
        let hasMethodRestrictions#0: bool = values%5#0
        goto useRounds#0 ? block@1 : block@2
    block@1: // ternary_true_L20
        let ternary_result%0#0: uint64 = (global Round)
        goto block@3
    block@2: // ternary_false_L20
        let ternary_result%0#1: uint64 = (global LatestTimestamp)
        goto block@3
    block@3: // ternary_merge_L20
        let ternary_result%0#2: uint64 = Ï†(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
        let epochRef#0: uint64 = ternary_result%0#2
        let tmp%0#0: bool = (> epochRef#0 lastValid#0)
        let tmp%1#0: bool = (> cooldown#0 0u)
        let tmp%2#0: uint64 = (- epochRef#0 lastCalled#0)
        let tmp%3#0: bool = (< tmp%2#0 cooldown#0)
        let tmp%4#0: Encoded(bool1,bool1,bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1,bool1,bool1)>(exists#0, tmp%0#0, tmp%1#0, tmp%3#0, hasMethodRestrictions#0)
        return tmp%4#0

subroutine tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 