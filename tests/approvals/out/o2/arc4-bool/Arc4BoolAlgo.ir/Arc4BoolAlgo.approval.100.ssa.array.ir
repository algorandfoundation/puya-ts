main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((bool,uint64,uint64,uint64,bool,bool))(bool,bool,bool,bool,bool)" => block@3, * => block@10}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let p#0: Encoded(bool1,uint64,uint64,uint64,bool1,bool1) = (txna ApplicationArgs 1)
        let aggregate%get_bit%0#0: bool = (getbit p#0 0u)
        let tuple_item%0#0: bool = aggregate%get_bit%0#0
        let useRounds#0: bool = tuple_item%0#0
        let aggregate%extract%0#0: bytes = (extract3 p#0 1u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%0#0
        let lastValid#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%1#0: bytes = (extract3 p#0 9u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%1#0
        let cooldown#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%extract%2#0: bytes = (extract3 p#0 17u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%2#0
        let lastCalled#0: uint64 = (btoi tuple_item%3#0)
        let aggregate%get_bit%1#0: bool = (getbit p#0 200u)
        let tuple_item%4#0: bool = aggregate%get_bit%1#0
        let exists#0: bool = tuple_item%4#0
        let aggregate%get_bit%2#0: bool = (getbit p#0 201u)
        let tuple_item%5#0: bool = aggregate%get_bit%2#0
        let hasMethodRestrictions#0: bool = tuple_item%5#0
        goto useRounds#0 ? block@15 : block@16
    block@15: // ternary_true_L20
        let ternary_result%0#0: uint64 = (global Round)
        goto block@17
    block@16: // ternary_false_L20
        let ternary_result%0#1: uint64 = (global LatestTimestamp)
        goto block@17
    block@17: // ternary_merge_L20
        let epochRef#0: uint64 = φ(ternary_result%0#0 <- block@15, ternary_result%0#1 <- block@16)
        let tmp%0#2: bool = (> epochRef#0 lastValid#0)
        let tmp%1#1: bool = (> cooldown#0 0u)
        let tmp%2#1: uint64 = (- epochRef#0 lastCalled#0)
        let tmp%3#1: bool = (< tmp%2#1 cooldown#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u exists#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%0#2)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u tmp%1#1)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u tmp%3#1)
        let aggregate%set_bit%3#0: bytes[1] = (setbit aggregate%set_bit%2#0 4u hasMethodRestrictions#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%set_bit%3#0)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1,bool1,bool1) = aggregate%head%0#0
        let tmp%4#1: Encoded(bool1,bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1)%0#0
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%4#1)
        (log tmp%8#0)
        let tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto tmp%9#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        let tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__%0#0 <- block@17, tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/arc4-bool.algo.ts::Arc4BoolAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0