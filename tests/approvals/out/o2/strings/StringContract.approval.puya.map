{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/strings.algo.ts"
  ],
  "mappings": ";;;;;;;;AAEA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAKE;;AAAA;AAAA;AAAA;;AAAA;AALF;;;AAAA;;;AAMW;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AADT;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;;;AAAA;;;AAAA;;;AAEW;AADT;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x5049bd1b 0xdc882e2f // method \"join(string,string)string\", method \"interpolate(string)string\""
    },
    "25": {
      "op": "txna ApplicationArgs 0"
    },
    "28": {
      "op": "match main_join_route@3 main_interpolate_route@4"
    },
    "34": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "36": {
      "op": "return"
    },
    "37": {
      "block": "main_interpolate_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "40": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "43": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "47": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "50": {
      "op": "pushbytes \"You interpolated \"",
      "defined_out": [
        "\"You interpolated \"",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"You interpolated \""
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "\"You interpolated \"",
        "a#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "71": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "72": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "length%1#0"
      ]
    },
    "73": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "as_bytes%1#0"
      ]
    },
    "74": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "length_uint16%1#0"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "tmp%0#2"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "79": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "82": {
      "op": "log",
      "stack_out": []
    },
    "83": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "return"
    },
    "86": {
      "block": "main_join_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "88": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "89": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "90": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "92": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "93": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "96": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "99": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%9#0"
      ]
    },
    "102": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "105": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "106": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "107": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "length%0#0"
      ]
    },
    "108": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "as_bytes%0#0"
      ]
    },
    "109": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "length_uint16%0#0"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "tmp%0#2"
      ]
    },
    "113": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "114": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "116": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "117": {
      "op": "log",
      "stack_out": []
    },
    "118": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "return"
    },
    "121": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "123": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "126": {
      "op": "txn ApplicationID"
    },
    "128": {
      "op": "!"
    },
    "129": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "130": {
      "op": "pushint 1 // 1"
    },
    "132": {
      "op": "return"
    }
  }
}