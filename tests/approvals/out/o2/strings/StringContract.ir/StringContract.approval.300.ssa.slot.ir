main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L3
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "join(string,string)string" => block@3, method "interpolate(string)string" => block@4, * => block@11}
    block@3: // join_route_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let a#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let b#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let tmp%0#3: string = (concat a#1 b#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#3)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#3)
        let tmp%11#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%11#0)
        let tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // interpolate_route_L8
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let a#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        let tmp%0#2: bytes = (concat "You interpolated " a#0)
        let aggregate%length%1#0: uint64 = (len tmp%0#2)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%0#2)
        let tmp%19#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%1#0)
        (log tmp%19#0)
        let tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L3
        let tmp%20#0: uint64 = (txn OnCompletion)
        goto tmp%20#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L3
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // can only call when creating
        let tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L3
        let tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#2 <- block@8, tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0