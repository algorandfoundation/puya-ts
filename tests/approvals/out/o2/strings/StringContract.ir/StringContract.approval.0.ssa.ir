main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/strings.algo.ts::StringContract.__puya_arc4_router__() -> bool:
    block@0: // L3
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L3
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "join(string,string)string" => block@2, method "interpolate(string)string" => block@3, * => block@4}
    block@2: // join_route_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
        let tmp%9#0: bytes = (txna ApplicationArgs 2)
        let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
        let to_encode%0#0: bytes = tests/approvals/strings.algo.ts::StringContract.join(tmp%8#0, tmp%10#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%11#0)
        return 1u
    block@3: // interpolate_route_L8
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let tmp%16#0: bytes = (txna ApplicationArgs 1)
        let tmp%17#0: bytes = ((extract 2 0) tmp%16#0)
        let to_encode%1#0: bytes = tests/approvals/strings.algo.ts::StringContract.interpolate(tmp%17#0)
        let length%1#0: uint64 = (len to_encode%1#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%18#0)
        return 1u
    block@4: // switch_case_default_L3
        goto block@5
    block@5: // switch_case_next_L3
        goto block@10
    block@6: // bare_routing_L3
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L3
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        tests/approvals/strings.algo.ts::StringContract.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L3
        goto block@9
    block@9: // switch_case_next_L3
        goto block@10
    block@10: // after_if_else_L3
        return 0u

subroutine tests/approvals/strings.algo.ts::StringContract.join(a: bytes, b: bytes) -> bytes:
    block@0: // L4
        let tmp%0#0: bytes = (concat a#0 b#0)
        return tmp%0#0

subroutine tests/approvals/strings.algo.ts::StringContract.interpolate(a: bytes) -> bytes:
    block@0: // L8
        let tmp%0#0: bytes = (concat "You interpolated " a#0)
        return tmp%0#0

subroutine tests/approvals/strings.algo.ts::StringContract.__algots__.defaultCreate() -> void:
    block@0: // L3
        return 