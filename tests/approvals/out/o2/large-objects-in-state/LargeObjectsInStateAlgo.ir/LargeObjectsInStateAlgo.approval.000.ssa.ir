main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__() -> bool:
    block@0: // L14
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getMbr()uint64" => block@2, method "bootstrap(pay)void" => block@3, method "increaseXCount(uint64,uint64)void" => block@4, method "getCounts(uint64)(uint64,uint8)" => block@5, * => block@6}
    block@2: // getMbr_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr()
        let tmp%8#0: Encoded(uint64) = bytes_encode<uint64>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        return 1u
    block@3: // bootstrap_route_L21
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%14#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap(gtxn_idx%0#0)
        return 1u
    block@4: // increaseXCount_route_L29
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%19#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%20#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount(tmp%19#0, tmp%20#0)
        return 1u
    block@5: // getCounts_route_L33
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%25#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let tmp%26#0: Encoded(uint64,uint8) = tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts(tmp%25#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        return 1u
    block@6: // switch_case_default_L14
        goto block@7
    block@7: // switch_case_next_L14
        goto block@12
    block@8: // bare_routing_L14
        let tmp%28#0: uint64 = (txn OnCompletion)
        switch tmp%28#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L14
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (== tmp%29#0 0u)
        (assert tmp%30#0) // can only call when creating
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L14
        goto block@11
    block@11: // switch_case_next_L14
        goto block@12
    block@12: // after_if_else_L14
        return 0u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr() -> uint64:
    block@0: // L17
        return 2982900u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap(pay: uint64) -> void:
    block@0: // L21
        let tmp%0#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%1#0: bool = (== tmp%0#0 2982900u)
        goto tmp%1#0 ? block@1 : block@3
    block@1: // and_contd_L22
        let tmp%2#0: account = ((gtxns Receiver) pay#0)
        let tmp%3#0: account = (global CurrentApplicationAddress)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // bool_true_L22
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L22
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L22
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        (box_create "x" 7200u)
        return 

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount(index: uint64, xCount: uint64) -> void:
    block@0: // L29
        let storage_value%0#0: bytes = box_read("x")
        let array_item%0#0: Encoded(uint64,uint8) = extract_value(storage_value%0#0, index#0)
        let tuple_item%0#0: Encoded(uint64) = extract_value(array_item%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 xCount#0)
        let storage_value%1#0: bytes = box_read("x")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let updated_array%0#0: Encoded((uint64,uint8)[800]) = replace_value(storage_value%1#0, index#0, 0, encoded_value%0#0)
        box_write("x", updated_array%0#0)
        return 

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts(index: uint64) -> Encoded(uint64,uint8):
    block@0: // L33
        let storage_value%0#0: bytes = box_read("x")
        let array_item%0#0: Encoded(uint64,uint8) = extract_value(storage_value%0#0, index#0)
        return array_item%0#0

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__algots__.defaultCreate() -> void:
    block@0: // L14
        return 