main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getMbr()uint64" => block@3, method "bootstrap(pay)void" => block@4, method "increaseXCount(uint64,uint64)void" => block@5, method "getCounts(uint64)(uint64,uint8)" => block@6, * => block@13}
    block@3: // getMbr_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c750000000000071034)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // bootstrap_route_L29
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%14#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#3: uint64 = ((gtxns Amount) pay#0)
        let tmp%1#1: bool = (== tmp%0#3 462900u)
        goto tmp%1#1 ? block@22 : block@24
    block@22: // and_contd_L30
        let tmp%2#1: account = ((gtxns Receiver) pay#0)
        let tmp%3#1: account = (global CurrentApplicationAddress)
        let tmp%4#1: bool = (== tmp%2#1 tmp%3#1)
        goto tmp%4#1 ? block@23 : block@24
    block@23: // bool_true_L30
        let and_result%0#0: bool = 1u
        goto block@25
    block@24: // bool_false_L30
        let and_result%0#1: bool = 0u
        goto block@25
    block@25: // bool_merge_L30
        let and_result%0#2: bool = φ(and_result%0#0 <- block@23, and_result%0#1 <- block@24)
        (assert and_result%0#2) // assert target is match for conditions
        (box_create "x" 900u)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // increaseXCount_route_L37
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#1: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let xCount#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let (aggregate%box_get%0#1: bytes, aggregate%box_get%1#1: bool) = (box_get "x")
        (assert aggregate%box_get%1#1) // Box must have value
        let aggregate%bytes_offset%0#1: uint64 = (* index#1 9u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%box_get%0#1 aggregate%bytes_offset%0#1 9u) // on error: index access is out of bounds
        let values%0#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 0u)
        let tmp%0#2: uint64 = (+ values%0#0 xCount#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%0#2)
        (box_replace "x" aggregate%bytes_offset%0#1 aggregate%val_as_bytes%1#1)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // getCounts_route_L41
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let (aggregate%box_get%2#1: bytes, aggregate%box_get%3#1: bool) = (box_get "x")
        (assert aggregate%box_get%3#1) // Box must have value
        let aggregate%bytes_offset%1#1: uint64 = (* index#0 9u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%box_get%2#1 aggregate%bytes_offset%1#1 9u) // on error: index access is out of bounds
        let tmp%27#0: bytes = (concat 0x151f7c75 aggregate%encoded_element%1#1)
        (log tmp%27#0)
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L22
        let tmp%28#0: uint64 = (txn OnCompletion)
        goto tmp%28#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L22
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // can only call when creating
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L22
        let tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#1 <- block@25, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0