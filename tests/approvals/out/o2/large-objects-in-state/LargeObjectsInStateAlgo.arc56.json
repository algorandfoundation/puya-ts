{
    "name": "LargeObjectsInStateAlgo",
    "structs": {
        "Counts": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint8"
            }
        ]
    },
    "methods": [
        {
            "name": "getMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increaseXCount",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "xCount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getCounts",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint8)",
                "struct": "Counts"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "storage": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint8)[800]",
                    "key": "eA=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        18
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        182
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        149
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        65,
                        91,
                        100
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        132
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSA5IDgKICAgIGJ5dGVjYmxvY2sgIngiCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbGFyZ2Utb2JqZWN0cy1pbi1zdGF0ZS5hbGdvLnRzOjE0CiAgICAvLyBjbGFzcyBMYXJnZU9iamVjdHNJblN0YXRlQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQKICAgIHB1c2hieXRlc3MgMHg5YmVmZjM2YSAweGE0ZThkMTY0IDB4MTk2MDE3N2MgMHgyNWYzMjNkMCAvLyBtZXRob2QgImdldE1icigpdWludDY0IiwgbWV0aG9kICJib290c3RyYXAocGF5KXZvaWQiLCBtZXRob2QgImluY3JlYXNlWENvdW50KHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAiZ2V0Q291bnRzKHVpbnQ2NCkodWludDY0LHVpbnQ4KSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fZ2V0TWJyX3JvdXRlQDQgbWFpbl9ib290c3RyYXBfcm91dGVANSBtYWluX2luY3JlYXNlWENvdW50X3JvdXRlQDYgbWFpbl9nZXRDb3VudHNfcm91dGVANwogICAgZXJyCgptYWluX2dldENvdW50c19yb3V0ZUA3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czozMwogICAgLy8gZ2V0Q291bnRzKGluZGV4OiB1aW50NjQpIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDY0CiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbGFyZ2Utb2JqZWN0cy1pbi1zdGF0ZS5hbGdvLnRzOjM0CiAgICAvLyByZXR1cm4gdGhpcy5zdG9yYWdlLnZhbHVlW2luZGV4XQogICAgaW50Y18xIC8vIDkKICAgICoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MTUKICAgIC8vIHN0b3JhZ2UgPSBCb3g8Rml4ZWRBcnJheTxDb3VudHMsIHR5cGVvZiBNQVhfSVRFTVM+Pih7IGtleTogJ3gnIH0pCiAgICBieXRlY18wIC8vICJ4IgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czozNAogICAgLy8gcmV0dXJuIHRoaXMuc3RvcmFnZS52YWx1ZVtpbmRleF0KICAgIHN3YXAKICAgIGludGNfMSAvLyA5CiAgICBib3hfZXh0cmFjdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czozMwogICAgLy8gZ2V0Q291bnRzKGluZGV4OiB1aW50NjQpIHsKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9pbmNyZWFzZVhDb3VudF9yb3V0ZUA2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czoyOQogICAgLy8gaW5jcmVhc2VYQ291bnQoaW5kZXg6IHVpbnQ2NCwgeENvdW50OiB1aW50NjQpIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDY0CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIHVpbnQ2NAogICAgYnRvaQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czozMAogICAgLy8gdGhpcy5zdG9yYWdlLnZhbHVlW2luZGV4XS54ICs9IHhDb3VudAogICAgc3dhcAogICAgaW50Y18xIC8vIDkKICAgICoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MTUKICAgIC8vIHN0b3JhZ2UgPSBCb3g8Rml4ZWRBcnJheTxDb3VudHMsIHR5cGVvZiBNQVhfSVRFTVM+Pih7IGtleTogJ3gnIH0pCiAgICBieXRlY18wIC8vICJ4IgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czozMAogICAgLy8gdGhpcy5zdG9yYWdlLnZhbHVlW2luZGV4XS54ICs9IHhDb3VudAogICAgZGlnIDEKICAgIGludGNfMSAvLyA5CiAgICBib3hfZXh0cmFjdAogICAgcHVzaGludCAwIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICB1bmNvdmVyIDIKICAgICsKICAgIGl0b2IKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MTUKICAgIC8vIHN0b3JhZ2UgPSBCb3g8Rml4ZWRBcnJheTxDb3VudHMsIHR5cGVvZiBNQVhfSVRFTVM+Pih7IGtleTogJ3gnIH0pCiAgICBieXRlY18wIC8vICJ4IgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czozMAogICAgLy8gdGhpcy5zdG9yYWdlLnZhbHVlW2luZGV4XS54ICs9IHhDb3VudAogICAgY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MjkKICAgIC8vIGluY3JlYXNlWENvdW50KGluZGV4OiB1aW50NjQsIHhDb3VudDogdWludDY0KSB7CiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Jvb3RzdHJhcF9yb3V0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czoyMQogICAgLy8gYm9vdHN0cmFwKHBheTogZ3R4bi5QYXltZW50VHhuKSB7CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MjItMjUKICAgIC8vIGFzc2VydE1hdGNoKHBheSwgewogICAgLy8gICBhbW91bnQ6IEJPWF9NQlIgKyBBQ0NPVU5UX0JBU0VfTUJSLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyB9KQogICAgZHVwCiAgICBndHhucyBBbW91bnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MjMKICAgIC8vIGFtb3VudDogQk9YX01CUiArIEFDQ09VTlRfQkFTRV9NQlIsCiAgICBwdXNoaW50IDI5ODI5MDAgLy8gMjk4MjkwMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czoyMi0yNQogICAgLy8gYXNzZXJ0TWF0Y2gocGF5LCB7CiAgICAvLyAgIGFtb3VudDogQk9YX01CUiArIEFDQ09VTlRfQkFTRV9NQlIsCiAgICAvLyAgIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vIH0pCiAgICA9PQogICAgc3dhcAogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MjQKICAgIC8vIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbGFyZ2Utb2JqZWN0cy1pbi1zdGF0ZS5hbGdvLnRzOjIyLTI1CiAgICAvLyBhc3NlcnRNYXRjaChwYXksIHsKICAgIC8vICAgYW1vdW50OiBCT1hfTUJSICsgQUNDT1VOVF9CQVNFX01CUiwKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gfSkKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MTUKICAgIC8vIHN0b3JhZ2UgPSBCb3g8Rml4ZWRBcnJheTxDb3VudHMsIHR5cGVvZiBNQVhfSVRFTVM+Pih7IGtleTogJ3gnIH0pCiAgICBieXRlY18wIC8vICJ4IgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2xhcmdlLW9iamVjdHMtaW4tc3RhdGUuYWxnby50czoyNgogICAgLy8gdGhpcy5zdG9yYWdlLmNyZWF0ZSgpCiAgICBwdXNoaW50IDcyMDAgLy8gNzIwMAogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbGFyZ2Utb2JqZWN0cy1pbi1zdGF0ZS5hbGdvLnRzOjIxCiAgICAvLyBib290c3RyYXAocGF5OiBndHhuLlBheW1lbnRUeG4pIHsKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0TWJyX3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbGFyZ2Utb2JqZWN0cy1pbi1zdGF0ZS5hbGdvLnRzOjE3CiAgICAvLyBnZXRNYnIoKTogdWludDY0IHsKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAwMDAwMDAwMDJkODNmNAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9sYXJnZS1vYmplY3RzLWluLXN0YXRlLmFsZ28udHM6MTQKICAgIC8vIGNsYXNzIExhcmdlT2JqZWN0c0luU3RhdGVBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgICYmCiAgICByZXR1cm4gLy8gb24gZXJyb3I6IE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyADAQkIJgEBeDEbQQCgMRkURDEYRIIEBJvv82oEpOjRZAQZYBd8BCXzI9A2GgCOBABlAEIAGwABADYaAUkVJBJEFyMLKEwjuoAEFR98dUxQsCJDNhoBSRUkEkQXNhoCSRUkEkQXTCMLKEsBI7qBAFtPAggWKE4CuyJDMRYiCUk4ECISREk4CIH0h7YBEkw4BzIKEhBEKIGgOLlIIkOADBUffHUAAAAAAC2D9LAiQzEZFDEYFBBD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}