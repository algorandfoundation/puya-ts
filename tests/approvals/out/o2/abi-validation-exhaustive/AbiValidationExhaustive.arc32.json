{
    "hints": {
        "validate_uint64(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_uint8(uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_uint512(uint512)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_ufixed64(ufixed64x2)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_uint8_arr(uint8[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_uint8_arr3(uint8[3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_bool(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_byte(byte)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_string(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_bytes(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_address(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_account(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_bool_arr(bool[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_bool_arr3(bool[3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_static_tuple((uint64,uint8))void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_dynamic_tuple((uint64,uint8,string))void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_static_struct((uint64,uint8))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "value": {
                    "name": "ARC4StaticStruct",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "bar",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "validate_dynamic_struct((uint64,uint8,string))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "value": {
                    "name": "ARC4DynamicStruct",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "bar",
                            "uint8"
                        ],
                        [
                            "baz",
                            "string"
                        ]
                    ]
                }
            }
        },
        "validate_static_struct_arr((uint64,uint8)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_static_struct_arr3((uint64,uint8)[3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_dynamic_struct_arr((uint64,uint8,string)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_dynamic_struct_arr3((uint64,uint8,string)[3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_dynamic_struct_with_a_bool((uint8,byte[],bool))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "value": {
                    "name": "WithABool",
                    "elements": [
                        [
                            "foo",
                            "uint8"
                        ],
                        [
                            "bar",
                            "byte[]"
                        ],
                        [
                            "baz",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "validate_c2c()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AbiValidationExhaustive",
        "methods": [
            {
                "name": "validate_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_uint8",
                "args": [
                    {
                        "type": "uint8",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_uint512",
                "args": [
                    {
                        "type": "uint512",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_ufixed64",
                "args": [
                    {
                        "type": "ufixed64x2",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_uint8_arr",
                "args": [
                    {
                        "type": "uint8[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_uint8_arr3",
                "args": [
                    {
                        "type": "uint8[3]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_bool",
                "args": [
                    {
                        "type": "bool",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_byte",
                "args": [
                    {
                        "type": "byte",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_string",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_bytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_address",
                "args": [
                    {
                        "type": "address",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_account",
                "args": [
                    {
                        "type": "address",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_bool_arr",
                "args": [
                    {
                        "type": "bool[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_bool_arr3",
                "args": [
                    {
                        "type": "bool[3]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_static_tuple",
                "args": [
                    {
                        "type": "(uint64,uint8)",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_dynamic_tuple",
                "args": [
                    {
                        "type": "(uint64,uint8,string)",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_static_struct",
                "args": [
                    {
                        "type": "(uint64,uint8)",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_dynamic_struct",
                "args": [
                    {
                        "type": "(uint64,uint8,string)",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_static_struct_arr",
                "args": [
                    {
                        "type": "(uint64,uint8)[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_static_struct_arr3",
                "args": [
                    {
                        "type": "(uint64,uint8)[3]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_dynamic_struct_arr",
                "args": [
                    {
                        "type": "(uint64,uint8,string)[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_dynamic_struct_arr3",
                "args": [
                    {
                        "type": "(uint64,uint8,string)[3]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_dynamic_struct_with_a_bool",
                "args": [
                    {
                        "type": "(uint8,byte[],bool)",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "validate_c2c",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}