main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@36
    block@2: // abi_routing_L17
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "validate_uint64(uint64)void" => block@4, method "validate_uint8(uint8)void" => block@5, method "validate_uint512(uint512)void" => block@6, method "validate_ufixed64(ufixed64x2)void" => block@7, method "validate_uint8_arr(uint8[])void" => block@8, method "validate_uint8_arr3(uint8[3])void" => block@9, method "validate_bool(bool)void" => block@10, method "validate_byte(byte)void" => block@11, method "validate_string(string)void" => block@12, method "validate_bytes(byte[])void" => block@13, method "validate_address(address)void" => block@14, method "validate_account(address)void" => block@15, method "validate_bool_arr(bool[])void" => block@16, method "validate_bool_arr3(bool[3])void" => block@17, method "validate_static_tuple((uint64,uint8))void" => block@18, method "validate_dynamic_tuple((uint64,uint8,string))void" => block@19, method "validate_static_struct((uint64,uint8))void" => block@20, method "validate_dynamic_struct((uint64,uint8,string))void" => block@21, method "validate_static_struct_arr((uint64,uint8)[])void" => block@22, method "validate_static_struct_arr3((uint64,uint8)[3])void" => block@23, method "validate_dynamic_struct_arr((uint64,uint8,string)[])void" => block@24, method "validate_dynamic_struct_arr3((uint64,uint8,string)[3])void" => block@25, method "validate_dynamic_struct_with_a_bool((uint8,byte[],bool))void" => block@26, method "validate_native_static_struct((uint64,uint8))void" => block@27, method "validate_native_dynamic_struct((uint64,uint8,string))void" => block@28, method "validate_native_static_struct_arr((uint64,uint8)[])void" => block@29, method "validate_native_static_struct_arr3((uint64,uint8)[3])void" => block@30, method "validate_native_dynamic_struct_arr((uint64,uint8,string)[])void" => block@31, method "validate_native_dynamic_struct_arr3((uint64,uint8,string)[3])void" => block@32, * => block@35}
    block@4: // validate_uint64_route_L18
        let value#28: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#22: uint64 = (len value#28)
        let eq%0#28: bool = (== len%0#22 8u)
        (assert eq%0#28) // invalid number of bytes for arc4.uint64
        exit 1u
    block@5: // validate_uint8_route_L22
        let value#27: Encoded(uint8) = (txna ApplicationArgs 1)
        let len%0#21: uint64 = (len value#27)
        let eq%0#27: bool = (== len%0#21 1u)
        (assert eq%0#27) // invalid number of bytes for arc4.uint8
        exit 1u
    block@6: // validate_uint512_route_L26
        let value#26: Encoded(uint512) = (txna ApplicationArgs 1)
        let len%0#20: uint64 = (len value#26)
        let eq%0#26: bool = (== len%0#20 64u)
        (assert eq%0#26) // invalid number of bytes for arc4.uint512
        exit 1u
    block@7: // validate_ufixed64_route_L30
        let value#25: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#19: uint64 = (len value#25)
        let eq%0#25: bool = (== len%0#19 8u)
        (assert eq%0#25) // invalid number of bytes for arc4.ufixed64x2
        exit 1u
    block@8: // validate_uint8_arr_route_L34
        let value#24: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 value#24 0u) // on error: invalid array length header
        let length%0#13: uint64 = aggregate%array_length%0#0
        let add%0#13: uint64 = (+ length%0#13 2u)
        let len%0#18: uint64 = (len value#24)
        let eq%0#24: bool = (== len%0#18 add%0#13)
        (assert eq%0#24) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        exit 1u
    block@9: // validate_uint8_arr3_route_L38
        let value#23: Encoded(uint8[3]) = (txna ApplicationArgs 1)
        let len%0#17: uint64 = (len value#23)
        let eq%0#23: bool = (== len%0#17 3u)
        (assert eq%0#23) // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
        exit 1u
    block@10: // validate_bool_route_L42
        let value#22: Encoded(bool8) = (txna ApplicationArgs 1)
        let len%0#16: uint64 = (len value#22)
        let eq%0#22: bool = (== len%0#16 1u)
        (assert eq%0#22) // invalid number of bytes for arc4.bool
        exit 1u
    block@11: // validate_byte_route_L46
        let value#21: Encoded(uint8) = (txna ApplicationArgs 1)
        let len%0#15: uint64 = (len value#21)
        let eq%0#21: bool = (== len%0#15 1u)
        (assert eq%0#21) // invalid number of bytes for arc4.uint8
        exit 1u
    block@12: // validate_string_route_L50
        let value#20: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 value#20 0u) // on error: invalid array length header
        let length%0#12: uint64 = aggregate%array_length%1#0
        let add%0#12: uint64 = (+ length%0#12 2u)
        let len%0#14: uint64 = (len value#20)
        let eq%0#20: bool = (== len%0#14 add%0#12)
        (assert eq%0#20) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        exit 1u
    block@13: // validate_bytes_route_L54
        let value#19: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 value#19 0u) // on error: invalid array length header
        let length%0#11: uint64 = aggregate%array_length%2#0
        let add%0#11: uint64 = (+ length%0#11 2u)
        let len%0#13: uint64 = (len value#19)
        let eq%0#19: bool = (== len%0#13 add%0#11)
        (assert eq%0#19) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        exit 1u
    block@14: // validate_address_route_L58
        let value#18: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let len%0#12: uint64 = (len value#18)
        let eq%0#18: bool = (== len%0#12 32u)
        (assert eq%0#18) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        exit 1u
    block@15: // validate_account_route_L62
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let value#17: account = tmp%0#2
        let len%0#11: uint64 = (len value#17)
        let eq%0#17: bool = (== len%0#11 32u)
        (assert eq%0#17) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        exit 1u
    block@16: // validate_bool_arr_route_L66
        let value#16: Encoded(len+bool1[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 value#16 0u) // on error: invalid array length header
        let length%0#10: uint64 = aggregate%array_length%3#0
        let add%0#10: uint64 = (+ length%0#10 7u)
        let div_floor%0#0: uint64 = (/ add%0#10 8u)
        let add%1#8: uint64 = (+ div_floor%0#0 2u)
        let len%0#10: uint64 = (len value#16)
        let eq%0#16: bool = (== len%0#10 add%1#8)
        (assert eq%0#16) // invalid number of bytes for arc4.dynamic_array<arc4.bool>
        exit 1u
    block@17: // validate_bool_arr3_route_L70
        let value#15: Encoded(bool1[3]) = (txna ApplicationArgs 1)
        let len%0#9: uint64 = (len value#15)
        let eq%0#15: bool = (== len%0#9 1u)
        (assert eq%0#15) // invalid number of bytes for arc4.static_array<arc4.bool, 3>
        exit 1u
    block@18: // validate_static_tuple_route_L74
        let value#14: Encoded(uint64,uint8) = (txna ApplicationArgs 1)
        let len%0#8: uint64 = (len value#14)
        let eq%0#14: bool = (== len%0#8 9u)
        (assert eq%0#14) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
        exit 1u
    block@19: // validate_dynamic_tuple_route_L78
        let value#13: Encoded(uint64,uint8,(len+utf8[])) = (txna ApplicationArgs 1)
        let tuple_len%0#7: uint64 = (len value#13)
        let extract_uint16%0#7: uint64 = (extract_uint16 value#13 9u) // on error: invalid tuple encoding
        let eq%0#13: bool = (== extract_uint16%0#7 11u)
        (assert eq%0#13) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#7: bytes = (substring3 value#13 extract_uint16%0#7 tuple_len%0#7)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 substring3%0#7 0u) // on error: invalid array length header
        let length%0#9: uint64 = aggregate%array_length%4#0
        let add%1#7: uint64 = (+ length%0#9 13u)
        let eq%1#7: bool = (== tuple_len%0#7 add%1#7)
        (assert eq%1#7) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
        exit 1u
    block@20: // validate_static_struct_route_L82
        let value#12: Encoded(uint64,uint8) = (txna ApplicationArgs 1)
        let len%0#7: uint64 = (len value#12)
        let eq%0#12: bool = (== len%0#7 9u)
        (assert eq%0#12) // invalid number of bytes for ARC4StaticStruct
        exit 1u
    block@21: // validate_dynamic_struct_route_L86
        let value#11: Encoded(uint64,uint8,(len+utf8[])) = (txna ApplicationArgs 1)
        let tuple_len%0#6: uint64 = (len value#11)
        let extract_uint16%0#6: uint64 = (extract_uint16 value#11 9u) // on error: invalid tuple encoding
        let eq%0#11: bool = (== extract_uint16%0#6 11u)
        (assert eq%0#11) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#6: bytes = (substring3 value#11 extract_uint16%0#6 tuple_len%0#6)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 substring3%0#6 0u) // on error: invalid array length header
        let length%0#8: uint64 = aggregate%array_length%5#0
        let add%1#6: uint64 = (+ length%0#8 13u)
        let eq%1#6: bool = (== tuple_len%0#6 add%1#6)
        (assert eq%1#6) // invalid number of bytes for ARC4DynamicStruct
        exit 1u
    block@22: // validate_static_struct_arr_route_L90
        let value#10: Encoded(len+(uint64,uint8)[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 value#10 0u) // on error: invalid array length header
        let length%0#7: uint64 = aggregate%array_length%6#0
        let mul%0#3: uint64 = (* length%0#7 9u)
        let add%0#7: uint64 = (+ mul%0#3 2u)
        let len%0#6: uint64 = (len value#10)
        let eq%0#10: bool = (== len%0#6 add%0#7)
        (assert eq%0#10) // invalid number of bytes for arc4.dynamic_array<ARC4StaticStruct>
        exit 1u
    block@23: // validate_static_struct_arr3_route_L94
        let value#9: Encoded((uint64,uint8)[3]) = (txna ApplicationArgs 1)
        let len%0#5: uint64 = (len value#9)
        let eq%0#9: bool = (== len%0#5 27u)
        (assert eq%0#9) // invalid number of bytes for arc4.static_array<ARC4StaticStruct, 3>
        exit 1u
    block@24: // validate_dynamic_struct_arr_route_L98
        let value#8: Encoded(len+(uint64,uint8,(len+utf8[]))[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 value#8 0u) // on error: invalid array length header
        let length%0#6: uint64 = aggregate%array_length%7#0
        let num_bytes%0#9: uint64 = (* length%0#6 2u)
        let total_length%0#3: uint64 = (len value#8)
        let array_data%0#1: bytes = ((extract 2 0) value#8)
        let index%0#9: uint64 = 0u
        goto block@65
    block@65: // for_header_L100
        let index%0#10: uint64 = φ(index%0#9 <- block@24, index%0#11 <- block@66)
        let num_bytes%0#10: uint64 = φ(num_bytes%0#9 <- block@24, num_bytes%0#11 <- block@66)
        let continue_looping%0#3: bool = (< index%0#10 length%0#6)
        goto continue_looping%0#3 ? block@66 : block@67
    block@66: // for_body_L100
        let head_offset_bytes%0#3: uint64 = (* index%0#10 2u)
        let item_offset%0#3: uint64 = (extract_uint16 array_data%0#1 head_offset_bytes%0#3) // on error: invalid array encoding
        let offset_is_correct%0#3: bool = (== item_offset%0#3 num_bytes%0#10)
        (assert offset_is_correct%0#3) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let total_length%1#1: uint64 = (len array_data%0#1)
        let extract_to_end%0#3: bytes = (substring3 array_data%0#1 item_offset%0#3 total_length%1#1)
        let tuple_len%0#5: uint64 = (len extract_to_end%0#3)
        let extract_uint16%0#5: uint64 = (extract_uint16 extract_to_end%0#3 9u) // on error: invalid tuple encoding
        let eq%0#8: bool = (== extract_uint16%0#5 11u)
        (assert eq%0#8) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#5: bytes = (substring3 extract_to_end%0#3 extract_uint16%0#5 tuple_len%0#5)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 substring3%0#5 0u) // on error: invalid array length header
        let length%1#3: uint64 = aggregate%array_length%8#0
        let add%1#5: uint64 = (+ length%1#3 13u)
        let num_bytes%0#11: uint64 = (+ num_bytes%0#10 add%1#5)
        let index%0#11: uint64 = (+ index%0#10 1u)
        goto block@65
    block@67: // after_for_L100
        let num_bytes%1#1: uint64 = (+ num_bytes%0#10 2u)
        let eq%1#5: bool = (== total_length%0#3 num_bytes%1#1)
        (assert eq%1#5) // invalid number of bytes for arc4.dynamic_array<ARC4DynamicStruct>
        exit 1u
    block@25: // validate_dynamic_struct_arr3_route_L102
        let value#7: Encoded((uint64,uint8,(len+utf8[]))[3]) = (txna ApplicationArgs 1)
        let length%0#5: uint64 = 3u
        let num_bytes%0#6: uint64 = (* length%0#5 2u)
        let index%0#6: uint64 = 0u
        goto block@60
    block@60: // for_header_L104
        let index%0#7: uint64 = φ(index%0#6 <- block@25, index%0#8 <- block@61)
        let num_bytes%0#7: uint64 = φ(num_bytes%0#6 <- block@25, num_bytes%0#8 <- block@61)
        let continue_looping%0#2: bool = (< index%0#7 length%0#5)
        goto continue_looping%0#2 ? block@61 : block@62
    block@61: // for_body_L104
        let head_offset_bytes%0#2: uint64 = (* index%0#7 2u)
        let item_offset%0#2: uint64 = (extract_uint16 value#7 head_offset_bytes%0#2) // on error: invalid array encoding
        let offset_is_correct%0#2: bool = (== item_offset%0#2 num_bytes%0#7)
        (assert offset_is_correct%0#2) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let total_length%0#2: uint64 = (len value#7)
        let extract_to_end%0#2: bytes = (substring3 value#7 item_offset%0#2 total_length%0#2)
        let tuple_len%0#4: uint64 = (len extract_to_end%0#2)
        let extract_uint16%0#4: uint64 = (extract_uint16 extract_to_end%0#2 9u) // on error: invalid tuple encoding
        let eq%0#7: bool = (== extract_uint16%0#4 11u)
        (assert eq%0#7) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#4: bytes = (substring3 extract_to_end%0#2 extract_uint16%0#4 tuple_len%0#4)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 substring3%0#4 0u) // on error: invalid array length header
        let length%1#2: uint64 = aggregate%array_length%9#0
        let add%1#4: uint64 = (+ length%1#2 13u)
        let num_bytes%0#8: uint64 = (+ num_bytes%0#7 add%1#4)
        let index%0#8: uint64 = (+ index%0#7 1u)
        goto block@60
    block@62: // after_for_L104
        let len%0#4: uint64 = (len value#7)
        let eq%1#4: bool = (== len%0#4 num_bytes%0#7)
        (assert eq%1#4) // invalid number of bytes for arc4.static_array<ARC4DynamicStruct, 3>
        exit 1u
    block@26: // validate_dynamic_struct_with_a_bool_route_L106
        let value#6: Encoded(uint8,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let tuple_len%0#3: uint64 = (len value#6)
        let extract_uint16%0#3: uint64 = (extract_uint16 value#6 1u) // on error: invalid tuple encoding
        let eq%0#6: bool = (== extract_uint16%0#3 4u)
        (assert eq%0#6) // invalid tail pointer at index 1 of (uint8,(len+uint8[]),bool1)
        let substring3%0#3: bytes = (substring3 value#6 extract_uint16%0#3 tuple_len%0#3)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 substring3%0#3 0u) // on error: invalid array length header
        let length%0#4: uint64 = aggregate%array_length%10#0
        let add%1#3: uint64 = (+ length%0#4 6u)
        let eq%1#3: bool = (== tuple_len%0#3 add%1#3)
        (assert eq%1#3) // invalid number of bytes for WithABool
        exit 1u
    block@27: // validate_native_static_struct_route_L110
        let value#5: Encoded(uint64,uint8) = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len value#5)
        let eq%0#5: bool = (== len%0#3 9u)
        (assert eq%0#5) // invalid number of bytes for tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct
        exit 1u
    block@28: // validate_native_dynamic_struct_route_L114
        let value#4: Encoded(uint64,uint8,(len+utf8[])) = (txna ApplicationArgs 1)
        let tuple_len%0#2: uint64 = (len value#4)
        let extract_uint16%0#2: uint64 = (extract_uint16 value#4 9u) // on error: invalid tuple encoding
        let eq%0#4: bool = (== extract_uint16%0#2 11u)
        (assert eq%0#4) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#2: bytes = (substring3 value#4 extract_uint16%0#2 tuple_len%0#2)
        let aggregate%array_length%11#0: uint64 = (extract_uint16 substring3%0#2 0u) // on error: invalid array length header
        let length%0#3: uint64 = aggregate%array_length%11#0
        let add%1#2: uint64 = (+ length%0#3 13u)
        let eq%1#2: bool = (== tuple_len%0#2 add%1#2)
        (assert eq%1#2) // invalid number of bytes for tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct
        exit 1u
    block@29: // validate_native_static_struct_arr_route_L118
        let value#3: Encoded(len+(uint64,uint8)[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 value#3 0u) // on error: invalid array length header
        let length%0#2: uint64 = aggregate%array_length%12#0
        let mul%0#1: uint64 = (* length%0#2 9u)
        let add%0#2: uint64 = (+ mul%0#1 2u)
        let len%0#2: uint64 = (len value#3)
        let eq%0#3: bool = (== len%0#2 add%0#2)
        (assert eq%0#3) // invalid number of bytes for arc4.dynamic_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct>
        exit 1u
    block@30: // validate_native_static_struct_arr3_route_L122
        let value#2: Encoded((uint64,uint8)[3]) = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len value#2)
        let eq%0#2: bool = (== len%0#1 27u)
        (assert eq%0#2) // invalid number of bytes for arc4.static_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeStaticStruct, 3>
        exit 1u
    block@31: // validate_native_dynamic_struct_arr_route_L126
        let value#1: Encoded(len+(uint64,uint8,(len+utf8[]))[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%13#0: uint64 = (extract_uint16 value#1 0u) // on error: invalid array length header
        let length%0#1: uint64 = aggregate%array_length%13#0
        let num_bytes%0#3: uint64 = (* length%0#1 2u)
        let total_length%0#1: uint64 = (len value#1)
        let array_data%0#0: bytes = ((extract 2 0) value#1)
        let index%0#3: uint64 = 0u
        goto block@45
    block@45: // for_header_L128
        let index%0#4: uint64 = φ(index%0#3 <- block@31, index%0#5 <- block@46)
        let num_bytes%0#4: uint64 = φ(num_bytes%0#3 <- block@31, num_bytes%0#5 <- block@46)
        let continue_looping%0#1: bool = (< index%0#4 length%0#1)
        goto continue_looping%0#1 ? block@46 : block@47
    block@46: // for_body_L128
        let head_offset_bytes%0#1: uint64 = (* index%0#4 2u)
        let item_offset%0#1: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#1) // on error: invalid array encoding
        let offset_is_correct%0#1: bool = (== item_offset%0#1 num_bytes%0#4)
        (assert offset_is_correct%0#1) // invalid tail pointer for (len+(uint64,uint8,(len+utf8[]))[])
        let total_length%1#0: uint64 = (len array_data%0#0)
        let extract_to_end%0#1: bytes = (substring3 array_data%0#0 item_offset%0#1 total_length%1#0)
        let tuple_len%0#1: uint64 = (len extract_to_end%0#1)
        let extract_uint16%0#1: uint64 = (extract_uint16 extract_to_end%0#1 9u) // on error: invalid tuple encoding
        let eq%0#1: bool = (== extract_uint16%0#1 11u)
        (assert eq%0#1) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#1: bytes = (substring3 extract_to_end%0#1 extract_uint16%0#1 tuple_len%0#1)
        let aggregate%array_length%14#0: uint64 = (extract_uint16 substring3%0#1 0u) // on error: invalid array length header
        let length%1#1: uint64 = aggregate%array_length%14#0
        let add%1#1: uint64 = (+ length%1#1 13u)
        let num_bytes%0#5: uint64 = (+ num_bytes%0#4 add%1#1)
        let index%0#5: uint64 = (+ index%0#4 1u)
        goto block@45
    block@47: // after_for_L128
        let num_bytes%1#0: uint64 = (+ num_bytes%0#4 2u)
        let eq%1#1: bool = (== total_length%0#1 num_bytes%1#0)
        (assert eq%1#1) // invalid number of bytes for arc4.dynamic_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct>
        exit 1u
    block@32: // validate_native_dynamic_struct_arr3_route_L130
        let value#0: Encoded((uint64,uint8,(len+utf8[]))[3]) = (txna ApplicationArgs 1)
        let length%0#0: uint64 = 3u
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let index%0#0: uint64 = 0u
        goto block@40
    block@40: // for_header_L132
        let index%0#1: uint64 = φ(index%0#0 <- block@32, index%0#2 <- block@41)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@32, num_bytes%0#2 <- block@41)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@41 : block@42
    block@41: // for_body_L132
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 value#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (uint64,uint8,(len+utf8[]))[3]
        let total_length%0#0: uint64 = (len value#0)
        let extract_to_end%0#0: bytes = (substring3 value#0 item_offset%0#0 total_length%0#0)
        let tuple_len%0#0: uint64 = (len extract_to_end%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 extract_to_end%0#0 9u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 11u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint8,(len+utf8[]))
        let substring3%0#0: bytes = (substring3 extract_to_end%0#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%15#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%15#0
        let add%1#0: uint64 = (+ length%1#0 13u)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%1#0)
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@40
    block@42: // after_for_L132
        let len%0#0: uint64 = (len value#0)
        let eq%1#0: bool = (== len%0#0 num_bytes%0#1)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<tests/approvals/abi-validation-exhaustive.algo.ts::NativeDynamicStruct, 3>
        exit 1u
    block@35: // after_if_else_L17
        fail
    block@36: // __algots__.defaultCreate_L17
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u