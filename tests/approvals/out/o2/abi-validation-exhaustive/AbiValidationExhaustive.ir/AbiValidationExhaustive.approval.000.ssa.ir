main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__puya_arc4_router__() -> bool:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@27
    block@1: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "validate_uint64(uint64)void" => block@2, method "validate_uint8(uint8)void" => block@3, method "validate_uint512(uint512)void" => block@4, method "validate_ufixed64(ufixed64x2)void" => block@5, method "validate_uint8_arr(uint8[])void" => block@6, method "validate_uint8_arr3(uint8[3])void" => block@7, method "validate_bool(bool)void" => block@8, method "validate_byte(byte)void" => block@9, method "validate_string(string)void" => block@10, method "validate_bytes(byte[])void" => block@11, method "validate_address(address)void" => block@12, method "validate_account(address)void" => block@13, method "validate_bool_arr(bool[])void" => block@14, method "validate_bool_arr3(bool[3])void" => block@15, method "validate_static_tuple((uint64,uint8))void" => block@16, method "validate_dynamic_tuple((uint64,uint8,string))void" => block@17, method "validate_static_struct((uint64,uint8))void" => block@18, method "validate_dynamic_struct((uint64,uint8,string))void" => block@19, method "validate_static_struct_arr((uint64,uint8)[])void" => block@20, method "validate_static_struct_arr3((uint64,uint8)[3])void" => block@21, method "validate_dynamic_struct_arr((uint64,uint8,string)[])void" => block@22, method "validate_dynamic_struct_arr3((uint64,uint8,string)[3])void" => block@23, method "validate_dynamic_struct_with_a_bool((uint8,byte[],bool))void" => block@24, * => block@25}
    block@2: // validate_uint64_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%0#0: bytes[8] = tmp%7#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint64(reinterpret_bytes[8]%0#0)
        return 1u
    block@3: // validate_uint8_route_L15
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let tmp%12#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%0#0: bytes[1] = tmp%12#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8(reinterpret_bytes[1]%0#0)
        return 1u
    block@4: // validate_uint512_route_L19
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let tmp%17#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[64]%0#0: bytes[64] = tmp%17#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint512(reinterpret_bytes[64]%0#0)
        return 1u
    block@5: // validate_ufixed64_route_L23
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let tmp%22#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%1#0: bytes[8] = tmp%22#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_ufixed64(reinterpret_bytes[8]%1#0)
        return 1u
    block@6: // validate_uint8_arr_route_L27
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let tmp%27#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%0#0: bytes = tmp%27#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr(reinterpret_bytes%0#0)
        return 1u
    block@7: // validate_uint8_arr3_route_L31
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let tmp%32#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[3]%0#0: bytes[3] = tmp%32#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr3(reinterpret_bytes[3]%0#0)
        return 1u
    block@8: // validate_bool_route_L35
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let tmp%37#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%1#0: bytes[1] = tmp%37#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool(reinterpret_bytes[1]%1#0)
        return 1u
    block@9: // validate_byte_route_L39
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let tmp%42#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%2#0: bytes[1] = tmp%42#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_byte(reinterpret_bytes[1]%2#0)
        return 1u
    block@10: // validate_string_route_L43
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (== tmp%43#0 NoOp)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (!= tmp%45#0 0u)
        (assert tmp%46#0) // can only call when not creating
        let tmp%47#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%1#0: bytes = tmp%47#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_string(reinterpret_bytes%1#0)
        return 1u
    block@11: // validate_bytes_route_L47
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (== tmp%48#0 NoOp)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        let tmp%51#0: bool = (!= tmp%50#0 0u)
        (assert tmp%51#0) // can only call when not creating
        let tmp%52#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%2#0: bytes = tmp%52#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bytes(reinterpret_bytes%2#0)
        return 1u
    block@12: // validate_address_route_L51
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (== tmp%53#0 NoOp)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        let tmp%56#0: bool = (!= tmp%55#0 0u)
        (assert tmp%56#0) // can only call when not creating
        let tmp%57#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[32]%0#0: bytes[32] = tmp%57#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_address(reinterpret_bytes[32]%0#0)
        return 1u
    block@13: // validate_account_route_L55
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (== tmp%58#0 NoOp)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (!= tmp%60#0 0u)
        (assert tmp%61#0) // can only call when not creating
        let tmp%62#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[32]%1#0: bytes[32] = tmp%62#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_account(reinterpret_bytes[32]%1#0)
        return 1u
    block@14: // validate_bool_arr_route_L59
        let tmp%63#0: uint64 = (txn OnCompletion)
        let tmp%64#0: bool = (== tmp%63#0 NoOp)
        (assert tmp%64#0) // OnCompletion is not NoOp
        let tmp%65#0: uint64 = (txn ApplicationID)
        let tmp%66#0: bool = (!= tmp%65#0 0u)
        (assert tmp%66#0) // can only call when not creating
        let tmp%67#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%3#0: bytes = tmp%67#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr(reinterpret_bytes%3#0)
        return 1u
    block@15: // validate_bool_arr3_route_L63
        let tmp%68#0: uint64 = (txn OnCompletion)
        let tmp%69#0: bool = (== tmp%68#0 NoOp)
        (assert tmp%69#0) // OnCompletion is not NoOp
        let tmp%70#0: uint64 = (txn ApplicationID)
        let tmp%71#0: bool = (!= tmp%70#0 0u)
        (assert tmp%71#0) // can only call when not creating
        let tmp%72#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%3#0: bytes[1] = tmp%72#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr3(reinterpret_bytes[1]%3#0)
        return 1u
    block@16: // validate_static_tuple_route_L67
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (== tmp%73#0 NoOp)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        let tmp%76#0: bool = (!= tmp%75#0 0u)
        (assert tmp%76#0) // can only call when not creating
        let tmp%77#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[9]%0#0: bytes[9] = tmp%77#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_tuple(reinterpret_bytes[9]%0#0)
        return 1u
    block@17: // validate_dynamic_tuple_route_L71
        let tmp%78#0: uint64 = (txn OnCompletion)
        let tmp%79#0: bool = (== tmp%78#0 NoOp)
        (assert tmp%79#0) // OnCompletion is not NoOp
        let tmp%80#0: uint64 = (txn ApplicationID)
        let tmp%81#0: bool = (!= tmp%80#0 0u)
        (assert tmp%81#0) // can only call when not creating
        let tmp%82#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%4#0: bytes = tmp%82#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_tuple(reinterpret_bytes%4#0)
        return 1u
    block@18: // validate_static_struct_route_L75
        let tmp%83#0: uint64 = (txn OnCompletion)
        let tmp%84#0: bool = (== tmp%83#0 NoOp)
        (assert tmp%84#0) // OnCompletion is not NoOp
        let tmp%85#0: uint64 = (txn ApplicationID)
        let tmp%86#0: bool = (!= tmp%85#0 0u)
        (assert tmp%86#0) // can only call when not creating
        let tmp%87#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[9]%1#0: bytes[9] = tmp%87#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct(reinterpret_bytes[9]%1#0)
        return 1u
    block@19: // validate_dynamic_struct_route_L79
        let tmp%88#0: uint64 = (txn OnCompletion)
        let tmp%89#0: bool = (== tmp%88#0 NoOp)
        (assert tmp%89#0) // OnCompletion is not NoOp
        let tmp%90#0: uint64 = (txn ApplicationID)
        let tmp%91#0: bool = (!= tmp%90#0 0u)
        (assert tmp%91#0) // can only call when not creating
        let tmp%92#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%5#0: bytes = tmp%92#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct(reinterpret_bytes%5#0)
        return 1u
    block@20: // validate_static_struct_arr_route_L83
        let tmp%93#0: uint64 = (txn OnCompletion)
        let tmp%94#0: bool = (== tmp%93#0 NoOp)
        (assert tmp%94#0) // OnCompletion is not NoOp
        let tmp%95#0: uint64 = (txn ApplicationID)
        let tmp%96#0: bool = (!= tmp%95#0 0u)
        (assert tmp%96#0) // can only call when not creating
        let tmp%97#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%6#0: bytes = tmp%97#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr(reinterpret_bytes%6#0)
        return 1u
    block@21: // validate_static_struct_arr3_route_L87
        let tmp%98#0: uint64 = (txn OnCompletion)
        let tmp%99#0: bool = (== tmp%98#0 NoOp)
        (assert tmp%99#0) // OnCompletion is not NoOp
        let tmp%100#0: uint64 = (txn ApplicationID)
        let tmp%101#0: bool = (!= tmp%100#0 0u)
        (assert tmp%101#0) // can only call when not creating
        let tmp%102#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes[27]%0#0: bytes[27] = tmp%102#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr3(reinterpret_bytes[27]%0#0)
        return 1u
    block@22: // validate_dynamic_struct_arr_route_L91
        let tmp%103#0: uint64 = (txn OnCompletion)
        let tmp%104#0: bool = (== tmp%103#0 NoOp)
        (assert tmp%104#0) // OnCompletion is not NoOp
        let tmp%105#0: uint64 = (txn ApplicationID)
        let tmp%106#0: bool = (!= tmp%105#0 0u)
        (assert tmp%106#0) // can only call when not creating
        let tmp%107#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%7#0: bytes = tmp%107#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr(reinterpret_bytes%7#0)
        return 1u
    block@23: // validate_dynamic_struct_arr3_route_L95
        let tmp%108#0: uint64 = (txn OnCompletion)
        let tmp%109#0: bool = (== tmp%108#0 NoOp)
        (assert tmp%109#0) // OnCompletion is not NoOp
        let tmp%110#0: uint64 = (txn ApplicationID)
        let tmp%111#0: bool = (!= tmp%110#0 0u)
        (assert tmp%111#0) // can only call when not creating
        let tmp%112#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%8#0: bytes = tmp%112#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr3(reinterpret_bytes%8#0)
        return 1u
    block@24: // validate_dynamic_struct_with_a_bool_route_L99
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (== tmp%113#0 NoOp)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        let tmp%116#0: bool = (!= tmp%115#0 0u)
        (assert tmp%116#0) // can only call when not creating
        let tmp%117#0: bytes = (txna ApplicationArgs 1)
        let reinterpret_bytes%9#0: bytes = tmp%117#0
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_with_a_bool(reinterpret_bytes%9#0)
        return 1u
    block@25: // switch_case_default_L10
        goto block@26
    block@26: // switch_case_next_L10
        goto block@31
    block@27: // bare_routing_L10
        let tmp%118#0: uint64 = (txn OnCompletion)
        switch tmp%118#0 {0u => block@28, * => block@29}
    block@28: // __algots__.defaultCreate_L10
        let tmp%119#0: uint64 = (txn ApplicationID)
        let tmp%120#0: bool = (== tmp%119#0 0u)
        (assert tmp%120#0) // can only call when creating
        tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__algots__.defaultCreate()
        return 1u
    block@29: // switch_case_default_L10
        goto block@30
    block@30: // switch_case_next_L10
        goto block@31
    block@31: // after_if_else_L10
        return 0u

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint64(value: bytes[8]) -> void:
    block@0: // L11
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 8u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.uint64
        let reinterpret_bytes[8]%0#0: bytes[8] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8(value: bytes[1]) -> void:
    block@0: // L15
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 1u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.uint8
        let reinterpret_bytes[1]%0#0: bytes[1] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint512(value: bytes[64]) -> void:
    block@0: // L19
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 64u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.uint512
        let reinterpret_bytes[64]%0#0: bytes[64] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_ufixed64(value: bytes[8]) -> void:
    block@0: // L23
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 8u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.ufixed64x2
        let reinterpret_bytes[8]%0#0: bytes[8] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr(value: bytes) -> void:
    block@0: // L27
        let length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_with_header%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_uint8_arr3(value: bytes[3]) -> void:
    block@0: // L31
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 3u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
        let reinterpret_bytes[3]%0#0: bytes[3] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool(value: bytes[1]) -> void:
    block@0: // L35
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 1u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.bool
        let reinterpret_bytes[1]%0#0: bytes[1] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_byte(value: bytes[1]) -> void:
    block@0: // L39
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 1u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.uint8
        let reinterpret_bytes[1]%0#0: bytes[1] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_string(value: bytes) -> void:
    block@0: // L43
        let length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_with_header%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bytes(value: bytes) -> void:
    block@0: // L47
        let length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_with_header%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_address(value: bytes[32]) -> void:
    block@0: // L51
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 32u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let reinterpret_bytes[32]%0#0: bytes[32] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_account(value: bytes[32]) -> void:
    block@0: // L55
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 32u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let reinterpret_bytes[32]%0#0: bytes[32] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr(value: bytes) -> void:
    block@0: // L59
        let length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bits_7%0#0: uint64 = (+ length%0#0 7u)
        let num_bytes%0#0: uint64 = (/ num_bits_7%0#0 8u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_with_header%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.bool>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_bool_arr3(value: bytes[1]) -> void:
    block@0: // L63
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 1u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<arc4.bool, 3>
        let reinterpret_bytes[1]%0#0: bytes[1] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_tuple(value: bytes[9]) -> void:
    block@0: // L67
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 9u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8>
        let reinterpret_bytes[9]%0#0: bytes[9] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_tuple(value: bytes) -> void:
    block@0: // L71
        let tuple_len%0#0: uint64 = (len value#0)
        let offset%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let offset_is_correct%0#0: bool = (== offset%0#0 11u)
        (assert offset_is_correct%0#0) // invalid tail pointer at index 2 of arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
        let item%0#0: bytes = (substring3 value#0 offset%0#0 tuple_len%0#0)
        let length%0#0: uint64 = (extract_uint16 item%0#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let num_bytes_value%0#0: uint64 = (+ 11u num_bytes_with_header%0#0)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_value%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint8,arc4.dynamic_array<arc4.uint8>>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct(value: bytes[9]) -> void:
    block@0: // L75
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 9u)
        (assert size_is_correct%0#0) // invalid number of bytes for ARC4StaticStruct
        let reinterpret_bytes[9]%0#0: bytes[9] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct(value: bytes) -> void:
    block@0: // L79
        let tuple_len%0#0: uint64 = (len value#0)
        let offset%0#0: uint64 = (extract_uint16 value#0 9u) // on error: invalid tuple encoding
        let offset_is_correct%0#0: bool = (== offset%0#0 11u)
        (assert offset_is_correct%0#0) // invalid tail pointer at index 2 of ARC4DynamicStruct
        let item%0#0: bytes = (substring3 value#0 offset%0#0 tuple_len%0#0)
        let length%0#0: uint64 = (extract_uint16 item%0#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let num_bytes_value%0#0: uint64 = (+ 11u num_bytes_with_header%0#0)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_value%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for ARC4DynamicStruct
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr(value: bytes) -> void:
    block@0: // L83
        let length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 9u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_with_header%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.dynamic_array<ARC4StaticStruct>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_static_struct_arr3(value: bytes[27]) -> void:
    block@0: // L87
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 27u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<ARC4StaticStruct, 3>
        let reinterpret_bytes[27]%0#0: bytes[27] = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr(value: bytes) -> void:
    block@0: // L91
        let length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let array_data%0#0: bytes = ((extract 2 0) value#0)
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L93
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L93
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for arc4.dynamic_array<ARC4DynamicStruct>
        let total_length%0#0: uint64 = (len array_data%0#0)
        let data%0#0: bytes = (substring3 array_data%0#0 item_offset%0#0 total_length%0#0)
        let tuple_len%0#0: uint64 = (len data%0#0)
        let offset%0#0: uint64 = (extract_uint16 data%0#0 9u) // on error: invalid tuple encoding
        let offset_is_correct%1#0: bool = (== offset%0#0 11u)
        (assert offset_is_correct%1#0) // invalid tail pointer at index 2 of ARC4DynamicStruct
        let item%0#0: bytes = (substring3 data%0#0 offset%0#0 tuple_len%0#0)
        let length%1#0: uint64 = (extract_uint16 item%0#0 0u) // on error: invalid array length header
        let num_bytes%1#0: uint64 = (* length%1#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%1#0 2u)
        let num_bytes_value%0#0: uint64 = (+ 11u num_bytes_with_header%0#0)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 num_bytes_value%0#0)
        goto block@3
    block@3: // for_footer_L93
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L93
        let num_bytes%2#0: uint64 = (+ num_bytes%0#1 2u)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes%2#0)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.dynamic_array<ARC4DynamicStruct>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_arr3(value: bytes) -> void:
    block@0: // L95
        let num_bytes%0#0: uint64 = (* 3u 2u)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L97
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@3)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@3)
        let continue_looping%0#0: bool = (< index%0#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L97
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 value#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for arc4.static_array<ARC4DynamicStruct, 3>
        let total_length%0#0: uint64 = (len value#0)
        let data%0#0: bytes = (substring3 value#0 item_offset%0#0 total_length%0#0)
        let tuple_len%0#0: uint64 = (len data%0#0)
        let offset%0#0: uint64 = (extract_uint16 data%0#0 9u) // on error: invalid tuple encoding
        let offset_is_correct%1#0: bool = (== offset%0#0 11u)
        (assert offset_is_correct%1#0) // invalid tail pointer at index 2 of ARC4DynamicStruct
        let item%0#0: bytes = (substring3 data%0#0 offset%0#0 tuple_len%0#0)
        let length%0#0: uint64 = (extract_uint16 item%0#0 0u) // on error: invalid array length header
        let num_bytes%1#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%1#0 2u)
        let num_bytes_value%0#0: uint64 = (+ 11u num_bytes_with_header%0#0)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 num_bytes_value%0#0)
        goto block@3
    block@3: // for_footer_L97
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L97
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes%0#1)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<ARC4DynamicStruct, 3>
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.validate_dynamic_struct_with_a_bool(value: bytes) -> void:
    block@0: // L99
        let tuple_len%0#0: uint64 = (len value#0)
        let offset%0#0: uint64 = (extract_uint16 value#0 1u) // on error: invalid tuple encoding
        let offset_is_correct%0#0: bool = (== offset%0#0 4u)
        (assert offset_is_correct%0#0) // invalid tail pointer at index 1 of WithABool
        let item%0#0: bytes = (substring3 value#0 offset%0#0 tuple_len%0#0)
        let length%0#0: uint64 = (extract_uint16 item%0#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 1u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let num_bytes_value%0#0: uint64 = (+ 4u num_bytes_with_header%0#0)
        let value_len%0#0: uint64 = (len value#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 num_bytes_value%0#0)
        (assert size_is_correct%0#0) // invalid number of bytes for WithABool
        let reinterpret_bytes%0#0: bytes = value#0
        return 

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::AbiValidationExhaustive.__algots__.defaultCreate() -> void:
    block@0: // L10
        return 