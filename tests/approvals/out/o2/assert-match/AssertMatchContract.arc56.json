{
    "name": "AssertMatchContract",
    "structs": {},
    "methods": [
        {
            "name": "testPay",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        120
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        29
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        42,
                        102
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        39
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjQKICAgIC8vIGV4cG9ydCBjbGFzcyBBc3NlcnRNYXRjaENvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDUKICAgIHB1c2hieXRlcyAweDhmZWY3NjY4IC8vIG1ldGhvZCAidGVzdFBheShwYXkpYm9vbCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fdGVzdFBheV9yb3V0ZUAzCiAgICBlcnIKCm1haW5fdGVzdFBheV9yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjUKICAgIC8vIHB1YmxpYyB0ZXN0UGF5KHBheTogZ3R4bi5QYXltZW50VHhuKTogYm9vbGVhbiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgJiYKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjYtOAogICAgLy8gYXNzZXJ0TWF0Y2goVHhuLCB7CiAgICAvLyAgIGZlZTogeyBncmVhdGVyVGhhbjogMCB9LAogICAgLy8gfSkKICAgIHR4biBGZWUKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6MTAtMTcKICAgIC8vIGFzc2VydE1hdGNoKHBheSwgewogICAgLy8gICBhbW91bnQ6IHsgYmV0d2VlbjogWzEwMF8wMDAsIDEwNV8wMDBdIH0sCiAgICAvLyAgIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICBjbG9zZVJlbWFpbmRlclRvOiBHbG9iYWwuemVyb0FkZHJlc3MsCiAgICAvLyAgIGZpcnN0VmFsaWQ6IHsgZ3JlYXRlclRoYW46IDEgfSwKICAgIC8vICAgbGFzdFZhbGlkOiB7IGxlc3NUaGFuOiAyICoqIDQwIH0sCiAgICAvLyB9KQogICAgZHVwCiAgICBndHhucyBBbW91bnQKICAgIGR1cAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjExCiAgICAvLyBhbW91bnQ6IHsgYmV0d2VlbjogWzEwMF8wMDAsIDEwNV8wMDBdIH0sCiAgICBwdXNoaW50IDEwNTAwMCAvLyAxMDUwMDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NlcnQtbWF0Y2guYWxnby50czoxMC0xNwogICAgLy8gYXNzZXJ0TWF0Y2gocGF5LCB7CiAgICAvLyAgIGFtb3VudDogeyBiZXR3ZWVuOiBbMTAwXzAwMCwgMTA1XzAwMF0gfSwKICAgIC8vICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGNsb3NlUmVtYWluZGVyVG86IEdsb2JhbC56ZXJvQWRkcmVzcywKICAgIC8vICAgZmlyc3RWYWxpZDogeyBncmVhdGVyVGhhbjogMSB9LAogICAgLy8gICBsYXN0VmFsaWQ6IHsgbGVzc1RoYW46IDIgKiogNDAgfSwKICAgIC8vIH0pCiAgICA8PQogICAgc3dhcAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjExCiAgICAvLyBhbW91bnQ6IHsgYmV0d2VlbjogWzEwMF8wMDAsIDEwNV8wMDBdIH0sCiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NlcnQtbWF0Y2guYWxnby50czoxMC0xNwogICAgLy8gYXNzZXJ0TWF0Y2gocGF5LCB7CiAgICAvLyAgIGFtb3VudDogeyBiZXR3ZWVuOiBbMTAwXzAwMCwgMTA1XzAwMF0gfSwKICAgIC8vICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGNsb3NlUmVtYWluZGVyVG86IEdsb2JhbC56ZXJvQWRkcmVzcywKICAgIC8vICAgZmlyc3RWYWxpZDogeyBncmVhdGVyVGhhbjogMSB9LAogICAgLy8gICBsYXN0VmFsaWQ6IHsgbGVzc1RoYW46IDIgKiogNDAgfSwKICAgIC8vIH0pCiAgICA+PQogICAgJiYKICAgIGRpZyAxCiAgICBndHhucyBTZW5kZXIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NlcnQtbWF0Y2guYWxnby50czoxMgogICAgLy8gc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjEwLTE3CiAgICAvLyBhc3NlcnRNYXRjaChwYXksIHsKICAgIC8vICAgYW1vdW50OiB7IGJldHdlZW46IFsxMDBfMDAwLCAxMDVfMDAwXSB9LAogICAgLy8gICBzZW5kZXI6IFR4bi5zZW5kZXIsCiAgICAvLyAgIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgY2xvc2VSZW1haW5kZXJUbzogR2xvYmFsLnplcm9BZGRyZXNzLAogICAgLy8gICBmaXJzdFZhbGlkOiB7IGdyZWF0ZXJUaGFuOiAxIH0sCiAgICAvLyAgIGxhc3RWYWxpZDogeyBsZXNzVGhhbjogMiAqKiA0MCB9LAogICAgLy8gfSkKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6MTMKICAgIC8vIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6MTAtMTcKICAgIC8vIGFzc2VydE1hdGNoKHBheSwgewogICAgLy8gICBhbW91bnQ6IHsgYmV0d2VlbjogWzEwMF8wMDAsIDEwNV8wMDBdIH0sCiAgICAvLyAgIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICBjbG9zZVJlbWFpbmRlclRvOiBHbG9iYWwuemVyb0FkZHJlc3MsCiAgICAvLyAgIGZpcnN0VmFsaWQ6IHsgZ3JlYXRlclRoYW46IDEgfSwKICAgIC8vICAgbGFzdFZhbGlkOiB7IGxlc3NUaGFuOiAyICoqIDQwIH0sCiAgICAvLyB9KQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgZ3R4bnMgQ2xvc2VSZW1haW5kZXJUbwogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjE0CiAgICAvLyBjbG9zZVJlbWFpbmRlclRvOiBHbG9iYWwuemVyb0FkZHJlc3MsCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NlcnQtbWF0Y2guYWxnby50czoxMC0xNwogICAgLy8gYXNzZXJ0TWF0Y2gocGF5LCB7CiAgICAvLyAgIGFtb3VudDogeyBiZXR3ZWVuOiBbMTAwXzAwMCwgMTA1XzAwMF0gfSwKICAgIC8vICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGNsb3NlUmVtYWluZGVyVG86IEdsb2JhbC56ZXJvQWRkcmVzcywKICAgIC8vICAgZmlyc3RWYWxpZDogeyBncmVhdGVyVGhhbjogMSB9LAogICAgLy8gICBsYXN0VmFsaWQ6IHsgbGVzc1RoYW46IDIgKiogNDAgfSwKICAgIC8vIH0pCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBndHhucyBGaXJzdFZhbGlkCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6MTUKICAgIC8vIGZpcnN0VmFsaWQ6IHsgZ3JlYXRlclRoYW46IDEgfSwKICAgIGludGNfMCAvLyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6MTAtMTcKICAgIC8vIGFzc2VydE1hdGNoKHBheSwgewogICAgLy8gICBhbW91bnQ6IHsgYmV0d2VlbjogWzEwMF8wMDAsIDEwNV8wMDBdIH0sCiAgICAvLyAgIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICBjbG9zZVJlbWFpbmRlclRvOiBHbG9iYWwuemVyb0FkZHJlc3MsCiAgICAvLyAgIGZpcnN0VmFsaWQ6IHsgZ3JlYXRlclRoYW46IDEgfSwKICAgIC8vICAgbGFzdFZhbGlkOiB7IGxlc3NUaGFuOiAyICoqIDQwIH0sCiAgICAvLyB9KQogICAgPgogICAgJiYKICAgIHN3YXAKICAgIGd0eG5zIExhc3RWYWxpZAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2Fzc2VydC1tYXRjaC5hbGdvLnRzOjE2CiAgICAvLyBsYXN0VmFsaWQ6IHsgbGVzc1RoYW46IDIgKiogNDAgfSwKICAgIHB1c2hpbnQgMTA5OTUxMTYyNzc3NiAvLyAxMDk5NTExNjI3Nzc2CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6MTAtMTcKICAgIC8vIGFzc2VydE1hdGNoKHBheSwgewogICAgLy8gICBhbW91bnQ6IHsgYmV0d2VlbjogWzEwMF8wMDAsIDEwNV8wMDBdIH0sCiAgICAvLyAgIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICBjbG9zZVJlbWFpbmRlclRvOiBHbG9iYWwuemVyb0FkZHJlc3MsCiAgICAvLyAgIGZpcnN0VmFsaWQ6IHsgZ3JlYXRlclRoYW46IDEgfSwKICAgIC8vICAgbGFzdFZhbGlkOiB7IGxlc3NUaGFuOiAyICoqIDQwIH0sCiAgICAvLyB9KQogICAgPAogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYXNzZXJ0LW1hdGNoLmFsZ28udHM6NQogICAgLy8gcHVibGljIHRlc3RQYXkocGF5OiBndHhuLlBheW1lbnRUeG4pOiBib29sZWFuIHsKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1ODAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVANToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9hc3NlcnQtbWF0Y2guYWxnby50czo0CiAgICAvLyBleHBvcnQgY2xhc3MgQXNzZXJ0TWF0Y2hDb250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICAmJgogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyABATEbQQBogASP73ZoNhoAjgEAAQAxGRQxGBBEMRYiCUk4ECISRDEBREk4CEmBqLQGDkyBoI0GDxBLATgAMQASEEsBOAcyChIQSwE4CTIDEhBLATgCIg0QTDgEgYCAgICAIAwQRIAFFR98dYCwIkMxGRQxGBQQQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}