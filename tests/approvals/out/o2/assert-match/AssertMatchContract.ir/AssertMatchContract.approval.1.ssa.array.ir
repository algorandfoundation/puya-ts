main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPay(pay)bool" => block@3, * => block@10}
    block@3: // testPay_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#2: uint64 = (txn Fee)
        (assert tmp%0#2) // assert target is match for conditions
        let tmp%2#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#1: bool = (<= tmp%2#1 105000u)
        goto tmp%3#1 ? block@15 : block@22
    block@15: // and_contd_L10
        let tmp%5#1: bool = (>= tmp%2#1 100000u)
        goto tmp%5#1 ? block@16 : block@22
    block@16: // and_contd_L10
        let tmp%6#1: bytes[32] = ((gtxns Sender) pay#0)
        let tmp%7#1: bytes[32] = (txn Sender)
        let tmp%8#1: bool = (== tmp%6#1 tmp%7#1)
        goto tmp%8#1 ? block@17 : block@22
    block@17: // and_contd_L10
        let tmp%9#1: bytes[32] = ((gtxns Receiver) pay#0)
        let tmp%10#1: bytes[32] = (global CurrentApplicationAddress)
        let tmp%11#1: bool = (== tmp%9#1 tmp%10#1)
        goto tmp%11#1 ? block@18 : block@22
    block@18: // and_contd_L10
        let tmp%12#0: bytes[32] = ((gtxns CloseRemainderTo) pay#0)
        let tmp%13#0: bytes[32] = (global ZeroAddress)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        goto tmp%14#0 ? block@19 : block@22
    block@19: // and_contd_L10
        let tmp%15#0: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%16#0: bool = (> tmp%15#0 1u)
        goto tmp%16#0 ? block@20 : block@22
    block@20: // and_contd_L10
        let tmp%17#0: uint64 = ((gtxns LastValid) pay#0)
        let tmp%18#0: bool = (< tmp%17#0 1099511627776u)
        goto tmp%18#0 ? block@21 : block@22
    block@21: // bool_true_L10
        let and_result%0#0: bool = 1u
        goto block@23
    block@22: // bool_false_L10
        let and_result%0#1: bool = 0u
        goto block@23
    block@23: // bool_merge_L10
        let and_result%0#2: bool = φ(and_result%0#0 <- block@21, and_result%0#1 <- block@22)
        (assert and_result%0#2) // assert target is match for conditions
        (log 0x151f7c7580)
        let tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto tmp%9#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        let tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#0 <- block@23, tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0