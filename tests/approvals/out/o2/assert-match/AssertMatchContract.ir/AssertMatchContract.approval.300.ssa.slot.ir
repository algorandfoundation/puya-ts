main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPay(pay)bool" => block@3, * => block@4}
    block@3: // testPay_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let tmp%0#2: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%0#2 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#3: uint64 = (txn Fee)
        (assert tmp%0#3) // assert target is match for conditions
        let tmp%2#2: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#2: bool = (<= tmp%2#2 105000u)
        let tmp%5#1: bool = (>= tmp%2#2 100000u)
        let tmp%6#1: bool = (&& tmp%3#2 tmp%5#1)
        let tmp%7#1: account = ((gtxns Sender) pay#0)
        let tmp%8#1: account = (txn Sender)
        let tmp%9#1: bool = (== tmp%7#1 tmp%8#1)
        let tmp%10#1: bool = (&& tmp%6#1 tmp%9#1)
        let tmp%11#1: account = ((gtxns Receiver) pay#0)
        let tmp%12#1: account = (global CurrentApplicationAddress)
        let tmp%13#0: bool = (== tmp%11#1 tmp%12#1)
        let tmp%14#0: bool = (&& tmp%10#1 tmp%13#0)
        let tmp%15#0: account = ((gtxns CloseRemainderTo) pay#0)
        let tmp%16#0: account = (global ZeroAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        let tmp%18#0: bool = (&& tmp%14#0 tmp%17#0)
        let tmp%19#0: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%20#0: bool = (> tmp%19#0 1u)
        let tmp%21#0: bool = (&& tmp%18#0 tmp%20#0)
        let tmp%22#0: uint64 = ((gtxns LastValid) pay#0)
        let tmp%23#0: bool = (< tmp%22#0 1099511627776u)
        let tmp%24#0: bool = (&& tmp%21#0 tmp%23#0)
        (assert tmp%24#0) // assert target is match for conditions
        (log 0x151f7c7580)
        exit 1u
    block@4: // switch_case_next_L4
        fail
    block@5: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u