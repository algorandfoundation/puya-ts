main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPay(pay)bool" => block@3, * => block@10}
    block@3: // testPay_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#2: uint64 = (txn Fee)
        (assert tmp%0#2) // assert target is match for conditions
        let tmp%2#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#1: bool = (<= tmp%2#1 105000u)
        let tmp%5#1: bool = (>= tmp%2#1 100000u)
        let tmp%6#1: bool = (&& tmp%3#1 tmp%5#1)
        let tmp%7#1: account = ((gtxns Sender) pay#0)
        let tmp%8#1: account = (txn Sender)
        let tmp%9#1: bool = (== tmp%7#1 tmp%8#1)
        let tmp%10#1: bool = (&& tmp%6#1 tmp%9#1)
        let tmp%11#1: account = ((gtxns Receiver) pay#0)
        let tmp%12#1: account = (global CurrentApplicationAddress)
        let tmp%13#1: bool = (== tmp%11#1 tmp%12#1)
        let tmp%14#0: bool = (&& tmp%10#1 tmp%13#1)
        let tmp%15#0: account = ((gtxns CloseRemainderTo) pay#0)
        let tmp%16#0: account = (global ZeroAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        let tmp%18#0: bool = (&& tmp%14#0 tmp%17#0)
        let tmp%19#0: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%20#0: bool = (> tmp%19#0 1u)
        let tmp%21#0: bool = (&& tmp%18#0 tmp%20#0)
        let tmp%22#0: uint64 = ((gtxns LastValid) pay#0)
        let tmp%23#0: bool = (< tmp%22#0 1099511627776u)
        let tmp%24#0: bool = (&& tmp%21#0 tmp%23#0)
        (assert tmp%24#0) // assert target is match for conditions
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        let tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0