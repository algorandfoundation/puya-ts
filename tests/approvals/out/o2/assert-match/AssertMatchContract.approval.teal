#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x8fef7668 // method "testPay(pay)bool"
    txna ApplicationArgs 0
    match main_testPay_route@3

main_after_if_else@10:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    pushint 0 // 0
    return

main_testPay_route@3:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/assert-match.algo.ts:6-8
    // assertMatch(Txn, {
    //   fee: { greaterThan: 0 },
    // })
    txn Fee
    assert // assert target is match for conditions
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    dup
    gtxns Amount
    dup
    // tests/approvals/assert-match.algo.ts:11
    // amount: { between: [100_000, 105_000] },
    pushint 105000 // 105000
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <=
    swap
    // tests/approvals/assert-match.algo.ts:11
    // amount: { between: [100_000, 105_000] },
    pushint 100000 // 100000
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >=
    &&
    dig 1
    gtxns Sender
    // tests/approvals/assert-match.algo.ts:12
    // sender: Txn.sender,
    txn Sender
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    &&
    dig 1
    gtxns Receiver
    // tests/approvals/assert-match.algo.ts:13
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    &&
    dig 1
    gtxns CloseRemainderTo
    // tests/approvals/assert-match.algo.ts:14
    // closeRemainderTo: Global.zeroAddress,
    global ZeroAddress
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    &&
    dig 1
    gtxns FirstValid
    // tests/approvals/assert-match.algo.ts:15
    // firstValid: { greaterThan: 1 },
    intc_0 // 1
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >
    &&
    swap
    gtxns LastValid
    // tests/approvals/assert-match.algo.ts:16
    // lastValid: { lessThan: 2 ** 40 },
    pushint 1099511627776 // 1099511627776
    // tests/approvals/assert-match.algo.ts:10-17
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <
    &&
    assert // assert target is match for conditions
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    pushbytes 0x151f7c7580
    log
    intc_0 // 1
    return

main_bare_routing@6:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
