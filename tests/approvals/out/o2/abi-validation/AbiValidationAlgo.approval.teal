#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 32 0
    bytecblock 0x151f7c75
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x263e9c33 0xe0e07074 0x46a0d251 0xc0f05d10 // method "withValidation(byte[32])uint64", method "withoutValidation(byte[32])uint64", method "defaultValidation(byte[32])uint64", method "manualValidationAfterConvert(byte[])uint64"
    txna ApplicationArgs 0
    match main_withValidation_route@3 main_withoutValidation_route@4 main_defaultValidation_route@5 main_manualValidationAfterConvert_route@6

main_after_if_else@13:
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    intc_2 // 0
    return

main_manualValidationAfterConvert_route@6:
    // tests/approvals/abi-validation.algo.ts:21
    // manualValidationAfterConvert(rawBytes: bytes) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // tests/approvals/abi-validation.algo.ts:22
    // const value = interpretAsArc4<StaticBytes<32>>(rawBytes)
    len
    dup
    intc_1 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // tests/approvals/abi-validation.algo.ts:21
    // manualValidationAfterConvert(rawBytes: bytes) {
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_defaultValidation_route@5:
    // tests/approvals/abi-validation.algo.ts:17
    // defaultValidation(value: StaticBytes<32>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    txna ApplicationArgs 1
    len
    dup
    intc_1 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // tests/approvals/abi-validation.algo.ts:17
    // defaultValidation(value: StaticBytes<32>) {
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_withoutValidation_route@4:
    // tests/approvals/abi-validation.algo.ts:12
    // @abimethod({ validateEncoding: 'unsafe-disabled' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/abi-validation.algo.ts:14
    // return value.bytes.length
    len
    // tests/approvals/abi-validation.algo.ts:12
    // @abimethod({ validateEncoding: 'unsafe-disabled' })
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_withValidation_route@3:
    // tests/approvals/abi-validation.algo.ts:7
    // @abimethod({ validateEncoding: 'args' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    txna ApplicationArgs 1
    len
    dup
    intc_1 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // tests/approvals/abi-validation.algo.ts:7
    // @abimethod({ validateEncoding: 'args' })
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@9:
    // tests/approvals/abi-validation.algo.ts:6
    // class AbiValidationAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
