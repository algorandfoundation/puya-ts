#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8
    intc_0 // 0
    dup
    pushbytes ""
    dup
    // tests/approvals/arc4-encode-decode.algo.ts:7
    // export class Arc4EncodeDecode extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x9be85afa 0xa2d335ac // method "testEncoding(uint64,bool,uint512,byte[],string)void", method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void"
    txna ApplicationArgs 0
    match main_testEncoding_route@3 main_testDecoding_route@4

main_after_if_else@11:
    // tests/approvals/arc4-encode-decode.algo.ts:7
    // export class Arc4EncodeDecode extends Contract {
    intc_0 // 0
    return

main_testDecoding_route@4:
    // tests/approvals/arc4-encode-decode.algo.ts:17-28
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    // ) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc4-encode-decode.algo.ts:7
    // export class Arc4EncodeDecode extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    intc_0 // 0
    getbit
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    extract 2 0
    txna ApplicationArgs 7
    extract 2 0
    txna ApplicationArgs 8
    extract 2 0
    txna ApplicationArgs 9
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    intc_2 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    bury 13
    txna ApplicationArgs 10
    extract 2 0
    dup
    bury 13
    // tests/approvals/arc4-encode-decode.algo.ts:29
    // assert(decodeArc4<uint64>(a_bytes) === a)
    uncover 8
    btoi
    uncover 9
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:30
    // assert(decodeArc4<boolean>(b_bytes) === b)
    uncover 6
    intc_0 // 0
    getbit
    uncover 7
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:31
    // assert(decodeArc4<biguint>(c_bytes) === c)
    uncover 4
    uncover 5
    b==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:32
    // assert(decodeArc4<string>(d_bytes) === d)
    uncover 2
    extract 2 0
    uncover 3
    ==
    assert
    // tests/approvals/arc4-encode-decode.algo.ts:34
    // assertMatch(decodeArc4<TestObj>(e_bytes), e)
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    intc_2 // 8
    extract_uint16
    bury 4
    swap
    len
    bury 4
    ==
    bz main_bool_false@18
    dig 2
    dig 1
    dig 3
    substring3
    dig 4
    ==
    bz main_bool_false@18
    intc_1 // 1

main_bool_merge@19:
    // tests/approvals/arc4-encode-decode.algo.ts:34
    // assertMatch(decodeArc4<TestObj>(e_bytes), e)
    assert // assert target is match for conditions
    // tests/approvals/arc4-encode-decode.algo.ts:17-28
    // testDecoding(
    //   a: uint64,
    //   a_bytes: bytes,
    //   b: boolean,
    //   b_bytes: bytes,
    //   c: biguint,
    //   c_bytes: bytes,
    //   d: string,
    //   d_bytes: bytes,
    //   e: TestObj,
    //   e_bytes: bytes,
    // ) {
    intc_1 // 1
    return

main_bool_false@18:
    intc_0 // 0
    b main_bool_merge@19

main_testEncoding_route@3:
    // tests/approvals/arc4-encode-decode.algo.ts:8
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc4-encode-decode.algo.ts:7
    // export class Arc4EncodeDecode extends Contract {
    txna ApplicationArgs 3
    // tests/approvals/arc4-encode-decode.algo.ts:11
    // assert(encodeArc4(c) === new UintN<512>(c).bytes)
    len
    pushint 64 // 64
    <=
    assert // overflow
    // tests/approvals/arc4-encode-decode.algo.ts:8
    // testEncoding(a: uint64, b: boolean, c: biguint, d: bytes, e: string) {
    intc_1 // 1
    return

main_bare_routing@7:
    // tests/approvals/arc4-encode-decode.algo.ts:7
    // export class Arc4EncodeDecode extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
