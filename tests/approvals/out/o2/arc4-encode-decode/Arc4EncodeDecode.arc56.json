{
    "name": "Arc4EncodeDecode",
    "structs": {
        "TestObj": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "testEncoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "string",
                    "name": "e"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDecoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "a_bytes"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "b_bytes"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "c_bytes"
                },
                {
                    "type": "string",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "d_bytes"
                },
                {
                    "type": "(uint64,byte[])",
                    "struct": "TestObj",
                    "name": "e"
                },
                {
                    "type": "byte[]",
                    "name": "e_bytes"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[]",
                    "name": "f_bytes"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                },
                {
                    "type": "byte[]",
                    "name": "g_bytes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        477
                    ],
                    "errorMessage": "Array of address matches"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "Array of biguint matches"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "Array of boolean matches"
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "Array of string matches"
                },
                {
                    "pc": [
                        450
                    ],
                    "errorMessage": "Array of struct matches"
                },
                {
                    "pc": [
                        273
                    ],
                    "errorMessage": "Array of uint64 matches"
                },
                {
                    "pc": [
                        61,
                        517
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        247
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        620
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        64,
                        520
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        293,
                        362,
                        410
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        590
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        583
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEIAiYEAgABBAABAAIDBoEBAQAiRxOAAEcEMRtBAkGCAgQ0sUbBBAD9JTQ2GgCOAgHKAAIiQzEZFEQxGEQ2GgEXSUUGNhoCVwIASUUbNhoDIlNJTgJFBDYaBFcCAElFGzYaBUlOA0UbNhoGVwIASU4DRRs2GgdXAgBJTgRFGzYaCElXAgBFGzYaCUlXAAhJTgZFHEkkWUsBFVJFGjYaCklXAgBFGjYaC0UZNhoMVwIARRg2Gg1FFzYaDlcCAEUWTwMXTwkSRE8CIlNPBxJETwJPBahETFcEAE8DEkRXAggSQQEXSw9JJFlLARVSSxESQQEII0QoSxlQSUUJIlkjEkEA9EsHJVtLBRJBAOojRChLF1BJRQoiWUlFBSMSQQDTSwNESwhXAgAiU0sBEkEAwyNEKEsVUElFB0mwIlkjEkEArUsFVwJASxaoQQCiI0QpSxNQSUUMIllJRQQjEkEAi0sKVwIASwNESSJZSlklCFhXAgBLFBJBAHIjRClLEFBJRQsiWUlFAyMSQQBbSwlXAgBJIllLAyMJSwIVSwMlWU8CTVJJRRlXAAhLEhJBADhLF0kkWUsBFVJLERJBACkjRChLDlBJRQgiWSMSQQAVSwZXAiBLDxJBAAojREsLSw0SRCNDIkL/8yJC/9QiQv+LIkL/WyJC/zoiQv8TIkL+9TEZFEQxGEQ2GgIiU0UBNhoDRRY2GgdFDYGCCzIMDUEAFrGBBrIQgQWyGSqyHiqyHyKyAbNC/+ErIksCSU4DVEsXFYFADkRLDhWBDBJEKyJPA1RJSwISRChMUChPAlASRCNDMRlA/c8xGBREI0M=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}