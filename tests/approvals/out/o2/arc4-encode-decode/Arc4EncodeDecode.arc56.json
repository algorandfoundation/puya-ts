{
    "name": "Arc4EncodeDecode",
    "structs": {
        "TestObj": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "testEncoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "string",
                    "name": "e"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDecoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "a_bytes"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "b_bytes"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "c_bytes"
                },
                {
                    "type": "string",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "d_bytes"
                },
                {
                    "type": "(uint64,byte[])",
                    "struct": "TestObj",
                    "name": "e"
                },
                {
                    "type": "byte[]",
                    "name": "e_bytes"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[]",
                    "name": "f_bytes"
                },
                {
                    "type": "byte[12]",
                    "name": "g"
                },
                {
                    "type": "byte[]",
                    "name": "g_bytes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        511
                    ],
                    "errorMessage": "Array of address matches"
                },
                {
                    "pc": [
                        362
                    ],
                    "errorMessage": "Array of biguint matches"
                },
                {
                    "pc": [
                        333
                    ],
                    "errorMessage": "Array of boolean matches"
                },
                {
                    "pc": [
                        406
                    ],
                    "errorMessage": "Array of string matches"
                },
                {
                    "pc": [
                        484
                    ],
                    "errorMessage": "Array of struct matches"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "Array of uint64 matches"
                },
                {
                    "pc": [
                        149,
                        316,
                        387,
                        435,
                        451
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        67,
                        551
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        265
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        872
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        70,
                        554
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        689
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        647
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAECCCYGAgABAQAEAAEAAgMGgQECAAICAAAiRxuAAEcLMRtBAzeCAgQ0sUbBBAD9JTQ2GgCOAgHmAAIiQzEZFEQxGEQ2GgEXSUUNNhoCVwIASUUqNhoDIlNJTgJFDjYaBFcCAElFKTYaBUlOA0UpNhoGVwIASU4DRSk2GgdXAgBJTgRFKTYaCElXAgBFKTYaCUlXAAhJTgpFKUklWUsBFVJFJzYaCklXAgBJTgJFKDYaC0UjNhoMVwIARSI2Gg1FITYaDlcCAEUgTwQXTwkSRE8DIlNPBxJETwNPBahETwJXBABPAxJEVwIISwElWUULTBVFDBJBASVLHEsISwtSSx4SQQEYI0QoSyhQSUUTIlkjEkEBBEsRJFtLDBJBAPojRChLJVBJRRIiWUlFBSMSQQDjSxBXAgBLBEQiUykiTwJUIlNLCxJBAMwjRChLI1BJRRFJsCJZIxJBALZLD1cCQEskqEEAqyNEKkshUElFECJZSUUEIxJBAJRLDlcCAEsDREkiWUpZJAhYVwIASyISQQB7I0QqSx1QSUUPIllJRQMjEkEAZEsNVwIASSJZSwMjCUsCFUsDJFlPAk1SSUUnSVcACEsBJVlFCUwVRQpLHxJBADZLJUsHSwpSSx4SQQApI0QoSxdQSUUOIlkjEkEAFUsMVwIgSxgSQQAKI0RLFEsWEkQjQyJC//MiQv/UIkL/giJC/1IiQv8xIkL/AyJC/uUxGRREMRhENhoBF0UMNhoCIlNFCzYaA0UkNhoEVwIARSI2GgVXAgBFIDYaBkUYNhoHRRaBggsyDA1BABaxgQayEIEFshkrsh4rsh8isgGzQv/hSwsWKSJLDVRFFUskSRWBQA5EgUCvq0UoSyJJFRZXBgJMUElFHEshSRUWVwYCTFBJRRxLGBVJRQqBDBJEJwRPAlBFHicETFBFHChLAVAoTwJQEkSAAwABAEUTIkUFgRBFAUmBEQxBAB9LE0sFSU4CU0sUSwNJTgNPAlRFFSMIRQIlCEUFQv/aKEsUUEsTEkRLJkkVgUAKFlcGAksBUChPAlASRCcFSxojiABKKEsdUBJEJwVLGSOIADwoSxxQEkRLF0kVgSAKFlcGAksBUChPAlASREsFgQwKFlcGAksWSU4CUChPAlASRCNDMRlA/NkxGBREI0OKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiTIsDiwIMQQAjiwRJFlcGAosBiwNJTgRPAl1JjAFLAVkkCAiMBCQIjANC/9WLAIsBUIwAiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}