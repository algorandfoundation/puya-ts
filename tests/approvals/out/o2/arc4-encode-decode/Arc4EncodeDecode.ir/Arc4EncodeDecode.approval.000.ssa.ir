main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__() -> bool:
    block@0: // L24
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@2, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@3, * => block@4}
    block@2: // testEncoding_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let tmp%8#0: bool = decode_bytes<bool>(reinterpret_Encoded(bool8)%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 3)
        let tmp%9#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%10#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%11#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = (txna ApplicationArgs 7)
        let tmp%12#0: bytes[12] = decode_bytes<bytes[12]>(reinterpret_Encoded(uint8[12])%0#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, reinterpret_Encoded(uint8[32])%0#0, tmp%12#0)
        return 1u
    block@3: // testDecoding_route_L65
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%18#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(bool8)%1#0: Encoded(bool8) = (txna ApplicationArgs 3)
        let tmp%19#0: bool = decode_bytes<bool>(reinterpret_Encoded(bool8)%1#0)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%20#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%2#0)
        let reinterpret_Encoded(uint512)%1#0: Encoded(uint512) = (txna ApplicationArgs 5)
        let tmp%21#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%1#0)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let tmp%22#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 7)
        let tmp%23#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 8)
        let tmp%24#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 10)
        let tmp%25#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%5#0)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 12)
        let tmp%26#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%6#0)
        let reinterpret_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = (txna ApplicationArgs 13)
        let tmp%27#0: bytes[12] = decode_bytes<bytes[12]>(reinterpret_Encoded(uint8[12])%1#0)
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 14)
        let tmp%28#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%7#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%17#0, tmp%18#0, tmp%19#0, tmp%20#0, tmp%21#0, tmp%22#0, tmp%23#0, tmp%24#0, reinterpret_Encoded(uint64,(len+uint8[]))%0#0, tmp%25#0, reinterpret_Encoded(uint8[32])%1#0, tmp%26#0, tmp%27#0, tmp%28#0)
        return 1u
    block@4: // switch_case_default_L24
        goto block@5
    block@5: // switch_case_next_L24
        goto block@10
    block@6: // bare_routing_L24
        let tmp%29#0: uint64 = (txn OnCompletion)
        switch tmp%29#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L24
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (== tmp%30#0 0u)
        (assert tmp%31#0) // can only call when creating
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L24
        goto block@9
    block@9: // switch_case_next_L24
        goto block@10
    block@10: // after_if_else_L24
        return 0u

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: string, f: Encoded(uint8[32]), g: bytes[12]) -> void:
    block@0: // L25
        _puya_lib.util.ensure_budget(1400u, 0u)
        let tmp%0#0: Encoded(uint64) = bytes_encode<uint64>(a#0)
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(a#0)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(b#0)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(b#0)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: Encoded(uint512) = bytes_encode<uint512>(c#0)
        let tmp%7#0: Encoded(uint512) = bytes_encode<uint512>(c#0)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(d#0)
        let tmp%10#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(d#0)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(e#0)
        let tmp%13#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(e#0)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: Encoded(uint64,(len+uint8[])) = bytes_encode<(uint64,(len+uint8[]))>(a#0, d#0)
        let tmp%16#0: Encoded(uint64) = bytes_encode<uint64>(a#0)
        let tmp%17#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(d#0)
        let tmp%18#0: Encoded(uint64,(len+uint8[])) = bytes_encode<(uint64,(len+uint8[]))>(tmp%16#0, tmp%17#0)
        let tmp%19#0: bool = (== tmp%15#0 tmp%18#0)
        (assert tmp%19#0)
        let tmp%20#0: Encoded(uint64,(len+uint8[])) = bytes_encode<(uint64,(len+uint8[]))>(a#0, d#0)
        let tmp%21#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(d#0)
        let tmp%22#0: Encoded(uint64,(len+uint8[])) = bytes_encode<(uint64,(len+uint8[]))>(a#0, tmp%21#0)
        let tmp%23#0: bool = (== tmp%20#0 tmp%22#0)
        (assert tmp%23#0)
        let tmp%24#0: Encoded(uint64,uint8[12]) = bytes_encode<(uint64,uint8[12])>(a#0, g#0)
        let tmp%25#0: Encoded(uint8[12]) = bytes_encode<uint8[12]>(g#0)
        let tmp%26#0: Encoded(uint64,uint8[12]) = bytes_encode<(uint64,uint8[12])>(a#0, tmp%25#0)
        let tmp%27#0: bool = (== tmp%24#0 tmp%26#0)
        (assert tmp%27#0)
        let tmp%28#0: bool = (== f#0 f#0)
        (assert tmp%28#0)
        let tmp%29#0: Encoded(uint8[12]) = bytes_encode<uint8[12]>(g#0)
        let tmp%30#0: Encoded(uint8[12]) = bytes_encode<uint8[12]>(g#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let tmp%32#0: Encoded(uint64) = bytes_encode<(uint64)>(a#0)
        let tmp%33#0: Encoded(uint64) = bytes_encode<uint64>(a#0)
        let encoded_array%0#0: Encoded(uint64[1]) = bytes_encode<uint64[1]>(tmp%33#0)
        let tmp%34#0: bool = (== tmp%32#0 encoded_array%0#0)
        (assert tmp%34#0)
        let tmp%35#0: Encoded(bool1) = bytes_encode<(bool1)>(b#0)
        let tmp%36#0: Encoded(bool8) = bytes_encode<bool8>(b#0)
        let encoded_array%1#0: Encoded(bool1[1]) = bytes_encode<bool1[1]>(tmp%36#0)
        let tmp%37#0: bool = (== tmp%35#0 encoded_array%1#0)
        (assert tmp%37#0)
        let tmp%38#0: Encoded(uint512) = bytes_encode<(uint512)>(c#0)
        let tmp%39#0: Encoded(uint512) = bytes_encode<uint512>(c#0)
        let encoded_array%2#0: Encoded(uint512[1]) = bytes_encode<uint512[1]>(tmp%39#0)
        let tmp%40#0: bool = (== tmp%38#0 encoded_array%2#0)
        (assert tmp%40#0)
        let tmp%41#0: Encoded((len+uint8[])) = bytes_encode<((len+uint8[]))>(d#0)
        let tmp%42#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(d#0)
        let encoded_array%3#0: Encoded((len+uint8[])[1]) = bytes_encode<(len+uint8[])[1]>(tmp%42#0)
        let tmp%43#0: bool = (== tmp%41#0 encoded_array%3#0)
        (assert tmp%43#0)
        let tmp%44#0: Encoded((len+utf8[])) = bytes_encode<((len+utf8[]))>(e#0)
        let tmp%45#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(e#0)
        let encoded_array%4#0: Encoded((len+utf8[])[1]) = bytes_encode<(len+utf8[])[1]>(tmp%45#0)
        let tmp%46#0: bool = (== tmp%44#0 encoded_array%4#0)
        (assert tmp%46#0)
        let tmp%47#0: Encoded(uint8[32]) = bytes_encode<(uint8[32])>(f#0)
        let encoded_array%5#0: Encoded(uint8[32][1]) = bytes_encode<uint8[32][1]>(f#0)
        let tmp%48#0: bool = (== tmp%47#0 encoded_array%5#0)
        (assert tmp%48#0)
        let tmp%49#0: Encoded(uint8[12]) = bytes_encode<(uint8[12])>(g#0)
        let tmp%50#0: Encoded(uint8[12]) = bytes_encode<uint8[12]>(g#0)
        let encoded_array%6#0: Encoded(uint8[12][1]) = bytes_encode<uint8[12][1]>(tmp%50#0)
        let tmp%51#0: bool = (== tmp%49#0 encoded_array%6#0)
        (assert tmp%51#0)
        let encoded_array%7#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(a#0)
        let tmp%52#0: Encoded(uint64) = bytes_encode<uint64>(a#0)
        let encoded_array%8#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(tmp%52#0)
        let tmp%53#0: bool = (== encoded_array%7#0 encoded_array%8#0)
        (assert tmp%53#0)
        let encoded_array%9#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(b#0)
        let tmp%54#0: Encoded(bool8) = bytes_encode<bool8>(b#0)
        let encoded_array%10#0: Encoded(len+bool1[]) = bytes_encode<(len+bool1[])>(tmp%54#0)
        let tmp%55#0: bool = (== encoded_array%9#0 encoded_array%10#0)
        (assert tmp%55#0)
        let encoded_array%11#0: Encoded(len+uint512[]) = bytes_encode<(len+uint512[])>(c#0)
        let tmp%56#0: Encoded(uint512) = bytes_encode<uint512>(c#0)
        let encoded_array%12#0: Encoded(len+uint512[]) = bytes_encode<(len+uint512[])>(tmp%56#0)
        let tmp%57#0: bool = (== encoded_array%11#0 encoded_array%12#0)
        (assert tmp%57#0)
        let encoded_array%13#0: Encoded(len+(len+uint8[])[]) = bytes_encode<(len+(len+uint8[])[])>(d#0)
        let tmp%58#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(d#0)
        let encoded_array%14#0: Encoded(len+(len+uint8[])[]) = bytes_encode<(len+(len+uint8[])[])>(tmp%58#0)
        let tmp%59#0: bool = (== encoded_array%13#0 encoded_array%14#0)
        (assert tmp%59#0)
        let encoded_array%15#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(e#0)
        let tmp%60#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(e#0)
        let encoded_array%16#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>(tmp%60#0)
        let tmp%61#0: bool = (== encoded_array%15#0 encoded_array%16#0)
        (assert tmp%61#0)
        let encoded_array%17#0: Encoded(len+uint8[32][]) = bytes_encode<(len+uint8[32][])>(f#0)
        let encoded_array%18#0: Encoded(len+uint8[32][]) = bytes_encode<(len+uint8[32][])>(f#0)
        let tmp%62#0: bool = (== encoded_array%17#0 encoded_array%18#0)
        (assert tmp%62#0)
        let encoded_array%19#0: Encoded(len+uint8[12][]) = bytes_encode<(len+uint8[12][])>(g#0)
        let tmp%63#0: Encoded(uint8[12]) = bytes_encode<uint8[12]>(g#0)
        let encoded_array%20#0: Encoded(len+uint8[12][]) = bytes_encode<(len+uint8[12][])>(tmp%63#0)
        let tmp%64#0: bool = (== encoded_array%19#0 encoded_array%20#0)
        (assert tmp%64#0)
        let tmp%65#0: bool = (== 8u 8u)
        (assert tmp%65#0)
        let tmp%66#0: bool = (== 1u 1u)
        (assert tmp%66#0)
        let tmp%67#0: bool = (== 64u 64u)
        (assert tmp%67#0)
        let tmp%68#0: bool = (== 17u 17u)
        (assert tmp%68#0)
        let tmp%69#0: bool = (== 17u 17u)
        (assert tmp%69#0)
        let tmp%70#0: bool = (== 3u 3u)
        (assert tmp%70#0)
        let tmp%71#0: bool = (== 3u 3u)
        (assert tmp%71#0)
        let tmp%72#0: bool = (== 12u 12u)
        (assert tmp%72#0)
        let tmp%73#0: bool = (== 20u 20u)
        (assert tmp%73#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: string, d_bytes: bytes, e: Encoded(uint64,(len+uint8[])), e_bytes: bytes, f: Encoded(uint8[32]), f_bytes: bytes, g: bytes[12], g_bytes: bytes) -> void:
    block@0: // L65
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = a_bytes#0
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = b_bytes#0
        let tmp%2#0: bool = decode_bytes<bool>(reinterpret_Encoded(bool8)%0#0)
        let tmp%3#0: bool = (== tmp%2#0 b#0)
        (assert tmp%3#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = c_bytes#0
        let tmp%4#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let tmp%5#0: bool = (b== tmp%4#0 c#0)
        (assert tmp%5#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = d_bytes#0
        let tmp%6#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%7#0: bool = (== tmp%6#0 d#0)
        (assert tmp%7#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = e_bytes#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,(len+uint8[]))%0#0, 0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(e#0, 0)
        let tmp%8#0: bool = (== tuple_item%0#0 tuple_item%1#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%1#0: Encoded(uint64,(len+uint8[])) = e_bytes#0
        let tuple_item%2#0: Encoded(len+uint8[]) = extract_value(reinterpret_Encoded(uint64,(len+uint8[]))%1#0, 1)
        let tuple_item%3#0: Encoded(len+uint8[]) = extract_value(e#0, 1)
        let tmp%9#0: bool = (== tuple_item%2#0 tuple_item%3#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // assert target is match for conditions
        let tmp%11#0: bytes[8] = (itob 1u)
        let length%0#0: uint64 = (len tmp%11#0)
        let is_out_of_bounds%0#0: bool = (>= 6u length%0#0)
        let bounded_index%0#0: uint64 = (select 6u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 8u length%0#0)
        let bounded_index%1#0: uint64 = (select 8u length%0#0 is_out_of_bounds%1#0)
        let tmp%12#0: bytes = (substring3 tmp%11#0 bounded_index%0#0 bounded_index%1#0)
        let lenPrefix#0: bytes = tmp%12#0
        let tmp%13#0: bytes[8] = (itob 2u)
        let length%1#0: uint64 = (len tmp%13#0)
        let is_out_of_bounds%2#0: bool = (>= 6u length%1#0)
        let bounded_index%2#0: uint64 = (select 6u length%1#0 is_out_of_bounds%2#0)
        let is_out_of_bounds%3#0: bool = (>= 8u length%1#0)
        let bounded_index%3#0: uint64 = (select 8u length%1#0 is_out_of_bounds%3#0)
        let tmp%14#0: bytes = (substring3 tmp%13#0 bounded_index%2#0 bounded_index%3#0)
        let offsetHeader#0: bytes = tmp%14#0
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat lenPrefix#0 a_bytes#0)
        let tmp%15#0: uint64 = array_len(reinterpret_Encoded(len+uint64[])%0#0)
        let tmp%16#0: bool = (== tmp%15#0 1u)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (concat lenPrefix#0 a_bytes#0)
        let array_item%0#0: Encoded(uint64) = extract_value(reinterpret_Encoded(len+uint64[])%1#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%17#0: bool = (== values%0#0 a#0)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        (assert tmp%18#0) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat lenPrefix#0 b_bytes#0)
        let tmp%19#0: uint64 = array_len(reinterpret_Encoded(len+bool1[])%0#0)
        let tmp%20#0: bool = (== tmp%19#0 1u)
        let reinterpret_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = (concat lenPrefix#0 b_bytes#0)
        let array_item%1#0: bool = extract_value(reinterpret_Encoded(len+bool1[])%1#0, 0u)
        let values%1#0: bool = decode_bytes<bool>(array_item%1#0)
        let tmp%21#0: bool = (== values%1#0 b#0)
        let tmp%22#0: bool = (&& tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // Array of boolean matches
        let tmp%23#0: bytes = (concat lenPrefix#0 c_bytes#0)
        (log tmp%23#0)
        let reinterpret_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = (concat lenPrefix#0 c_bytes#0)
        let tmp%24#0: uint64 = array_len(reinterpret_Encoded(len+uint512[])%0#0)
        let tmp%25#0: bool = (== tmp%24#0 1u)
        let reinterpret_Encoded(len+uint512[])%1#0: Encoded(len+uint512[]) = (concat lenPrefix#0 c_bytes#0)
        let array_item%2#0: Encoded(uint512) = extract_value(reinterpret_Encoded(len+uint512[])%1#0, 0u)
        let values%2#0: biguint = decode_bytes<biguint>(array_item%2#0)
        let tmp%26#0: bool = (b== values%2#0 c#0)
        let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // Array of biguint matches
        let tmp%28#0: bytes = (concat "" lenPrefix#0)
        let tmp%29#0: bytes = (concat tmp%28#0 offsetHeader#0)
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat tmp%29#0 d_bytes#0)
        let tmp%30#0: uint64 = array_len(reinterpret_Encoded(len+(len+utf8[])[])%0#0)
        let tmp%31#0: bool = (== tmp%30#0 1u)
        let tmp%32#0: bytes = (concat "" lenPrefix#0)
        let tmp%33#0: bytes = (concat tmp%32#0 offsetHeader#0)
        let reinterpret_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = (concat tmp%33#0 d_bytes#0)
        let array_item%3#0: Encoded(len+utf8[]) = extract_value(reinterpret_Encoded(len+(len+utf8[])[])%1#0, 0u)
        let values%3#0: string = decode_bytes<string>(array_item%3#0)
        let tmp%34#0: bool = (== values%3#0 d#0)
        let tmp%35#0: bool = (&& tmp%31#0 tmp%34#0)
        (assert tmp%35#0) // Array of string matches
        let tmp%36#0: bytes = (concat "" lenPrefix#0)
        let tmp%37#0: bytes = (concat tmp%36#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat tmp%37#0 e_bytes#0)
        let tmp%38#0: uint64 = array_len(reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0)
        let tmp%39#0: bool = (== tmp%38#0 1u)
        let tmp%40#0: bytes = (concat "" lenPrefix#0)
        let tmp%41#0: bytes = (concat tmp%40#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%1#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat tmp%41#0 e_bytes#0)
        let array_item%4#0: Encoded(uint64,(len+uint8[])) = extract_value(reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%1#0, 0u)
        let tuple_item%4#0: Encoded(uint64) = extract_value(array_item%4#0, 0)
        let tuple_item%5#0: Encoded(uint64) = extract_value(e#0, 0)
        let tmp%42#0: bool = (== tuple_item%4#0 tuple_item%5#0)
        let tmp%43#0: bytes = (concat "" lenPrefix#0)
        let tmp%44#0: bytes = (concat tmp%43#0 offsetHeader#0)
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%2#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat tmp%44#0 e_bytes#0)
        let array_item%5#0: Encoded(uint64,(len+uint8[])) = extract_value(reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%2#0, 0u)
        let tuple_item%6#0: Encoded(len+uint8[]) = extract_value(array_item%5#0, 1)
        let tuple_item%7#0: Encoded(len+uint8[]) = extract_value(e#0, 1)
        let tmp%45#0: bool = (== tuple_item%6#0 tuple_item%7#0)
        let tmp%46#0: bool = (&& tmp%42#0 tmp%45#0)
        let tmp%47#0: bool = (&& tmp%39#0 tmp%46#0)
        (assert tmp%47#0) // Array of struct matches
        let tmp%48#0: bytes = (concat "" lenPrefix#0)
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat tmp%48#0 f_bytes#0)
        let tmp%49#0: uint64 = array_len(reinterpret_Encoded(len+uint8[32][])%0#0)
        let tmp%50#0: bool = (== tmp%49#0 1u)
        let tmp%51#0: bytes = (concat "" lenPrefix#0)
        let reinterpret_Encoded(len+uint8[32][])%1#0: Encoded(len+uint8[32][]) = (concat tmp%51#0 f_bytes#0)
        let array_item%6#0: Encoded(uint8[32]) = extract_value(reinterpret_Encoded(len+uint8[32][])%1#0, 0u)
        let tmp%52#0: bool = (== array_item%6#0 f#0)
        let tmp%53#0: bool = (&& tmp%50#0 tmp%52#0)
        (assert tmp%53#0) // Array of address matches
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = g_bytes#0
        let tmp%54#0: bytes[12] = decode_bytes<bytes[12]>(reinterpret_Encoded(uint8[12])%0#0)
        let tmp%55#0: bool = (== tmp%54#0 g#0)
        (assert tmp%55#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate() -> void:
    block@0: // L24
        return 