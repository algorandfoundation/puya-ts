main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L24
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@4, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@5, * => block@8}
    block@4: // testEncoding_route_L25
        let tmp%0#4: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#4)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let a#1: uint64 = (btoi tmp%0#4)
        let tmp%2#3: bytes = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len tmp%2#3)
        let eq%1#1: bool = (== len%1#1 1u)
        (assert eq%1#1) // invalid number of bytes for arc4.bool
        let b#1: bool = (getbit tmp%2#3 0u)
        let c#1: biguint = (txna ApplicationArgs 3)
        let len%2#1: uint64 = (len c#1)
        let eq%2#1: bool = (== len%2#1 64u)
        (assert eq%2#1) // invalid number of bytes for arc4.uint512
        let tmp%6#3: bytes = (txna ApplicationArgs 4)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%6#3 0u) // on error: invalid array length header
        let add%0#1: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%3#1: uint64 = (len tmp%6#3)
        let eq%3#1: bool = (== len%3#1 add%0#1)
        (assert eq%3#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let d#1: bytes = ((extract 2 0) tmp%6#3)
        let tmp%8#3: bytes = (txna ApplicationArgs 5)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%8#3 0u) // on error: invalid array length header
        let add%1#1: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%4#1: uint64 = (len tmp%8#3)
        let eq%4#1: bool = (== len%4#1 add%1#1)
        (assert eq%4#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let e#1: string = ((extract 2 0) tmp%8#3)
        let f#1: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let len%5#1: uint64 = (len f#1)
        let eq%5#1: bool = (== len%5#1 32u)
        (assert eq%5#1) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let g#1: bytes[12] = (txna ApplicationArgs 7)
        let len%6#1: uint64 = (len g#1)
        let eq%6#1: bool = (== len%6#1 12u)
        (assert eq%6#1) // invalid number of bytes for arc4.static_array<arc4.uint8, 12>
        goto block@11
    block@11: // while_top_L20
        let tmp%1#3: uint64 = (global OpcodeBudget)
        let tmp%2#5: bool = (> 1410u tmp%1#3)
        goto tmp%2#5 ? block@12 : block@16
    block@12: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@11
    block@16: // after_while_L20
        let aggregate%len_ok%0#0: bool = (<= len%2#1 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#1)
        let aggregate%length%0#0: uint64 = (len d#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 d#1)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 0x000a)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_value%0#0)
        let aggregate%head%3#0: bytes = (concat tmp%0#4 0x000a)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 tmp%6#3)
        let tmp%19#2: bool = (== aggregate%concat%0#0 aggregate%concat%1#0)
        (assert tmp%19#2)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%1#0 tmp%6#3)
        let tmp%23#2: bool = (== aggregate%concat%0#0 aggregate%concat%2#0)
        (assert tmp%23#2)
        let tmp%34#1: bool = (== aggregate%val_as_bytes%0#0 tmp%0#4)
        (assert tmp%34#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u b#1)
        let tmp%37#1: bool = (== aggregate%encoded_bool%0#0 tmp%2#3)
        (assert tmp%37#1)
        let aggregate%concat%3#0: bytes = (concat 0x0002 aggregate%encoded_value%0#0)
        let aggregate%concat%4#0: bytes = (concat 0x0002 tmp%6#3)
        let tmp%43#1: bool = (== aggregate%concat%3#0 aggregate%concat%4#0)
        (assert tmp%43#1)
        let aggregate%length%5#0: uint64 = (len e#1)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 e#1)
        let aggregate%concat%5#0: bytes = (concat 0x0002 aggregate%encoded_value%2#0)
        let aggregate%concat%6#0: bytes = (concat 0x0002 tmp%8#3)
        let tmp%46#1: bool = (== aggregate%concat%5#0 aggregate%concat%6#0)
        (assert tmp%46#1)
        let aggregate%head%24#0: bytes = (concat 0x0001 aggregate%val_as_bytes%0#0)
        let aggregate%head%25#0: bytes = (concat 0x0001 tmp%0#4)
        let tmp%53#1: bool = (== aggregate%head%24#0 aggregate%head%25#0)
        (assert tmp%53#1)
        let aggregate%head%26#0: bytes = (concat 0x0001 aggregate%encoded_bool%0#0)
        let aggregate%head%27#0: bytes = (concat 0x0001 tmp%2#3)
        let tmp%55#1: bool = (== aggregate%head%26#0 aggregate%head%27#0)
        (assert tmp%55#1)
        let aggregate%concat%7#0: bytes = (concat 0x00010002 aggregate%encoded_value%0#0)
        let aggregate%concat%8#0: bytes = (concat 0x00010002 tmp%6#3)
        let tmp%59#0: bool = (== aggregate%concat%7#0 aggregate%concat%8#0)
        (assert tmp%59#0)
        let aggregate%concat%9#0: bytes = (concat 0x00010002 aggregate%encoded_value%2#0)
        let aggregate%concat%10#0: bytes = (concat 0x00010002 tmp%8#3)
        let tmp%61#0: bool = (== aggregate%concat%9#0 aggregate%concat%10#0)
        (assert tmp%61#0)
        exit 1u
    block@5: // testDecoding_route_L65
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let a#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%2#1 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%2#0 2u)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let a_bytes#0: bytes = ((extract 2 0) tmp%2#1)
        let tmp%4#1: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#1)
        let eq%2#0: bool = (== len%2#0 1u)
        (assert eq%2#0) // invalid number of bytes for arc4.bool
        let b#0: bool = (getbit tmp%4#1 0u)
        let tmp%6#1: bytes = (txna ApplicationArgs 4)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 tmp%6#1 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%3#0 2u)
        let len%3#0: uint64 = (len tmp%6#1)
        let eq%3#0: bool = (== len%3#0 add%1#0)
        (assert eq%3#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let b_bytes#0: bytes = ((extract 2 0) tmp%6#1)
        let c#0: biguint = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len c#0)
        let eq%4#0: bool = (== len%4#0 64u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint512
        let tmp%10#1: bytes = (txna ApplicationArgs 6)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 tmp%10#1 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%4#0 2u)
        let len%5#0: uint64 = (len tmp%10#1)
        let eq%5#0: bool = (== len%5#0 add%2#0)
        (assert eq%5#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let c_bytes#0: bytes = ((extract 2 0) tmp%10#1)
        let tmp%12#0: bytes = (txna ApplicationArgs 7)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 tmp%12#0 0u) // on error: invalid array length header
        let add%3#0: uint64 = (+ aggregate%array_length%5#0 2u)
        let len%6#0: uint64 = (len tmp%12#0)
        let eq%6#0: bool = (== len%6#0 add%3#0)
        (assert eq%6#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let d#0: string = ((extract 2 0) tmp%12#0)
        let tmp%14#0: bytes = (txna ApplicationArgs 8)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 tmp%14#0 0u) // on error: invalid array length header
        let add%4#0: uint64 = (+ aggregate%array_length%6#0 2u)
        let len%7#0: uint64 = (len tmp%14#0)
        let eq%7#0: bool = (== len%7#0 add%4#0)
        (assert eq%7#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let d_bytes#0: bytes = ((extract 2 0) tmp%14#0)
        let e#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let tuple_len%0#0: uint64 = (len e#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 e#0 8u) // on error: invalid tuple encoding
        let eq%8#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%8#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]))
        let substring3%0#0: bytes = (substring3 e#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let add%6#0: uint64 = (+ aggregate%array_length%7#0 12u)
        let eq%9#0: bool = (== tuple_len%0#0 add%6#0)
        (assert eq%9#0) // invalid number of bytes for tests/approvals/arc4-encode-decode.algo.ts::TestObj
        let tmp%17#0: bytes = (txna ApplicationArgs 10)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 tmp%17#0 0u) // on error: invalid array length header
        let add%7#0: uint64 = (+ aggregate%array_length%8#0 2u)
        let len%9#0: uint64 = (len tmp%17#0)
        let eq%10#0: bool = (== len%9#0 add%7#0)
        (assert eq%10#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let e_bytes#0: bytes = ((extract 2 0) tmp%17#0)
        let f#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let len%10#0: uint64 = (len f#0)
        let eq%11#0: bool = (== len%10#0 32u)
        (assert eq%11#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%20#0: bytes = (txna ApplicationArgs 12)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 tmp%20#0 0u) // on error: invalid array length header
        let add%8#0: uint64 = (+ aggregate%array_length%9#0 2u)
        let len%11#0: uint64 = (len tmp%20#0)
        let eq%12#0: bool = (== len%11#0 add%8#0)
        (assert eq%12#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let f_bytes#0: bytes = ((extract 2 0) tmp%20#0)
        let g#0: bytes[12] = (txna ApplicationArgs 13)
        let len%12#0: uint64 = (len g#0)
        let eq%13#0: bool = (== len%12#0 12u)
        (assert eq%13#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 12>
        let tmp%24#0: bytes = (txna ApplicationArgs 14)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 tmp%24#0 0u) // on error: invalid array length header
        let add%9#0: uint64 = (+ aggregate%array_length%10#0 2u)
        let len%13#0: uint64 = (len tmp%24#0)
        let eq%14#0: bool = (== len%13#0 add%9#0)
        (assert eq%14#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let g_bytes#0: bytes = ((extract 2 0) tmp%24#0)
        let tmp%0#3: uint64 = (btoi a_bytes#0)
        let tmp%1#2: bool = (== tmp%0#3 a#0)
        (assert tmp%1#2)
        let aggregate%get_bit%2#0: bool = (getbit b_bytes#0 0u)
        let tmp%3#2: bool = (== aggregate%get_bit%2#0 b#0)
        (assert tmp%3#2)
        let tmp%5#2: bool = (b== c_bytes#0 c#0)
        (assert tmp%5#2)
        let tmp%6#2: string = ((extract 4 0) tmp%14#0)
        let tmp%7#2: bool = (== tmp%6#2 d#0)
        (assert tmp%7#2)
        let aggregate%extract%0#0: bytes = ((extract 2 8) tmp%17#0)
        let aggregate%extract%1#0: bytes = ((extract 0 8) e#0)
        let tmp%8#2: bool = (== aggregate%extract%0#0 aggregate%extract%1#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 e_bytes#0 8u)
        let aggregate%len%0#0: uint64 = (len e_bytes#0)
        let aggregate%substring3%0#0: bytes = (substring3 e_bytes#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%9#2: bool = (== aggregate%substring3%0#0 substring3%0#0)
        let tmp%10#2: bool = (&& tmp%8#2 tmp%9#2)
        (assert tmp%10#2) // assert target is match for conditions
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat 0x0001 a_bytes#0)
        let aggregate%array_length%11#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint64[])%0#0 0u) // on error: invalid array length header
        let tmp%16#1: bool = (== aggregate%array_length%11#0 1u)
        let values%0#0: uint64 = (extract_uint64 reinterpret_Encoded(len+uint64[])%0#0 2u)
        let tmp%17#1: bool = (== values%0#0 a#0)
        let tmp%18#1: bool = (&& tmp%16#1 tmp%17#1)
        (assert tmp%18#1) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat 0x0001 b_bytes#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u) // on error: invalid array length header
        let tmp%20#1: bool = (== aggregate%array_length%12#0 1u)
        (assert aggregate%array_length%12#0) // index access is out of bounds
        let aggregate%get_bit%3#0: bool = (getbit reinterpret_Encoded(len+bool1[])%0#0 16u)
        let tmp%21#1: bool = (== aggregate%get_bit%3#0 b#0)
        let tmp%22#1: bool = (&& tmp%20#1 tmp%21#1)
        (assert tmp%22#1) // Array of boolean matches
        let tmp%23#1: bytes = (concat 0x0001 c_bytes#0)
        (log tmp%23#1)
        let aggregate%array_length%14#0: uint64 = (extract_uint16 tmp%23#1 0u) // on error: invalid array length header
        let tmp%25#1: bool = (== aggregate%array_length%14#0 1u)
        let aggregate%encoded_element%1#0: bytes = ((extract 2 64) tmp%23#1)
        let tmp%26#0: bool = (b== aggregate%encoded_element%1#0 c#0)
        let tmp%27#0: bool = (&& tmp%25#1 tmp%26#0)
        (assert tmp%27#0) // Array of biguint matches
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat 0x00010002 d_bytes#0)
        let aggregate%array_length%15#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%0#0 0u) // on error: invalid array length header
        let tmp%31#0: bool = (== aggregate%array_length%15#0 1u)
        let aggregate%array_head_and_tail%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+(len+utf8[])[])%0#0)
        (assert aggregate%array_length%15#0) // index access is out of bounds
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 0u)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let values%3#0: string = ((extract 2 0) aggregate%item%0#0)
        let tmp%34#0: bool = (== values%3#0 d#0)
        let tmp%35#0: bool = (&& tmp%31#0 tmp%34#0)
        (assert tmp%35#0) // Array of string matches
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat 0x00010002 e_bytes#0)
        let aggregate%array_length%17#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u) // on error: invalid array length header
        let tmp%39#0: bool = (== aggregate%array_length%17#0 1u)
        let aggregate%array_head_and_tail%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 0u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%17#0 1u) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 2u)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%0#0)
        let aggregate%extract%2#0: bytes = ((extract 0 8) aggregate%substring3%2#0)
        let tmp%42#0: bool = (== aggregate%extract%2#0 aggregate%extract%1#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 aggregate%substring3%2#0 8u)
        let aggregate%len%2#0: uint64 = (len aggregate%substring3%2#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%substring3%2#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tmp%45#0: bool = (== aggregate%substring3%4#0 substring3%0#0)
        let tmp%46#0: bool = (&& tmp%42#0 tmp%45#0)
        let tmp%47#0: bool = (&& tmp%39#0 tmp%46#0)
        (assert tmp%47#0) // Array of struct matches
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat 0x0001 f_bytes#0)
        let aggregate%array_length%20#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[32][])%0#0 0u) // on error: invalid array length header
        let tmp%50#0: bool = (== aggregate%array_length%20#0 1u)
        let aggregate%encoded_element%2#0: bytes = ((extract 2 32) reinterpret_Encoded(len+uint8[32][])%0#0)
        let tmp%52#0: bool = (== aggregate%encoded_element%2#0 f#0)
        let tmp%53#0: bool = (&& tmp%50#0 tmp%52#0)
        (assert tmp%53#0) // Array of address matches
        let tmp%55#0: bool = (== g_bytes#0 g#0)
        (assert tmp%55#0)
        exit 1u
    block@8: // after_if_else_L24
        fail
    block@9: // __algots__.defaultCreate_L24
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u