main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@3, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@4, * => block@11}
    block@3: // testEncoding_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#1: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let b#1: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let c#1: biguint = (txna ApplicationArgs 3)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let d#1: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let e#1: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let g#1: bytes[12] = (txna ApplicationArgs 7)
        goto block@18
    block@18: // while_top_L20
        let tmp%1#3: uint64 = (global OpcodeBudget)
        let tmp%2#3: bool = (> 1410u tmp%1#3)
        goto tmp%2#3 ? block@19 : block@21
    block@19: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@18
    block@21: // after_while_L20
        let aggregate%value_len%0#1: uint64 = (len c#1)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a#1)
        let aggregate%length%0#1: uint64 = (len d#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 d#1)
        let aggregate%head%1#1: bytes = (concat aggregate%val_as_bytes%0#1 0x000a)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%1#1 aggregate%encoded_value%0#1)
        let aggregate%head%3#1: bytes = (concat reinterpret_Encoded(uint64)%0#0 0x000a)
        let aggregate%concat%1#1: bytes = (concat aggregate%head%3#1 reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%19#1: bool = (== aggregate%concat%0#1 aggregate%concat%1#1)
        (assert tmp%19#1)
        let aggregate%concat%2#1: bytes = (concat aggregate%head%1#1 reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%23#2: bool = (== aggregate%concat%0#1 aggregate%concat%2#1)
        (assert tmp%23#2)
        let aggregate%length%1#1: uint64 = (len g#1)
        let aggregate%lengths_equal%0#1: bool = (== aggregate%length%1#1 12u)
        (assert aggregate%lengths_equal%0#1) // invalid size
        let tmp%34#1: bool = (== aggregate%val_as_bytes%0#1 reinterpret_Encoded(uint64)%0#0)
        (assert tmp%34#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u b#1)
        let tmp%37#1: bool = (== aggregate%encoded_bool%0#1 reinterpret_Encoded(bool8)%0#0)
        (assert tmp%37#1)
        let aggregate%concat%3#1: bytes = (concat 0x0002 aggregate%encoded_value%0#1)
        let aggregate%concat%4#1: bytes = (concat 0x0002 reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%43#1: bool = (== aggregate%concat%3#1 aggregate%concat%4#1)
        (assert tmp%43#1)
        let aggregate%length%5#1: uint64 = (len e#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 e#1)
        let aggregate%concat%5#1: bytes = (concat 0x0002 aggregate%encoded_value%2#1)
        let aggregate%concat%6#1: bytes = (concat 0x0002 reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%46#1: bool = (== aggregate%concat%5#1 aggregate%concat%6#1)
        (assert tmp%46#1)
        let aggregate%head%24#1: bytes = (concat 0x0001 aggregate%val_as_bytes%0#1)
        let aggregate%head%25#1: bytes = (concat 0x0001 reinterpret_Encoded(uint64)%0#0)
        let tmp%54#1: bool = (== aggregate%head%24#1 aggregate%head%25#1)
        (assert tmp%54#1)
        let aggregate%head%26#1: bytes = (concat 0x0001 aggregate%encoded_bool%0#1)
        let aggregate%head%27#1: bytes = (concat 0x0001 reinterpret_Encoded(bool8)%0#0)
        let tmp%57#1: bool = (== aggregate%head%26#1 aggregate%head%27#1)
        (assert tmp%57#1)
        let aggregate%concat%7#1: bytes = (concat 0x00010002 aggregate%encoded_value%0#1)
        let aggregate%concat%8#1: bytes = (concat 0x00010002 reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%63#1: bool = (== aggregate%concat%7#1 aggregate%concat%8#1)
        (assert tmp%63#1)
        let aggregate%concat%9#1: bytes = (concat 0x00010002 aggregate%encoded_value%2#1)
        let aggregate%concat%10#1: bytes = (concat 0x00010002 reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%66#0: bool = (== aggregate%concat%9#1 aggregate%concat%10#1)
        (assert tmp%66#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testDecoding_route_L69
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let a_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(bool8)%1#0: Encoded(bool8) = (txna ApplicationArgs 3)
        let b#0: bool = (getbit reinterpret_Encoded(bool8)%1#0 0u)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let b_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let c#0: biguint = (txna ApplicationArgs 5)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let c_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 7)
        let d#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 8)
        let d_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let e#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 10)
        let e_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let f#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 12)
        let f_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        let g#0: bytes[12] = (txna ApplicationArgs 13)
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 14)
        let g_bytes#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%7#0)
        let tmp%0#2: uint64 = (btoi a_bytes#0)
        let tmp%1#1: bool = (== tmp%0#2 a#0)
        (assert tmp%1#1)
        let aggregate%get_bit%2#1: bool = (getbit b_bytes#0 0u)
        let tmp%3#1: bool = (== aggregate%get_bit%2#1 b#0)
        (assert tmp%3#1)
        let tmp%5#1: bool = (b== c_bytes#0 c#0)
        (assert tmp%5#1)
        let tmp%6#1: string = ((extract 4 0) reinterpret_Encoded(len+uint8[])%4#0)
        let tmp%7#1: bool = (== tmp%6#1 d#0)
        (assert tmp%7#1)
        let aggregate%extract%0#1: bytes = ((extract 2 8) reinterpret_Encoded(len+uint8[])%5#0)
        let aggregate%extract%1#1: bytes = ((extract 0 8) e#0)
        let tmp%9#1: bool = (== aggregate%extract%0#1 aggregate%extract%1#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 e_bytes#0 8u)
        let aggregate%len%0#1: uint64 = (len e_bytes#0)
        let aggregate%substring3%0#1: bytes = (substring3 e_bytes#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%1#1: uint64 = (len e#0)
        let aggregate%substring3%1#1: bytes = (substring3 e#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let tmp%11#1: bool = (== aggregate%substring3%0#1 aggregate%substring3%1#1)
        let tmp%12#1: bool = (&& tmp%9#1 tmp%11#1)
        (assert tmp%12#1) // assert target is match for conditions
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat 0x0001 a_bytes#0)
        let array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint64[])%0#0 0u)
        let tmp%18#1: bool = (== array_length%0#0 1u)
        let values%0#0: uint64 = (extract_uint64 reinterpret_Encoded(len+uint64[])%0#0 2u)
        let tmp%20#1: bool = (== values%0#0 a#0)
        let tmp%21#1: bool = (&& tmp%18#1 tmp%20#1)
        (assert tmp%21#1) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat 0x0001 b_bytes#0)
        let array_length%1#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u)
        let tmp%23#1: bool = (== array_length%1#0 1u)
        (assert array_length%1#0) // index access is out of bounds
        let aggregate%get_bit%3#1: uint64 = (getbit reinterpret_Encoded(len+bool1[])%0#0 16u)
        let tmp%25#1: bool = (== aggregate%get_bit%3#1 b#0)
        let tmp%26#1: bool = (&& tmp%23#1 tmp%25#1)
        (assert tmp%26#1) // Array of boolean matches
        let tmp%27#1: bytes = (concat 0x0001 c_bytes#0)
        (log tmp%27#1)
        let array_length%2#0: uint64 = (extract_uint16 tmp%27#1 0u)
        let tmp%29#1: bool = (== array_length%2#0 1u)
        let aggregate%encoded_element%1#1: bytes = ((extract 2 64) tmp%27#1)
        let tmp%31#1: bool = (b== aggregate%encoded_element%1#1 c#0)
        let tmp%32#0: bool = (&& tmp%29#1 tmp%31#1)
        (assert tmp%32#0) // Array of biguint matches
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat 0x00010002 d_bytes#0)
        let array_length%3#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%0#0 0u)
        let tmp%36#0: bool = (== array_length%3#0 1u)
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) reinterpret_Encoded(len+(len+utf8[])[])%0#0)
        (assert array_length%3#0) // index access is out of bounds
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 0u)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let values%2#0: string = ((extract 2 0) aggregate%item%0#1)
        let tmp%40#0: bool = (== values%2#0 d#0)
        let tmp%41#0: bool = (&& tmp%36#0 tmp%40#0)
        (assert tmp%41#0) // Array of string matches
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat 0x00010002 e_bytes#0)
        let array_length%4#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u)
        let tmp%45#0: bool = (== array_length%4#0 1u)
        let aggregate%array_head_and_tail%1#1: bytes = ((extract 2 0) reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 0u)
        let aggregate%has_next%0#1: uint64 = (- array_length%4#0 1u) // on error: index access is out of bounds
        let aggregate%end_of_array%0#1: uint64 = (len aggregate%array_head_and_tail%1#1)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 2u)
        let aggregate%end_offset%0#1: uint64 = (select aggregate%end_of_array%0#1 aggregate%next_item_offset%0#1 aggregate%has_next%0#1)
        let aggregate%substring3%2#1: bytes = (substring3 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1 aggregate%end_offset%0#1)
        let aggregate%extract%2#1: bytes = ((extract 0 8) aggregate%substring3%2#1)
        let tmp%49#0: bool = (== aggregate%extract%2#1 aggregate%extract%1#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%2#1 8u)
        let aggregate%len%2#1: uint64 = (len aggregate%substring3%2#1)
        let aggregate%substring3%4#1: bytes = (substring3 aggregate%substring3%2#1 aggregate%extract_uint16%2#1 aggregate%len%2#1)
        let tmp%53#0: bool = (== aggregate%substring3%4#1 aggregate%substring3%1#1)
        let tmp%54#0: bool = (&& tmp%49#0 tmp%53#0)
        let tmp%55#0: bool = (&& tmp%45#0 tmp%54#0)
        (assert tmp%55#0) // Array of struct matches
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat 0x0001 f_bytes#0)
        let array_length%5#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[32][])%0#0 0u)
        let tmp%58#0: bool = (== array_length%5#0 1u)
        let aggregate%encoded_element%2#1: bytes = ((extract 2 32) reinterpret_Encoded(len+uint8[32][])%0#0)
        let tmp%61#0: bool = (== aggregate%encoded_element%2#1 f#0)
        let tmp%62#0: bool = (&& tmp%58#0 tmp%61#0)
        (assert tmp%62#0) // Array of address matches
        let tmp%64#0: bool = (== g_bytes#0 g#0)
        (assert tmp%64#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L24
        let tmp%29#0: uint64 = (txn OnCompletion)
        goto tmp%29#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L24
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // can only call when creating
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L24
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0 <- block@21, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2 <- block@8, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0