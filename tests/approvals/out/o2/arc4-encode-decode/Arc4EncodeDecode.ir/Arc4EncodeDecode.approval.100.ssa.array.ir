main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L24
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@4, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@5, * => block@8}
    block@4: // testEncoding_route_L25
        let tmp%0#4: bytes = (txna ApplicationArgs 1)
        let len%0#1: uint64 = (len tmp%0#4)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let a#1: uint64 = (btoi tmp%0#4)
        let tmp%2#3: bytes = (txna ApplicationArgs 2)
        let len%1#1: uint64 = (len tmp%2#3)
        let eq%1#1: bool = (== len%1#1 1u)
        (assert eq%1#1) // invalid number of bytes for arc4.bool
        let aggregate%get_bit%0#0: bool = (getbit tmp%2#3 0u)
        let b#1: bool = aggregate%get_bit%0#0
        let tmp%4#3: bytes = (txna ApplicationArgs 3)
        let len%2#1: uint64 = (len tmp%4#3)
        let eq%2#1: bool = (== len%2#1 64u)
        (assert eq%2#1) // invalid number of bytes for arc4.uint512
        let c#1: biguint = tmp%4#3
        let tmp%6#3: bytes = (txna ApplicationArgs 4)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%6#3 0u) // on error: invalid array length header
        let length%0#2: uint64 = aggregate%array_length%0#0
        let add%0#1: uint64 = (+ length%0#2 2u)
        let len%3#1: uint64 = (len tmp%6#3)
        let eq%3#1: bool = (== len%3#1 add%0#1)
        (assert eq%3#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let d#1: bytes = ((extract 2 0) tmp%6#3)
        let tmp%8#3: bytes = (txna ApplicationArgs 5)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%8#3 0u) // on error: invalid array length header
        let length%1#2: uint64 = aggregate%array_length%1#0
        let add%1#1: uint64 = (+ length%1#2 2u)
        let len%4#1: uint64 = (len tmp%8#3)
        let eq%4#1: bool = (== len%4#1 add%1#1)
        (assert eq%4#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let e#1: string = ((extract 2 0) tmp%8#3)
        let f#1: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let len%5#1: uint64 = (len f#1)
        let eq%5#1: bool = (== len%5#1 32u)
        (assert eq%5#1) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%11#3: bytes = (txna ApplicationArgs 7)
        let len%6#1: uint64 = (len tmp%11#3)
        let eq%6#1: bool = (== len%6#1 12u)
        (assert eq%6#1) // invalid number of bytes for arc4.static_array<arc4.uint8, 12>
        let g#1: bytes[12] = tmp%11#3
        goto block@11
    block@11: // while_top_L20
        let tmp%1#3: uint64 = (global OpcodeBudget)
        let tmp%2#5: bool = (> 1410u tmp%1#3)
        goto tmp%2#5 ? block@12 : block@16
    block@12: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@11
    block@16: // after_while_L20
        let aggregate%value_len%0#0: uint64 = (len c#1)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| c#1 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let tmp%6#4: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len d#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 d#1)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 10u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%0#0
        let tmp%15#2: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%0#0
        let aggregate%head%2#0: bytes = (concat 0x tmp%0#4)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%6#3)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 10u aggregate%data_length%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 tmp%6#3)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%1#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%1#0
        let tmp%18#2: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%1#0
        let tmp%19#2: bool = (== tmp%15#2 tmp%18#2)
        (assert tmp%19#2)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob a#1)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%6#3)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 10u aggregate%data_length%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 tmp%6#3)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%2#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%2#0
        let tmp%22#2: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%2#0
        let tmp%23#2: bool = (== tmp%15#2 tmp%22#2)
        (assert tmp%23#2)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob a#1)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%length%1#0: uint64 = (len g#1)
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%1#0 12u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = g#1
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint8[12])%0#0)
        let aggregate%as_Encoded(uint64,uint8[12])%0#0: Encoded(uint64,uint8[12]) = aggregate%head%7#0
        let tmp%24#2: Encoded(uint64,uint8[12]) = aggregate%as_Encoded(uint64,uint8[12])%0#0
        let aggregate%length%2#0: uint64 = (len g#1)
        let aggregate%lengths_equal%1#0: bool = (== aggregate%length%2#0 12u)
        (assert aggregate%lengths_equal%1#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = g#1
        let tmp%25#2: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%1#0
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob a#1)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 tmp%25#2)
        let aggregate%as_Encoded(uint64,uint8[12])%1#0: Encoded(uint64,uint8[12]) = aggregate%head%9#0
        let tmp%26#1: Encoded(uint64,uint8[12]) = aggregate%as_Encoded(uint64,uint8[12])%1#0
        let tmp%27#1: bool = (== tmp%24#2 tmp%26#1)
        (assert tmp%27#1)
        let aggregate%length%3#0: uint64 = (len g#1)
        let aggregate%lengths_equal%2#0: bool = (== aggregate%length%3#0 12u)
        (assert aggregate%lengths_equal%2#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%2#0: Encoded(uint8[12]) = g#1
        let tmp%29#1: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%2#0
        let tmp%31#1: bool = (== tmp%29#1 tmp%25#2)
        (assert tmp%31#1)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob a#1)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%10#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%head%10#0
        let tmp%32#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#0
        let aggregate%head%11#0: bytes = (concat 0x tmp%0#4)
        let aggregate%as_Encoded(uint64[1])%0#0: Encoded(uint64[1]) = aggregate%head%11#0
        let encoded_array%0#0: Encoded(uint64[1]) = aggregate%as_Encoded(uint64[1])%0#0
        let tmp%34#1: bool = (== tmp%32#1 encoded_array%0#0)
        (assert tmp%34#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u b#1)
        let aggregate%head%12#0: bytes = (concat 0x aggregate%encoded_bool%0#0)
        let aggregate%as_Encoded(bool1)%0#0: Encoded(bool1) = aggregate%head%12#0
        let tmp%35#1: Encoded(bool1) = aggregate%as_Encoded(bool1)%0#0
        let aggregate%head%13#0: bytes = (concat 0x tmp%2#3)
        let aggregate%as_Encoded(bool1[1])%0#0: Encoded(bool1[1]) = aggregate%head%13#0
        let encoded_array%1#0: Encoded(bool1[1]) = aggregate%as_Encoded(bool1[1])%0#0
        let tmp%37#1: bool = (== tmp%35#1 encoded_array%1#0)
        (assert tmp%37#1)
        let aggregate%value_len%1#0: uint64 = (len c#1)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| c#1 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let aggregate%head%14#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%1#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%head%14#0
        let tmp%38#1: Encoded(uint512) = aggregate%as_Encoded(uint512)%2#0
        let aggregate%head%15#0: bytes = (concat 0x tmp%6#4)
        let aggregate%as_Encoded(uint512[1])%0#0: Encoded(uint512[1]) = aggregate%head%15#0
        let encoded_array%2#0: Encoded(uint512[1]) = aggregate%as_Encoded(uint512[1])%0#0
        let tmp%40#1: bool = (== tmp%38#1 encoded_array%2#0)
        (assert tmp%40#1)
        let aggregate%length%4#0: uint64 = (len d#1)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 d#1)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%16#0: bytes = (concat 0x aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ 2u aggregate%data_length%3#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%16#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%as_Encoded((len+uint8[]))%0#0: Encoded((len+uint8[])) = aggregate%concat%3#0
        let tmp%41#1: Encoded((len+uint8[])) = aggregate%as_Encoded((len+uint8[]))%0#0
        let aggregate%as_bytes%6#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%17#0: bytes = (concat 0x aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len tmp%6#3)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 2u aggregate%data_length%4#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%17#0 tmp%6#3)
        let aggregate%as_Encoded((len+uint8[])[1])%0#0: Encoded((len+uint8[])[1]) = aggregate%concat%4#0
        let encoded_array%3#0: Encoded((len+uint8[])[1]) = aggregate%as_Encoded((len+uint8[])[1])%0#0
        let tmp%43#1: bool = (== tmp%41#1 encoded_array%3#0)
        (assert tmp%43#1)
        let aggregate%length%5#0: uint64 = (len e#1)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 e#1)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let aggregate%as_bytes%8#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%18#0: bytes = (concat 0x aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ 2u aggregate%data_length%5#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%head%18#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded((len+utf8[]))%0#0: Encoded((len+utf8[])) = aggregate%concat%5#0
        let tmp%44#1: Encoded((len+utf8[])) = aggregate%as_Encoded((len+utf8[]))%0#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%19#0: bytes = (concat 0x aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len tmp%8#3)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 2u aggregate%data_length%6#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%19#0 tmp%8#3)
        let aggregate%as_Encoded((len+utf8[])[1])%0#0: Encoded((len+utf8[])[1]) = aggregate%concat%6#0
        let encoded_array%4#0: Encoded((len+utf8[])[1]) = aggregate%as_Encoded((len+utf8[])[1])%0#0
        let tmp%46#1: bool = (== tmp%44#1 encoded_array%4#0)
        (assert tmp%46#1)
        let aggregate%head%20#0: bytes = (concat 0x f#1)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = aggregate%head%20#0
        let tmp%47#1: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let aggregate%head%21#0: bytes = (concat 0x f#1)
        let aggregate%as_Encoded(uint8[32][1])%0#0: Encoded(uint8[32][1]) = aggregate%head%21#0
        let encoded_array%5#0: Encoded(uint8[32][1]) = aggregate%as_Encoded(uint8[32][1])%0#0
        let tmp%48#1: bool = (== tmp%47#1 encoded_array%5#0)
        (assert tmp%48#1)
        let aggregate%length%6#0: uint64 = (len g#1)
        let aggregate%lengths_equal%3#0: bool = (== aggregate%length%6#0 12u)
        (assert aggregate%lengths_equal%3#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%3#0: Encoded(uint8[12]) = g#1
        let aggregate%head%22#0: bytes = (concat 0x aggregate%as_Encoded(uint8[12])%3#0)
        let aggregate%as_Encoded(uint8[12])%4#0: Encoded(uint8[12]) = aggregate%head%22#0
        let tmp%49#1: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%4#0
        let aggregate%head%23#0: bytes = (concat 0x tmp%25#2)
        let aggregate%as_Encoded(uint8[12][1])%0#0: Encoded(uint8[12][1]) = aggregate%head%23#0
        let encoded_array%6#0: Encoded(uint8[12][1]) = aggregate%as_Encoded(uint8[12][1])%0#0
        let tmp%51#1: bool = (== tmp%49#1 encoded_array%6#0)
        (assert tmp%51#1)
        let aggregate%as_bytes%10#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob a#1)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%24#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%24#0
        let encoded_array%7#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%as_bytes%11#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%25#0: bytes = (concat aggregate%len_u16%1#0 tmp%0#4)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%25#0
        let encoded_array%8#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let tmp%53#1: bool = (== encoded_array%7#0 encoded_array%8#0)
        (assert tmp%53#1)
        let aggregate%as_bytes%12#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u b#1)
        let aggregate%head%26#0: bytes = (concat aggregate%len_u16%2#0 aggregate%encoded_bool%1#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%26#0
        let encoded_array%9#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let aggregate%as_bytes%13#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%27#0: bytes = (concat aggregate%len_u16%3#0 tmp%2#3)
        let aggregate%as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = aggregate%head%27#0
        let encoded_array%10#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%1#0
        let tmp%55#1: bool = (== encoded_array%9#0 encoded_array%10#0)
        (assert tmp%55#1)
        let aggregate%as_bytes%14#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%value_len%2#0: uint64 = (len c#1)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| c#1 aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%3#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%28#0: bytes = (concat aggregate%len_u16%4#0 aggregate%as_Encoded(uint512)%3#0)
        let aggregate%as_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = aggregate%head%28#0
        let encoded_array%11#0: Encoded(len+uint512[]) = aggregate%as_Encoded(len+uint512[])%0#0
        let aggregate%as_bytes%15#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%head%29#0: bytes = (concat aggregate%len_u16%5#0 tmp%6#4)
        let aggregate%as_Encoded(len+uint512[])%1#0: Encoded(len+uint512[]) = aggregate%head%29#0
        let encoded_array%12#0: Encoded(len+uint512[]) = aggregate%as_Encoded(len+uint512[])%1#0
        let tmp%57#0: bool = (== encoded_array%11#0 encoded_array%12#0)
        (assert tmp%57#0)
        let aggregate%as_bytes%16#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%16#0)
        let aggregate%length%7#0: uint64 = (len d#1)
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 d#1)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let aggregate%as_bytes%18#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%head%30#0: bytes = (concat aggregate%len_u16%6#0 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ 2u aggregate%data_length%7#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%head%30#0 aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%as_Encoded(len+(len+uint8[])[])%0#0: Encoded(len+(len+uint8[])[]) = aggregate%concat%7#0
        let encoded_array%13#0: Encoded(len+(len+uint8[])[]) = aggregate%as_Encoded(len+(len+uint8[])[])%0#0
        let aggregate%as_bytes%19#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%as_bytes%20#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%20#0)
        let aggregate%head%31#0: bytes = (concat aggregate%len_u16%7#0 aggregate%offset_as_uint16%8#0)
        let aggregate%data_length%8#0: uint64 = (len tmp%6#3)
        let aggregate%current_tail_offset%8#0: uint64 = (+ 2u aggregate%data_length%8#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%head%31#0 tmp%6#3)
        let aggregate%as_Encoded(len+(len+uint8[])[])%1#0: Encoded(len+(len+uint8[])[]) = aggregate%concat%8#0
        let encoded_array%14#0: Encoded(len+(len+uint8[])[]) = aggregate%as_Encoded(len+(len+uint8[])[])%1#0
        let tmp%59#0: bool = (== encoded_array%13#0 encoded_array%14#0)
        (assert tmp%59#0)
        let aggregate%as_bytes%21#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%length%8#0: uint64 = (len e#1)
        let aggregate%as_bytes%22#0: bytes[8] = (itob aggregate%length%8#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%22#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 e#1)
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%4#0
        let aggregate%as_bytes%23#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%head%32#0: bytes = (concat aggregate%len_u16%8#0 aggregate%offset_as_uint16%9#0)
        let aggregate%data_length%9#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ 2u aggregate%data_length%9#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%head%32#0 aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%9#0
        let encoded_array%15#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let aggregate%as_bytes%24#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%24#0)
        let aggregate%as_bytes%25#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%head%33#0: bytes = (concat aggregate%len_u16%9#0 aggregate%offset_as_uint16%10#0)
        let aggregate%data_length%10#0: uint64 = (len tmp%8#3)
        let aggregate%current_tail_offset%10#0: uint64 = (+ 2u aggregate%data_length%10#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%head%33#0 tmp%8#3)
        let aggregate%as_Encoded(len+(len+utf8[])[])%1#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%10#0
        let encoded_array%16#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%1#0
        let tmp%61#0: bool = (== encoded_array%15#0 encoded_array%16#0)
        (assert tmp%61#0)
        let aggregate%as_bytes%26#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%26#0)
        let aggregate%length%9#0: uint64 = (len g#1)
        let aggregate%lengths_equal%4#0: bool = (== aggregate%length%9#0 12u)
        (assert aggregate%lengths_equal%4#0) // invalid size
        let aggregate%as_Encoded(uint8[12])%5#0: Encoded(uint8[12]) = g#1
        let aggregate%head%34#0: bytes = (concat aggregate%len_u16%10#0 aggregate%as_Encoded(uint8[12])%5#0)
        let aggregate%as_Encoded(len+uint8[12][])%0#0: Encoded(len+uint8[12][]) = aggregate%head%34#0
        let encoded_array%19#0: Encoded(len+uint8[12][]) = aggregate%as_Encoded(len+uint8[12][])%0#0
        let aggregate%as_bytes%27#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%27#0)
        let aggregate%head%35#0: bytes = (concat aggregate%len_u16%11#0 tmp%25#2)
        let aggregate%as_Encoded(len+uint8[12][])%1#0: Encoded(len+uint8[12][]) = aggregate%head%35#0
        let encoded_array%20#0: Encoded(len+uint8[12][]) = aggregate%as_Encoded(len+uint8[12][])%1#0
        let tmp%64#0: bool = (== encoded_array%19#0 encoded_array%20#0)
        (assert tmp%64#0)
        exit 1u
    block@5: // testDecoding_route_L65
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let a#0: uint64 = (btoi tmp%0#2)
        let tmp%2#1: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%2#1 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%2#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%1#0: uint64 = (len tmp%2#1)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let a_bytes#0: bytes = ((extract 2 0) tmp%2#1)
        let tmp%4#1: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#1)
        let eq%2#0: bool = (== len%2#0 1u)
        (assert eq%2#0) // invalid number of bytes for arc4.bool
        let aggregate%get_bit%1#0: bool = (getbit tmp%4#1 0u)
        let b#0: bool = aggregate%get_bit%1#0
        let tmp%6#1: bytes = (txna ApplicationArgs 4)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 tmp%6#1 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%3#0
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%3#0: uint64 = (len tmp%6#1)
        let eq%3#0: bool = (== len%3#0 add%1#0)
        (assert eq%3#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let b_bytes#0: bytes = ((extract 2 0) tmp%6#1)
        let tmp%8#1: bytes = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len tmp%8#1)
        let eq%4#0: bool = (== len%4#0 64u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint512
        let c#0: biguint = tmp%8#1
        let tmp%10#1: bytes = (txna ApplicationArgs 6)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 tmp%10#1 0u) // on error: invalid array length header
        let length%2#0: uint64 = aggregate%array_length%4#0
        let add%2#0: uint64 = (+ length%2#0 2u)
        let len%5#0: uint64 = (len tmp%10#1)
        let eq%5#0: bool = (== len%5#0 add%2#0)
        (assert eq%5#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let c_bytes#0: bytes = ((extract 2 0) tmp%10#1)
        let tmp%12#0: bytes = (txna ApplicationArgs 7)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 tmp%12#0 0u) // on error: invalid array length header
        let length%3#0: uint64 = aggregate%array_length%5#0
        let add%3#0: uint64 = (+ length%3#0 2u)
        let len%6#0: uint64 = (len tmp%12#0)
        let eq%6#0: bool = (== len%6#0 add%3#0)
        (assert eq%6#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let d#0: string = ((extract 2 0) tmp%12#0)
        let tmp%14#0: bytes = (txna ApplicationArgs 8)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 tmp%14#0 0u) // on error: invalid array length header
        let length%4#0: uint64 = aggregate%array_length%6#0
        let add%4#0: uint64 = (+ length%4#0 2u)
        let len%7#0: uint64 = (len tmp%14#0)
        let eq%7#0: bool = (== len%7#0 add%4#0)
        (assert eq%7#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let d_bytes#0: bytes = ((extract 2 0) tmp%14#0)
        let e#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let tuple_len%0#0: uint64 = (len e#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 e#0 8u) // on error: invalid tuple encoding
        let eq%8#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%8#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]))
        let substring3%0#0: bytes = (substring3 e#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let length%5#0: uint64 = aggregate%array_length%7#0
        let add%6#0: uint64 = (+ length%5#0 12u)
        let eq%9#0: bool = (== tuple_len%0#0 add%6#0)
        (assert eq%9#0) // invalid number of bytes for tests/approvals/arc4-encode-decode.algo.ts::TestObj
        let tmp%17#0: bytes = (txna ApplicationArgs 10)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 tmp%17#0 0u) // on error: invalid array length header
        let length%6#0: uint64 = aggregate%array_length%8#0
        let add%7#0: uint64 = (+ length%6#0 2u)
        let len%9#0: uint64 = (len tmp%17#0)
        let eq%10#0: bool = (== len%9#0 add%7#0)
        (assert eq%10#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let e_bytes#0: bytes = ((extract 2 0) tmp%17#0)
        let f#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let len%10#0: uint64 = (len f#0)
        let eq%11#0: bool = (== len%10#0 32u)
        (assert eq%11#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%20#0: bytes = (txna ApplicationArgs 12)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 tmp%20#0 0u) // on error: invalid array length header
        let length%7#0: uint64 = aggregate%array_length%9#0
        let add%8#0: uint64 = (+ length%7#0 2u)
        let len%11#0: uint64 = (len tmp%20#0)
        let eq%12#0: bool = (== len%11#0 add%8#0)
        (assert eq%12#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let f_bytes#0: bytes = ((extract 2 0) tmp%20#0)
        let tmp%22#0: bytes = (txna ApplicationArgs 13)
        let len%12#0: uint64 = (len tmp%22#0)
        let eq%13#0: bool = (== len%12#0 12u)
        (assert eq%13#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 12>
        let g#0: bytes[12] = tmp%22#0
        let tmp%24#0: bytes = (txna ApplicationArgs 14)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 tmp%24#0 0u) // on error: invalid array length header
        let length%8#0: uint64 = aggregate%array_length%10#0
        let add%9#0: uint64 = (+ length%8#0 2u)
        let len%13#0: uint64 = (len tmp%24#0)
        let eq%14#0: bool = (== len%13#0 add%9#0)
        (assert eq%14#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let g_bytes#0: bytes = ((extract 2 0) tmp%24#0)
        let tmp%0#3: uint64 = (btoi a_bytes#0)
        let tmp%1#2: bool = (== tmp%0#3 a#0)
        (assert tmp%1#2)
        let aggregate%get_bit%2#0: bool = (getbit b_bytes#0 0u)
        let tmp%2#2: bool = aggregate%get_bit%2#0
        let tmp%3#2: bool = (== tmp%2#2 b#0)
        (assert tmp%3#2)
        let tmp%4#2: biguint = c_bytes#0
        let tmp%5#2: bool = (b== tmp%4#2 c#0)
        (assert tmp%5#2)
        let tmp%6#2: string = ((extract 2 0) d_bytes#0)
        let tmp%7#2: bool = (== tmp%6#2 d#0)
        (assert tmp%7#2)
        let aggregate%extract%0#0: bytes = (extract3 e_bytes#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let aggregate%extract%1#0: bytes = (extract3 e#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let tmp%8#2: bool = (== tuple_item%0#0 tuple_item%1#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 e_bytes#0 8u)
        let aggregate%len%0#0: uint64 = (len e_bytes#0)
        let aggregate%substring3%0#0: bytes = (substring3 e_bytes#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%1#0: uint64 = (len e#0)
        let aggregate%substring3%1#0: bytes = (substring3 e#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let tuple_item%3#0: Encoded(len+uint8[]) = aggregate%substring3%1#0
        let tmp%9#2: bool = (== tuple_item%2#0 tuple_item%3#0)
        let tmp%10#2: bool = (&& tmp%8#2 tmp%9#2)
        (assert tmp%10#2) // assert target is match for conditions
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat 0x0001 a_bytes#0)
        let aggregate%array_length%11#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint64[])%0#0 0u) // on error: invalid array length header
        let tmp%15#1: uint64 = aggregate%array_length%11#0
        let tmp%16#1: bool = (== tmp%15#1 1u)
        let aggregate%total_length%0#0: uint64 = (len reinterpret_Encoded(len+uint64[])%0#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 reinterpret_Encoded(len+uint64[])%0#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%17#1: bool = (== values%0#0 a#0)
        let tmp%18#1: bool = (&& tmp%16#1 tmp%17#1)
        (assert tmp%18#1) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat 0x0001 b_bytes#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u) // on error: invalid array length header
        let tmp%19#1: uint64 = aggregate%array_length%12#0
        let tmp%20#1: bool = (== tmp%19#1 1u)
        let aggregate%array_length%13#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u) // on error: invalid array length header
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%13#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%add%0#0: uint64 = (+ 0u 16u)
        let aggregate%get_bit%3#0: bool = (getbit reinterpret_Encoded(len+bool1[])%0#0 aggregate%add%0#0)
        let array_item%1#0: bool = aggregate%get_bit%3#0
        let values%1#0: bool = array_item%1#0
        let tmp%21#1: bool = (== values%1#0 b#0)
        let tmp%22#1: bool = (&& tmp%20#1 tmp%21#1)
        (assert tmp%22#1) // Array of boolean matches
        let tmp%23#1: bytes = (concat 0x0001 c_bytes#0)
        (log tmp%23#1)
        let aggregate%array_length%14#0: uint64 = (extract_uint16 tmp%23#1 0u) // on error: invalid array length header
        let tmp%24#1: uint64 = aggregate%array_length%14#0
        let tmp%25#1: bool = (== tmp%24#1 1u)
        let aggregate%total_length%1#0: uint64 = (len tmp%23#1)
        let aggregate%array_trimmed%1#0: bytes = (substring3 tmp%23#1 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 64u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 64u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint512) = aggregate%encoded_element%1#0
        let values%2#0: biguint = array_item%2#0
        let tmp%26#0: bool = (b== values%2#0 c#0)
        let tmp%27#0: bool = (&& tmp%25#1 tmp%26#0)
        (assert tmp%27#0) // Array of biguint matches
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat 0x00010002 d_bytes#0)
        let aggregate%array_length%15#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%0#0 0u) // on error: invalid array length header
        let tmp%30#0: uint64 = aggregate%array_length%15#0
        let tmp%31#0: bool = (== tmp%30#0 1u)
        let aggregate%total_length%2#0: uint64 = (len reinterpret_Encoded(len+(len+utf8[])[])%0#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 reinterpret_Encoded(len+(len+utf8[])[])%0#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%16#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%0#0 0u) // on error: invalid array length header
        let aggregate%lt%1#0: bool = (< 0u aggregate%array_length%16#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 1u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%3#0: Encoded(len+utf8[]) = aggregate%item%0#0
        let values%3#0: string = ((extract 2 0) array_item%3#0)
        let tmp%34#0: bool = (== values%3#0 d#0)
        let tmp%35#0: bool = (&& tmp%31#0 tmp%34#0)
        (assert tmp%35#0) // Array of string matches
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat 0x00010002 e_bytes#0)
        let aggregate%array_length%17#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u) // on error: invalid array length header
        let tmp%38#0: uint64 = aggregate%array_length%17#0
        let tmp%39#0: bool = (== tmp%38#0 1u)
        let aggregate%total_length%3#0: uint64 = (len reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 2u aggregate%total_length%3#0)
        let aggregate%array_length%18#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u) // on error: invalid array length header
        let aggregate%item_offset_offset%1#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%0#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%18#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%0#0)
        let aggregate%extract%2#0: bytes = (extract3 aggregate%substring3%2#0 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%2#0
        let tmp%42#0: bool = (== tuple_item%4#0 tuple_item%1#0)
        let aggregate%total_length%4#0: uint64 = (len reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 2u aggregate%total_length%4#0)
        let aggregate%array_length%19#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u) // on error: invalid array length header
        let aggregate%item_offset_offset%2#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%1#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%19#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%1#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 aggregate%substring3%3#0 8u)
        let aggregate%len%2#0: uint64 = (len aggregate%substring3%3#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%substring3%3#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tuple_item%6#0: Encoded(len+uint8[]) = aggregate%substring3%4#0
        let tmp%45#0: bool = (== tuple_item%6#0 tuple_item%3#0)
        let tmp%46#0: bool = (&& tmp%42#0 tmp%45#0)
        let tmp%47#0: bool = (&& tmp%39#0 tmp%46#0)
        (assert tmp%47#0) // Array of struct matches
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat 0x0001 f_bytes#0)
        let aggregate%array_length%20#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[32][])%0#0 0u) // on error: invalid array length header
        let tmp%49#0: uint64 = aggregate%array_length%20#0
        let tmp%50#0: bool = (== tmp%49#0 1u)
        let aggregate%total_length%5#0: uint64 = (len reinterpret_Encoded(len+uint8[32][])%0#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 reinterpret_Encoded(len+uint8[32][])%0#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 32u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 32u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8[32]) = aggregate%encoded_element%2#0
        let tmp%52#0: bool = (== array_item%6#0 f#0)
        let tmp%53#0: bool = (&& tmp%50#0 tmp%52#0)
        (assert tmp%53#0) // Array of address matches
        let tmp%54#0: bytes[12] = g_bytes#0
        let tmp%55#0: bool = (== tmp%54#0 g#0)
        (assert tmp%55#0)
        exit 1u
    block@8: // after_if_else_L24
        fail
    block@9: // __algots__.defaultCreate_L24
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u