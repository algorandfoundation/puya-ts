main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string)void" => block@3, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void" => block@4, * => block@11}
    block@3: // testEncoding_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let c#1: biguint = (txna ApplicationArgs 3)
        let len_%0#0: uint64 = (len c#1)
        let no_overflow%0#0: bool = (<= len_%0#0 64u)
        (assert no_overflow%0#0) // overflow
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testDecoding_route_L33
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%18#0: bytes = (txna ApplicationArgs 2)
        let a_bytes#0: bytes = ((extract 2 0) tmp%18#0)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 3)
        let b#0: bool = (getbit reinterpret_bytes[1]%1#0 0u)
        let tmp%21#0: bytes = (txna ApplicationArgs 4)
        let b_bytes#0: bytes = ((extract 2 0) tmp%21#0)
        let c#0: biguint = (txna ApplicationArgs 5)
        let tmp%23#0: bytes = (txna ApplicationArgs 6)
        let c_bytes#0: bytes = ((extract 2 0) tmp%23#0)
        let tmp%25#0: bytes = (txna ApplicationArgs 7)
        let d#0: bytes = ((extract 2 0) tmp%25#0)
        let tmp%27#0: bytes = (txna ApplicationArgs 8)
        let tmp%29#0: bytes = (txna ApplicationArgs 9)
        let e.a#0: bytes[8] = ((extract 0 8) tmp%29#0) // on error: Index access is out of bounds
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%29#0 8u)
        let item_end_offset%0#0: uint64 = (len tmp%29#0)
        let e.b#0: bytes = (substring3 tmp%29#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%30#0: bytes = (txna ApplicationArgs 10)
        let e_bytes#0: bytes = ((extract 2 0) tmp%30#0)
        let tmp%0#2: uint64 = (btoi a_bytes#0)
        let tmp%1#1: bool = (== tmp%0#2 a#0)
        (assert tmp%1#1)
        let tmp%2#1: bool = (getbit b_bytes#0 0u)
        let tmp%3#1: bool = (== tmp%2#1 b#0)
        (assert tmp%3#1)
        let tmp%4#1: bool = (b== c_bytes#0 c#0)
        (assert tmp%4#1)
        let tmp%5#1: bytes = ((extract 4 0) tmp%27#0)
        let tmp%6#1: bool = (== tmp%5#1 d#0)
        (assert tmp%6#1)
        let item0%0#1: bytes = ((extract 2 8) tmp%30#0)
        let item_start_offset%0#1: uint64 = (extract_uint16 e_bytes#0 8u)
        let item_end_offset%0#1: uint64 = (len e_bytes#0)
        let tmp%7#1: bool = (== item0%0#1 e.a#0)
        goto tmp%7#1 ? block@16 : block@18
    block@16: // and_contd_L50
        let item1%1#0: bytes = (substring3 e_bytes#0 item_start_offset%0#1 item_end_offset%0#1)
        let tmp%8#1: bool = (== item1%1#0 e.b#0)
        goto tmp%8#1 ? block@17 : block@18
    block@17: // bool_true_L50
        let and_result%0#0: bool = 1u
        goto block@19
    block@18: // bool_false_L50
        let and_result%0#1: bool = 0u
        goto block@19
    block@19: // bool_merge_L50
        let and_result%0#2: bool = φ(and_result%0#0 <- block@17, and_result%0#1 <- block@18)
        (assert and_result%0#2) // assert target is match for conditions
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L17
        let tmp%32#0: uint64 = (txn OnCompletion)
        goto tmp%32#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L17
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // can only call when creating
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L17
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1 <- block@19, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2 <- block@8, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0