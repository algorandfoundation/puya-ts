{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc4-encode-decode.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;AAMA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAUE;;AAAA;AAAA;AAAA;;AAAA;AAVF;;;AAAA;AAAA;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAsBW;;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;;;AAAA;;AAAA;AAAP;AAEY;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAZ;AAAA;;;AAAY;;AAAA;;AAAA;;AAAA;AAAZ;;AAAA;AAAA;;;;AAAA;AAjBF;;;;;;AATA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAIW;AAAA;;AAAA;AAAA;AAHT;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8"
    },
    "6": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e.b#0"
      ]
    },
    "7": {
      "op": "dup",
      "stack_out": [
        "e.b#0",
        "e_bytes#0"
      ]
    },
    "8": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0"
      ]
    },
    "10": {
      "op": "dup",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "11": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "bz main_bare_routing@7",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "16": {
      "op": "pushbytess 0x9be85afa 0xa2d335ac // method \"testEncoding(uint64,bool,uint512,byte[],string)void\", method \"testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void\""
    },
    "28": {
      "op": "txna ApplicationArgs 0"
    },
    "31": {
      "op": "match main_testEncoding_route@3 main_testDecoding_route@4"
    },
    "37": {
      "block": "main_after_if_else@11",
      "stack_in": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "38": {
      "op": "return"
    },
    "39": {
      "block": "main_testDecoding_route@4",
      "stack_in": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%13#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%14#0"
      ]
    },
    "42": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%15#0"
      ]
    },
    "45": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "49": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0"
      ]
    },
    "50": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "tmp%18#0"
      ]
    },
    "53": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_bytes#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0"
      ]
    },
    "56": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "59": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "a_bytes#0",
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "60": {
      "op": "getbit",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0"
      ]
    },
    "61": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "tmp%21#0"
      ]
    },
    "64": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0"
      ]
    },
    "70": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "tmp%23#0"
      ]
    },
    "73": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0"
      ]
    },
    "76": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "tmp%25#0"
      ]
    },
    "79": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0"
      ]
    },
    "82": {
      "op": "txna ApplicationArgs 8"
    },
    "85": {
      "op": "txna ApplicationArgs 9"
    },
    "88": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "89": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "e.a#0"
      ]
    },
    "92": {
      "op": "dig 1",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "e.a#0",
        "tmp%29#0 (copy)"
      ]
    },
    "94": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "e.a#0",
        "tmp%29#0 (copy)",
        "8"
      ]
    },
    "95": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "e.a#0",
        "item_start_offset%0#0"
      ]
    },
    "96": {
      "op": "dig 2",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "e.a#0",
        "item_start_offset%0#0",
        "tmp%29#0 (copy)"
      ]
    },
    "98": {
      "op": "len",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "tmp%29#0",
        "e.a#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "99": {
      "op": "uncover 3",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%29#0"
      ]
    },
    "101": {
      "op": "cover 2",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "tmp%29#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "103": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e.b#0"
      ]
    },
    "104": {
      "op": "bury 13",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 10"
    },
    "109": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ]
    },
    "110": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "tmp%30#0",
        "e_bytes#0"
      ]
    },
    "113": {
      "op": "dup",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "tmp%30#0",
        "e_bytes#0",
        "e_bytes#0 (copy)"
      ]
    },
    "114": {
      "op": "cover 2",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "e_bytes#0"
      ]
    },
    "116": {
      "op": "bury 14",
      "defined_out": [
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "a_bytes#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0"
      ]
    },
    "118": {
      "op": "uncover 9",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "a_bytes#0"
      ]
    },
    "120": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#1",
        "tmp%27#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "a#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%0#1"
      ]
    },
    "121": {
      "op": "uncover 10",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%0#1",
        "a#0"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%1#1",
        "tmp%27#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%1#1"
      ]
    },
    "124": {
      "op": "assert",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "b#0",
        "b_bytes#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0"
      ]
    },
    "125": {
      "op": "uncover 7",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "b#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "b_bytes#0"
      ]
    },
    "127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "b#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "b_bytes#0",
        "0"
      ]
    },
    "128": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%2#1",
        "tmp%27#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "b#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%2#1"
      ]
    },
    "129": {
      "op": "uncover 8",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%2#1",
        "b#0"
      ]
    },
    "131": {
      "op": "==",
      "defined_out": [
        "c#0",
        "c_bytes#0",
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%3#1",
        "tmp%30#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%3#1"
      ]
    },
    "132": {
      "op": "assert",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "c#0",
        "c_bytes#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0"
      ]
    },
    "133": {
      "op": "uncover 5",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "c#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "c_bytes#0"
      ]
    },
    "135": {
      "op": "uncover 6",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "c_bytes#0",
        "c#0"
      ]
    },
    "137": {
      "op": "b==",
      "defined_out": [
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%4#0"
      ]
    },
    "138": {
      "op": "assert",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "d#0",
        "tmp%27#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0"
      ]
    },
    "139": {
      "op": "uncover 3",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "d#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%27#0"
      ]
    },
    "141": {
      "op": "extract 4 0",
      "defined_out": [
        "d#0",
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%30#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "d#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%5#1"
      ]
    },
    "144": {
      "op": "uncover 4",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%5#1",
        "d#0"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%30#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0",
        "tmp%6#1"
      ]
    },
    "147": {
      "op": "assert",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "tmp%30#0"
      ]
    },
    "148": {
      "op": "extract 2 8",
      "defined_out": [
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item0%0#1",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "item0%0#1"
      ]
    },
    "151": {
      "op": "dig 1",
      "defined_out": [
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "e_bytes#0 (copy)",
        "item0%0#1",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "item0%0#1",
        "e_bytes#0 (copy)"
      ]
    },
    "153": {
      "op": "intc_2 // 8",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "item0%0#1",
        "e_bytes#0 (copy)",
        "8"
      ]
    },
    "154": {
      "op": "extract_uint16",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "item0%0#1",
        "item_start_offset%0#0"
      ]
    },
    "155": {
      "op": "bury 4",
      "defined_out": [
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item0%0#1",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "e_bytes#0",
        "item0%0#1"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "item0%0#1",
        "e_bytes#0"
      ]
    },
    "158": {
      "op": "len",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "item0%0#1",
        "item_end_offset%0#0"
      ]
    },
    "159": {
      "op": "bury 4",
      "defined_out": [
        "e.a#0",
        "e.b#0",
        "e_bytes#0",
        "item0%0#1",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "e.a#0",
        "item0%0#1"
      ]
    },
    "161": {
      "op": "==",
      "defined_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%7#1"
      ]
    },
    "162": {
      "op": "bz main_bool_false@18",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "165": {
      "op": "dig 2"
    },
    "167": {
      "op": "dig 1"
    },
    "169": {
      "op": "dig 3"
    },
    "171": {
      "op": "substring3"
    },
    "172": {
      "op": "dig 4"
    },
    "174": {
      "op": "=="
    },
    "175": {
      "op": "bz main_bool_false@18"
    },
    "178": {
      "op": "intc_1 // 1"
    },
    "179": {
      "block": "main_bool_merge@19",
      "stack_in": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "return"
    },
    "182": {
      "block": "main_bool_false@18",
      "stack_in": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "and_result%0#0"
      ]
    },
    "183": {
      "op": "b main_bool_merge@19"
    },
    "186": {
      "block": "main_testEncoding_route@3",
      "stack_in": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%3#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%4#0"
      ]
    },
    "189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%5#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "c#0"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "len_%0#0"
      ]
    },
    "197": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "len_%0#0",
        "64"
      ]
    },
    "199": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "no_overflow%0#0"
      ]
    },
    "200": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "202": {
      "op": "return"
    },
    "203": {
      "block": "main_bare_routing@7",
      "stack_in": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%32#0"
      ]
    },
    "205": {
      "op": "bnz main_after_if_else@11",
      "stack_out": [
        "e.b#0",
        "e_bytes#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ]
    },
    "208": {
      "op": "txn ApplicationID"
    },
    "210": {
      "op": "!"
    },
    "211": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "212": {
      "op": "intc_1 // 1"
    },
    "213": {
      "op": "return"
    }
  }
}