{
    "name": "ItxnComposeAlgo",
    "structs": {},
    "methods": [
        {
            "name": "distribute",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                },
                {
                    "type": "pay",
                    "name": "funds"
                },
                {
                    "type": "uint64",
                    "name": "verifier"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "conditionalBegin",
            "args": [
                {
                    "type": "uint64",
                    "name": "count"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        32
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        587
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        414
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        522
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        423
                    ],
                    "errorMessage": "must provide some accounts"
                },
                {
                    "pc": [
                        401
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAAEGICYCBNCiggAEAAJobyKAAEcGMRtBAicxGRREMRhEggIEHsrTTASQ0pdiNhoAjgIBTAABADYaARdFBbGABACSJa6yGoAEAAJIabIaI7I1gAQLgQFDskKA1AELIAIAASYDCGdyZWV0aW5nASAEFR98dTEYQAAEKIAAZ4ICBCQ3jTwEoOgYcjYaAI4CAJYAjTEZFEQxGEEAa4ICBNCiggAEUYC6IDYaAI4CADoAAQA2GgEiKGVEKVBLASJZSwKBAllLA08CSwJSVwIATwJMUEsCFUxOA1JXAgBQSRUWVwYCTFAqTFCwI0M2GgFXAgAiKGVEKVBMUEkVFlcGAkxQKkxQsCNDgAQAkiWuNhoAjgEAAQA2GgFXAgAoTGcjQzEZgQQSMRgQQzEZgQUSMRgQQ7JAIrIZJLIQIrIBs7cAPUUGIkUESwNLBQxBADNLA0AAGrEoshopshpLBbIYJLIQIrIBSwMjCEUEQv/ZtiiyGimyGksFshgkshAisgFC/+OzI0M2GgExFiMJSTgQIxJENhoCF0UDSTgHMgoSREsBIllJRQpJREw4CEwKSwFXAgBFCkxXAiAjFk8CFlBLARUWVwYCTwJQTIACABJQTFCxSSJbSU4CRQVJgQhbSU4CRQVJgRBZSwEVUlcCALIHsgiyECKyASNFBEsDSwcMQQAfSwNJJQtLCUwlWLayB0sCsghLA7IQIrIBIwhFBEL/2baABGWprsyyGkmyGCSyECKyAbaAA2FiY7ImgQOyECKyAbMjQzEZFDEYFBBD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}