#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    pushbytes ""
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    pushbytes 0x65a9aecc // method "verify()void"
    txna ApplicationArgs 0
    match main_verify_route@3
    err

main_verify_route@3:
    // tests/approvals/itxn-compose.algo.ts:68
    // verify() {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    // tests/approvals/itxn-compose.algo.ts:69
    // for (let i: uint64 = 0; i < Txn.groupIndex; i++) {
    pushint 0 // 0
    bury 1

main_while_top@9:
    // tests/approvals/itxn-compose.algo.ts:69
    // for (let i: uint64 = 0; i < Txn.groupIndex; i++) {
    dup
    txn GroupIndex
    <
    bz main_after_while@11
    // tests/approvals/itxn-compose.algo.ts:71
    // assert(txn.type === TransactionType.Payment, 'Txn must be pay')
    dupn 2
    gtxns TypeEnum
    pushint 1 // 1
    ==
    assert // Txn must be pay
    // tests/approvals/itxn-compose.algo.ts:69
    // for (let i: uint64 = 0; i < Txn.groupIndex; i++) {
    pushint 1 // 1
    +
    bury 1
    b main_while_top@9

main_after_while@11:
    // tests/approvals/itxn-compose.algo.ts:68
    // verify() {
    pushint 1 // 1
    return

main___algots__.defaultCreate@5:
    // tests/approvals/itxn-compose.algo.ts:67
    // class VerifierContract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
