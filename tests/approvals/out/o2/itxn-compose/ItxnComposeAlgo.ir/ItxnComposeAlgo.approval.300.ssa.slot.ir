main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L18
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "distribute(address[],pay,uint64)void" => block@4, method "conditionalBegin(uint64)void" => block@5, * => block@8}
    block@4: // distribute_route_L19
        let addresses#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%0#4: uint64 = (txn GroupIndex)
        let funds#0: uint64 = (- tmp%0#4 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) funds#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%0#1: Encoded(uint64) = (txna ApplicationArgs 2)
        let verifier#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#1)
        let tmp%0#5: account = ((gtxns Receiver) funds#0)
        let tmp%1#2: account = (global CurrentApplicationAddress)
        let tmp%2#2: bool = (== tmp%0#5 tmp%1#2)
        (assert tmp%2#2) // assert target is match for conditions
        let aggregate%array_length%0#0: uint64 = (extract_uint16 addresses#0 0u)
        (assert aggregate%array_length%0#0) // must provide some accounts
        let tmp%3#2: uint64 = ((gtxns Amount) funds#0)
        let share#0: uint64 = (/ tmp%3#2 aggregate%array_length%0#0)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) addresses#0)
        let aggregate%encoded_element%0#0: bytes = ((extract 2 32) addresses#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob share#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%length%0#0: uint64 = (len aggregate%encoded_element%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 aggregate%encoded_element%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x0012)
        let payFields#0: Encoded(uint64,uint64,(len+uint8[])) = (concat aggregate%head%2#0 aggregate%encoded_value%0#0)
        itxn_begin
        let values%0#0: uint64 = (extract_uint64 payFields#0 0u)
        let values%1#0: uint64 = (extract_uint64 payFields#0 8u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 payFields#0 16u)
        let aggregate%len%0#0: uint64 = (len payFields#0)
        let aggregate%substring3%0#0: bytes = (substring3 payFields#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let values%2#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        ((itxn_field Receiver) values%2#0)
        ((itxn_field Amount) values%1#0)
        ((itxn_field TypeEnum) values%0#0)
        ((itxn_field Fee) 0u)
        let value_internal%0#3: uint64 = 1u
        goto block@21
    block@21: // for_header_L32
        let temp#1: uint64 = φ(value_internal%0#3 <- block@4, value_internal%0#5 <- block@22)
        let continue_looping%0#1: bool = (< temp#1 aggregate%array_length%0#0)
        goto continue_looping%0#1 ? block@22 : block@23
    block@22: // for_body_L32
        let aggregate%bytes_offset%1#0: uint64 = (* temp#1 32u)
        let addr#0: Encoded(uint8[32]) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%1#0 32u) // on error: index access is out of bounds
        itxn_next
        ((itxn_field Receiver) addr#0)
        ((itxn_field Amount) values%1#0)
        ((itxn_field TypeEnum) values%0#0)
        ((itxn_field Fee) 0u)
        let value_internal%0#5: uint64 = (+ temp#1 1u)
        goto block@21
    block@23: // after_for_L32
        itxn_next
        ((itxn_field ApplicationArgs) method "verify()void")
        ((itxn_field ApplicationID) verifier#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetName) "abc")
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u
    block@5: // conditionalBegin_route_L52
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let count#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) 0x00024869)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyACAAEmAwhncmVldGluZwEgBBUffHUxGEAABCiAAGeCAgQkN408BKDoGHI2GgCOAgCWAI0xGRREMRhBAGuCAgTQooIABFGAuiA2GgCOAgA6AAEANhoBIihlRClQSwEiWUsCgQJZSwNPAksCUlcCAE8CTFBLAhVMTgNSVwIAUEkVFlcGAkxQKkxQsCNDNhoBVwIAIihlRClQTFBJFRZXBgJMUCpMULAjQ4AEAJIlrjYaAI4BAAEANhoBVwIAKExnI0MxGYEEEjEYEEMxGYEFEjEYEEM=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (gitxn 0 CreatedApplicationID)
        let value_internal%0#0: uint64 = 0u
        goto block@13
    block@13: // for_header_L56
        let temp#0: uint64 = φ(value_internal%0#0 <- block@5, value_internal%0#2 <- block@17)
        let continue_looping%0#0: bool = (< temp#0 count#0)
        goto continue_looping%0#0 ? block@14 : block@18
    block@14: // for_body_L56
        goto temp#0 ? block@16 : block@15
    block@15: // if_body_L57
        itxn_begin
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) 0x0002686f)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@17
    block@16: // else_body_L59
        itxn_next
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) 0x0002686f)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@17
    block@17: // after_if_else_L57
        let value_internal%0#2: uint64 = (+ temp#0 1u)
        goto block@13
    block@18: // after_for_L56
        itxn_submit
        exit 1u
    block@8: // after_if_else_L18
        fail
    block@9: // __algots__.defaultCreate_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u