main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L18
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "distribute(address[],pay,application)void" => block@3, method "conditionalBegin(uint64)void" => block@4, * => block@11}
    block@3: // distribute_route_L19
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let addresses#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (txn GroupIndex)
        let funds#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) funds#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let verifier#0: uint64 = ((txnas Applications) tmp%8#0)
        let tmp%0#3: account = ((gtxns Receiver) funds#0)
        let tmp%1#1: account = (global CurrentApplicationAddress)
        let tmp%2#2: bool = (== tmp%0#3 tmp%1#1)
        (assert tmp%2#2) // assert target is match for conditions
        let array_length%0#0: uint64 = (extract_uint16 addresses#0 0u)
        (assert array_length%0#0) // must provide some accounts
        let tmp%3#2: uint64 = ((gtxns Amount) funds#0)
        let share#0: uint64 = (/ tmp%3#2 array_length%0#0)
        let array%array_trimmed%0#1: bytes = ((extract 2 0) addresses#0)
        let array%bytes_offset%0#1: uint64 = (* 0u 32u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 32u) // on error: index access is out of bounds
        let payFields.receiver#0: bytes = array%encoded_element%0#1
        itxn_begin
        ((itxn_field Receiver) payFields.receiver#0)
        ((itxn_field Amount) share#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        let i#3: uint64 = 1u
        goto block@24
    block@24: // for_header_L32
        let i#4: uint64 = φ(i#3 <- block@3, i#5 <- block@25)
        let continue_looping%0#1: bool = (< i#4 array_length%0#0)
        goto continue_looping%0#1 ? block@25 : block@26
    block@25: // for_body_L32
        let array%array_trimmed%1#1: bytes = ((extract 2 0) addresses#0)
        let array%bytes_offset%1#1: uint64 = (* i#4 32u)
        let array%encoded_element%1#1: bytes = (extract3 array%array_trimmed%1#1 array%bytes_offset%1#1 32u) // on error: index access is out of bounds
        let addr#0: Encoded(uint8[32]) = array%encoded_element%1#1
        itxn_next
        ((itxn_field Amount) share#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Receiver) addr#0)
        ((itxn_field Fee) 0u)
        let i#5: uint64 = (+ i#4 1u)
        goto block@24
    block@26: // after_for_L32
        itxn_next
        ((itxn_field ApplicationArgs) method "verify()void")
        ((itxn_field ApplicationID) verifier#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetName) "abc")
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // conditionalBegin_route_L53
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let count#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let array%length%0#1: uint64 = (len "Hi")
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 "Hi")
        let array%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = array%encoded_value%0#1
        let tmp%0#2: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) tmp%0#2)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAwhncmVldGluZwEgBBUffHUxGEAABCiAAGcxG0EAKoIFBACSJa4EJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAHsAcABlAEIAAiNDMRkURDEYRDYaASMoZUQpUEsBI1lLAoECWUsDTwJLAlJXAgBPAkxQSwIVTE4DUlcCAFBJFRZXBgJMUCpMULAiQzEZFEQxGEQ2GgFXAgAjKGVEKVBMUEkVFlcGAkxQKkxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAKExnIkM=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (gitxn 0 CreatedApplicationID)
        let i#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L57
        let i#1: uint64 = φ(i#0 <- block@4, i#2 <- block@20)
        let continue_looping%0#0: bool = (< i#1 count#0)
        goto continue_looping%0#0 ? block@17 : block@21
    block@17: // for_body_L57
        goto i#1 ? block@19 : block@18
    block@18: // if_body_L58
        itxn_begin
        let array%length%1#1: uint64 = (len "ho")
        let array%as_bytes%1#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 "ho")
        let array%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = array%encoded_value%1#1
        let tmp%3#1: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%3#1)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@20
    block@19: // else_body_L60
        itxn_next
        let array%length%2#1: uint64 = (len "ho")
        let array%as_bytes%2#1: bytes[8] = (itob array%length%2#1)
        let array%length_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded_value%2#1: bytes = (concat array%length_uint16%2#1 "ho")
        let array%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = array%encoded_value%2#1
        let tmp%4#1: Encoded(len+utf8[]) = array%as_Encoded(len+utf8[])%2#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%4#1)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@20
    block@20: // after_if_else_L58
        let i#2: uint64 = (+ i#1 1u)
        goto block@16
    block@21: // after_for_L57
        itxn_submit
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L18
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L18
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L18
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#0 <- block@26, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#1 <- block@21, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0