{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/box-enum-contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAUG;;AAAA;AAAA;AAAA;;AAAA;AAEyB;AAAjB;AAAA;AAXqC;AAWY;AAAA;AAAA;AAAA;AAAA;AAAjB;AAAhC;AAAP;AACwB;AAAjB;AAAA;AAX+B;AAWkB;AAAA;AAAA;AAAA;AAAA;AAAjB;AAAhC;AAAP;AAZ4C;AAcN;AAAA;AAAA;AAAA;AAAA;AAArB;AAbqB;AAa6B;AAAA;AAAA;AAAA;AAAA;AAArB;AAAvC;AALR;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAEwC;AAAvC;AAL4C;AAK5C;AAAA;AACiC;;AAAjC;AALsC;AAKtC;AAAA;AAHD;;AAJH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock \"oca\" \"txn\""
    },
    "14": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "19": {
      "op": "pushbytess 0xf26c6d42 0xef186cf7 // method \"store_enums()void\", method \"read_enums()(uint64,uint64)\""
    },
    "31": {
      "op": "txna ApplicationArgs 0"
    },
    "34": {
      "op": "match main_store_enums_route@3 main_read_enums_route@4"
    },
    "40": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "42": {
      "op": "return"
    },
    "43": {
      "block": "main_read_enums_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "46": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "49": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "50": {
      "op": "bytec_0 // \"oca\"",
      "defined_out": [
        "\"oca\""
      ],
      "stack_out": [
        "\"oca\""
      ]
    },
    "51": {
      "op": "box_get",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "52": {
      "op": "pop",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "53": {
      "op": "bytec_0 // \"oca\"",
      "stack_out": [
        "tmp%0#2",
        "\"oca\""
      ]
    },
    "54": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "55": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "56": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "57": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "58": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#2",
        "maybe_value_converted%0#0"
      ]
    },
    "59": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "==",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "61": {
      "op": "assert",
      "stack_out": []
    },
    "62": {
      "op": "bytec_1 // \"txn\"",
      "defined_out": [
        "\"txn\""
      ],
      "stack_out": [
        "\"txn\""
      ]
    },
    "63": {
      "op": "box_get",
      "defined_out": [
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "64": {
      "op": "pop",
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "65": {
      "op": "bytec_1 // \"txn\"",
      "stack_out": [
        "tmp%4#1",
        "\"txn\""
      ]
    },
    "66": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "67": {
      "op": "swap",
      "stack_out": [
        "tmp%4#1",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "68": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "tmp%4#1",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "70": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%4#1",
        "maybe_value_converted%1#0"
      ]
    },
    "71": {
      "op": "itob",
      "defined_out": [
        "tmp%4#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%6#1"
      ]
    },
    "72": {
      "op": "==",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "73": {
      "op": "assert",
      "stack_out": []
    },
    "74": {
      "op": "bytec_0 // \"oca\"",
      "stack_out": [
        "\"oca\""
      ]
    },
    "75": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "76": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "77": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ]
    },
    "78": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%2#0",
        "maybe_exists%2#0"
      ]
    },
    "79": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%2#0"
      ]
    },
    "80": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "81": {
      "op": "bytec_1 // \"txn\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "\"txn\""
      ]
    },
    "82": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "84": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value_converted%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_exists%3#0",
        "maybe_value_converted%3#0"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value_converted%3#0",
        "maybe_exists%3#0"
      ]
    },
    "86": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value_converted%3#0"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "88": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "89": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "95": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "96": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "97": {
      "op": "log",
      "stack_out": []
    },
    "98": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "return"
    },
    "100": {
      "block": "main_store_enums_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "102": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "103": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "106": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "107": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "108": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "109": {
      "op": "bytec_0 // \"oca\"",
      "defined_out": [
        "\"oca\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"oca\""
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "\"oca\"",
        "new_box_value%0#0"
      ]
    },
    "111": {
      "op": "box_put",
      "stack_out": []
    },
    "112": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "115": {
      "op": "bytec_1 // \"txn\"",
      "defined_out": [
        "\"txn\"",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "\"txn\""
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "\"txn\"",
        "new_box_value%1#0"
      ]
    },
    "117": {
      "op": "box_put",
      "stack_out": []
    },
    "118": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "return"
    },
    "120": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "122": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID"
    },
    "127": {
      "op": "!"
    },
    "128": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "129": {
      "op": "intc_0 // 1"
    },
    "130": {
      "op": "return"
    }
  }
}