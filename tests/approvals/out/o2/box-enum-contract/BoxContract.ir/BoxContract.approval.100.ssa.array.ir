main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_enums()void" => block@3, method "read_enums()(uint64,uint64)" => block@4, * => block@11}
    block@3: // store_enums_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let encoded_value%0#0: bytes[8] = (itob 1u)
        (box_put "oca" encoded_value%0#0)
        let encoded_value%1#0: bytes[8] = (itob 6u)
        (box_put "txn" encoded_value%1#0)
        let tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // read_enums_route_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let (tmp%0#2: bytes, tmp%1#1: bool) = (box_get "oca")
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "oca")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#0)
        let tmp%2#1: bytes[8] = (itob maybe_value_converted%0#0)
        let tmp%3#1: bool = (== tmp%0#2 tmp%2#1)
        (assert tmp%3#1)
        let (tmp%4#1: bytes, tmp%5#1: bool) = (box_get "txn")
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "txn")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let maybe_value_converted%1#0: uint64 = (btoi storage_value%1#0)
        let tmp%6#1: bytes[8] = (itob maybe_value_converted%1#0)
        let tmp%7#1: bool = (== tmp%4#1 tmp%6#1)
        (assert tmp%7#1)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "oca")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let maybe_value_converted%2#0: uint64 = (btoi storage_value%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob maybe_value_converted%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%8#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "txn")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let maybe_value_converted%3#0: uint64 = (btoi storage_value%3#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob maybe_value_converted%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%9#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%8#1)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%9#1)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%10#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%10#1)
        (log tmp%12#0)
        let tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L4
        let tmp%13#0: uint64 = (txn OnCompletion)
        goto tmp%13#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L4
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // can only call when creating
        let tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L4
        let tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#2 <- block@8, tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0