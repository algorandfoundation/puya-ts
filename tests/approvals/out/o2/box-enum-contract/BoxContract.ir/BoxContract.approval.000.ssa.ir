main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_enums()void" => block@2, method "read_enums()(uint64,uint64)" => block@3, * => block@4}
    block@2: // store_enums_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums()
        return 1u
    block@3: // read_enums_route_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: bytes[16] = tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums()
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        return 1u
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        goto block@10
    block@6: // bare_routing_L4
        let tmp%13#0: uint64 = (txn OnCompletion)
        switch tmp%13#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L4
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        (assert tmp%15#0) // can only call when creating
        tests/approvals/box-enum-contract.algo.ts::BoxContract.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@10
    block@10: // after_if_else_L4
        return 0u

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.storeEnums() -> void:
    block@0: // L8
        let encoded_value%0#0: bytes[8] = (itob 1u)
        (box_put "oca" encoded_value%0#0)
        let encoded_value%1#0: bytes[8] = (itob 6u)
        (box_put "txn" encoded_value%1#0)
        return 

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.readEnums() -> bytes[16]:
    block@0: // L14
        let (tmp%0#0: bytes, tmp%1#0: bool) = (box_get "oca")
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "oca")
        (assert maybe_exists%0#0) // Box must have value
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let tmp%2#0: bytes = (itob maybe_value_converted%0#0)
        let tmp%3#0: bool = (== tmp%0#0 tmp%2#0)
        (assert tmp%3#0)
        let (tmp%4#0: bytes, tmp%5#0: bool) = (box_get "txn")
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "txn")
        (assert maybe_exists%1#0) // Box must have value
        let maybe_value_converted%1#0: uint64 = (btoi maybe_value%1#0)
        let tmp%6#0: bytes = (itob maybe_value_converted%1#0)
        let tmp%7#0: bool = (== tmp%4#0 tmp%6#0)
        (assert tmp%7#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "oca")
        (assert maybe_exists%2#0) // Box must have value
        let maybe_value_converted%2#0: uint64 = (btoi maybe_value%2#0)
        let val_as_bytes%0#0: bytes[8] = (itob maybe_value_converted%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "txn")
        (assert maybe_exists%3#0) // Box must have value
        let maybe_value_converted%3#0: uint64 = (btoi maybe_value%3#0)
        let val_as_bytes%1#0: bytes[8] = (itob maybe_value_converted%3#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        return encoded_tuple_buffer%2#0

subroutine tests/approvals/box-enum-contract.algo.ts::BoxContract.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 