{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/array-destructuring.algo.ts"
  ],
  "mappings": ";;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA4BE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AACE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 0"
    },
    "6": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "8": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "11": {
      "op": "pushbytess 0x74b7e8df 0xa78000de 0x2dafc6c6 // method \"testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)\", method \"test()void\", method \"testLiteralDestructuring()void\""
    },
    "28": {
      "op": "txna ApplicationArgs 0"
    },
    "31": {
      "op": "match main_testNested_route@3 main_test_route@4 main_testLiteralDestructuring_route@5"
    },
    "39": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "40": {
      "op": "return"
    },
    "41": {
      "block": "main_testLiteralDestructuring_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "43": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "44": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "45": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "47": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "48": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "49": {
      "op": "return"
    },
    "50": {
      "block": "main_test_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "52": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "53": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "56": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "57": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "return"
    },
    "59": {
      "block": "main_testNested_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "62": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "65": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "66": {
      "op": "txna ApplicationArgs 1"
    },
    "69": {
      "op": "dup"
    },
    "70": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "reinterpret_bytes[136]%0#0 (copy)",
        "0"
      ]
    },
    "71": {
      "op": "extract_uint64",
      "defined_out": [
        "arg.0#0",
        "reinterpret_bytes[136]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[136]%0#0",
        "arg.0#0"
      ]
    },
    "72": {
      "op": "swap",
      "stack_out": [
        "arg.0#0",
        "reinterpret_bytes[136]%0#0"
      ]
    },
    "73": {
      "error": "Index access is out of bounds",
      "op": "extract 8 128 // on error: Index access is out of bounds",
      "defined_out": [
        "arg.0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "arg.0#0",
        "item1%0#0"
      ]
    },
    "76": {
      "op": "dup",
      "defined_out": [
        "arg.0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ],
      "stack_out": [
        "arg.0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ]
    },
    "77": {
      "error": "Index access is out of bounds",
      "op": "extract 0 64 // on error: Index access is out of bounds",
      "defined_out": [
        "arg.0#0",
        "arg.1.0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "arg.0#0",
        "item1%0#0",
        "arg.1.0#0"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "arg.0#0",
        "arg.1.0#0",
        "item1%0#0"
      ]
    },
    "81": {
      "error": "Index access is out of bounds",
      "op": "extract 64 64 // on error: Index access is out of bounds",
      "defined_out": [
        "arg.0#0",
        "arg.1.0#0",
        "arg.1.1#0"
      ],
      "stack_out": [
        "arg.0#0",
        "arg.1.0#0",
        "arg.1.1#0"
      ]
    },
    "84": {
      "op": "uncover 2",
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "arg.0#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0"
      ]
    },
    "87": {
      "op": "dig 2",
      "defined_out": [
        "arg.1.0#0",
        "arg.1.0#0 (copy)",
        "arg.1.1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "arg.1.0#0 (copy)"
      ]
    },
    "89": {
      "op": "len",
      "defined_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "len_%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "len_%0#0"
      ]
    },
    "90": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "arg.1.0#0",
        "arg.1.1#0",
        "len_%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "len_%0#0",
        "64"
      ]
    },
    "91": {
      "op": "<=",
      "defined_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "92": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0"
      ]
    },
    "93": {
      "op": "intc_1 // 64",
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "64"
      ]
    },
    "94": {
      "op": "bzero",
      "defined_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "b_zeros%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0"
      ]
    },
    "95": {
      "op": "uncover 3",
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arg.1.0#0"
      ]
    },
    "97": {
      "op": "dig 1",
      "defined_out": [
        "arg.1.0#0",
        "arg.1.1#0",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arg.1.0#0",
        "b_zeros%0#0 (copy)"
      ]
    },
    "99": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "arg.1.1#0",
        "b_zeros%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0"
      ]
    },
    "100": {
      "op": "dig 3",
      "defined_out": [
        "arc4_item%0#0",
        "arg.1.1#0",
        "arg.1.1#0 (copy)",
        "b_zeros%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0",
        "arg.1.1#0 (copy)"
      ]
    },
    "102": {
      "op": "len",
      "defined_out": [
        "arc4_item%0#0",
        "arg.1.1#0",
        "b_zeros%0#0",
        "len_%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0",
        "len_%1#0"
      ]
    },
    "103": {
      "op": "intc_1 // 64",
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0",
        "len_%1#0",
        "64"
      ]
    },
    "104": {
      "op": "<=",
      "defined_out": [
        "arc4_item%0#0",
        "arg.1.1#0",
        "b_zeros%0#0",
        "no_overflow%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0",
        "no_overflow%1#0"
      ]
    },
    "105": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arg.1.1#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0"
      ]
    },
    "106": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "arc4_item%0#0",
        "arg.1.1#0"
      ]
    },
    "108": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "arg.1.1#0",
        "b_zeros%0#0"
      ]
    },
    "110": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "arc4_item%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "arc4_item%1#0"
      ]
    },
    "111": {
      "op": "dig 1",
      "defined_out": [
        "arc4_item%0#0",
        "arc4_item%0#0 (copy)",
        "arc4_item%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "arc4_item%1#0",
        "arc4_item%0#0 (copy)"
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "arc4_item%0#0 (copy)",
        "arc4_item%1#0"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "115": {
      "op": "dig 2",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "117": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "val_as_bytes%0#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "118": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "119": {
      "op": "uncover 2",
      "stack_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "arc4_item%0#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "124": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "132": {
      "op": "log",
      "stack_out": []
    },
    "133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "return"
    },
    "135": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "137": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID"
    },
    "142": {
      "op": "!"
    },
    "143": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "144": {
      "op": "intc_0 // 1"
    },
    "145": {
      "op": "return"
    }
  }
}