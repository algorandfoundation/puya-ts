main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)" => block@3, method "test()void" => block@4, method "testLiteralDestructuring()void" => block@5, method "produceFixed()uint64[3]" => block@6, * => block@13}
    block@3: // testNested_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(uint512,uint512))%0#0: Encoded(uint64,(uint512,uint512)) = (txna ApplicationArgs 1)
        let array%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,(uint512,uint512))%0#0 0u 8u)
        let array%item0%0#1: uint64 = (btoi array%extract%0#1)
        let array%extract%1#1: bytes = (extract3 reinterpret_Encoded(uint64,(uint512,uint512))%0#0 8u 128u)
        let array%extract%2#1: bytes = (extract3 array%extract%1#1 0u 64u)
        let array%extract%3#1: bytes = (extract3 array%extract%1#1 64u 64u)
        let (arg.0#0: uint64, arg.1.0#0: biguint, arg.1.1#0: biguint) = (array%item0%0#1, array%extract%2#1, array%extract%3#1)
        let array%val_as_bytes%0#1: bytes[8] = (itob arg.0#0)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%0#1)
        let array%value_len%0#1: uint64 = (len arg.1.0#0)
        let array%len_ok%0#1: bool = (<= array%value_len%0#1 64u)
        (assert array%len_ok%0#1) // overflow
        let array%bzero%0#1: bytes = (bzero 64u)
        let array%arc4_encoded%0#1: bytes[64] = (b| arg.1.0#0 array%bzero%0#1)
        let array%as_Encoded(uint512)%0#1: Encoded(uint512) = array%arc4_encoded%0#1
        let array%encoded%1#1: Encoded(uint512) = (concat 0x array%as_Encoded(uint512)%0#1)
        let array%value_len%1#1: uint64 = (len arg.1.1#0)
        let array%len_ok%1#1: bool = (<= array%value_len%1#1 64u)
        (assert array%len_ok%1#1) // overflow
        let array%bzero%1#1: bytes = (bzero 64u)
        let array%arc4_encoded%1#1: bytes[64] = (b| arg.1.1#0 array%bzero%1#1)
        let array%as_Encoded(uint512)%1#1: Encoded(uint512) = array%arc4_encoded%1#1
        let array%encoded%2#1: Encoded(uint512,uint512) = (concat array%encoded%1#1 array%as_Encoded(uint512)%1#1)
        let array%encoded%3#1: Encoded(uint512,uint512) = (concat array%encoded%2#1 0x)
        let array%encoded%4#1: Encoded(uint64,(uint512,uint512)) = (concat array%encoded%0#1 array%encoded%3#1)
        let array%val_as_bytes%1#1: bytes[8] = (itob arg.0#0)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let array%encoded%5#1: Encoded(uint64,(uint512,uint512),uint64) = (concat array%encoded%4#1 array%as_Encoded(uint64)%1#1)
        let array%value_len%2#1: uint64 = (len arg.1.0#0)
        let array%len_ok%2#1: bool = (<= array%value_len%2#1 64u)
        (assert array%len_ok%2#1) // overflow
        let array%bzero%2#1: bytes = (bzero 64u)
        let array%arc4_encoded%2#1: bytes[64] = (b| arg.1.0#0 array%bzero%2#1)
        let array%as_Encoded(uint512)%2#1: Encoded(uint512) = array%arc4_encoded%2#1
        let array%encoded%6#1: Encoded(uint64,(uint512,uint512),uint64,uint512) = (concat array%encoded%5#1 array%as_Encoded(uint512)%2#1)
        let array%encoded%7#1: Encoded(uint64,(uint512,uint512),uint64,uint512) = (concat array%encoded%6#1 0x)
        let tmp%15#0: Encoded(uint64,(uint512,uint512),uint64,uint512) = array%encoded%7#1
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // test_route_L11
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let array%val_as_bytes%2#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%2#1: Encoded(uint64) = array%val_as_bytes%2#1
        let array%encoded%8#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%2#1)
        let array%val_as_bytes%3#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%3#1: Encoded(uint64) = array%val_as_bytes%3#1
        let array%encoded%9#1: Encoded(uint64,uint64) = (concat array%encoded%8#1 array%as_Encoded(uint64)%3#1)
        let array%val_as_bytes%4#1: bytes[8] = (itob 3u)
        let array%as_Encoded(uint64)%4#1: Encoded(uint64) = array%val_as_bytes%4#1
        let array%encoded%10#1: Encoded(uint64,uint64,uint64) = (concat array%encoded%9#1 array%as_Encoded(uint64)%4#1)
        let array%encoded%11#1: Encoded(uint64[3]) = (concat array%encoded%10#1 0x)
        let encoded_array%0#1: Encoded(uint64[3]) = array%encoded%11#1
        let array%bytes_offset%0#1: uint64 = (* 0u 8u)
        let array%encoded_element%0#1: bytes = (extract3 encoded_array%0#1 array%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = array%encoded_element%0#1
        let x#1: uint64 = (btoi array_item%0#0)
        let array%bytes_offset%1#1: uint64 = (* 1u 8u)
        let array%encoded_element%1#1: bytes = (extract3 encoded_array%0#1 array%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = array%encoded_element%1#1
        let y#1: uint64 = (btoi array_item%1#0)
        let array%bytes_offset%2#1: uint64 = (* 2u 8u)
        let array%encoded_element%2#1: bytes = (extract3 encoded_array%0#1 array%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = array%encoded_element%2#1
        let z#0: uint64 = (btoi array_item%2#0)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // testLiteralDestructuring_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let array%val_as_bytes%5#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%5#1: Encoded(uint64) = array%val_as_bytes%5#1
        let array%encoded%12#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%5#1)
        let array%val_as_bytes%6#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%6#1: Encoded(uint64) = array%val_as_bytes%6#1
        let array%encoded%13#1: Encoded(uint64,uint64) = (concat array%encoded%12#1 array%as_Encoded(uint64)%6#1)
        let array%encoded%14#1: Encoded(uint64,uint64) = (concat array%encoded%13#1 0x)
        let awst_tmp%0#0: Encoded(uint64,uint64) = array%encoded%14#1
        let array%extract%4#1: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%4#1
        let b#1: uint64 = (btoi tuple_item%0#0)
        let array%extract%5#1: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%5#1
        let a#1: uint64 = (btoi tuple_item%1#0)
        let array%extract%6#1: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = array%extract%6#1
        let x#0: uint64 = (btoi tuple_item%2#0)
        let array%extract%7#1: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = array%extract%7#1
        let y#0: uint64 = (btoi tuple_item%3#0)
        let tmp%0#2: bool = (== x#0 b#1)
        (assert tmp%0#2)
        let tmp%1#1: bool = (== y#0 a#1)
        (assert tmp%1#1)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // produceFixed_route_L44
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let array%val_as_bytes%7#1: bytes[8] = (itob 1u)
        let array%as_Encoded(uint64)%7#1: Encoded(uint64) = array%val_as_bytes%7#1
        let array%encoded%15#1: Encoded(uint64) = (concat 0x array%as_Encoded(uint64)%7#1)
        let array%val_as_bytes%8#1: bytes[8] = (itob 2u)
        let array%as_Encoded(uint64)%8#1: Encoded(uint64) = array%val_as_bytes%8#1
        let array%encoded%16#1: Encoded(uint64,uint64) = (concat array%encoded%15#1 array%as_Encoded(uint64)%8#1)
        let array%val_as_bytes%9#1: bytes[8] = (itob 3u)
        let array%as_Encoded(uint64)%9#1: Encoded(uint64) = array%val_as_bytes%9#1
        let array%encoded%17#1: Encoded(uint64,uint64,uint64) = (concat array%encoded%16#1 array%as_Encoded(uint64)%9#1)
        let array%encoded%18#1: Encoded(uint64[3]) = (concat array%encoded%17#1 0x)
        let encoded_array%0#0: Encoded(uint64[3]) = array%encoded%18#1
        let tmp%30#0: bytes = (concat 0x151f7c75 encoded_array%0#0)
        (log tmp%30#0)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L4
        let tmp%31#0: uint64 = (txn OnCompletion)
        goto tmp%31#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L4
        let tmp%32#0: uint64 = (txn ApplicationID)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // can only call when creating
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L4
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0