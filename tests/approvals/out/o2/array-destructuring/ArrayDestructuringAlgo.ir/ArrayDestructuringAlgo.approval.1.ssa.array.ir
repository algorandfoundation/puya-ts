main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)" => block@3, method "test()void" => block@4, method "testLiteralDestructuring()void" => block@5, * => block@12}
    block@3: // testNested_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[136]%0#0: bytes[136] = (txna ApplicationArgs 1)
        let arg.0#0: uint64 = (extract_uint64 reinterpret_bytes[136]%0#0 0u)
        let item1%0#0: bytes = ((extract 8 128) reinterpret_bytes[136]%0#0) // on error: Index access is out of bounds
        let arg.1.0#0: biguint = ((extract 0 64) item1%0#0) // on error: Index access is out of bounds
        let arg.1.1#0: biguint = ((extract 64 64) item1%0#0) // on error: Index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob arg.0#0)
        let len_%0#0: uint64 = (len arg.1.0#0)
        let no_overflow%0#0: bool = (<= len_%0#0 64u)
        (assert no_overflow%0#0) // overflow
        let b_zeros%0#0: bytes = (bzero 64u)
        let arc4_item%0#0: bytes = (b| arg.1.0#0 b_zeros%0#0)
        let len_%1#0: uint64 = (len arg.1.1#0)
        let no_overflow%1#0: bool = (<= len_%1#0 64u)
        (assert no_overflow%1#0) // overflow
        let arc4_item%1#0: bytes = (b| arg.1.1#0 b_zeros%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat arc4_item%0#0 arc4_item%1#0)
        let encoded_tuple_buffer%5#0: bytes = (concat val_as_bytes%0#0 encoded_tuple_buffer%2#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 arc4_item%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%7#0)
        (log tmp%7#0)
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // test_route_L11
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // testLiteralDestructuring_route_L32
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L4
        let tmp%16#0: uint64 = (txn OnCompletion)
        goto tmp%16#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L4
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // can only call when creating
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L4
        let tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#3 <- block@9, tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0