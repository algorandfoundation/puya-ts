main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testNested((uint64,(uint512,uint512)))(uint64,(uint512,uint512),uint64,uint512)" => block@2, method "test()void" => block@3, method "testLiteralDestructuring()void" => block@4, * => block@5}
    block@2: // testNested_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let value_len%0#0: uint64 = (len tmp%7#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 136u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.tuple<arc4.uint512,arc4.uint512>>
        let reinterpret_bytes[136]%0#0: bytes[136] = tmp%7#0
        let item0%0#0: bytes = (extract3 reinterpret_bytes[136]%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 reinterpret_bytes[136]%0#0 8u 128u) // on error: Index access is out of bounds
        let item0%2#0: bytes = (extract3 item1%0#0 0u 64u) // on error: Index access is out of bounds
        let item1%1#0: bytes = (extract3 item1%0#0 64u 64u) // on error: Index access is out of bounds
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: biguint, elements_to_encode%2#0: biguint, elements_to_encode%3#0: uint64, elements_to_encode%4#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(item0%1#0, item0%2#0, item1%1#0)
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let value_len%1#0: uint64 = (len elements_to_encode%1#0)
        let len_ok%0#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| elements_to_encode%1#0 bzero%0#0)
        let value_len%2#0: uint64 = (len elements_to_encode%2#0)
        let len_ok%1#0: bool = (<= value_len%2#0 64u)
        (assert len_ok%1#0) // overflow
        let bzero%1#0: bytes = (bzero 64u)
        let arc4_encoded%1#0: bytes[64] = (b| elements_to_encode%2#0 bzero%1#0)
        let current_tail_offset%0#0: uint64 = 128u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 arc4_encoded%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 arc4_encoded%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%3#0)
        let value_len%3#0: uint64 = (len elements_to_encode%4#0)
        let len_ok%2#0: bool = (<= value_len%3#0 64u)
        (assert len_ok%2#0) // overflow
        let bzero%2#0: bytes = (bzero 64u)
        let arc4_encoded%2#0: bytes[64] = (b| elements_to_encode%4#0 bzero%2#0)
        let current_tail_offset%1#0: uint64 = 208u
        let encoded_tuple_buffer%3#0: bytes[0] = 0x
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_tuple_buffer%2#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 arc4_encoded%2#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%7#0)
        (log tmp%8#0)
        return 1u
    block@3: // test_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test()
        return 1u
    block@4: // testLiteralDestructuring_route_L32
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring()
        return 1u
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        goto block@11
    block@7: // bare_routing_L4
        let tmp%17#0: uint64 = (txn OnCompletion)
        switch tmp%17#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L4
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (== tmp%18#0 0u)
        (assert tmp%19#0) // can only call when creating
        tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate()
        return 1u
    block@9: // switch_case_default_L4
        goto block@10
    block@10: // switch_case_next_L4
        goto block@11
    block@11: // after_if_else_L4
        return 0u

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testNested(arg.0: uint64, arg.1.0: biguint, arg.1.1: biguint) -> <uint64, biguint, biguint, uint64, biguint>:
    block@0: // L5
        let a#0: uint64 = arg.0#0
        let (b.0#0: biguint, b.1#0: biguint) = (arg.1.0#0, arg.1.1#0)
        let c#0: uint64 = arg.0#0
        let d#0: biguint = arg.1.0#0
        let _#0: biguint = arg.1.1#0
        return a#0 b.0#0 b.1#0 c#0 d#0

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.test() -> void:
    block@0: // L11
        let (tuple_assignment%0#0: uint64, tuple_assignment%1#0: bytes, tuple_assignment%2#0: bool, tuple_assignment%3#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let a#0: uint64 = tuple_assignment%0#0
        let b#0: bytes = tuple_assignment%1#0
        let c#0: bool = tuple_assignment%2#0
        let d#0: biguint = tuple_assignment%3#0
        let (tuple_assignment%4#0: uint64, tuple_assignment%5#0: bytes, tuple_assignment%6#0: bool, tuple_assignment%7#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let _#0: uint64 = tuple_assignment%4#0
        let _₁#0: bytes = tuple_assignment%5#0
        let e#0: bool = tuple_assignment%6#0
        let _₂#0: biguint = tuple_assignment%7#0
        let (tuple_assignment%8#0: uint64, tuple_assignment%9#0: bytes, tuple_assignment%10#0: bool, tuple_assignment%11#0: biguint) = tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems()
        let g#0: uint64 = tuple_assignment%8#0
        let _₃#0: bytes = tuple_assignment%9#0
        let _₄#0: bool = tuple_assignment%10#0
        let i#0: biguint = tuple_assignment%11#0
        let (f.0#0: uint64, f.1#0: bytes, f.2#0: bool, f.3#0: biguint) = (g#0, _₃#0, _₄#0, i#0)
        let tmp%0#0: bool = (== a#0 5u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== b#0 0x)
        (assert tmp%1#0)
        let tmp%2#0: bool = (! c#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (b== d#0 6b)
        (assert tmp%3#0)
        let tmp%4#0: bool = (! e#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== g#0 5u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (b== i#0 6b)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== 4u 4u)
        goto tmp%7#0 ? block@1 : block@6
    block@1: // and_contd_L25
        let tmp%8#0: bool = (== f.0#0 5u)
        goto tmp%8#0 ? block@2 : block@6
    block@2: // and_contd_L25
        let tmp%9#0: bool = (== f.1#0 0x)
        goto tmp%9#0 ? block@3 : block@6
    block@3: // and_contd_L25
        let tmp%10#0: bool = (== f.2#0 0u)
        goto tmp%10#0 ? block@4 : block@6
    block@4: // and_contd_L25
        let tmp%11#0: bool = (b== f.3#0 6b)
        goto tmp%11#0 ? block@5 : block@6
    block@5: // bool_true_L25
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L25
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L25
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.produceItems() -> <uint64, bytes, bool, biguint>:
    block@0: // L28
        return 5u 0x 0u 6b

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.testLiteralDestructuring() -> void:
    block@0: // L32
        let a#0: uint64 = 1u
        let b#0: uint64 = 2u
        let b#1: uint64 = a#0
        let a#1: uint64 = b#0
        let x#0: uint64 = b#1
        let y#0: uint64 = a#1
        let tmp%0#0: bool = (== x#0 b#1)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== y#0 a#1)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/array-destructuring.algo.ts::ArrayDestructuringAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 