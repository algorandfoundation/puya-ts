main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64)void" => block@3, * => block@4}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let length#0: uint64 = (btoi tmp%0#2)
        goto block@13
    block@13: // while_top_L20
        let tmp%1#3: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 2010u tmp%1#3)
        goto tmp%2#1 ? block@14 : block@18
    block@14: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@13
    block@18: // after_while_L20
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = 0x
        let encoded_array%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let ma#0: Encoded(uint64[])* = new()
        store(ma#0, encoded_array%0#0)
        let i#0: uint64 = 0u
        goto block@9
    block@9: // while_top_L8
        let i#1: uint64 = Ï†(i#0 <- block@18, i#2 <- block@10)
        let tmp%0#3: bool = (< i#1 length#0)
        goto tmp%0#3 ? block@10 : block@11
    block@10: // while_body_L8
        let slot_contents%0#0: Encoded(uint64[]) = load(ma#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64[])%1#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%1#2: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#0
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%1#2) // on error: max array length exceeded
        store(ma#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@9
    block@11: // after_while_L8
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(ma#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let tmp%3#1: uint64 = aggregate%array_len%0#0
        let tmp%4#1: bool = (== tmp%3#1 length#0)
        (assert tmp%4#1)
        (assert length#0) // has length
        let slot_contents%1#0: Encoded(uint64[]) = load(ma#0)
        let len%0#1: uint64 = (len slot_contents%1#0)
        let sub%0#0: uint64 = (- len%0#1 8u)
        let extract%0#0: bytes = (extract3 slot_contents%1#0 0u sub%0#0)
        let extract_to_end%0#0: bytes = (substring3 slot_contents%1#0 sub%0#0 len%0#1)
        let popped#0: uint64 = (btoi extract_to_end%0#0)
        store(ma#0, extract%0#0)
        let tmp%6#1: uint64 = (- length#0 1u)
        let tmp%7#1: bool = (== popped#0 tmp%6#1)
        (assert tmp%7#1)
        let aggregate%slot_contents%1#0: Encoded(uint64[]) = load(ma#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%1#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 8u)
        let tmp%8#1: uint64 = aggregate%array_len%1#0
        let tmp%9#1: uint64 = (- tmp%8#1 1u)
        let slot_contents%2#0: Encoded(uint64[]) = load(ma#0)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%9#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%2#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%10#1: uint64 = (- length#0 2u)
        let tmp%11#1: bool = (== values%0#0 tmp%10#1)
        (assert tmp%11#1)
        let slot_contents%3#0: Encoded(uint64[]) = load(ma#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%12#1: bool = (== values%1#0 1u)
        (assert tmp%12#1)
        exit 1u
    block@4: // switch_case_next_L4
        fail
    block@5: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u