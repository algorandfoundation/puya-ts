#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 6 4
    bytecblock 0xdf920f37 0x151f7c75 "Hello test4"
    pushbytes ""
    dupn 2
    // tests/approvals/gtxns.algo.ts:16
    // export class GtxnsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0xa78000de 0xf1908524 // method "test()void", method "test2()void"
    bytec_0 // method "test3()void"
    pushbytess 0xedb4f973 0x13de6a54 0x7459fb1f // method "test4(appl)void", method "reflectAllPay(pay)(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])", method "test5(txn)uint64"
    txna ApplicationArgs 0
    match main_test_route@3 main_test2_route@4 main_test3_route@5 main_test4_route@6 main_reflectAllPay_route@7 main_test5_route@8

main_after_if_else@15:
    err

main_test5_route@8:
    // tests/approvals/gtxns.algo.ts:80
    // test5(txn: gtxn.Transaction): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:16
    // export class GtxnsAlgo extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    // tests/approvals/gtxns.algo.ts:81
    // if (txn.type === TransactionType.Payment) {
    gtxns TypeEnum
    dup
    bury 2
    intc_0 // 1
    ==
    bz main_else_body@21
    // tests/approvals/gtxns.algo.ts:82
    // return 1
    intc_0 // 1

main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5@24:
    // tests/approvals/gtxns.algo.ts:80
    // test5(txn: gtxn.Transaction): uint64 {
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_else_body@21:
    // tests/approvals/gtxns.algo.ts:83
    // } else if (txn.type === TransactionType.AssetTransfer) {
    dup
    intc_3 // 4
    ==
    pop
    // tests/approvals/gtxns.algo.ts:85
    // return 0
    intc_1 // 0
    // tests/approvals/gtxns.algo.ts:80
    // test5(txn: gtxn.Transaction): uint64 {
    b main_after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5@24

main_reflectAllPay_route@7:
    // tests/approvals/gtxns.algo.ts:61
    // reflectAllPay(pay: gtxn.PaymentTxn) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:16
    // export class GtxnsAlgo extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/gtxns.algo.ts:63
    // sender: pay.sender.bytes,
    dup
    gtxns Sender
    // tests/approvals/gtxns.algo.ts:64
    // fee: pay.fee,
    dig 1
    gtxns Fee
    // tests/approvals/gtxns.algo.ts:65
    // firstValid: pay.firstValid,
    dig 2
    gtxns FirstValid
    // tests/approvals/gtxns.algo.ts:66
    // firstValidTime: pay.firstValidTime,
    dig 3
    gtxns FirstValidTime
    // tests/approvals/gtxns.algo.ts:67
    // lastValid: pay.lastValid,
    dig 4
    gtxns LastValid
    // tests/approvals/gtxns.algo.ts:68
    // note: pay.note,
    dig 5
    gtxns Note
    // tests/approvals/gtxns.algo.ts:69
    // lease: pay.lease,
    dig 6
    gtxns Lease
    // tests/approvals/gtxns.algo.ts:70
    // typeBytes: pay.typeBytes,
    dig 7
    gtxns Type
    // tests/approvals/gtxns.algo.ts:71
    // groupIndex: pay.groupIndex,
    dig 8
    gtxns GroupIndex
    // tests/approvals/gtxns.algo.ts:72
    // txnId: pay.txnId,
    dig 9
    gtxns TxID
    // tests/approvals/gtxns.algo.ts:73
    // rekeyTo: pay.rekeyTo.bytes,
    dig 10
    gtxns RekeyTo
    // tests/approvals/gtxns.algo.ts:74
    // receiver: pay.receiver.bytes,
    dig 11
    gtxns Receiver
    // tests/approvals/gtxns.algo.ts:75
    // amount: pay.amount,
    dig 12
    gtxns Amount
    // tests/approvals/gtxns.algo.ts:76
    // closeRemainderTo: pay.closeRemainderTo.bytes,
    uncover 13
    gtxns CloseRemainderTo
    // tests/approvals/gtxns.algo.ts:62-77
    // return {
    //   sender: pay.sender.bytes,
    //   fee: pay.fee,
    //   firstValid: pay.firstValid,
    //   firstValidTime: pay.firstValidTime,
    //   lastValid: pay.lastValid,
    //   note: pay.note,
    //   lease: pay.lease,
    //   typeBytes: pay.typeBytes,
    //   groupIndex: pay.groupIndex,
    //   txnId: pay.txnId,
    //   rekeyTo: pay.rekeyTo.bytes,
    //   receiver: pay.receiver.bytes,
    //   amount: pay.amount,
    //   closeRemainderTo: pay.closeRemainderTo.bytes,
    // }
    uncover 12
    itob
    uncover 13
    swap
    concat
    uncover 12
    itob
    concat
    uncover 11
    itob
    concat
    uncover 10
    itob
    concat
    dig 9
    len
    itob
    extract 6 2
    uncover 10
    concat
    swap
    pushbytes 0x00f4
    concat
    dig 1
    len
    pushint 244 // 244
    +
    swap
    uncover 10
    concat
    dig 9
    len
    itob
    extract 6 2
    uncover 10
    concat
    uncover 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 8
    itob
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    itob
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // tests/approvals/gtxns.algo.ts:61
    // reflectAllPay(pay: gtxn.PaymentTxn) {
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_test4_route@6:
    // tests/approvals/gtxns.algo.ts:53
    // test4(other: gtxn.ApplicationCallTxn) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:16
    // export class GtxnsAlgo extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    dup
    intc_2 // appl
    ==
    assert // transaction type is appl
    // tests/approvals/gtxns.algo.ts:54
    // assert(other.onCompletion === OnCompleteAction.NoOp, 'Other txn must be NoOp')
    dig 1
    gtxns OnCompletion
    !
    assert // Other txn must be NoOp
    // tests/approvals/gtxns.algo.ts:55
    // assert(other.type === TransactionType.ApplicationCall)
    intc_2 // 6
    ==
    assert
    // tests/approvals/gtxns.algo.ts:56
    // assert(other.lastLog === Bytes('Hello test4'))
    dup
    gtxns LastLog
    bytec_2 // "Hello test4"
    ==
    assert
    // tests/approvals/gtxns.algo.ts:57
    // assert(other.appArgs(0) === methodSelector(GtxnsAlgo.prototype.test3))
    dup
    intc_1 // 0
    gtxnsas ApplicationArgs
    bytec_0 // method "test3()void"
    ==
    assert
    // tests/approvals/gtxns.algo.ts:58
    // assert(other.appId === Global.currentApplicationId)
    gtxns ApplicationID
    global CurrentApplicationID
    ==
    assert
    // tests/approvals/gtxns.algo.ts:53
    // test4(other: gtxn.ApplicationCallTxn) {
    intc_0 // 1
    return

main_test3_route@5:
    // tests/approvals/gtxns.algo.ts:47
    // test3() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:48
    // assert(Txn.onCompletion === OnCompleteAction.NoOp, 'OCA must be NoOp')
    txn OnCompletion
    !
    assert // OCA must be NoOp
    // tests/approvals/gtxns.algo.ts:49
    // assert(Txn.typeEnum === TransactionType.ApplicationCall)
    txn TypeEnum
    intc_2 // 6
    ==
    assert
    // tests/approvals/gtxns.algo.ts:50
    // log('Hello test4')
    bytec_2 // "Hello test4"
    log
    // tests/approvals/gtxns.algo.ts:47
    // test3() {
    intc_0 // 1
    return

main_test2_route@4:
    // tests/approvals/gtxns.algo.ts:21
    // test2() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:22
    // for (const i of urange(Global.groupSize)) {
    global GroupSize
    bury 1
    intc_1 // 0
    bury 2

main_for_header@32:
    // tests/approvals/gtxns.algo.ts:22
    // for (const i of urange(Global.groupSize)) {
    dup2
    <
    bz main_after_for@45
    // tests/approvals/gtxns.algo.ts:24
    // switch (txn.type) {
    dig 1
    gtxns TypeEnum
    dup
    bury 4
    // tests/approvals/gtxns.algo.ts:25
    // case TransactionType.ApplicationCall:
    intc_2 // 6
    ==
    // tests/approvals/gtxns.algo.ts:25-27
    // case TransactionType.ApplicationCall:
    //   log(txn.appId.id)
    //   break
    bz main_after_if_else@35
    // tests/approvals/gtxns.algo.ts:26
    // log(txn.appId.id)
    dig 1
    gtxns ApplicationID
    itob
    log

main_block@44:
    // tests/approvals/gtxns.algo.ts:22
    // for (const i of urange(Global.groupSize)) {
    dig 1
    intc_0 // 1
    +
    bury 2
    b main_for_header@32

main_after_if_else@35:
    // tests/approvals/gtxns.algo.ts:28
    // case TransactionType.AssetTransfer:
    dig 2
    intc_3 // 4
    ==
    // tests/approvals/gtxns.algo.ts:28-30
    // case TransactionType.AssetTransfer:
    //   log(txn.xferAsset.id)
    //   break
    bz main_after_if_else@37
    // tests/approvals/gtxns.algo.ts:29
    // log(txn.xferAsset.id)
    dig 1
    gtxns XferAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:30
    // break
    b main_block@44

main_after_if_else@37:
    // tests/approvals/gtxns.algo.ts:31
    // case TransactionType.AssetConfig:
    dig 2
    pushint 3 // 3
    ==
    // tests/approvals/gtxns.algo.ts:31-33
    // case TransactionType.AssetConfig:
    //   log(txn.configAsset.id)
    //   break
    bz main_after_if_else@39
    // tests/approvals/gtxns.algo.ts:32
    // log(txn.configAsset.id)
    dig 1
    gtxns ConfigAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:33
    // break
    b main_block@44

main_after_if_else@39:
    // tests/approvals/gtxns.algo.ts:34
    // case TransactionType.Payment:
    dig 2
    intc_0 // 1
    ==
    // tests/approvals/gtxns.algo.ts:34-36
    // case TransactionType.Payment:
    //   log(txn.receiver)
    //   break
    bz main_after_if_else@41
    // tests/approvals/gtxns.algo.ts:35
    // log(txn.receiver)
    dig 1
    gtxns Receiver
    log
    // tests/approvals/gtxns.algo.ts:36
    // break
    b main_block@44

main_after_if_else@41:
    // tests/approvals/gtxns.algo.ts:37
    // case TransactionType.KeyRegistration:
    dig 2
    pushint 2 // 2
    ==
    // tests/approvals/gtxns.algo.ts:37-39
    // case TransactionType.KeyRegistration:
    //   log(txn.voteKey)
    //   break
    bz main_after_if_else@43
    // tests/approvals/gtxns.algo.ts:38
    // log(txn.voteKey)
    dig 1
    gtxns VotePK
    log
    // tests/approvals/gtxns.algo.ts:39
    // break
    b main_block@44

main_after_if_else@43:
    // tests/approvals/gtxns.algo.ts:41
    // log(txn.freezeAsset.id)
    dig 1
    gtxns FreezeAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:42
    // break
    b main_block@44

main_after_for@45:
    // tests/approvals/gtxns.algo.ts:21
    // test2() {
    intc_0 // 1
    return

main_test_route@3:
    // tests/approvals/gtxns.algo.ts:17
    // test() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:18
    // assert(gtxn.PaymentTxn(0).amount > 0)
    intc_1 // 0
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    intc_1 // 0
    gtxns Amount
    assert
    // tests/approvals/gtxns.algo.ts:17
    // test() {
    intc_0 // 1
    return

main_bare_routing@11:
    // tests/approvals/gtxns.algo.ts:16
    // export class GtxnsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
