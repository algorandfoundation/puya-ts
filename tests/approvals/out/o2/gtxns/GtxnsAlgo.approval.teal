#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 6
    bytecblock 0xdf920f37 "Hello test4"
    pushbytes ""
    dupn 2
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0xa78000de 0xf1908524 // method "test()void", method "test2()void"
    bytec_0 // method "test3()void"
    pushbytes 0xedb4f973 // method "test4(appl)void"
    txna ApplicationArgs 0
    match main_test_route@3 main_test2_route@4 main_test3_route@5 main_test4_route@6

main_after_if_else@13:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    intc_1 // 0
    return

main_test4_route@6:
    // tests/approvals/gtxns.algo.ts:52
    // test4(other: gtxn.ApplicationCallTxn) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    dup
    intc_2 // appl
    ==
    assert // transaction type is appl
    // tests/approvals/gtxns.algo.ts:53
    // assert(other.onCompletion === OnCompleteAction.NoOp, 'Other txn must be NoOp')
    dig 1
    gtxns OnCompletion
    !
    assert // Other txn must be NoOp
    // tests/approvals/gtxns.algo.ts:54
    // assert(other.type === TransactionType.ApplicationCall)
    intc_2 // 6
    ==
    assert
    // tests/approvals/gtxns.algo.ts:55
    // assert(other.lastLog === Bytes('Hello test4'))
    dup
    gtxns LastLog
    bytec_1 // "Hello test4"
    ==
    assert
    // tests/approvals/gtxns.algo.ts:56
    // assert(other.appArgs(0) === methodSelector(GtxnsAlgo.prototype.test3))
    dup
    intc_1 // 0
    gtxnsas ApplicationArgs
    bytec_0 // method "test3()void"
    ==
    assert
    // tests/approvals/gtxns.algo.ts:57
    // assert(other.appId === Global.currentApplicationId)
    gtxns ApplicationID
    global CurrentApplicationID
    ==
    assert
    // tests/approvals/gtxns.algo.ts:52
    // test4(other: gtxn.ApplicationCallTxn) {
    intc_0 // 1
    return

main_test3_route@5:
    // tests/approvals/gtxns.algo.ts:46
    // test3() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:47
    // assert(Txn.onCompletion === OnCompleteAction.NoOp, 'OCA must be NoOp')
    txn OnCompletion
    !
    assert // OCA must be NoOp
    // tests/approvals/gtxns.algo.ts:48
    // assert(Txn.typeEnum === TransactionType.ApplicationCall)
    txn TypeEnum
    intc_2 // 6
    ==
    assert
    // tests/approvals/gtxns.algo.ts:49
    // log('Hello test4')
    bytec_1 // "Hello test4"
    log
    // tests/approvals/gtxns.algo.ts:46
    // test3() {
    intc_0 // 1
    return

main_test2_route@4:
    // tests/approvals/gtxns.algo.ts:20
    // test2() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    global GroupSize
    bury 1
    intc_1 // 0
    bury 2

main_for_header@22:
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    dup2
    <
    bz main_after_for@35
    // tests/approvals/gtxns.algo.ts:23
    // switch (txn.type) {
    dig 1
    gtxns TypeEnum
    dup
    bury 4
    // tests/approvals/gtxns.algo.ts:24
    // case TransactionType.ApplicationCall:
    intc_2 // 6
    ==
    // tests/approvals/gtxns.algo.ts:24-26
    // case TransactionType.ApplicationCall:
    //   log(txn.appId.id)
    //   break
    bz main_after_if_else@25
    // tests/approvals/gtxns.algo.ts:25
    // log(txn.appId.id)
    dig 1
    gtxns ApplicationID
    itob
    log

main_block@34:
    // tests/approvals/gtxns.algo.ts:21
    // for (const i of urange(Global.groupSize)) {
    dig 1
    intc_0 // 1
    +
    bury 2
    b main_for_header@22

main_after_if_else@25:
    // tests/approvals/gtxns.algo.ts:27
    // case TransactionType.AssetTransfer:
    dig 2
    pushint 4 // 4
    ==
    // tests/approvals/gtxns.algo.ts:27-29
    // case TransactionType.AssetTransfer:
    //   log(txn.xferAsset.id)
    //   break
    bz main_after_if_else@27
    // tests/approvals/gtxns.algo.ts:28
    // log(txn.xferAsset.id)
    dig 1
    gtxns XferAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:29
    // break
    b main_block@34

main_after_if_else@27:
    // tests/approvals/gtxns.algo.ts:30
    // case TransactionType.AssetConfig:
    dig 2
    pushint 3 // 3
    ==
    // tests/approvals/gtxns.algo.ts:30-32
    // case TransactionType.AssetConfig:
    //   log(txn.configAsset.id)
    //   break
    bz main_after_if_else@29
    // tests/approvals/gtxns.algo.ts:31
    // log(txn.configAsset.id)
    dig 1
    gtxns ConfigAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:32
    // break
    b main_block@34

main_after_if_else@29:
    // tests/approvals/gtxns.algo.ts:33
    // case TransactionType.Payment:
    dig 2
    intc_0 // 1
    ==
    // tests/approvals/gtxns.algo.ts:33-35
    // case TransactionType.Payment:
    //   log(txn.receiver)
    //   break
    bz main_after_if_else@31
    // tests/approvals/gtxns.algo.ts:34
    // log(txn.receiver)
    dig 1
    gtxns Receiver
    log
    // tests/approvals/gtxns.algo.ts:35
    // break
    b main_block@34

main_after_if_else@31:
    // tests/approvals/gtxns.algo.ts:36
    // case TransactionType.KeyRegistration:
    dig 2
    pushint 2 // 2
    ==
    // tests/approvals/gtxns.algo.ts:36-38
    // case TransactionType.KeyRegistration:
    //   log(txn.voteKey)
    //   break
    bz main_after_if_else@33
    // tests/approvals/gtxns.algo.ts:37
    // log(txn.voteKey)
    dig 1
    gtxns VotePK
    log
    // tests/approvals/gtxns.algo.ts:38
    // break
    b main_block@34

main_after_if_else@33:
    // tests/approvals/gtxns.algo.ts:40
    // log(txn.freezeAsset.id)
    dig 1
    gtxns FreezeAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:41
    // break
    b main_block@34

main_after_for@35:
    // tests/approvals/gtxns.algo.ts:20
    // test2() {
    intc_0 // 1
    return

main_test_route@3:
    // tests/approvals/gtxns.algo.ts:16
    // test() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/gtxns.algo.ts:17
    // assert(gtxn.PaymentTxn(0).amount > 0)
    intc_1 // 0
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    intc_1 // 0
    gtxns Amount
    assert
    // tests/approvals/gtxns.algo.ts:16
    // test() {
    intc_0 // 1
    return

main_bare_routing@9:
    // tests/approvals/gtxns.algo.ts:15
    // export class GtxnsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
