main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L3
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L3
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@2, * => block@3}
    block@2: // test_route_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test()
        return 1u
    block@3: // switch_case_default_L3
        goto block@4
    block@4: // switch_case_next_L3
        goto block@9
    block@5: // bare_routing_L3
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L3
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L3
        goto block@8
    block@8: // switch_case_next_L3
        goto block@9
    block@9: // after_if_else_L3
        return 0u

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test() -> void:
    block@0: // L4
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#0: uint64 = ((gtxns Amount) 0u)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L3
        return 