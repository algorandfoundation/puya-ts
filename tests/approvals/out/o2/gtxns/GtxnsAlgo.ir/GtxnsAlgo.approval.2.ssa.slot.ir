main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, method "test2()void" => block@4, method "test3()void" => block@5, method "test4(appl)void" => block@6, * => block@13}
    block@3: // test_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let gtxn_type%0#1: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#1: bool = (== gtxn_type%0#1 pay)
        (assert gtxn_type_matches%0#1) // transaction type is pay
        let tmp%0#5: uint64 = ((gtxns Amount) 0u)
        (assert tmp%0#5)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // test2_route_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%0#4: uint64 = (global GroupSize)
        let i#0: uint64 = 0u
        goto block@22
    block@22: // for_header_L21
        let i#1: uint64 = φ(i#0 <- block@4, i#2 <- block@34)
        let continue_looping%0#0: bool = (< i#1 tmp%0#4)
        goto continue_looping%0#0 ? block@23 : block@35
    block@23: // for_body_L21
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) i#1)
        let tmp%1#3: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#3 ? block@24 : block@25
    block@24: // if_body_L24
        let tmp%2#3: uint64 = ((gtxns ApplicationID) i#1)
        let tmp%3#3: bytes = (itob tmp%2#3)
        (log tmp%3#3)
        goto block@34
    block@25: // after_if_else_L24
        let tmp%4#2: bool = (== awst_tmp%0#0 4u)
        goto tmp%4#2 ? block@26 : block@27
    block@26: // if_body_L27
        let tmp%5#2: uint64 = ((gtxns XferAsset) i#1)
        let tmp%6#2: bytes = (itob tmp%5#2)
        (log tmp%6#2)
        goto block@34
    block@27: // after_if_else_L27
        let tmp%7#2: bool = (== awst_tmp%0#0 3u)
        goto tmp%7#2 ? block@28 : block@29
    block@28: // if_body_L30
        let tmp%8#2: uint64 = ((gtxns ConfigAsset) i#1)
        let tmp%9#2: bytes = (itob tmp%8#2)
        (log tmp%9#2)
        goto block@34
    block@29: // after_if_else_L30
        let tmp%10#2: bool = (== awst_tmp%0#0 1u)
        goto tmp%10#2 ? block@30 : block@31
    block@30: // if_body_L33
        let tmp%11#1: bytes[32] = ((gtxns Receiver) i#1)
        (log tmp%11#1)
        goto block@34
    block@31: // after_if_else_L33
        let tmp%12#1: bool = (== awst_tmp%0#0 2u)
        goto tmp%12#1 ? block@32 : block@33
    block@32: // if_body_L36
        let tmp%13#1: bytes = ((gtxns VotePK) i#1)
        (log tmp%13#1)
        goto block@34
    block@33: // after_if_else_L36
        let tmp%14#1: uint64 = ((gtxns FreezeAsset) i#1)
        let tmp%15#1: bytes = (itob tmp%14#1)
        (log tmp%15#1)
        goto block@34
    block@34: // L23
        let i#2: uint64 = (+ i#1 1u)
        goto block@22
    block@35: // after_for_L21
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // test3_route_L46
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let tmp%0#3: uint64 = (txn OnCompletion)
        let tmp%1#2: bool = (! tmp%0#3)
        (assert tmp%1#2) // OCA must be NoOp
        let tmp%2#2: uint64 = (txn TypeEnum)
        let tmp%3#2: bool = (== tmp%2#2 6u)
        (assert tmp%3#2)
        (log "Hello test4")
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // test4_route_L52
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let tmp%19#0: uint64 = (txn GroupIndex)
        let other#0: uint64 = (- tmp%19#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) other#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 appl)
        (assert gtxn_type_matches%0#0) // transaction type is appl
        let tmp%0#2: uint64 = ((gtxns OnCompletion) other#0)
        let tmp%1#1: bool = (! tmp%0#2)
        (assert tmp%1#1) // Other txn must be NoOp
        let tmp%3#1: bool = (== gtxn_type%0#0 6u)
        (assert tmp%3#1)
        let tmp%4#1: bytes = ((gtxns LastLog) other#0)
        let tmp%5#1: bool = (== tmp%4#1 "Hello test4")
        (assert tmp%5#1)
        let tmp%6#1: bytes = ((gtxnsas ApplicationArgs) other#0 0u)
        let tmp%7#1: bool = (== tmp%6#1 method "test3()void")
        (assert tmp%7#1)
        let tmp%8#1: uint64 = ((gtxns ApplicationID) other#0)
        let tmp%9#1: uint64 = (global CurrentApplicationID)
        let tmp%10#1: bool = (== tmp%8#1 tmp%9#1)
        (assert tmp%10#1)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L15
        let tmp%20#0: uint64 = (txn OnCompletion)
        goto tmp%20#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L15
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // can only call when creating
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L15
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1 <- block@35, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0