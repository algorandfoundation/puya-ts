main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L3
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, method "test2()void" => block@4, * => block@11}
    block@3: // test_route_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#3: uint64 = ((gtxns Amount) 0u)
        (assert tmp%0#3)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // test2_route_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%0#2: uint64 = (global GroupSize)
        let i#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L9
        let i#1: uint64 = φ(i#0 <- block@4, i#2 <- block@28)
        let continue_looping%0#0: bool = (< i#1 tmp%0#2)
        goto continue_looping%0#0 ? block@17 : block@29
    block@17: // for_body_L9
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) i#1)
        let tmp%1#1: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#1 ? block@18 : block@19
    block@18: // if_body_L12
        let tmp%2#1: uint64 = ((gtxns ApplicationID) i#1)
        let tmp%3#1: bytes = (itob tmp%2#1)
        (log tmp%3#1)
        goto block@28
    block@19: // after_if_else_L12
        let tmp%4#1: bool = (== awst_tmp%0#0 4u)
        goto tmp%4#1 ? block@20 : block@21
    block@20: // if_body_L15
        let tmp%5#1: uint64 = ((gtxns XferAsset) i#1)
        let tmp%6#1: bytes = (itob tmp%5#1)
        (log tmp%6#1)
        goto block@28
    block@21: // after_if_else_L15
        let tmp%7#1: bool = (== awst_tmp%0#0 3u)
        goto tmp%7#1 ? block@22 : block@23
    block@22: // if_body_L18
        let tmp%8#1: uint64 = ((gtxns ConfigAsset) i#1)
        let tmp%9#1: bytes = (itob tmp%8#1)
        (log tmp%9#1)
        goto block@28
    block@23: // after_if_else_L18
        let tmp%10#1: bool = (== awst_tmp%0#0 1u)
        goto tmp%10#1 ? block@24 : block@25
    block@24: // if_body_L21
        let tmp%11#1: bytes[32] = ((gtxns Receiver) i#1)
        (log tmp%11#1)
        goto block@28
    block@25: // after_if_else_L21
        let tmp%12#1: bool = (== awst_tmp%0#0 2u)
        goto tmp%12#1 ? block@26 : block@27
    block@26: // if_body_L24
        let tmp%13#1: bytes = ((gtxns VotePK) i#1)
        (log tmp%13#1)
        goto block@28
    block@27: // after_if_else_L24
        let tmp%14#0: uint64 = ((gtxns FreezeAsset) i#1)
        let tmp%15#0: bytes = (itob tmp%14#0)
        (log tmp%15#0)
        goto block@28
    block@28: // L11
        let i#2: uint64 = (+ i#1 1u)
        goto block@16
    block@29: // after_for_L9
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L3
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L3
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L3
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1 <- block@29, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0