main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, method "test2()void" => block@4, method "test3()void" => block@5, method "test4(appl)void" => block@6, method "reflectAllPay(pay)(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])" => block@7, * => block@14}
    block@3: // test_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let gtxn_type%0#1: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#1: bool = (== gtxn_type%0#1 pay)
        (assert gtxn_type_matches%0#1) // transaction type is pay
        let tmp%0#6: uint64 = ((gtxns Amount) 0u)
        (assert tmp%0#6)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // test2_route_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%0#5: uint64 = (global GroupSize)
        let i#0: uint64 = 0u
        goto block@25
    block@25: // for_header_L21
        let i#1: uint64 = Ï†(i#0 <- block@4, i#2 <- block@37)
        let continue_looping%0#0: bool = (< i#1 tmp%0#5)
        goto continue_looping%0#0 ? block@26 : block@38
    block@26: // for_body_L21
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) i#1)
        let tmp%1#4: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#4 ? block@27 : block@28
    block@27: // if_body_L24
        let tmp%2#4: uint64 = ((gtxns ApplicationID) i#1)
        let tmp%3#4: bytes[8] = (itob tmp%2#4)
        (log tmp%3#4)
        goto block@37
    block@28: // after_if_else_L24
        let tmp%4#3: bool = (== awst_tmp%0#0 4u)
        goto tmp%4#3 ? block@29 : block@30
    block@29: // if_body_L27
        let tmp%5#3: uint64 = ((gtxns XferAsset) i#1)
        let tmp%6#3: bytes[8] = (itob tmp%5#3)
        (log tmp%6#3)
        goto block@37
    block@30: // after_if_else_L27
        let tmp%7#3: bool = (== awst_tmp%0#0 3u)
        goto tmp%7#3 ? block@31 : block@32
    block@31: // if_body_L30
        let tmp%8#3: uint64 = ((gtxns ConfigAsset) i#1)
        let tmp%9#3: bytes[8] = (itob tmp%8#3)
        (log tmp%9#3)
        goto block@37
    block@32: // after_if_else_L30
        let tmp%10#3: bool = (== awst_tmp%0#0 1u)
        goto tmp%10#3 ? block@33 : block@34
    block@33: // if_body_L33
        let tmp%11#2: bytes[32] = ((gtxns Receiver) i#1)
        (log tmp%11#2)
        goto block@37
    block@34: // after_if_else_L33
        let tmp%12#2: bool = (== awst_tmp%0#0 2u)
        goto tmp%12#2 ? block@35 : block@36
    block@35: // if_body_L36
        let tmp%13#2: bytes[32] = ((gtxns VotePK) i#1)
        (log tmp%13#2)
        goto block@37
    block@36: // after_if_else_L36
        let tmp%14#1: uint64 = ((gtxns FreezeAsset) i#1)
        let tmp%15#1: bytes[8] = (itob tmp%14#1)
        (log tmp%15#1)
        goto block@37
    block@37: // L23
        let i#2: uint64 = (+ i#1 1u)
        goto block@25
    block@38: // after_for_L21
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // test3_route_L46
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let tmp%0#4: uint64 = (txn OnCompletion)
        let tmp%1#3: bool = (! tmp%0#4)
        (assert tmp%1#3) // OCA must be NoOp
        let tmp%2#3: uint64 = (txn TypeEnum)
        let tmp%3#3: bool = (== tmp%2#3 6u)
        (assert tmp%3#3)
        (log "Hello test4")
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // test4_route_L52
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let tmp%19#0: uint64 = (txn GroupIndex)
        let other#0: uint64 = (- tmp%19#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) other#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 appl)
        (assert gtxn_type_matches%0#0) // transaction type is appl
        let tmp%0#3: uint64 = ((gtxns OnCompletion) other#0)
        let tmp%1#2: bool = (! tmp%0#3)
        (assert tmp%1#2) // Other txn must be NoOp
        let tmp%3#2: bool = (== gtxn_type%0#0 6u)
        (assert tmp%3#2)
        let tmp%4#2: bytes = ((gtxns LastLog) other#0)
        let tmp%5#2: bool = (== tmp%4#2 "Hello test4")
        (assert tmp%5#2)
        let tmp%6#2: bytes = ((gtxnsas ApplicationArgs) other#0 0u)
        let tmp%7#2: bool = (== tmp%6#2 method "test3()void")
        (assert tmp%7#2)
        let tmp%8#2: uint64 = ((gtxns ApplicationID) other#0)
        let tmp%9#2: uint64 = (global CurrentApplicationID)
        let tmp%10#2: bool = (== tmp%8#2 tmp%9#2)
        (assert tmp%10#2)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // reflectAllPay_route_L60
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let tmp%24#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%24#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%0#2: bytes[32] = ((gtxns Sender) pay#0)
        let tmp%1#1: uint64 = ((gtxns Fee) pay#0)
        let tmp%2#1: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%3#1: uint64 = ((gtxns FirstValidTime) pay#0)
        let tmp%4#1: uint64 = ((gtxns LastValid) pay#0)
        let tmp%5#1: bytes = ((gtxns Note) pay#0)
        let tmp%6#1: bytes[32] = ((gtxns Lease) pay#0)
        let tmp%7#1: bytes = ((gtxns Type) pay#0)
        let tmp%8#1: uint64 = ((gtxns GroupIndex) pay#0)
        let tmp%9#1: bytes[32] = ((gtxns TxID) pay#0)
        let tmp%10#1: bytes[32] = ((gtxns RekeyTo) pay#0)
        let tmp%11#1: bytes[32] = ((gtxns Receiver) pay#0)
        let tmp%12#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%13#1: bytes[32] = ((gtxns CloseRemainderTo) pay#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%1#1)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%2#1)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%3#1)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%4#1)
        let length%1#0: uint64 = (len tmp%5#1)
        let as_bytes%0#0: bytes[8] = (itob length%1#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%5#1)
        let length%3#0: uint64 = (len tmp%7#1)
        let as_bytes%1#0: bytes[8] = (itob length%3#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%7#1)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%8#1)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%12#1)
        let encoded_tuple_buffer%2#0: bytes = (concat tmp%0#2 val_as_bytes%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 0x00f4)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 244u data_length%0#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 tmp%6#1)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 val_as_bytes%4#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 tmp%9#1)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 tmp%10#1)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 tmp%11#1)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 val_as_bytes%5#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 tmp%13#1)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 encoded_value%0#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 encoded_value%1#0)
        let tmp%25#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%16#0)
        (log tmp%25#0)
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // bare_routing_L15
        let tmp%26#0: uint64 = (txn OnCompletion)
        goto tmp%26#0 ? block@14 : block@11
    block@11: // __algots__.defaultCreate_L15
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // can only call when creating
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@14: // after_if_else_L15
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#1 <- block@38, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#5 <- block@11, tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0