main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L16
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test()void" => block@4, method "test2()void" => block@5, method "test3()void" => block@6, method "test4(appl)void" => block@7, method "reflectAllPay(pay)(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])" => block@8, method "test5(txn)uint64" => block@9, * => block@12}
    block@4: // test_route_L17
        let gtxn_type%0#2: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#2: bool = (== gtxn_type%0#2 pay)
        (assert gtxn_type_matches%0#2) // transaction type is pay
        let tmp%0#10: uint64 = ((gtxns Amount) 0u)
        (assert tmp%0#10)
        exit 1u
    block@5: // test2_route_L21
        let tmp%0#9: uint64 = (global GroupSize)
        let value_internal%0#0: uint64 = 0u
        goto block@30
    block@30: // for_header_L22
        let temp#0: uint64 = φ(value_internal%0#0 <- block@5, value_internal%0#2 <- block@42)
        let continue_looping%0#0: bool = (< temp#0 tmp%0#9)
        goto continue_looping%0#0 ? block@31 : block@43
    block@31: // for_body_L22
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) temp#0)
        let tmp%1#7: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#7 ? block@32 : block@33
    block@32: // if_body_L25
        let tmp%2#5: uint64 = ((gtxns ApplicationID) temp#0)
        let tmp%3#6: bytes[8] = (itob tmp%2#5)
        (log tmp%3#6)
        goto block@42
    block@33: // after_if_else_L25
        let tmp%4#3: bool = (== awst_tmp%0#0 4u)
        goto tmp%4#3 ? block@34 : block@35
    block@34: // if_body_L28
        let tmp%5#3: uint64 = ((gtxns XferAsset) temp#0)
        let tmp%6#3: bytes[8] = (itob tmp%5#3)
        (log tmp%6#3)
        goto block@42
    block@35: // after_if_else_L28
        let tmp%7#3: bool = (== awst_tmp%0#0 3u)
        goto tmp%7#3 ? block@36 : block@37
    block@36: // if_body_L31
        let tmp%8#3: uint64 = ((gtxns ConfigAsset) temp#0)
        let tmp%9#3: bytes[8] = (itob tmp%8#3)
        (log tmp%9#3)
        goto block@42
    block@37: // after_if_else_L31
        let tmp%10#3: bool = (== awst_tmp%0#0 1u)
        goto tmp%10#3 ? block@38 : block@39
    block@38: // if_body_L34
        let tmp%11#1: account = ((gtxns Receiver) temp#0)
        (log tmp%11#1)
        goto block@42
    block@39: // after_if_else_L34
        let tmp%12#0: bool = (== awst_tmp%0#0 2u)
        goto tmp%12#0 ? block@40 : block@41
    block@40: // if_body_L37
        let tmp%13#0: bytes[32] = ((gtxns VotePK) temp#0)
        (log tmp%13#0)
        goto block@42
    block@41: // after_if_else_L37
        let tmp%14#0: uint64 = ((gtxns FreezeAsset) temp#0)
        let tmp%15#0: bytes[8] = (itob tmp%14#0)
        (log tmp%15#0)
        goto block@42
    block@42: // L24
        let value_internal%0#2: uint64 = (+ temp#0 1u)
        goto block@30
    block@43: // after_for_L22
        exit 1u
    block@6: // test3_route_L47
        let tmp%0#8: uint64 = (txn OnCompletion)
        let tmp%1#6: bool = (! tmp%0#8)
        (assert tmp%1#6) // OCA must be NoOp
        let tmp%2#4: uint64 = (txn TypeEnum)
        let tmp%3#5: bool = (== tmp%2#4 6u)
        (assert tmp%3#5)
        (log "Hello test4")
        exit 1u
    block@7: // test4_route_L53
        let tmp%0#6: uint64 = (txn GroupIndex)
        let other#0: uint64 = (- tmp%0#6 1u)
        let gtxn_type%0#1: uint64 = ((gtxns TypeEnum) other#0)
        let gtxn_type_matches%0#1: bool = (== gtxn_type%0#1 appl)
        (assert gtxn_type_matches%0#1) // transaction type is appl
        let tmp%0#7: uint64 = ((gtxns OnCompletion) other#0)
        let tmp%1#5: bool = (! tmp%0#7)
        (assert tmp%1#5) // Other txn must be NoOp
        let tmp%3#4: bool = (== gtxn_type%0#1 6u)
        (assert tmp%3#4)
        let tmp%4#2: bytes = ((gtxns LastLog) other#0)
        let tmp%5#2: bool = (== tmp%4#2 "Hello test4")
        (assert tmp%5#2)
        let tmp%6#2: bytes = ((gtxnsas ApplicationArgs) other#0 0u)
        let tmp%7#2: bool = (== tmp%6#2 method "test3()void")
        (assert tmp%7#2)
        let tmp%8#2: uint64 = ((gtxns ApplicationID) other#0)
        let tmp%9#2: uint64 = (global CurrentApplicationID)
        let tmp%10#2: bool = (== tmp%8#2 tmp%9#2)
        (assert tmp%10#2)
        exit 1u
    block@8: // reflectAllPay_route_L61
        let tmp%0#4: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%0#4 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_bytes[32]%0#0: bytes[32] = ((gtxns Sender) pay#0)
        let tmp%0#5: uint64 = ((gtxns Fee) pay#0)
        let tmp%1#4: uint64 = ((gtxns FirstValid) pay#0)
        let tmp%2#3: uint64 = ((gtxns FirstValidTime) pay#0)
        let tmp%3#3: uint64 = ((gtxns LastValid) pay#0)
        let tmp%4#1: bytes = ((gtxns Note) pay#0)
        let tmp%5#1: bytes[32] = ((gtxns Lease) pay#0)
        let tmp%6#1: bytes = ((gtxns Type) pay#0)
        let tmp%7#1: uint64 = ((gtxns GroupIndex) pay#0)
        let tmp%8#1: bytes[32] = ((gtxns TxID) pay#0)
        let reinterpret_bytes[32]%1#0: bytes[32] = ((gtxns RekeyTo) pay#0)
        let reinterpret_bytes[32]%2#0: bytes[32] = ((gtxns Receiver) pay#0)
        let tmp%9#1: uint64 = ((gtxns Amount) pay#0)
        let reinterpret_bytes[32]%3#0: bytes[32] = ((gtxns CloseRemainderTo) pay#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#5)
        let aggregate%head%1#0: bytes = (concat reinterpret_bytes[32]%0#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#4)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%2#3)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%val_as_bytes%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%3#3)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%val_as_bytes%3#0)
        let aggregate%length%1#0: uint64 = (len tmp%4#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%4#1)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x00f4)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 244u aggregate%data_length%0#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 tmp%5#1)
        let aggregate%length%3#0: uint64 = (len tmp%6#1)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%6#1)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%7#1)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%val_as_bytes%4#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 tmp%8#1)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 reinterpret_bytes[32]%1#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 reinterpret_bytes[32]%2#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%9#1)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%val_as_bytes%5#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 reinterpret_bytes[32]%3#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%13#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let tmp%2#2: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%2#2)
        exit 1u
    block@9: // test5_route_L80
        let tmp%0#2: uint64 = (txn GroupIndex)
        let txn#0: uint64 = (- tmp%0#2 1u)
        let tmp%0#3: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%1#2: bool = (== tmp%0#3 1u)
        goto tmp%1#2 ? block@17 : block@18
    block@17: // if_body_L81
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5%0#0: uint64 = 1u
        goto block@21
    block@18: // else_body_L83
        let tmp%3#2: bool = (== tmp%0#3 4u)
        goto tmp%3#2 ? block@19 : block@20
    block@19: // if_body_L83
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5%0#1: uint64 = 0u
        goto block@21
    block@20: // after_if_else_L83
        let tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5%0#2: uint64 = 0u
        goto block@21
    block@21: // after_inlined_tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5_L80
        let tmp%1#1: uint64 = φ(tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5%0#0 <- block@17, tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5%0#1 <- block@19, tests/approvals/gtxns.algo.ts::GtxnsAlgo.test5%0#2 <- block@20)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%1#1)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%6#0)
        (log tmp%3#1)
        exit 1u
    block@12: // after_if_else_L16
        fail
    block@13: // __algots__.defaultCreate_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u