#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    // tests/approvals/avm11.algo.ts:23-24
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    pushbytes 0x52448a31 // method "testNewOps()void"
    txna ApplicationArgs 0
    match main_testNewOps_route@3
    err

main_testNewOps_route@3:
    // tests/approvals/avm11.algo.ts:25
    // testNewOps() {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    // tests/approvals/avm11.algo.ts:28
    // assert(op.mimc(MimcConfigurations.BLS12_381Mp111, x))
    pushbytes 0x00000000000000000000000000000000000000000000000000000000499602d2
    mimc BLS12_381Mp111
    pop
    // tests/approvals/avm11.algo.ts:29
    // assert(op.onlineStake())
    online_stake
    assert
    // tests/approvals/avm11.algo.ts:37
    // assert(op.Block.blkProposer(0) !== Global.zeroAddress, 'proposer')
    intc_0 // 0
    block BlkProposer
    global ZeroAddress
    !=
    assert // proposer
    // tests/approvals/avm11.algo.ts:38
    // assert(op.Block.blkFeesCollected(0), 'fees collected')
    intc_0 // 0
    block BlkFeesCollected
    assert // fees collected
    // tests/approvals/avm11.algo.ts:39
    // assert(op.Block.blkBonus(0), 'bonus')
    intc_0 // 0
    block BlkBonus
    assert // bonus
    // tests/approvals/avm11.algo.ts:41
    // assert(op.Block.blkFeeSink(0) !== Global.zeroAddress, 'fee sink')
    intc_0 // 0
    block BlkFeeSink
    global ZeroAddress
    !=
    assert // fee sink
    // tests/approvals/avm11.algo.ts:42
    // assert(op.Block.blkProtocol(0), 'protocol')
    intc_0 // 0
    block BlkProtocol
    len
    assert // protocol
    // tests/approvals/avm11.algo.ts:43
    // assert(op.Block.blkTxnCounter(0), 'txn counter')
    intc_0 // 0
    block BlkTxnCounter
    assert // txn counter
    // tests/approvals/avm11.algo.ts:44
    // assert(op.Block.blkProposerPayout(0), 'proposer payout')
    intc_0 // 0
    block BlkProposerPayout
    assert // proposer payout
    // tests/approvals/avm11.algo.ts:47
    // assert(op.Global.payoutsEnabled, 'payouts_enabled')
    global PayoutsEnabled
    assert // payouts_enabled
    // tests/approvals/avm11.algo.ts:48
    // assert(op.Global.payoutsGoOnlineFee, 'payouts_go_online_fee')
    global PayoutsGoOnlineFee
    assert // payouts_go_online_fee
    // tests/approvals/avm11.algo.ts:49
    // assert(op.Global.payoutsPercent, 'payouts_percent')
    global PayoutsPercent
    assert // payouts_percent
    // tests/approvals/avm11.algo.ts:50
    // assert(op.Global.payoutsMinBalance, 'payouts_min_balance')
    global PayoutsMinBalance
    assert // payouts_min_balance
    // tests/approvals/avm11.algo.ts:51
    // assert(op.Global.payoutsMaxBalance, 'payouts_max_balance')
    global PayoutsMaxBalance
    assert // payouts_max_balance
    // tests/approvals/avm11.algo.ts:53
    // const [g, h] = op.VoterParams.voterBalance(0)
    intc_0 // 0
    voter_params_get VoterBalance
    popn 2
    // tests/approvals/avm11.algo.ts:54
    // const [i, j] = op.VoterParams.voterIncentiveEligible(0)
    intc_0 // 0
    voter_params_get VoterIncentiveEligible
    popn 2
    // tests/approvals/avm11.algo.ts:25
    // testNewOps() {
    intc_1 // 1
    return

main___algots__.defaultCreate@5:
    // tests/approvals/avm11.algo.ts:23-24
    // @contract({ name: 'AVM11Contract', avmVersion: 11 })
    // export class Avm11Contract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return
