main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L23
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testNewOps()void" => block@3, * => block@10}
    block@3: // testNewOps_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%0#2: bytes[32] = ((mimc BLS12_381Mp111) 0x00000000000000000000000000000000000000000000000000000000499602d2)
        let reinterpret_bool%1#0: bool = online_stake
        (assert reinterpret_bool%1#0)
        let tmp%4#1: account = ((block BlkProposer) 0u)
        let tmp%5#1: account = (global ZeroAddress)
        let tmp%6#1: bool = (!= tmp%4#1 tmp%5#1)
        (assert tmp%6#1) // proposer
        let reinterpret_bool%2#0: bool = ((block BlkFeesCollected) 0u)
        (assert reinterpret_bool%2#0) // fees collected
        let reinterpret_bool%3#0: bool = ((block BlkBonus) 0u)
        (assert reinterpret_bool%3#0) // bonus
        let tmp%8#1: account = ((block BlkFeeSink) 0u)
        let tmp%9#1: account = (global ZeroAddress)
        let tmp%10#0: bool = (!= tmp%8#1 tmp%9#1)
        (assert tmp%10#0) // fee sink
        let tmp%11#0: bytes = ((block BlkProtocol) 0u)
        let reinterpret_bool%5#0: bool = (len tmp%11#0)
        (assert reinterpret_bool%5#0) // protocol
        let reinterpret_bool%6#0: bool = ((block BlkTxnCounter) 0u)
        (assert reinterpret_bool%6#0) // txn counter
        let reinterpret_bool%7#0: bool = ((block BlkProposerPayout) 0u)
        (assert reinterpret_bool%7#0) // proposer payout
        let tmp%12#0: bool = (global PayoutsEnabled)
        (assert tmp%12#0) // payouts_enabled
        let reinterpret_bool%8#0: bool = (global PayoutsGoOnlineFee)
        (assert reinterpret_bool%8#0) // payouts_go_online_fee
        let reinterpret_bool%9#0: bool = (global PayoutsPercent)
        (assert reinterpret_bool%9#0) // payouts_percent
        let reinterpret_bool%10#0: bool = (global PayoutsMinBalance)
        (assert reinterpret_bool%10#0) // payouts_min_balance
        let reinterpret_bool%11#0: bool = (global PayoutsMaxBalance)
        (assert reinterpret_bool%11#0) // payouts_max_balance
        let (g#0: uint64, h#0: bool) = ((voter_params_get VoterBalance) 0u)
        let (i#0: bool, j#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
        let tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L23
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L23
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L23
        let tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__%0#1 <- block@7, tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0