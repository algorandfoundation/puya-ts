contract Hello
{
  globals {
    ["greeting"]: string
  }
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  create(): void
  {
    GlobalState["greeting"]: string = greeting
  }
  
  constructor(): void
  {
    super.constructor()
  }
  
  HelloBase::delete(): void
  {
  }
  
  HelloBase::update(): void
  {
  }
  
  HelloBase::greet(): string
  {
    return "" + GlobalState["greeting"] + " " + name
  }
  
  HelloBase::constructor(): void
  {
    void
    GlobalState["greeting"]: string = ""
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  BaseContract::constructor(): void
  {
  }
  
}
contract HelloTemplate
{
  globals {
    ["greeting"]: string
  }
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  create(): void
  {
  }
  
  constructor(): void
  {
    super.constructor()
    GlobalState["greeting"]: string = TemplateVar[string](TMPL_GREETING)
  }
  
  HelloBase::delete(): void
  {
  }
  
  HelloBase::update(): void
  {
  }
  
  HelloBase::greet(): string
  {
    return "" + GlobalState["greeting"] + " " + name
  }
  
  HelloBase::constructor(): void
  {
    void
    GlobalState["greeting"]: string = ""
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  BaseContract::constructor(): void
  {
  }
  
}
contract HelloTemplateCustomPrefix
{
  globals {
    ["greeting"]: string
  }
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  create(): void
  {
  }
  
  constructor(): void
  {
    super.constructor()
    GlobalState["greeting"]: string = TemplateVar[string](PRFX_GREETING)
  }
  
  HelloBase::delete(): void
  {
  }
  
  HelloBase::update(): void
  {
  }
  
  HelloBase::greet(): string
  {
    return "" + GlobalState["greeting"] + " " + name
  }
  
  HelloBase::constructor(): void
  {
    void
    GlobalState["greeting"]: string = ""
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  BaseContract::constructor(): void
  {
  }
  
}
subroutine getBigBytes(): bytes
{
  return bzero(4096)
}
contract LargeProgram
{
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  getBigBytesLength(): uint64
  {
    return len(tests/approvals/precompiled-apps.algo.ts::getBigBytes())
  }
  
  delete(): void
  {
  }
  
  constructor(): void
  {
    void
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  BaseContract::constructor(): void
  {
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}

logicsig tests/approvals/precompiled-apps.algo.ts::TerribleCustodialAccount {
  return True
}