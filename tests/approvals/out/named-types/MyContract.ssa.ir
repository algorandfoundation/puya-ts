contract tests/approvals/named-types.algo.ts::MyContract:
    program approval:
        subroutine @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L21
                tests/approvals/named-types.algo.ts::MyContract.constructor()
                goto block@2
            block@2: // entrypoint_L21
                let tmp%0#0: bool = tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__() -> bool:
            block@0: // L21
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@8
            block@1: // abi_routing_L21
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "getXY()(uint64,uint64)" => block@2, method "getYX()(uint64,uint64)" => block@3, method "getAnon()(uint64,uint64)" => block@4, method "testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))" => block@5, * => block@6}
            block@2: // getXY_route_L22
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getXY()
                let val_as_bytes%0#0: bytes = (itob elements_to_encode%0#0)
                let val_as_bytes%1#0: bytes = (itob elements_to_encode%1#0)
                let current_tail_offset%0#0: uint64 = 16u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
                (log tmp%7#0)
                return 1u
            block@3: // getYX_route_L29
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (== tmp%8#0 NoOp)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                let tmp%11#0: bool = (!= tmp%10#0 0u)
                (assert tmp%11#0) // is not creating
                let (elements_to_encode%2#0: uint64, elements_to_encode%3#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getYX()
                let val_as_bytes%2#0: bytes = (itob elements_to_encode%2#0)
                let val_as_bytes%3#0: bytes = (itob elements_to_encode%3#0)
                let current_tail_offset%1#0: uint64 = 16u
                let encoded_tuple_buffer%3#0: bytes = 0x
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%2#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
                let tmp%12#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%5#0)
                (log tmp%12#0)
                return 1u
            block@4: // getAnon_route_L36
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (== tmp%13#0 NoOp)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: uint64 = (txn ApplicationID)
                let tmp%16#0: bool = (!= tmp%15#0 0u)
                (assert tmp%16#0) // is not creating
                let (elements_to_encode%4#0: uint64, elements_to_encode%5#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getAnon()
                let val_as_bytes%4#0: bytes = (itob elements_to_encode%4#0)
                let val_as_bytes%5#0: bytes = (itob elements_to_encode%5#0)
                let current_tail_offset%2#0: uint64 = 16u
                let encoded_tuple_buffer%6#0: bytes = 0x
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%4#0)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%5#0)
                let tmp%17#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%8#0)
                (log tmp%17#0)
                return 1u
            block@5: // testing_route_L43
                let tmp%18#0: uint64 = (txn OnCompletion)
                let tmp%19#0: bool = (== tmp%18#0 NoOp)
                (assert tmp%19#0) // OnCompletion is NoOp
                let tmp%20#0: uint64 = (txn ApplicationID)
                let tmp%21#0: bool = (!= tmp%20#0 0u)
                (assert tmp%21#0) // is not creating
                let (elements_to_encode%6#0: uint64, elements_to_encode%7#0: uint64, elements_to_encode%8#0: uint64, elements_to_encode%9#0: uint64, elements_to_encode%10#0: uint64, elements_to_encode%11#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.testing()
                let val_as_bytes%6#0: bytes = (itob elements_to_encode%6#0)
                let val_as_bytes%7#0: bytes = (itob elements_to_encode%7#0)
                let current_tail_offset%3#0: uint64 = 16u
                let encoded_tuple_buffer%9#0: bytes = 0x
                let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%6#0)
                let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 val_as_bytes%7#0)
                let val_as_bytes%8#0: bytes = (itob elements_to_encode%8#0)
                let val_as_bytes%9#0: bytes = (itob elements_to_encode%9#0)
                let current_tail_offset%4#0: uint64 = 16u
                let encoded_tuple_buffer%12#0: bytes = 0x
                let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 val_as_bytes%8#0)
                let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 val_as_bytes%9#0)
                let val_as_bytes%10#0: bytes = (itob elements_to_encode%10#0)
                let val_as_bytes%11#0: bytes = (itob elements_to_encode%11#0)
                let current_tail_offset%5#0: uint64 = 16u
                let encoded_tuple_buffer%15#0: bytes = 0x
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 val_as_bytes%10#0)
                let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 val_as_bytes%11#0)
                let current_tail_offset%6#0: uint64 = 48u
                let encoded_tuple_buffer%18#0: bytes = 0x
                let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_tuple_buffer%11#0)
                let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 encoded_tuple_buffer%14#0)
                let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 encoded_tuple_buffer%17#0)
                let tmp%22#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%21#0)
                (log tmp%22#0)
                return 1u
            block@6: // switch_case_default_L21
                goto block@7
            block@7: // switch_case_next_L21
                goto block@9
            block@8: // bare_routing_L21
                goto block@9
            block@9: // after_if_else_L21
                return 0u
        
        subroutine tests/approvals/named-types.algo.ts::MyContract.getXY() -> <uint64, uint64>:
            block@0: // L22
                return 1u 2u
        
        subroutine tests/approvals/named-types.algo.ts::MyContract.getYX() -> <uint64, uint64>:
            block@0: // L29
                return 111u 222u
        
        subroutine tests/approvals/named-types.algo.ts::MyContract.getAnon() -> <uint64, uint64>:
            block@0: // L36
                return 3u 4u
        
        subroutine tests/approvals/named-types.algo.ts::MyContract.testing() -> <uint64, uint64, uint64, uint64, uint64, uint64>:
            block@0: // L43
                let (a.x#0: uint64, a.y#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getXY()
                let (b.y#0: uint64, b.x#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getYX()
                let (c.x#0: uint64, c.y#0: uint64) = tests/approvals/named-types.algo.ts::MyContract.getAnon()
                return a.x#0 a.y#0 b.y#0 b.x#0 c.x#0 c.y#0
        
        subroutine tests/approvals/named-types.algo.ts::MyContract.constructor() -> void:
            block@0: // L21
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u