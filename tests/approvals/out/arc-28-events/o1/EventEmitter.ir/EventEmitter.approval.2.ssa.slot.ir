main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emitSwapped(uint8,uint8)void" => block@3, method "emitCustom(string,bool)void" => block@4, method "emitDynamicBytes(byte[],byte[])void" => block@5, * => block@12}
    block@3: // emitSwapped_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 2)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(reinterpret_bytes[1]%0#0, reinterpret_bytes[1]%1#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // emitCustom_route_L32
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: bytes = (txna ApplicationArgs 1)
        let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%13#0: bool = (getbit reinterpret_bytes[1]%2#0 0u)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(tmp%12#0, tmp%13#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // emitDynamicBytes_route_L37
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        let tmp%18#0: bytes = (txna ApplicationArgs 1)
        let tmp%19#0: bytes = ((extract 2 0) tmp%18#0)
        let tmp%20#0: bytes = (txna ApplicationArgs 2)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(tmp%19#0, tmp%20#0)
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L13
        let tmp%21#0: uint64 = (txn OnCompletion)
        goto tmp%21#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L13
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // can only call when creating
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L13
        let tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#3 <- block@9, tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(a: bytes[1], b: bytes[1]) -> void:
    block@0: // L14
        let y#0: bytes[2] = (concat b#0 a#0)
        let event%0#0: bytes = (concat method "Swapped(uint8,uint8)" y#0)
        (log event%0#0)
        (log event%0#0)
        let event%2#0: bytes = (concat method "SwappedArc4(uint8,uint8)" y#0)
        (log event%2#0)
        (log event%0#0)
        (log event%0#0)
        let encoded_tuple_buffer%17#0: bytes = (concat b#0 b#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%17#0 a#0)
        let event%5#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" encoded_tuple_buffer%20#0)
        (log event%5#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(arg0: bytes, arg1: bool) -> void:
    block@0: // L32
        let length%0#0: uint64 = (len arg0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 arg0#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u arg1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x0003 encoded_bool%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let event%0#0: bytes = (concat method "Custom(string,bool)" encoded_tuple_buffer%3#0)
        (log event%0#0)
        (log event%0#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(x: bytes, y: bytes) -> void:
    block@0: // L37
        let length%0#0: uint64 = (len x#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 x#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%2#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x0004 offset_as_uint16%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 y#0)
        let event%0#0: bytes = (concat method "DB(byte[],byte[])" encoded_tuple_buffer%4#0)
        (log event%0#0)
        return 