contract ForLoopsAlgo
{
  approvalProgram(): bool
  {
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  test_for_loop(start: uint64, stop: uint64, step: uint64): uint64
  {
    total: uint64 = 0
    i: uint64 = start
    while (i < stop) {
      total: uint64 = total + i
      i: uint64 = i + step
    }
    return total
  }
  
  test_for_loop_break(start: uint64, stop: uint64, step: uint64): uint64
  {
    total: uint64 = 0
    i: uint64 = start
    while (i < stop) {
      total: uint64 = total + i
      if (total > 10) {
        goto #loop₁ᵇ
      }
      i: uint64 = i + step
    }
    #loop₁ᵇ:
    return total
  }
  
  test_for_loop_continue(start: uint64, stop: uint64, step: uint64): uint64
  {
    total: uint64 = 0
    i: uint64 = start
    while (i < stop) {
      if (i % 5 == 0) {
        goto #loop₁ᶜ
      }
      total: uint64 = total + i
      #loop₁ᶜ:
      i: uint64 = i + step
    }
    return total
  }
  
  test_for_loop_labelled(start: uint64, stop: uint64, step: uint64): uint64
  {
    total: uint64 = 0
    i: uint64 = start
    while (i < stop) {
      j: uint64 = start
      while (j < stop) {
        total: uint64 = total + i + j
        if (i * j > stop) {
          goto outer₁ᵇ
        }
        j: uint64 = j + step
      }
      i: uint64 = i + step
    }
    outer₁ᵇ:
    return total
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}