contract StructDemo
{
  approvalProgram(): bool
  {
    if (!Boolean(txn<ApplicationID>())) {
      this.constructor()
    }
    return arc4Router()
  }
  
  clearProgram(): bool
  {
    return True
  }
  
  testVectorCreationAndEquality(): void
  {
    v1: Vector = new Vector(x=(#0 = { x: 0, y: 0 }).x, y=#0.y)
    log(reinterpret_cast<bytes>(v1.x))
    log(reinterpret_cast<bytes>(v1.y))
    v2: Vector = new Vector(x=(#2 = { x: (#1 = { y: 0, x: 0 }).x, y: #1.y }).x, y=#2.y)
    assert(reinterpret_cast<bytes>(v1) == reinterpret_cast<bytes>(v2))
  }
  
  addVectors(): Vector
  {
    return new Vector(x=(#3 = { x: ARC4_ENCODE(ARC4_DECODE(v1.x) + ARC4_DECODE(v2.x), wtype=arc4.uint64), y: ARC4_ENCODE(ARC4_DECODE(v1.y) + ARC4_DECODE(v2.y), wtype=arc4.uint64) }).x, y=#3.y)
  }
  
  constructor(): void
  {
    void
  }
  
  Contract::constructor(): void
  {
  }
  
  Contract::constructor(): void
  {
    this.constructor()
  }
  
  __algots__.defaultCreate(): void
  {
  }
  
}