#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1
    bytecblock 0x 0x0000000000000000 0x151f7c75

main_block@1:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@10

main_abi_routing@2:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x89388ddd // method "testVectorCreationAndEquality()void"
    pushbytes 0xef322d6d // method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)"
    pushbytes 0xcb81deb8 // method "implicitCastingAndSpreading((uint64,uint64))void"
    pushbytes 0xf79d6c46 // method "toAndFromBytes((uint64,uint64))(uint64,uint64)"
    pushbytes 0x91915545 // method "toNative((uint64,uint64))(uint64,uint64)"
    uncover 5
    match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_implicitCastingAndSpreading_route@5 main_toAndFromBytes_route@6 main_toNative_route@7

main_switch_case_default@8:

main_switch_case_next@9:

main_after_if_else@14:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15:
    return

main_toNative_route@7:
    // tests/approvals/arc4-struct.algo.ts:37
    // public toNative(v1: Vector) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/arc4-struct.algo.ts:37
    // public toNative(v1: Vector) {
    callsub toNative
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15

main_toAndFromBytes_route@6:
    // tests/approvals/arc4-struct.algo.ts:32
    // public toAndFromBytes(v1: Vector): Vector {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/arc4-struct.algo.ts:32
    // public toAndFromBytes(v1: Vector): Vector {
    callsub toAndFromBytes
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15

main_implicitCastingAndSpreading_route@5:
    // tests/approvals/arc4-struct.algo.ts:25
    // public implicitCastingAndSpreading(v1: Vector) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/arc4-struct.algo.ts:25
    // public implicitCastingAndSpreading(v1: Vector) {
    callsub implicitCastingAndSpreading
    intc_2 // 1
    b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15

main_addVectors_route@4:
    // tests/approvals/arc4-struct.algo.ts:18
    // public addVectors(v1: Vector, v2: Vector) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/arc4-struct.algo.ts:18
    // public addVectors(v1: Vector, v2: Vector) {
    callsub addVectors
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15

main_testVectorCreationAndEquality_route@3:
    // tests/approvals/arc4-struct.algo.ts:10
    // public testVectorCreationAndEquality() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub testVectorCreationAndEquality
    intc_2 // 1
    b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15

main_bare_routing@10:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@11

main_switch_case_default@12:

main_switch_case_next@13:
    b main_after_if_else@14

main___algots__.defaultCreate@11:
    // tests/approvals/arc4-struct.algo.ts:9
    // class StructDemo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_2 // 1
    b main_after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__@15


// tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality() -> void:
testVectorCreationAndEquality:
    // tests/approvals/arc4-struct.algo.ts:11
    // const v1 = new Vector({ x: new ARC4Uint64(0), y: new ARC4Uint64(0) })
    bytec_0 // 0x
    bytec_1 // 0x0000000000000000
    concat
    bytec_1 // 0x0000000000000000
    concat
    // tests/approvals/arc4-struct.algo.ts:12
    // log(v1.x)
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    log
    // tests/approvals/arc4-struct.algo.ts:13
    // log(v1.y)
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    log
    // tests/approvals/arc4-struct.algo.ts:14
    // const v2 = new Vector({ y: new ARC4Uint64(0), x: new ARC4Uint64(0) })
    bytec_0 // 0x
    bytec_1 // 0x0000000000000000
    concat
    bytec_1 // 0x0000000000000000
    concat
    // tests/approvals/arc4-struct.algo.ts:15
    // assert(v1 === v2)
    ==
    assert
    retsub


// tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(v1: bytes, v2: bytes) -> bytes:
addVectors:
    // tests/approvals/arc4-struct.algo.ts:18
    // public addVectors(v1: Vector, v2: Vector) {
    proto 2 1
    // tests/approvals/arc4-struct.algo.ts:20
    // x: new ARC4Uint64(v1.x.native + v2.x.native),
    frame_dig -2
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    +
    itob
    // tests/approvals/arc4-struct.algo.ts:21
    // y: new ARC4Uint64(v1.y.native + v2.y.native),
    frame_dig -2
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    +
    itob
    // tests/approvals/arc4-struct.algo.ts:19-22
    // return new Vector({
    //   x: new ARC4Uint64(v1.x.native + v2.x.native),
    //   y: new ARC4Uint64(v1.y.native + v2.y.native),
    // })
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    retsub


// tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(v1: bytes) -> void:
implicitCastingAndSpreading:
    // tests/approvals/arc4-struct.algo.ts:25
    // public implicitCastingAndSpreading(v1: Vector) {
    proto 1 0
    // tests/approvals/arc4-struct.algo.ts:26
    // const v2 = new Vector(v1)
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    // tests/approvals/arc4-struct.algo.ts:27
    // const v3 = new Vector({ ...v2 })
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    swap
    dup
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    bytec_0 // 0x
    uncover 3
    concat
    swap
    concat
    // tests/approvals/arc4-struct.algo.ts:28
    // assert(v1.bytes === v2.bytes)
    frame_dig -1
    uncover 2
    ==
    assert
    // tests/approvals/arc4-struct.algo.ts:29
    // assert(v3.bytes === v1.bytes)
    frame_dig -1
    ==
    assert
    retsub


// tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes(v1: bytes) -> bytes:
toAndFromBytes:
    // tests/approvals/arc4-struct.algo.ts:32
    // public toAndFromBytes(v1: Vector): Vector {
    proto 1 1
    // tests/approvals/arc4-struct.algo.ts:33
    // const v1_bytes = v1.bytes
    frame_dig -1
    // tests/approvals/arc4-struct.algo.ts:34
    // return interpretAsArc4<Vector>(v1_bytes)
    retsub


// tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(v1: bytes) -> bytes, bytes:
toNative:
    // tests/approvals/arc4-struct.algo.ts:37
    // public toNative(v1: Vector) {
    proto 1 2
    // tests/approvals/arc4-struct.algo.ts:38
    // return v1.native
    frame_dig -1
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    retsub


// tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    retsub
