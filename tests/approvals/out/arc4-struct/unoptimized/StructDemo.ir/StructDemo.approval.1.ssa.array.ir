main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L9
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "implicitCastingAndSpreading((uint64,uint64))void" => block@5, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@6, method "toNative((uint64,uint64))(uint64,uint64)" => block@7, * => block@8}
    block@3: // testVectorCreationAndEquality_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality()
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // addVectors_route_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 2)
        let tmp%11#0: bytes[16] = tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(reinterpret_bytes[16]%0#0, reinterpret_bytes[16]%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // implicitCastingAndSpreading_route_L25
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_bytes[16]%2#0: bytes[16] = (txna ApplicationArgs 1)
        tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(reinterpret_bytes[16]%2#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // toAndFromBytes_route_L32
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_bytes[16]%3#0: bytes[16] = (txna ApplicationArgs 1)
        let tmp%21#0: bytes[16] = tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes(reinterpret_bytes[16]%3#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // toNative_route_L37
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_bytes[16]%4#0: bytes[16] = (txna ApplicationArgs 1)
        let (elements_to_encode%0#0: bytes[8], elements_to_encode%1#0: bytes[8]) = tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(reinterpret_bytes[16]%4#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x elements_to_encode%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 elements_to_encode%1#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%27#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@8: // switch_case_default_L9
        goto block@9
    block@9: // switch_case_next_L9
        goto block@14
    block@10: // bare_routing_L9
        let tmp%28#0: uint64 = (txn OnCompletion)
        switch tmp%28#0 {0u => block@11, * => block@12}
    block@11: // __algots__.defaultCreate_L9
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (== tmp%29#0 0u)
        (assert tmp%30#0) // can only call when creating
        tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate()
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@12: // switch_case_default_L9
        goto block@13
    block@13: // switch_case_next_L9
        goto block@14
    block@14: // after_if_else_L9
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5 <- block@11, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality() -> void:
    block@0: // L10
        let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x0000000000000000)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x0000000000000000)
        let v1#0: bytes[16] = encoded_tuple_buffer%2#0
        let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        (log tmp%0#0)
        let tmp%1#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        (log tmp%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x 0x0000000000000000)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0x0000000000000000)
        let v2#0: bytes[16] = encoded_tuple_buffer%5#0
        let tmp%2#0: bool = (== v1#0 v2#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(v1: bytes[16], v2: bytes[16]) -> bytes[16]:
    block@0: // L18
        let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi tmp%2#0)
        let to_encode%0#0: uint64 = (+ tmp%1#0 tmp%3#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%12#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%13#0: uint64 = (btoi tmp%12#0)
        let tmp%14#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%15#0: uint64 = (btoi tmp%14#0)
        let to_encode%3#0: uint64 = (+ tmp%13#0 tmp%15#0)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%3#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%3#0)
        return encoded_tuple_buffer%2#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(v1: bytes[16]) -> void:
    block@0: // L25
        let item0%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let item1%1#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let encoded_tuple_buffer%1#0: bytes = (concat 0x item0%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 item1%1#0)
        let v2#0: bytes[16] = encoded_tuple_buffer%2#0
        let tmp%0#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let encoded_tuple_buffer%4#0: bytes = (concat 0x tmp%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 tmp%3#0)
        let v3#0: bytes[16] = encoded_tuple_buffer%5#0
        let tmp%4#0: bool = (== v1#0 v2#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== v3#0 v1#0)
        (assert tmp%5#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes(v1: bytes[16]) -> bytes[16]:
    block@0: // L32
        let v1_bytes#0: bytes = v1#0
        let reinterpret_bytes[16]%0#0: bytes[16] = v1_bytes#0
        return reinterpret_bytes[16]%0#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(v1: bytes[16]) -> <bytes[8], bytes[8]>:
    block@0: // L37
        let item0%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let item1%1#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        return item0%0#0 item1%1#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate() -> void:
    block@0: // L9
        return 