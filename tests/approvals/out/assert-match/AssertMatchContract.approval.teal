#pragma version 10

tests/approvals/assert-match.algo.ts::AssertMatchContract.approvalProgram:
    intcblock 0 1
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// tests/approvals/assert-match.algo.ts::AssertMatchContract.constructor() -> void:
constructor:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    proto 0 0
    retsub


// tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@5
    txna ApplicationArgs 0
    pushbytes 0x8fef7668 // method "testPay(pay)bool"
    swap
    match __puya_arc4_router___testPay_route@2
    b __puya_arc4_router___switch_case_default@3

__puya_arc4_router___testPay_route@2:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    callsub testPay
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@3:
    b __puya_arc4_router___after_if_else@9

__puya_arc4_router___bare_routing@5:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algots__.defaultCreate@6
    b __puya_arc4_router___switch_case_default@7

__puya_arc4_router_____algots__.defaultCreate@6:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@7:

__puya_arc4_router___after_if_else@9:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    intc_0 // 0
    retsub


// tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(pay: uint64) -> uint64:
testPay:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    proto 1 1
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns Amount
    // tests/approvals/assert-match.algo.ts:7
    // amount: { between: [0, 50000] },
    pushint 50000 // 50000
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <=
    bz testPay_bool_false@8
    frame_dig -1
    gtxns Amount
    // tests/approvals/assert-match.algo.ts:7
    // amount: { between: [0, 50000] },
    intc_0 // 0
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >=
    bz testPay_bool_false@8
    frame_dig -1
    gtxns Sender
    // tests/approvals/assert-match.algo.ts:8
    // sender: Txn.sender,
    txn Sender
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    bz testPay_bool_false@8
    frame_dig -1
    gtxns Receiver
    // tests/approvals/assert-match.algo.ts:9
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    bz testPay_bool_false@8
    frame_dig -1
    gtxns CloseRemainderTo
    // tests/approvals/assert-match.algo.ts:10
    // closeRemainderTo: Global.zeroAddress,
    global ZeroAddress
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    bz testPay_bool_false@8
    frame_dig -1
    gtxns FirstValid
    // tests/approvals/assert-match.algo.ts:11
    // firstValid: { greaterThan: 1 },
    intc_1 // 1
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >
    bz testPay_bool_false@8
    frame_dig -1
    gtxns LastValid
    // tests/approvals/assert-match.algo.ts:12
    // lastValid: { lessThan: 2 ** 40 },
    pushint 1099511627776 // 1099511627776
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <
    bz testPay_bool_false@8
    intc_1 // 1
    b testPay_bool_merge@9

testPay_bool_false@8:
    intc_0 // 0

testPay_bool_merge@9:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [0, 50000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    assert // assert target is match for conditions
    // tests/approvals/assert-match.algo.ts:14
    // return true
    intc_1 // 1
    retsub


// tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    proto 0 0
    retsub
