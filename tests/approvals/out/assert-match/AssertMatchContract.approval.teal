#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1

main_block@1:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txna ApplicationArgs 0
    pushbytes 0x8fef7668 // method "testPay(pay)bool"
    swap
    match main_testPay_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    intc_0 // 0

main_after_inlined_tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__@11:
    return

main_testPay_route@3:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    callsub testPay
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__@11

main_bare_routing@6:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algots__.defaultCreate@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algots__.defaultCreate@7:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    b main_after_inlined_tests/approvals/assert-match.algo.ts::AssertMatchContract.__puya_arc4_router__@11


// tests/approvals/assert-match.algo.ts::AssertMatchContract.testPay(pay: uint64) -> uint64:
testPay:
    // tests/approvals/assert-match.algo.ts:5
    // public testPay(pay: gtxn.PaymentTxn): boolean {
    proto 1 1
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns Amount
    // tests/approvals/assert-match.algo.ts:7
    // amount: { between: [100_000, 105_000] },
    pushint 105000 // 105000
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <=
    bz testPay_bool_false@8

testPay_and_contd@1:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns Amount
    // tests/approvals/assert-match.algo.ts:7
    // amount: { between: [100_000, 105_000] },
    pushint 100000 // 100000
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >=
    bz testPay_bool_false@8

testPay_and_contd@2:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns Sender
    // tests/approvals/assert-match.algo.ts:8
    // sender: Txn.sender,
    txn Sender
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    bz testPay_bool_false@8

testPay_and_contd@3:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns Receiver
    // tests/approvals/assert-match.algo.ts:9
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    bz testPay_bool_false@8

testPay_and_contd@4:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns CloseRemainderTo
    // tests/approvals/assert-match.algo.ts:10
    // closeRemainderTo: Global.zeroAddress,
    global ZeroAddress
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    ==
    bz testPay_bool_false@8

testPay_and_contd@5:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns FirstValid
    // tests/approvals/assert-match.algo.ts:11
    // firstValid: { greaterThan: 1 },
    intc_1 // 1
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    >
    bz testPay_bool_false@8

testPay_and_contd@6:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    frame_dig -1
    gtxns LastValid
    // tests/approvals/assert-match.algo.ts:12
    // lastValid: { lessThan: 2 ** 40 },
    pushint 1099511627776 // 1099511627776
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    <
    bz testPay_bool_false@8

testPay_bool_true@7:
    intc_1 // 1

testPay_bool_merge@9:
    // tests/approvals/assert-match.algo.ts:6-13
    // assertMatch(pay, {
    //   amount: { between: [100_000, 105_000] },
    //   sender: Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   closeRemainderTo: Global.zeroAddress,
    //   firstValid: { greaterThan: 1 },
    //   lastValid: { lessThan: 2 ** 40 },
    // })
    assert // assert target is match for conditions
    // tests/approvals/assert-match.algo.ts:14
    // return true
    intc_1 // 1
    retsub

testPay_bool_false@8:
    intc_0 // 0
    b testPay_bool_merge@9


// tests/approvals/assert-match.algo.ts::AssertMatchContract.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    // tests/approvals/assert-match.algo.ts:4
    // export class AssertMatchContract extends Contract {
    proto 0 0
    retsub
