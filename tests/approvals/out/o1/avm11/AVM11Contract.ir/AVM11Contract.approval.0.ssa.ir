main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/avm11.algo.ts::Avm11Contract.__puya_arc4_router__() -> bool:
    block@0: // L23
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L23
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testNewOps()void" => block@2, * => block@3}
    block@2: // testNewOps_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/avm11.algo.ts::Avm11Contract.testNewOps()
        return 1u
    block@3: // switch_case_default_L23
        goto block@4
    block@4: // switch_case_next_L23
        goto block@9
    block@5: // bare_routing_L23
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L23
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/avm11.algo.ts::Avm11Contract.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L23
        goto block@8
    block@8: // switch_case_next_L23
        goto block@9
    block@9: // after_if_else_L23
        return 0u

subroutine tests/approvals/avm11.algo.ts::Avm11Contract.testNewOps() -> void:
    block@0: // L25
        let tmp%0#0: bytes[32] = ((mimc BLS12_381Mp111) 0x00000000000000000000000000000000000000000000000000000000499602d2)
        let reinterpret_bool%0#0: bool = (len tmp%0#0)
        (assert reinterpret_bool%0#0)
        let reinterpret_bool%1#0: bool = online_stake
        (assert reinterpret_bool%1#0)
        let tmp%1#0: account = (txn Sender)
        let (tmp%2#0: bool, tmp%3#0: bool) = ((acct_params_get AcctIncentiveEligible) tmp%1#0)
        let a#0: bool = tmp%2#0
        let b#0: bool = tmp%3#0
        let tmp%4#0: account = (txn Sender)
        let (tmp%5#0: uint64, tmp%6#0: bool) = ((acct_params_get AcctLastProposed) tmp%4#0)
        let c#0: uint64 = tmp%5#0
        let d#0: bool = tmp%6#0
        let tmp%7#0: account = (txn Sender)
        let (tmp%8#0: uint64, tmp%9#0: bool) = ((acct_params_get AcctLastProposed) tmp%7#0)
        let e#0: uint64 = tmp%8#0
        let f#0: bool = tmp%9#0
        let tmp%10#0: account = ((block BlkProposer) 0u)
        let tmp%11#0: account = (global ZeroAddress)
        let tmp%12#0: bool = (!= tmp%10#0 tmp%11#0)
        (assert tmp%12#0) // proposer
        let reinterpret_bool%2#0: bool = ((block BlkFeesCollected) 0u)
        (assert reinterpret_bool%2#0) // fees collected
        let reinterpret_bool%3#0: bool = ((block BlkBonus) 0u)
        (assert reinterpret_bool%3#0) // bonus
        let tmp%13#0: bytes[32] = ((block BlkBranch) 0u)
        let reinterpret_bool%4#0: bool = (len tmp%13#0)
        (assert reinterpret_bool%4#0) // branch
        let tmp%14#0: account = ((block BlkFeeSink) 0u)
        let tmp%15#0: account = (global ZeroAddress)
        let tmp%16#0: bool = (!= tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // fee sink
        let tmp%17#0: bytes = ((block BlkProtocol) 0u)
        let reinterpret_bool%5#0: bool = (len tmp%17#0)
        (assert reinterpret_bool%5#0) // protocol
        let reinterpret_bool%6#0: bool = ((block BlkTxnCounter) 0u)
        (assert reinterpret_bool%6#0) // txn counter
        let reinterpret_bool%7#0: bool = ((block BlkProposerPayout) 0u)
        (assert reinterpret_bool%7#0) // proposer payout
        let tmp%18#0: bool = (global PayoutsEnabled)
        (assert tmp%18#0) // payouts_enabled
        let reinterpret_bool%8#0: bool = (global PayoutsGoOnlineFee)
        (assert reinterpret_bool%8#0) // payouts_go_online_fee
        let reinterpret_bool%9#0: bool = (global PayoutsPercent)
        (assert reinterpret_bool%9#0) // payouts_percent
        let reinterpret_bool%10#0: bool = (global PayoutsMinBalance)
        (assert reinterpret_bool%10#0) // payouts_min_balance
        let reinterpret_bool%11#0: bool = (global PayoutsMaxBalance)
        (assert reinterpret_bool%11#0) // payouts_max_balance
        let (tmp%19#0: uint64, tmp%20#0: bool) = ((voter_params_get VoterBalance) 0u)
        let g#0: uint64 = tmp%19#0
        let h#0: bool = tmp%20#0
        let (tmp%21#0: bool, tmp%22#0: bool) = ((voter_params_get VoterIncentiveEligible) 0u)
        let i#0: bool = tmp%21#0
        let j#0: bool = tmp%22#0
        return 

subroutine tests/approvals/avm11.algo.ts::Avm11Contract.__algots__.defaultCreate() -> void:
    block@0: // L23
        return 