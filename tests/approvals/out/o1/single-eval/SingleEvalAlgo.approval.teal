#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "myState"
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xa78000de // method "test()void"
    txna ApplicationArgs 0
    match main_test_route@3

main_after_if_else@10:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    intc_0 // 0
    return

main_test_route@3:
    // tests/approvals/single-eval.algo.ts:16
    // test() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test
    intc_1 // 1
    return

main_bare_routing@6:
    // tests/approvals/single-eval.algo.ts:4
    // class SingleEvalAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/single-eval.algo.ts::SingleEvalAlgo.test() -> void:
test:
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    bytec_0 // "myState"
    // tests/approvals/single-eval.algo.ts:17
    // this.myState.value = 0
    intc_0 // 0
    app_global_put
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "myState"
    app_global_get_ex
    assert // check GlobalState exists
    // tests/approvals/single-eval.algo.ts:8
    // this.myState.value += 1
    intc_1 // 1
    +
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    bytec_0 // "myState"
    // tests/approvals/single-eval.algo.ts:8
    // this.myState.value += 1
    swap
    app_global_put
    // tests/approvals/single-eval.algo.ts:5
    // myState = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "myState"
    app_global_get_ex
    assert // check GlobalState exists
    // tests/approvals/single-eval.algo.ts:19
    // assert(this.myState.value === 1, 'a() should only be called once')
    intc_1 // 1
    ==
    assert // a() should only be called once
    retsub
