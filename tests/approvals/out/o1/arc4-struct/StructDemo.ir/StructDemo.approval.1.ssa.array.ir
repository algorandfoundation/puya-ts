main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@7, method "toNative((uint64,uint64))(uint64,uint64)" => block@8, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@9, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@10, method "setLastCalled(string,uint64,uint64)void" => block@11, method "setPlugin(string)void" => block@12, * => block@19}
    block@3: // testVectorCreationAndEquality_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality()
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@4: // addVectors_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let tmp%11#0: Encoded(uint64,uint64) = tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(reinterpret_Encoded(uint64,uint64)%0#0, reinterpret_Encoded(uint64,uint64)%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@5: // mutateVector_route_L26
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%17#0: Encoded(uint64,uint64) = tests/approvals/arc4-struct.algo.ts::StructDemo.mutateVector(reinterpret_Encoded(uint64,uint64)%2#0, reinterpret_Encoded(uint64)%0#0, reinterpret_Encoded(uint64)%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@6: // implicitCastingAndSpreading_route_L32
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(reinterpret_Encoded(uint64,uint64)%3#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@7: // toAndFromBytes_route_L39
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let v1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%28#0: bytes = (concat 0x151f7c75 v1#0)
        (log tmp%28#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@8: // toNative_route_L44
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%5#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%33#0: Encoded(uint64), tmp%34#0: Encoded(uint64)) = tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(reinterpret_Encoded(uint64,uint64)%5#0)
        let array%encoded%0#1: Encoded(uint64) = (concat 0x tmp%33#0)
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 tmp%34#0)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let tmp%35#0: Encoded(uint64,uint64) = array%encoded%2#1
        let tmp%36#0: bytes = (concat 0x151f7c75 tmp%35#0)
        (log tmp%36#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@9: // getPlugin_route_L52
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%41#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%42#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = tests/approvals/arc4-struct.algo.ts::StructDemo.getPlugin(tmp%41#0)
        let tmp%43#0: bytes = (concat 0x151f7c75 tmp%42#0)
        (log tmp%43#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@10: // getMain_route_L58
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let tmp%48#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = tests/approvals/arc4-struct.algo.ts::StructDemo.getMain()
        let tmp%49#0: bytes = (concat 0x151f7c75 tmp%48#0)
        (log tmp%49#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@11: // setLastCalled_route_L64
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%54#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%55#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%56#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        tests/approvals/arc4-struct.algo.ts::StructDemo.setLastCalled(tmp%54#0, tmp%55#0, tmp%56#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@12: // setPlugin_route_L68
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%61#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        tests/approvals/arc4-struct.algo.ts::StructDemo.setPlugin(tmp%61#0)
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@20
    block@15: // bare_routing_L10
        let tmp%62#0: uint64 = (txn OnCompletion)
        goto tmp%62#0 ? block@19 : block@16
    block@16: // __algots__.defaultCreate_L10
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // can only call when creating
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@20
    block@19: // after_if_else_L10
        let tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#11: bool = 0u
        goto block@20
    block@20: // after_inlined_tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#10 <- block@16, tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__%0#11 <- block@19)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = Ï†(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = Ï†(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = Ï†(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = Ï†(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = Ï†(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality() -> void:
    block@0: // L11
        let array%encoded%0#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 0x0000000000000000)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let v1#0: Encoded(uint64,uint64) = array%encoded%2#1
        let array%extract%0#1: bytes = (extract3 v1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%0#1
        (log tuple_item%0#0)
        let array%extract%1#1: bytes = (extract3 v1#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%1#1
        (log tuple_item%1#0)
        let array%encoded%3#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 0x0000000000000000)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let v2#0: Encoded(uint64,uint64) = array%encoded%5#1
        let tmp%2#0: bool = (== v1#0 v2#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(v1: Encoded(uint64,uint64), v2: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L19
        let array%extract%0#1: bytes = (extract3 v1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%0#1
        let tmp%0#0: uint64 = (btoi tuple_item%0#0)
        let array%extract%1#1: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%1#1
        let tmp%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let array%val_as_bytes%0#1: bytes[8] = (itob tmp%2#0)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let tmp%3#0: Encoded(uint64) = array%as_Encoded(uint64)%0#1
        let array%extract%2#1: bytes = (extract3 v1#0 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = array%extract%2#1
        let tmp%4#0: uint64 = (btoi tuple_item%2#0)
        let array%extract%3#1: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = array%extract%3#1
        let tmp%5#0: uint64 = (btoi tuple_item%3#0)
        let tmp%6#0: uint64 = (+ tmp%4#0 tmp%5#0)
        let array%val_as_bytes%1#1: bytes[8] = (itob tmp%6#0)
        let array%as_Encoded(uint64)%1#1: Encoded(uint64) = array%val_as_bytes%1#1
        let tmp%7#0: Encoded(uint64) = array%as_Encoded(uint64)%1#1
        let array%encoded%0#1: Encoded(uint64) = (concat 0x tmp%3#0)
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 tmp%7#0)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let tmp%8#0: Encoded(uint64,uint64) = array%encoded%2#1
        return tmp%8#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.mutateVector(v1: Encoded(uint64,uint64), newX: Encoded(uint64), newY: Encoded(uint64)) -> Encoded(uint64,uint64):
    block@0: // L26
        let array%extract%0#1: bytes = (extract3 v1#0 0u 8u)
        let array%updated_data%0#1: bytes = (replace3 v1#0 0u newX#0)
        let v1#1: Encoded(uint64,uint64) = array%updated_data%0#1
        let array%extract%1#1: bytes = (extract3 v1#1 8u 8u)
        let array%updated_data%1#1: bytes = (replace3 v1#1 8u newY#0)
        let v1#2: Encoded(uint64,uint64) = array%updated_data%1#1
        return v1#2

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(v1: Encoded(uint64,uint64)) -> void:
    block@0: // L32
        let array%extract%0#1: bytes = (extract3 v1#0 0u 8u)
        let array%extract%1#1: bytes = (extract3 v1#0 8u 8u)
        let (awst_tmp%0#0: Encoded(uint64), awst_tmp%1#0: Encoded(uint64)) = (array%extract%0#1, array%extract%1#1)
        let array%encoded%0#1: Encoded(uint64) = (concat 0x awst_tmp%0#0)
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%encoded%0#1 awst_tmp%1#0)
        let array%encoded%2#1: Encoded(uint64,uint64) = (concat array%encoded%1#1 0x)
        let v2#0: Encoded(uint64,uint64) = array%encoded%2#1
        let array%extract%2#1: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%2#1
        let array%extract%3#1: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = array%extract%3#1
        let array%encoded%3#1: Encoded(uint64) = (concat 0x tuple_item%0#0)
        let array%encoded%4#1: Encoded(uint64,uint64) = (concat array%encoded%3#1 tuple_item%1#0)
        let array%encoded%5#1: Encoded(uint64,uint64) = (concat array%encoded%4#1 0x)
        let v3#0: Encoded(uint64,uint64) = array%encoded%5#1
        let tmp%2#0: bool = (== v1#0 v2#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== v3#0 v1#0)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(v1: Encoded(uint64,uint64)) -> <Encoded(uint64), Encoded(uint64)>:
    block@0: // L44
        let array%extract%0#1: bytes = (extract3 v1#0 0u 8u)
        let array%extract%1#1: bytes = (extract3 v1#0 8u 8u)
        let (awst_tmp%0#0: Encoded(uint64), awst_tmp%1#0: Encoded(uint64)) = (array%extract%0#1, array%extract%1#1)
        return awst_tmp%0#0 awst_tmp%1#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.getPlugin(key: string) -> Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])):
    block@0: // L52
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])), maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // Box must have value
        let array%extract%0#1: bytes = (extract3 value#0 16u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%0#1
        let tmp%0#0: uint64 = (btoi tuple_item%0#0)
        (assert tmp%0#0) // Last called not zero
        return value#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.getMain() -> Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])):
    block@0: // L58
        let (value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])), maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let array%extract%0#1: bytes = (extract3 value#0 16u 8u)
        let tuple_item%0#0: Encoded(uint64) = array%extract%0#1
        let tmp%0#0: uint64 = (btoi tuple_item%0#0)
        (assert tmp%0#0) // Last called not zero
        return value#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.setLastCalled(key: string, index: uint64, lastCalled: uint64) -> void:
    block@0: // L64
        let array%val_as_bytes%0#1: bytes[8] = (itob lastCalled#0)
        let array%as_Encoded(uint64)%0#1: Encoded(uint64) = array%val_as_bytes%0#1
        let tmp%0#0: Encoded(uint64) = array%as_Encoded(uint64)%0#1
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // Box must have value
        let array%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%0#0 25u)
        let array%len%0#1: uint64 = (len maybe_value%0#0)
        let array%substring3%0#1: bytes = (substring3 maybe_value%0#0 array%extract_uint16%0#1 array%len%0#1)
        let array%array_trimmed%0#1: bytes = ((extract 2 0) array%substring3%0#1)
        let array%bytes_offset%0#1: uint64 = (* index#0 20u)
        let array%encoded_element%0#1: bytes = (extract3 array%array_trimmed%0#1 array%bytes_offset%0#1 20u) // on error: index access is out of bounds
        let array%extract%0#1: bytes = (extract3 array%encoded_element%0#1 12u 8u)
        let array%updated_data%0#1: bytes = (replace3 array%encoded_element%0#1 12u tmp%0#0)
        let array%write_offset%0#1: uint64 = (* index#0 20u)
        let array%write_offset_with_length_header%0#1: uint64 = (+ array%write_offset%0#1 2u)
        let array%updated_array%0#1: bytes = (replace3 array%substring3%0#1 array%write_offset_with_length_header%0#1 array%updated_data%0#1)
        let array%item_offset%0#1: uint64 = (extract_uint16 maybe_value%0#0 25u)
        let array%data_up_to_item%0#1: bytes = (extract3 maybe_value%0#0 0u array%item_offset%0#1)
        let array%updated_data%1#1: bytes = (concat array%data_up_to_item%0#1 array%updated_array%0#1)
        let updated_tuple%0#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = array%updated_data%1#1
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 updated_tuple%0#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.setPlugin(key: string) -> void:
    block@0: // L68
        let array%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 0u)
        let array%as_Encoded(bool8)%0#1: Encoded(bool8) = array%encoded_bool%0#1
        let tmp%0#0: Encoded(bool8) = array%as_Encoded(bool8)%0#1
        let array%length%0#1: uint64 = (len method "test()void")
        let array%lengths_equal%0#1: bool = (== array%length%0#1 4u)
        (assert array%lengths_equal%0#1) // invalid size
        let array%as_Encoded(uint8[4])%0#1: Encoded(uint8[4]) = method "test()void"
        let tmp%1#0: Encoded(uint8[4]) = array%as_Encoded(uint8[4])%0#1
        let array%encoded%0#1: Encoded(uint8[4]) = (concat 0x tmp%1#0)
        let array%encoded%1#1: Encoded(uint8[4],uint64) = (concat array%encoded%0#1 0x0000000000000001)
        let array%encoded%2#1: Encoded(uint8[4],uint64,uint64) = (concat array%encoded%1#1 0x0000000000000001)
        let array%encoded%3#1: Encoded(uint8[4],uint64,uint64) = (concat array%encoded%2#1 0x)
        let tmp%2#0: Encoded(uint8[4],uint64,uint64) = array%encoded%3#1
        let array%encoded%4#1: Encoded((uint8[4],uint64,uint64)) = (concat 0x tmp%2#0)
        let array%as_bytes%0#1: bytes[8] = (itob 1u)
        let array%len_u16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded%5#1: bytes = (concat array%len_u16%0#1 array%encoded%4#1)
        let array%encoded%6#1: Encoded(len+(uint8[4],uint64,uint64)[]) = (concat array%encoded%5#1 0x)
        let encoded_array%0#0: Encoded(len+(uint8[4],uint64,uint64)[]) = array%encoded%6#1
        let array%encoded%7#1: Encoded(uint64) = (concat 0x 0x0000000000000001)
        let array%encoded%8#1: Encoded(uint64,uint64) = (concat array%encoded%7#1 0x0000000000000000)
        let array%encoded%9#1: Encoded(uint64,uint64,uint64) = (concat array%encoded%8#1 0x0000000000000000)
        let array%encoded%10#1: Encoded(uint64,uint64,uint64,bool1) = (concat array%encoded%9#1 tmp%0#0)
        let array%tail%0#1: bytes = (concat 0x encoded_array%0#0)
        let array%data_length%0#1: uint64 = (len encoded_array%0#0)
        let array%current_tail_offset%0#1: uint64 = (+ 27u array%data_length%0#1)
        let array%as_bytes%1#1: bytes[8] = (itob 27u)
        let array%offset_as_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%1#1)
        let array%encoded%11#1: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = (concat array%encoded%10#1 array%offset_as_uint16%0#1)
        let array%encoded%12#1: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = (concat array%encoded%11#1 array%tail%0#1)
        let tmp%3#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = array%encoded%12#1
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 tmp%3#0)
        return 