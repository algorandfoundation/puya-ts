main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.__puya_arc4_router__() -> bool:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@14
    block@1: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@2, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@3, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@4, method "implicitCastingAndSpreading((uint64,uint64))void" => block@5, method "toAndFromBytes((uint64,uint64))(uint64,uint64)" => block@6, method "toNative((uint64,uint64))(uint64,uint64)" => block@7, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@8, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@9, method "setLastCalled(string,uint64,uint64)void" => block@10, method "setPlugin(string)void" => block@11, * => block@12}
    block@2: // testVectorCreationAndEquality_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality()
        return 1u
    block@3: // addVectors_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 2)
        let tmp%11#0: bytes[16] = tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(reinterpret_bytes[16]%0#0, reinterpret_bytes[16]%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        return 1u
    block@4: // mutateVector_route_L26
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_bytes[16]%2#0: bytes[16] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 2)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%17#0: bytes[16] = tests/approvals/arc4-struct.algo.ts::StructDemo.mutateVector(reinterpret_bytes[16]%2#0, reinterpret_bytes[8]%0#0, reinterpret_bytes[8]%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        return 1u
    block@5: // implicitCastingAndSpreading_route_L32
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_bytes[16]%3#0: bytes[16] = (txna ApplicationArgs 1)
        tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(reinterpret_bytes[16]%3#0)
        return 1u
    block@6: // toAndFromBytes_route_L39
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_bytes[16]%4#0: bytes[16] = (txna ApplicationArgs 1)
        let tmp%27#0: bytes[16] = tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes(reinterpret_bytes[16]%4#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        return 1u
    block@7: // toNative_route_L44
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        let reinterpret_bytes[16]%5#0: bytes[16] = (txna ApplicationArgs 1)
        let (elements_to_encode%0#0: bytes[8], elements_to_encode%1#0: bytes[8]) = tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(reinterpret_bytes[16]%5#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 elements_to_encode%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 elements_to_encode%1#0)
        let tmp%33#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%33#0)
        return 1u
    block@8: // getPlugin_route_L52
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (== tmp%34#0 NoOp)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (!= tmp%36#0 0u)
        (assert tmp%37#0) // can only call when not creating
        let tmp%38#0: bytes = (txna ApplicationArgs 1)
        let tmp%39#0: bytes = ((extract 2 0) tmp%38#0)
        let tmp%40#0: bytes = tests/approvals/arc4-struct.algo.ts::StructDemo.getPlugin(tmp%39#0)
        let tmp%41#0: bytes = (concat 0x151f7c75 tmp%40#0)
        (log tmp%41#0)
        return 1u
    block@9: // getMain_route_L58
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let tmp%46#0: bytes = tests/approvals/arc4-struct.algo.ts::StructDemo.getMain()
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        return 1u
    block@10: // setLastCalled_route_L64
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (== tmp%48#0 NoOp)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        let tmp%51#0: bool = (!= tmp%50#0 0u)
        (assert tmp%51#0) // can only call when not creating
        let tmp%52#0: bytes = (txna ApplicationArgs 1)
        let tmp%53#0: bytes = ((extract 2 0) tmp%52#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%54#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%55#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        tests/approvals/arc4-struct.algo.ts::StructDemo.setLastCalled(tmp%53#0, tmp%54#0, tmp%55#0)
        return 1u
    block@11: // setPlugin_route_L68
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (== tmp%56#0 NoOp)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        let tmp%59#0: bool = (!= tmp%58#0 0u)
        (assert tmp%59#0) // can only call when not creating
        let tmp%60#0: bytes = (txna ApplicationArgs 1)
        let tmp%61#0: bytes = ((extract 2 0) tmp%60#0)
        tests/approvals/arc4-struct.algo.ts::StructDemo.setPlugin(tmp%61#0)
        return 1u
    block@12: // switch_case_default_L10
        goto block@13
    block@13: // switch_case_next_L10
        goto block@18
    block@14: // bare_routing_L10
        let tmp%62#0: uint64 = (txn OnCompletion)
        switch tmp%62#0 {0u => block@15, * => block@16}
    block@15: // __algots__.defaultCreate_L10
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (== tmp%63#0 0u)
        (assert tmp%64#0) // can only call when creating
        tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate()
        return 1u
    block@16: // switch_case_default_L10
        goto block@17
    block@17: // switch_case_next_L10
        goto block@18
    block@18: // after_if_else_L10
        return 0u

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality() -> void:
    block@0: // L11
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 0x0000000000000000)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x0000000000000000)
        let v1#0: bytes[16] = encoded_tuple_buffer%2#0
        let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        (log tmp%0#0)
        let tmp%1#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        (log tmp%1#0)
        let current_tail_offset%1#0: uint64 = 16u
        let encoded_tuple_buffer%3#0: bytes[0] = 0x
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 0x0000000000000000)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0x0000000000000000)
        let v2#0: bytes[16] = encoded_tuple_buffer%5#0
        let tmp%2#0: bool = (== v1#0 v2#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors(v1: bytes[16], v2: bytes[16]) -> bytes[16]:
    block@0: // L19
        let tmp%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi tmp%2#0)
        let to_encode%0#0: uint64 = (+ tmp%1#0 tmp%3#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%4#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%5#0: uint64 = (btoi tmp%4#0)
        let tmp%6#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let tmp%7#0: uint64 = (btoi tmp%6#0)
        let to_encode%1#0: uint64 = (+ tmp%5#0 tmp%7#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        return encoded_tuple_buffer%2#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.mutateVector(v1: bytes[16], newX: bytes[8], newY: bytes[8]) -> bytes[16]:
    block@0: // L26
        let assigned_value%0#0: bytes[8] = newX#0
        let updated_data%0#0: bytes = (replace3 v1#0 0u assigned_value%0#0)
        let v1#1: bytes[16] = updated_data%0#0
        let assigned_value%1#0: bytes[8] = newY#0
        let updated_data%1#0: bytes = (replace3 v1#1 8u assigned_value%1#0)
        let v1#2: bytes[16] = updated_data%1#0
        return v1#2

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading(v1: bytes[16]) -> void:
    block@0: // L32
        let item0%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let item1%0#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 item0%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 item1%0#0)
        let v2#0: bytes[16] = encoded_tuple_buffer%2#0
        let tmp%0#0: bytes = (extract3 v2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: bytes = (extract3 v2#0 8u 8u) // on error: Index access is out of bounds
        let current_tail_offset%1#0: uint64 = 16u
        let encoded_tuple_buffer%3#0: bytes[0] = 0x
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 tmp%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 tmp%1#0)
        let v3#0: bytes[16] = encoded_tuple_buffer%5#0
        let tmp%2#0: bool = (== v1#0 v2#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== v3#0 v1#0)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes(v1: bytes[16]) -> bytes[16]:
    block@0: // L39
        let v1_bytes#0: bytes = v1#0
        let reinterpret_bytes[16]%0#0: bytes[16] = v1_bytes#0
        return reinterpret_bytes[16]%0#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.toNative(v1: bytes[16]) -> <bytes[8], bytes[8]>:
    block@0: // L44
        let item0%0#0: bytes = (extract3 v1#0 0u 8u) // on error: Index access is out of bounds
        let item1%0#0: bytes = (extract3 v1#0 8u 8u) // on error: Index access is out of bounds
        return item0%0#0 item1%0#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.getPlugin(key: bytes) -> bytes:
    block@0: // L52
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // Box must have value
        let copy%0#0: bytes = maybe_value%0#0
        let value#0: bytes = copy%0#0
        let tmp%0#0: bytes = (extract3 value#0 16u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bool = (> tmp%1#0 0u)
        (assert tmp%2#0) // Last called not zero
        return value#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.getMain() -> bytes:
    block@0: // L58
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "main")
        (assert maybe_exists%0#0) // Box must have value
        let copy%0#0: bytes = maybe_value%0#0
        let value#0: bytes = copy%0#0
        let tmp%0#0: bytes = (extract3 value#0 16u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bool = (> tmp%1#0 0u)
        (assert tmp%2#0) // Last called not zero
        return value#0

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.setLastCalled(key: bytes, index: uint64, lastCalled: uint64) -> void:
    block@0: // L64
        let val_as_bytes%0#0: bytes[8] = (itob lastCalled#0)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // Box must have value
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 25u)
        let item_end_offset%0#0: uint64 = (len maybe_value%0#0)
        let tmp%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) tmp%0#0)
        let item_offset%0#0: uint64 = (* index#0 20u)
        let tmp%1#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 20u) // on error: Index access is out of bounds
        let assigned_value%0#0: bytes[8] = val_as_bytes%0#0
        let updated_data%0#0: bytes = (replace3 tmp%1#0 12u assigned_value%0#0)
        let assigned_value%1#0: bytes = updated_data%0#0
        let array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let index_is_in_bounds%0#0: bool = (< index#0 array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* index#0 20u)
        let write_offset%0#1: uint64 = (+ write_offset%0#0 2u)
        let updated_target%0#0: bytes = (replace3 tmp%0#0 write_offset%0#1 assigned_value%1#0)
        let assigned_value%2#0: bytes = updated_target%0#0
        let item_offset%1#0: uint64 = (extract_uint16 maybe_value%0#0 25u)
        let data_up_to_item%0#0: bytes = (extract3 maybe_value%0#0 0u item_offset%1#0)
        let updated_data%1#0: bytes = (concat data_up_to_item%0#0 assigned_value%2#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 updated_data%1#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.setPlugin(key: bytes) -> void:
    block@0: // L68
        let length%0#0: uint64 = (len method "test()void")
        let lengths_equal%0#0: bool = (== length%0#0 4u)
        (assert lengths_equal%0#0) // invalid size
        let current_tail_offset%0#0: uint64 = 20u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 method "test()void")
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x0000000000000001)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x0000000000000001)
        let result%0#0: bytes = (concat 0x encoded_tuple_buffer%3#0)
        let array_data%0#0: bytes = (concat 0x0001 result%0#0)
        let current_tail_offset%1#0: uint64 = 27u
        let encoded_tuple_buffer%4#0: bytes[0] = 0x
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0x0000000000000001)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 0x0000000000000000)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 0x0000000000000000)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 0x00)
        let as_bytes%0#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len array_data%0#0)
        let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%0#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 array_data%0#0)
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 encoded_tuple_buffer%10#0)
        return 

subroutine tests/approvals/arc4-struct.algo.ts::StructDemo.__algots__.defaultCreate() -> void:
    block@0: // L10
        return 