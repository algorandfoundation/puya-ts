#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 8 0 16
    bytecblock 0x151f7c75 "plugins" 0x0000000000000000 "main"
    // tests/approvals/arc4-struct.algo.ts:10
    // class StructDemo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@17
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x89388ddd 0xef322d6d 0x02458807 0xcb81deb8 0xf79d6c46 0x91915545 0x3814f92a 0x007a4cb0 0x4d21bca6 0xa9bc61f1 // method "testVectorCreationAndEquality()void", method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)", method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)", method "implicitCastingAndSpreading((uint64,uint64))void", method "toAndFromBytes((uint64,uint64))(uint64,uint64)", method "toNative((uint64,uint64))(uint64,uint64)", method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])", method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])", method "setLastCalled(string,uint64,uint64)void", method "setPlugin(string)void"
    txna ApplicationArgs 0
    match testVectorCreationAndEquality addVectors mutateVector implicitCastingAndSpreading toAndFromBytes toNative getPlugin getMain setLastCalled setPlugin
    err

main___algots__.defaultCreate@17:
    // tests/approvals/arc4-struct.algo.ts:10
    // class StructDemo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/arc4-struct.algo.ts::StructDemo.testVectorCreationAndEquality[routing]() -> void:
testVectorCreationAndEquality:
    // tests/approvals/arc4-struct.algo.ts:13
    // log(v1.x)
    bytec_2 // 0x0000000000000000
    log
    // tests/approvals/arc4-struct.algo.ts:14
    // log(v1.y)
    bytec_2 // 0x0000000000000000
    log
    // tests/approvals/arc4-struct.algo.ts:11
    // public testVectorCreationAndEquality() {
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.addVectors[routing]() -> void:
addVectors:
    // tests/approvals/arc4-struct.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/arc4-struct.algo.ts:21
    // x: new ARC4Uint64(v1.x.asUint64() + v2.x.asUint64()),
    dig 1
    intc_2 // 0
    extract_uint64
    dig 1
    intc_2 // 0
    extract_uint64
    +
    itob
    // tests/approvals/arc4-struct.algo.ts:22
    // y: new ARC4Uint64(v1.y.asUint64() + v2.y.asUint64()),
    uncover 2
    intc_1 // 8
    extract_uint64
    uncover 2
    intc_1 // 8
    extract_uint64
    +
    itob
    // tests/approvals/arc4-struct.algo.ts:20-23
    // return new Vector({
    //   x: new ARC4Uint64(v1.x.asUint64() + v2.x.asUint64()),
    //   y: new ARC4Uint64(v1.y.asUint64() + v2.y.asUint64()),
    // })
    concat
    // tests/approvals/arc4-struct.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.mutateVector[routing]() -> void:
mutateVector:
    // tests/approvals/arc4-struct.algo.ts:26
    // public mutateVector(v1: Vector, newX: ARC4Uint64, newY: ARC4Uint64): Vector {
    txna ApplicationArgs 3
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/arc4-struct.algo.ts:27
    // v1.x = newX
    replace2 0
    // tests/approvals/arc4-struct.algo.ts:28
    // v1.y = newY
    swap
    replace2 8
    // tests/approvals/arc4-struct.algo.ts:26
    // public mutateVector(v1: Vector, newX: ARC4Uint64, newY: ARC4Uint64): Vector {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.implicitCastingAndSpreading[routing]() -> void:
implicitCastingAndSpreading:
    // tests/approvals/arc4-struct.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    txna ApplicationArgs 1
    // tests/approvals/arc4-struct.algo.ts:33
    // const v2 = new Vector(v1)
    dup
    extract 0 8
    dig 1
    extract 8 8
    concat
    // tests/approvals/arc4-struct.algo.ts:34
    // const v3 = new Vector({ ...v2 })
    dup
    extract 0 8
    dig 1
    extract 8 8
    concat
    // tests/approvals/arc4-struct.algo.ts:35
    // assert(v1.bytes === v2.bytes)
    dig 2
    uncover 2
    ==
    assert
    // tests/approvals/arc4-struct.algo.ts:36
    // assert(v3.bytes === v1.bytes)
    ==
    // tests/approvals/arc4-struct.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.toAndFromBytes[routing]() -> void:
toAndFromBytes:
    // tests/approvals/arc4-struct.algo.ts:39
    // public toAndFromBytes(v1: Vector): Vector {
    bytec_0 // 0x151f7c75
    txna ApplicationArgs 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.toNative[routing]() -> void:
toNative:
    // tests/approvals/arc4-struct.algo.ts:44
    // public toNative(v1: Vector) {
    bytec_0 // 0x151f7c75
    txna ApplicationArgs 1
    concat
    log
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.getPlugin[routing]() -> void:
getPlugin:
    // tests/approvals/arc4-struct.algo.ts:52
    // public getPlugin(key: string): PluginInfo {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/arc4-struct.algo.ts:48
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    swap
    concat
    // tests/approvals/arc4-struct.algo.ts:53
    // const value = clone(this.plugins(key).value)
    dup
    box_get
    assert // Box must have value
    // tests/approvals/arc4-struct.algo.ts:53-54
    // const value = clone(this.plugins(key).value)
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    swap
    intc_3 // 16
    intc_1 // 8
    box_extract
    // tests/approvals/arc4-struct.algo.ts:54
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    btoi
    assert // Last called not zero
    // tests/approvals/arc4-struct.algo.ts:52
    // public getPlugin(key: string): PluginInfo {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.getMain[routing]() -> void:
getMain:
    // tests/approvals/arc4-struct.algo.ts:50
    // plugin = Box<PluginInfo>({ key: 'main' })
    bytec_3 // "main"
    // tests/approvals/arc4-struct.algo.ts:59
    // const value = clone(this.plugin.value)
    box_get
    assert // Box must have value
    // tests/approvals/arc4-struct.algo.ts:50
    // plugin = Box<PluginInfo>({ key: 'main' })
    bytec_3 // "main"
    // tests/approvals/arc4-struct.algo.ts:59-60
    // const value = clone(this.plugin.value)
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    intc_3 // 16
    intc_1 // 8
    box_extract
    // tests/approvals/arc4-struct.algo.ts:60
    // assert(value.lastCalled.asUint64() > 0, 'Last called not zero')
    btoi
    assert // Last called not zero
    // tests/approvals/arc4-struct.algo.ts:58
    // public getMain() {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.setLastCalled[routing]() -> void:
setLastCalled:
    // tests/approvals/arc4-struct.algo.ts:64
    // public setLastCalled(key: string, index: uint64, lastCalled: uint64) {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // tests/approvals/arc4-struct.algo.ts:48
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    uncover 3
    concat
    // tests/approvals/arc4-struct.algo.ts:65
    // this.plugins(key).value.methods[index].lastCalled = new arc4.Uint64(lastCalled)
    uncover 2
    pushint 20 // 20
    *
    pushint 41 // 41
    +
    uncover 2
    box_replace
    // tests/approvals/arc4-struct.algo.ts:64
    // public setLastCalled(key: string, index: uint64, lastCalled: uint64) {
    intc_0 // 1
    return


// tests/approvals/arc4-struct.algo.ts::StructDemo.setPlugin[routing]() -> void:
setPlugin:
    // tests/approvals/arc4-struct.algo.ts:68
    // public setPlugin(key: string) {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/arc4-struct.algo.ts:48
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    swap
    concat
    // tests/approvals/arc4-struct.algo.ts:69-81
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.Uint64(1),
    //   cooldown: new arc4.Uint64(),
    //   lastCalled: new arc4.Uint64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   methods: new arc4.DynamicArray(
    //     new MethodInfo({
    //       selector: new arc4.StaticBytes(methodSelector('test()void')),
    //       cooldown: new arc4.Uint64(1),
    //       lastCalled: new arc4.Uint64(1),
    //     }),
    //   ),
    // })
    dup
    box_del
    pop
    pushbytes 0x00000000000000010000000000000000000000000000000000001b0001a78000de00000000000000010000000000000001
    box_put
    // tests/approvals/arc4-struct.algo.ts:68
    // public setPlugin(key: string) {
    intc_0 // 1
    return
