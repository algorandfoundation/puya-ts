main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testMatches(uint64)void" => block@3, * => block@10}
    block@3: // testMatches_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(tmp%7#0)
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/match-expr.algo.ts::MatchExprAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/match-expr.algo.ts::MatchExprAlgo.testMatches(x: uint64) -> void:
    block@0: // L5
        let tmp%0#0: bool = (== x#0 5u)
        (assert tmp%0#0) // x should be 5
        let tmp%1#0: bool = (> x#0 4u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (< x#0 6u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (>= x#0 5u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (<= x#0 5u)
        (assert tmp%4#0)
        let array%sub_item%0#1: bytes[8] = (itob x#0)
        let array%encoded%0#1: encoded_uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: encoded_uint64[] = (concat 0x array%encoded%0#1)
        let encoded%0#0: encoded_uint64[] = array%data%0#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let xArray#0: encoded_uint64[] = (concat len_16_bit%0#0 encoded%0#0)
        let tmp%5#0: uint64 = (extract_uint16 xArray#0 0u)
        let tmp%6#0: bool = (== tmp%5#0 1u)
        goto tmp%6#0 ? block@1 : block@3
    block@1: // and_contd_L16
        let tmp%7#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%8#0: bool = (== tmp%7#0 5u)
        goto tmp%8#0 ? block@2 : block@3
    block@2: // bool_true_L16
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L16
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L16
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2)
        goto tmp%6#0 ? block@5 : block@7
    block@5: // and_contd_L17
        let tmp%11#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%12#0: bool = (> tmp%11#0 4u)
        goto tmp%12#0 ? block@6 : block@7
    block@6: // bool_true_L17
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L17
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L17
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2)
        goto tmp%6#0 ? block@9 : block@11
    block@9: // and_contd_L18
        let tmp%15#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%16#0: bool = (< tmp%15#0 6u)
        goto tmp%16#0 ? block@10 : block@11
    block@10: // bool_true_L18
        let and_result%2#0: bool = 1u
        goto block@12
    block@11: // bool_false_L18
        let and_result%2#1: bool = 0u
        goto block@12
    block@12: // bool_merge_L18
        let and_result%2#2: bool = φ(and_result%2#0 <- block@10, and_result%2#1 <- block@11)
        (assert and_result%2#2)
        goto tmp%6#0 ? block@13 : block@15
    block@13: // and_contd_L19
        let tmp%19#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%20#0: bool = (>= tmp%19#0 5u)
        goto tmp%20#0 ? block@14 : block@15
    block@14: // bool_true_L19
        let and_result%3#0: bool = 1u
        goto block@16
    block@15: // bool_false_L19
        let and_result%3#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L19
        let and_result%3#2: bool = φ(and_result%3#0 <- block@14, and_result%3#1 <- block@15)
        (assert and_result%3#2)
        goto tmp%6#0 ? block@17 : block@19
    block@17: // and_contd_L20
        let tmp%23#0: uint64 = (extract_uint64 xArray#0 2u)
        let tmp%24#0: bool = (<= tmp%23#0 5u)
        goto tmp%24#0 ? block@18 : block@19
    block@18: // bool_true_L20
        let and_result%4#0: bool = 1u
        goto block@20
    block@19: // bool_false_L20
        let and_result%4#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L20
        let and_result%4#2: bool = φ(and_result%4#0 <- block@18, and_result%4#1 <- block@19)
        (assert and_result%4#2)
        return 