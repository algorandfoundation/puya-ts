{
    "name": "AssignmentsAlgo",
    "structs": {
        "Object3C0E3B9F": [
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "minBalance",
                "type": "uint64"
            }
        ],
        "Object3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ],
        "ReadonlyObject3EB715E7": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "testPrimitives",
            "args": [
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAccountDestructure",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Object3C0E3B9F"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayDestructure",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "i_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64[]",
                    "name": "m_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArrayNarrowing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "m_a"
                },
                {
                    "type": "uint64",
                    "name": "u"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testTupleToArray",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "m_t"
                },
                {
                    "type": "(uint64,uint64)",
                    "name": "i_t"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNested",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "i_a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDestructureObj",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "Object3EB715E7",
                    "name": "m"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "ReadonlyObject3EB715E7",
                    "name": "i"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testObjLiteralNarrowing",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMixed",
            "args": [
                {
                    "type": "((uint64))[]",
                    "name": "m"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        92,
                        101,
                        121,
                        130,
                        145,
                        169,
                        188,
                        210,
                        231
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        253,
                        257
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        334,
                        435,
                        467
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        245
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        95,
                        104,
                        124,
                        133,
                        148,
                        172,
                        191,
                        213,
                        234
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        494
                    ],
                    "errorMessage": "getVal should only be called once"
                },
                {
                    "pc": [
                        505
                    ],
                    "errorMessage": "getVal should still be called once even though its result is not used"
                },
                {
                    "pc": [
                        476
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        309
                    ],
                    "errorMessage": "logAndReturn called 3 times"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQACCCYBAgACMRtBANyCCQRwLqEIBO3ahekEWy93EwSQzMs9BNi+k78EWj/sWgQnpPNnBNbJ9IYEbgOtDDYaAI4JAI0AeABiAE8ANwAoAB8ACwACI0MxGRREMRhEIkMxGRREMRhENhoBFzYaAheIAWoiQzEZFEQxGEQiQzEZFEQxGEQ2GgGIAUkiQzEZFEQxGEQ2GgE2GgJJI1tMJVuIAOUiQzEZFEQxGEQ2GgE2GgIXiACwIkMxGRREMRhENhoBNhoCFzYaA4gAOyJDMRkURDEYRIgAH4AEFR98dUxQsCJDMRkURDEYRCJDMRlA/2UxGBREIkMyCklzAERMcwFETBZMFlCJigMAIzUANAAiCDUAi/4WSbA0ACIINQBJsDQAIgg1AEmwSUsBUEsBUDQAgQMSREkjW4v+EiIQSwElW4v+EhBMgRBbi/4SEEQ0ACIINQBJsDQAIgg1AEmwNAAiCDUAsImKAgCL/iRbSSIIFov+TFwCTCQIFov+TFwCTCRbTCRbE0SJigMAi/0jW4v9JVtLARYoTFBLARZQSSNZJBJLASRbTwQSEEyBCltPAhIQRIv+FihMUIv/FlBJI1kkEksBJFuL/hIQTIEKW4v/EhBEiYoBAIv/I1lEiYoCACM1ADQAIgg1ADQAIhJENAAiCDUANAAkEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}