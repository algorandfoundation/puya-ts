{
    "hints": {
        "testPrimitives(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testArrayDestructure(uint64[],uint64,uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testArrayNarrowing(uint64[],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testTupleToArray((uint64,uint64),(uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testNested(uint64[][])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testDestructureObj((uint64,string),(uint64,string))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "m": {
                    "name": "Object3EB715E7",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ]
                    ]
                },
                "i": {
                    "name": "ReadonlyObject3EB715E7",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ]
                    ]
                }
            }
        },
        "testObjLiteralNarrowing(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testMixed(((uint64))[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AssignmentsAlgo",
        "methods": [
            {
                "name": "testPrimitives",
                "args": [
                    {
                        "type": "uint64",
                        "name": "u"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testArrayDestructure",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "i_a"
                    },
                    {
                        "type": "uint64",
                        "name": "u"
                    },
                    {
                        "type": "uint64[]",
                        "name": "m_a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testArrayNarrowing",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "m_a"
                    },
                    {
                        "type": "uint64",
                        "name": "u"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testTupleToArray",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "m_t"
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "i_t"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testNested",
                "args": [
                    {
                        "type": "uint64[][]",
                        "name": "i_a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testDestructureObj",
                "args": [
                    {
                        "type": "(uint64,string)",
                        "name": "m"
                    },
                    {
                        "type": "(uint64,string)",
                        "name": "i"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testObjLiteralNarrowing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "testMixed",
                "args": [
                    {
                        "type": "((uint64))[]",
                        "name": "m"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}