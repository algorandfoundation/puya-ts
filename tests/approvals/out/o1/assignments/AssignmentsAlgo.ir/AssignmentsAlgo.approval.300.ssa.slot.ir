main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L19
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@3, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@4, method "testArrayNarrowing(uint64[],uint64)void" => block@5, method "testTupleToArray((uint64,uint64),(uint64,uint64))void" => block@6, method "testNested(uint64[][])void" => block@7, method "testDestructureObj((uint64,string),(uint64,string))void" => block@8, method "testObjLiteralNarrowing(uint64,uint64)void" => block@9, method "testMixed(((uint64))[])void" => block@10, * => block@17}
    block@3: // testPrimitives_route_L21
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // testArrayDestructure_route_L29
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%12#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(reinterpret_Encoded(len+uint64[])%0#0, tmp%12#0, reinterpret_Encoded(len+uint64[])%1#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // testArrayNarrowing_route_L49
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(reinterpret_Encoded(len+uint64[])%2#0, tmp%17#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // testTupleToArray_route_L63
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let aggregate%item0%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%1#0 0u)
        let aggregate%item1%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%1#0 8u)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray(reinterpret_Encoded(uint64,uint64)%0#0, aggregate%item0%0#1, aggregate%item1%0#1)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // testNested_route_L73
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(reinterpret_Encoded(len+(len+uint64[])[])%0#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // testDestructureObj_route_L78
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // testObjLiteralNarrowing_route_L83
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // testMixed_route_L96
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L19
        let tmp%44#0: uint64 = (txn OnCompletion)
        goto tmp%44#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L19
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // can only call when creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L19
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::logAndReturn(u: uint64) -> uint64:
    block@0: // L114
        let tmp%0#1: uint64 = (load 0)
        let tmp%1#0: uint64 = (+ tmp%0#1 1u)
        ((store 0) tmp%1#0)
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        return u#0

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: Encoded(len+uint64[]), u: uint64, m_a: Encoded(len+uint64[])) -> void:
    block@0: // L29
        ((store 0) 0u)
        let a2#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let a3#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%3#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a2#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob a3#0)
        let aggregate%head%1#1: bytes = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%3#0)
        let a5#0: Encoded(uint64,uint64,uint64) = (concat aggregate%head%1#1 aggregate%val_as_bytes%2#1)
        let tmp%0#1: uint64 = (load 0)
        let tmp%6#0: bool = (== tmp%0#1 3u)
        (assert tmp%6#0) // logAndReturn called 3 times
        let tmp%7#0: bool = (== a2#0 u#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== a3#0 u#0)
        (assert tmp%8#0)
        let values%2#0: uint64 = (extract_uint64 a5#0 0u)
        let tmp%10#0: bool = (== values%2#0 u#0)
        goto tmp%10#0 ? block@2 : block@5
    block@2: // and_contd_L38
        let values%3#0: uint64 = (extract_uint64 a5#0 8u)
        let tmp%11#0: bool = (== values%3#0 u#0)
        goto tmp%11#0 ? block@3 : block@5
    block@3: // and_contd_L38
        let values%4#0: uint64 = (extract_uint64 a5#0 16u)
        let tmp%12#0: bool = (== values%4#0 u#0)
        goto tmp%12#0 ? block@4 : block@5
    block@4: // bool_true_L38
        let and_result%0#0: bool = 1u
        goto block@6
    block@5: // bool_false_L38
        let and_result%0#1: bool = 0u
        goto block@6
    block@6: // bool_merge_L38
        let and_result%0#2: bool = φ(and_result%0#0 <- block@4, and_result%0#1 <- block@5)
        (assert and_result%0#2) // assert target is match for conditions
        let c#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let d#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%17#0: uint64 = tests/approvals/assignments.algo.ts::logAndReturn(u#0)
        let tmp%19#0: bool = (== c#0 u#0)
        goto tmp%19#0 ? block@8 : block@10
    block@8: // and_contd_L43
        let tmp%20#0: bool = (== d#0 u#0)
        goto tmp%20#0 ? block@9 : block@10
    block@9: // bool_true_L43
        let and_result%1#0: bool = 1u
        goto block@11
    block@10: // bool_false_L43
        let and_result%1#1: bool = 0u
        goto block@11
    block@11: // bool_merge_L43
        let and_result%1#2: bool = φ(and_result%1#0 <- block@9, and_result%1#1 <- block@10)
        (assert and_result%1#2) // assert target is match for conditions
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(m_a: Encoded(len+uint64[]), u: uint64) -> void:
    block@0: // L49
        let values%0#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%0#0)
        let m_a#1: Encoded(len+uint64[]) = ((replace2 2) m_a#0 aggregate%val_as_bytes%0#1)
        let tmp%1#0: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%1#0)
        let direct#1: Encoded(len+uint64[]) = ((replace2 2) m_a#0 aggregate%val_as_bytes%1#1)
        let values%2#0: uint64 = (extract_uint64 m_a#1 2u)
        let values%3#0: uint64 = (extract_uint64 direct#1 2u)
        let tmp%2#0: bool = (!= values%2#0 values%3#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray(m_t: Encoded(uint64,uint64), i_t.0: uint64, i_t.1: uint64) -> void:
    block@0: // L63
        let values%0#0: uint64 = (extract_uint64 m_t#0 0u)
        let values%1#0: uint64 = (extract_uint64 m_t#0 8u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob values%0#0)
        let aggregate%head%0#1: bytes = (concat 0x0002 aggregate%val_as_bytes%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob values%1#0)
        let m_a#0: Encoded(len+uint64[]) = (concat aggregate%head%0#1 aggregate%val_as_bytes%1#1)
        let array_length%0#0: uint64 = (extract_uint16 m_a#0 0u)
        let tmp%0#0: bool = (== array_length%0#0 2u)
        goto tmp%0#0 ? block@1 : block@4
    block@1: // and_contd_L65
        let values%2#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%1#0: bool = (== values%2#0 values%0#0)
        goto tmp%1#0 ? block@2 : block@4
    block@2: // and_contd_L65
        let values%4#0: uint64 = (extract_uint64 m_a#0 10u)
        let tmp%2#0: bool = (== values%4#0 values%1#0)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // bool_true_L65
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L65
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L65
        let and_result%0#2: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        goto tmp%0#0 ? block@6 : block@9
    block@6: // and_contd_L67
        let values%8#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%4#0: bool = (== values%8#0 values%0#0)
        goto tmp%4#0 ? block@7 : block@9
    block@7: // and_contd_L67
        let values%10#0: uint64 = (extract_uint64 m_a#0 10u)
        let tmp%5#0: bool = (== values%10#0 values%1#0)
        goto tmp%5#0 ? block@8 : block@9
    block@8: // bool_true_L67
        let and_result%1#0: bool = 1u
        goto block@10
    block@9: // bool_false_L67
        let and_result%1#1: bool = 0u
        goto block@10
    block@10: // bool_merge_L67
        let and_result%1#2: bool = φ(and_result%1#0 <- block@8, and_result%1#1 <- block@9)
        (assert and_result%1#2) // assert target is match for conditions
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob i_t.0#0)
        let aggregate%head%2#1: bytes = (concat 0x0002 aggregate%val_as_bytes%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob i_t.1#0)
        let i_a2#0: Encoded(len+uint64[]) = (concat aggregate%head%2#1 aggregate%val_as_bytes%3#1)
        let array_length%2#0: uint64 = (extract_uint16 i_a2#0 0u)
        let tmp%6#0: bool = (== array_length%2#0 2u)
        goto tmp%6#0 ? block@11 : block@14
    block@11: // and_contd_L70
        let values%12#0: uint64 = (extract_uint64 i_a2#0 2u)
        let tmp%7#0: bool = (== values%12#0 i_t.0#0)
        goto tmp%7#0 ? block@12 : block@14
    block@12: // and_contd_L70
        let values%13#0: uint64 = (extract_uint64 i_a2#0 10u)
        let tmp%8#0: bool = (== values%13#0 i_t.1#0)
        goto tmp%8#0 ? block@13 : block@14
    block@13: // bool_true_L70
        let and_result%2#0: bool = 1u
        goto block@15
    block@14: // bool_false_L70
        let and_result%2#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L70
        let and_result%2#2: bool = φ(and_result%2#0 <- block@13, and_result%2#1 <- block@14)
        (assert and_result%2#2) // assert target is match for conditions
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(i_a: Encoded(len+(len+uint64[])[])) -> void:
    block@0: // L73
        let aggregate%array_length%0#1: uint64 = (extract_uint16 i_a#0 0u)
        (assert aggregate%array_length%0#1) // index access is out of bounds
        return 