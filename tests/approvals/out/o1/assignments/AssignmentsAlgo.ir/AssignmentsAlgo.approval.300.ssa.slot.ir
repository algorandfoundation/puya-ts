main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L19
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testPrimitives(uint64)void" => block@4, method "testAccountDestructure()(uint64,uint64)" => block@5, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@6, method "testArrayNarrowing(uint64[],uint64)void" => block@7, method "testTupleToArray((uint64,uint64),(uint64,uint64))void" => block@8, method "testNested(uint64[][])void" => block@9, method "testDestructureObj((uint64,string),(uint64,string))void" => block@10, method "testObjLiteralNarrowing(uint64,uint64)void" => block@11, method "testMixed(((uint64))[])void" => block@12, * => block@15}
    block@4: // testPrimitives_route_L21
        exit 1u
    block@5: // testAccountDestructure_route_L29
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testAccountDestructure[routing]()
        goto block@15
    block@6: // testArrayDestructure_route_L34
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure[routing]()
        goto block@15
    block@7: // testArrayNarrowing_route_L54
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing[routing]()
        goto block@15
    block@8: // testTupleToArray_route_L68
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray[routing]()
        goto block@15
    block@9: // testNested_route_L78
        exit 1u
    block@10: // testDestructureObj_route_L83
        exit 1u
    block@11: // testObjLiteralNarrowing_route_L88
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing[routing]()
        goto block@15
    block@12: // testMixed_route_L103
        exit 1u
    block@15: // after_if_else_L19
        fail
    block@16: // __algots__.defaultCreate_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testAccountDestructure[routing]() -> void:
    block@0: // L29
        let awst_tmp%0#0: account = (global CurrentApplicationAddress)
        let (balance#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) awst_tmp%0#0)
        (assert check%0#0) // account funded
        let (minBalance#0: uint64, check%1#0: bool) = ((acct_params_get AcctMinBalance) awst_tmp%0#0)
        (assert check%1#0) // account funded
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob balance#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob minBalance#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 aggregate%head%1#0)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure[routing]() -> void:
    block@0: // L34
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let u#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        ((store 0) 0u)
        let tmp%0#1: uint64 = (load 0)
        let tmp%1#0: uint64 = (+ tmp%0#1 1u)
        ((store 0) tmp%1#0)
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        let tmp%0#3: uint64 = (load 0)
        let tmp%1#1: uint64 = (+ tmp%0#3 1u)
        ((store 0) tmp%1#1)
        (log tmp%0#0)
        let tmp%0#5: uint64 = (load 0)
        let tmp%1#2: uint64 = (+ tmp%0#5 1u)
        ((store 0) tmp%1#2)
        (log tmp%0#0)
        let aggregate%head%1#0: bytes = (concat tmp%0#0 tmp%0#0)
        let a5#0: Encoded(uint64,uint64,uint64) = (concat aggregate%head%1#0 tmp%0#0)
        let tmp%0#6: uint64 = (load 0)
        let tmp%6#0: bool = (== tmp%0#6 3u)
        (assert tmp%6#0) // logAndReturn called 3 times
        let values%2#0: uint64 = (extract_uint64 a5#0 0u)
        let tmp%10#0: bool = (== values%2#0 u#0)
        let tmp%11#0: bool = (&& 1u tmp%10#0)
        let values%3#0: uint64 = (extract_uint64 a5#0 8u)
        let tmp%12#0: bool = (== values%3#0 u#0)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        let values%4#0: uint64 = (extract_uint64 a5#0 16u)
        let tmp%14#0: bool = (== values%4#0 u#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        (assert tmp%15#0) // assert target is match for conditions
        let tmp%0#8: uint64 = (load 0)
        let tmp%1#3: uint64 = (+ tmp%0#8 1u)
        ((store 0) tmp%1#3)
        (log tmp%0#0)
        let tmp%0#10: uint64 = (load 0)
        let tmp%1#4: uint64 = (+ tmp%0#10 1u)
        ((store 0) tmp%1#4)
        (log tmp%0#0)
        let tmp%0#12: uint64 = (load 0)
        let tmp%1#5: uint64 = (+ tmp%0#12 1u)
        ((store 0) tmp%1#5)
        (log tmp%0#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing[routing]() -> void:
    block@0: // L54
        let m_a#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%0#1: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let m_a#1: Encoded(len+uint64[]) = ((replace2 2) m_a#0 aggregate%val_as_bytes%0#0) // on error: index access is out of bounds
        let tmp%1#0: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let direct#1: Encoded(len+uint64[]) = ((replace2 2) m_a#0 aggregate%val_as_bytes%1#0) // on error: index access is out of bounds
        let values%2#0: uint64 = (extract_uint64 m_a#1 2u)
        let values%3#0: uint64 = (extract_uint64 direct#1 2u)
        let tmp%2#0: bool = (!= values%2#0 values%3#0)
        (assert tmp%2#0)
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testTupleToArray[routing]() -> void:
    block@0: // L68
        let m_t#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let i_t.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%1#0 0u)
        let i_t.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%1#0 8u)
        let values%0#0: uint64 = (extract_uint64 m_t#0 0u)
        let values%1#0: uint64 = (extract_uint64 m_t#0 8u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%0#0)
        let aggregate%head%0#0: bytes = (concat 0x0002 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let m_a#0: Encoded(len+uint64[]) = (concat aggregate%head%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 m_a#0 0u)
        let tmp%1#1: bool = (== aggregate%array_length%0#0 2u)
        let values%2#0: uint64 = (extract_uint64 m_a#0 2u)
        let tmp%2#0: bool = (== values%2#0 values%0#0)
        let tmp%3#0: bool = (&& tmp%1#1 tmp%2#0)
        let values%4#0: uint64 = (extract_uint64 m_a#0 10u)
        let tmp%4#0: bool = (== values%4#0 values%1#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob i_t.0#0)
        let aggregate%head%2#0: bytes = (concat 0x0002 aggregate%val_as_bytes%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob i_t.1#0)
        let i_a2#0: Encoded(len+uint64[]) = (concat aggregate%head%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 i_a2#0 0u)
        let tmp%13#0: bool = (== aggregate%array_length%2#0 2u)
        let values%12#0: uint64 = (extract_uint64 i_a2#0 2u)
        let tmp%14#0: bool = (== values%12#0 i_t.0#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        let values%13#0: uint64 = (extract_uint64 i_a2#0 10u)
        let tmp%16#0: bool = (== values%13#0 i_t.1#0)
        let tmp%17#0: bool = (&& tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // assert target is match for conditions
        exit 1u

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing[routing]() -> void:
    block@0: // L88
        ((store 0) 0u)
        let tmp%0#0: uint64 = (load 0)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        ((store 0) tmp%1#0)
        let tmp%0#1: uint64 = (load 0)
        let tmp%4#0: bool = (== tmp%0#1 1u)
        (assert tmp%4#0) // getVal should only be called once
        let tmp%0#2: uint64 = (load 0)
        let tmp%1#1: uint64 = (+ tmp%0#2 1u)
        ((store 0) tmp%1#1)
        let tmp%0#3: uint64 = (load 0)
        let tmp%7#0: bool = (== tmp%0#3 2u)
        (assert tmp%7#0) // getVal should still be called once even though its result is not used
        exit 1u