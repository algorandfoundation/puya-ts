main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testPrimitives(uint64)void" => block@3, method "testArrayDestructure(uint64[],uint64,uint64[])void" => block@4, method "testArrayNarrowing(uint64[],uint64)void" => block@5, method "testNested(uint64[][])void" => block@6, method "testDestructureObj((uint64,string),(uint64,string))void" => block@7, method "testObjLiteralNarrowing(uint64,uint64)void" => block@8, method "testMixed(((uint64))[])void" => block@9, * => block@16}
    block@3: // testPrimitives_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let u#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@4: // testArrayDestructure_route_L14
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%12#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(reinterpret_Encoded(len+uint64[])%0#0, tmp%12#0, reinterpret_Encoded(len+uint64[])%1#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@5: // testArrayNarrowing_route_L24
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(reinterpret_Encoded(len+uint64[])%2#0, tmp%17#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@6: // testNested_route_L34
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(reinterpret_Encoded(len+(len+uint64[])[])%0#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@7: // testDestructureObj_route_L38
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 2)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 8u)
        let aggregate%len%0#1: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%0#1)
        let (tmp%26#0: uint64, tmp%27#0: string) = (aggregate%item0%0#1, aggregate%item1%0#1)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(reinterpret_Encoded(uint64,(len+utf8[]))%0#0, tmp%26#0, tmp%27#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@8: // testObjLiteralNarrowing_route_L43
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%33#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(tmp%32#0, tmp%33#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@9: // testMixed_route_L56
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(len+((uint64))[])%0#0: Encoded(len+((uint64))[]) = (txna ApplicationArgs 1)
        tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(reinterpret_Encoded(len+((uint64))[])%0#0)
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // bare_routing_L7
        let tmp%38#0: uint64 = (txn OnCompletion)
        goto tmp%38#0 ? block@16 : block@13
    block@13: // __algots__.defaultCreate_L7
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // can only call when creating
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@16: // after_if_else_L7
        let tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8: bool = 0u
        goto block@17
    block@17: // after_inlined_tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#7 <- block@13, tests/approvals/assignments.algo.ts::AssignmentsAlgo.__puya_arc4_router__%0#8 <- block@16)
        return tmp%0#0

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: Encoded(len+uint64[]), u: uint64, m_a: Encoded(len+uint64[])) -> void:
    block@0: // L14
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) i_a#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let a1#0: uint64 = (btoi array_item%0#0)
        let tmp%0#0: bytes[8] = (itob u#0)
        (log tmp%0#0)
        (log tmp%0#0)
        (log tmp%0#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded%3#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%2#1 0x)
        let a5#0: Encoded(uint64,uint64,uint64) = aggregate%encoded%3#1
        (log tmp%0#0)
        (log tmp%0#0)
        (log tmp%0#0)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) m_a#0)
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let a6#0: uint64 = (btoi array_item%1#0)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) m_a#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let a7#0: uint64 = (btoi array_item%2#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayNarrowing(m_a: Encoded(len+uint64[]), u: uint64) -> void:
    block@0: // L24
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob u#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%3#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%2#1)
        let aggregate%encoded%4#1: Encoded(len+uint64[]) = (concat aggregate%encoded%3#1 0x)
        let fromLit#0: Encoded(len+uint64[]) = aggregate%encoded%4#1
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(i_a: Encoded(len+(len+uint64[])[])) -> void:
    block@0: // L34
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) i_a#0)
        let aggregate%array_length%0#1: uint64 = (extract_uint16 i_a#0 0u)
        let aggregate%lt%0#1: bool = (< 0u aggregate%array_length%0#1)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%item_offset_offset%0#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1)
        let aggregate%item_length_in_bytes%0#1: uint64 = (* aggregate%item_length%0#1 8u)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length_in_bytes%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) aggregate%item%0#1)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let a#0: uint64 = (btoi array_item%1#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testDestructureObj(m: Encoded(uint64,(len+utf8[])), i.a: uint64, i.b: string) -> void:
    block@0: // L38
        let aggregate%extract%0#1: bytes = (extract3 m#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let a1#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 m#0 8u)
        let aggregate%len%0#1: uint64 = (len m#0)
        let aggregate%substring3%0#1: bytes = (substring3 m#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%1#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let b1#0: string = ((extract 2 0) tuple_item%1#0)
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testObjLiteralNarrowing(a: uint64, b: uint64) -> void:
    block@0: // L43
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%2#1: Encoded(uint64,uint64) = (concat aggregate%encoded%1#1 0x)
        let mObj#0: Encoded(uint64,uint64) = aggregate%encoded%2#1
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%3#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob 456u)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%4#1: Encoded(uint64,uint64) = (concat aggregate%encoded%3#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%encoded%5#1: Encoded(uint64,uint64) = (concat aggregate%encoded%4#1 0x)
        let mObj2#0: Encoded(uint64,uint64) = aggregate%encoded%5#1
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%4#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%7#1: Encoded(uint64,uint64) = (concat aggregate%encoded%6#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%encoded%8#1: Encoded(uint64,uint64) = (concat aggregate%encoded%7#1 0x)
        let mObj3#0: Encoded(uint64,uint64) = aggregate%encoded%8#1
        return 

subroutine tests/approvals/assignments.algo.ts::AssignmentsAlgo.testMixed(m: Encoded(len+((uint64))[])) -> void:
    block@0: // L56
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) m#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let aggregate%extract%0#1: bytes = (extract3 aggregate%encoded_element%0#1 0u 8u)
        let aggregate%extract%1#1: bytes = (extract3 aggregate%extract%0#1 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let a1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 213u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%1#1: Encoded(uint64) = (concat aggregate%encoded%0#1 0x)
        let tmp%0#0: Encoded(uint64) = aggregate%encoded%1#1
        let aggregate%encoded%2#1: Encoded((uint64)) = (concat 0x tmp%0#0)
        let aggregate%encoded%3#1: Encoded((uint64)) = (concat aggregate%encoded%2#1 0x)
        let tmp%1#0: Encoded((uint64)) = aggregate%encoded%3#1
        let aggregate%encoded%4#1: Encoded(((uint64))) = (concat 0x tmp%1#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%5#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%4#1)
        let aggregate%encoded%6#1: Encoded(len+((uint64))[]) = (concat aggregate%encoded%5#1 0x)
        let m#1: Encoded(len+((uint64))[]) = aggregate%encoded%6#1
        return 