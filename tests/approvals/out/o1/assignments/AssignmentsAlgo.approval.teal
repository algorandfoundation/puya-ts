#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@12
    pushbytess 0x702ea108 0x5b2f7713 0x90cccb3d 0x5a3fec5a 0x27a4f367 0xd6c9f486 0x6e03ad0c // method "testPrimitives(uint64)void", method "testArrayDestructure(uint64[],uint64,uint64[])void", method "testArrayNarrowing(uint64[],uint64)void", method "testNested(uint64[][])void", method "testDestructureObj((uint64,string),(uint64,string))void", method "testObjLiteralNarrowing(uint64,uint64)void", method "testMixed(((uint64))[])void"
    txna ApplicationArgs 0
    match main_testPrimitives_route@3 main_testArrayDestructure_route@4 main_testArrayNarrowing_route@5 main_testNested_route@6 main_testDestructureObj_route@7 main_testObjLiteralNarrowing_route@8 main_testMixed_route@9

main_after_if_else@16:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    intc_1 // 0
    return

main_testMixed_route@9:
    // tests/approvals/assignments.algo.ts:56
    // testMixed(m: Array<{ a: [uint64] }>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_testObjLiteralNarrowing_route@8:
    // tests/approvals/assignments.algo.ts:43
    // testObjLiteralNarrowing(a: uint64, b: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_testDestructureObj_route@7:
    // tests/approvals/assignments.algo.ts:38
    // testDestructureObj(m: { a: uint64; b: string }, i: Readonly<{ a: uint64; b: string }>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_testNested_route@6:
    // tests/approvals/assignments.algo.ts:34
    // testNested(i_a: ReadonlyArray<ReadonlyArray<uint64>>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/assignments.algo.ts:34
    // testNested(i_a: ReadonlyArray<ReadonlyArray<uint64>>) {
    callsub testNested
    intc_0 // 1
    return

main_testArrayNarrowing_route@5:
    // tests/approvals/assignments.algo.ts:24
    // testArrayNarrowing(m_a: uint64[], u: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_testArrayDestructure_route@4:
    // tests/approvals/assignments.algo.ts:14
    // testArrayDestructure(i_a: ReadonlyArray<uint64>, u: uint64, m_a: uint64[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // tests/approvals/assignments.algo.ts:14
    // testArrayDestructure(i_a: ReadonlyArray<uint64>, u: uint64, m_a: uint64[]) {
    callsub testArrayDestructure
    intc_0 // 1
    return

main_testPrimitives_route@3:
    // tests/approvals/assignments.algo.ts:8
    // testPrimitives(u: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_bare_routing@12:
    // tests/approvals/assignments.algo.ts:7
    // export class AssignmentsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@16
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testArrayDestructure(i_a: bytes, u: uint64, m_a: bytes) -> void:
testArrayDestructure:
    // tests/approvals/assignments.algo.ts:14
    // testArrayDestructure(i_a: ReadonlyArray<uint64>, u: uint64, m_a: uint64[]) {
    proto 3 0
    // tests/approvals/assignments.algo.ts:75
    // log(u)
    frame_dig -2
    itob
    dup
    log
    dup
    log
    dup
    log
    dup
    log
    dup
    log
    log
    retsub


// tests/approvals/assignments.algo.ts::AssignmentsAlgo.testNested(i_a: bytes) -> void:
testNested:
    // tests/approvals/assignments.algo.ts:34
    // testNested(i_a: ReadonlyArray<ReadonlyArray<uint64>>) {
    proto 1 0
    // tests/approvals/assignments.algo.ts:35
    // const [[a]] = i_a
    frame_dig -1
    intc_1 // 0
    extract_uint16
    assert // index access is out of bounds
    retsub
