main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getXY()(uint64,uint64)" => block@3, method "getYX()(uint64,uint64)" => block@4, method "getAnon()(uint64,uint64)" => block@5, method "test((uint64,uint64),(uint64,uint64))void" => block@6, method "testing()((uint64,uint64),(uint64,uint64),(uint64,uint64))" => block@7, * => block@14}
    block@3: // getXY_route_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c7500000000000000010000000000000002)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // getYX_route_L22
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        (log 0x151f7c75000000000000006f00000000000000de)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // getAnon_route_L29
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        (log 0x151f7c7500000000000000030000000000000004)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // test_route_L36
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 2)
        let item0%3#0: uint64 = (extract_uint64 reinterpret_bytes[16]%1#0 0u)
        let item1%3#0: uint64 = (extract_uint64 reinterpret_bytes[16]%1#0 8u)
        tests/approvals/named-types.algo.ts::MyContract.test(item0%1#0, item1%1#0, item0%3#0, item1%3#0)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // testing_route_L40
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        (log 0x151f7c7500000000000000010000000000000002000000000000006f00000000000000de00000000000000030000000000000004)
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // bare_routing_L14
        let tmp%27#0: uint64 = (txn OnCompletion)
        goto tmp%27#0 ? block@14 : block@11
    block@11: // __algots__.defaultCreate_L14
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // can only call when creating
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@14: // after_if_else_L14
        let tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#2 <- block@5, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#3 <- block@6, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#4 <- block@7, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#5 <- block@11, tests/approvals/named-types.algo.ts::MyContract.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0

subroutine tests/approvals/named-types.algo.ts::MyContract.test(x.x: uint64, x.y: uint64, y.y: uint64, y.x: uint64) -> void:
    block@0: // L36
        let tmp%0#0: bool = (== x.y#0 y.y#0)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L37
        let tmp%1#0: bool = (== x.x#0 y.x#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L37
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L37
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L37
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        return 