#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2
    // tests/approvals/global-state.algo.ts:33-34
    // @contract({ stateTotals: { globalUints: 5 } })
    // export class TestArc4 extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xa1504061 0xfd47fdd1 // method "setState(string,uint64)void", method "deleteState(string)void"
    txna ApplicationArgs 0
    match main_setState_route@3 main_deleteState_route@4

main_after_if_else@11:
    // tests/approvals/global-state.algo.ts:33-34
    // @contract({ stateTotals: { globalUints: 5 } })
    // export class TestArc4 extends Contract {
    intc_0 // 0
    return

main_deleteState_route@4:
    // tests/approvals/global-state.algo.ts:41
    // deleteState(key: string) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/global-state.algo.ts:33-34
    // @contract({ stateTotals: { globalUints: 5 } })
    // export class TestArc4 extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // tests/approvals/global-state.algo.ts:41
    // deleteState(key: string) {
    callsub deleteState
    intc_1 // 1
    return

main_setState_route@3:
    // tests/approvals/global-state.algo.ts:35
    // setState(key: string, value: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/global-state.algo.ts:33-34
    // @contract({ stateTotals: { globalUints: 5 } })
    // export class TestArc4 extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // tests/approvals/global-state.algo.ts:35
    // setState(key: string, value: uint64) {
    callsub setState
    intc_1 // 1
    return

main_bare_routing@7:
    // tests/approvals/global-state.algo.ts:33-34
    // @contract({ stateTotals: { globalUints: 5 } })
    // export class TestArc4 extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/global-state.algo.ts::TestArc4.setState(key: bytes, value: uint64) -> void:
setState:
    // tests/approvals/global-state.algo.ts:35
    // setState(key: string, value: uint64) {
    proto 2 0
    // tests/approvals/global-state.algo.ts:38
    // proxy.value = value
    frame_dig -2
    frame_dig -1
    app_global_put
    retsub


// tests/approvals/global-state.algo.ts::TestArc4.deleteState(key: bytes) -> void:
deleteState:
    // tests/approvals/global-state.algo.ts:41
    // deleteState(key: string) {
    proto 1 0
    // tests/approvals/global-state.algo.ts:42
    // GlobalState<uint64>({ key }).delete()
    frame_dig -1
    app_global_del
    retsub
