main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/global-state.algo.ts::TestArc4.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/global-state.algo.ts::TestArc4.__puya_arc4_router__() -> bool:
    block@0: // L44
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L44
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "setState(string,uint64)void" => block@2, method "deleteState(string)void" => block@3, * => block@4}
    block@2: // setState_route_L46
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/global-state.algo.ts::TestArc4.setState(tmp%7#0, tmp%8#0)
        return 1u
    block@3: // deleteState_route_L52
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%13#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%1#0)
        tests/approvals/global-state.algo.ts::TestArc4.deleteState(tmp%13#0)
        return 1u
    block@4: // switch_case_default_L44
        goto block@5
    block@5: // switch_case_next_L44
        goto block@10
    block@6: // bare_routing_L44
        let tmp%14#0: uint64 = (txn OnCompletion)
        switch tmp%14#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L44
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (== tmp%15#0 0u)
        (assert tmp%16#0) // can only call when creating
        tests/approvals/global-state.algo.ts::TestArc4.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L44
        goto block@9
    block@9: // switch_case_next_L44
        goto block@10
    block@10: // after_if_else_L44
        return 0u

subroutine tests/approvals/global-state.algo.ts::TestArc4.setState(key: string, value: uint64) -> void:
    block@0: // L46
        let proxy#0: bytes = key#0
        (app_global_put proxy#0 value#0)
        return 

subroutine tests/approvals/global-state.algo.ts::TestArc4.deleteState(key: string) -> void:
    block@0: // L52
        (app_global_del key#0)
        return 

subroutine tests/approvals/global-state.algo.ts::TestArc4.__algots__.defaultCreate() -> void:
    block@0: // L44
        return 