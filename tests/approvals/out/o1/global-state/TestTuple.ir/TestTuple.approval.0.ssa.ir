main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/global-state.algo.ts::TestTuple.__puya_arc4_router__() -> bool:
    block@0: // L46
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L46
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testTuple()void" => block@2, * => block@3}
    block@2: // testTuple_route_L53
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/global-state.algo.ts::TestTuple.testTuple()
        return 1u
    block@3: // switch_case_default_L46
        goto block@4
    block@4: // switch_case_next_L46
        goto block@9
    block@5: // bare_routing_L46
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algots__.defaultCreate_L46
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate()
        return 1u
    block@7: // switch_case_default_L46
        goto block@8
    block@8: // switch_case_next_L46
        goto block@9
    block@9: // after_if_else_L46
        return 0u

subroutine tests/approvals/global-state.algo.ts::TestTuple.testTuple() -> void:
    block@0: // L53
        let length%0#0: uint64 = (len "hello")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "hello")
        let val_as_bytes%0#0: bytes[8] = (itob 123u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let current_tail_offset%0#0: uint64 = 11u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_bool%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        (app_global_put "t1" encoded_tuple_buffer%4#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%0#0) // check GlobalState exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (len maybe_value%0#0)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 2 0) item0%0#0)
        let item1%0#0: bytes = (extract3 maybe_value%0#0 2u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        let is_true%0#0: uint64 = (getbit maybe_value%0#0 80u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let item2%0#0: bool = (getbit encoded_bool%1#0 0u)
        let tmp%0#0: bool = (== item0%1#0 "hello")
        (assert tmp%0#0) // Tuple value should be set
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%1#0) // check GlobalState exists
        let item_start_offset%1#0: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let item_end_offset%1#0: uint64 = (len maybe_value%1#0)
        let item0%2#0: bytes = (substring3 maybe_value%1#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%3#0: bytes = ((extract 2 0) item0%2#0)
        let item1%2#0: bytes = (extract3 maybe_value%1#0 2u 8u) // on error: Index access is out of bounds
        let item1%3#0: uint64 = (btoi item1%2#0)
        let is_true%1#0: uint64 = (getbit maybe_value%1#0 80u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let item2%1#0: bool = (getbit encoded_bool%2#0 0u)
        let tmp%1#0: bool = (== item1%3#0 123u)
        (assert tmp%1#0) // Tuple value should be set
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "t1")
        (assert maybe_exists%2#0) // check GlobalState exists
        let item_start_offset%2#0: uint64 = (extract_uint16 maybe_value%2#0 0u)
        let item_end_offset%2#0: uint64 = (len maybe_value%2#0)
        let item0%4#0: bytes = (substring3 maybe_value%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item0%5#0: bytes = ((extract 2 0) item0%4#0)
        let item1%4#0: bytes = (extract3 maybe_value%2#0 2u 8u) // on error: Index access is out of bounds
        let item1%5#0: uint64 = (btoi item1%4#0)
        let is_true%2#0: uint64 = (getbit maybe_value%2#0 80u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let item2%2#0: bool = (getbit encoded_bool%3#0 0u)
        let tmp%2#0: bool = (== item2%2#0 1u)
        (assert tmp%2#0) // Tuple value should be set
        let length%1#0: uint64 = (len "a")
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "a")
        let length%2#0: uint64 = (len "b")
        let as_bytes%3#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 "b")
        let value_len%0#0: uint64 = (len 456b)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| 456b bzero%0#0)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let current_tail_offset%2#0: uint64 = 67u
        let encoded_tuple_buffer%5#0: bytes[0] = 0x
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 arc4_encoded%0#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 encoded_bool%4#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 encoded_value%2#0)
        let current_tail_offset%4#0: uint64 = 4u
        let encoded_tuple_buffer%10#0: bytes[0] = 0x
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%5#0: uint64 = (+ current_tail_offset%4#0 data_length%2#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%3#0)
        let data_length%3#0: uint64 = (len encoded_tuple_buffer%9#0)
        let current_tail_offset%6#0: uint64 = (+ current_tail_offset%5#0 data_length%3#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 encoded_value%1#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_tuple_buffer%9#0)
        (app_global_put "t2" encoded_tuple_buffer%14#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%3#0) // check GlobalState exists
        let item_start_offset%3#0: uint64 = (extract_uint16 maybe_value%3#0 0u)
        let item_end_offset%3#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item0%6#0: bytes = (substring3 maybe_value%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item0%7#0: bytes = ((extract 2 0) item0%6#0)
        let item_start_offset%4#0: uint64 = (extract_uint16 maybe_value%3#0 2u)
        let item_end_offset%4#0: uint64 = (len maybe_value%3#0)
        let item1%6#0: bytes = (substring3 maybe_value%3#0 item_start_offset%4#0 item_end_offset%4#0)
        let item_start_offset%5#0: uint64 = (extract_uint16 item1%6#0 0u)
        let item_end_offset%5#0: uint64 = (len item1%6#0)
        let item0%8#0: bytes = (substring3 item1%6#0 item_start_offset%5#0 item_end_offset%5#0)
        let item0%9#0: bytes = ((extract 2 0) item0%8#0)
        let item1%7#0: bytes = (extract3 item1%6#0 2u 64u) // on error: Index access is out of bounds
        let is_true%3#0: uint64 = (getbit item1%6#0 528u)
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u is_true%3#0)
        let item2%3#0: bool = (getbit encoded_bool%5#0 0u)
        let tmp%3#0: bool = (== item0%7#0 "a")
        (assert tmp%3#0) // Tuple value should be set
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%4#0) // check GlobalState exists
        let item_start_offset%6#0: uint64 = (extract_uint16 maybe_value%4#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item0%10#0: bytes = (substring3 maybe_value%4#0 item_start_offset%6#0 item_end_offset%6#0)
        let item0%11#0: bytes = ((extract 2 0) item0%10#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 maybe_value%4#0 2u)
        let item_end_offset%7#0: uint64 = (len maybe_value%4#0)
        let item1%8#0: bytes = (substring3 maybe_value%4#0 item_start_offset%7#0 item_end_offset%7#0)
        let item_start_offset%8#0: uint64 = (extract_uint16 item1%8#0 0u)
        let item_end_offset%8#0: uint64 = (len item1%8#0)
        let item0%12#0: bytes = (substring3 item1%8#0 item_start_offset%8#0 item_end_offset%8#0)
        let item0%13#0: bytes = ((extract 2 0) item0%12#0)
        let item1%9#0: bytes = (extract3 item1%8#0 2u 64u) // on error: Index access is out of bounds
        let is_true%4#0: uint64 = (getbit item1%8#0 528u)
        let encoded_bool%6#0: bytes[1] = (setbit 0x00 0u is_true%4#0)
        let item2%4#0: bool = (getbit encoded_bool%6#0 0u)
        let tmp%4#0: bool = (== item0%13#0 "b")
        (assert tmp%4#0) // Tuple value should be set
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%5#0) // check GlobalState exists
        let item_start_offset%9#0: uint64 = (extract_uint16 maybe_value%5#0 0u)
        let item_end_offset%9#0: uint64 = (extract_uint16 maybe_value%5#0 2u)
        let item0%14#0: bytes = (substring3 maybe_value%5#0 item_start_offset%9#0 item_end_offset%9#0)
        let item0%15#0: bytes = ((extract 2 0) item0%14#0)
        let item_start_offset%10#0: uint64 = (extract_uint16 maybe_value%5#0 2u)
        let item_end_offset%10#0: uint64 = (len maybe_value%5#0)
        let item1%10#0: bytes = (substring3 maybe_value%5#0 item_start_offset%10#0 item_end_offset%10#0)
        let item_start_offset%11#0: uint64 = (extract_uint16 item1%10#0 0u)
        let item_end_offset%11#0: uint64 = (len item1%10#0)
        let item0%16#0: bytes = (substring3 item1%10#0 item_start_offset%11#0 item_end_offset%11#0)
        let item0%17#0: bytes = ((extract 2 0) item0%16#0)
        let item1%11#0: bytes = (extract3 item1%10#0 2u 64u) // on error: Index access is out of bounds
        let is_true%5#0: uint64 = (getbit item1%10#0 528u)
        let encoded_bool%7#0: bytes[1] = (setbit 0x00 0u is_true%5#0)
        let item2%5#0: bool = (getbit encoded_bool%7#0 0u)
        let tmp%5#0: bool = (b== item1%11#0 456b)
        (assert tmp%5#0) // Tuple value should be set
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_global_get_ex 0u "t2")
        (assert maybe_exists%6#0) // check GlobalState exists
        let item_start_offset%12#0: uint64 = (extract_uint16 maybe_value%6#0 0u)
        let item_end_offset%12#0: uint64 = (extract_uint16 maybe_value%6#0 2u)
        let item0%18#0: bytes = (substring3 maybe_value%6#0 item_start_offset%12#0 item_end_offset%12#0)
        let item0%19#0: bytes = ((extract 2 0) item0%18#0)
        let item_start_offset%13#0: uint64 = (extract_uint16 maybe_value%6#0 2u)
        let item_end_offset%13#0: uint64 = (len maybe_value%6#0)
        let item1%12#0: bytes = (substring3 maybe_value%6#0 item_start_offset%13#0 item_end_offset%13#0)
        let item_start_offset%14#0: uint64 = (extract_uint16 item1%12#0 0u)
        let item_end_offset%14#0: uint64 = (len item1%12#0)
        let item0%20#0: bytes = (substring3 item1%12#0 item_start_offset%14#0 item_end_offset%14#0)
        let item0%21#0: bytes = ((extract 2 0) item0%20#0)
        let item1%13#0: bytes = (extract3 item1%12#0 2u 64u) // on error: Index access is out of bounds
        let is_true%6#0: uint64 = (getbit item1%12#0 528u)
        let encoded_bool%8#0: bytes[1] = (setbit 0x00 0u is_true%6#0)
        let item2%6#0: bool = (getbit encoded_bool%8#0 0u)
        let tmp%6#0: bool = (== item2%6#0 1u)
        (assert tmp%6#0) // Tuple value should be set
        let length%3#0: uint64 = (len "hello")
        let as_bytes%7#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 "hello")
        let val_as_bytes%1#0: bytes[8] = (itob 123u)
        let encoded_bool%9#0: bytes[1] = (setbit 0x00 0u 1u)
        let current_tail_offset%7#0: uint64 = 11u
        let encoded_tuple_buffer%15#0: bytes[0] = 0x
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len encoded_value%3#0)
        let current_tail_offset%8#0: uint64 = (+ current_tail_offset%7#0 data_length%4#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 encoded_bool%9#0)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_value%3#0)
        (app_global_put "t3" encoded_tuple_buffer%19#0)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%7#0) // check GlobalState exists
        let item_start_offset%15#0: uint64 = (extract_uint16 maybe_value%7#0 0u)
        let item_end_offset%15#0: uint64 = (len maybe_value%7#0)
        let item0%22#0: bytes = (substring3 maybe_value%7#0 item_start_offset%15#0 item_end_offset%15#0)
        let item0%23#0: bytes = ((extract 2 0) item0%22#0)
        let item1%14#0: bytes = (extract3 maybe_value%7#0 2u 8u) // on error: Index access is out of bounds
        let item1%15#0: uint64 = (btoi item1%14#0)
        let is_true%7#0: uint64 = (getbit maybe_value%7#0 80u)
        let encoded_bool%10#0: bytes[1] = (setbit 0x00 0u is_true%7#0)
        let item2%7#0: bool = (getbit encoded_bool%10#0 0u)
        let tmp%7#0: bool = (== item0%23#0 "hello")
        (assert tmp%7#0) // Tuple value should be set
        let (maybe_value%8#0: bytes, maybe_exists%8#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%8#0) // check GlobalState exists
        let item_start_offset%16#0: uint64 = (extract_uint16 maybe_value%8#0 0u)
        let item_end_offset%16#0: uint64 = (len maybe_value%8#0)
        let item0%24#0: bytes = (substring3 maybe_value%8#0 item_start_offset%16#0 item_end_offset%16#0)
        let item0%25#0: bytes = ((extract 2 0) item0%24#0)
        let item1%16#0: bytes = (extract3 maybe_value%8#0 2u 8u) // on error: Index access is out of bounds
        let item1%17#0: uint64 = (btoi item1%16#0)
        let is_true%8#0: uint64 = (getbit maybe_value%8#0 80u)
        let encoded_bool%11#0: bytes[1] = (setbit 0x00 0u is_true%8#0)
        let item2%8#0: bool = (getbit encoded_bool%11#0 0u)
        let tmp%8#0: bool = (== item1%17#0 123u)
        (assert tmp%8#0) // Tuple value should be set
        let (maybe_value%9#0: bytes, maybe_exists%9#0: bool) = (app_global_get_ex 0u "t3")
        (assert maybe_exists%9#0) // check GlobalState exists
        let item_start_offset%17#0: uint64 = (extract_uint16 maybe_value%9#0 0u)
        let item_end_offset%17#0: uint64 = (len maybe_value%9#0)
        let item0%26#0: bytes = (substring3 maybe_value%9#0 item_start_offset%17#0 item_end_offset%17#0)
        let item0%27#0: bytes = ((extract 2 0) item0%26#0)
        let item1%18#0: bytes = (extract3 maybe_value%9#0 2u 8u) // on error: Index access is out of bounds
        let item1%19#0: uint64 = (btoi item1%18#0)
        let is_true%9#0: uint64 = (getbit maybe_value%9#0 80u)
        let encoded_bool%12#0: bytes[1] = (setbit 0x00 0u is_true%9#0)
        let item2%9#0: bool = (getbit encoded_bool%12#0 0u)
        let tmp%9#0: bool = (== item2%9#0 1u)
        (assert tmp%9#0) // Tuple value should be set
        let length%4#0: uint64 = (len "a")
        let as_bytes%9#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 "a")
        let length%5#0: uint64 = (len "b")
        let as_bytes%10#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 "b")
        let value_len%1#0: uint64 = (len 456b)
        let len_ok%1#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%1#0) // overflow
        let bzero%1#0: bytes = (bzero 64u)
        let arc4_encoded%1#0: bytes[64] = (b| 456b bzero%1#0)
        let encoded_bool%13#0: bytes[1] = (setbit 0x00 0u 1u)
        let current_tail_offset%9#0: uint64 = 67u
        let encoded_tuple_buffer%20#0: bytes[0] = 0x
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 offset_as_uint16%5#0)
        let data_length%5#0: uint64 = (len encoded_value%5#0)
        let current_tail_offset%10#0: uint64 = (+ current_tail_offset%9#0 data_length%5#0)
        let encoded_tuple_buffer%22#0: bytes = (concat encoded_tuple_buffer%21#0 arc4_encoded%1#0)
        let encoded_tuple_buffer%23#0: bytes = (concat encoded_tuple_buffer%22#0 encoded_bool%13#0)
        let encoded_tuple_buffer%24#0: bytes = (concat encoded_tuple_buffer%23#0 encoded_value%5#0)
        let current_tail_offset%11#0: uint64 = 4u
        let encoded_tuple_buffer%25#0: bytes[0] = 0x
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%11#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_tuple_buffer%26#0: bytes = (concat encoded_tuple_buffer%25#0 offset_as_uint16%6#0)
        let data_length%6#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%12#0: uint64 = (+ current_tail_offset%11#0 data_length%6#0)
        let as_bytes%13#0: bytes[8] = (itob current_tail_offset%12#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded_tuple_buffer%27#0: bytes = (concat encoded_tuple_buffer%26#0 offset_as_uint16%7#0)
        let data_length%7#0: uint64 = (len encoded_tuple_buffer%24#0)
        let current_tail_offset%13#0: uint64 = (+ current_tail_offset%12#0 data_length%7#0)
        let encoded_tuple_buffer%28#0: bytes = (concat encoded_tuple_buffer%27#0 encoded_value%4#0)
        let encoded_tuple_buffer%29#0: bytes = (concat encoded_tuple_buffer%28#0 encoded_tuple_buffer%24#0)
        (app_global_put "t4" encoded_tuple_buffer%29#0)
        let (maybe_value%10#0: bytes, maybe_exists%10#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%10#0) // check GlobalState exists
        let item_start_offset%18#0: uint64 = (extract_uint16 maybe_value%10#0 0u)
        let item_end_offset%18#0: uint64 = (extract_uint16 maybe_value%10#0 2u)
        let item0%28#0: bytes = (substring3 maybe_value%10#0 item_start_offset%18#0 item_end_offset%18#0)
        let item0%29#0: bytes = ((extract 2 0) item0%28#0)
        let item_start_offset%19#0: uint64 = (extract_uint16 maybe_value%10#0 2u)
        let item_end_offset%19#0: uint64 = (len maybe_value%10#0)
        let item1%20#0: bytes = (substring3 maybe_value%10#0 item_start_offset%19#0 item_end_offset%19#0)
        let item_start_offset%20#0: uint64 = (extract_uint16 item1%20#0 0u)
        let item_end_offset%20#0: uint64 = (len item1%20#0)
        let item0%30#0: bytes = (substring3 item1%20#0 item_start_offset%20#0 item_end_offset%20#0)
        let item0%31#0: bytes = ((extract 2 0) item0%30#0)
        let item1%21#0: bytes = (extract3 item1%20#0 2u 64u) // on error: Index access is out of bounds
        let is_true%10#0: uint64 = (getbit item1%20#0 528u)
        let encoded_bool%14#0: bytes[1] = (setbit 0x00 0u is_true%10#0)
        let item2%10#0: bool = (getbit encoded_bool%14#0 0u)
        let tmp%10#0: bool = (== item0%29#0 "a")
        (assert tmp%10#0) // Tuple value should be set
        let (maybe_value%11#0: bytes, maybe_exists%11#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%11#0) // check GlobalState exists
        let item_start_offset%21#0: uint64 = (extract_uint16 maybe_value%11#0 0u)
        let item_end_offset%21#0: uint64 = (extract_uint16 maybe_value%11#0 2u)
        let item0%32#0: bytes = (substring3 maybe_value%11#0 item_start_offset%21#0 item_end_offset%21#0)
        let item0%33#0: bytes = ((extract 2 0) item0%32#0)
        let item_start_offset%22#0: uint64 = (extract_uint16 maybe_value%11#0 2u)
        let item_end_offset%22#0: uint64 = (len maybe_value%11#0)
        let item1%22#0: bytes = (substring3 maybe_value%11#0 item_start_offset%22#0 item_end_offset%22#0)
        let item_start_offset%23#0: uint64 = (extract_uint16 item1%22#0 0u)
        let item_end_offset%23#0: uint64 = (len item1%22#0)
        let item0%34#0: bytes = (substring3 item1%22#0 item_start_offset%23#0 item_end_offset%23#0)
        let item0%35#0: bytes = ((extract 2 0) item0%34#0)
        let item1%23#0: bytes = (extract3 item1%22#0 2u 64u) // on error: Index access is out of bounds
        let is_true%11#0: uint64 = (getbit item1%22#0 528u)
        let encoded_bool%15#0: bytes[1] = (setbit 0x00 0u is_true%11#0)
        let item2%11#0: bool = (getbit encoded_bool%15#0 0u)
        let tmp%11#0: bool = (== item0%35#0 "b")
        (assert tmp%11#0) // Tuple value should be set
        let (maybe_value%12#0: bytes, maybe_exists%12#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%12#0) // check GlobalState exists
        let item_start_offset%24#0: uint64 = (extract_uint16 maybe_value%12#0 0u)
        let item_end_offset%24#0: uint64 = (extract_uint16 maybe_value%12#0 2u)
        let item0%36#0: bytes = (substring3 maybe_value%12#0 item_start_offset%24#0 item_end_offset%24#0)
        let item0%37#0: bytes = ((extract 2 0) item0%36#0)
        let item_start_offset%25#0: uint64 = (extract_uint16 maybe_value%12#0 2u)
        let item_end_offset%25#0: uint64 = (len maybe_value%12#0)
        let item1%24#0: bytes = (substring3 maybe_value%12#0 item_start_offset%25#0 item_end_offset%25#0)
        let item_start_offset%26#0: uint64 = (extract_uint16 item1%24#0 0u)
        let item_end_offset%26#0: uint64 = (len item1%24#0)
        let item0%38#0: bytes = (substring3 item1%24#0 item_start_offset%26#0 item_end_offset%26#0)
        let item0%39#0: bytes = ((extract 2 0) item0%38#0)
        let item1%25#0: bytes = (extract3 item1%24#0 2u 64u) // on error: Index access is out of bounds
        let is_true%12#0: uint64 = (getbit item1%24#0 528u)
        let encoded_bool%16#0: bytes[1] = (setbit 0x00 0u is_true%12#0)
        let item2%12#0: bool = (getbit encoded_bool%16#0 0u)
        let tmp%12#0: bool = (b== item1%25#0 456b)
        (assert tmp%12#0) // Tuple value should be set
        let (maybe_value%13#0: bytes, maybe_exists%13#0: bool) = (app_global_get_ex 0u "t4")
        (assert maybe_exists%13#0) // check GlobalState exists
        let item_start_offset%27#0: uint64 = (extract_uint16 maybe_value%13#0 0u)
        let item_end_offset%27#0: uint64 = (extract_uint16 maybe_value%13#0 2u)
        let item0%40#0: bytes = (substring3 maybe_value%13#0 item_start_offset%27#0 item_end_offset%27#0)
        let item0%41#0: bytes = ((extract 2 0) item0%40#0)
        let item_start_offset%28#0: uint64 = (extract_uint16 maybe_value%13#0 2u)
        let item_end_offset%28#0: uint64 = (len maybe_value%13#0)
        let item1%26#0: bytes = (substring3 maybe_value%13#0 item_start_offset%28#0 item_end_offset%28#0)
        let item_start_offset%29#0: uint64 = (extract_uint16 item1%26#0 0u)
        let item_end_offset%29#0: uint64 = (len item1%26#0)
        let item0%42#0: bytes = (substring3 item1%26#0 item_start_offset%29#0 item_end_offset%29#0)
        let item0%43#0: bytes = ((extract 2 0) item0%42#0)
        let item1%27#0: bytes = (extract3 item1%26#0 2u 64u) // on error: Index access is out of bounds
        let is_true%13#0: uint64 = (getbit item1%26#0 528u)
        let encoded_bool%17#0: bytes[1] = (setbit 0x00 0u is_true%13#0)
        let item2%13#0: bool = (getbit encoded_bool%17#0 0u)
        let tmp%13#0: bool = (== item2%13#0 1u)
        (assert tmp%13#0) // Tuple value should be set
        return 

subroutine tests/approvals/global-state.algo.ts::TestTuple.__algots__.defaultCreate() -> void:
    block@0: // L46
        return 