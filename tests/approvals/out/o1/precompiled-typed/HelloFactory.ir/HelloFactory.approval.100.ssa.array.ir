main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_compile_contract()void" => block@3, method "test_compile_contract_with_template()void" => block@4, method "test_compile_contract_with_template_and_custom_prefix()void" => block@5, method "test_compile_contract_large()void" => block@6, method "test_call_contract_with_transactions()void" => block@7, method "test_call_contract_with_reference_types()void" => block@8, * => block@15}
    block@3: // test_compile_contract_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@4: // test_compile_contract_with_template_route_L52
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@5: // test_compile_contract_with_template_and_custom_prefix_route_L77
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template_and_custom_prefix()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@6: // test_compile_contract_large_route_L94
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_large()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@7: // test_call_contract_with_transactions_route_L110
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_transactions()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@8: // test_call_contract_with_reference_types_route_L153
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_reference_types()
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#5: bool = 1u
        goto block@16
    block@11: // bare_routing_L13
        let tmp%27#0: uint64 = (txn OnCompletion)
        goto tmp%27#0 ? block@15 : block@12
    block@12: // __algots__.defaultCreate_L13
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // can only call when creating
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#6: bool = 1u
        goto block@16
    block@15: // after_if_else_L13
        let tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#7: bool = 0u
        goto block@16
    block@16: // after_inlined_tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#0 <- block@3, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#1 <- block@4, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#2 <- block@5, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#3 <- block@6, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#4 <- block@7, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#5 <- block@8, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#6 <- block@12, tests/approvals/precompiled-typed.algo.ts::HelloFactory.__puya_arc4_router__%0#7 <- block@15)
        return tmp%0#0

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract() -> void:
    block@0: // L14
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAwhncmVldGluZwQVH3x1ASAxGEAABCiAAGcxG0EAKoIFBACSJa4EJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAFEARgA7AB0AAiNDMRkURDEYRDYaAYgAakkVFlcGAkxQKUxQsCJDMRkURDEYRDYaAVcCAIgAP0kVFlcGAkxQKUxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAACIkOKAQAoi/9niYoBASMoZUQqUIv/UImKAQEjKGVEKlCL/yNZi/+BAlmL/08CSwJSVwIATwJMUIv/FYv/TwNPAlJXAgBQiQ==)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app#0: uint64 = (gitxn 0 CreatedApplicationID)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "world")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "world")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // Bytes has valid prefix
        let result#0: string = ((extract 2 0) tmp%3#0)
        let tmp%7#0: bool = (== result#0 "hello world")
        (assert tmp%7#0)
        itxn_begin
        let aggregate%length%2#1: uint64 = (len "abi")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "abi")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let tmp%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%8#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%9#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // Bytes has valid prefix
        let result2#0: string = ((extract 2 0) tmp%9#0)
        let tmp%13#0: bool = (== result2#0 "hello abi")
        (assert tmp%13#0)
        itxn_begin
        let aggregate%length%3#1: uint64 = (len "stubbed")
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 "stubbed")
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let tmp%14#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%14#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%15#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%16#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
        (assert tmp%17#0) // Bytes has valid prefix
        let result3#0: string = ((extract 2 0) tmp%15#0)
        let tmp%19#0: bool = (== result3#0 "hello stubbed")
        (assert tmp%19#0)
        itxn_begin
        let aggregate%length%4#1: uint64 = (len 0x21)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 0x21)
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#1
        let aggregate%length%5#1: uint64 = (len "world")
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 "world")
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%5#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%5#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%5#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 encoded%0#0)
        let aggregate%data_length%1#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%1#1 aggregate%tail%1#1)
        let tmp%20#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%encoded%2#1
        let tmp%21#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%20#0
        ((itxn_field ApplicationArgs) method "sendGreetings((string,string))string")
        ((itxn_field ApplicationArgs) tmp%21#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%22#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%23#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%24#0: bool = (== tmp%23#0 0x151f7c75)
        (assert tmp%24#0) // Bytes has valid prefix
        let result4#0: string = ((extract 2 0) tmp%22#0)
        let tmp%26#0: bool = (== result4#0 "hello world!")
        (assert tmp%26#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template() -> void:
    block@0: // L52
        itxn_begin
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBAhncmVldGluZwQVH3x1ASADaGV5MRhAAAMoK2cxG0EAKoIFBExcYboEJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAFEARgA7AB0AAiNDMRkURDEYRDYaAYgAWUkVFlcGAkxQKUxQsCJDMRkURDEYRDYaAVcCAIgALkkVFlcGAkxQKUxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBREIkOKAQEjKGVEKlCL/1CJigEBIyhlRCpQi/8jWYv/gQJZi/9PAksCUlcCAE8CTFCL/xWL/08DTwJSVwIAUIk=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let helloApp#0: uint64 = (gitxn 0 CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // Bytes has valid prefix
        let txn1.returnValue#0: string = ((extract 2 0) tmp%2#0)
        let tmp%6#0: bool = (== txn1.returnValue#0 "hey world")
        (assert tmp%6#0)
        let aggregate%length%1#1: uint64 = (len 0x21)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x21)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%length%2#1: uint64 = (len "world")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "world")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 encoded%0#0)
        let aggregate%data_length%1#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%1#1 aggregate%tail%1#1)
        let greeting#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%encoded%2#1
        itxn_begin
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 greeting#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 greeting#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 greeting#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#1
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 greeting#0 2u)
        let aggregate%len%0#1: uint64 = (len greeting#0)
        let aggregate%substring3%1#1: bytes = (substring3 greeting#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let tuple_item%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#1
        let aggregate%length%3#1: uint64 = (len values%0#0)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 values%0#0)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%3#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%tail%3#1: bytes = (concat aggregate%tail%2#1 tuple_item%1#0)
        let aggregate%data_length%3#1: uint64 = (len tuple_item%1#0)
        let aggregate%current_tail_offset%3#1: uint64 = (+ aggregate%current_tail_offset%2#1 aggregate%data_length%3#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%4#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%3#1 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%5#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%4#1 aggregate%tail%3#1)
        let tmp%8#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%encoded%5#1
        let tmp%9#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%8#0
        ((itxn_field ApplicationArgs) method "sendGreetings((string,string))string")
        ((itxn_field ApplicationArgs) tmp%9#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // Bytes has valid prefix
        let txn2.returnValue#0: string = ((extract 2 0) tmp%10#0)
        let tmp%14#0: bool = (== txn2.returnValue#0 "hey world!")
        (assert tmp%14#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template_and_custom_prefix() -> void:
    block@0: // L77
        itxn_begin
        ((itxn_field ApplicationArgs) method "create()void")
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmBAhncmVldGluZwQVH3x1ASAHYm9uam91cjEYQAADKCtnMRtBACqCBQRMXGG6BCQ3jTwEoOgYcgTQooIABFGAuiA2GgCOBQBRAEYAOwAdAAIjQzEZFEQxGEQ2GgGIAFlJFRZXBgJMUClMULAiQzEZFEQxGEQ2GgFXAgCIAC5JFRZXBgJMUClMULAiQzEZgQQSRDEYRCJDMRmBBRJEMRhEIkMxGRREMRgURCJDigEBIyhlRCpQi/9QiYoBASMoZUQqUIv/I1mL/4ECWYv/TwJLAlJXAgBPAkxQi/8Vi/9PA08CUlcCAFCJ)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let helloApp#0: uint64 = (gitxn 0 CreatedApplicationID)
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "world")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "world")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // Bytes has valid prefix
        let result#0: string = ((extract 2 0) tmp%2#0)
        let tmp%6#0: bool = (== result#0 "bonjour world")
        (assert tmp%6#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) helloApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_large() -> void:
    block@0: // L94
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CjEbQQA7ggIEAr8wzwQkN408NhoAjgIADwADgQBDMRmBBRJEMRhEgQFDMRkURDEYRIgAGRaABBUffHVMULCBAUMxGUD/1TEYFESBAUOBgCCvFYk=)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let largeApp#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ApplicationArgs) method "getBigBytesLength()uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) largeApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let result#0: uint64 = (btoi tmp%1#0)
        let tmp%5#0: bool = (== result#0 4096u)
        (assert tmp%5#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ApplicationID) largeApp#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_transactions() -> void:
    block@0: // L110
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiADAQMAJgEEFR98dTEbQQCVggQEj2iS7wSc2H3jBNNmyGkEgbZzUjYaAI4EAFoARQAjAAIkQzEZFEQxGEQxFoECCUk4ECMSRDEWIglJOBAiEkSIAKwiQzEZFEQxGEQxFiIJSTgQIxJEiACOSRUWVwYCTFAoTFCwIkMxGRREMRhEMRYiCYgAKhYoTFCwIkMxGRREMRhEgAwVH3x1AAAAAAAAAAGwIkMxGUD/iTEYFEQiQ4oBAYAASYv/OBBJIxJBABaL/zg8SYwAQQAFiwCMAImL/zghQv/2iwKBBhJBABaL/zg9SYwBQQAFiwGMAImL/zgYQv/2JIwAiYoBAYv/OBeJigIAi/44ECMSRIv/OBAiEkSJ)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAnyTxn(txn)uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let tmp%4#0: uint64 = (btoi tmp%1#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "getOne()uint64")
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAnyTxn(txn)uint64")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (gitxn 1 LastLog)
        let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // Bytes has valid prefix
        let tmp%8#0: uint64 = (btoi tmp%5#0)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAssetConfig(acfg)byte[]")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (gitxn 1 LastLog)
        let tmp%9#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // Bytes has valid prefix
        let tmp%12#0: bytes = ((extract 2 0) tmp%9#0)
        let (value%0#0: account, check%0#0: bool) = ((app_params_get AppAddress) appId#0)
        (assert check%0#0) // application exists
        let tmp%13#0: uint64 = (global CurrentApplicationID)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) tmp%13#0)
        (assert check%1#0) // application exists
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field Sender) value%1#0)
        ((itxn_field Amount) 100000u)
        ((itxn_field Receiver) value%0#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivesAssetConfigAndPay(acfg,pay)void")
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_reference_types() -> void:
    block@0: // L153
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CjEbQQAvgASDPRISNhoAjgEAA4EAQzEZFEQxGEQ2GgEXwDI2GgIXwBw2GgMXwDCIAA+BAUMxGUD/2TEYFESBAUOKAwCL/XIIRLCL/rCL/3EERLCJ)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: account = (txn Sender)
        ((itxn_field Accounts) tmp%3#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) tmp%2#0)
        ((itxn_field ApplicationArgs) method "receivesReferenceTypes(application,account,asset)void")
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%4#0: bytes = (itxna Logs 0)
        let reinterpret_bytes[32]%0#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%4#0 reinterpret_bytes[32]%0#0)
        (assert tmp%5#0)
        let tmp%6#0: bytes = (itxna Logs 1)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txn Sender)
        let tmp%7#0: bool = (== tmp%6#0 reinterpret_bytes[32]%1#0)
        (assert tmp%7#0)
        let tmp%8#0: bytes = (itxna Logs 2)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%9#0: bool = (== tmp%8#0 value%0#0)
        (assert tmp%9#0)
        return 