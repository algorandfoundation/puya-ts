{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template_and_custom_prefix",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_transactions",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_contract_with_reference_types",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        432,
                        482,
                        534,
                        786,
                        1038,
                        1213,
                        1579,
                        1624,
                        1674
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        113,
                        125,
                        137,
                        149,
                        161,
                        173
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1678,
                        1683
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        1937
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        190
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        116,
                        128,
                        140,
                        152,
                        164,
                        176
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 6,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}