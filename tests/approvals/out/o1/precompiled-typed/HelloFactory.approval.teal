#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 6 1 5
    bytecblock 0x151f7c75 base64(C4EBQw==) 0xd0a28200 0x24378d3c "TEST" "T" 0x0005776f726c64 0x5180ba20 0x0004000b0005776f726c64000121 0x4c5c61ba 0x9cd87de3
    // tests/approvals/precompiled-typed.algo.ts:13
    // class HelloFactory extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@13
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x2a17995c 0xe3254bc9 0xe2b7c692 0x02947ca2 0x495e0010 0x27519e7b // method "test_compile_contract()void", method "test_compile_contract_with_template()void", method "test_compile_contract_with_template_and_custom_prefix()void", method "test_compile_contract_large()void", method "test_call_contract_with_transactions()void", method "test_call_contract_with_reference_types()void"
    txna ApplicationArgs 0
    match test_compile_contract test_compile_contract_with_template test_compile_contract_with_template_and_custom_prefix test_compile_contract_large test_call_contract_with_transactions test_call_contract_with_reference_types
    err

main___algots__.defaultCreate@13:
    // tests/approvals/precompiled-typed.algo.ts:13
    // class HelloFactory extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract[routing]() -> void:
test_compile_contract:
    // tests/approvals/precompiled-typed.algo.ts:17-19
    // const app = compiled.call.create({
    //   args: ['hello'],
    // }).itxn.createdApp
    itxn_begin
    pushbytes 0x009225ae // method "helloCreate(string)void"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:18
    // args: ['hello'],
    pushbytes 0x000568656c6c6f
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:15
    // const compiled = compileArc4(Hello)
    intc_2 // 1
    itxn_field GlobalNumByteSlice
    bytec_1 // base64(C4EBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CyADAAIBJgMIZ3JlZXRpbmcBIAQVH3x1MRhAAAQogABnggIEJDeNPASg6BhyNhoAjgIANgAtMRkURDEYQQAWggIE0KKCAARRgLogNhoAjgIANgBcAIAEAJIlrjYaAI4BABMAMRmBBBIxGBBDMRmBBRIxGBBDNhoBSSJZIwhLARUSRFcCAChMZyRDNhoBSSJZIwhLARUSRFcCACIoZUQpUExQSRUWVwYCTFAqTFCwJEM2GgEiKGVEKVBLASJZSwIjWUsDTwJLAlJXAgBPAkxQSwIVTwNPA08CUlcCAFBJFRZXBgJMUCpMULAkQw==)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:17-19
    // const app = compiled.call.create({
    //   args: ['hello'],
    // }).itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:19
    // }).itxn.createdApp
    gitxn 0 CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:21-24
    // const { returnValue: result } = compiled.call.greet({
    //   args: ['world'],
    //   appId: app,
    // })
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:22
    // args: ['world'],
    bytec 6 // 0x0005776f726c64
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:21-24
    // const { returnValue: result } = compiled.call.greet({
    //   args: ['world'],
    //   appId: app,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:25
    // assert(result === 'hello world')
    pushbytes "hello world"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:27-31
    // const { returnValue: result2, itxn: greetItxn } = abiCall({
    //   method: Hello.prototype.greet,
    //   appId: app,
    //   args: ['abi'],
    // })
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:30
    // args: ['abi'],
    pushbytes 0x0003616269
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:27-31
    // const { returnValue: result2, itxn: greetItxn } = abiCall({
    //   method: Hello.prototype.greet,
    //   appId: app,
    //   args: ['abi'],
    // })
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    itxn LastLog
    // tests/approvals/precompiled-typed.algo.ts:33
    // assert(result2 === 'hello abi')
    swap
    pushbytes "hello abi"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:34
    // assert(greetItxn.lastLog === Bytes.fromHex('151f7c75').concat(new Str('hello abi').bytes))
    pushbytes 0x151f7c75000968656c6c6f20616269
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:36-40
    // const result3 = abiCall({
    //   method: HelloStubbed.prototype.greet,
    //   appId: app,
    //   args: ['stubbed'],
    // }).returnValue
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:39
    // args: ['stubbed'],
    pushbytes 0x000773747562626564
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:36-40
    // const result3 = abiCall({
    //   method: HelloStubbed.prototype.greet,
    //   appId: app,
    //   args: ['stubbed'],
    // }).returnValue
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:41
    // assert(result3 === 'hello stubbed')
    pushbytes "hello stubbed"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:43-47
    // const result4 = abiCall({
    //   method: Hello.prototype.sendGreetings,
    //   appId: app,
    //   args: [{ name: 'world', termination: new arc4.Str('!') }],
    // }).returnValue
    itxn_begin
    bytec 7 // method "sendGreetings((string,string))string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:46
    // args: [{ name: 'world', termination: new arc4.Str('!') }],
    bytec 8 // 0x0004000b0005776f726c64000121
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:43-47
    // const result4 = abiCall({
    //   method: Hello.prototype.sendGreetings,
    //   appId: app,
    //   args: [{ name: 'world', termination: new arc4.Str('!') }],
    // }).returnValue
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:49
    // assert(result4 === 'hello world!')
    pushbytes "hello world!"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:51-53
    // compiled.call.delete({
    //   appId: app,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:14
    // test_compile_contract() {
    intc_2 // 1
    return


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template[routing]() -> void:
test_compile_contract_with_template:
    // tests/approvals/precompiled-typed.algo.ts:59
    // const helloApp = compiled.call.create().itxn.createdApp
    itxn_begin
    bytec 9 // method "create()void"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:57
    // const compiled = compileArc4(HelloTemplate, { templateVars: { GREETING: 'hey' } })
    intc_2 // 1
    itxn_field GlobalNumByteSlice
    bytec_1 // base64(C4EBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CyADAAECJgQIZ3JlZXRpbmcBIAQVH3x1A2hleTEYQAADKCtnggIEJDeNPASg6BhyNhoAjgIAOAAvMRkURDEYQQAWggIE0KKCAARRgLogNhoAjgIAIwBJAIAETFxhujYaAI4BAAEAI0MxGYEEEjEYEEMxGYEFEjEYEEM2GgFJIlkkCEsBFRJEVwIAIihlRClQTFBJFRZXBgJMUCpMULAjQzYaASIoZUQpUEsBIllLAiRZSwNPAksCUlcCAE8CTFBLAhVPA08DTwJSVwIAUEkVFlcGAkxQKkxQsCND)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:59
    // const helloApp = compiled.call.create().itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:61-64
    // const txn1 = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:62
    // args: ['world'],
    bytec 6 // 0x0005776f726c64
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:61-64
    // const txn1 = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:66
    // assert(txn1.returnValue === 'hey world')
    pushbytes "hey world"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:69-72
    // const txn2 = compiled.call.sendGreetings({
    //   args: [greeting],
    //   appId: helloApp,
    // })
    itxn_begin
    bytec 7 // method "sendGreetings((string,string))string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:70
    // args: [greeting],
    bytec 8 // 0x0004000b0005776f726c64000121
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:69-72
    // const txn2 = compiled.call.sendGreetings({
    //   args: [greeting],
    //   appId: helloApp,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:74
    // assert(txn2.returnValue === 'hey world!')
    pushbytes "hey world!"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:76-78
    // compiled.call.delete({
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:56
    // test_compile_contract_with_template() {
    intc_2 // 1
    return


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template_and_custom_prefix[routing]() -> void:
test_compile_contract_with_template_and_custom_prefix:
    // tests/approvals/precompiled-typed.algo.ts:84
    // const helloApp = compiled.call.create().itxn.createdApp
    itxn_begin
    bytec 9 // method "create()void"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:82
    // const compiled = compileArc4(HelloTemplateCustomPrefix, { templateVars: { GREETING: 'bonjour' }, templateVarsPrefix: 'PRFX_' })
    intc_2 // 1
    itxn_field GlobalNumByteSlice
    bytec_1 // base64(C4EBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CyADAAECJgQIZ3JlZXRpbmcBIAQVH3x1B2JvbmpvdXIxGEAAAygrZ4ICBCQ3jTwEoOgYcjYaAI4CADgALzEZFEQxGEEAFoICBNCiggAEUYC6IDYaAI4CACMASQCABExcYbo2GgCOAQABACNDMRmBBBIxGBBDMRmBBRIxGBBDNhoBSSJZJAhLARUSRFcCACIoZUQpUExQSRUWVwYCTFAqTFCwI0M2GgEiKGVEKVBLASJZSwIkWUsDTwJLAlJXAgBPAkxQSwIVTwNPA08CUlcCAFBJFRZXBgJMUCpMULAjQw==)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:84
    // const helloApp = compiled.call.create().itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:86-89
    // const { returnValue: result } = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:87
    // args: ['world'],
    bytec 6 // 0x0005776f726c64
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:86-89
    // const { returnValue: result } = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:91
    // assert(result === 'bonjour world')
    pushbytes "bonjour world"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:93-95
    // compiled.call.delete({
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:81
    // test_compile_contract_with_template_and_custom_prefix() {
    intc_2 // 1
    return


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_large[routing]() -> void:
test_compile_contract_large:
    // tests/approvals/precompiled-typed.algo.ts:101
    // const largeApp = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:99
    // const compiled = compileArc4(LargeProgram)
    bytec_1 // base64(C4EBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CzEbQQApggIEJDeNPAQCvzDPNhoAjgIACwABADEZFDEYEERCABExGYEFEjEYEEMxGRQxGBQQQ4GAIK8VFoAEFR98dUxQsIEBQw==)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:101
    // const largeApp = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:103-105
    // const { returnValue: result } = compiled.call.getBigBytesLength({
    //   appId: largeApp,
    // })
    itxn_begin
    pushbytes 0x02bf30cf // method "getBigBytesLength()uint64"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // tests/approvals/precompiled-typed.algo.ts:107
    // assert(result === 4096)
    pushint 4096 // 4096
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:109-111
    // compiled.call.delete({
    //   appId: largeApp,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:98
    // test_compile_contract_large() {
    intc_2 // 1
    return


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_transactions[routing]() -> void:
test_call_contract_with_transactions:
    // tests/approvals/precompiled-typed.algo.ts:117
    // const appId = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:115
    // const compiled = compileArc4(ReceivesTxns)
    bytec_1 // base64(C4EBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CyACAQMxG0EAPDEZFEQxGESCBASPaJLvBJzYfeME02bIaQSBtnNSNhoAjgQAAQAaAGsAhACADBUffHUAAAAAAAAAAbAiQzEZFDEYFBBDgABJMRYiCUk4EEkjEkEAH0sBODxJRQVBAA5LAxaABBUffHVMULAiQ0sBOCFC/+1JgQYSQQAWSwE4PUlFBEEABUsCQv/XSwE4GEL/0IEAQv/LMRYiCUk4ECMSRDgXgAYVH3x1ACBMULAiQzEWgQIJOBBJIxJEMRYiCTgQSSISREwjEkQiEkM=)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:117
    // const appId = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:125-128
    // compiled.call.receivesAnyTxn({
    //   args: [assetCreate],
    //   appId,
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:122
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:121
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:120
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:119-123
    // const assetCreate = itxn.assetConfig({
    //   total: 1,
    //   unitName: 'T',
    //   assetName: 'TEST',
    // })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:125-128
    // compiled.call.receivesAnyTxn({
    //   args: [assetCreate],
    //   appId,
    // })
    itxn_next
    bytec 10 // method "receivesAnyTxn(txn)uint64"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/precompiled-typed.algo.ts:135-138
    // compiled.call.receivesAnyTxn({
    //   appId,
    //   args: [appCall],
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:132
    // appArgs: [methodSelector(ReceivesTxns.prototype.getOne)],
    pushbytes 0x8f6892ef // method "getOne()uint64"
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:130-133
    // const appCall = itxn.applicationCall({
    //   appId,
    //   appArgs: [methodSelector(ReceivesTxns.prototype.getOne)],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:135-138
    // compiled.call.receivesAnyTxn({
    //   appId,
    //   args: [appCall],
    // })
    itxn_next
    bytec 10 // method "receivesAnyTxn(txn)uint64"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/precompiled-typed.algo.ts:140-143
    // compiled.call.receivesAssetConfig({
    //   appId,
    //   args: [assetCreate],
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:122
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:121
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:120
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:119-123
    // const assetCreate = itxn.assetConfig({
    //   total: 1,
    //   unitName: 'T',
    //   assetName: 'TEST',
    // })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:140-143
    // compiled.call.receivesAssetConfig({
    //   appId,
    //   args: [assetCreate],
    // })
    itxn_next
    pushbytes 0xd366c869 // method "receivesAssetConfig(acfg)byte[]"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/precompiled-typed.algo.ts:146
    // receiver: appId.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // tests/approvals/precompiled-typed.algo.ts:148
    // sender: Global.currentApplicationId.address,
    global CurrentApplicationID
    app_params_get AppAddress
    assert // application exists
    // tests/approvals/precompiled-typed.algo.ts:151-154
    // compiled.call.receivesAssetConfigAndPay({
    //   appId,
    //   args: [assetCreate, pay],
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:122
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:121
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:120
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:119-123
    // const assetCreate = itxn.assetConfig({
    //   total: 1,
    //   unitName: 'T',
    //   assetName: 'TEST',
    // })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:153
    // args: [assetCreate, pay],
    itxn_next
    itxn_field Sender
    // tests/approvals/precompiled-typed.algo.ts:147
    // amount: 100000,
    pushint 100000 // 100000
    itxn_field Amount
    itxn_field Receiver
    // tests/approvals/precompiled-typed.algo.ts:145-149
    // const pay = itxn.payment({
    //   receiver: appId.address,
    //   amount: 100000,
    //   sender: Global.currentApplicationId.address,
    // })
    intc_2 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:151-154
    // compiled.call.receivesAssetConfigAndPay({
    //   appId,
    //   args: [assetCreate, pay],
    // })
    itxn_next
    pushbytes 0x81b67352 // method "receivesAssetConfigAndPay(acfg,pay)void"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:114
    // test_call_contract_with_transactions() {
    intc_2 // 1
    return


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_reference_types[routing]() -> void:
test_call_contract_with_reference_types:
    // tests/approvals/precompiled-typed.algo.ts:160
    // const appId = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:158
    // const compiled = compileArc4(ReceivesReferenceTypes)
    bytec_1 // base64(C4EBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CzEbQQAYgARmaY0YNhoAjgEAAQAxGRQxGBBEQgAIMRkUMRgUEEM2GgFJFYEIEkQXNhoCSRWBIBJENhoDSRWBCBJEF08CcghEsEywcQREsIEBQw==)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:160
    // const appId = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:162-168
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    //   .submit().createdAsset
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:166
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:165
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:164
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:162-167
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:162-168
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    //   .submit().createdAsset
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:168
    // .submit().createdAsset
    itxn CreatedAssetID
    // tests/approvals/precompiled-typed.algo.ts:170-173
    // const result = compiled.call.receivesReferenceTypes({
    //   args: [Global.currentApplicationId, Txn.sender, asset],
    //   appId,
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:171
    // args: [Global.currentApplicationId, Txn.sender, asset],
    global CurrentApplicationID
    itob
    txn Sender
    dig 2
    itob
    // tests/approvals/precompiled-typed.algo.ts:170-173
    // const result = compiled.call.receivesReferenceTypes({
    //   args: [Global.currentApplicationId, Txn.sender, asset],
    //   appId,
    // })
    pushbytes 0x66698d18 // method "receivesReferenceTypes(uint64,address,uint64)void"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    swap
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:175
    // assert(result.itxn.logs(0) === Global.currentApplicationAddress.bytes)
    itxna Logs 0
    global CurrentApplicationAddress
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:176
    // assert(result.itxn.logs(1) === Txn.sender.bytes)
    itxna Logs 1
    txn Sender
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:177
    // assert(result.itxn.logs(2) === asset.name)
    itxna Logs 2
    swap
    asset_params_get AssetName
    assert // asset exists
    ==
    // tests/approvals/precompiled-typed.algo.ts:157
    // test_call_contract_with_reference_types() {
    return
