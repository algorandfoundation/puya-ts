#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 6 1 5
    bytecblock 0x151f7c75 base64(CoEBQw==) 0xd0a28200 0x24378d3c "TEST" "T" 0x0005776f726c64 0x4c5c61ba 0x9cd87de3
    // tests/approvals/precompiled-typed.algo.ts:13
    // class HelloFactory extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x2a17995c 0xe3254bc9 0xe2b7c692 0x02947ca2 0x495e0010 0x27519e7b // method "test_compile_contract()void", method "test_compile_contract_with_template()void", method "test_compile_contract_with_template_and_custom_prefix()void", method "test_compile_contract_large()void", method "test_call_contract_with_transactions()void", method "test_call_contract_with_reference_types()void"
    txna ApplicationArgs 0
    match main_test_compile_contract_route@3 main_test_compile_contract_with_template_route@4 main_test_compile_contract_with_template_and_custom_prefix_route@5 main_test_compile_contract_large_route@6 main_test_call_contract_with_transactions_route@7 main_test_call_contract_with_reference_types_route@8

main_after_if_else@15:
    // tests/approvals/precompiled-typed.algo.ts:13
    // class HelloFactory extends Contract {
    intc_0 // 0
    return

main_test_call_contract_with_reference_types_route@8:
    // tests/approvals/precompiled-typed.algo.ts:138
    // test_call_contract_with_reference_types() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_call_contract_with_reference_types
    intc_2 // 1
    return

main_test_call_contract_with_transactions_route@7:
    // tests/approvals/precompiled-typed.algo.ts:95
    // test_call_contract_with_transactions() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_call_contract_with_transactions
    intc_2 // 1
    return

main_test_compile_contract_large_route@6:
    // tests/approvals/precompiled-typed.algo.ts:79
    // test_compile_contract_large() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_compile_contract_large
    intc_2 // 1
    return

main_test_compile_contract_with_template_and_custom_prefix_route@5:
    // tests/approvals/precompiled-typed.algo.ts:62
    // test_compile_contract_with_template_and_custom_prefix() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_compile_contract_with_template_and_custom_prefix
    intc_2 // 1
    return

main_test_compile_contract_with_template_route@4:
    // tests/approvals/precompiled-typed.algo.ts:45
    // test_compile_contract_with_template() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_compile_contract_with_template
    intc_2 // 1
    return

main_test_compile_contract_route@3:
    // tests/approvals/precompiled-typed.algo.ts:14
    // test_compile_contract() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_compile_contract
    intc_2 // 1
    return

main_bare_routing@11:
    // tests/approvals/precompiled-typed.algo.ts:13
    // class HelloFactory extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract() -> void:
test_compile_contract:
    // tests/approvals/precompiled-typed.algo.ts:17-19
    // const app = compiled.call.create({
    //   args: ['hello'],
    // }).itxn.createdApp
    itxn_begin
    pushbytes 0x009225ae // method "helloCreate(string)void"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:18
    // args: ['hello'],
    pushbytes 0x000568656c6c6f
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:15
    // const compiled = compileArc4(Hello)
    intc_2 // 1
    itxn_field GlobalNumByteSlice
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAmAQhncmVldGluZzEYQAAEKIAAZzEbQQAjggQEAJIlrgQkN408BKDoGHIE0KKCADYaAI4EADsAMAAlAAIjQzEZFEQxGEQ2GgFXAgCIAERJFRZXBgJMUIAEFR98dUxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAACIkOKAQAoi/9niYoBASMoZUSAASBQi/9QiQ==)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:17-19
    // const app = compiled.call.create({
    //   args: ['hello'],
    // }).itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:19
    // }).itxn.createdApp
    gitxn 0 CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:21-24
    // const result = compiled.call.greet({
    //   args: ['world'],
    //   appId: app,
    // }).returnValue
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:22
    // args: ['world'],
    bytec 6 // 0x0005776f726c64
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:21-24
    // const result = compiled.call.greet({
    //   args: ['world'],
    //   appId: app,
    // }).returnValue
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:25
    // assert(result === 'hello world')
    pushbytes "hello world"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:27-30
    // const result2 = abiCall(Hello.prototype.greet, {
    //   appId: app,
    //   args: ['abi'],
    // }).returnValue
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:29
    // args: ['abi'],
    pushbytes 0x0003616269
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:27-30
    // const result2 = abiCall(Hello.prototype.greet, {
    //   appId: app,
    //   args: ['abi'],
    // }).returnValue
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:32
    // assert(result2 === 'hello abi')
    pushbytes "hello abi"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:34-37
    // const result3 = abiCall(HelloStubbed.prototype.greet, {
    //   appId: app,
    //   args: ['stubbed'],
    // }).returnValue
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:36
    // args: ['stubbed'],
    pushbytes 0x000773747562626564
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:34-37
    // const result3 = abiCall(HelloStubbed.prototype.greet, {
    //   appId: app,
    //   args: ['stubbed'],
    // }).returnValue
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:38
    // assert(result3 === 'hello stubbed')
    pushbytes "hello stubbed"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:40-42
    // compiled.call.delete({
    //   appId: app,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template() -> void:
test_compile_contract_with_template:
    // tests/approvals/precompiled-typed.algo.ts:48
    // const helloApp = compiled.call.create().itxn.createdApp
    itxn_begin
    bytec 7 // method "create()void"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:46
    // const compiled = compileArc4(HelloTemplate, { templateVars: { GREETING: 'hey' } })
    intc_2 // 1
    itxn_field GlobalNumByteSlice
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAmAghncmVldGluZwNoZXkxGEAAByiAAGcoKWcxG0EAI4IEBExcYboEJDeNPASg6BhyBNCiggA2GgCOBAA7ADAAJQACI0MxGRREMRhENhoBVwIAiAAzSRUWVwYCTFCABBUffHVMULAiQzEZgQQSRDEYRCJDMRmBBRJEMRhEIkMxGRREMRgURCJDigEBIyhlRIABIFCL/1CJ)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:48
    // const helloApp = compiled.call.create().itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:50-53
    // const txn = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:51
    // args: ['world'],
    bytec 6 // 0x0005776f726c64
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:50-53
    // const txn = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:55
    // assert(txn.returnValue === 'hey world')
    pushbytes "hey world"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:57-59
    // compiled.call.delete({
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_with_template_and_custom_prefix() -> void:
test_compile_contract_with_template_and_custom_prefix:
    // tests/approvals/precompiled-typed.algo.ts:65
    // const helloApp = compiled.call.create().itxn.createdApp
    itxn_begin
    bytec 7 // method "create()void"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:63
    // const compiled = compileArc4(HelloTemplateCustomPrefix, { templateVars: { GREETING: 'bonjour' }, templateVarsPrefix: 'PRFX_' })
    intc_2 // 1
    itxn_field GlobalNumByteSlice
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAmAghncmVldGluZwdib25qb3VyMRhAAAcogABnKClnMRtBACOCBARMXGG6BCQ3jTwEoOgYcgTQooIANhoAjgQAOwAwACUAAiNDMRkURDEYRDYaAVcCAIgAM0kVFlcGAkxQgAQVH3x1TFCwIkMxGYEEEkQxGEQiQzEZgQUSRDEYRCJDMRkURDEYFEQiQ4oBASMoZUSAASBQi/9QiQ==)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:65
    // const helloApp = compiled.call.create().itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:67-70
    // const { returnValue: result } = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_2 // method "greet(string)string"
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:68
    // args: ['world'],
    bytec 6 // 0x0005776f726c64
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:67-70
    // const { returnValue: result } = compiled.call.greet({
    //   args: ['world'],
    //   appId: helloApp,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // tests/approvals/precompiled-typed.algo.ts:72
    // assert(result === 'bonjour world')
    pushbytes "bonjour world"
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:74-76
    // compiled.call.delete({
    //   appId: helloApp,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_compile_contract_large() -> void:
test_compile_contract_large:
    // tests/approvals/precompiled-typed.algo.ts:82
    // const largeApp = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:80
    // const compiled = compileArc4(LargeProgram)
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CjEbQQA7ggIEAr8wzwQkN408NhoAjgIADwADgQBDMRmBBRJEMRhEgQFDMRkURDEYRIgAGRaABBUffHVMULCBAUMxGUD/1TEYFESBAUOBgCCvFYk=)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:82
    // const largeApp = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:84-86
    // const { returnValue: result } = compiled.call.getBigBytesLength({
    //   appId: largeApp,
    // })
    itxn_begin
    pushbytes 0x02bf30cf // method "getBigBytesLength()uint64"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // tests/approvals/precompiled-typed.algo.ts:88
    // assert(result === 4096)
    pushint 4096 // 4096
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:90-92
    // compiled.call.delete({
    //   appId: largeApp,
    // })
    itxn_begin
    bytec_3 // method "delete()void"
    itxn_field ApplicationArgs
    intc_3 // 5
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_transactions() -> void:
test_call_contract_with_transactions:
    // tests/approvals/precompiled-typed.algo.ts:98
    // const appId = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:96
    // const compiled = compileArc4(ReceivesTxns)
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiADAQMAJgEEFR98dTEbQQCVggQEj2iS7wSc2H3jBNNmyGkEgbZzUjYaAI4EAFoARQAjAAIkQzEZFEQxGEQxFoECCUk4ECMSRDEWIglJOBAiEkSIAKwiQzEZFEQxGEQxFiIJSTgQIxJEiACOSRUWVwYCTFAoTFCwIkMxGRREMRhEMRYiCYgAKhYoTFCwIkMxGRREMRhEgAwVH3x1AAAAAAAAAAGwIkMxGUD/iTEYFEQiQ4oBAYAASYv/OBBJIxJBABaL/zg8SYwAQQAFiwCMAImL/zghQv/2iwKBBhJBABaL/zg9SYwBQQAFiwGMAImL/zgYQv/2JIwAiYoBAYv/OBeJigIAi/44ECMSRIv/OBAiEkSJ)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:98
    // const appId = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:106-109
    // compiled.call.receivesAnyTxn({
    //   args: [assetCreate],
    //   appId,
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:103
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:102
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:101
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:100-104
    // const assetCreate = itxn.assetConfig({
    //   total: 1,
    //   unitName: 'T',
    //   assetName: 'TEST',
    // })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:106-109
    // compiled.call.receivesAnyTxn({
    //   args: [assetCreate],
    //   appId,
    // })
    itxn_next
    bytec 8 // method "receivesAnyTxn(txn)uint64"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/precompiled-typed.algo.ts:116-119
    // compiled.call.receivesAnyTxn({
    //   appId,
    //   args: [appCall],
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:113
    // appArgs: [methodSelector(ReceivesTxns.prototype.getOne)],
    pushbytes 0x8f6892ef // method "getOne()uint64"
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationID
    // tests/approvals/precompiled-typed.algo.ts:111-114
    // const appCall = itxn.applicationCall({
    //   appId,
    //   appArgs: [methodSelector(ReceivesTxns.prototype.getOne)],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:116-119
    // compiled.call.receivesAnyTxn({
    //   appId,
    //   args: [appCall],
    // })
    itxn_next
    bytec 8 // method "receivesAnyTxn(txn)uint64"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/precompiled-typed.algo.ts:121-124
    // compiled.call.receivesAssetConfig({
    //   appId,
    //   args: [assetCreate],
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:103
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:102
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:101
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:100-104
    // const assetCreate = itxn.assetConfig({
    //   total: 1,
    //   unitName: 'T',
    //   assetName: 'TEST',
    // })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:121-124
    // compiled.call.receivesAssetConfig({
    //   appId,
    //   args: [assetCreate],
    // })
    itxn_next
    pushbytes 0xd366c869 // method "receivesAssetConfig(acfg)byte[]"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/precompiled-typed.algo.ts:127
    // receiver: appId.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // tests/approvals/precompiled-typed.algo.ts:129
    // sender: Global.currentApplicationId.address,
    global CurrentApplicationID
    app_params_get AppAddress
    assert // application exists
    // tests/approvals/precompiled-typed.algo.ts:132-135
    // compiled.call.receivesAssetConfigAndPay({
    //   appId,
    //   args: [assetCreate, pay],
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:103
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:102
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:101
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:100-104
    // const assetCreate = itxn.assetConfig({
    //   total: 1,
    //   unitName: 'T',
    //   assetName: 'TEST',
    // })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:134
    // args: [assetCreate, pay],
    itxn_next
    itxn_field Sender
    // tests/approvals/precompiled-typed.algo.ts:128
    // amount: 100000,
    pushint 100000 // 100000
    itxn_field Amount
    itxn_field Receiver
    // tests/approvals/precompiled-typed.algo.ts:126-130
    // const pay = itxn.payment({
    //   receiver: appId.address,
    //   amount: 100000,
    //   sender: Global.currentApplicationId.address,
    // })
    intc_2 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:132-135
    // compiled.call.receivesAssetConfigAndPay({
    //   appId,
    //   args: [assetCreate, pay],
    // })
    itxn_next
    pushbytes 0x81b67352 // method "receivesAssetConfigAndPay(acfg,pay)void"
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// tests/approvals/precompiled-typed.algo.ts::HelloFactory.test_call_contract_with_reference_types() -> void:
test_call_contract_with_reference_types:
    // tests/approvals/precompiled-typed.algo.ts:141
    // const appId = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:139
    // const compiled = compileArc4(ReceivesReferenceTypes)
    bytec_1 // base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CjEbQQAvgASDPRISNhoAjgEAA4EAQzEZFEQxGEQ2GgEXwDI2GgIXwBw2GgMXwDCIAA+BAUMxGUD/2TEYFESBAUOKAwCL/XIIRLCL/rCL/3EERLCJ)
    itxn_field ApprovalProgramPages
    // tests/approvals/precompiled-typed.algo.ts:141
    // const appId = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/precompiled-typed.algo.ts:143-149
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    //   .submit().createdAsset
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:147
    // assetName: 'TEST',
    bytec 4 // "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/precompiled-typed.algo.ts:146
    // unitName: 'T',
    bytec 5 // "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/precompiled-typed.algo.ts:145
    // total: 1,
    intc_2 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/precompiled-typed.algo.ts:143-148
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/precompiled-typed.algo.ts:143-149
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    //   .submit().createdAsset
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:149
    // .submit().createdAsset
    itxn CreatedAssetID
    // tests/approvals/precompiled-typed.algo.ts:151-154
    // const result = compiled.call.receivesReferenceTypes({
    //   args: [Global.currentApplicationId, Txn.sender, asset],
    //   appId,
    // })
    itxn_begin
    // tests/approvals/precompiled-typed.algo.ts:152
    // args: [Global.currentApplicationId, Txn.sender, asset],
    global CurrentApplicationID
    txn Sender
    itxn_field Accounts
    dig 1
    itxn_field Assets
    itxn_field Applications
    // tests/approvals/precompiled-typed.algo.ts:151-154
    // const result = compiled.call.receivesReferenceTypes({
    //   args: [Global.currentApplicationId, Txn.sender, asset],
    //   appId,
    // })
    pushbytes 0x833d1212 // method "receivesReferenceTypes(application,account,asset)void"
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    pushbytes 0x00
    itxn_field ApplicationArgs
    // tests/approvals/precompiled-typed.algo.ts:151-154
    // const result = compiled.call.receivesReferenceTypes({
    //   args: [Global.currentApplicationId, Txn.sender, asset],
    //   appId,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    swap
    itxn_field ApplicationID
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // tests/approvals/precompiled-typed.algo.ts:156
    // assert(result.itxn.logs(0) === Global.currentApplicationAddress.bytes)
    itxna Logs 0
    global CurrentApplicationAddress
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:157
    // assert(result.itxn.logs(1) === Txn.sender.bytes)
    itxna Logs 1
    txn Sender
    ==
    assert
    // tests/approvals/precompiled-typed.algo.ts:158
    // assert(result.itxn.logs(2) === asset.name)
    itxna Logs 2
    swap
    asset_params_get AssetName
    assert // asset exists
    ==
    assert
    retsub
