{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/for-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AA4BE;;AAAA;AAAA;AAAA;;AAAA;AA5BF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA4BE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AApBF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAoBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AATF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AASE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AACE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AACqB;;;AACC;;AAAA;;AAAA;AAApB;;;AACE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAD4B;;AAAA;AAAA;;;;;AAG9B;AAGF;;;AACqB;;;AACC;;AAAA;;AAAA;AAApB;;;AACE;;AAAA;;AAAA;AAAA;AAAA;;AACY;;AAAR;AAAJ;;;AAF4B;;AAAA;;AAAA;AAAA;;;;;AAM9B;AAGF;;;AACqB;;;AACC;;AAAA;;AAAA;AAApB;;;AACM;;AAAI;;AAAJ;AAAJ;;;AACA;;AAAA;;AAAA;AAAA;;AAF4B;;AAAA;;AAAA;AAAA;;;;;AAI9B;AAEF;;;;;AACqB;;;AACQ;;AAAA;;AAAA;AAApB;;;;;;;AACe;;AAAA;;AAAA;AAApB;;;AACW;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AAEI;AAAA;;AAAA;AAAJ;;;AAH4B;;AAAA;;AAAA;AAAA;;;;;AAMhC;;AAAA;;AAAA;AAPqC;;AAAA;;AAAA;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0xf8654f73 0x287f4c02 0x4bd7778c 0x33675e06 // method \"test_for_loop(uint64,uint64,uint64)uint64\", method \"test_for_loop_break(uint64,uint64,uint64)uint64\", method \"test_for_loop_continue(uint64,uint64,uint64)uint64\", method \"test_for_loop_labelled(uint64,uint64,uint64)uint64\""
    },
    "39": {
      "op": "txna ApplicationArgs 0"
    },
    "42": {
      "op": "match main_test_for_loop_route@3 main_test_for_loop_break_route@4 main_test_for_loop_continue_route@5 main_test_for_loop_labelled_route@6"
    },
    "52": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "return"
    },
    "54": {
      "block": "main_test_for_loop_labelled_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "57": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "60": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "61": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "64": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "65": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "68": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "69": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "72": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "73": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled",
      "op": "callsub test_for_loop_labelled",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "76": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "77": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "78": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "79": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "80": {
      "op": "log",
      "stack_out": []
    },
    "81": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "return"
    },
    "83": {
      "block": "main_test_for_loop_continue_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "85": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "86": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "89": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "90": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "93": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "97": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "98": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "101": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "102": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue",
      "op": "callsub test_for_loop_continue",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "105": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "106": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "109": {
      "op": "log",
      "stack_out": []
    },
    "110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "return"
    },
    "112": {
      "block": "main_test_for_loop_break_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "115": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "116": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "119": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "122": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "123": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "126": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "127": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "130": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "131": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break",
      "op": "callsub test_for_loop_break",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "134": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "135": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "137": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "138": {
      "op": "log",
      "stack_out": []
    },
    "139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "return"
    },
    "141": {
      "block": "main_test_for_loop_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "143": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "151": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "152": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "155": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "156": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "160": {
      "callsub": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop",
      "op": "callsub test_for_loop",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "163": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "164": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "return"
    },
    "170": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "172": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "175": {
      "op": "txn ApplicationID"
    },
    "177": {
      "op": "!"
    },
    "178": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "179": {
      "op": "intc_1 // 1"
    },
    "180": {
      "op": "return"
    },
    "181": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "184": {
      "op": "intc_0 // 0"
    },
    "185": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "187": {
      "block": "test_for_loop_while_top@1",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "189": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#1",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1",
        "stop#0 (copy)"
      ]
    },
    "191": {
      "op": "<",
      "defined_out": [
        "i#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "bz test_for_loop_after_while@3",
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "195": {
      "op": "frame_dig 0"
    },
    "197": {
      "op": "frame_dig 1"
    },
    "199": {
      "op": "dup"
    },
    "200": {
      "op": "cover 2"
    },
    "202": {
      "op": "+"
    },
    "203": {
      "op": "frame_bury 0"
    },
    "205": {
      "op": "frame_dig -1"
    },
    "207": {
      "op": "+"
    },
    "208": {
      "op": "frame_bury 1"
    },
    "210": {
      "op": "b test_for_loop_while_top@1"
    },
    "213": {
      "block": "test_for_loop_after_while@3",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "total#0"
      ]
    },
    "214": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop_break",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "217": {
      "op": "intc_0 // 0"
    },
    "218": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "220": {
      "block": "test_for_loop_break_while_top@1",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "222": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#1",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1",
        "stop#0 (copy)"
      ]
    },
    "224": {
      "op": "<",
      "defined_out": [
        "i#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "bz test_for_loop_break_block@6",
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "228": {
      "op": "frame_dig 0"
    },
    "230": {
      "op": "frame_dig 1"
    },
    "232": {
      "op": "+"
    },
    "233": {
      "op": "dup"
    },
    "234": {
      "op": "frame_bury 0"
    },
    "236": {
      "op": "pushint 10 // 10"
    },
    "238": {
      "op": ">"
    },
    "239": {
      "op": "bnz test_for_loop_break_block@6"
    },
    "242": {
      "op": "frame_dig 1"
    },
    "244": {
      "op": "frame_dig -1"
    },
    "246": {
      "op": "+"
    },
    "247": {
      "op": "frame_bury 1"
    },
    "249": {
      "op": "b test_for_loop_break_while_top@1"
    },
    "252": {
      "block": "test_for_loop_break_block@6",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "total#0"
      ]
    },
    "253": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop_continue",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "256": {
      "op": "intc_0 // 0"
    },
    "257": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "259": {
      "block": "test_for_loop_continue_while_top@1",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "261": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#1",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1",
        "stop#0 (copy)"
      ]
    },
    "263": {
      "op": "<",
      "defined_out": [
        "i#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "bz test_for_loop_continue_after_while@6",
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "267": {
      "op": "frame_dig 1"
    },
    "269": {
      "op": "pushint 5 // 5"
    },
    "271": {
      "op": "%"
    },
    "272": {
      "op": "bz test_for_loop_continue_block@5"
    },
    "275": {
      "op": "frame_dig 0"
    },
    "277": {
      "op": "frame_dig 1"
    },
    "279": {
      "op": "+"
    },
    "280": {
      "op": "frame_bury 0"
    },
    "282": {
      "block": "test_for_loop_continue_block@5",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "284": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#1",
        "step#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "i#1",
        "step#0 (copy)"
      ]
    },
    "286": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "287": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "total#0",
        "i#1"
      ]
    },
    "289": {
      "op": "b test_for_loop_continue_while_top@1"
    },
    "292": {
      "block": "test_for_loop_continue_after_while@6",
      "stack_in": [
        "total#0",
        "i#1"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#1",
        "total#0"
      ]
    },
    "293": {
      "subroutine": "tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled",
      "params": {
        "start#0": "uint64",
        "stop#0": "uint64",
        "step#0": "uint64"
      },
      "block": "test_for_loop_labelled",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "296": {
      "op": "pushbytes \"\""
    },
    "298": {
      "op": "intc_0 // 0"
    },
    "299": {
      "op": "frame_dig -3",
      "defined_out": [
        "i#1",
        "total#0"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1"
      ]
    },
    "301": {
      "block": "test_for_loop_labelled_while_top@1",
      "stack_in": [
        "j#1",
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "303": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#1",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "i#1",
        "stop#0 (copy)"
      ]
    },
    "305": {
      "op": "<",
      "defined_out": [
        "i#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "tmp%0#0"
      ]
    },
    "306": {
      "op": "bz test_for_loop_labelled_block@9",
      "stack_out": [
        "j#1",
        "total#0",
        "i#1"
      ]
    },
    "309": {
      "op": "frame_dig -3"
    },
    "311": {
      "op": "frame_bury 0"
    },
    "313": {
      "block": "test_for_loop_labelled_while_top@3",
      "stack_in": [
        "j#1",
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "j#1"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "j#1"
      ]
    },
    "315": {
      "op": "frame_dig -2",
      "defined_out": [
        "j#1",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "j#1",
        "stop#0 (copy)"
      ]
    },
    "317": {
      "op": "<",
      "defined_out": [
        "j#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "tmp%1#0"
      ]
    },
    "318": {
      "op": "bz test_for_loop_labelled_after_while@7",
      "stack_out": [
        "j#1",
        "total#0",
        "i#1"
      ]
    },
    "321": {
      "op": "frame_dig 2"
    },
    "323": {
      "op": "dup"
    },
    "324": {
      "op": "frame_dig 0"
    },
    "326": {
      "op": "dup"
    },
    "327": {
      "op": "cover 3"
    },
    "329": {
      "op": "+"
    },
    "330": {
      "op": "frame_dig 1"
    },
    "332": {
      "op": "+"
    },
    "333": {
      "op": "frame_bury 1"
    },
    "335": {
      "op": "*"
    },
    "336": {
      "op": "frame_dig -2"
    },
    "338": {
      "op": ">"
    },
    "339": {
      "op": "bnz test_for_loop_labelled_block@9"
    },
    "342": {
      "op": "frame_dig 0"
    },
    "344": {
      "op": "frame_dig -1"
    },
    "346": {
      "op": "+"
    },
    "347": {
      "op": "frame_bury 0"
    },
    "349": {
      "op": "b test_for_loop_labelled_while_top@3"
    },
    "352": {
      "block": "test_for_loop_labelled_block@9",
      "stack_in": [
        "j#1",
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "total#0"
      ]
    },
    "354": {
      "op": "frame_bury 0"
    },
    "356": {
      "retsub": true,
      "op": "retsub"
    },
    "357": {
      "block": "test_for_loop_labelled_after_while@7",
      "stack_in": [
        "j#1",
        "total#0",
        "i#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "359": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#1",
        "step#0 (copy)"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "i#1",
        "step#0 (copy)"
      ]
    },
    "361": {
      "op": "+",
      "stack_out": [
        "j#1",
        "total#0",
        "i#1",
        "i#1"
      ]
    },
    "362": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#1"
      ],
      "stack_out": [
        "j#1",
        "total#0",
        "i#1"
      ]
    },
    "364": {
      "op": "b test_for_loop_labelled_while_top@1"
    }
  }
}