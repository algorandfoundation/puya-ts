main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_for_loop(uint64,uint64,uint64)uint64" => block@4, method "test_for_loop_break(uint64,uint64,uint64)uint64" => block@5, method "test_for_loop_continue(uint64,uint64,uint64)uint64" => block@6, method "test_for_loop_labelled(uint64,uint64,uint64)uint64" => block@7, * => block@10}
    block@4: // test_for_loop_route_L5
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop[routing]()
        goto block@10
    block@5: // test_for_loop_break_route_L13
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break[routing]()
        goto block@10
    block@6: // test_for_loop_continue_route_L24
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue[routing]()
        goto block@10
    block@7: // test_for_loop_labelled_route_L32
        tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled[routing]()
        goto block@10
    block@10: // after_if_else_L4
        fail
    block@11: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let start#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let stop#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let step#0: uint64 = (btoi tmp%4#0)
        let total#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L7
        let i#1: uint64 = φ(start#0 <- block@0, i#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let tmp%0#1: bool = (< i#1 stop#0)
        goto tmp%0#1 ? block@3 : block@4
    block@3: // while_body_L7
        let total#2: uint64 = (+ total#1 i#1)
        let i#2: uint64 = (+ i#1 step#0)
        goto block@2
    block@4: // after_while_L7
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#1)
        let tmp%8#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%8#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_break[routing]() -> void:
    block@0: // L13
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let start#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let stop#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let step#0: uint64 = (btoi tmp%4#0)
        let total#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L15
        let i#1: uint64 = φ(start#0 <- block@0, i#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let tmp%0#1: bool = (< i#1 stop#0)
        goto tmp%0#1 ? block@3 : block@6
    block@3: // while_body_L15
        let total#2: uint64 = (+ total#1 i#1)
        let tmp%2#1: bool = (> total#2 10u)
        goto tmp%2#1 ? block@4 : block@5
    block@4: // if_body_L17
        goto block@7
    block@5: // after_if_else_L17
        let i#2: uint64 = (+ i#1 step#0)
        goto block@2
    block@6: // after_while_L15
        goto block@7
    block@7: // L15
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@6)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#3)
        let tmp%8#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%8#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_continue[routing]() -> void:
    block@0: // L24
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let start#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let stop#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let step#0: uint64 = (btoi tmp%4#0)
        let total#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L26
        let i#1: uint64 = φ(start#0 <- block@0, i#3 <- block@6)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@6)
        let tmp%0#1: bool = (< i#1 stop#0)
        goto tmp%0#1 ? block@3 : block@7
    block@3: // while_body_L26
        let tmp%1#1: uint64 = (% i#1 5u)
        goto tmp%1#1 ? block@5 : block@4
    block@4: // if_body_L27
        goto block@6
    block@5: // after_if_else_L27
        let total#2: uint64 = (+ total#1 i#1)
        goto block@6
    block@6: // L26
        let total#3: uint64 = φ(total#1 <- block@4, total#2 <- block@5)
        let i#3: uint64 = (+ i#1 step#0)
        goto block@2
    block@7: // after_while_L26
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#1)
        let tmp%8#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%8#0)
        exit 1u

subroutine tests/approvals/for-loops.algo.ts::ForLoopsAlgo.test_for_loop_labelled[routing]() -> void:
    block@0: // L32
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let start#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let stop#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let step#0: uint64 = (btoi tmp%4#0)
        let total#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L34
        let i#1: uint64 = φ(start#0 <- block@0, i#3 <- block@8)
        let total#3: uint64 = φ(total#0 <- block@0, total#1 <- block@8)
        let tmp%0#1: bool = (< i#1 stop#0)
        goto tmp%0#1 ? block@3 : block@9
    block@3: // while_body_L34
        goto block@4
    block@4: // while_top_L35
        let j#1: uint64 = φ(start#0 <- block@3, j#2 <- block@7)
        let total#1: uint64 = φ(total#3 <- block@3, total#2 <- block@7)
        let tmp%1#1: bool = (< j#1 stop#0)
        goto tmp%1#1 ? block@5 : block@8
    block@5: // while_body_L35
        let tmp%2#1: uint64 = (+ i#1 j#1)
        let total#2: uint64 = (+ total#1 tmp%2#1)
        let tmp%4#1: uint64 = (* i#1 j#1)
        let tmp%5#1: bool = (> tmp%4#1 stop#0)
        goto tmp%5#1 ? block@6 : block@7
    block@6: // if_body_L38
        goto block@10
    block@7: // after_if_else_L38
        let j#2: uint64 = (+ j#1 step#0)
        goto block@4
    block@8: // after_while_L35
        let i#3: uint64 = (+ i#1 step#0)
        goto block@2
    block@9: // after_while_L34
        goto block@10
    block@10: // L34
        let total#4: uint64 = φ(total#2 <- block@6, total#3 <- block@9)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#4)
        let tmp%8#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%8#0)
        exit 1u