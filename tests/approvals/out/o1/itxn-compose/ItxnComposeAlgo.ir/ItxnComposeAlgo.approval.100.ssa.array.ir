main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L18
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "distribute(address[],pay,application)void" => block@3, method "conditionalBegin(uint64)void" => block@4, * => block@11}
    block@3: // distribute_route_L19
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%9#0: uint64 = ((txnas Applications) tmp%8#0)
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute(reinterpret_Encoded(len+uint8[32][])%0#0, gtxn_idx%0#0, tmp%9#0)
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // conditionalBegin_route_L52
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin(tmp%14#0)
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L18
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L18
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L18
        let tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute(addresses: Encoded(len+uint8[32][]), funds: uint64, verifier: uint64) -> void:
    block@0: // L19
        let tmp%0#0: account = ((gtxns Receiver) funds#0)
        let tmp%1#0: account = (global CurrentApplicationAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // assert target is match for conditions
        let array_length%0#0: uint64 = (extract_uint16 addresses#0 0u)
        (assert array_length%0#0) // must provide some accounts
        let tmp%3#0: uint64 = ((gtxns Amount) funds#0)
        let share#0: uint64 = (/ tmp%3#0 array_length%0#0)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) addresses#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 32u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 32u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[32]) = aggregate%encoded_element%0#1
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob share#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat aggregate%head%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%0#1: uint64 = (len array_item%0#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 array_item%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let aggregate%as_bytes%1#1: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 aggregate%offset_as_uint16%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 18u aggregate%data_length%0#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%head%2#1 aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#1: Encoded(uint64,uint64,(len+uint8[])) = aggregate%concat%0#1
        let payFields#0: Encoded(uint64,uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#1
        itxn_begin
        let aggregate%extract%0#1: bytes = (extract3 payFields#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#1: bytes = (extract3 payFields#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 payFields#0 16u)
        let aggregate%len%0#1: uint64 = (len payFields#0)
        let aggregate%substring3%0#1: bytes = (substring3 payFields#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%0#1
        let values%2#0: bytes = ((extract 2 0) tuple_item%2#0)
        ((itxn_field Receiver) values%2#0)
        ((itxn_field Amount) values%1#0)
        ((itxn_field TypeEnum) values%0#0)
        ((itxn_field Fee) 0u)
        let temp#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L32
        let temp#1: uint64 = φ(temp#0 <- block@0, temp#2 <- block@2)
        let continue_looping%0#0: bool = (< temp#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L32
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) addresses#0)
        let aggregate%bytes_offset%1#1: uint64 = (* temp#1 32u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 32u) // on error: index access is out of bounds
        let addr#0: Encoded(uint8[32]) = aggregate%encoded_element%1#1
        itxn_next
        ((itxn_field Receiver) addr#0)
        ((itxn_field Amount) values%1#0)
        ((itxn_field TypeEnum) values%0#0)
        ((itxn_field Fee) 0u)
        let temp#2: uint64 = (+ temp#1 1u)
        goto block@1
    block@4: // after_for_L32
        itxn_next
        ((itxn_field ApplicationArgs) method "verify()void")
        ((itxn_field ApplicationID) verifier#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetName) "abc")
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin(count: uint64) -> void:
    block@0: // L52
        itxn_begin
        let aggregate%length%0#1: uint64 = (len "Hi")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "Hi")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiACAQAmAwhncmVldGluZwQVH3x1ASAxGEAABCiAAGcxG0EAKoIFBACSJa4EJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAFEARgA7AB0AAiNDMRkURDEYRDYaAYgAakkVFlcGAkxQKUxQsCJDMRkURDEYRDYaAVcCAIgAP0kVFlcGAkxQKUxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAACIkOKAQAoi/9niYoBASMoZUQqUIv/UImKAQEjKGVEKlCL/yNZi/+BAlmL/08CSwJSVwIATwJMUIv/FYv/TwNPAlJXAgBQiQ==)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (gitxn 0 CreatedApplicationID)
        let temp#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L56
        let temp#1: uint64 = φ(temp#0 <- block@0, temp#2 <- block@6)
        let continue_looping%0#0: bool = (< temp#1 count#0)
        goto continue_looping%0#0 ? block@3 : block@8
    block@3: // for_body_L56
        goto temp#1 ? block@5 : block@4
    block@4: // if_body_L57
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "ho")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "ho")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%3#0)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@5: // else_body_L59
        itxn_next
        let aggregate%length%2#1: uint64 = (len "ho")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "ho")
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let tmp%4#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) tmp%4#0)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // after_if_else_L57
        let temp#2: uint64 = (+ temp#1 1u)
        goto block@2
    block@8: // after_for_L56
        itxn_submit
        return 