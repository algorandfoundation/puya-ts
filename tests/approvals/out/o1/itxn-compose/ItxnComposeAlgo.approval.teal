#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6 32
    bytecblock 0xd0a28200 0x0002686f
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x1ecad34c 0x90d29762 // method "distribute(address[],pay,uint64)void", method "conditionalBegin(uint64)void"
    txna ApplicationArgs 0
    match distribute conditionalBegin
    err

main___algots__.defaultCreate@9:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute[routing]() -> void:
distribute:
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 2
    btoi
    cover 2
    // tests/approvals/itxn-compose.algo.ts:20-22
    // assertMatch(funds, {
    //   receiver: Global.currentApplicationAddress,
    // })
    dup
    gtxns Receiver
    // tests/approvals/itxn-compose.algo.ts:21
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/itxn-compose.algo.ts:20-22
    // assertMatch(funds, {
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    assert // assert target is match for conditions
    // tests/approvals/itxn-compose.algo.ts:23
    // assert(addresses.length, 'must provide some accounts')
    dig 1
    intc_0 // 0
    extract_uint16
    dup
    cover 3
    dup
    assert // must provide some accounts
    // tests/approvals/itxn-compose.algo.ts:24
    // const share: uint64 = funds.amount / addresses.length
    swap
    gtxns Amount
    swap
    /
    // tests/approvals/itxn-compose.algo.ts:29
    // receiver: addresses[0].bytes,
    dig 1
    extract 2 0
    cover 2
    swap
    extract 2 32
    // tests/approvals/itxn-compose.algo.ts:27
    // type: TransactionType.Payment,
    intc_1 // 1
    // tests/approvals/itxn-compose.algo.ts:26-30
    // const payFields = {
    //   type: TransactionType.Payment,
    //   amount: share,
    //   receiver: addresses[0].bytes,
    // } satisfies PaymentComposeFields
    itob
    uncover 2
    itob
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    pushbytes 0x0012
    concat
    swap
    concat
    // tests/approvals/itxn-compose.algo.ts:31
    // itxnCompose.begin(payFields)
    itxn_begin
    dup
    intc_0 // 0
    extract_uint64
    dup
    uncover 2
    dup
    pushint 8 // 8
    extract_uint64
    dup
    cover 2
    cover 3
    dup
    pushint 16 // 16
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    itxn_field Receiver
    itxn_field Amount
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    intc_1 // 1

distribute_for_header@2:
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    dup
    dig 5
    <
    bz distribute_after_for@5
    // tests/approvals/itxn-compose.algo.ts:33
    // const addr = addresses[i]
    dupn 2
    intc_3 // 32
    *
    dig 5
    swap
    intc_3 // 32
    extract3 // on error: index access is out of bounds
    // tests/approvals/itxn-compose.algo.ts:34-37
    // itxnCompose.next({
    //   ...payFields,
    //   receiver: addr.bytes,
    // })
    itxn_next
    itxn_field Receiver
    dig 2
    itxn_field Amount
    dig 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    intc_1 // 1
    +
    bury 1
    b distribute_for_header@2

distribute_after_for@5:
    // tests/approvals/itxn-compose.algo.ts:40-42
    // itxnCompose.next(VerifierContract.prototype.verify, {
    //   appId: verifier,
    // })
    itxn_next
    pushbytes 0x65a9aecc // method "verify()void"
    itxn_field ApplicationArgs
    dig 5
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:44-48
    // itxnCompose.next(
    //   itxn.assetConfig({
    //     assetName: 'abc',
    //   }),
    // )
    itxn_next
    // tests/approvals/itxn-compose.algo.ts:46
    // assetName: 'abc',
    pushbytes "abc"
    itxn_field ConfigAssetName
    // tests/approvals/itxn-compose.algo.ts:45-47
    // itxn.assetConfig({
    //   assetName: 'abc',
    // }),
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:50
    // itxnCompose.submit()
    itxn_submit
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    intc_1 // 1
    return


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin[routing]() -> void:
conditionalBegin:
    // tests/approvals/itxn-compose.algo.ts:52
    // conditionalBegin(count: uint64) {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/itxn-compose.algo.ts:54
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    itxn_begin
    pushbytes 0x009225ae // method "helloCreate(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x00024869
    itxn_field ApplicationArgs
    // tests/approvals/itxn-compose.algo.ts:53
    // const hello = compileArc4(Hello)
    intc_1 // 1
    itxn_field GlobalNumByteSlice
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAmAwhncmVldGluZwEgBBUffHUxGEAABCiAAGeCAgQkN408BKDoGHI2GgCOAgA2AC0xGRREMRhBABaCAgTQooIABFGAuiA2GgCOAgAsAEgAgAQAkiWuNhoAjgEAEwAxGYEEEjEYEEMxGYEFEjEYEEM2GgFXAgAoTGciQzYaAVcCACMoZUQpUExQSRUWVwYCTFAqTFCwIkM2GgEjKGVEKVBLASNZSwKBAllLA08CSwJSVwIATwJMUEsCFU8DTwNPAlJXAgBQSRUWVwYCTFAqTFCwIkM=)
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn-compose.algo.ts:54
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    intc_0 // 0

conditionalBegin_for_header@3:
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    dup
    dig 3
    <
    bz conditionalBegin_after_for@9
    // tests/approvals/itxn-compose.algo.ts:57
    // if (i === 0) {
    dup
    bnz conditionalBegin_else_body@6
    // tests/approvals/itxn-compose.algo.ts:58
    // itxnCompose.begin(Hello.prototype.greet, { appId, args: ['ho'] })
    itxn_begin
    bytec_0 // method "greet(string)string"
    itxn_field ApplicationArgs
    bytec_1 // 0x0002686f
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

conditionalBegin_after_if_else@7:
    // tests/approvals/itxn-compose.algo.ts:56
    // for (const i of urange(count)) {
    dup
    intc_1 // 1
    +
    bury 1
    b conditionalBegin_for_header@3

conditionalBegin_else_body@6:
    // tests/approvals/itxn-compose.algo.ts:60
    // itxnCompose.next(Hello.prototype.greet, { appId, args: ['ho'] })
    itxn_next
    bytec_0 // method "greet(string)string"
    itxn_field ApplicationArgs
    bytec_1 // 0x0002686f
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b conditionalBegin_after_if_else@7

conditionalBegin_after_for@9:
    // tests/approvals/itxn-compose.algo.ts:63
    // itxnCompose.submit()
    itxn_submit
    // tests/approvals/itxn-compose.algo.ts:52
    // conditionalBegin(count: uint64) {
    intc_1 // 1
    return
