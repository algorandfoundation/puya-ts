#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6 32
    bytecblock 0xd0a28200 0x0002686f
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x2ef58e27 0x90d29762 // method "distribute(address[],pay,application)void", method "conditionalBegin(uint64)void"
    txna ApplicationArgs 0
    match main_distribute_route@3 main_conditionalBegin_route@4

main_after_if_else@11:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    intc_0 // 0
    return

main_conditionalBegin_route@4:
    // tests/approvals/itxn-compose.algo.ts:53
    // conditionalBegin(count: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/itxn-compose.algo.ts:53
    // conditionalBegin(count: uint64) {
    callsub conditionalBegin
    intc_1 // 1
    return

main_distribute_route@3:
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 2
    btoi
    txnas Applications
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    callsub distribute
    intc_1 // 1
    return

main_bare_routing@7:
    // tests/approvals/itxn-compose.algo.ts:18
    // class ItxnComposeAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute(addresses: bytes, funds: uint64, verifier: uint64) -> void:
distribute:
    // tests/approvals/itxn-compose.algo.ts:19
    // distribute(addresses: Address[], funds: gtxn.PaymentTxn, verifier: Application) {
    proto 3 0
    // tests/approvals/itxn-compose.algo.ts:20-22
    // assertMatch(funds, {
    //   receiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Receiver
    // tests/approvals/itxn-compose.algo.ts:21
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/itxn-compose.algo.ts:20-22
    // assertMatch(funds, {
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    assert // assert target is match for conditions
    // tests/approvals/itxn-compose.algo.ts:23
    // assert(addresses.length, 'must provide some accounts')
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dupn 2
    assert // must provide some accounts
    // tests/approvals/itxn-compose.algo.ts:24
    // const share: uint64 = funds.amount / addresses.length
    frame_dig -2
    gtxns Amount
    swap
    /
    dup
    // tests/approvals/itxn-compose.algo.ts:29
    // receiver: addresses[0].bytes,
    frame_dig -3
    extract 2 0
    swap
    frame_dig -3
    extract 2 32
    // tests/approvals/itxn-compose.algo.ts:31
    // itxnCompose.begin(payFields)
    itxn_begin
    itxn_field Receiver
    itxn_field Amount
    // tests/approvals/itxn-compose.algo.ts:27
    // type: TransactionType.Payment,
    intc_1 // 1
    itxn_field TypeEnum
    // tests/approvals/itxn-compose.algo.ts:31
    // itxnCompose.begin(payFields)
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    intc_1 // 1

distribute_for_header@1:
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    frame_dig 3
    frame_dig 0
    <
    bz distribute_after_for@4
    // tests/approvals/itxn-compose.algo.ts:33
    // const addr = addresses[i]
    frame_dig 3
    dup
    intc_3 // 32
    *
    frame_dig 2
    swap
    intc_3 // 32
    extract3 // on error: index access is out of bounds
    // tests/approvals/itxn-compose.algo.ts:34-38
    // itxnCompose.next({
    //   ...payFields,
    // 
    //   receiver: addr.bytes,
    // })
    itxn_next
    frame_dig 1
    itxn_field Amount
    // tests/approvals/itxn-compose.algo.ts:27
    // type: TransactionType.Payment,
    intc_1 // 1
    itxn_field TypeEnum
    itxn_field Receiver
    // tests/approvals/itxn-compose.algo.ts:34-38
    // itxnCompose.next({
    //   ...payFields,
    // 
    //   receiver: addr.bytes,
    // })
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:32
    // for (const i of urange(1, addresses.length)) {
    intc_1 // 1
    +
    frame_bury 3
    b distribute_for_header@1

distribute_after_for@4:
    // tests/approvals/itxn-compose.algo.ts:41-43
    // itxnCompose.next(VerifierContract.prototype.verify, {
    //   appId: verifier,
    // })
    itxn_next
    pushbytes 0x65a9aecc // method "verify()void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:45-49
    // itxnCompose.next(
    //   itxn.assetConfig({
    //     assetName: 'abc',
    //   }),
    // )
    itxn_next
    // tests/approvals/itxn-compose.algo.ts:47
    // assetName: 'abc',
    pushbytes "abc"
    itxn_field ConfigAssetName
    // tests/approvals/itxn-compose.algo.ts:46-48
    // itxn.assetConfig({
    //   assetName: 'abc',
    // }),
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn-compose.algo.ts:51
    // itxnCompose.submit()
    itxn_submit
    retsub


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin(count: uint64) -> void:
conditionalBegin:
    // tests/approvals/itxn-compose.algo.ts:53
    // conditionalBegin(count: uint64) {
    proto 1 0
    // tests/approvals/itxn-compose.algo.ts:55
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    itxn_begin
    pushbytes 0x009225ae // method "helloCreate(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x00024869
    itxn_field ApplicationArgs
    // tests/approvals/itxn-compose.algo.ts:54
    // const hello = compileArc4(Hello)
    intc_1 // 1
    itxn_field GlobalNumByteSlice
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAmAwhncmVldGluZwQVH3x1ASAxGEAABCiAAGcxG0EAKoIFBACSJa4EJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAFEARgA7AB0AAiNDMRkURDEYRDYaAYgAakkVFlcGAkxQKUxQsCJDMRkURDEYRDYaAVcCAIgAP0kVFlcGAkxQKUxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAACIkOKAQAoi/9niYoBASMoZUQqUIv/UImKAQEjKGVEKlCL/yNZi/+BAlmL/08CSwJSVwIATwJMUIv/FYv/TwNPAlJXAgBQiQ==)
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn-compose.algo.ts:55
    // const appId = hello.call.create({ args: ['Hi'] }).itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // tests/approvals/itxn-compose.algo.ts:57
    // for (const i of urange(count)) {
    intc_0 // 0

conditionalBegin_for_header@2:
    // tests/approvals/itxn-compose.algo.ts:57
    // for (const i of urange(count)) {
    frame_dig 1
    frame_dig -1
    <
    bz conditionalBegin_after_for@8
    // tests/approvals/itxn-compose.algo.ts:58
    // if (i === 0) {
    frame_dig 1
    bnz conditionalBegin_else_body@5
    // tests/approvals/itxn-compose.algo.ts:59
    // itxnCompose.begin(Hello.prototype.greet, { appId, args: ['ho'] })
    itxn_begin
    bytec_0 // method "greet(string)string"
    itxn_field ApplicationArgs
    bytec_1 // 0x0002686f
    itxn_field ApplicationArgs
    frame_dig 0
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

conditionalBegin_after_if_else@6:
    // tests/approvals/itxn-compose.algo.ts:57
    // for (const i of urange(count)) {
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b conditionalBegin_for_header@2

conditionalBegin_else_body@5:
    // tests/approvals/itxn-compose.algo.ts:61
    // itxnCompose.next(Hello.prototype.greet, { appId, args: ['ho'] })
    itxn_next
    bytec_0 // method "greet(string)string"
    itxn_field ApplicationArgs
    bytec_1 // 0x0002686f
    itxn_field ApplicationArgs
    frame_dig 0
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b conditionalBegin_after_if_else@6

conditionalBegin_after_for@8:
    // tests/approvals/itxn-compose.algo.ts:64
    // itxnCompose.submit()
    itxn_submit
    retsub
