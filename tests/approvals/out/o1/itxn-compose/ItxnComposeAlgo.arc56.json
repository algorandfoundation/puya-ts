{
    "name": "ItxnComposeAlgo",
    "structs": {},
    "methods": [
        {
            "name": "distribute",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                },
                {
                    "type": "pay",
                    "name": "funds"
                },
                {
                    "type": "application",
                    "name": "verifier"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "conditionalBegin",
            "args": [
                {
                    "type": "uint64",
                    "name": "count"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        50,
                        66
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        115
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        102
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        53,
                        69
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        170
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        122
                    ],
                    "errorMessage": "must provide some accounts"
                },
                {
                    "pc": [
                        82
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEGICYCBNCiggAEAAJobzEbQQBGggIELvWOJwSQ0pdiNhoAjgIAEgACIkMxGRREMRhENhoBF4gApiNDMRkURDEYRDYaATEWIwlJOBAjEkQ2GgIXwDKIAA0jQzEZQP/KMRgURCNDigMAi/44BzIKEkSL/SJZRwJEi/44CEwKSYv9VwIATIv9VwIgsbIHsggjshAisgEjiwOLAAxBAB6LA0klC4sCTCVYtosBsggjshCyByKyASMIjANC/9q2gARlqa7MshqL/7IYJLIQIrIBtoADYWJjsiaBA7IQIrIBs4mKAQCxgAQAkiWushqABAACSGmyGiOyNYAECoEBQ7JCgPcBCiACAQAmAwhncmVldGluZwQVH3x1ASAxGEAABCiAAGcxG0EAKoIFBACSJa4EJDeNPASg6BhyBNCiggAEUYC6IDYaAI4FAFEARgA7AB0AAiNDMRkURDEYRDYaAYgAakkVFlcGAkxQKUxQsCJDMRkURDEYRDYaAVcCAIgAP0kVFlcGAkxQKUxQsCJDMRmBBBJEMRhEIkMxGYEFEkQxGEQiQzEZFEQxGBRENhoBVwIAiAACIkOKAQAoi/9niYoBASMoZUQqUIv/UImKAQEjKGVEKlCL/yNZi/+BAlmL/08CSwJSVwIATwJMUIv/FYv/TwNPAlJXAgBQibJAIrIZJLIQIrIBs7cAPSKLAYv/DEEAM4sBQAAasSiyGimyGosAshgkshAisgGLASMIjAFC/9m2KLIaKbIaiwCyGCSyECKyAUL/47OJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}