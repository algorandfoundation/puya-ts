main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L8
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L8
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@7
    block@2: // call_NoOp_L8
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test((uint64,byte[],bool))void" => block@3, method "testMutable((uint64,byte[],bool))void" => block@4, method "init()void" => block@5, * => block@6}
    block@3: // test_route_L9
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test[routing]()
        goto block@6
    block@4: // testMutable_route_L13
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable[routing]()
        goto block@6
    block@5: // init_route_L17
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init[routing]()
        goto block@6
    block@6: // switch_case_next_L8
        goto block@8
    block@7: // create_NoOp_L8
        goto block@8
    block@8: // after_if_else_L8
        goto block@10
    block@9: // __algots__.defaultCreate_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__algots__.defaultCreate()
        exit 1u
    block@10: // after_if_else_L8
        exit 0u

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test[routing]() -> void:
    block@0: // L9
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = tmp%0#0
        let test%0#0: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(as_Encoded(uint64,(len+uint8[]),bool1)%0#0)
        exit 1u

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable[routing]() -> void:
    block@0: // L13
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = tmp%0#0
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable(as_Encoded(uint64,(len+uint8[]),bool1)%0#0)
        exit 1u

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init[routing]() -> void:
    block@0: // L17
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init()
        exit 1u

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(p: Encoded(uint64,(len+uint8[]),bool1)) -> Encoded(uint64,(len+uint8[]),bool1):
    block@0: // L9
        let p%is_original#0: bool = 1u
        let p%out#0: Encoded(uint64,(len+uint8[]),bool1) = p#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(p#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = extract_value(p#0, 1)
        let values%1#0: bytes = decode_bytes<bytes>(tuple_item%1#0)
        let tuple_item%2#0: bool = extract_value(p#0, 2)
        let values%2#0: bool = decode_bytes<bool>(tuple_item%2#0)
        let a#0: uint64 = values%0#0
        let b#0: bytes = values%1#0
        let c#0: bool = values%2#0
        let tmp%0#0: bytes[8] = (itob a#0)
        let tmp%1#0: bytes[8] = (concat tmp%0#0 b#0)
        let tmp%2#0: bytes[8] = (itob c#0)
        let tmp%3#0: bytes[8] = (concat tmp%1#0 tmp%2#0)
        (log tmp%3#0)
        return p%out#0

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable(p: Encoded(uint64,(len+uint8[]),bool1)) -> void:
    block@0: // L13
        let tuple_item%0#0: Encoded(uint64) = extract_value(p#0, 0)
        let tuple_item%1#0: Encoded(len+uint8[]) = extract_value(p#0, 1)
        let tuple_item%2#0: bool = extract_value(p#0, 2)
        let values%0#0: Encoded(bool8) = decode_bytes<Encoded(bool8)>(tuple_item%2#0)
        let a#0: Encoded(uint64) = tuple_item%0#0
        let b#0: Encoded(len+uint8[]) = tuple_item%1#0
        let c#0: Encoded(bool8) = values%0#0
        let tmp%0#0: bytes = (concat a#0 b#0)
        let tmp%1#0: bytes = (concat tmp%0#0 c#0)
        (log tmp%1#0)
        return 

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init() -> void:
    block@0: // L17
        let tmp%0#0: Encoded(uint64,(len+uint8[]),bool1) = bytes_encode<(uint64,(len+uint8[]),bool1)>(456u, "", 0u)
        let test%0#0: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(tmp%0#0)
        let tmp%1#0: Encoded(uint64,(len+uint8[]),bool1) = bytes_encode<(uint64,(len+uint8[]),bool1)>(2u, "Hello", 1u)
        let temp#0: Encoded(uint64,(len+uint8[]),bool1) = tmp%1#0
        let test%1#0: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(temp#0)
        let temp#1: Encoded(uint64,(len+uint8[]),bool1) = test%1#0
        return 

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 