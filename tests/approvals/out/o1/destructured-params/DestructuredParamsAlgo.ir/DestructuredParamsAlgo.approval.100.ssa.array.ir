main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((uint64,byte[],bool))void" => block@3, method "testMutable((uint64,byte[],bool))void" => block@4, method "init()void" => block@5, * => block@12}
    block@3: // test_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let test%0#0: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0)
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // testMutable_route_L13
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),bool1)%1#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable(reinterpret_Encoded(uint64,(len+uint8[]),bool1)%1#0)
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // init_route_L17
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init()
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L8
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L8
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L8
        let tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#3 <- block@9, tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(p: Encoded(uint64,(len+uint8[]),bool1)) -> Encoded(uint64,(len+uint8[]),bool1):
    block@0: // L9
        let aggregate%extract%0#0: bytes = (extract3 p#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let a#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#0: uint64 = (len p#0)
        let aggregate%substring3%0#0: bytes = (substring3 p#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let b#0: bytes = ((extract 2 0) tuple_item%1#0)
        let aggregate%get_bit%0#0: bool = (getbit p#0 80u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#0
        let c#0: bool = tuple_item%2#0
        let tmp%0#0: bytes[8] = (itob a#0)
        let tmp%1#0: bytes[8] = (concat tmp%0#0 b#0)
        let tmp%2#0: bytes[8] = (itob c#0)
        let tmp%3#0: bytes[8] = (concat tmp%1#0 tmp%2#0)
        (log tmp%3#0)
        return p#0

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable(p: Encoded(uint64,(len+uint8[]),bool1)) -> void:
    block@0: // L13
        let aggregate%extract%0#0: bytes = (extract3 p#0 0u 8u)
        let a#0: Encoded(uint64) = aggregate%extract%0#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#0: uint64 = (len p#0)
        let aggregate%substring3%0#0: bytes = (substring3 p#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let b#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let aggregate%get_bit%0#0: bool = (getbit p#0 80u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#0
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tuple_item%2#0)
        let c#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: bytes = (concat a#0 b#0)
        let tmp%1#0: bytes = (concat tmp%0#0 c#0)
        (log tmp%1#0)
        return 

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init() -> void:
    block@0: // L17
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 456u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 11u aggregate%data_length%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = aggregate%concat%0#0
        let tmp%0#0: Encoded(uint64,(len+uint8[]),bool1) = aggregate%as_Encoded(uint64,(len+uint8[]),bool1)%0#0
        let test%0#0: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(tmp%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%1#0: uint64 = (len "Hello")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Hello")
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 11u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 11u aggregate%data_length%1#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%encoded_bool%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),bool1)%1#0: Encoded(uint64,(len+uint8[]),bool1) = aggregate%concat%1#0
        let temp#0: Encoded(uint64,(len+uint8[]),bool1) = aggregate%as_Encoded(uint64,(len+uint8[]),bool1)%1#0
        let temp#1: Encoded(uint64,(len+uint8[]),bool1) = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(temp#0)
        return 