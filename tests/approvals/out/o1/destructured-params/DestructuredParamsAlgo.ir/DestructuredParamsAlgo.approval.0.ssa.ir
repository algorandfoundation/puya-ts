main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L8
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((uint64,byte[],bool))void" => block@2, method "testMutable((uint64,byte[],bool))void" => block@3, method "init()void" => block@4, * => block@5}
    block@2: // test_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        let (tmp%7#0: uint64, tmp%8#0: bytes, tmp%9#0: bool) = decode<(uint64,bytes,bool,)>(reinterpret_Encoded(uint64,(len+uint8[]),bool1)%0#0)
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(tmp%7#0, tmp%8#0, tmp%9#0)
        return 1u
    block@3: // testMutable_route_L13
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),bool1)%1#0: Encoded(uint64,(len+uint8[]),bool1) = (txna ApplicationArgs 1)
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable(reinterpret_Encoded(uint64,(len+uint8[]),bool1)%1#0)
        return 1u
    block@4: // init_route_L17
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 NoOp)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // can only call when not creating
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init()
        return 1u
    block@5: // switch_case_default_L8
        goto block@6
    block@6: // switch_case_next_L8
        goto block@11
    block@7: // bare_routing_L8
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L8
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (== tmp%19#0 0u)
        (assert tmp%20#0) // can only call when creating
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__algots__.defaultCreate()
        return 1u
    block@9: // switch_case_default_L8
        goto block@10
    block@10: // switch_case_next_L8
        goto block@11
    block@11: // after_if_else_L8
        return 0u

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(p.a: uint64, p.b: bytes, p.c: bool) -> void:
    block@0: // L9
        let a#0: uint64 = p.a#0
        let b#0: bytes = p.b#0
        let c#0: bool = p.c#0
        let tmp%0#0: bytes[8] = (itob a#0)
        let tmp%1#0: bytes[8] = (concat tmp%0#0 b#0)
        let tmp%2#0: bytes[8] = (itob c#0)
        let tmp%3#0: bytes[8] = (concat tmp%1#0 tmp%2#0)
        (log tmp%3#0)
        return 

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.testMutable(p: Encoded(uint64,(len+uint8[]),bool1)) -> void:
    block@0: // L13
        let tuple_item%0#0: Encoded(uint64) = agg_read_index(p#0, 0)
        let a#0: Encoded(uint64) = tuple_item%0#0
        let tuple_item%1#0: Encoded(len+uint8[]) = agg_read_index(p#0, 1)
        let b#0: Encoded(len+uint8[]) = tuple_item%1#0
        let tuple_item%2#0: bool = agg_read_index(p#0, 2)
        let values%0#0: Encoded(bool8) = decode<Encoded(bool8)>(tuple_item%2#0)
        let c#0: Encoded(bool8) = values%0#0
        let tmp%0#0: bytes = (concat a#0 b#0)
        let tmp%1#0: bytes = (concat tmp%0#0 c#0)
        (log tmp%1#0)
        return 

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.init() -> void:
    block@0: // L17
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(456u, "", 0u)
        let (temp.a#0: uint64, temp.b#0: bytes, temp.c#0: bool) = (2u, "Hello", 1u)
        tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.test(temp.a#0, temp.b#0, temp.c#0)
        return 

subroutine tests/approvals/destructured-params.algo.ts::DestructuredParamsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L8
        return 