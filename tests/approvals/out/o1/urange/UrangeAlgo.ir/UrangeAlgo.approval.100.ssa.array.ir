main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testSingleArg()uint64[]" => block@4, method "testTwoArg()uint64[]" => block@5, method "testThreeArg()uint64[]" => block@6, * => block@9}
    block@4: // testSingleArg_route_L5
        tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg[routing]()
        goto block@9
    block@5: // testTwoArg_route_L12
        tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg[routing]()
        goto block@9
    block@6: // testThreeArg_route_L19
        tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg[routing]()
        goto block@9
    block@9: // after_if_else_L4
        fail
    block@10: // __algots__.defaultCreate_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.testSingleArg[routing]() -> void:
    block@0: // L5
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let results#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let value_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L7
        let temp#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@0, results#2 <- block@3)
        let continue_looping%0#0: bool = (< temp#0 5u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L7
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob temp#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let results#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let value_internal%0#2: uint64 = (+ temp#0 1u)
        goto block@2
    block@5: // after_for_L7
        let tmp%1#0: bytes = (concat 0x151f7c75 results#1)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.testTwoArg[routing]() -> void:
    block@0: // L12
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let results#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let value_internal%0#0: uint64 = 2u
        goto block@2
    block@2: // for_header_L14
        let temp#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@0, results#2 <- block@3)
        let continue_looping%0#0: bool = (< temp#0 5u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L14
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob temp#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let results#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let value_internal%0#2: uint64 = (+ temp#0 1u)
        goto block@2
    block@5: // after_for_L14
        let tmp%1#0: bytes = (concat 0x151f7c75 results#1)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/urange.algo.ts::UrangeAlgo.testThreeArg[routing]() -> void:
    block@0: // L19
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let results#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let value_internal%0#0: uint64 = 2u
        goto block@2
    block@2: // for_header_L21
        let temp#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let results#1: Encoded(len+uint64[]) = φ(results#0 <- block@0, results#2 <- block@3)
        let continue_looping%0#0: bool = (< temp#0 10u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L21
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob temp#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat results#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let results#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let value_internal%0#2: uint64 = (+ temp#0 3u)
        goto block@2
    block@5: // after_for_L21
        let tmp%1#0: bytes = (concat 0x151f7c75 results#1)
        (log tmp%1#0)
        exit 1u