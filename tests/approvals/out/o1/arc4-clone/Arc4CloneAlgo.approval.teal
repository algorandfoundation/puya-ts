#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x398e270d 0x80acbe10 0xe213f5b6 0x63e40e8d // method "aliasing(uint64[])void", method "receive(uint64[])void", method "receiveReadonly(uint64[])void", method "structReturn((uint64,string,(byte[],uint8)))(byte[],uint8)"
    txna ApplicationArgs 0
    match main_aliasing_route@4 main_receive_route@5 main_receiveReadonly_route@6 structReturn
    err

main_receiveReadonly_route@6:
    // tests/approvals/arc4-clone.algo.ts:51
    // receiveReadonly(a: readonly uint64[]) {}
    intc_0 // 1
    return

main_receive_route@5:
    // tests/approvals/arc4-clone.algo.ts:49
    // receive(mutable: uint64[]) {}
    intc_0 // 1
    return

main_aliasing_route@4:
    // tests/approvals/arc4-clone.algo.ts:17
    // aliasing(mutable: uint64[]) {
    intc_0 // 1
    return

main___algots__.defaultCreate@11:
    // tests/approvals/arc4-clone.algo.ts:16
    // export class Arc4CloneAlgo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn[routing]() -> void:
structReturn:
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    txna ApplicationArgs 1
    // tests/approvals/arc4-clone.algo.ts:55
    // assert(arg.shared === echo(arg.shared), "this won't error")
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    len
    substring3
    // tests/approvals/arc4-clone.algo.ts:53
    // structReturn(arg: TopLevelStruct): SharedStruct {
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
