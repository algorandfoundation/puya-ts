main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L16
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "aliasing(uint64[])void" => block@4, method "receive(uint64[])void" => block@5, method "receiveReadonly(uint64[])void" => block@6, method "structReturn((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@7, * => block@10}
    block@4: // aliasing_route_L17
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing[routing]()
        goto block@10
    block@5: // receive_route_L49
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive[routing]()
        goto block@10
    block@6: // receiveReadonly_route_L51
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly[routing]()
        goto block@10
    block@7: // structReturn_route_L53
        tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn[routing]()
        goto block@10
    block@10: // after_if_else_L16
        fail
    block@11: // __algots__.defaultCreate_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.aliasing[routing]() -> void:
    block@0: // L17
        let mutable#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 mutable#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len mutable#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receive[routing]() -> void:
    block@0: // L49
        let mutable#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 mutable#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len mutable#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.receiveReadonly[routing]() -> void:
    block@0: // L51
        let a#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 a#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        exit 1u

subroutine tests/approvals/arc4-clone.algo.ts::Arc4CloneAlgo.structReturn[routing]() -> void:
    block@0: // L53
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len arg#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 arg#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 12u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
        let substring3%0#0: bytes = (substring3 arg#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 14u)
        let extract_uint16%1#0: uint64 = (extract_uint16 arg#0 10u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
        let s#0: Encoded((len+uint8[]),uint8) = (substring3 arg#0 extract_uint16%1#0 tuple_len%0#0)
        let tuple_len%1#0: uint64 = (len s#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 s#0 0u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#0 3u)
        (assert eq%2#0) // invalid tail pointer at index 0 of ((len+uint8[]),uint8)
        let substring3%2#0: bytes = (substring3 s#0 extract_uint16%2#0 tuple_len%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 substring3%2#0 0u) // on error: invalid array length header
        let add%3#0: uint64 = (+ aggregate%array_length%1#0 5u)
        let add%4#0: uint64 = (+ add%1#0 add%3#0)
        let eq%3#0: bool = (== tuple_len%0#0 add%4#0)
        (assert eq%3#0) // invalid number of bytes for TopLevelStruct
        let tmp%2#0: bytes = (concat 0x151f7c75 s#0)
        (log tmp%2#0)
        exit 1u