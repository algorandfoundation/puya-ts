{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/do-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAmBE;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAAA;AAAA;;;AAAA;AAmBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AARF;;;AAAA;AAAA;;;AAAA;AAQE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AACE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AACiB;AAER;AAAL;AAAA;AACO;;AAAA;AAAA;;;AACT;AAEF;;;AACqB;AACJ;AAET;;AAAA;;;AAAS;;AAAA;;AAAA;AAAT;;;AAEJ;;AAAK;AAAL;AAAA;AAAA;;AACA;;AAAA;;AAAA;AAAA;;AACO;;AAAA;AAAA;;;AACT;AAEF;;;AACiB;AACI;AAEb;;AAAA;;;AAAS;;AAAA;;AAAA;AAAT;;;AACF;;AAAS;;AAAT;AAAA;;AACA;;AAAK;AAAL;AAAA;;AAKK;;AAAA;;AAAA;AAAA;;;AACT;;AAAA;;AAAA;AAHE;;AAAS;AAAT;AAAA;;AACA;;AAAK;AAAL;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0x39239792 0xace2eb21 0x78e8d516 // method \"testDo(uint64)uint64\", method \"testDoBreak(uint64,uint64)uint64\", method \"testDoContinue(uint64,uint64)uint64\""
    },
    "34": {
      "op": "txna ApplicationArgs 0"
    },
    "37": {
      "op": "match main_testDo_route@3 main_testDoBreak_route@4 main_testDoContinue_route@5"
    },
    "45": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "return"
    },
    "47": {
      "block": "main_testDoContinue_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "49": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "53": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "54": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "57": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "58": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "61": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "62": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoContinue",
      "op": "callsub testDoContinue",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "65": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "66": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "67": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "68": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "69": {
      "op": "log",
      "stack_out": []
    },
    "70": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "return"
    },
    "72": {
      "block": "main_testDoBreak_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "74": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "75": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "78": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "79": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "82": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "86": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "87": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoBreak",
      "op": "callsub testDoBreak",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "90": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "91": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "93": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "94": {
      "op": "log",
      "stack_out": []
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return"
    },
    "97": {
      "block": "main_testDo_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "99": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "104": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "107": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "108": {
      "callsub": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDo",
      "op": "callsub testDo",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "111": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "112": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "115": {
      "op": "log",
      "stack_out": []
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return"
    },
    "118": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "120": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID"
    },
    "125": {
      "op": "!"
    },
    "126": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "127": {
      "op": "intc_0 // 1"
    },
    "128": {
      "op": "return"
    },
    "129": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDo",
      "params": {
        "stop#0": "uint64"
      },
      "block": "testDo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "132": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "133": {
      "block": "testDo_while_top@1",
      "stack_in": [
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "1"
      ]
    },
    "134": {
      "op": "+",
      "stack_out": [
        "i#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "138": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "bnz testDo_while_top@1",
      "stack_out": [
        "i#0"
      ]
    },
    "142": {
      "retsub": true,
      "op": "retsub"
    },
    "143": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoBreak",
      "params": {
        "stop#0": "uint64",
        "breakMod#0": "uint64"
      },
      "block": "testDoBreak",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "146": {
      "op": "intc_1 // 0"
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "148": {
      "block": "testDoBreak_while_top@1",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "150": {
      "op": "bz testDoBreak_after_if_else@5",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "153": {
      "op": "frame_dig 1"
    },
    "155": {
      "op": "frame_dig -1"
    },
    "157": {
      "op": "%"
    },
    "158": {
      "op": "bz testDoBreak_block@9"
    },
    "161": {
      "block": "testDoBreak_after_if_else@5",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "164": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "165": {
      "op": "dup",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "i#0"
      ]
    },
    "166": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "168": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0"
      ]
    },
    "170": {
      "op": "dig 1",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0",
        "i#0 (copy)"
      ]
    },
    "172": {
      "op": "+",
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "total#0"
      ]
    },
    "173": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0"
      ]
    },
    "175": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "177": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "178": {
      "op": "bnz testDoBreak_while_top@1",
      "stack_out": [
        "total#0",
        "i#0"
      ]
    },
    "181": {
      "block": "testDoBreak_block@9",
      "stack_in": [
        "total#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "i#0",
        "total#0"
      ]
    },
    "182": {
      "subroutine": "tests/approvals/do-loops.algo.ts::DoLoopsAlgo.testDoContinue",
      "params": {
        "stop#0": "uint64",
        "mod#0": "uint64"
      },
      "block": "testDoContinue",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "185": {
      "op": "intc_1 // 0"
    },
    "186": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "187": {
      "block": "testDoContinue_while_top@1",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "189": {
      "op": "bz testDoContinue_after_if_else@5",
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "192": {
      "op": "frame_dig 0"
    },
    "194": {
      "op": "frame_dig -1"
    },
    "196": {
      "op": "%"
    },
    "197": {
      "op": "bnz testDoContinue_after_if_else@5"
    },
    "200": {
      "op": "frame_dig 1"
    },
    "202": {
      "op": "pushint 2 // 2"
    },
    "204": {
      "op": "+"
    },
    "205": {
      "op": "frame_bury 1"
    },
    "207": {
      "op": "frame_dig 0"
    },
    "209": {
      "op": "intc_0 // 1"
    },
    "210": {
      "op": "+"
    },
    "211": {
      "op": "frame_bury 0"
    },
    "213": {
      "block": "testDoContinue_block@6",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "215": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "stop#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "stop#0 (copy)"
      ]
    },
    "217": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "tmp%3#0"
      ]
    },
    "218": {
      "op": "bnz testDoContinue_while_top@1",
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "221": {
      "op": "frame_dig 1"
    },
    "223": {
      "op": "frame_bury 0"
    },
    "225": {
      "retsub": true,
      "op": "retsub"
    },
    "226": {
      "block": "testDoContinue_after_if_else@5",
      "stack_in": [
        "i#0",
        "total#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "total#0",
        "1"
      ]
    },
    "229": {
      "op": "+",
      "stack_out": [
        "i#0",
        "total#0",
        "total#0"
      ]
    },
    "230": {
      "op": "frame_bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "232": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "234": {
      "op": "intc_0 // 1",
      "stack_out": [
        "i#0",
        "total#0",
        "i#0",
        "1"
      ]
    },
    "235": {
      "op": "+",
      "stack_out": [
        "i#0",
        "total#0",
        "i#0"
      ]
    },
    "236": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "i#0",
        "total#0"
      ]
    },
    "238": {
      "op": "b testDoContinue_block@6"
    }
  }
}