main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testVectorCreationAndEquality()void" => block@3, method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)" => block@4, method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)" => block@5, method "implicitCastingAndSpreading((uint64,uint64))void" => block@6, method "testNestedObjects(((uint64,uint64),(uint64,uint64)))void" => block@7, method "testMethodSelector()void" => block@8, method "testAssertMatch(uint64)void" => block@9, method "testArc4Encoding((uint64,uint64))void" => block@10, method "getPlugin(string)(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@11, method "getMain()(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])" => block@12, method "setPlugin(string)void" => block@13, * => block@20}
    block@3: // testVectorCreationAndEquality_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality()
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@21
    block@4: // addVectors_route_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let tmp%11#0: Encoded(uint64,uint64) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(reinterpret_Encoded(uint64,uint64)%0#0, reinterpret_Encoded(uint64,uint64)%1#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@21
    block@5: // mutateVector_route_L28
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%17#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%18#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%19#0: Encoded(uint64,uint64) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(reinterpret_Encoded(uint64,uint64)%2#0, tmp%17#0, tmp%18#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
        (log tmp%20#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@21
    block@6: // implicitCastingAndSpreading_route_L34
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(reinterpret_Encoded(uint64,uint64)%3#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@21
    block@7: // testNestedObjects_route_L49
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@21
    block@8: // testMethodSelector_route_L60
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5: bool = 1u
        goto block@21
    block@9: // testAssertMatch_route_L75
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%37#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(tmp%37#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6: bool = 1u
        goto block@21
    block@10: // testArc4Encoding_route_L92
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%4#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(reinterpret_Encoded(uint64,uint64)%4#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7: bool = 1u
        goto block@21
    block@11: // getPlugin_route_L107
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%46#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%47#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(tmp%46#0)
        let tmp%48#0: bytes = (concat 0x151f7c75 tmp%47#0)
        (log tmp%48#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8: bool = 1u
        goto block@21
    block@12: // getMain_route_L113
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        let tmp%53#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain()
        let tmp%54#0: bytes = (concat 0x151f7c75 tmp%53#0)
        (log tmp%54#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9: bool = 1u
        goto block@21
    block@13: // setPlugin_route_L123
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%59#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(tmp%59#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10: bool = 1u
        goto block@21
    block@16: // bare_routing_L12
        let tmp%60#0: uint64 = (txn OnCompletion)
        goto tmp%60#0 ? block@20 : block@17
    block@17: // __algots__.defaultCreate_L12
        let tmp%61#0: uint64 = (txn ApplicationID)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // can only call when creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11: bool = 1u
        goto block@21
    block@20: // after_if_else_L12
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12: bool = 0u
        goto block@21
    block@21: // after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#11 <- block@17, tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#12 <- block@20)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = Ï†(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = Ï†(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = Ï†(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = Ï†(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = Ï†(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = Ï†(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = Ï†(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality() -> void:
    block@0: // L13
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let v1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 v1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%1#0: bytes[8] = (itob values%0#0)
        (log tmp%1#0)
        let aggregate%extract%1#0: bytes = (extract3 v1#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%2#0: bytes[8] = (itob values%1#0)
        (log tmp%2#0)
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(v1: Encoded(uint64,uint64), v2: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L21
        let aggregate%extract%0#0: bytes = (extract3 v1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 v2#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#0: uint64 = (+ values%0#0 values%1#0)
        let aggregate%extract%2#0: bytes = (extract3 v1#0 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%extract%3#0: bytes = (extract3 v2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let tmp%1#0: uint64 = (+ values%2#0 values%3#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%2#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        return tmp%2#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(v1: Encoded(uint64,uint64), newX: uint64, newY: uint64) -> Encoded(uint64,uint64):
    block@0: // L28
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob newX#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 v1#0 0u 8u)
        let aggregate%updated_data%0#0: bytes = (replace3 v1#0 0u encoded_value%0#0)
        let v1#1: Encoded(uint64,uint64) = aggregate%updated_data%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob newY#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%extract%1#0: bytes = (extract3 v1#1 8u 8u)
        let aggregate%updated_data%1#0: bytes = (replace3 v1#1 8u encoded_value%1#0)
        let v1#2: Encoded(uint64,uint64) = aggregate%updated_data%1#0
        return v1#2

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(v1: Encoded(uint64,uint64)) -> void:
    block@0: // L34
        let aggregate%extract%0#0: bytes = (extract3 v1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 v1#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let v3#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%2#0: bytes = (extract3 v3#0 0u 8u)
        let tuple_item%10#0: Encoded(uint64) = aggregate%extract%2#0
        let x#0: uint64 = (btoi tuple_item%10#0)
        let tmp%6#0: bool = (== x#0 values%0#0)
        (assert tmp%6#0)
        let aggregate%extract%3#0: bytes = (extract3 v3#0 8u 8u)
        let tuple_item%12#0: Encoded(uint64) = aggregate%extract%3#0
        let y#0: uint64 = (btoi tuple_item%12#0)
        let tmp%7#0: bool = (== y#0 values%1#0)
        (assert tmp%7#0)
        let tmp%10#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%10#0) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testNestedObjects(vp: Encoded((uint64,uint64),(uint64,uint64))) -> void:
    block@0: // L49
        let aggregate%extract%0#0: bytes = (extract3 vp#0 0u 16u)
        let aggregate%extract%1#0: bytes = (extract3 aggregate%extract%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%0#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 vp#0 0u 16u)
        let aggregate%extract%3#0: bytes = (extract3 aggregate%extract%2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%1#0: uint64 = (btoi tuple_item%3#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let v1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%4#0: bytes = (extract3 vp#0 16u 16u)
        let aggregate%extract%5#0: bytes = (extract3 aggregate%extract%4#0 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%5#0
        let values%2#0: uint64 = (btoi tuple_item%5#0)
        let aggregate%extract%6#0: bytes = (extract3 vp#0 16u 16u)
        let aggregate%extract%7#0: bytes = (extract3 aggregate%extract%6#0 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = aggregate%extract%7#0
        let values%3#0: uint64 = (btoi tuple_item%7#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob values%2#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let p1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%head%4#0: bytes = (concat 0x v1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 p1#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%5#0
        let vp1#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0
        let aggregate%extract%8#0: bytes = (extract3 vp1#0 0u 16u)
        let aggregate%extract%9#0: bytes = (extract3 aggregate%extract%8#0 0u 8u)
        let tuple_item%9#0: Encoded(uint64) = aggregate%extract%9#0
        let values%4#0: uint64 = (btoi tuple_item%9#0)
        let tmp%3#0: bytes[8] = (itob values%4#0)
        (log tmp%3#0)
        let aggregate%extract%10#0: bytes = (extract3 vp1#0 0u 16u)
        let aggregate%extract%11#0: bytes = (extract3 aggregate%extract%10#0 8u 8u)
        let tuple_item%11#0: Encoded(uint64) = aggregate%extract%11#0
        let values%5#0: uint64 = (btoi tuple_item%11#0)
        let tmp%4#0: bytes[8] = (itob values%5#0)
        (log tmp%4#0)
        let aggregate%extract%12#0: bytes = (extract3 vp1#0 16u 16u)
        let aggregate%extract%13#0: bytes = (extract3 aggregate%extract%12#0 0u 8u)
        let tuple_item%13#0: Encoded(uint64) = aggregate%extract%13#0
        let values%6#0: uint64 = (btoi tuple_item%13#0)
        let tmp%5#0: bytes[8] = (itob values%6#0)
        (log tmp%5#0)
        let aggregate%extract%14#0: bytes = (extract3 vp1#0 16u 16u)
        let aggregate%extract%15#0: bytes = (extract3 aggregate%extract%14#0 8u 8u)
        let tuple_item%15#0: Encoded(uint64) = aggregate%extract%15#0
        let values%7#0: uint64 = (btoi tuple_item%15#0)
        let tmp%6#0: bytes[8] = (itob values%7#0)
        (log tmp%6#0)
        let tmp%7#0: bool = (== values%4#0 values%0#0)
        let tmp%8#0: bool = (== values%5#0 values%1#0)
        let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
        let tmp%10#0: bool = (== values%7#0 values%3#0)
        let tmp%11#0: bool = (== values%6#0 values%2#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let tmp%13#0: bool = (&& tmp%9#0 tmp%12#0)
        (assert tmp%13#0) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testAssertMatch(x: uint64) -> void:
    block@0: // L75
        let b#0: uint64 = (* x#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let obj#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 obj#0 8u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%3#0: bool = (== values%0#0 b#0)
        let aggregate%extract%1#0: bytes = (extract3 obj#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%5#0: bool = (== values%1#0 b#0)
        let tmp%6#0: bool = (&& tmp%3#0 tmp%5#0)
        (assert tmp%6#0) // assert target is match for conditions
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let v#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%extract%2#0: bytes = (extract3 v#0 8u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%2#0
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let tmp%8#0: bool = (== values%1#0 values%5#0)
        let aggregate%extract%3#0: bytes = (extract3 v#0 0u 8u)
        let tuple_item%7#0: Encoded(uint64) = aggregate%extract%3#0
        let values%7#0: uint64 = (btoi tuple_item%7#0)
        let tmp%9#0: bool = (== values%0#0 values%7#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // assert target is match for conditions
        let tmp%11#0: bool = (> values%0#0 x#0)
        (assert tmp%11#0) // assert target is match for conditions
        let tmp%12#0: bool = (> values%1#0 x#0)
        (assert tmp%12#0) // assert target is match for conditions
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testArc4Encoding(p: Encoded(uint64,uint64)) -> void:
    block@0: // L92
        let aggregate%extract%0#0: bytes = (extract3 p#0 8u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 p#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#0: bool = (!= values%0#0 values%1#0)
        (assert tmp%0#0) // For the purpose of this test, a should not equal b
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let obj#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let length%0#0: uint64 = (len obj#0)
        let is_out_of_bounds%0#0: bool = (>= 8u length%0#0)
        let bounded_index%0#0: uint64 = (select 8u length%0#0 is_out_of_bounds%0#0)
        let tmp%2#0: bytes = (substring3 obj#0 bounded_index%0#0 length%0#0)
        let is_out_of_bounds%1#0: bool = (>= 0u length%0#0)
        let bounded_index%1#0: uint64 = (select 0u length%0#0 is_out_of_bounds%1#0)
        let tmp%3#0: bytes = (substring3 obj#0 bounded_index%1#0 bounded_index%0#0)
        let tmp%4#0: bytes = (concat tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (== p#0 tmp%4#0)
        (assert tmp%5#0) // Encoded order should be swapped
        return 

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(key: string) -> Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])):
    block@0: // L107
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // Box must have value
        let value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%box_get%0#0
        let box%box_extract%0#0: Encoded(uint64) = (box_extract box_prefixed_key%0#0 16u 8u)
        let tmp%0#0: uint64 = (btoi box%box_extract%0#0)
        (assert tmp%0#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain() -> Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])):
    block@0: // L113
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "main")
        (assert aggregate%box_get%1#0) // Box must have value
        let value#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%box_get%0#0
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "main" 16u 8u)
        let tmp%0#0: uint64 = (btoi box%box_extract%0#0)
        (assert tmp%0#0) // Last called not zero
        return value#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: string) -> void:
    block@0: // L123
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%length%0#0: uint64 = (len method "test()void")
        let aggregate%lengths_equal%0#0: bool = (== aggregate%length%0#0 4u)
        (assert aggregate%lengths_equal%0#0) // invalid size
        let aggregate%as_Encoded(uint8[4])%0#0: Encoded(uint8[4]) = method "test()void"
        let tmp%1#0: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x0000000000000001)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x0000000000000001)
        let aggregate%as_Encoded(uint8[4],uint64,uint64)%0#0: Encoded(uint8[4],uint64,uint64) = aggregate%head%2#0
        let tmp%2#0: Encoded(uint8[4],uint64,uint64) = aggregate%as_Encoded(uint8[4],uint64,uint64)%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%0#0 tmp%2#0)
        let aggregate%as_Encoded(len+(uint8[4],uint64,uint64)[])%0#0: Encoded(len+(uint8[4],uint64,uint64)[]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(len+(uint8[4],uint64,uint64)[]) = aggregate%as_Encoded(len+(uint8[4],uint64,uint64)[])%0#0
        let aggregate%head%4#0: bytes = (concat 0x 0x0000000000000001)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x0000000000000000)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x0000000000000000)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 tmp%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 27u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len encoded_array%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 27u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%8#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[]))%0#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%concat%0#0
        let tmp%3#0: Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[])) = aggregate%as_Encoded(uint64,uint64,uint64,bool1,(len+(uint8[4],uint64,uint64)[]))%0#0
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 tmp%3#0)
        return 