#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8 16
    bytecblock 0x151f7c75 "plugins"
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@12
    pushbytess 0x89388ddd 0xef322d6d 0x02458807 0xcb81deb8 0x95d82d6f 0x86bb6481 0xa9bc61f1 // method "testVectorCreationAndEquality()void", method "addVectors((uint64,uint64),(uint64,uint64))(uint64,uint64)", method "mutateVector((uint64,uint64),uint64,uint64)(uint64,uint64)", method "implicitCastingAndSpreading((uint64,uint64))void", method "getPlugin(string)(uint64,uint64,uint64,bool)", method "getMain()(uint64,uint64,uint64,bool)", method "setPlugin(string)void"
    txna ApplicationArgs 0
    match main_testVectorCreationAndEquality_route@3 main_addVectors_route@4 main_mutateVector_route@5 main_implicitCastingAndSpreading_route@6 main_getPlugin_route@7 main_getMain_route@8 main_setPlugin_route@9

main_after_if_else@16:
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    intc_1 // 0
    return

main_setPlugin_route@9:
    // tests/approvals/mutable-object.algo.ts:61
    // public setPlugin(key: string) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:61
    // public setPlugin(key: string) {
    callsub setPlugin
    intc_0 // 1
    return

main_getMain_route@8:
    // tests/approvals/mutable-object.algo.ts:51
    // public getMain() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getMain
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getPlugin_route@7:
    // tests/approvals/mutable-object.algo.ts:45
    // public getPlugin(key: string): PluginInfo {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/mutable-object.algo.ts:45
    // public getPlugin(key: string): PluginInfo {
    callsub getPlugin
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_implicitCastingAndSpreading_route@6:
    // tests/approvals/mutable-object.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/mutable-object.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    callsub implicitCastingAndSpreading
    intc_0 // 1
    return

main_mutateVector_route@5:
    // tests/approvals/mutable-object.algo.ts:26
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/approvals/mutable-object.algo.ts:26
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    callsub mutateVector
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_addVectors_route@4:
    // tests/approvals/mutable-object.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/mutable-object.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    callsub addVectors
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_testVectorCreationAndEquality_route@3:
    // tests/approvals/mutable-object.algo.ts:11
    // public testVectorCreationAndEquality() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub testVectorCreationAndEquality
    intc_0 // 1
    return

main_bare_routing@12:
    // tests/approvals/mutable-object.algo.ts:10
    // export class MutableObjectDemo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@16
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.testVectorCreationAndEquality() -> void:
testVectorCreationAndEquality:
    // tests/approvals/mutable-object.algo.ts:12
    // const v1 = new Vector({ x: 0, y: 0 })
    intc_1 // 0
    itob
    // tests/approvals/mutable-object.algo.ts:13
    // log(v1.x)
    dup
    log
    // tests/approvals/mutable-object.algo.ts:14
    // log(v1.y)
    log
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.addVectors(v1: bytes, v2: bytes) -> bytes:
addVectors:
    // tests/approvals/mutable-object.algo.ts:19
    // public addVectors(v1: Vector, v2: Vector) {
    proto 2 1
    // tests/approvals/mutable-object.algo.ts:21
    // x: v1.x + v2.x,
    frame_dig -2
    intc_1 // 0
    extract_uint64
    frame_dig -1
    intc_1 // 0
    extract_uint64
    +
    // tests/approvals/mutable-object.algo.ts:22
    // y: v1.y + v2.y,
    frame_dig -2
    intc_2 // 8
    extract_uint64
    frame_dig -1
    intc_2 // 8
    extract_uint64
    +
    // tests/approvals/mutable-object.algo.ts:21
    // x: v1.x + v2.x,
    swap
    itob
    // tests/approvals/mutable-object.algo.ts:22
    // y: v1.y + v2.y,
    swap
    itob
    // tests/approvals/mutable-object.algo.ts:20-23
    // return new Vector({
    //   x: v1.x + v2.x,
    //   y: v1.y + v2.y,
    // })
    concat
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.mutateVector(v1: bytes, newX: uint64, newY: uint64) -> bytes:
mutateVector:
    // tests/approvals/mutable-object.algo.ts:26
    // public mutateVector(v1: Vector, newX: uint64, newY: uint64): Vector {
    proto 3 1
    // tests/approvals/mutable-object.algo.ts:27
    // v1.x = newX
    frame_dig -2
    itob
    frame_dig -3
    swap
    replace2 0
    frame_bury -3
    // tests/approvals/mutable-object.algo.ts:28
    // v1.y = newY
    frame_dig -1
    itob
    frame_dig -3
    swap
    replace2 8
    dup
    frame_bury -3
    // tests/approvals/mutable-object.algo.ts:29
    // return v1
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.implicitCastingAndSpreading(v1: bytes) -> void:
implicitCastingAndSpreading:
    // tests/approvals/mutable-object.algo.ts:32
    // public implicitCastingAndSpreading(v1: Vector) {
    proto 1 0
    // tests/approvals/mutable-object.algo.ts:33
    // const v2 = new Vector(v1)
    frame_dig -1
    intc_1 // 0
    extract_uint64
    frame_dig -1
    intc_2 // 8
    extract_uint64
    dig 1
    itob
    dig 1
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:34
    // const v3 = new Vector({ ...v2 })
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    dig 1
    itob
    dig 1
    itob
    concat
    // tests/approvals/mutable-object.algo.ts:35
    // assert(v1.x === v2.x)
    dig 4
    uncover 3
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:36
    // assert(v1.y === v2.y)
    dig 2
    uncover 2
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:37
    // assert(v3.x === v1.x)
    dup
    intc_1 // 0
    extract_uint64
    uncover 3
    ==
    assert
    // tests/approvals/mutable-object.algo.ts:38
    // assert(v3.y === v1.y)
    intc_2 // 8
    extract_uint64
    ==
    assert
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getPlugin(key: bytes) -> bytes:
getPlugin:
    // tests/approvals/mutable-object.algo.ts:45
    // public getPlugin(key: string): PluginInfo {
    proto 1 1
    // tests/approvals/mutable-object.algo.ts:41
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    frame_dig -1
    concat
    // tests/approvals/mutable-object.algo.ts:46
    // const value = this.plugins(key).value.copy()
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:47
    // assert(value.lastCalled.native > 0, 'Last called not zero')
    dup
    intc_3 // 16
    extract_uint64
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:48
    // return value
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.getMain() -> bytes:
getMain:
    // tests/approvals/mutable-object.algo.ts:43
    // plugin = Box<PluginInfo>({ key: 'main' })
    pushbytes "main"
    // tests/approvals/mutable-object.algo.ts:52
    // const value = this.plugin.value.copy()
    box_get
    assert // Box must have value
    // tests/approvals/mutable-object.algo.ts:53
    // assert(value.lastCalled.native > 0, 'Last called not zero')
    dup
    intc_3 // 16
    extract_uint64
    assert // Last called not zero
    // tests/approvals/mutable-object.algo.ts:54
    // return value
    retsub


// tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: bytes) -> void:
setPlugin:
    // tests/approvals/mutable-object.algo.ts:61
    // public setPlugin(key: string) {
    proto 1 0
    // tests/approvals/mutable-object.algo.ts:41
    // plugins = BoxMap<string, PluginInfo>({ keyPrefix: 'plugins' })
    bytec_1 // "plugins"
    frame_dig -1
    concat
    // tests/approvals/mutable-object.algo.ts:62-74
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: new arc4.UintN64(1),
    //   cooldown: new arc4.UintN64(),
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: new arc4.Bool(false),
    //   //   methods: [
    //   //     new MethodInfo({
    //   //       selector: new arc4.StaticBytes(methodSelector('test()void')),
    //   //       cooldown: new arc4.UintN64(1),
    //   //       lastCalled: new arc4.UintN64(1),
    //   //     }),
    //   //   ],
    // })
    pushbytes 0x00000000000000010000000000000000000000000000000000
    box_put
    retsub
