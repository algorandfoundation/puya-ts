{
    "name": "MutableObjectDemo",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "Point": [
            {
                "name": "y",
                "type": "uint64"
            },
            {
                "name": "x",
                "type": "uint64"
            }
        ],
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ],
        "VectorPoint": [
            {
                "name": "v",
                "type": "Vector"
            },
            {
                "name": "p",
                "type": "Point"
            }
        ]
    },
    "methods": [
        {
            "name": "testVectorCreationAndEquality",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addVectors",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v2"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutateVector",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                },
                {
                    "type": "uint64",
                    "name": "newX"
                },
                {
                    "type": "uint64",
                    "name": "newY"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "Vector"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "implicitCastingAndSpreading",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "v1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testNestedObjects",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "struct": "VectorPoint",
                    "name": "vp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testMethodSelector",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testAssertMatch",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testArc4Encoding",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Point",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMain",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,bool,(byte[4],uint64,uint64)[])",
                "struct": "PluginInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "plugin": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "bWFpbg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "prefix": "cGx1Z2lucw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        515,
                        530
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        492
                    ],
                    "errorMessage": "Encoded order should be swapped"
                },
                {
                    "pc": [
                        449
                    ],
                    "errorMessage": "For the purpose of this test, a should not equal b"
                },
                {
                    "pc": [
                        521,
                        536
                    ],
                    "errorMessage": "Last called not zero"
                },
                {
                    "pc": [
                        35
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        133
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        263,
                        367,
                        403,
                        424,
                        429,
                        431
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "invalid number of bytes for ((uint64,uint64),(uint64,uint64))"
                },
                {
                    "pc": [
                        506,
                        556
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        150,
                        158,
                        195,
                        232,
                        439
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64)"
                },
                {
                    "pc": [
                        203,
                        211,
                        375
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAECAABECYDBBUffHUHcGx1Z2lucwRtYWluMRtBAF4xGRREMRhEggsEiTiN3QTvMi1tBAJFiAcEy4HeuAS6J6m6BC9nClUE1MgfWwT0g1wjBDgU+SoEAHpMsASpvGHxNhoAjgsACwAUAEEAZgCNAAEA9QE1AXIBlQGkACRDMRkUMRgUEEMjFiQWTLCwJEM2GgFJFSUSRDYaAkkVJRJESwEjW0sBI1sITwIiW08CIlsITBZMFlAoTFCwJEM2GgFJFSUSRDYaAkkVIhJENhoDSRUiEkROAlwATFwIKExQsCRDNhoBSRUlEkRJI1tMIltLARZLARZQSSNbTwMSSURMIltPAhJJRBBDNhoBSRWBIBJESVcAEEkjW0wiW0sBFksBFlBPA1cQEEkiW0wjW0sBFksBFlBPA0xQSVcAEEkjW0kWsEwiW0kWsE8CVxAQSSNbSRawTCJbSRawTwNPBxJPA08GEhBMTwMSTwJPAxIQEEM2GgFJFSISRBdJgQILSRZJUEkiW0lLAxJPAiNbSU8EEk8CEERLARZLARZQSSJbSwISTCNbSwMSEERMSwINRAxDNhoBSRUlEkRJIltLASNbShNETBZMFlBJFSJLAQ8iSwJPAk1LAksBSwNSI0sDDyNPBE8CTU8DTE8DUlASQzYaAUkjWYECCEsBFRJEVwIAKUxQSb5ETCUiuhdEKExQsCRDKr5EKiUiuhdEKExQsCRDNhoBSSNZgQIISwEVEkRXAgApTFBJvEiAMQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAGwABp4AA3gAAAAAAAAABAAAAAAAAAAG/JEM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}