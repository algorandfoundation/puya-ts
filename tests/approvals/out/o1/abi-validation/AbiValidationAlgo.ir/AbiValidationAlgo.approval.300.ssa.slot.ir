main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "withValidation(byte[32])uint64" => block@3, method "withoutValidation(byte[32])uint64" => block@4, method "defaultValidation(byte[32])uint64" => block@5, method "manualValidationAfterConvert(byte[])uint64" => block@6, * => block@13}
    block@3: // withValidation_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let value_len%0#0: uint64 = (len tmp%7#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 32u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let to_encode%0#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation(tmp%7#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%8#0)
        let tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // withoutValidation_route_L12
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let tmp%13#0: bytes = (txna ApplicationArgs 1)
        let to_encode%1#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation(tmp%13#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%14#0)
        let tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // defaultValidation_route_L17
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let tmp%19#0: bytes = (txna ApplicationArgs 1)
        let value_len%1#0: uint64 = (len tmp%19#0)
        let size_is_correct%1#0: bool = (== value_len%1#0 32u)
        (assert size_is_correct%1#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let to_encode%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation(tmp%19#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%20#0)
        let tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // manualValidationAfterConvert_route_L21
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let tmp%25#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = (extract_uint16 tmp%25#0 0u) // on error: invalid array length header
        let num_bytes_with_header%0#0: uint64 = (+ length%0#0 2u)
        let value_len%2#0: uint64 = (len tmp%25#0)
        let size_is_correct%2#0: bool = (== value_len%2#0 num_bytes_with_header%0#0)
        (assert size_is_correct%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%26#0: bytes = ((extract 2 0) tmp%25#0)
        let to_encode%3#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert(tmp%26#0)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%3#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%27#0)
        let tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L6
        let tmp%28#0: uint64 = (txn OnCompletion)
        goto tmp%28#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L6
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // can only call when creating
        let tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L6
        let tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation(value: bytes[32]) -> uint64:
    block@0: // L7
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation(value: bytes[32]) -> uint64:
    block@0: // L12
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation(value: bytes[32]) -> uint64:
    block@0: // L17
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert(rawBytes: bytes) -> uint64:
    block@0: // L21
        let value_len%0#0: uint64 = (len rawBytes#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 32u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        return value_len%0#0