main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@12
    block@2: // abi_routing_L6
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "withValidation(byte[32])uint64" => block@4, method "withoutValidation(byte[32])uint64" => block@5, method "defaultValidation(byte[32])uint64" => block@6, method "manualValidationInConvert(byte[])uint64" => block@7, method "manualValidationAfterConvert(byte[])uint64" => block@8, * => block@11}
    block@4: // withValidation_route_L7
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation[routing]()
        goto block@11
    block@5: // withoutValidation_route_L11
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation[routing]()
        goto block@11
    block@6: // defaultValidation_route_L16
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation[routing]()
        goto block@11
    block@7: // manualValidationInConvert_route_L20
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationInConvert[routing]()
        goto block@11
    block@8: // manualValidationAfterConvert_route_L25
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert[routing]()
        goto block@11
    block@11: // after_if_else_L6
        fail
    block@12: // __algots__.defaultCreate_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation[routing]() -> void:
    block@0: // L7
        let value#0: bytes[32] = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob len%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation[routing]() -> void:
    block@0: // L11
        let value#0: bytes[32] = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = (len value#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation[routing]() -> void:
    block@0: // L16
        let value#0: bytes[32] = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob len%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationInConvert[routing]() -> void:
    block@0: // L20
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let rawBytes#0: bytes = ((extract 2 0) tmp%0#0)
        let len%0#1: uint64 = (len rawBytes#0)
        let eq%0#1: bool = (== len%0#1 32u)
        (assert eq%0#1) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        (log 0x151f7c750000000000000020)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert[routing]() -> void:
    block@0: // L25
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let rawBytes#0: bytes = ((extract 2 0) tmp%0#0)
        let len%0#1: uint64 = (len rawBytes#0)
        let eq%0#1: bool = (== len%0#1 32u)
        (assert eq%0#1) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        (log 0x151f7c750000000000000020)
        exit 1u