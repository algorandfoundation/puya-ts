main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__puya_arc4_router__() -> bool:
    block@0: // L6
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@12
    block@1: // abi_routing_L6
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@10
    block@2: // call_NoOp_L6
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "withValidation(byte[32])uint64" => block@3, method "withoutValidation(byte[32])uint64" => block@4, method "defaultValidation(byte[32])uint64" => block@5, method "manualValidation(byte[32])uint64" => block@6, method "manualValidationInConvert(byte[])uint64" => block@7, method "manualValidationAfterConvert(byte[])uint64" => block@8, * => block@9}
    block@3: // withValidation_route_L7
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation[routing]()
        goto block@9
    block@4: // withoutValidation_route_L11
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation[routing]()
        goto block@9
    block@5: // defaultValidation_route_L16
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation[routing]()
        goto block@9
    block@6: // manualValidation_route_L20
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidation[routing]()
        goto block@9
    block@7: // manualValidationInConvert_route_L26
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationInConvert[routing]()
        goto block@9
    block@8: // manualValidationAfterConvert_route_L31
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert[routing]()
        goto block@9
    block@9: // switch_case_next_L6
        goto block@11
    block@10: // create_NoOp_L6
        goto block@11
    block@11: // after_if_else_L6
        goto block@13
    block@12: // __algots__.defaultCreate_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__algots__.defaultCreate()
        exit 1u
    block@13: // after_if_else_L6
        exit 0u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation[routing]() -> void:
    block@0: // L7
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: bytes[32] = decode_bytes<bytes[32]>(as_Encoded(uint8[32])%0#0)
        let tmp%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation[routing]() -> void:
    block@0: // L11
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: bytes[32] = decode_bytes<bytes[32]>(as_Encoded(uint8[32])%0#0)
        let tmp%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation[routing]() -> void:
    block@0: // L16
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: bytes[32] = decode_bytes<bytes[32]>(as_Encoded(uint8[32])%0#0)
        let tmp%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidation[routing]() -> void:
    block@0: // L20
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: bytes[32] = decode_bytes<bytes[32]>(as_Encoded(uint8[32])%0#0)
        let tmp%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidation(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationInConvert[routing]() -> void:
    block@0: // L26
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationInConvert(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert[routing]() -> void:
    block@0: // L31
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: uint64 = tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withValidation(value: bytes[32]) -> uint64:
    block@0: // L7
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.withoutValidation(value: bytes[32]) -> uint64:
    block@0: // L11
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.defaultValidation(value: bytes[32]) -> uint64:
    block@0: // L16
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidation(value: bytes[32]) -> uint64:
    block@0: // L20
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = value#0
        let tmp%0#0: uint64 = (len value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationInConvert(rawBytes: bytes) -> uint64:
    block@0: // L26
        let len%0#0: uint64 = (len rawBytes#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = rawBytes#0
        let value#0: Encoded(uint8[32]) = as_Encoded(uint8[32])%0#0
        let tmp%0#0: uint64 = array_len(value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.manualValidationAfterConvert(rawBytes: bytes) -> uint64:
    block@0: // L31
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = rawBytes#0
        let value#0: Encoded(uint8[32]) = as_Encoded(uint8[32])%0#0
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%0#0: uint64 = array_len(value#0)
        return tmp%0#0

subroutine tests/approvals/abi-validation.algo.ts::AbiValidationAlgo.__algots__.defaultCreate() -> void:
    block@0: // L6
        return 