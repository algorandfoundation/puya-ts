#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 2 3
    bytecblock 0x151f7c75
    // tests/approvals/resource-encoding.algo.ts:38
    // class EchoResource extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x77e28d74 0x4d370276 // method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)", method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)"
    txna ApplicationArgs 0
    match main_echoResourceByIndex_route@3 main_echoResourceByValue_route@4

main_after_if_else@11:
    // tests/approvals/resource-encoding.algo.ts:38
    // class EchoResource extends Contract {
    pushint 0 // 0
    return

main_echoResourceByValue_route@4:
    // tests/approvals/resource-encoding.algo.ts:50
    // @abimethod({ resourceEncoding: 'value' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:38
    // class EchoResource extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // tests/approvals/resource-encoding.algo.ts:50
    // @abimethod({ resourceEncoding: 'value' })
    callsub echoResourceByValue
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echoResourceByIndex_route@3:
    // tests/approvals/resource-encoding.algo.ts:39
    // @abimethod({ resourceEncoding: 'index' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:38
    // class EchoResource extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Applications
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // tests/approvals/resource-encoding.algo.ts:39
    // @abimethod({ resourceEncoding: 'index' })
    callsub echoResourceByIndex
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    // tests/approvals/resource-encoding.algo.ts:38
    // class EchoResource extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByIndex(asset: uint64, app: uint64, acc: bytes) -> bytes:
echoResourceByIndex:
    // tests/approvals/resource-encoding.algo.ts:39-40
    // @abimethod({ resourceEncoding: 'index' })
    // echoResourceByIndex(asset: Asset, app: Application, acc: Account): [Asset, Application, Account] {
    proto 3 1
    // tests/approvals/resource-encoding.algo.ts:41
    // const assetIdx = op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/approvals/resource-encoding.algo.ts:42
    // assert(asset === Txn.assets(assetIdx), 'expected asset to be passed by index')
    txnas Assets
    frame_dig -3
    ==
    assert // expected asset to be passed by index
    // tests/approvals/resource-encoding.algo.ts:43
    // const appIdx = op.btoi(Txn.applicationArgs(2))
    intc_1 // 2
    txnas ApplicationArgs
    btoi
    // tests/approvals/resource-encoding.algo.ts:44
    // assert(app === Txn.applications(appIdx), 'expected application to be passed by index')
    txnas Applications
    frame_dig -2
    ==
    assert // expected application to be passed by index
    // tests/approvals/resource-encoding.algo.ts:45
    // const accIdx = op.btoi(Txn.applicationArgs(3))
    intc_2 // 3
    txnas ApplicationArgs
    btoi
    // tests/approvals/resource-encoding.algo.ts:46
    // assert(acc === Txn.accounts(accIdx), 'expected account to be passed by index')
    txnas Accounts
    frame_dig -1
    ==
    assert // expected account to be passed by index
    // tests/approvals/resource-encoding.algo.ts:47
    // return [asset, app, acc] as const
    frame_dig -3
    itob
    frame_dig -2
    itob
    concat
    frame_dig -1
    concat
    retsub


// tests/approvals/resource-encoding.algo.ts::EchoResource.echoResourceByValue(asset: uint64, app: uint64, acc: bytes) -> bytes:
echoResourceByValue:
    // tests/approvals/resource-encoding.algo.ts:50-51
    // @abimethod({ resourceEncoding: 'value' })
    // echoResourceByValue(asset: Asset, app: Application, acc: Account): [Asset, Application, Account] {
    proto 3 1
    // tests/approvals/resource-encoding.algo.ts:52
    // const assetId = op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/approvals/resource-encoding.algo.ts:53
    // assert(asset === Asset(assetId), 'expected asset to be passed by value')
    frame_dig -3
    ==
    assert // expected asset to be passed by value
    // tests/approvals/resource-encoding.algo.ts:54
    // const appId = op.btoi(Txn.applicationArgs(2))
    intc_1 // 2
    txnas ApplicationArgs
    btoi
    // tests/approvals/resource-encoding.algo.ts:55
    // assert(app === Application(appId), 'expected application to be passed by value')
    frame_dig -2
    ==
    assert // expected application to be passed by value
    // tests/approvals/resource-encoding.algo.ts:56
    // const address = Txn.applicationArgs(3)
    intc_2 // 3
    txnas ApplicationArgs
    // tests/approvals/resource-encoding.algo.ts:57
    // assert(acc === Account(address), 'expected account to be passed by value')
    frame_dig -1
    ==
    assert // expected account to be passed by value
    // tests/approvals/resource-encoding.algo.ts:58
    // return [asset, app, acc]
    frame_dig -3
    itob
    frame_dig -2
    itob
    concat
    frame_dig -1
    concat
    retsub
