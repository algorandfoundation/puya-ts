#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    bytecblock 0x151f7c75
    // tests/approvals/resource-encoding.algo.ts:42
    // class ByValue extends BaseValue {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xd7308a13 0xd6ce05d0 // method "testExplicitValue(address)uint64", method "testBaseValue(address)uint64"
    txna ApplicationArgs 0
    match main_testExplicitValue_route@3 main_testBaseValue_route@4

main_after_if_else@11:
    // tests/approvals/resource-encoding.algo.ts:42
    // class ByValue extends BaseValue {
    pushint 0 // 0
    return

main_testBaseValue_route@4:
    // tests/approvals/resource-encoding.algo.ts:21
    // @abimethod({ resourceEncoding: 'value' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:42
    // class ByValue extends BaseValue {
    txna ApplicationArgs 1
    // tests/approvals/resource-encoding.algo.ts:21
    // @abimethod({ resourceEncoding: 'value' })
    callsub testBaseValue
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_testExplicitValue_route@3:
    // tests/approvals/resource-encoding.algo.ts:43
    // @abimethod({ resourceEncoding: 'value' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:42
    // class ByValue extends BaseValue {
    txna ApplicationArgs 1
    // tests/approvals/resource-encoding.algo.ts:43
    // @abimethod({ resourceEncoding: 'value' })
    callsub testExplicitValue
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_bare_routing@7:
    // tests/approvals/resource-encoding.algo.ts:42
    // class ByValue extends BaseValue {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// tests/approvals/resource-encoding.algo.ts::ByValue.testExplicitValue(account: bytes) -> uint64:
testExplicitValue:
    // tests/approvals/resource-encoding.algo.ts:43-44
    // @abimethod({ resourceEncoding: 'value' })
    // testExplicitValue(account: Account) {
    proto 1 1
    // tests/approvals/resource-encoding.algo.ts:45
    // return account.balance
    frame_dig -1
    acct_params_get AcctBalance
    assert // account funded
    retsub


// tests/approvals/resource-encoding.algo.ts::BaseValue.testBaseValue(account: bytes) -> uint64:
testBaseValue:
    // tests/approvals/resource-encoding.algo.ts:21-22
    // @abimethod({ resourceEncoding: 'value' })
    // testBaseValue(account: Account) {
    proto 1 1
    // tests/approvals/resource-encoding.algo.ts:23
    // return account.balance
    frame_dig -1
    acct_params_get AcctBalance
    assert // account funded
    retsub
