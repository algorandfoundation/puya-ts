{
    "name": "C2C",
    "structs": {},
    "methods": [
        {
            "name": "testCallToIndex",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testCallToValue",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testCallToEchoResource",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        153,
                        202,
                        512,
                        585
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        53,
                        65,
                        84
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        159,
                        208
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        538,
                        611
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        108
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        56,
                        68,
                        87
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEGBCYCBBUffHUBATEbQQBPggMEE0x2qAQP79b3BOe8D1I2GgCOAwAgAA0AAQAxGRREMRhEiACYI0MxGRREMRhENhoBNhoCF4gAVCNDMRkURDEYRDYaATYaAheIAA0jQzEZQP/IMRgURCNDigIAsYv+shyABDQ1n7ayGimyGov/shgkshAisgGztD5JVwQATFcABCgSRBeL/nMARBJEiYoCALGABNcwihOyGov+shqL/7IYJLIQIrIBs7Q+SVcEAExXAAQoEkQXi/5zAEQSRImxgAQKgQFDskKAwQEKIAMBAgMmAQQVH3x1MRtBAFOCAgR34o10BE03AnY2GgCOAgAcAAEAMRkURDEYRDYaARc2GgIXNhoDiABfKExQsCJDMRkURDEYRDYaARfAMDYaAhfAMjYaAxfAHIgAEShMULAiQzEZQP+9MRgURCJDigMBIsAaF8Awi/0SRCPAGhfAMov+EkQkwBoXwByL/xJEi/0Wi/4WUIv/UImKAwEiwBoXi/0SRCPAGheL/hJEJMAai/8SRIv9Fov+FlCL/1CJskAishkkshAisgGztD2xgARURVNUsiaAAVSyJSOyIoEDshAisgGztDyxMggxALIcSwGyMLIygAR34o10shqAAQCyGimyGimyGiKyGUsBshgkshAisgGztD5JVwAEKBJESSVbSwISIxBLAYEMWzIIEhBMVxQgMQASEESxSRYyCBYxAIAETTcCdrIaTwKyGkyyGrIaIrIZTLIYJLIQIrIBs7Q+SVcABCgSREklW08CEiMQSwGBDFsyCBIQTFcUIDEAEhBEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}