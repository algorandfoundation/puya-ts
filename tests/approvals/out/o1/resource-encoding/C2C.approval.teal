#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6 4
    bytecblock 0x151f7c75 0x01
    // tests/approvals/resource-encoding.algo.ts:62
    // class C2C extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x134c76a8 0x0fefd6f7 0xe7bc0f52 // method "testCallToIndex(address,uint64)void", method "testCallToValue(address,uint64)void", method "testCallToEchoResource()void"
    txna ApplicationArgs 0
    match main_testCallToIndex_route@3 main_testCallToValue_route@4 main_testCallToEchoResource_route@5

main_after_if_else@12:
    err

main_testCallToEchoResource_route@5:
    // tests/approvals/resource-encoding.algo.ts:81
    // testCallToEchoResource() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub testCallToEchoResource
    intc_1 // 1
    return

main_testCallToValue_route@4:
    // tests/approvals/resource-encoding.algo.ts:72
    // testCallToValue(account: Account, appId: Application) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:62
    // class C2C extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/approvals/resource-encoding.algo.ts:72
    // testCallToValue(account: Account, appId: Application) {
    callsub testCallToValue
    intc_1 // 1
    return

main_testCallToIndex_route@3:
    // tests/approvals/resource-encoding.algo.ts:63
    // testCallToIndex(account: Account, appId: Application) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/resource-encoding.algo.ts:62
    // class C2C extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/approvals/resource-encoding.algo.ts:63
    // testCallToIndex(account: Account, appId: Application) {
    callsub testCallToIndex
    intc_1 // 1
    return

main_bare_routing@8:
    // tests/approvals/resource-encoding.algo.ts:62
    // class C2C extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/resource-encoding.algo.ts::C2C.testCallToIndex(account: bytes, appId: uint64) -> void:
testCallToIndex:
    // tests/approvals/resource-encoding.algo.ts:63
    // testCallToIndex(account: Account, appId: Application) {
    proto 2 0
    // tests/approvals/resource-encoding.algo.ts:64-68
    // const { returnValue: res1 } = abiCall({
    //   method: ByIndex.prototype.testExplicitIndex,
    //   appId,
    //   args: [account],
    // })
    itxn_begin
    frame_dig -2
    itxn_field Accounts
    pushbytes 0x34359fb6 // method "testExplicitIndex(account)uint64"
    itxn_field ApplicationArgs
    bytec_1 // 0x01
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    // tests/approvals/resource-encoding.algo.ts:64-68
    // const { returnValue: res1 } = abiCall({
    //   method: ByIndex.prototype.testExplicitIndex,
    //   appId,
    //   args: [account],
    // })
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // tests/approvals/resource-encoding.algo.ts:70
    // assert(res1 === account.balance)
    frame_dig -2
    acct_params_get AcctBalance
    assert // account funded
    ==
    assert
    retsub


// tests/approvals/resource-encoding.algo.ts::C2C.testCallToValue(account: bytes, appId: uint64) -> void:
testCallToValue:
    // tests/approvals/resource-encoding.algo.ts:72
    // testCallToValue(account: Account, appId: Application) {
    proto 2 0
    // tests/approvals/resource-encoding.algo.ts:73-76
    // const { returnValue: res1 } = abiCall<typeof ByValue.prototype.testExplicitValue>({
    //   appId,
    //   args: [account],
    // })
    itxn_begin
    pushbytes 0xd7308a13 // method "testExplicitValue(address)uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // tests/approvals/resource-encoding.algo.ts:78
    // assert(res1 === account.balance)
    frame_dig -2
    acct_params_get AcctBalance
    assert // account funded
    ==
    assert
    retsub


// tests/approvals/resource-encoding.algo.ts::C2C.testCallToEchoResource() -> void:
testCallToEchoResource:
    // tests/approvals/resource-encoding.algo.ts:84
    // const appId = compiled.bareCreate().createdApp
    itxn_begin
    // tests/approvals/resource-encoding.algo.ts:82
    // const compiled = compileArc4(EchoResource)
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiADAQIDJgEEFR98dTEbQQBTggIEd+KNdARNNwJ2NhoAjgIAHAABADEZFEQxGEQ2GgEXNhoCFzYaA4gAXyhMULAiQzEZFEQxGEQ2GgEXwDA2GgIXwDI2GgMXwByIABEoTFCwIkMxGUD/vTEYFEQiQ4oDASLAGhfAMIv9EkQjwBoXwDKL/hJEJMAaF8Aci/8SRIv9Fov+FlCL/1CJigMBIsAaF4v9EkQjwBoXi/4SRCTAGov/EkSL/RaL/hZQi/9QiQ==)
    itxn_field ApprovalProgramPages
    // tests/approvals/resource-encoding.algo.ts:84
    // const appId = compiled.bareCreate().createdApp
    intc_0 // 0
    itxn_field OnCompletion
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // tests/approvals/resource-encoding.algo.ts:85-91
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    //   .submit().createdAsset
    itxn_begin
    // tests/approvals/resource-encoding.algo.ts:89
    // assetName: 'TEST',
    pushbytes "TEST"
    itxn_field ConfigAssetName
    // tests/approvals/resource-encoding.algo.ts:88
    // unitName: 'T',
    pushbytes "T"
    itxn_field ConfigAssetUnitName
    // tests/approvals/resource-encoding.algo.ts:87
    // total: 1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // tests/approvals/resource-encoding.algo.ts:85-90
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/resource-encoding.algo.ts:85-91
    // const asset = itxn
    //   .assetConfig({
    //     total: 1,
    //     unitName: 'T',
    //     assetName: 'TEST',
    //   })
    //   .submit().createdAsset
    itxn_submit
    // tests/approvals/resource-encoding.algo.ts:91
    // .submit().createdAsset
    itxn CreatedAssetID
    // tests/approvals/resource-encoding.algo.ts:93-96
    // const { returnValue: indexes } = compiled.call.echoResourceByIndex({
    //   args: [asset, Global.currentApplicationId, Txn.sender],
    //   appId,
    // })
    itxn_begin
    // tests/approvals/resource-encoding.algo.ts:94
    // args: [asset, Global.currentApplicationId, Txn.sender],
    global CurrentApplicationID
    txn Sender
    itxn_field Accounts
    dig 1
    itxn_field Assets
    itxn_field Applications
    // tests/approvals/resource-encoding.algo.ts:93-96
    // const { returnValue: indexes } = compiled.call.echoResourceByIndex({
    //   args: [asset, Global.currentApplicationId, Txn.sender],
    //   appId,
    // })
    pushbytes 0x77e28d74 // method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    pushbytes 0x00
    itxn_field ApplicationArgs
    bytec_1 // 0x01
    itxn_field ApplicationArgs
    bytec_1 // 0x01
    itxn_field ApplicationArgs
    // tests/approvals/resource-encoding.algo.ts:93-96
    // const { returnValue: indexes } = compiled.call.echoResourceByIndex({
    //   args: [asset, Global.currentApplicationId, Txn.sender],
    //   appId,
    // })
    intc_0 // 0
    itxn_field OnCompletion
    dig 1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/resource-encoding.algo.ts:97
    // assertMatch(indexes, [asset, Global.currentApplicationId, Txn.sender])
    dup
    intc_3 // 4
    extract_uint64
    dig 2
    ==
    intc_1 // 1
    &&
    dig 1
    pushint 12 // 12
    extract_uint64
    global CurrentApplicationID
    ==
    &&
    swap
    extract 20 32
    txn Sender
    ==
    &&
    assert // assert target is match for conditions
    // tests/approvals/resource-encoding.algo.ts:99-102
    // const { returnValue: resources } = compiled.call.echoResourceByValue({
    //   args: [asset, Global.currentApplicationId, Txn.sender],
    //   appId,
    // })
    itxn_begin
    // tests/approvals/resource-encoding.algo.ts:100
    // args: [asset, Global.currentApplicationId, Txn.sender],
    dup
    itob
    global CurrentApplicationID
    itob
    txn Sender
    // tests/approvals/resource-encoding.algo.ts:99-102
    // const { returnValue: resources } = compiled.call.echoResourceByValue({
    //   args: [asset, Global.currentApplicationId, Txn.sender],
    //   appId,
    // })
    pushbytes 0x4d370276 // method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    swap
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // tests/approvals/resource-encoding.algo.ts:104
    // assertMatch(resources, [asset, Global.currentApplicationId, Txn.sender])
    dup
    intc_3 // 4
    extract_uint64
    uncover 2
    ==
    intc_1 // 1
    &&
    dig 1
    pushint 12 // 12
    extract_uint64
    global CurrentApplicationID
    ==
    &&
    swap
    extract 20 32
    txn Sender
    ==
    &&
    assert // assert target is match for conditions
    retsub
