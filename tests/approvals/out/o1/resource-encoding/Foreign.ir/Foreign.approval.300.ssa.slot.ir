main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L27
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testExplicitForeign(account)uint64" => block@3, method "testImplicitValue(address)uint64" => block@4, method "testBaseForeign(account)uint64" => block@5, * => block@12}
    block@3: // testExplicitForeign_route_L28
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%8#0: account = ((txnas Accounts) tmp%7#0)
        let tmp%9#0: uint64 = tests/approvals/resource-encoding.algo.ts::Foreign.testExplicitForeign(tmp%8#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%9#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%11#0)
        let tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // testImplicitValue_route_L37
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = tests/approvals/resource-encoding.algo.ts::Foreign.testImplicitValue(reinterpret_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%17#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%19#0)
        let tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // testBaseForeign_route_L11
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%24#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%25#0: account = ((txnas Accounts) tmp%24#0)
        let tmp%26#0: uint64 = tests/approvals/resource-encoding.algo.ts::BaseForeign.testBaseForeign(tmp%25#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%26#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#0)
        (log tmp%28#0)
        let tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L27
        let tmp%29#0: uint64 = (txn OnCompletion)
        goto tmp%29#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L27
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // can only call when creating
        let tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L27
        let tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#0 <- block@3, tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#1 <- block@4, tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#2 <- block@5, tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#3 <- block@9, tests/approvals/resource-encoding.algo.ts::Foreign.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/resource-encoding.algo.ts::Foreign.testExplicitForeign(account: account) -> uint64:
    block@0: // L28
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        return value%0#0

subroutine tests/approvals/resource-encoding.algo.ts::Foreign.testImplicitValue(account: account) -> uint64:
    block@0: // L37
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        return value%0#0

subroutine tests/approvals/resource-encoding.algo.ts::BaseForeign.testBaseForeign(account: account) -> uint64:
    block@0: // L11
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        return value%0#0