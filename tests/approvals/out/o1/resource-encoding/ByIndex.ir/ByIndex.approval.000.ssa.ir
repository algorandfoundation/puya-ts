main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/resource-encoding.algo.ts::ByIndex.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/resource-encoding.algo.ts::ByIndex.__puya_arc4_router__() -> bool:
    block@0: // L16
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L16
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L16
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testExplicitIndex(account)uint64" => block@3, method "testImplicitValue(address)uint64" => block@4, * => block@5}
    block@3: // testExplicitIndex_route_L17
        tests/approvals/resource-encoding.algo.ts::ByIndex.testExplicitIndex[routing]()
        goto block@5
    block@4: // testImplicitValue_route_L26
        tests/approvals/resource-encoding.algo.ts::ByIndex.testImplicitValue[routing]()
        goto block@5
    block@5: // switch_case_next_L16
        goto block@7
    block@6: // create_NoOp_L16
        goto block@7
    block@7: // after_if_else_L16
        goto block@9
    block@8: // __algots__.defaultCreate_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/resource-encoding.algo.ts::ByIndex.__algots__.defaultCreate()
        exit 1u
    block@9: // after_if_else_L16
        exit 0u

subroutine tests/approvals/resource-encoding.algo.ts::ByIndex.testExplicitIndex[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%1#0: account = ((txnas Accounts) tmp%0#0)
        let tmp%2#0: uint64 = tests/approvals/resource-encoding.algo.ts::ByIndex.testExplicitIndex(tmp%1#0)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::ByIndex.testImplicitValue[routing]() -> void:
    block@0: // L26
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let tmp%1#0: uint64 = tests/approvals/resource-encoding.algo.ts::ByIndex.testImplicitValue(tmp%0#0)
        let tmp%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::ByIndex.testExplicitIndex(account: account) -> uint64:
    block@0: // L17
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        return value%0#0

subroutine tests/approvals/resource-encoding.algo.ts::ByIndex.testImplicitValue(account: account) -> uint64:
    block@0: // L26
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        return value%0#0

subroutine tests/approvals/resource-encoding.algo.ts::ByIndex.__algots__.defaultCreate() -> void:
    block@0: // L16
        return 