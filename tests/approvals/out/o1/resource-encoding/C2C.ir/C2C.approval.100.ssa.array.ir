main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L62
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testCallToIndex(address,uint64)void" => block@4, method "testCallToValue(address,uint64)void" => block@5, method "testCallToEchoResource()void" => block@6, * => block@9}
    block@4: // testCallToIndex_route_L63
        tests/approvals/resource-encoding.algo.ts::C2C.testCallToIndex[routing]()
        goto block@9
    block@5: // testCallToValue_route_L72
        tests/approvals/resource-encoding.algo.ts::C2C.testCallToValue[routing]()
        goto block@9
    block@6: // testCallToEchoResource_route_L81
        tests/approvals/resource-encoding.algo.ts::C2C.testCallToEchoResource[routing]()
        goto block@9
    block@9: // after_if_else_L62
        fail
    block@10: // __algots__.defaultCreate_L62
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::C2C.testCallToIndex[routing]() -> void:
    block@0: // L63
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let account#0: account = tmp%0#0
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let appId#0: uint64 = (btoi tmp%2#0)
        itxn_begin
        ((itxn_field Accounts) account#0)
        ((itxn_field ApplicationArgs) method "testExplicitIndex(account)uint64")
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#1: bool = (== tmp%1#1 0x151f7c75)
        (assert tmp%2#1) // Bytes has valid prefix
        let len%0#1: uint64 = (len tmp%0#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let res1#0: uint64 = (btoi tmp%0#1)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let tmp%4#0: bool = (== res1#0 value%0#0)
        (assert tmp%4#0)
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::C2C.testCallToValue[routing]() -> void:
    block@0: // L72
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let account#0: account = tmp%0#0
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let appId#0: uint64 = (btoi tmp%2#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "testExplicitValue(address)uint64")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#1: bool = (== tmp%2#1 0x151f7c75)
        (assert tmp%3#1) // Bytes has valid prefix
        let len%0#1: uint64 = (len tmp%1#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let res1#0: uint64 = (btoi tmp%1#1)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let tmp%5#0: bool = (== res1#0 value%0#0)
        (assert tmp%5#0)
        exit 1u

subroutine tests/approvals/resource-encoding.algo.ts::C2C.testCallToEchoResource[routing]() -> void:
    block@0: // L81
        itxn_begin
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAQIDCCYBBBUffHUxG0EAHTEZFEQxGESCAgR34o10BE03AnY2GgCOAgALAFkAMRkUMRgUEEQiQzYaAUkVIhJEF8AwNhoCSRUiEkQXwDI2GgNJFSISRBfAHCLAGhfAMEsDEkQjwBoXwDJLAhJEJMAaF8AcSwESRE8CFk8CFlBMUChMULAiQzYaAUkVJRJEFzYaAkkVJRJEFzYaA0kVgSASRCLAGhdLAxJEI8AaF0sCEkQkwBpLARJETwIWTwIWUExQKExQsCJD)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: account = (txn Sender)
        ((itxn_field Accounts) tmp%3#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) tmp%2#0)
        ((itxn_field ApplicationArgs) method "echoResourceByIndex(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let indexes#0: Encoded(uint64,uint64,uint8[32]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // Bytes has valid prefix
        let len%0#0: uint64 = (len indexes#0)
        let eq%0#0: bool = (== len%0#0 48u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let aggregate%extract%0#0: bytes = (extract3 indexes#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%8#0: bool = (== values%0#0 asset#0)
        let tmp%9#0: bool = (&& 1u tmp%8#0)
        let aggregate%extract%1#0: bytes = (extract3 indexes#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%10#0: uint64 = (global CurrentApplicationID)
        let tmp%11#0: bool = (== values%1#0 tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        let aggregate%extract%2#0: bytes = (extract3 indexes#0 16u 32u)
        let tuple_item%2#0: Encoded(uint8[32]) = aggregate%extract%2#0
        let values%2#0: account = tuple_item%2#0
        let tmp%13#0: account = (txn Sender)
        let tmp%14#0: bool = (== values%2#0 tmp%13#0)
        let tmp%15#0: bool = (&& tmp%12#0 tmp%14#0)
        (assert tmp%15#0) // assert target is match for conditions
        itxn_begin
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%16#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%17#0: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%17#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%18#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%19#0: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%19#0
        let tmp%20#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        ((itxn_field ApplicationArgs) method "echoResourceByValue(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) tmp%16#0)
        ((itxn_field ApplicationArgs) tmp%18#0)
        ((itxn_field ApplicationArgs) tmp%20#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let resources#0: Encoded(uint64,uint64,uint8[32]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%22#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%23#0: bool = (== tmp%22#0 0x151f7c75)
        (assert tmp%23#0) // Bytes has valid prefix
        let len%1#0: uint64 = (len resources#0)
        let eq%1#0: bool = (== len%1#0 48u)
        (assert eq%1#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let aggregate%extract%3#0: bytes = (extract3 resources#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let tmp%25#0: bool = (== values%3#0 asset#0)
        let tmp%26#0: bool = (&& 1u tmp%25#0)
        let aggregate%extract%4#0: bytes = (extract3 resources#0 8u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let tmp%27#0: uint64 = (global CurrentApplicationID)
        let tmp%28#0: bool = (== values%4#0 tmp%27#0)
        let tmp%29#0: bool = (&& tmp%26#0 tmp%28#0)
        let aggregate%extract%5#0: bytes = (extract3 resources#0 16u 32u)
        let tuple_item%5#0: Encoded(uint8[32]) = aggregate%extract%5#0
        let values%5#0: account = tuple_item%5#0
        let tmp%30#0: account = (txn Sender)
        let tmp%31#0: bool = (== values%5#0 tmp%30#0)
        let tmp%32#0: bool = (&& tmp%29#0 tmp%31#0)
        (assert tmp%32#0) // assert target is match for conditions
        exit 1u