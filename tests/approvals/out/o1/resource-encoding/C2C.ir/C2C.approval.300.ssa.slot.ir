main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L71
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testCallToForeign(address,uint64)void" => block@3, method "testCallToValue(address,uint64)void" => block@4, method "testCallToEchoResource()void" => block@5, * => block@12}
    block@3: // testCallToForeign_route_L72
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/resource-encoding.algo.ts::C2C.testCallToForeign(reinterpret_Encoded(uint8[32])%0#0, tmp%8#0)
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // testCallToValue_route_L80
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%14#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        tests/approvals/resource-encoding.algo.ts::C2C.testCallToValue(reinterpret_Encoded(uint8[32])%1#0, tmp%14#0)
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // testCallToEchoResource_route_L89
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        tests/approvals/resource-encoding.algo.ts::C2C.testCallToEchoResource()
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L71
        let tmp%19#0: uint64 = (txn OnCompletion)
        goto tmp%19#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L71
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // can only call when creating
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L71
        let tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#0 <- block@3, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#1 <- block@4, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#2 <- block@5, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#3 <- block@9, tests/approvals/resource-encoding.algo.ts::C2C.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/resource-encoding.algo.ts::C2C.testCallToForeign(account: account, appId: uint64) -> void:
    block@0: // L72
        itxn_begin
        ((itxn_field Accounts) account#0)
        ((itxn_field ApplicationArgs) method "testExplicitForeign(account)uint64")
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // Bytes has valid prefix
        let res1#0: uint64 = (btoi tmp%0#0)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let tmp%4#0: bool = (== res1#0 value%0#0)
        (assert tmp%4#0)
        return 

subroutine tests/approvals/resource-encoding.algo.ts::C2C.testCallToValue(account: account, appId: uint64) -> void:
    block@0: // L80
        itxn_begin
        ((itxn_field ApplicationArgs) method "testExplicitValue(address)uint64")
        ((itxn_field ApplicationArgs) account#0)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let res1#0: uint64 = (btoi tmp%1#0)
        let (value%0#0: uint64, check%0#0: bool) = ((acct_params_get AcctBalance) account#0)
        (assert check%0#0) // account funded
        let tmp%5#0: bool = (== res1#0 value%0#0)
        (assert tmp%5#0)
        return 

subroutine tests/approvals/resource-encoding.algo.ts::C2C.testCallToEchoResource() -> void:
    block@0: // L89
        itxn_begin
        ((itxn_field ClearStateProgramPages) CoEBQw==)
        ((itxn_field ApprovalProgramPages) CiADAQIDMRtBAE2CAgQ8YRNEBCp3rIE2GgCOAgAaAAOBAEMxGRREMRhENhoBFzYaAhc2GgOIAE0iQzEZFEQxGEQ2GgEXwDA2GgIXwDI2GgMXwByIAA0iQzEZQP/DMRgURCJDigMAIsAaF8Awi/0SRCPAGhfAMov+EkQkwBoXwByL/xJEiYoDACLAGheL/RJEI8AaF4v+EkQkwBqL/xJEiQ==)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (itxn CreatedApplicationID)
        itxn_begin
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "T")
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: account = (txn Sender)
        ((itxn_field Accounts) tmp%3#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) tmp%2#0)
        ((itxn_field ApplicationArgs) method "echoResourceByForeignIndex(asset,application,account)void")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let tmp%5#0: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%5#0)
        let tmp%7#0: account = (txn Sender)
        ((itxn_field ApplicationArgs) method "echoResourceByValue(uint64,uint64,address)void")
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%1#0)
        ((itxn_field ApplicationArgs) tmp%7#0)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 