main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        (app_global_put "concreteState" "testing")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@9
    block@4: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getVeryImportantValue()string" => block@5, method "simpleAbiMethod(uint64,uint64)uint64" => block@6, * => block@13}
    block@5: // getVeryImportantValue_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c750007343268656c6c6f)
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@6: // simpleAbiMethod_route_L17
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%16#0: uint64 = tests/approvals/inheritance-a.algo.ts::Arc4Contract.simpleAbiMethod(tmp%14#0, tmp%15#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%16#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#1)
        (log tmp%18#0)
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@9: // bare_routing_L16
        let tmp%19#0: uint64 = (txn OnCompletion)
        goto tmp%19#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L16
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // can only call when creating
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@13: // after_if_else_L16
        let tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#3: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#0 <- block@5, tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#1 <- block@6, tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#2 <- block@10, tests/approvals/inheritance-b.algo.ts::ConcreteArc4Contract.__puya_arc4_router__%0#3 <- block@13)
        return tmp%0#0

subroutine tests/approvals/inheritance-a.algo.ts::Arc4Contract.simpleAbiMethod(a: uint64, b: uint64) -> uint64:
    block@0: // L17
        let tmp%0#0: uint64 = (+ a#0 b#0)
        return tmp%0#0