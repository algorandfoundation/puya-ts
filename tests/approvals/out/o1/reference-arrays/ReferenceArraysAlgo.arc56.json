{
    "name": "ReferenceArraysAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        49
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        38
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        136
                    ],
                    "errorMessage": "has length"
                },
                {
                    "pc": [
                        59
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        111
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgOCAwIDEKICAgIGJ5dGVjYmxvY2sgMHggMHgwNjgxMDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6NAogICAgLy8gY2xhc3MgUmVmZXJlbmNlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA1CiAgICBwdXNoYnl0ZXMgMHgyYTMzNzc3MSAvLyBtZXRob2QgInRlc3QodWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3Rlc3Rfcm91dGVAMwogICAgZXJyCgptYWluX3Rlc3Rfcm91dGVAMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6NQogICAgLy8gdGVzdChsZW5ndGg6IHVpbnQ2NCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBiIHRlc3QKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjQKICAgIC8vIGNsYXNzIFJlZmVyZW5jZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjpSZWZlcmVuY2VBcnJheXNBbGdvLnRlc3Rbcm91dGluZ10oKSAtPiB2b2lkOgp0ZXN0OgogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzAgLy8gIiIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6NQogICAgLy8gdGVzdChsZW5ndGg6IHVpbnQ2NCkgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA4CiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciB1aW50NjQKICAgIGJ0b2kKCnRlc3Rfd2hpbGVfdG9wQDY6CiAgICBwdXNoaW50IDIwMTAgLy8gMjAxMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogdGVzdF9hZnRlcl93aGlsZUAxMQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjXzEgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlY18xIC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBiIHRlc3Rfd2hpbGVfdG9wQDYKCnRlc3RfYWZ0ZXJfd2hpbGVAMTE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjcKICAgIC8vIGNvbnN0IG1hID0gbmV3IFJlZmVyZW5jZUFycmF5PHVpbnQ2ND4oKQogICAgYnl0ZWNfMCAvLyAweAogICAgYnVyeSAzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjgKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgaW50Y18xIC8vIDAKICAgIGJ1cnkgMgoKdGVzdF93aGlsZV90b3BAMjoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6OAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICBkdXAyCiAgICA8CiAgICBieiB0ZXN0X2FmdGVyX3doaWxlQDQKICAgIGRpZyAyCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjkKICAgIC8vIG1hLnB1c2goaSkKICAgIGRpZyAyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgYnVyeSA0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjgKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgaW50Y18yIC8vIDEKICAgICsKICAgIGJ1cnkgMgogICAgYiB0ZXN0X3doaWxlX3RvcEAyCgp0ZXN0X2FmdGVyX3doaWxlQDQ6CiAgICBkaWcgMgogICAgLy8gdGVzdHMvYXBwcm92YWxzL3JlZmVyZW5jZS1hcnJheXMuYWxnby50czoxMgogICAgLy8gYXNzZXJ0KG1hLmxlbmd0aCA9PT0gbGVuZ3RoKQogICAgZHVwCiAgICBsZW4KICAgIGR1cAogICAgaW50Y18wIC8vIDgKICAgIC8KICAgIGRpZyAzCiAgICBkdXAKICAgIGNvdmVyIDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6MTMKICAgIC8vIGFzc2VydChsZW5ndGgsICdoYXMgbGVuZ3RoJykKICAgIGR1cAogICAgYXNzZXJ0IC8vIGhhcyBsZW5ndGgKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6MTQKICAgIC8vIGNvbnN0IHBvcHBlZCA9IG1hLnBvcCgpCiAgICBkaWcgMQogICAgaW50Y18wIC8vIDgKICAgIC0KICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMAogICAgZGlnIDIKICAgIGV4dHJhY3QzCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciA0CiAgICBzdWJzdHJpbmczCiAgICBidG9pCiAgICBkaWcgMQogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjE2CiAgICAvLyBhc3NlcnQocG9wcGVkID09PSBsZW5ndGggLSAxKQogICAgZGlnIDIKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvcmVmZXJlbmNlLWFycmF5cy5hbGdvLnRzOjE3CiAgICAvLyBhc3NlcnQobWEuYXQoLTEpID09PSBsZW5ndGggLSAyKQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA4CiAgICAvCiAgICBpbnRjXzIgLy8gMQogICAgLQogICAgaW50Y18wIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgdW5jb3ZlciAyCiAgICBwdXNoaW50IDIgLy8gMgogICAgLQogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL3JlZmVyZW5jZS1hcnJheXMuYWxnby50czoxOAogICAgLy8gYXNzZXJ0KG1hLmF0KDEpID09PSAxKQogICAgaW50Y18wIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gMQogICAgPT0KICAgIC8vIHRlc3RzL2FwcHJvdmFscy9yZWZlcmVuY2UtYXJyYXlzLmFsZ28udHM6NQogICAgLy8gdGVzdChsZW5ndGg6IHVpbnQ2NCkgewogICAgcmV0dXJuCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyADCAABJgIAAwaBATEbQQAYgAQqM3dxNhoAjgEAAQAxGRQxGBBEQgAIMRkUMRgUEEMjKDYaAUkVIhJEF4HaDzIMDUEAFrGBBrIQgQWyGSmyHimyHyOyAbNC/+EoRQMjRQJKDEEAEksCSwJJTgIWUEUEJAhFAkL/6UsCSRVJIgpLA0lOAhJESURLASIJSwMjSwJYTwRPAk8EUhdLAUhLAiQJEkRJFSIKJAkiC0sBTFtPAoECCRJEIlskEkM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}