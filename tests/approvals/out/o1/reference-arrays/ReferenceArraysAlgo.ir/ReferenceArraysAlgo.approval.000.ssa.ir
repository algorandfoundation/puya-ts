main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64)void" => block@2, * => block@3}
    block@2: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test[routing]()
        goto block@3
    block@3: // switch_case_next_L4
        goto block@5
    block@4: // __algots__.defaultCreate_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L4
        exit 0u

subroutine tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test(tmp%0#0)
        exit 1u

subroutine tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test(length: uint64) -> void:
    block@0: // L5
        _puya_lib.util.ensure_budget(2000u, 0u)
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let ma#0: Encoded(uint64[])* = slot%0#0
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L8
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let tmp%0#0: bool = (< i#1 length#0)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // while_body_L8
        let slot_contents%0#0: Encoded(uint64[]) = load(ma#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%1#0) // on error: max array length exceeded
        store(ma#0, concat%0#0)
        let tmp%2#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%2#0
        goto block@1
    block@3: // after_while_L8
        let tmp%3#0: uint64 = array_len(ma#0)
        let tmp%4#0: bool = (== tmp%3#0 length#0)
        (assert tmp%4#0)
        let reinterpret_bool%0#0: bool = length#0
        (assert reinterpret_bool%0#0) // has length
        let slot_contents%1#0: Encoded(uint64[]) = load(ma#0)
        let len%0#0: uint64 = (len slot_contents%1#0)
        let sub%0#0: uint64 = (- len%0#0 8u)
        let extract%0#0: bytes = (extract3 slot_contents%1#0 0u sub%0#0)
        let total_length%0#0: uint64 = (len slot_contents%1#0)
        let extract_to_end%0#0: bytes = (substring3 slot_contents%1#0 sub%0#0 total_length%0#0)
        let tmp%5#0: uint64 = decode_bytes<uint64>(extract_to_end%0#0)
        store(ma#0, extract%0#0)
        let popped#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- length#0 1u)
        let tmp%7#0: bool = (== popped#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = array_len(ma#0)
        let tmp%9#0: uint64 = (- tmp%8#0 1u)
        let slot_contents%2#0: Encoded(uint64[]) = load(ma#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%2#0, tmp%9#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%10#0: uint64 = (- length#0 2u)
        let tmp%11#0: bool = (== values%0#0 tmp%10#0)
        (assert tmp%11#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(ma#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%3#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%12#0: bool = (== values%1#0 1u)
        (assert tmp%12#0)
        return 

subroutine tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__algots__.defaultCreate() -> void:
    block@0: // L4
        return 