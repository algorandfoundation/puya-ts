main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64)void" => block@3, * => block@10}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test(tmp%7#0)
        let tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test(length: uint64) -> void:
    block@5: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 2010u tmp%1#1)
        goto tmp%2#1 ? block@6 : block@10
    block@6: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@5
    block@10: // after_while_L20
        store(local.0, 0x)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L8
        let i#1: uint64 = φ(i#0 <- block@10, i#2 <- block@2)
        let tmp%0#0: bool = (< i#1 length#0)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // while_body_L8
        let slot_contents%0#0: Encoded(uint64[]) = load(local.0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        store(local.0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@3: // after_while_L8
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(local.0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let tmp%4#0: bool = (== aggregate%array_len%0#0 length#0)
        (assert tmp%4#0)
        (assert length#0) // has length
        let sub%0#0: uint64 = (- aggregate%bytes_len%0#0 8u)
        let extract%0#0: bytes = (extract3 aggregate%slot_contents%0#0 0u sub%0#0)
        let extract_to_end%0#0: bytes = (substring3 aggregate%slot_contents%0#0 sub%0#0 aggregate%bytes_len%0#0)
        let popped#0: uint64 = (btoi extract_to_end%0#0)
        store(local.0, extract%0#0)
        let tmp%6#0: uint64 = (- length#0 1u)
        let tmp%7#0: bool = (== popped#0 tmp%6#0)
        (assert tmp%7#0)
        let aggregate%bytes_len%1#0: uint64 = (len extract%0#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 8u)
        let tmp%9#0: uint64 = (- aggregate%array_len%1#0 1u)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%9#0 8u)
        let values%0#0: uint64 = (extract_uint64 extract%0#0 aggregate%bytes_offset%0#0)
        let tmp%10#0: uint64 = (- length#0 2u)
        let tmp%11#0: bool = (== values%0#0 tmp%10#0)
        (assert tmp%11#0)
        let values%1#0: uint64 = (extract_uint64 extract%0#0 8u)
        let tmp%12#0: bool = (== values%1#0 1u)
        (assert tmp%12#0)
        return 