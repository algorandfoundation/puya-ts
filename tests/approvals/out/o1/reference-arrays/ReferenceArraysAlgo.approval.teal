#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 8 0 1
    bytecblock 0x 0x068101
    // tests/approvals/reference-arrays.algo.ts:4
    // class ReferenceArraysAlgo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    pushbytes 0x2a337771 // method "test(uint64)void"
    txna ApplicationArgs 0
    match main_test_route@3
    err

main_test_route@3:
    // tests/approvals/reference-arrays.algo.ts:5
    // test(length: uint64) {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b test

main___algots__.defaultCreate@5:
    // tests/approvals/reference-arrays.algo.ts:4
    // class ReferenceArraysAlgo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/reference-arrays.algo.ts::ReferenceArraysAlgo.test[routing]() -> void:
test:
    intc_1 // 0
    bytec_0 // ""
    // tests/approvals/reference-arrays.algo.ts:5
    // test(length: uint64) {
    txna ApplicationArgs 1
    btoi

test_while_top@6:
    pushint 2010 // 2010
    global OpcodeBudget
    >
    bz test_after_while@11
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b test_while_top@6

test_after_while@11:
    // tests/approvals/reference-arrays.algo.ts:7
    // const ma = new ReferenceArray<uint64>()
    bytec_0 // 0x
    bury 3
    // tests/approvals/reference-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    intc_1 // 0
    bury 2

test_while_top@2:
    // tests/approvals/reference-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    dup2
    <
    bz test_after_while@4
    dig 2
    // tests/approvals/reference-arrays.algo.ts:9
    // ma.push(i)
    dig 2
    dup
    cover 2
    itob
    concat // on error: max array length exceeded
    bury 4
    // tests/approvals/reference-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    intc_2 // 1
    +
    bury 2
    b test_while_top@2

test_after_while@4:
    dig 2
    // tests/approvals/reference-arrays.algo.ts:12
    // assert(ma.length === length)
    dup
    len
    dup
    intc_0 // 8
    /
    dig 3
    dup
    cover 2
    ==
    assert
    // tests/approvals/reference-arrays.algo.ts:13
    // assert(length, 'has length')
    dup
    assert // has length
    // tests/approvals/reference-arrays.algo.ts:14
    // const popped = ma.pop()
    dig 1
    intc_0 // 8
    -
    dig 3
    intc_1 // 0
    dig 2
    extract3
    uncover 4
    uncover 2
    uncover 4
    substring3
    btoi
    dig 1
    pop
    // tests/approvals/reference-arrays.algo.ts:16
    // assert(popped === length - 1)
    dig 2
    intc_2 // 1
    -
    ==
    assert
    // tests/approvals/reference-arrays.algo.ts:17
    // assert(ma.at(-1) === length - 2)
    dup
    len
    intc_0 // 8
    /
    intc_2 // 1
    -
    intc_0 // 8
    *
    dig 1
    swap
    extract_uint64
    uncover 2
    pushint 2 // 2
    -
    ==
    assert
    // tests/approvals/reference-arrays.algo.ts:18
    // assert(ma.at(1) === 1)
    intc_0 // 8
    extract_uint64
    intc_2 // 1
    ==
    // tests/approvals/reference-arrays.algo.ts:5
    // test(length: uint64) {
    return
