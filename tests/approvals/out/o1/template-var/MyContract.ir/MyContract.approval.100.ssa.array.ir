main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L7
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getInt()uint64" => block@4, method "getString()string" => block@5, method "getBytes()byte[]" => block@6, method "getAddress()address" => block@7, * => block@10}
    block@4: // getInt_route_L8
        tests/approvals/template-var.algo.ts::MyContract.getInt[routing]()
        goto block@10
    block@5: // getString_route_L12
        tests/approvals/template-var.algo.ts::MyContract.getString[routing]()
        goto block@10
    block@6: // getBytes_route_L16
        tests/approvals/template-var.algo.ts::MyContract.getBytes[routing]()
        goto block@10
    block@7: // getAddress_route_L20
        tests/approvals/template-var.algo.ts::MyContract.getAddress[routing]()
        goto block@10
    block@10: // after_if_else_L7
        fail
    block@11: // __algots__.defaultCreate_L7
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/template-var.algo.ts::MyContract.getInt[routing]() -> void:
    block@0: // L8
        let tmp%0#0: uint64 = TemplateVar[uint64](TMPL_AN_INT)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/template-var.algo.ts::MyContract.getString[routing]() -> void:
    block@0: // L12
        let tmp%0#0: string = TemplateVar[string](TMPL_A_STRING)
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/template-var.algo.ts::MyContract.getBytes[routing]() -> void:
    block@0: // L16
        let tmp%0#0: bytes = TemplateVar[bytes](TMPL_SOME_BYTES)
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/template-var.algo.ts::MyContract.getAddress[routing]() -> void:
    block@0: // L20
        let tmp%0#0: Encoded(uint8[32]) = TemplateVar[Encoded(uint8[32])](TMPL_AN_ADDRESS)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u