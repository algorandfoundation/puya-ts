#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    // tests/approvals/gtxns.algo.ts:3
    // export class GtxnsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xa78000de 0xf1908524 // method "test()void", method "test2()void"
    txna ApplicationArgs 0
    match main_test_route@3 main_test2_route@4

main_after_if_else@11:
    // tests/approvals/gtxns.algo.ts:3
    // export class GtxnsAlgo extends Contract {
    intc_1 // 0
    return

main_test2_route@4:
    // tests/approvals/gtxns.algo.ts:8
    // test2() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test2
    intc_0 // 1
    return

main_test_route@3:
    // tests/approvals/gtxns.algo.ts:4
    // test() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test
    intc_0 // 1
    return

main_bare_routing@7:
    // tests/approvals/gtxns.algo.ts:3
    // export class GtxnsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test() -> void:
test:
    // tests/approvals/gtxns.algo.ts:5
    // assert(gtxn.PaymentTxn(0).amount > 0)
    intc_1 // 0
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    intc_1 // 0
    gtxns Amount
    assert
    retsub


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test2() -> void:
test2:
    // tests/approvals/gtxns.algo.ts:8
    // test2() {
    proto 0 0
    pushbytes ""
    // tests/approvals/gtxns.algo.ts:9
    // for (const i of urange(Global.groupSize)) {
    global GroupSize
    intc_1 // 0

test2_for_header@1:
    // tests/approvals/gtxns.algo.ts:9
    // for (const i of urange(Global.groupSize)) {
    frame_dig 2
    frame_dig 1
    <
    bz test2_after_for@21
    // tests/approvals/gtxns.algo.ts:11
    // switch (txn.type) {
    frame_dig 2
    gtxns TypeEnum
    dup
    frame_bury 0
    // tests/approvals/gtxns.algo.ts:12
    // case TransactionType.ApplicationCall:
    pushint 6 // 6
    ==
    // tests/approvals/gtxns.algo.ts:12-14
    // case TransactionType.ApplicationCall:
    //   log(txn.appId.id)
    //   break
    bz test2_after_if_else@5
    // tests/approvals/gtxns.algo.ts:13
    // log(txn.appId.id)
    frame_dig 2
    gtxns ApplicationID
    itob
    log

test2_block@19:
    // tests/approvals/gtxns.algo.ts:9
    // for (const i of urange(Global.groupSize)) {
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b test2_for_header@1

test2_after_if_else@5:
    // tests/approvals/gtxns.algo.ts:15
    // case TransactionType.AssetTransfer:
    frame_dig 0
    pushint 4 // 4
    ==
    // tests/approvals/gtxns.algo.ts:15-17
    // case TransactionType.AssetTransfer:
    //   log(txn.xferAsset.id)
    //   break
    bz test2_after_if_else@8
    // tests/approvals/gtxns.algo.ts:16
    // log(txn.xferAsset.id)
    frame_dig 2
    gtxns XferAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:17
    // break
    b test2_block@19

test2_after_if_else@8:
    // tests/approvals/gtxns.algo.ts:18
    // case TransactionType.AssetConfig:
    frame_dig 0
    pushint 3 // 3
    ==
    // tests/approvals/gtxns.algo.ts:18-20
    // case TransactionType.AssetConfig:
    //   log(txn.configAsset.id)
    //   break
    bz test2_after_if_else@11
    // tests/approvals/gtxns.algo.ts:19
    // log(txn.configAsset.id)
    frame_dig 2
    gtxns ConfigAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:20
    // break
    b test2_block@19

test2_after_if_else@11:
    // tests/approvals/gtxns.algo.ts:21
    // case TransactionType.Payment:
    frame_dig 0
    intc_0 // 1
    ==
    // tests/approvals/gtxns.algo.ts:21-23
    // case TransactionType.Payment:
    //   log(txn.receiver)
    //   break
    bz test2_after_if_else@14
    // tests/approvals/gtxns.algo.ts:22
    // log(txn.receiver)
    frame_dig 2
    gtxns Receiver
    log
    // tests/approvals/gtxns.algo.ts:23
    // break
    b test2_block@19

test2_after_if_else@14:
    // tests/approvals/gtxns.algo.ts:24
    // case TransactionType.KeyRegistration:
    frame_dig 0
    pushint 2 // 2
    ==
    // tests/approvals/gtxns.algo.ts:24-26
    // case TransactionType.KeyRegistration:
    //   log(txn.voteKey)
    //   break
    bz test2_after_if_else@17
    // tests/approvals/gtxns.algo.ts:25
    // log(txn.voteKey)
    frame_dig 2
    gtxns VotePK
    log
    // tests/approvals/gtxns.algo.ts:26
    // break
    b test2_block@19

test2_after_if_else@17:
    // tests/approvals/gtxns.algo.ts:28
    // log(txn.freezeAsset.id)
    frame_dig 2
    gtxns FreezeAsset
    itob
    log
    // tests/approvals/gtxns.algo.ts:29
    // break
    b test2_block@19

test2_after_for@21:
    retsub
