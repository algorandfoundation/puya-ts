#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    // tests/approvals/gtxns.algo.ts:3
    // export class GtxnsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xa78000de // method "test()void"
    txna ApplicationArgs 0
    match main_test_route@3

main_after_if_else@10:
    // tests/approvals/gtxns.algo.ts:3
    // export class GtxnsAlgo extends Contract {
    intc_0 // 0
    return

main_test_route@3:
    // tests/approvals/gtxns.algo.ts:4
    // test() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test
    intc_1 // 1
    return

main_bare_routing@6:
    // tests/approvals/gtxns.algo.ts:3
    // export class GtxnsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/gtxns.algo.ts::GtxnsAlgo.test() -> void:
test:
    // tests/approvals/gtxns.algo.ts:5
    // assert(gtxn.PaymentTxn(0).amount > 0)
    intc_0 // 0
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    intc_0 // 0
    gtxns Amount
    assert
    retsub
