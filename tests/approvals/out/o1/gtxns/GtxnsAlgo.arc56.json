{
    "name": "GtxnsAlgo",
    "structs": {
        "Object3488A93F": [
            {
                "name": "sender",
                "type": "byte[32]"
            },
            {
                "name": "fee",
                "type": "uint64"
            },
            {
                "name": "firstValid",
                "type": "uint64"
            },
            {
                "name": "firstValidTime",
                "type": "uint64"
            },
            {
                "name": "lastValid",
                "type": "uint64"
            },
            {
                "name": "note",
                "type": "byte[]"
            },
            {
                "name": "lease",
                "type": "byte[32]"
            },
            {
                "name": "typeBytes",
                "type": "byte[]"
            },
            {
                "name": "groupIndex",
                "type": "uint64"
            },
            {
                "name": "txnId",
                "type": "byte[32]"
            },
            {
                "name": "rekeyTo",
                "type": "byte[32]"
            },
            {
                "name": "receiver",
                "type": "byte[32]"
            },
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "closeRemainderTo",
                "type": "byte[32]"
            }
        ]
    },
    "methods": [
        {
            "name": "test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [
                {
                    "type": "appl",
                    "name": "other"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reflectAllPay",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "(byte[32],uint64,uint64,uint64,uint64,byte[],byte[32],byte[],uint64,byte[32],byte[32],byte[32],uint64,byte[32])",
                "struct": "Object3488A93F"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        304
                    ],
                    "errorMessage": "OCA must be NoOp"
                },
                {
                    "pc": [
                        75,
                        106,
                        128,
                        140,
                        152
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        321
                    ],
                    "errorMessage": "Other txn must be NoOp"
                },
                {
                    "pc": [
                        169
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        78,
                        109,
                        131,
                        143,
                        155
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        119
                    ],
                    "errorMessage": "transaction type is appl"
                },
                {
                    "pc": [
                        88,
                        177
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQAGJgIE35IPNwtIZWxsbyB0ZXN0NDEbQQCDggIEp4AA3gTxkIUkKIICBO20+XMEE95qVDYaAI4FAE8AQwA3ACEAAiNDMRkURDEYRDEWIglJOBAiEkSIAQWABBUffHVMULAiQzEZFEQxGEQxFiIJSTgQJBJEiAC+IkMxGRREMRhEiACmIkMxGRREMRhEiAAkIkMxGRREMRhEiAANIkMxGUD/oDEYFEQiQyM4ECISRCM4CESJigAAgAAyBCOLAosBDEEAZYsCOBBJjAAkEkEAD4sCOBgWsIsCIgiMAkL/3YsAgQQSQQAJiwI4ERawQv/miwCBAxJBAAmLAjghFrBC/9WLACISQQAIiwI4B7BC/8aLAIECEkEACIsCOAqwQv+2iwI4LRawQv+tiTEZFEQxECQSRCmwiYoBAIv/OBkURIv/OBAkEkSL/zg+KRJEi/8jwhooEkSL/zgYMggSRImKAQGL/zgAi/84AYv/OAKL/zgDi/84BIv/OAWL/zgGi/84D4v/OBaL/zgXi/84IIv/OAeL/zgIi/84CU8MFk8NTFBPDBZQTwsWUE8KFlBLCRUWVwYCTwpQTIACAPRQSwEVgfQBCExPClBLCRUWVwYCTwpQTwIWVwYCTwJMUE8IFlBPB1BPBlBPBVBPBBZQTwNQTwJQTFCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}