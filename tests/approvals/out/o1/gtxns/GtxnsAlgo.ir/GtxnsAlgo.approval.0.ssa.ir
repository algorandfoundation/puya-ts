main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L13
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@2, method "test2()void" => block@3, method "test3()void" => block@4, method "test4(appl)void" => block@5, * => block@6}
    block@2: // test_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test()
        return 1u
    block@3: // test2_route_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test2()
        return 1u
    block@4: // test3_route_L44
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test3()
        return 1u
    block@5: // test4_route_L49
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let tmp%19#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%19#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 appl)
        (assert gtxn_type_matches%0#0) // transaction type is appl
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.test4(gtxn_idx%0#0)
        return 1u
    block@6: // switch_case_default_L13
        goto block@7
    block@7: // switch_case_next_L13
        goto block@12
    block@8: // bare_routing_L13
        let tmp%20#0: uint64 = (txn OnCompletion)
        switch tmp%20#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L13
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (== tmp%21#0 0u)
        (assert tmp%22#0) // can only call when creating
        tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L13
        goto block@11
    block@11: // switch_case_next_L13
        goto block@12
    block@12: // after_if_else_L13
        return 0u

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test() -> void:
    block@0: // L14
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) 0u)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#0: uint64 = ((gtxns Amount) 0u)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test2() -> void:
    block@0: // L18
        let tmp%0#0: uint64 = (global GroupSize)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L19
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@20)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@21
    block@2: // for_body_L19
        let txn#0: uint64 = i#1
        let awst_tmp%0#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%1#0: bool = (== awst_tmp%0#0 6u)
        goto tmp%1#0 ? block@3 : block@5
    block@3: // if_body_L22
        goto block@4
    block@4: // L22
        let tmp%2#0: uint64 = ((gtxns ApplicationID) txn#0)
        let tmp%3#0: bytes = (itob tmp%2#0)
        (log tmp%3#0)
        goto block@19
    block@5: // after_if_else_L22
        let tmp%4#0: bool = (== awst_tmp%0#0 4u)
        goto tmp%4#0 ? block@6 : block@8
    block@6: // if_body_L25
        goto block@7
    block@7: // L25
        let tmp%5#0: uint64 = ((gtxns XferAsset) txn#0)
        let tmp%6#0: bytes = (itob tmp%5#0)
        (log tmp%6#0)
        goto block@19
    block@8: // after_if_else_L25
        let tmp%7#0: bool = (== awst_tmp%0#0 3u)
        goto tmp%7#0 ? block@9 : block@11
    block@9: // if_body_L28
        goto block@10
    block@10: // L28
        let tmp%8#0: uint64 = ((gtxns ConfigAsset) txn#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        (log tmp%9#0)
        goto block@19
    block@11: // after_if_else_L28
        let tmp%10#0: bool = (== awst_tmp%0#0 1u)
        goto tmp%10#0 ? block@12 : block@14
    block@12: // if_body_L31
        goto block@13
    block@13: // L31
        let tmp%11#0: bytes[32] = ((gtxns Receiver) txn#0)
        (log tmp%11#0)
        goto block@19
    block@14: // after_if_else_L31
        let tmp%12#0: bool = (== awst_tmp%0#0 2u)
        goto tmp%12#0 ? block@15 : block@17
    block@15: // if_body_L34
        goto block@16
    block@16: // L34
        let tmp%13#0: bytes = ((gtxns VotePK) txn#0)
        (log tmp%13#0)
        goto block@19
    block@17: // after_if_else_L34
        goto block@18
    block@18: // L37
        let tmp%14#0: uint64 = ((gtxns FreezeAsset) txn#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        (log tmp%15#0)
        goto block@19
    block@19: // L21
        goto block@20
    block@20: // for_footer_L19
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@21: // after_for_L19
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test3() -> void:
    block@0: // L44
        let tmp%0#0: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // OCA must be NoOp
        let tmp%2#0: uint64 = (txn TypeEnum)
        let tmp%3#0: bool = (== tmp%2#0 6u)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.test4(other: uint64) -> void:
    block@0: // L49
        let tmp%0#0: uint64 = ((gtxns OnCompletion) other#0)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // Other txn must be NoOp
        let tmp%2#0: uint64 = ((gtxns TypeEnum) other#0)
        let tmp%3#0: bool = (== tmp%2#0 6u)
        (assert tmp%3#0)
        return 

subroutine tests/approvals/gtxns.algo.ts::GtxnsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L13
        return 