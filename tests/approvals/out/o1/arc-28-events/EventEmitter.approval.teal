#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock 0xb66e9d66 0x0003
    // tests/approvals/arc-28-events.algo.ts:13
    // class EventEmitter extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x8769b79a 0xf14889d7 0xd4c97c9c // method "emitSwapped(uint8,uint8)void", method "emitCustom(string,bool)void", method "emitDynamicBytes(byte[],byte[])void"
    txna ApplicationArgs 0
    match main_emitSwapped_route@3 main_emitCustom_route@4 main_emitDynamicBytes_route@5

main_after_if_else@12:
    // tests/approvals/arc-28-events.algo.ts:13
    // class EventEmitter extends Contract {
    intc_1 // 0
    return

main_emitDynamicBytes_route@5:
    // tests/approvals/arc-28-events.algo.ts:40
    // emitDynamicBytes(x: bytes, y: DynamicBytes) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc-28-events.algo.ts:13
    // class EventEmitter extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // tests/approvals/arc-28-events.algo.ts:40
    // emitDynamicBytes(x: bytes, y: DynamicBytes) {
    callsub emitDynamicBytes
    intc_0 // 1
    return

main_emitCustom_route@4:
    // tests/approvals/arc-28-events.algo.ts:35
    // emitCustom(arg0: string, arg1: boolean) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc-28-events.algo.ts:13
    // class EventEmitter extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    intc_1 // 0
    getbit
    // tests/approvals/arc-28-events.algo.ts:35
    // emitCustom(arg0: string, arg1: boolean) {
    callsub emitCustom
    intc_0 // 1
    return

main_emitSwapped_route@3:
    // tests/approvals/arc-28-events.algo.ts:14
    // emitSwapped(a: UintN8, b: UintN8) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/arc-28-events.algo.ts:13
    // class EventEmitter extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/arc-28-events.algo.ts:14
    // emitSwapped(a: UintN8, b: UintN8) {
    callsub emitSwapped
    intc_0 // 1
    return

main_bare_routing@8:
    // tests/approvals/arc-28-events.algo.ts:13
    // class EventEmitter extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(a: bytes, b: bytes) -> void:
emitSwapped:
    // tests/approvals/arc-28-events.algo.ts:14
    // emitSwapped(a: UintN8, b: UintN8) {
    proto 2 0
    // tests/approvals/arc-28-events.algo.ts:15
    // emit<Swapped>({ a: b, b: a })
    frame_dig -1
    frame_dig -2
    concat
    bytec_0 // method "Swappednull"
    dig 1
    concat
    dup
    log
    // tests/approvals/arc-28-events.algo.ts:18
    // emit(x)
    dup
    log
    // tests/approvals/arc-28-events.algo.ts:24
    // emit(y)
    pushbytes 0x226e658f // method "SwappedArc4null"
    uncover 2
    concat
    log
    // tests/approvals/arc-28-events.algo.ts:26
    // emit('Swapped', b, a)
    dup
    log
    // tests/approvals/arc-28-events.algo.ts:28
    // emit('Swapped(uint8,uint8)', b, a)
    log
    // tests/approvals/arc-28-events.algo.ts:29
    // emit('Swapped((uint8,uint8),uint8)', [b, b] as const, a)
    frame_dig -1
    dup
    concat
    dup
    frame_dig -2
    concat
    bytec_0 // method "Swappednull"
    swap
    concat
    dup
    log
    // tests/approvals/arc-28-events.algo.ts:31
    // emit('Swapped((uint8,uint8),uint8)', [b, b], a)
    log
    // tests/approvals/arc-28-events.algo.ts:32
    // emit('Swapped(uint8[],uint8)', [b, b], a)
    pushbytes 0x0002
    swap
    concat
    bytec_1 // 0x0003
    frame_dig -2
    concat
    swap
    concat
    bytec_0 // method "Swappednull"
    swap
    concat
    log
    retsub


// tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(arg0: bytes, arg1: uint64) -> void:
emitCustom:
    // tests/approvals/arc-28-events.algo.ts:35
    // emitCustom(arg0: string, arg1: boolean) {
    proto 2 0
    // tests/approvals/arc-28-events.algo.ts:36
    // emit('Custom', arg0, arg1)
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    pushbytes 0x00
    intc_1 // 0
    frame_dig -1
    setbit
    bytec_1 // 0x0003
    swap
    concat
    swap
    concat
    pushbytes 0x1ae84e1e // method "Customnull"
    swap
    concat
    dup
    log
    // tests/approvals/arc-28-events.algo.ts:37
    // emit('Custom(string,bool)', arg0, arg1)
    log
    retsub


// tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(x: bytes, y: bytes) -> void:
emitDynamicBytes:
    // tests/approvals/arc-28-events.algo.ts:40
    // emitDynamicBytes(x: bytes, y: DynamicBytes) {
    proto 2 0
    // tests/approvals/arc-28-events.algo.ts:41
    // emit('DB(byte[],byte[])', x, y)
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    dup
    len
    pushint 4 // 4
    +
    swap
    frame_dig -1
    concat
    swap
    itob
    extract 6 2
    pushbytes 0x0004
    swap
    concat
    swap
    concat
    pushbytes 0xf596c93f // method "DBnull"
    swap
    concat
    log
    retsub
