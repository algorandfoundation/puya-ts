{
    "hints": {
        "emitSwapped(uint8,uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emitCustom(string,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emitDynamicBytes(byte[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EventEmitter",
        "methods": [
            {
                "name": "emitSwapped",
                "args": [
                    {
                        "type": "uint8",
                        "name": "a"
                    },
                    {
                        "type": "uint8",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "emitCustom",
                "args": [
                    {
                        "type": "string",
                        "name": "arg0"
                    },
                    {
                        "type": "bool",
                        "name": "arg1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "emitDynamicBytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "x"
                    },
                    {
                        "type": "byte[]",
                        "name": "y"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}