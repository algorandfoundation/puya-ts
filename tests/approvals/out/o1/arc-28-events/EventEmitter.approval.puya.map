{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/arc-28-events.algo.ts"
  ],
  "mappings": ";;;;;AAYA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAwBE;;AAAA;AAAA;AAAA;;AAAA;AAxBF;;;AAAA;;;AAAA;;;AAwBE;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAAA;;;AAAA;;;;AAAA;AAmBE;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;;;AACE;;;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AACgB;;AAAA;;AAAA;AAAd;;;;;;AAAA;;AAAA;AAAA;AAAA;AAGA;AAAA;AAMA;;;;;;AAAA;;AAAA;AAAA;AAEA;AAAA;AAEA;AACsC;;AAAA;AAAA;AAAtC;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAM;;;AAAA;AAAA;;AAAA;AAArB;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;;AAGF;;;AAC4B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA1B;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0x8769b79a 0xf14889d7 0xd4c97c9c // method \"emitSwapped(uint8,uint8)void\", method \"emitCustom(string,bool)void\", method \"emitDynamicBytes(byte[],byte[])void\""
    },
    "27": {
      "op": "txna ApplicationArgs 0"
    },
    "30": {
      "op": "match main_emitSwapped_route@3 main_emitCustom_route@4 main_emitDynamicBytes_route@5"
    },
    "38": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "return"
    },
    "40": {
      "block": "main_emitDynamicBytes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "50": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "53": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "56": {
      "callsub": "tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes",
      "op": "callsub emitDynamicBytes",
      "stack_out": []
    },
    "59": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "return"
    },
    "61": {
      "block": "main_emitCustom_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "63": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "64": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "67": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "68": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "71": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "74": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "77": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "reinterpret_bytes[1]%2#0",
        "0"
      ]
    },
    "78": {
      "op": "getbit",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "79": {
      "callsub": "tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom",
      "op": "callsub emitCustom",
      "stack_out": []
    },
    "82": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "return"
    },
    "84": {
      "block": "main_emitSwapped_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "87": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "90": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "91": {
      "op": "txna ApplicationArgs 1"
    },
    "94": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "97": {
      "callsub": "tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped",
      "op": "callsub emitSwapped",
      "stack_out": []
    },
    "100": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "return"
    },
    "102": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "104": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID"
    },
    "109": {
      "op": "!"
    },
    "110": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "111": {
      "op": "intc_0 // 1"
    },
    "112": {
      "op": "return"
    },
    "113": {
      "subroutine": "tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "emitSwapped",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "116": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "118": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "y#0"
      ],
      "stack_out": [
        "y#0"
      ]
    },
    "121": {
      "op": "pushbytes 0x0b6325ed // method \"Swapped(uint8,uint8)\"",
      "defined_out": [
        "Method(Swapped(uint8,uint8))",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "Method(Swapped(uint8,uint8))"
      ]
    },
    "127": {
      "op": "dig 1",
      "defined_out": [
        "Method(Swapped(uint8,uint8))",
        "y#0",
        "y#0 (copy)"
      ],
      "stack_out": [
        "y#0",
        "Method(Swapped(uint8,uint8))",
        "y#0 (copy)"
      ]
    },
    "129": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "event%0#0"
      ]
    },
    "130": {
      "op": "dup",
      "defined_out": [
        "event%0#0",
        "event%0#0 (copy)",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "131": {
      "op": "log",
      "stack_out": [
        "y#0",
        "event%0#0"
      ]
    },
    "132": {
      "op": "dup",
      "stack_out": [
        "y#0",
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "133": {
      "op": "log",
      "stack_out": [
        "y#0",
        "event%0#0"
      ]
    },
    "134": {
      "op": "pushbytes 0x441e2cd8 // method \"SwappedArc4(uint8,uint8)\"",
      "defined_out": [
        "Method(SwappedArc4(uint8,uint8))",
        "event%0#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "event%0#0",
        "Method(SwappedArc4(uint8,uint8))"
      ]
    },
    "140": {
      "op": "uncover 2",
      "stack_out": [
        "event%0#0",
        "Method(SwappedArc4(uint8,uint8))",
        "y#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "event%2#0"
      ],
      "stack_out": [
        "event%0#0",
        "event%2#0"
      ]
    },
    "143": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "144": {
      "op": "dup",
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "145": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "146": {
      "op": "log",
      "stack_out": []
    },
    "147": {
      "op": "frame_dig -1",
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "149": {
      "op": "dup",
      "stack_out": [
        "b#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%17#0"
      ]
    },
    "151": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "a#0 (copy)"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0"
      ]
    },
    "154": {
      "op": "pushbytes 0x388cc12d // method \"Swapped((uint8,uint8),uint8)\"",
      "defined_out": [
        "Method(Swapped((uint8,uint8),uint8))",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "Method(Swapped((uint8,uint8),uint8))"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "Method(Swapped((uint8,uint8),uint8))",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "event%5#0"
      ],
      "stack_out": [
        "event%5#0"
      ]
    },
    "162": {
      "op": "log",
      "stack_out": []
    },
    "163": {
      "retsub": true,
      "op": "retsub"
    },
    "164": {
      "subroutine": "tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom",
      "params": {
        "arg0#0": "bytes",
        "arg1#0": "uint64"
      },
      "block": "emitCustom",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "167": {
      "op": "frame_dig -2",
      "defined_out": [
        "arg0#0 (copy)"
      ],
      "stack_out": [
        "arg0#0 (copy)"
      ]
    },
    "169": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "170": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "171": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "174": {
      "op": "frame_dig -2",
      "stack_out": [
        "length_uint16%0#0",
        "arg0#0 (copy)"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "177": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x00"
      ]
    },
    "180": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "181": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "0x00",
        "arg1#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x00",
        "0",
        "arg1#0 (copy)"
      ]
    },
    "183": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0"
      ]
    },
    "184": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "0x0003"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x0003",
        "encoded_bool%0#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "190": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "191": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "192": {
      "op": "pushbytes 0xa313c066 // method \"Custom(string,bool)\"",
      "defined_out": [
        "Method(Custom(string,bool))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(Custom(string,bool))"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "Method(Custom(string,bool))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ],
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "201": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "202": {
      "op": "log",
      "stack_out": []
    },
    "203": {
      "retsub": true,
      "op": "retsub"
    },
    "204": {
      "subroutine": "tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes",
      "params": {
        "x#0": "bytes",
        "y#0": "bytes"
      },
      "block": "emitDynamicBytes",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "207": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "209": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "210": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "211": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "214": {
      "op": "frame_dig -2",
      "stack_out": [
        "length_uint16%0#0",
        "x#0 (copy)"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "217": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "218": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "data_length%0#0"
      ]
    },
    "219": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "data_length%0#0",
        "4"
      ]
    },
    "221": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "222": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%2#0"
      ]
    },
    "223": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "226": {
      "op": "pushbytes 0x0004",
      "defined_out": [
        "0x0004",
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "0x0004"
      ]
    },
    "230": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x0004",
        "offset_as_uint16%1#0"
      ]
    },
    "231": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "234": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "y#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "y#0 (copy)"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "237": {
      "op": "pushbytes 0x4524e1dd // method \"DB(byte[],byte[])\"",
      "defined_out": [
        "Method(DB(byte[],byte[]))",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "Method(DB(byte[],byte[]))"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "Method(DB(byte[],byte[]))",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "244": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "245": {
      "op": "log",
      "stack_out": []
    },
    "246": {
      "retsub": true,
      "op": "retsub"
    }
  }
}