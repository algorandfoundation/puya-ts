main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L13
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "emitSwapped(uint8,uint8)void" => block@4, method "emitCustom(string,bool)void" => block@5, method "emitDynamicBytes(byte[],byte[])void" => block@6, * => block@9}
    block@4: // emitSwapped_route_L14
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped[routing]()
        goto block@9
    block@5: // emitCustom_route_L35
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom[routing]()
        goto block@9
    block@6: // emitDynamicBytes_route_L40
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes[routing]()
        goto block@9
    block@9: // after_if_else_L13
        fail
    block@10: // __algots__.defaultCreate_L13
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped[routing]() -> void:
    block@0: // L14
        let a#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        let b#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len b#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint8
        let x#0: Encoded(uint8,uint8) = (concat b#0 a#0)
        let event%0#0: bytes = (concat method "Swapped(uint8,uint8)" x#0)
        (log event%0#0)
        (log event%0#0)
        let event%2#0: bytes = (concat method "SwappedArc4(uint8,uint8)" x#0)
        (log event%2#0)
        (log event%0#0)
        (log event%0#0)
        let aggregate%head%3#0: bytes = (concat b#0 b#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%3#0 a#0)
        let event%5#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" aggregate%head%5#0)
        (log event%5#0)
        (log event%5#0)
        let aggregate%head%6#0: bytes = (concat 0x0002 b#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 b#0)
        let aggregate%head%9#0: bytes = (concat 0x0003 a#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%9#0 aggregate%head%7#0)
        let event%7#0: bytes = (concat method "Swapped(uint8[],uint8)" aggregate%concat%0#0)
        (log event%7#0)
        exit 1u

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom[routing]() -> void:
    block@0: // L35
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.bool
        let aggregate%head%1#0: bytes = (concat 0x0003 tmp%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let event%0#0: bytes = (concat method "Custom(string,bool)" aggregate%concat%0#0)
        (log event%0#0)
        (log event%0#0)
        exit 1u

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes[routing]() -> void:
    block@0: // L40
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let y#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 y#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%1#0: uint64 = (len y#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u len%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 y#0)
        let event%0#0: bytes = (concat method "DB(byte[],byte[])" aggregate%concat%1#0)
        (log event%0#0)
        exit 1u