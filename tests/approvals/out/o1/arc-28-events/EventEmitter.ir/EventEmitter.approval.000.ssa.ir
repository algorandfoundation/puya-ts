main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.__puya_arc4_router__() -> bool:
    block@0: // L13
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emitSwapped(uint8,uint8)void" => block@2, method "emitCustom(string,bool)void" => block@3, method "emitDynamicBytes(byte[],byte[])void" => block@4, * => block@5}
    block@2: // emitSwapped_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(reinterpret_Encoded(uint8)%0#0, reinterpret_Encoded(uint8)%1#0)
        return 1u
    block@3: // emitCustom_route_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%11#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let tmp%12#0: bool = decode_bytes<bool>(reinterpret_Encoded(bool8)%0#0)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(tmp%11#0, tmp%12#0)
        return 1u
    block@4: // emitDynamicBytes_route_L40
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%17#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(tmp%17#0, reinterpret_Encoded(len+uint8[])%1#0)
        return 1u
    block@5: // switch_case_default_L13
        goto block@6
    block@6: // switch_case_next_L13
        goto block@11
    block@7: // bare_routing_L13
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L13
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (== tmp%19#0 0u)
        (assert tmp%20#0) // can only call when creating
        tests/approvals/arc-28-events.algo.ts::EventEmitter.__algots__.defaultCreate()
        return 1u
    block@9: // switch_case_default_L13
        goto block@10
    block@10: // switch_case_next_L13
        goto block@11
    block@11: // after_if_else_L13
        return 0u

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitSwapped(a: Encoded(uint8), b: Encoded(uint8)) -> void:
    block@0: // L14
        let tmp%0#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, a#0)
        let tmp%1#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(tmp%0#0)
        let event%0#0: bytes = (concat method "Swapped(uint8,uint8)" tmp%1#0)
        (log event%0#0)
        let tmp%2#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, a#0)
        let x#0: Encoded(uint8,uint8) = tmp%2#0
        let tmp%3#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(x#0)
        let event%1#0: bytes = (concat method "Swapped(uint8,uint8)" tmp%3#0)
        (log event%1#0)
        let awst_tmp%0#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, a#0)
        let y#0: Encoded(uint8,uint8) = awst_tmp%0#0
        let event%2#0: bytes = (concat method "SwappedArc4(uint8,uint8)" y#0)
        (log event%2#0)
        let tmp%4#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, a#0)
        let event%3#0: bytes = (concat method "Swapped(uint8,uint8)" tmp%4#0)
        (log event%3#0)
        let tmp%5#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, a#0)
        let event%4#0: bytes = (concat method "Swapped(uint8,uint8)" tmp%5#0)
        (log event%4#0)
        let tmp%6#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, b#0)
        let tmp%7#0: Encoded((uint8,uint8),uint8) = bytes_encode<((uint8,uint8),uint8)>(tmp%6#0, a#0)
        let event%5#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" tmp%7#0)
        (log event%5#0)
        let tmp%8#0: Encoded(uint8,uint8) = bytes_encode<(uint8,uint8)>(b#0, b#0)
        let tmp%9#0: Encoded((uint8,uint8),uint8) = bytes_encode<((uint8,uint8),uint8)>(tmp%8#0, a#0)
        let event%6#0: bytes = (concat method "Swapped((uint8,uint8),uint8)" tmp%9#0)
        (log event%6#0)
        let tmp%10#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(b#0, b#0)
        let tmp%11#0: Encoded((len+uint8[]),uint8) = bytes_encode<((len+uint8[]),uint8)>(tmp%10#0, a#0)
        let event%7#0: bytes = (concat method "Swapped(uint8[],uint8)" tmp%11#0)
        (log event%7#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitCustom(arg0: string, arg1: bool) -> void:
    block@0: // L35
        let tmp%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(arg0#0)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(arg1#0)
        let tmp%2#0: Encoded((len+utf8[]),bool1) = bytes_encode<((len+utf8[]),bool1)>(tmp%0#0, tmp%1#0)
        let event%0#0: bytes = (concat method "Custom(string,bool)" tmp%2#0)
        (log event%0#0)
        let tmp%3#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(arg0#0)
        let tmp%4#0: Encoded(bool8) = bytes_encode<bool8>(arg1#0)
        let tmp%5#0: Encoded((len+utf8[]),bool1) = bytes_encode<((len+utf8[]),bool1)>(tmp%3#0, tmp%4#0)
        let event%1#0: bytes = (concat method "Custom(string,bool)" tmp%5#0)
        (log event%1#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.emitDynamicBytes(x: bytes, y: Encoded(len+uint8[])) -> void:
    block@0: // L40
        let tmp%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(x#0)
        let tmp%1#0: Encoded((len+uint8[]),(len+uint8[])) = bytes_encode<((len+uint8[]),(len+uint8[]))>(tmp%0#0, y#0)
        let event%0#0: bytes = (concat method "DB(byte[],byte[])" tmp%1#0)
        (log event%0#0)
        return 

subroutine tests/approvals/arc-28-events.algo.ts::EventEmitter.__algots__.defaultCreate() -> void:
    block@0: // L13
        return 