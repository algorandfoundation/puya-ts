main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.constructor()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = tests/approvals/abi-decorators.algo.ts::AbiDecorators.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: bytes = (txna ApplicationArgs 0)
        switch tmp%0#0 {method "allActions()void" => block@1, * => block@2}
    block@1: // allActions_route_L9
        let tmp%1#0: uint64 = (txn ApplicationID)
        let tmp%2#0: bool = (!= tmp%1#0 0u)
        (assert tmp%2#0) // can only call when not creating
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.allActions[routing]()
        goto block@2
    block@2: // switch_case_next_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion must be NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "readonlyAlt2()uint64" => block@3, * => block@4}
    block@3: // readonlyAlt2_route_L29
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt2[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        let tmp%6#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        goto tmp%7#0 ? block@5 : block@11
    block@5: // call_NoOp_L4
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "justNoop()void" => block@6, method "overrideReadonlyName()uint64" => block@7, method "methodWithDefaults(uint64,uint64,uint64)uint64" => block@8, method "readonlyAlt()uint64" => block@9, * => block@10}
    block@6: // justNoop_route_L5
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.justNoop[routing]()
        goto block@10
    block@7: // overrideReadonlyName_route_L11
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonly[routing]()
        goto block@10
    block@8: // methodWithDefaults_route_L18
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.methodWithDefaults[routing]()
        goto block@10
    block@9: // readonlyAlt_route_L23
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt[routing]()
        goto block@10
    block@10: // switch_case_next_L4
        goto block@14
    block@11: // create_NoOp_L4
        let tmp%9#0: bytes = (txna ApplicationArgs 0)
        switch tmp%9#0 {method "createMethod()void" => block@12, * => block@13}
    block@12: // createMethod_route_L7
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.createMethod[routing]()
        goto block@13
    block@13: // switch_case_next_L4
        goto block@14
    block@14: // after_if_else_L4
        exit 0u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.justNoop[routing]() -> void:
    block@0: // L5
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.justNoop()
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.createMethod[routing]() -> void:
    block@0: // L7
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.createMethod()
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.allActions[routing]() -> void:
    block@0: // L9
        tests/approvals/abi-decorators.algo.ts::AbiDecorators.allActions()
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonly[routing]() -> void:
    block@0: // L11
        let tmp%0#0: uint64 = tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonly()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.methodWithDefaults[routing]() -> void:
    block@0: // L18
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let tmp%3#0: uint64 = tests/approvals/abi-decorators.algo.ts::AbiDecorators.methodWithDefaults(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt[routing]() -> void:
    block@0: // L23
        let tmp%0#0: uint64 = tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt2[routing]() -> void:
    block@0: // L29
        let tmp%0#0: uint64 = tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt2()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.justNoop() -> void:
    block@0: // L5
        return 

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.createMethod() -> void:
    block@0: // L7
        return 

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.allActions() -> void:
    block@0: // L9
        return 

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonly() -> uint64:
    block@0: // L11
        return 5u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.methodWithDefaults(a: uint64, b: uint64, c: uint64) -> uint64:
    block@0: // L18
        let tmp%0#0: uint64 = (* a#0 b#0)
        let tmp%1#0: uint64 = (+ tmp%0#0 c#0)
        return tmp%1#0

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt() -> uint64:
    block@0: // L23
        return 1u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.readonlyAlt2() -> uint64:
    block@0: // L28
        return 2u

subroutine tests/approvals/abi-decorators.algo.ts::AbiDecorators.constructor() -> void:
    block@0: // L4
        @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor()
        (app_global_put "globalValue" 123u)
        return 

subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor() -> void:
    block@0: // L1
        return 