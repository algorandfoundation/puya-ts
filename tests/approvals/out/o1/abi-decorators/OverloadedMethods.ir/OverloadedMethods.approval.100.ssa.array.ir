main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L35
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "doThing(uint64)uint64" => block@4, method "doThing(uint64,uint64)uint64" => block@5, * => block@8}
    block@4: // doThing_route_L36
        tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingOne[routing]()
        goto block@8
    block@5: // doThing_route_L41
        tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingTwo[routing]()
        goto block@8
    block@8: // after_if_else_L35
        fail
    block@9: // __algots__.defaultCreate_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingOne[routing]() -> void:
    block@0: // L36
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/abi-decorators.algo.ts::OverloadedMethods.doThingTwo[routing]() -> void:
    block@0: // L41
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let x#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let y#0: uint64 = (btoi tmp%2#0)
        let tmp%0#1: uint64 = (* x#0 y#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u