#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    bytecblock "oneGlobal"
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/approvals/state-totals.algo.ts:5
    // oneGlobal = GlobalState({ initialValue: Uint64(1) })
    bytec_0 // "oneGlobal"
    intc_0 // 1
    app_global_put

main_after_if_else@2:
    // tests/approvals/state-totals.algo.ts:27-28
    // @contract({ stateTotals: {} })
    // export class ExtendsSubWithTotals extends SubClassWithExplicitTotals {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytes 0x2cd95aa1 // method "setState(uint64)void"
    txna ApplicationArgs 0
    match main_setState_route@5

main_after_if_else@12:
    err

main_setState_route@5:
    // tests/approvals/state-totals.algo.ts:31
    // @abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_0 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/state-totals.algo.ts:27-28
    // @contract({ stateTotals: {} })
    // export class ExtendsSubWithTotals extends SubClassWithExplicitTotals {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/state-totals.algo.ts:31
    // @abimethod({ allowActions: 'OptIn' })
    callsub setState
    intc_0 // 1
    return

main_bare_routing@8:
    // tests/approvals/state-totals.algo.ts:27-28
    // @contract({ stateTotals: {} })
    // export class ExtendsSubWithTotals extends SubClassWithExplicitTotals {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState(n: uint64) -> void:
setState:
    // tests/approvals/state-totals.algo.ts:31-32
    // @abimethod({ allowActions: 'OptIn' })
    // setState(n: uint64) {
    proto 1 0
    // tests/approvals/state-totals.algo.ts:5
    // oneGlobal = GlobalState({ initialValue: Uint64(1) })
    bytec_0 // "oneGlobal"
    // tests/approvals/state-totals.algo.ts:10
    // this.oneGlobal.value = n
    frame_dig -1
    app_global_put
    // tests/approvals/state-totals.algo.ts:6
    // twoGlobal = GlobalState<uint64>()
    pushbytes "twoGlobal"
    // tests/approvals/state-totals.algo.ts:11
    // this.twoGlobal.value = n
    frame_dig -1
    app_global_put
    // tests/approvals/state-totals.algo.ts:35
    // this.oneLocal(Txn.sender).value = n
    txn Sender
    // tests/approvals/state-totals.algo.ts:29
    // oneLocal = LocalState<uint64>()
    pushbytes "oneLocal"
    // tests/approvals/state-totals.algo.ts:35
    // this.oneLocal(Txn.sender).value = n
    frame_dig -1
    app_local_put
    retsub
