{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/state-totals.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAIE;AAA+C;AAA/C;AAsBF;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;;AAIG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAJH;;;AAAA;AAIG;;;AAAA;;AAJH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAIE;;;AA1BA;AAKE;;AAAA;AAJF;;;;;;;;;;;AAKE;;AAAA;AAwBkB;;AANpB;;;;;;;;;;AAME;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock \"oneGlobal\""
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "21": {
      "op": "bytec_0 // \"oneGlobal\""
    },
    "22": {
      "op": "intc_0 // 1"
    },
    "23": {
      "op": "app_global_put"
    },
    "24": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "29": {
      "op": "pushbytes 0x2cd95aa1 // method \"setState(uint64)void\""
    },
    "35": {
      "op": "txna ApplicationArgs 0"
    },
    "38": {
      "op": "match main_setState_route@5"
    },
    "42": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "44": {
      "op": "return"
    },
    "45": {
      "block": "main_setState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "47": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "48": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "49": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "52": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "53": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "56": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "57": {
      "callsub": "tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState",
      "op": "callsub setState",
      "stack_out": []
    },
    "60": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "return"
    },
    "62": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "64": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "67": {
      "op": "txn ApplicationID"
    },
    "69": {
      "op": "!"
    },
    "70": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "71": {
      "op": "intc_0 // 1"
    },
    "72": {
      "op": "return"
    },
    "73": {
      "subroutine": "tests/approvals/state-totals.algo.ts::ExtendsSubWithTotals.setState",
      "params": {
        "n#0": "uint64"
      },
      "block": "setState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "76": {
      "op": "bytec_0 // \"oneGlobal\"",
      "defined_out": [
        "\"oneGlobal\""
      ],
      "stack_out": [
        "\"oneGlobal\""
      ]
    },
    "77": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"oneGlobal\"",
        "n#0 (copy)"
      ],
      "stack_out": [
        "\"oneGlobal\"",
        "n#0 (copy)"
      ]
    },
    "79": {
      "op": "app_global_put",
      "stack_out": []
    },
    "80": {
      "op": "pushbytes \"twoGlobal\"",
      "defined_out": [
        "\"twoGlobal\""
      ],
      "stack_out": [
        "\"twoGlobal\""
      ]
    },
    "91": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"twoGlobal\"",
        "n#0 (copy)"
      ]
    },
    "93": {
      "op": "app_global_put",
      "stack_out": []
    },
    "94": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "pushbytes \"oneLocal\"",
      "defined_out": [
        "\"oneLocal\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"oneLocal\""
      ]
    },
    "106": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "\"oneLocal\"",
        "n#0 (copy)"
      ]
    },
    "108": {
      "op": "app_local_put",
      "stack_out": []
    },
    "109": {
      "retsub": true,
      "op": "retsub"
    }
  }
}