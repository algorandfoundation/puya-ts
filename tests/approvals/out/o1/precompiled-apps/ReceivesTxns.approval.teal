#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 3
    // tests/approvals/precompiled-apps.algo.ts:85
    // export class ReceivesTxns extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x8f6892ef 0x9cd87de3 0xd366c869 0x81b67352 // method "getOne()uint64", method "receivesAnyTxn(txn)uint64", method "receivesAssetConfig(acfg)byte[]", method "receivesAssetConfigAndPay(acfg,pay)void"
    txna ApplicationArgs 0
    match main_getOne_route@4 receivesAnyTxn receivesAssetConfig receivesAssetConfigAndPay
    err

main_getOne_route@4:
    // tests/approvals/precompiled-apps.algo.ts:86
    // getOne(): uint64 {
    pushbytes 0x151f7c750000000000000001
    log
    intc_0 // 1
    return

main___algots__.defaultCreate@11:
    // tests/approvals/precompiled-apps.algo.ts:85
    // export class ReceivesTxns extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn[routing]() -> void:
receivesAnyTxn:
    pushbytes ""
    dup
    // tests/approvals/precompiled-apps.algo.ts:90
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    // tests/approvals/precompiled-apps.algo.ts:91
    // switch (txn.type) {
    gtxns TypeEnum
    dup
    // tests/approvals/precompiled-apps.algo.ts:92
    // case TransactionType.AssetConfig:
    intc_1 // 3
    ==
    // tests/approvals/precompiled-apps.algo.ts:92-93
    // case TransactionType.AssetConfig:
    //   return txn.createdAsset.id || txn.configAsset.id
    bz receivesAnyTxn_after_if_else@7
    // tests/approvals/precompiled-apps.algo.ts:93
    // return txn.createdAsset.id || txn.configAsset.id
    dig 1
    gtxns CreatedAssetID
    dup
    bury 5
    bz receivesAnyTxn_ternary_false@5
    dig 3

receivesAnyTxn_after_inlined_tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn@15:
    // tests/approvals/precompiled-apps.algo.ts:90
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

receivesAnyTxn_ternary_false@5:
    // tests/approvals/precompiled-apps.algo.ts:93
    // return txn.createdAsset.id || txn.configAsset.id
    dig 1
    gtxns ConfigAsset
    // tests/approvals/precompiled-apps.algo.ts:90
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    b receivesAnyTxn_after_inlined_tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn@15

receivesAnyTxn_after_if_else@7:
    // tests/approvals/precompiled-apps.algo.ts:94
    // case TransactionType.ApplicationCall:
    dup
    pushint 6 // 6
    ==
    // tests/approvals/precompiled-apps.algo.ts:94-95
    // case TransactionType.ApplicationCall:
    //   return txn.createdApp.id || txn.appId.id
    bz receivesAnyTxn_after_if_else@13
    // tests/approvals/precompiled-apps.algo.ts:95
    // return txn.createdApp.id || txn.appId.id
    dig 1
    gtxns CreatedApplicationID
    dup
    bury 4
    bz receivesAnyTxn_ternary_false@11
    dig 2
    // tests/approvals/precompiled-apps.algo.ts:90
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    b receivesAnyTxn_after_inlined_tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn@15

receivesAnyTxn_ternary_false@11:
    // tests/approvals/precompiled-apps.algo.ts:95
    // return txn.createdApp.id || txn.appId.id
    dig 1
    gtxns ApplicationID
    // tests/approvals/precompiled-apps.algo.ts:90
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    b receivesAnyTxn_after_inlined_tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn@15

receivesAnyTxn_after_if_else@13:
    // tests/approvals/precompiled-apps.algo.ts:97
    // return 0
    pushint 0 // 0
    // tests/approvals/precompiled-apps.algo.ts:90
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    b receivesAnyTxn_after_inlined_tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn@15


// tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfig[routing]() -> void:
receivesAssetConfig:
    // tests/approvals/precompiled-apps.algo.ts:101
    // receivesAssetConfig(assetCfg: gtxn.AssetConfigTxn): bytes {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // acfg
    ==
    assert // transaction type is acfg
    // tests/approvals/precompiled-apps.algo.ts:102
    // return assetCfg.txnId
    gtxns TxID
    // tests/approvals/precompiled-apps.algo.ts:101
    // receivesAssetConfig(assetCfg: gtxn.AssetConfigTxn): bytes {
    pushbytes 0x151f7c750020
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfigAndPay[routing]() -> void:
receivesAssetConfigAndPay:
    // tests/approvals/precompiled-apps.algo.ts:104
    // receivesAssetConfigAndPay(assetCfg: gtxn.AssetConfigTxn, payTxn: gtxn.PaymentTxn): void {
    txn GroupIndex
    pushint 2 // 2
    -
    gtxns TypeEnum
    dup
    intc_1 // acfg
    ==
    assert // transaction type is acfg
    txn GroupIndex
    intc_0 // 1
    -
    gtxns TypeEnum
    dup
    intc_0 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/precompiled-apps.algo.ts:105
    // assert(assetCfg.type === TransactionType.AssetConfig)
    swap
    intc_1 // 3
    ==
    assert
    // tests/approvals/precompiled-apps.algo.ts:106
    // assert(payTxn.type === TransactionType.Payment)
    intc_0 // 1
    ==
    // tests/approvals/precompiled-apps.algo.ts:104
    // receivesAssetConfigAndPay(assetCfg: gtxn.AssetConfigTxn, payTxn: gtxn.PaymentTxn): void {
    return
