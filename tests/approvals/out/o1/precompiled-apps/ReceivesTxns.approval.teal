#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 3 0
    bytecblock 0x151f7c75
    // tests/approvals/precompiled-apps.algo.ts:79
    // export class ReceivesTxns extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x8f6892ef 0x9cd87de3 0xd366c869 0x81b67352 // method "getOne()uint64", method "receivesAnyTxn(txn)uint64", method "receivesAssetConfig(acfg)byte[]", method "receivesAssetConfigAndPay(acfg,pay)void"
    txna ApplicationArgs 0
    match main_getOne_route@3 main_receivesAnyTxn_route@4 main_receivesAssetConfig_route@5 main_receivesAssetConfigAndPay_route@6

main_after_if_else@13:
    // tests/approvals/precompiled-apps.algo.ts:79
    // export class ReceivesTxns extends Contract {
    intc_2 // 0
    return

main_receivesAssetConfigAndPay_route@6:
    // tests/approvals/precompiled-apps.algo.ts:98
    // receivesAssetConfigAndPay(assetCfg: gtxn.AssetConfigTxn, payTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/precompiled-apps.algo.ts:79
    // export class ReceivesTxns extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // acfg
    ==
    assert // transaction type is acfg
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // tests/approvals/precompiled-apps.algo.ts:98
    // receivesAssetConfigAndPay(assetCfg: gtxn.AssetConfigTxn, payTxn: gtxn.PaymentTxn): void {
    callsub receivesAssetConfigAndPay
    intc_0 // 1
    return

main_receivesAssetConfig_route@5:
    // tests/approvals/precompiled-apps.algo.ts:95
    // receivesAssetConfig(assetCfg: gtxn.AssetConfigTxn): bytes {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/precompiled-apps.algo.ts:79
    // export class ReceivesTxns extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // acfg
    ==
    assert // transaction type is acfg
    // tests/approvals/precompiled-apps.algo.ts:95
    // receivesAssetConfig(assetCfg: gtxn.AssetConfigTxn): bytes {
    callsub receivesAssetConfig
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_receivesAnyTxn_route@4:
    // tests/approvals/precompiled-apps.algo.ts:84
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/precompiled-apps.algo.ts:79
    // export class ReceivesTxns extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    // tests/approvals/precompiled-apps.algo.ts:84
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    callsub receivesAnyTxn
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getOne_route@3:
    // tests/approvals/precompiled-apps.algo.ts:80
    // getOne(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750000000000000001
    log
    intc_0 // 1
    return

main_bare_routing@9:
    // tests/approvals/precompiled-apps.algo.ts:79
    // export class ReceivesTxns extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAnyTxn(txn: uint64) -> uint64:
receivesAnyTxn:
    // tests/approvals/precompiled-apps.algo.ts:84
    // receivesAnyTxn(txn: gtxn.Transaction): uint64 {
    proto 1 1
    pushbytes ""
    dup
    // tests/approvals/precompiled-apps.algo.ts:85
    // switch (txn.type) {
    frame_dig -1
    gtxns TypeEnum
    dup
    // tests/approvals/precompiled-apps.algo.ts:86
    // case TransactionType.AssetConfig:
    intc_1 // 3
    ==
    // tests/approvals/precompiled-apps.algo.ts:86-87
    // case TransactionType.AssetConfig:
    //   return txn.createdAsset.id || txn.configAsset.id
    bz receivesAnyTxn_after_if_else@6
    // tests/approvals/precompiled-apps.algo.ts:87
    // return txn.createdAsset.id || txn.configAsset.id
    frame_dig -1
    gtxns CreatedAssetID
    dup
    frame_bury 0
    bz receivesAnyTxn_ternary_false@4
    frame_dig 0

receivesAnyTxn_ternary_merge@5:
    // tests/approvals/precompiled-apps.algo.ts:87
    // return txn.createdAsset.id || txn.configAsset.id
    frame_bury 0
    retsub

receivesAnyTxn_ternary_false@4:
    // tests/approvals/precompiled-apps.algo.ts:87
    // return txn.createdAsset.id || txn.configAsset.id
    frame_dig -1
    gtxns ConfigAsset
    b receivesAnyTxn_ternary_merge@5

receivesAnyTxn_after_if_else@6:
    // tests/approvals/precompiled-apps.algo.ts:88
    // case TransactionType.ApplicationCall:
    frame_dig 2
    pushint 6 // 6
    ==
    // tests/approvals/precompiled-apps.algo.ts:88-89
    // case TransactionType.ApplicationCall:
    //   return txn.createdApp.id || txn.appId.id
    bz receivesAnyTxn_after_if_else@12
    // tests/approvals/precompiled-apps.algo.ts:89
    // return txn.createdApp.id || txn.appId.id
    frame_dig -1
    gtxns CreatedApplicationID
    dup
    frame_bury 1
    bz receivesAnyTxn_ternary_false@10
    frame_dig 1

receivesAnyTxn_ternary_merge@11:
    // tests/approvals/precompiled-apps.algo.ts:89
    // return txn.createdApp.id || txn.appId.id
    frame_bury 0
    retsub

receivesAnyTxn_ternary_false@10:
    // tests/approvals/precompiled-apps.algo.ts:89
    // return txn.createdApp.id || txn.appId.id
    frame_dig -1
    gtxns ApplicationID
    b receivesAnyTxn_ternary_merge@11

receivesAnyTxn_after_if_else@12:
    // tests/approvals/precompiled-apps.algo.ts:91
    // return 0
    intc_2 // 0
    frame_bury 0
    retsub


// tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfig(assetCfg: uint64) -> bytes:
receivesAssetConfig:
    // tests/approvals/precompiled-apps.algo.ts:95
    // receivesAssetConfig(assetCfg: gtxn.AssetConfigTxn): bytes {
    proto 1 1
    // tests/approvals/precompiled-apps.algo.ts:96
    // return assetCfg.txnId
    frame_dig -1
    gtxns TxID
    retsub


// tests/approvals/precompiled-apps.algo.ts::ReceivesTxns.receivesAssetConfigAndPay(assetCfg: uint64, payTxn: uint64) -> void:
receivesAssetConfigAndPay:
    // tests/approvals/precompiled-apps.algo.ts:98
    // receivesAssetConfigAndPay(assetCfg: gtxn.AssetConfigTxn, payTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // tests/approvals/precompiled-apps.algo.ts:99
    // assert(assetCfg.type === TransactionType.AssetConfig)
    frame_dig -2
    gtxns TypeEnum
    intc_1 // 3
    ==
    assert
    // tests/approvals/precompiled-apps.algo.ts:100
    // assert(payTxn.type === TransactionType.Payment)
    frame_dig -1
    gtxns TypeEnum
    intc_0 // 1
    ==
    assert
    retsub
