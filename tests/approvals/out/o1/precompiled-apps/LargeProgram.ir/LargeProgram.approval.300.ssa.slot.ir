main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L66
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@3, method "getBigBytesLength()uint64" => block@4, * => block@5}
    block@3: // delete_route_L71
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be DeleteApplication && can only call when not creating
        exit 1u
    block@4: // getBigBytesLength_route_L67
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%10#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::LargeProgram.getBigBytesLength[routing]()
        goto block@5
    block@5: // switch_case_next_L66
        fail
    block@6: // __algots__.defaultCreate_L66
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (! tmp%15#0)
        let tmp%17#0: bool = (&& tmp%14#0 tmp%16#0)
        (assert tmp%17#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/precompiled-apps.algo.ts::LargeProgram.getBigBytesLength[routing]() -> void:
    block@0: // L67
        let tmp%0#2: bytes[4096] = (bzero 4096u)
        let tmp%1#1: uint64 = (len tmp%0#2)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%2#0)
        exit 1u