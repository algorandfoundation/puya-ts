main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/precompiled-apps.algo.ts::HelloBase.constructor()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = tests/approvals/precompiled-apps.algo.ts::Hello.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/precompiled-apps.algo.ts::Hello.__puya_arc4_router__() -> bool:
    block@0: // L35
        let tmp%0#0: bytes = (txna ApplicationArgs 0)
        switch tmp%0#0 {method "delete()void" => block@1, method "update()void" => block@2, * => block@3}
    block@1: // delete_route_L20
        let tmp%1#0: uint64 = (txn OnCompletion)
        let tmp%2#0: bool = (== tmp%1#0 DeleteApplication)
        let tmp%3#0: uint64 = (txn ApplicationID)
        let tmp%4#0: bool = (!= tmp%3#0 0u)
        let tmp%5#0: bool = (&& tmp%2#0 tmp%4#0)
        (assert tmp%5#0) // OnCompletion must be DeleteApplication && can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::HelloBase.delete[routing]()
        goto block@3
    block@2: // update_route_L23
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (== tmp%6#0 UpdateApplication)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be UpdateApplication && can only call when not creating
        tests/approvals/precompiled-apps.algo.ts::HelloBase.update[routing]()
        goto block@3
    block@3: // switch_case_next_L35
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion must be NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        goto tmp%14#0 ? block@4 : block@8
    block@4: // call_NoOp_L35
        let tmp%15#0: bytes = (txna ApplicationArgs 0)
        switch tmp%15#0 {method "greet(string)string" => block@5, method "sendGreetings((string,string))string" => block@6, * => block@7}
    block@5: // greet_route_L26
        tests/approvals/precompiled-apps.algo.ts::HelloBase.greet[routing]()
        goto block@7
    block@6: // sendGreetings_route_L30
        tests/approvals/precompiled-apps.algo.ts::HelloBase.sendGreetings[routing]()
        goto block@7
    block@7: // switch_case_next_L35
        goto block@11
    block@8: // create_NoOp_L35
        let tmp%16#0: bytes = (txna ApplicationArgs 0)
        switch tmp%16#0 {method "helloCreate(string)void" => block@9, * => block@10}
    block@9: // helloCreate_route_L36
        tests/approvals/precompiled-apps.algo.ts::Hello.create[routing]()
        goto block@10
    block@10: // switch_case_next_L35
        goto block@11
    block@11: // after_if_else_L35
        exit 0u

subroutine tests/approvals/precompiled-apps.algo.ts::Hello.create[routing]() -> void:
    block@0: // L36
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%0#0)
        tests/approvals/precompiled-apps.algo.ts::Hello.create(tmp%1#0)
        exit 1u

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.delete[routing]() -> void:
    block@0: // L20
        tests/approvals/precompiled-apps.algo.ts::HelloBase.delete()
        exit 1u

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.update[routing]() -> void:
    block@0: // L23
        tests/approvals/precompiled-apps.algo.ts::HelloBase.update()
        exit 1u

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.greet[routing]() -> void:
    block@0: // L26
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: string = tests/approvals/precompiled-apps.algo.ts::HelloBase.greet(tmp%1#0)
        let tmp%3#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.sendGreetings[routing]() -> void:
    block@0: // L30
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let substring3%0#0: bytes = (substring3 tmp%0#0 extract_uint16%0#0 tuple_len%0#0)
        let length%0#0: uint64 = array_len(substring3%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 4u add%0#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%0#0 2u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let substring3%1#0: bytes = (substring3 tmp%0#0 extract_uint16%1#0 tuple_len%0#0)
        let length%1#0: uint64 = array_len(substring3%1#0)
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%2#0: uint64 = (+ mul%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%2#0: bool = (== len%0#0 add%3#0)
        (assert eq%2#0) // invalid number of bytes for tests/approvals/precompiled-apps.algo.ts::Greeting
        let as_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%0#0
        let tmp%1#0: string = tests/approvals/precompiled-apps.algo.ts::HelloBase.sendGreetings(as_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/precompiled-apps.algo.ts::Hello.create(greeting: string) -> void:
    block@0: // L36
        (app_global_put "greeting" greeting#0)
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.delete() -> void:
    block@0: // L20
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.update() -> void:
    block@0: // L23
        return 

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.greet(name: string) -> string:
    block@0: // L26
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: bytes = (concat "" maybe_value%0#0)
        let tmp%1#0: bytes = (concat tmp%0#0 " ")
        let tmp%2#0: bytes = (concat tmp%1#0 name#0)
        return tmp%2#0

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.sendGreetings(a: Encoded((len+utf8[]),(len+utf8[]))) -> string:
    block@0: // L30
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
        (assert maybe_exists%0#0) // check GlobalState exists
        let tmp%0#0: bytes = (concat "" maybe_value%0#0)
        let tmp%1#0: bytes = (concat tmp%0#0 " ")
        let tuple_item%0#0: Encoded(len+utf8[]) = extract_value(a#0, 0)
        let values%0#0: string = decode_bytes<string>(tuple_item%0#0)
        let tmp%2#0: bytes = (concat tmp%1#0 values%0#0)
        let tuple_item%1#0: Encoded(len+utf8[]) = extract_value(a#0, 1)
        let tmp%3#0: string = decode_bytes<string>(tuple_item%1#0)
        let tmp%4#0: bytes = (concat tmp%2#0 tmp%3#0)
        return tmp%4#0

subroutine tests/approvals/precompiled-apps.algo.ts::HelloBase.constructor() -> void:
    block@0: // L17
        @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor()
        (app_global_put "greeting" "")
        return 

subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor() -> void:
    block@0: // L1
        return 