{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/precompiled-apps.algo.ts"
  ],
  "mappings": ";AA+CA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAKG;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAJD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAHkB;;;AAAT;AAKgB;AAArB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "6": {
      "op": "pushbytess 0x02bf30cf 0x24378d3c // method \"getBigBytesLength()uint64\", method \"delete()void\""
    },
    "18": {
      "op": "txna ApplicationArgs 0"
    },
    "21": {
      "op": "match main_getBigBytesLength_route@3 main_delete_route@4"
    },
    "27": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "op": "return"
    },
    "30": {
      "block": "main_delete_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "32": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "DeleteApplication"
      ]
    },
    "34": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "35": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "36": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "38": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "39": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "41": {
      "op": "return"
    },
    "42": {
      "block": "main_getBigBytesLength_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "44": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "45": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "46": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "48": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "49": {
      "callsub": "tests/approvals/precompiled-apps.algo.ts::LargeProgram.getBigBytesLength",
      "op": "callsub getBigBytesLength",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "52": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "53": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "59": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "61": {
      "op": "log",
      "stack_out": []
    },
    "62": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "64": {
      "op": "return"
    },
    "65": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "67": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "70": {
      "op": "txn ApplicationID"
    },
    "72": {
      "op": "!"
    },
    "73": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "74": {
      "op": "pushint 1 // 1"
    },
    "76": {
      "op": "return"
    },
    "77": {
      "subroutine": "tests/approvals/precompiled-apps.algo.ts::LargeProgram.getBigBytesLength",
      "params": {},
      "block": "getBigBytesLength",
      "stack_in": [],
      "op": "pushint 4096 // 4096",
      "defined_out": [
        "4096"
      ],
      "stack_out": [
        "4096"
      ]
    },
    "80": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "81": {
      "op": "len",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "82": {
      "retsub": true,
      "op": "retsub"
    }
  }
}