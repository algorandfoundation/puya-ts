#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x60d93beb 0x6618726a // method "test(uint64,byte[])(uint64)", method "test2(byte[])(byte[])"
    txna ApplicationArgs 0
    match test test2
    err

main___algots__.defaultCreate@9:
    // tests/approvals/jsdoc.algo.ts:20
    // export class JSDocDemo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/jsdoc.algo.ts::JSDocDemo.test[routing]() -> void:
test:
    // tests/approvals/jsdoc.algo.ts:30
    // test(a: uint64, b: bytes): DemoStruct {
    pushbytes 0x151f7c75
    txna ApplicationArgs 1
    concat
    log
    pushint 1 // 1
    return


// tests/approvals/jsdoc.algo.ts::JSDocDemo.test2[routing]() -> void:
test2:
    // tests/approvals/jsdoc.algo.ts:39
    // test2(a: bytes): DemoType {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/jsdoc.algo.ts:40-42
    // return {
    //   a,
    // }
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // tests/approvals/jsdoc.algo.ts:39-42
    // test2(a: bytes): DemoType {
    //   return {
    //     a,
    //   }
    pushbytes 0x151f7c750002
    // tests/approvals/jsdoc.algo.ts:39
    // test2(a: bytes): DemoType {
    swap
    // tests/approvals/jsdoc.algo.ts:39-42
    // test2(a: bytes): DemoType {
    //   return {
    //     a,
    //   }
    concat
    // tests/approvals/jsdoc.algo.ts:39
    // test2(a: bytes): DemoType {
    log
    pushint 1 // 1
    return
