main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__() -> bool:
    block@0: // L20
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,byte[])(uint64)" => block@2, method "test2(byte[])(byte[])" => block@3, * => block@4}
    block@2: // test_route_L30
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 2)
        let tmp%9#0: bytes = ((extract 2 0) tmp%8#0)
        let tmp%10#0: bytes[8] = tests/approvals/jsdoc.algo.ts::JSDocDemo.test(tmp%7#0, tmp%9#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 tmp%10#0)
        (log tmp%11#0)
        return 1u
    block@3: // test2_route_L39
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let tmp%16#0: bytes = (txna ApplicationArgs 1)
        let tmp%17#0: bytes = ((extract 2 0) tmp%16#0)
        let elements_to_encode%0#0: bytes = tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(tmp%17#0)
        let length%0#0: uint64 = (len elements_to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%0#0)
        let current_tail_offset%0#0: uint64 = 2u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 encoded_value%0#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%18#0)
        return 1u
    block@4: // switch_case_default_L20
        goto block@5
    block@5: // switch_case_next_L20
        goto block@10
    block@6: // bare_routing_L20
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L20
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L20
        goto block@9
    block@9: // switch_case_next_L20
        goto block@10
    block@10: // after_if_else_L20
        return 0u

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test(a: uint64, b: bytes) -> bytes[8]:
    block@0: // L30
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let current_tail_offset%0#0: uint64 = 8u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        return encoded_tuple_buffer%1#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(a: bytes) -> bytes:
    block@0: // L39
        return a#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.__algots__.defaultCreate() -> void:
    block@0: // L20
        return 