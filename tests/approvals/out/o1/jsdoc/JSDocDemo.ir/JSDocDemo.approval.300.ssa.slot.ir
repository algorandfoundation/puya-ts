main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L20
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,byte[])(uint64)" => block@3, method "test2(byte[])(byte[])" => block@4, * => block@11}
    block@3: // test_route_L30
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%9#0: Encoded(uint64) = tests/approvals/jsdoc.algo.ts::JSDocDemo.test(tmp%7#0, tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // test2_route_L39
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%15#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%16#0: Encoded((len+uint8[])) = tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(tmp%15#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
        (log tmp%17#0)
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L20
        let tmp%18#0: uint64 = (txn OnCompletion)
        goto tmp%18#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L20
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L20
        let tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#2 <- block@8, tests/approvals/jsdoc.algo.ts::JSDocDemo.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test(a: uint64, b: bytes) -> Encoded(uint64):
    block@0: // L30
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a#0)
        return aggregate%val_as_bytes%0#1

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test2(a: bytes) -> Encoded((len+uint8[])):
    block@0: // L39
        let aggregate%length%0#1: uint64 = (len a#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 a#0)
        let aggregate%concat%0#1: bytes = (concat 0x0002 aggregate%encoded_value%0#1)
        return aggregate%concat%0#1