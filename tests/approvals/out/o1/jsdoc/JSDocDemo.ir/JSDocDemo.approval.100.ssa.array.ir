main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L20
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test(uint64,byte[])(uint64)" => block@4, method "test2(byte[])(byte[])" => block@5, * => block@8}
    block@4: // test_route_L30
        tests/approvals/jsdoc.algo.ts::JSDocDemo.test[routing]()
        goto block@8
    block@5: // test2_route_L39
        tests/approvals/jsdoc.algo.ts::JSDocDemo.test2[routing]()
        goto block@8
    block@8: // after_if_else_L20
        fail
    block@9: // __algots__.defaultCreate_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test[routing]() -> void:
    block@0: // L30
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%2#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for (len+uint8[])
        let aggregate%head%0#0: bytes = (concat 0x tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%head%0#0
        let tmp%1#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/jsdoc.algo.ts::JSDocDemo.test2[routing]() -> void:
    block@0: // L39
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let a#0: bytes = ((extract 2 0) tmp%0#0)
        let aggregate%length%0#0: uint64 = (len a#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 a#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 2u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+uint8[]))%0#0: Encoded((len+uint8[])) = aggregate%concat%0#0
        let tmp%0#1: Encoded((len+uint8[])) = aggregate%as_Encoded((len+uint8[]))%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%0#1)
        (log tmp%3#0)
        exit 1u