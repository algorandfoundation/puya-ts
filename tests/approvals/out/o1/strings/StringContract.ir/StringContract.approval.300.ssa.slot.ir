main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L3
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "join(string,string)string" => block@4, method "interpolate(string)string" => block@5, * => block@8}
    block@4: // join_route_L4
        tests/approvals/strings.algo.ts::StringContract.join[routing]()
        goto block@8
    block@5: // interpolate_route_L8
        tests/approvals/strings.algo.ts::StringContract.interpolate[routing]()
        goto block@8
    block@8: // after_if_else_L3
        fail
    block@9: // __algots__.defaultCreate_L3
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/strings.algo.ts::StringContract.join[routing]() -> void:
    block@0: // L4
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let a#0: string = ((extract 2 0) tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let b#0: string = ((extract 2 0) tmp%2#0)
        let tmp%0#1: string = (concat a#0 b#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#1)
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%6#0)
        exit 1u

subroutine tests/approvals/strings.algo.ts::StringContract.interpolate[routing]() -> void:
    block@0: // L8
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let a#0: string = ((extract 2 0) tmp%0#0)
        let tmp%0#1: bytes = (concat "You interpolated " a#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%4#0)
        exit 1u