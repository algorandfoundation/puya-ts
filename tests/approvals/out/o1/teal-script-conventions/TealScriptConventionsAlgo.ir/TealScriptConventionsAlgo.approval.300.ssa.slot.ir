main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "noMoreThanks(uint64)uint64" => block@3, method "createApplication(byte[])void" => block@4, method "optInToApplication()void" => block@5, method "updateApplication()void" => block@6, method "setLocal(string)void" => block@7, * => block@8}
    block@3: // noMoreThanks_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 CloseOut)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be CloseOut && can only call when not creating
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.closeOutOfApplication[routing]()
        goto block@8
    block@4: // createApplication_route_L12
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: uint64 = (shl 1u tmp%8#0)
        let tmp%10#0: uint64 = (& tmp%9#0 33u)
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (! tmp%11#0)
        let tmp%13#0: bool = (&& tmp%10#0 tmp%12#0)
        (assert tmp%13#0) // OnCompletion must be one of NoOp, DeleteApplication && can only call when creating
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.createApplication[routing]()
        goto block@8
    block@5: // optInToApplication_route_L23
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 OptIn)
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (&& tmp%15#0 tmp%16#0)
        (assert tmp%18#0) // OnCompletion must be OptIn && can only call when not creating
        exit 1u
    block@6: // updateApplication_route_L25
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 UpdateApplication)
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (&& tmp%20#0 tmp%21#0)
        (assert tmp%23#0) // OnCompletion must be UpdateApplication && can only call when not creating
        exit 1u
    block@7: // setLocal_route_L17
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (&& tmp%25#0 tmp%26#0)
        (assert tmp%28#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.setLocal[routing]()
        goto block@8
    block@8: // switch_case_next_L5
        fail
    block@9: // deleteApplication_L20
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 DeleteApplication)
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%33#0: bool = (&& tmp%30#0 tmp%31#0)
        (assert tmp%33#0) // OnCompletion must be DeleteApplication && can only call when not creating
        exit 1u

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.closeOutOfApplication[routing]() -> void:
    block@0: // L8
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%3#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(uint64)%0#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.createApplication[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let value#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        (app_global_put "global" value#0)
        exit 1u

subroutine tests/approvals/teal-script-conventions.algo.ts::TealScriptConventionsAlgo.setLocal[routing]() -> void:
    block@0: // L17
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let value#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#1: account = (txn Sender)
        (app_local_put tmp%0#1 "local" value#0)
        exit 1u