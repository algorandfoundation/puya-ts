main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L14
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getMbr()uint64" => block@4, method "bootstrap(pay)void" => block@5, method "increaseXCount(uint64,uint64)void" => block@6, method "getCounts(uint64)(uint64,uint8)" => block@7, * => block@10}
    block@4: // getMbr_route_L17
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr[routing]()
        goto block@10
    block@5: // bootstrap_route_L21
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap[routing]()
        goto block@10
    block@6: // increaseXCount_route_L29
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount[routing]()
        goto block@10
    block@7: // getCounts_route_L33
        tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts[routing]()
        goto block@10
    block@10: // after_if_else_L14
        fail
    block@11: // __algots__.defaultCreate_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getMbr[routing]() -> void:
    block@0: // L17
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 2982900u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.bootstrap[routing]() -> void:
    block@0: // L21
        let tmp%0#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%1#0: bool = (== tmp%0#1 2982900u)
        let tmp%2#0: account = ((gtxns Receiver) pay#0)
        let tmp%3#0: account = (global CurrentApplicationAddress)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (&& tmp%1#0 tmp%4#0)
        (assert tmp%5#0) // assert target is match for conditions
        (box_create "x" 7200u)
        exit 1u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.increaseXCount[routing]() -> void:
    block@0: // L29
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let xCount#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let box%element_offset%1#0: uint64 = (* index#0 9u)
        let box%box_extract%1#0: Encoded(uint64,uint8) = (box_extract "x" box%element_offset%1#0 9u)
        let aggregate%extract%0#0: bytes = (extract3 box%box_extract%1#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#1: uint64 = (+ values%0#0 xCount#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        (box_replace "x" box%element_offset%1#0 encoded_value%0#0)
        exit 1u

subroutine tests/approvals/large-objects-in-state.algo.ts::LargeObjectsInStateAlgo.getCounts[routing]() -> void:
    block@0: // L33
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%element_offset%0#0: uint64 = (* index#0 9u)
        let box%box_extract%0#0: Encoded(uint64,uint8) = (box_extract "x" box%element_offset%0#0 9u)
        let tmp%2#0: bytes = (concat 0x151f7c75 box%box_extract%0#0)
        (log tmp%2#0)
        exit 1u