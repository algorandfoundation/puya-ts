{
    "name": "AssertMatchContract",
    "structs": {},
    "methods": [
        {
            "name": "testPay",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        28
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        71
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        31
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        41
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAxG0EANYAEj+92aDYaAI4BAAIjQzEZFEQxGEQxFiIJSTgQIhJEiAAdgAEAI08CVIAEFR98dUxQsCJDMRlA/9MxGBREIkOKAQGL/zgISYGotAYOQQBFiwCBoI0GD0EAO4v/OAAxABJBADGL/zgHMgoSQQAni/84CTIDEkEAHYv/OAIiDUEAFIv/OASBgICAgIAgDEEABSJEIkyJI0L/+A==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}