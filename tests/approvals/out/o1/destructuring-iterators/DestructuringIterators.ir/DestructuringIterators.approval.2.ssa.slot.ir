main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@10}
    block@3: // test_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.test()
        let tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L17
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L17
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L17
        let tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router__%0#0 <- block@3, tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router__%0#1 <- block@7, tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.test() -> void:
    block@0: // L18
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let temp.a#0: uint64 = 1u
        goto block@2
    block@2: // for_body_L11
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4)
        let temp.a#1: uint64 = φ(temp.a#0 <- block@0, temp.a#2 <- block@3, temp.a#3 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4)
        let total#2: uint64 = (+ total#1 temp.a#1)
        goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5
    block@3: // for_header_1_L11
        let loop_counter%0#2: uint64 = 1u
        let temp.a#2: uint64 = 2u
        goto block@2
    block@4: // for_header_2_L11
        let loop_counter%0#3: uint64 = 2u
        let temp.a#3: uint64 = 3u
        goto block@2
    block@5: // after_for_L11
        let tmp%1#0: bool = (== total#2 6u)
        (assert tmp%1#0)
        return 