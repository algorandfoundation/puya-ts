main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@4}
    block@3: // test_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.test[routing]()
        goto block@4
    block@4: // switch_case_next_L17
        fail
    block@5: // __algots__.defaultCreate_L17
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/destructuring-iterators.algo.ts::DestructuringIterators.test[routing]() -> void:
    block@0: // L18
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let temp.a#0: uint64 = 1u
        goto block@2
    block@2: // for_body_L11
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4)
        let temp.a#1: uint64 = φ(temp.a#0 <- block@0, temp.a#2 <- block@3, temp.a#3 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4)
        let total#2: uint64 = (+ total#1 temp.a#1)
        goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5
    block@3: // for_header_1_L11
        let loop_counter%0#2: uint64 = 1u
        let temp.a#2: uint64 = 2u
        goto block@2
    block@4: // for_header_2_L11
        let loop_counter%0#3: uint64 = 2u
        let temp.a#3: uint64 = 3u
        goto block@2
    block@5: // after_for_L11
        let tmp%1#0: bool = (== total#2 6u)
        (assert tmp%1#0)
        exit 1u