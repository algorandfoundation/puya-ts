{
    "hints": {
        "test_for_of_loop_tuple((uint64,uint64,uint64))uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_for_of_loop_destructured_tuple(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_for_of_loop_destructured_object((uint64,uint64)[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_for_of_loop_arc4_dynamic_array(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_for_of_loop_arc4_static_array(uint64[5])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_for_of_loop_native_immutable_array(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_iterable_props(uint64[3],uint64[3],uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ForOfLoopsAlgo",
        "methods": [
            {
                "name": "test_for_of_loop_tuple",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_for_of_loop_destructured_tuple",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_for_of_loop_destructured_object",
                "args": [
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_for_of_loop_arc4_dynamic_array",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_for_of_loop_arc4_static_array",
                "args": [
                    {
                        "type": "uint64[5]",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_for_of_loop_native_immutable_array",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_for_of_loop_native_mutable_array",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "items"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_iterable_props",
                "args": [
                    {
                        "type": "uint64[3]",
                        "name": "static_array"
                    },
                    {
                        "type": "uint64[3]",
                        "name": "fixed_array"
                    },
                    {
                        "type": "uint64[]",
                        "name": "dyn_array"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}