main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L8
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@4, method "test_for_of_loop_destructured_tuple(uint64[])uint64" => block@5, method "test_for_of_loop_destructured_object((uint64,uint64)[])uint64" => block@6, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@7, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@8, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@9, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@10, method "test_iterable_props(uint64[3],uint64[3],uint64[])uint64" => block@11, * => block@14}
    block@4: // test_for_of_loop_tuple_route_L9
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple[routing]()
        goto block@14
    block@5: // test_for_of_loop_destructured_tuple_route_L18
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_tuple[routing]()
        goto block@14
    block@6: // test_for_of_loop_destructured_object_route_L27
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_object[routing]()
        goto block@14
    block@7: // test_for_of_loop_arc4_dynamic_array_route_L36
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array[routing]()
        goto block@14
    block@8: // test_for_of_loop_arc4_static_array_route_L45
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array[routing]()
        goto block@14
    block@9: // test_for_of_loop_native_immutable_array_route_L54
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array[routing]()
        goto block@14
    block@10: // test_for_of_loop_native_mutable_array_route_L63
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array[routing]()
        goto block@14
    block@11: // test_iterable_props_route_L73
        tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_iterable_props[routing]()
        goto block@14
    block@14: // after_if_else_L8
        fail
    block@15: // __algots__.defaultCreate_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple[routing]() -> void:
    block@0: // L9
        let reinterpret_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64,uint64)%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64,uint64)%0#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%1#0)
        let aggregate%extract%2#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64,uint64)%0#0 16u 8u)
        let aggregate%item2%0#0: uint64 = (btoi aggregate%extract%2#0)
        let (items.0#0: uint64, items.1#0: uint64, items.2#0: uint64) = (aggregate%item0%0#0, aggregate%item1%0#0, aggregate%item2%0#0)
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@2
    block@2: // for_body_L11
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@6, loop_counter%0#3 <- block@7)
        let temp#1: uint64 = φ(items.0#0 <- block@0, items.1#0 <- block@6, items.2#0 <- block@7)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@6, total#2 <- block@7)
        let total#2: uint64 = (+ total#1 temp#1)
        let tmp%1#1: bool = (== temp#1 42u)
        goto tmp%1#1 ? block@9 : block@4
    block@4: // after_if_else_L13
        goto_nth [block@6, block@7][loop_counter%0#1] else goto block@9
    block@6: // for_header_1_L11
        let loop_counter%0#2: uint64 = 1u
        goto block@2
    block@7: // for_header_2_L11
        let loop_counter%0#3: uint64 = 2u
        goto block@2
    block@9: // L11
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#2)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_tuple[routing]() -> void:
    block@0: // L18
        let items#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L20
        let temp.0#0: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< temp.0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L20
        let aggregate%total_length%0#0: uint64 = (len items#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 items#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* temp.0#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let temp.1#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let tmp%0#1: uint64 = (btoi temp.1#0)
        let total#2: uint64 = (+ total#1 tmp%0#1)
        let tmp%2#1: bool = (>= total#2 42u)
        goto tmp%2#1 ? block@4 : block@5
    block@4: // if_body_L22
        goto block@8
    block@5: // after_if_else_L22
        let item_index_internal%0#2: uint64 = (+ temp.0#0 1u)
        goto block@2
    block@7: // after_for_L20
        goto block@8
    block@8: // L20
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@7)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#3)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_object[routing]() -> void:
    block@0: // L27
        let items#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L29
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L29
        let aggregate%total_length%0#0: uint64 = (len items#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 items#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = (extract3 aggregate%encoded_element%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let x#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%total_length%1#0: uint64 = (len items#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 items#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let aggregate%extract%1#0: bytes = (extract3 aggregate%encoded_element%1#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let y#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#1: uint64 = (+ x#0 y#0)
        let total#2: uint64 = (+ total#1 tmp%0#1)
        let tmp%2#1: bool = (>= total#2 42u)
        goto tmp%2#1 ? block@4 : block@5
    block@4: // if_body_L31
        goto block@8
    block@5: // after_if_else_L31
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@7: // after_for_L29
        goto block@8
    block@8: // L29
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@7)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#3)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array[routing]() -> void:
    block@0: // L36
        let items#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L38
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L38
        let aggregate%total_length%0#0: uint64 = (len items#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 items#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let temp#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let tmp%0#1: uint64 = (btoi temp#0)
        let total#2: uint64 = (+ total#1 tmp%0#1)
        let tmp%3#0: bool = (== tmp%0#1 42u)
        goto tmp%3#0 ? block@4 : block@5
    block@4: // if_body_L40
        goto block@8
    block@5: // after_if_else_L40
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@7: // after_for_L38
        goto block@8
    block@8: // L38
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@7)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#3)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array[routing]() -> void:
    block@0: // L45
        let items#0: Encoded(uint64[5]) = (txna ApplicationArgs 1)
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = 5u
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L47
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L47
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 items#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let temp#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let tmp%0#1: uint64 = (btoi temp#0)
        let total#2: uint64 = (+ total#1 tmp%0#1)
        let tmp%3#0: bool = (== tmp%0#1 42u)
        goto tmp%3#0 ? block@4 : block@5
    block@4: // if_body_L49
        goto block@8
    block@5: // after_if_else_L49
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@7: // after_for_L47
        goto block@8
    block@8: // L47
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@7)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#3)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array[routing]() -> void:
    block@0: // L54
        let items#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L56
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L56
        let aggregate%total_length%0#0: uint64 = (len items#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 items#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let temp#0: uint64 = (btoi array_item%0#0)
        let total#2: uint64 = (+ total#1 temp#0)
        let tmp%1#1: bool = (== temp#0 42u)
        goto tmp%1#1 ? block@4 : block@5
    block@4: // if_body_L58
        goto block@8
    block@5: // after_if_else_L58
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@7: // after_for_L56
        goto block@8
    block@8: // L56
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@7)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#3)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array[routing]() -> void:
    block@0: // L63
        let items#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 items#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 items#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 items#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob values%2#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let mutable#0: Encoded(uint64[])* = new()
        store(mutable#0, encoded_array%0#0)
        let total#0: uint64 = 0u
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(mutable#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let array_length%0#0: uint64 = aggregate%array_len%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L66
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L66
        let slot_contents%0#0: Encoded(uint64[]) = load(mutable#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let temp#0: uint64 = (btoi array_item%0#0)
        let total#2: uint64 = (+ total#1 temp#0)
        let tmp%1#1: bool = (== temp#0 42u)
        goto tmp%1#1 ? block@4 : block@5
    block@4: // if_body_L68
        goto block@8
    block@5: // after_if_else_L68
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@7: // after_for_L66
        goto block@8
    block@8: // L66
        let total#3: uint64 = φ(total#2 <- block@4, total#1 <- block@7)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob total#3)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_iterable_props[routing]() -> void:
    block@0: // L73
        let static_array#0: Encoded(uint64[3]) = (txna ApplicationArgs 1)
        let fixed_array#0: Encoded(uint64[3]) = (txna ApplicationArgs 2)
        let dyn_array#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        let i#0: uint64 = 0u
        let tmp%0#1: uint64 = 3u
        let temp#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L75
        let temp#1: uint64 = φ(temp#0 <- block@0, temp#2 <- block@3)
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< temp#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L75
        let i#2: uint64 = (+ i#1 1u)
        let temp#2: uint64 = (+ temp#1 1u)
        goto block@2
    block@5: // after_for_L75
        let array_length%0#0: uint64 = 3u
        let item_index_internal%0#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L78
        let temp₁.0#0: uint64 = φ(item_index_internal%0#0 <- block@5, item_index_internal%0#2 <- block@7)
        let i#3: uint64 = φ(i#1 <- block@5, i#4 <- block@7)
        let continue_looping%1#0: bool = (< temp₁.0#0 array_length%0#0)
        goto continue_looping%1#0 ? block@7 : block@9
    block@7: // for_body_L78
        let i#4: uint64 = (+ i#3 1u)
        let item_index_internal%0#2: uint64 = (+ temp₁.0#0 1u)
        goto block@6
    block@9: // after_for_L78
        let tmp%3#0: uint64 = 3u
        let temp₂#0: uint64 = 0u
        goto block@10
    block@10: // for_header_L81
        let temp₂#1: uint64 = φ(temp₂#0 <- block@9, temp₂#2 <- block@11)
        let i#5: uint64 = φ(i#3 <- block@9, i#6 <- block@11)
        let continue_looping%2#0: bool = (< temp₂#1 tmp%3#0)
        goto continue_looping%2#0 ? block@11 : block@13
    block@11: // for_body_L81
        let i#6: uint64 = (+ i#5 1u)
        let temp₂#2: uint64 = (+ temp₂#1 1u)
        goto block@10
    block@13: // after_for_L81
        let array_length%1#0: uint64 = 3u
        let item_index_internal%1#0: uint64 = 0u
        goto block@14
    block@14: // for_header_L84
        let temp₃.0#0: uint64 = φ(item_index_internal%1#0 <- block@13, item_index_internal%1#2 <- block@15)
        let i#7: uint64 = φ(i#5 <- block@13, i#8 <- block@15)
        let continue_looping%3#0: bool = (< temp₃.0#0 array_length%1#0)
        goto continue_looping%3#0 ? block@15 : block@17
    block@15: // for_body_L84
        let i#8: uint64 = (+ i#7 1u)
        let item_index_internal%1#2: uint64 = (+ temp₃.0#0 1u)
        goto block@14
    block@17: // after_for_L84
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dyn_array#0 0u)
        let tmp%6#0: uint64 = aggregate%array_length%0#0
        let temp₄#0: uint64 = 0u
        goto block@18
    block@18: // for_header_L87
        let temp₄#1: uint64 = φ(temp₄#0 <- block@17, temp₄#2 <- block@19)
        let i#9: uint64 = φ(i#7 <- block@17, i#10 <- block@19)
        let continue_looping%4#0: bool = (< temp₄#1 tmp%6#0)
        goto continue_looping%4#0 ? block@19 : block@21
    block@19: // for_body_L87
        let i#10: uint64 = (+ i#9 1u)
        let temp₄#2: uint64 = (+ temp₄#1 1u)
        goto block@18
    block@21: // after_for_L87
        let aggregate%array_length%1#0: uint64 = (extract_uint16 dyn_array#0 0u)
        let array_length%2#0: uint64 = aggregate%array_length%1#0
        let item_index_internal%2#0: uint64 = 0u
        goto block@22
    block@22: // for_header_L90
        let temp₅.0#0: uint64 = φ(item_index_internal%2#0 <- block@21, item_index_internal%2#2 <- block@23)
        let i#11: uint64 = φ(i#9 <- block@21, i#12 <- block@23)
        let continue_looping%5#0: bool = (< temp₅.0#0 array_length%2#0)
        goto continue_looping%5#0 ? block@23 : block@25
    block@23: // for_body_L90
        let i#12: uint64 = (+ i#11 1u)
        let item_index_internal%2#2: uint64 = (+ temp₅.0#0 1u)
        goto block@22
    block@25: // after_for_L90
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#11)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u