main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@3, method "test_for_of_loop_destructured_tuple(uint64[])uint64" => block@4, method "test_for_of_loop_destructured_object((uint64,uint64)[])uint64" => block@5, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@6, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@7, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@8, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@9, method "test_iterable_props(uint64[3],uint64[3],uint64[])uint64" => block@10, * => block@17}
    block@3: // test_for_of_loop_tuple_route_L9
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%item0%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 0u)
        let aggregate%item1%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 8u)
        let aggregate%item2%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64,uint64)%0#0 16u)
        let tmp%10#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(aggregate%item0%0#1, aggregate%item1%0#1, aggregate%item2%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%10#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#1)
        (log tmp%12#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // test_for_of_loop_destructured_tuple_route_L18
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_tuple(reinterpret_Encoded(len+uint64[])%0#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%17#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#1)
        (log tmp%19#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // test_for_of_loop_destructured_object_route_L27
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%24#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_object(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%24#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%2#1)
        (log tmp%26#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // test_for_of_loop_arc4_dynamic_array_route_L36
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%31#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(reinterpret_Encoded(len+uint64[])%1#0)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%31#0)
        let tmp%33#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%3#1)
        (log tmp%33#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // test_for_of_loop_arc4_static_array_route_L45
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64[5])%0#0: Encoded(uint64[5]) = (txna ApplicationArgs 1)
        let tmp%38#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(reinterpret_Encoded(uint64[5])%0#0)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%38#0)
        let tmp%40#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%4#1)
        (log tmp%40#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // test_for_of_loop_native_immutable_array_route_L54
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(reinterpret_Encoded(len+uint64[])%2#0)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%45#0)
        let tmp%47#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%5#1)
        (log tmp%47#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // test_for_of_loop_native_mutable_array_route_L63
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,uint64)%1#0: Encoded(uint64,uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%52#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(reinterpret_Encoded(uint64,uint64,uint64)%1#0)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%52#0)
        let tmp%54#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%6#1)
        (log tmp%54#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // test_iterable_props_route_L73
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let reinterpret_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64[3])%1#0: Encoded(uint64[3]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+uint64[])%3#0: Encoded(len+uint64[]) = (txna ApplicationArgs 3)
        let tmp%59#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_iterable_props(reinterpret_Encoded(uint64[3])%0#0, reinterpret_Encoded(uint64[3])%1#0, reinterpret_Encoded(len+uint64[])%3#0)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%59#0)
        let tmp%61#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%7#1)
        (log tmp%61#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L8
        let tmp%62#0: uint64 = (txn OnCompletion)
        goto tmp%62#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L8
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // can only call when creating
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L8
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
    block@0: // L9
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L11
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@5, loop_counter%0#3 <- block@6)
        let temp#1: uint64 = φ(items.0#0 <- block@0, items.1#0 <- block@5, items.2#0 <- block@6)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5, total#2 <- block@6)
        let total#2: uint64 = (+ total#1 temp#1)
        let tmp%1#0: bool = (== temp#1 42u)
        goto tmp%1#0 ? block@8 : block@3
    block@3: // after_if_else_L13
        goto_nth [block@5, block@6][loop_counter%0#1] else goto block@8
    block@5: // for_header_1_L11
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@6: // for_header_2_L11
        let loop_counter%0#3: uint64 = 2u
        goto block@1
    block@8: // L11
        return total#2

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_tuple(items: Encoded(len+uint64[])) -> uint64:
    block@0: // L18
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L20
        let temp.0#0: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< temp.0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L20
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#0)
        let aggregate%bytes_offset%0#1: uint64 = (* temp.0#0 8u)
        let tmp%0#0: uint64 = (extract_uint64 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let tmp%2#0: bool = (>= total#2 42u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L22
        goto block@7
    block@4: // after_if_else_L22
        let item_index_internal%0#2: uint64 = (+ temp.0#0 1u)
        goto block@1
    block@6: // after_for_L20
        goto block@7
    block@7: // L20
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_object(items: Encoded(len+(uint64,uint64)[])) -> uint64:
    block@0: // L27
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L29
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L29
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 16u) // on error: index access is out of bounds
        let x#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 0u)
        let y#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 8u)
        let tmp%0#0: uint64 = (+ x#0 y#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let tmp%2#0: bool = (>= total#2 42u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L31
        goto block@7
    block@4: // after_if_else_L31
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L29
        goto block@7
    block@7: // L29
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(items: Encoded(len+uint64[])) -> uint64:
    block@0: // L36
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L38
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L38
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let tmp%0#0: uint64 = (extract_uint64 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let tmp%3#0: bool = (== tmp%0#0 42u)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L40
        goto block@7
    block@4: // after_if_else_L40
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L38
        goto block@7
    block@7: // L38
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(items: Encoded(uint64[5])) -> uint64:
    block@0: // L45
        let total#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L47
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 5u)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L47
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let tmp%0#0: uint64 = (extract_uint64 items#0 aggregate%bytes_offset%0#1)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let tmp%3#0: bool = (== tmp%0#0 42u)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L49
        goto block@7
    block@4: // after_if_else_L49
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L47
        goto block@7
    block@7: // L47
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(items: Encoded(len+uint64[])) -> uint64:
    block@0: // L54
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L56
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L56
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) items#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let temp#0: uint64 = (extract_uint64 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1)
        let total#2: uint64 = (+ total#1 temp#0)
        let tmp%1#0: bool = (== temp#0 42u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L58
        goto block@7
    block@4: // after_if_else_L58
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L56
        goto block@7
    block@7: // L56
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(items: Encoded(uint64,uint64,uint64)) -> uint64:
    block@0: // L63
        let values%0#0: uint64 = (extract_uint64 items#0 0u)
        let values%1#0: uint64 = (extract_uint64 items#0 8u)
        let values%2#0: uint64 = (extract_uint64 items#0 16u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob values%0#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob values%1#0)
        let aggregate%head%1#1: bytes = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob values%2#0)
        let aggregate%head%2#1: bytes = (concat aggregate%head%1#1 aggregate%val_as_bytes%2#1)
        store(local.0, aggregate%head%2#1)
        let total#0: uint64 = 0u
        let bytes_len%0#0: uint64 = (len aggregate%head%2#1)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L66
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_len%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L66
        let slot_contents%1#0: Encoded(uint64[]) = load(local.0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let temp#0: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%0#1)
        let total#2: uint64 = (+ total#1 temp#0)
        let tmp%1#0: bool = (== temp#0 42u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L68
        goto block@7
    block@4: // after_if_else_L68
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L66
        goto block@7
    block@7: // L66
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_iterable_props(static_array: Encoded(uint64[3]), fixed_array: Encoded(uint64[3]), dyn_array: Encoded(len+uint64[])) -> uint64:
    block@0: // L73
        let i#0: uint64 = 0u
        let temp#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L75
        let temp#1: uint64 = φ(temp#0 <- block@0, temp#2 <- block@2)
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< temp#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L75
        let i#2: uint64 = (+ i#1 1u)
        let temp#2: uint64 = (+ temp#1 1u)
        goto block@1
    block@4: // after_for_L75
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L78
        let temp₁.0#0: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@6)
        let i#3: uint64 = φ(i#1 <- block@4, i#4 <- block@6)
        let continue_looping%1#0: bool = (< temp₁.0#0 3u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L78
        let i#4: uint64 = (+ i#3 1u)
        let item_index_internal%0#2: uint64 = (+ temp₁.0#0 1u)
        goto block@5
    block@8: // after_for_L78
        let temp₂#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L81
        let temp₂#1: uint64 = φ(temp₂#0 <- block@8, temp₂#2 <- block@10)
        let i#5: uint64 = φ(i#3 <- block@8, i#6 <- block@10)
        let continue_looping%2#0: bool = (< temp₂#1 3u)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L81
        let i#6: uint64 = (+ i#5 1u)
        let temp₂#2: uint64 = (+ temp₂#1 1u)
        goto block@9
    block@12: // after_for_L81
        let item_index_internal%1#0: uint64 = 0u
        goto block@13
    block@13: // for_header_L84
        let temp₃.0#0: uint64 = φ(item_index_internal%1#0 <- block@12, item_index_internal%1#2 <- block@14)
        let i#7: uint64 = φ(i#5 <- block@12, i#8 <- block@14)
        let continue_looping%3#0: bool = (< temp₃.0#0 3u)
        goto continue_looping%3#0 ? block@14 : block@16
    block@14: // for_body_L84
        let i#8: uint64 = (+ i#7 1u)
        let item_index_internal%1#2: uint64 = (+ temp₃.0#0 1u)
        goto block@13
    block@16: // after_for_L84
        let array_length%0#0: uint64 = (extract_uint16 dyn_array#0 0u)
        let temp₄#0: uint64 = 0u
        goto block@17
    block@17: // for_header_L87
        let temp₄#1: uint64 = φ(temp₄#0 <- block@16, temp₄#2 <- block@18)
        let i#9: uint64 = φ(i#7 <- block@16, i#10 <- block@18)
        let continue_looping%4#0: bool = (< temp₄#1 array_length%0#0)
        goto continue_looping%4#0 ? block@18 : block@20
    block@18: // for_body_L87
        let i#10: uint64 = (+ i#9 1u)
        let temp₄#2: uint64 = (+ temp₄#1 1u)
        goto block@17
    block@20: // after_for_L87
        let item_index_internal%2#0: uint64 = 0u
        goto block@21
    block@21: // for_header_L90
        let temp₅.0#0: uint64 = φ(item_index_internal%2#0 <- block@20, item_index_internal%2#2 <- block@22)
        let i#11: uint64 = φ(i#9 <- block@20, i#12 <- block@22)
        let continue_looping%5#0: bool = (< temp₅.0#0 array_length%0#0)
        goto continue_looping%5#0 ? block@22 : block@24
    block@22: // for_body_L90
        let i#12: uint64 = (+ i#11 1u)
        let item_index_internal%2#2: uint64 = (+ temp₅.0#0 1u)
        goto block@21
    block@24: // after_for_L90
        return i#11