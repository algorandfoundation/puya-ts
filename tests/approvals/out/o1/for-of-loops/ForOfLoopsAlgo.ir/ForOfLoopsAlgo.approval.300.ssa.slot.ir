main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64" => block@3, method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64" => block@4, method "test_for_of_loop_arc4_static_array(uint64[5])uint64" => block@5, method "test_for_of_loop_native_immutable_array(uint64[])uint64" => block@6, method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64" => block@7, * => block@14}
    block@3: // test_for_of_loop_tuple_route_L8
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let value_len%0#0: uint64 = (len tmp%7#0)
        let size_is_correct%0#0: bool = (== value_len%0#0 24u)
        (assert size_is_correct%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>
        let item0%1#0: uint64 = (extract_uint64 tmp%7#0 0u)
        let item1%1#0: uint64 = (extract_uint64 tmp%7#0 8u)
        let item2%1#0: uint64 = (extract_uint64 tmp%7#0 16u)
        let to_encode%0#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(item0%1#0, item1%1#0, item2%1#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%8#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@4: // test_for_of_loop_arc4_dynamic_array_route_L17
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let tmp%13#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = (extract_uint16 tmp%13#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* length%0#0 8u)
        let num_bytes_with_header%0#0: uint64 = (+ num_bytes%0#0 2u)
        let value_len%1#0: uint64 = (len tmp%13#0)
        let size_is_correct%1#0: bool = (== value_len%1#0 num_bytes_with_header%0#0)
        (assert size_is_correct%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
        let to_encode%1#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(tmp%13#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%14#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@5: // test_for_of_loop_arc4_static_array_route_L26
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let tmp%19#0: bytes = (txna ApplicationArgs 1)
        let value_len%2#0: uint64 = (len tmp%19#0)
        let size_is_correct%2#0: bool = (== value_len%2#0 40u)
        (assert size_is_correct%2#0) // invalid number of bytes for arc4.static_array<arc4.uint64, 5>
        let to_encode%2#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(tmp%19#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%20#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@6: // test_for_of_loop_native_immutable_array_route_L35
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let tmp%25#0: bytes = (txna ApplicationArgs 1)
        let length%1#0: uint64 = (extract_uint16 tmp%25#0 0u) // on error: invalid array length header
        let num_bytes%1#0: uint64 = (* length%1#0 8u)
        let num_bytes_with_header%1#0: uint64 = (+ num_bytes%1#0 2u)
        let value_len%3#0: uint64 = (len tmp%25#0)
        let size_is_correct%3#0: bool = (== value_len%3#0 num_bytes_with_header%1#0)
        (assert size_is_correct%3#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
        let to_encode%3#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(tmp%25#0)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%3#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%26#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@7: // test_for_of_loop_native_mutable_array_route_L44
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let tmp%31#0: bytes = (txna ApplicationArgs 1)
        let value_len%4#0: uint64 = (len tmp%31#0)
        let size_is_correct%4#0: bool = (== value_len%4#0 24u)
        (assert size_is_correct%4#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>
        let item0%3#0: uint64 = (extract_uint64 tmp%31#0 0u)
        let item1%3#0: uint64 = (extract_uint64 tmp%31#0 8u)
        let item2%3#0: uint64 = (extract_uint64 tmp%31#0 16u)
        let to_encode%4#0: uint64 = tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(item0%3#0, item1%3#0, item2%3#0)
        let val_as_bytes%4#0: bytes[8] = (itob to_encode%4#0)
        let tmp%32#0: bytes = (concat 0x151f7c75 val_as_bytes%4#0)
        (log tmp%32#0)
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // bare_routing_L7
        let tmp%33#0: uint64 = (txn OnCompletion)
        goto tmp%33#0 ? block@14 : block@11
    block@11: // __algots__.defaultCreate_L7
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // can only call when creating
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@14: // after_if_else_L7
        let tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6: bool = 0u
        goto block@15
    block@15: // after_inlined_tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#5 <- block@11, tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.__puya_arc4_router__%0#6 <- block@14)
        return tmp%0#0

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
    block@0: // L8
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L10
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@5, loop_counter%0#3 <- block@6)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@5, total#2 <- block@6)
        let item#1: uint64 = φ(items.0#0 <- block@0, items.1#0 <- block@5, items.2#0 <- block@6)
        let total#2: uint64 = (+ total#1 item#1)
        let tmp%0#0: bool = (== item#1 42u)
        goto tmp%0#0 ? block@8 : block@3
    block@3: // after_if_else_L12
        goto_nth [block@5, block@6][loop_counter%0#1] else goto block@8
    block@5: // for_header_1_L10
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@6: // for_header_2_L10
        let loop_counter%0#3: uint64 = 2u
        goto block@1
    block@8: // L10
        return total#2

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(items: bytes) -> uint64:
    block@0: // L17
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L19
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L19
        let array_head_and_tail%0#0: bytes = ((extract 2 0) items#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let tmp%0#0: uint64 = (extract_uint64 array_head_and_tail%0#0 item_offset%0#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let tmp%2#0: bool = (== tmp%0#0 42u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L21
        goto block@7
    block@4: // after_if_else_L21
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L19
        goto block@7
    block@7: // L19
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(items: bytes[40]) -> uint64:
    block@0: // L26
        let total#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L28
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 5u)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L28
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let tmp%0#0: uint64 = (extract_uint64 items#0 item_offset%0#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let tmp%2#0: bool = (== tmp%0#0 42u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L30
        goto block@7
    block@4: // after_if_else_L30
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L28
        goto block@7
    block@7: // L28
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(items: encoded_uint64[]) -> uint64:
    block@0: // L35
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 items#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L37
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L37
        let array_head_and_tail%0#0: bytes = ((extract 2 0) items#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let item#0: uint64 = (extract_uint64 array_head_and_tail%0#0 item_offset%0#0)
        let total#2: uint64 = (+ total#1 item#0)
        let tmp%0#0: bool = (== item#0 42u)
        goto tmp%0#0 ? block@3 : block@4
    block@3: // if_body_L39
        goto block@7
    block@4: // after_if_else_L39
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L37
        goto block@7
    block@7: // L37
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3

subroutine tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
    block@0: // L44
        let array%sub_item%0#1: bytes[8] = (itob items.0#0)
        let array%sub_item%1#1: bytes[8] = (itob items.1#0)
        let array%data%1#1: encoded_uint64[] = (concat array%sub_item%0#1 array%sub_item%1#1)
        let array%sub_item%2#1: bytes[8] = (itob items.2#0)
        let array%data%2#1: encoded_uint64[] = (concat array%data%1#1 array%sub_item%2#1)
        write(local.0, array%data%2#1)
        let total#0: uint64 = 0u
        let array%bytes_len%0#1: uint64 = (len array%data%2#1)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L47
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@4)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@4)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array%array_len%0#1)
        goto continue_looping%0#0 ? block@2 : block@6
    block@2: // for_body_L47
        let slot_contents%1#0: encoded_uint64[] = read(local.0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#1 8u)
        let array%value%0#1: bytes = (extract3 slot_contents%1#0 array%bytes_index%0#1 8u)
        let item#0: uint64 = (extract_uint64 array%value%0#1 0u)
        let total#2: uint64 = (+ total#1 item#0)
        let tmp%0#0: bool = (== item#0 42u)
        goto tmp%0#0 ? block@3 : block@4
    block@3: // if_body_L49
        goto block@7
    block@4: // after_if_else_L49
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@6: // after_for_L47
        goto block@7
    block@7: // L47
        let total#3: uint64 = φ(total#2 <- block@3, total#1 <- block@6)
        return total#3