#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8 42
    bytecblock 0x151f7c75
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xcf1f20b8 0x8c16ee87 0xb2c753bf 0xd1b5beee 0xa1cc0d94 // method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64", method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64", method "test_for_of_loop_arc4_static_array(uint64[5])uint64", method "test_for_of_loop_native_immutable_array(uint64[])uint64", method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64"
    txna ApplicationArgs 0
    match main_test_for_of_loop_tuple_route@3 main_test_for_of_loop_arc4_dynamic_array_route@4 main_test_for_of_loop_arc4_static_array_route@5 main_test_for_of_loop_native_immutable_array_route@6 main_test_for_of_loop_native_mutable_array_route@7

main_after_if_else@14:
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    intc_0 // 0
    return

main_test_for_of_loop_native_mutable_array_route@7:
    // tests/approvals/for-of-loops.algo.ts:44
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    len
    pushint 24 // 24
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    uncover 2
    pushint 16 // 16
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:44
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    callsub test_for_of_loop_native_mutable_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_native_immutable_array_route@6:
    // tests/approvals/for-of-loops.algo.ts:35
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
    // tests/approvals/for-of-loops.algo.ts:35
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    callsub test_for_of_loop_native_immutable_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_arc4_static_array_route@5:
    // tests/approvals/for-of-loops.algo.ts:26
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    len
    pushint 40 // 40
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint64, 5>
    // tests/approvals/for-of-loops.algo.ts:26
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    callsub test_for_of_loop_arc4_static_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_arc4_dynamic_array_route@4:
    // tests/approvals/for-of-loops.algo.ts:17
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
    // tests/approvals/for-of-loops.algo.ts:17
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    callsub test_for_of_loop_arc4_dynamic_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_for_of_loop_tuple_route@3:
    // tests/approvals/for-of-loops.algo.ts:8
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    len
    pushint 24 // 24
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64>
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    uncover 2
    pushint 16 // 16
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:8
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    callsub test_for_of_loop_tuple
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // tests/approvals/for-of-loops.algo.ts:7
    // export class ForOfLoopsAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
test_for_of_loop_tuple:
    // tests/approvals/for-of-loops.algo.ts:8
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    proto 3 1
    // tests/approvals/for-of-loops.algo.ts:9
    // let total: uint64 = 0
    intc_0 // 0
    dup
    frame_dig -3

test_for_of_loop_tuple_for_body@1:
    // tests/approvals/for-of-loops.algo.ts:11
    // total += item
    frame_dig 0
    dig 1
    +
    frame_bury 0
    // tests/approvals/for-of-loops.algo.ts:5
    // const stopNumber: uint64 = 42
    intc_3 // 42
    // tests/approvals/for-of-loops.algo.ts:12
    // if (item === stopNumber) break
    ==
    bnz test_for_of_loop_tuple_block@8
    // tests/approvals/for-of-loops.algo.ts:10
    // for (const item of items) {
    frame_dig 1
    switch test_for_of_loop_tuple_for_header_1@5 test_for_of_loop_tuple_for_header_2@6

test_for_of_loop_tuple_block@8:
    // tests/approvals/for-of-loops.algo.ts:14
    // return total
    retsub

test_for_of_loop_tuple_for_header_2@6:
    pushint 2 // 2
    frame_bury 1
    frame_dig -1
    b test_for_of_loop_tuple_for_body@1

test_for_of_loop_tuple_for_header_1@5:
    intc_1 // 1
    frame_bury 1
    frame_dig -2
    b test_for_of_loop_tuple_for_body@1


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array(items: bytes) -> uint64:
test_for_of_loop_arc4_dynamic_array:
    // tests/approvals/for-of-loops.algo.ts:17
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<UintN64>) {
    proto 1 1
    // tests/approvals/for-of-loops.algo.ts:18
    // let total: uint64 = 0
    intc_0 // 0
    // tests/approvals/for-of-loops.algo.ts:19
    // for (const item of items) {
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

test_for_of_loop_arc4_dynamic_array_for_header@1:
    // tests/approvals/for-of-loops.algo.ts:19
    // for (const item of items) {
    frame_dig 2
    frame_dig 1
    <
    bz test_for_of_loop_arc4_dynamic_array_block@7
    frame_dig -1
    extract 2 0
    frame_dig 2
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:20
    // total += item.native
    extract_uint64
    frame_dig 0
    dig 1
    +
    frame_bury 0
    // tests/approvals/for-of-loops.algo.ts:5
    // const stopNumber: uint64 = 42
    intc_3 // 42
    // tests/approvals/for-of-loops.algo.ts:21
    // if (item.native === stopNumber) break
    ==
    bnz test_for_of_loop_arc4_dynamic_array_block@7
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_for_of_loop_arc4_dynamic_array_for_header@1

test_for_of_loop_arc4_dynamic_array_block@7:
    // tests/approvals/for-of-loops.algo.ts:23
    // return total
    retsub


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array(items: bytes) -> uint64:
test_for_of_loop_arc4_static_array:
    // tests/approvals/for-of-loops.algo.ts:26
    // test_for_of_loop_arc4_static_array(items: StaticArray<UintN64, 5>) {
    proto 1 1
    // tests/approvals/for-of-loops.algo.ts:27
    // let total: uint64 = 0
    intc_0 // 0
    dup

test_for_of_loop_arc4_static_array_for_header@1:
    // tests/approvals/for-of-loops.algo.ts:28
    // for (const item of items) {
    frame_dig 1
    pushint 5 // 5
    <
    bz test_for_of_loop_arc4_static_array_block@7
    frame_dig 1
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:29
    // total += item.native
    frame_dig -1
    swap
    extract_uint64
    frame_dig 0
    dig 1
    +
    frame_bury 0
    // tests/approvals/for-of-loops.algo.ts:5
    // const stopNumber: uint64 = 42
    intc_3 // 42
    // tests/approvals/for-of-loops.algo.ts:30
    // if (item.native === stopNumber) break
    ==
    bnz test_for_of_loop_arc4_static_array_block@7
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_for_of_loop_arc4_static_array_for_header@1

test_for_of_loop_arc4_static_array_block@7:
    // tests/approvals/for-of-loops.algo.ts:32
    // return total
    retsub


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array(items: bytes) -> uint64:
test_for_of_loop_native_immutable_array:
    // tests/approvals/for-of-loops.algo.ts:35
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    proto 1 1
    // tests/approvals/for-of-loops.algo.ts:36
    // let total: uint64 = 0
    intc_0 // 0
    // tests/approvals/for-of-loops.algo.ts:37
    // for (const item of items) {
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

test_for_of_loop_native_immutable_array_for_header@1:
    // tests/approvals/for-of-loops.algo.ts:37
    // for (const item of items) {
    frame_dig 2
    frame_dig 1
    <
    bz test_for_of_loop_native_immutable_array_block@7
    frame_dig -1
    extract 2 0
    frame_dig 2
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:38
    // total += item
    frame_dig 0
    dig 1
    +
    frame_bury 0
    // tests/approvals/for-of-loops.algo.ts:5
    // const stopNumber: uint64 = 42
    intc_3 // 42
    // tests/approvals/for-of-loops.algo.ts:39
    // if (item === stopNumber) break
    ==
    bnz test_for_of_loop_native_immutable_array_block@7
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_for_of_loop_native_immutable_array_for_header@1

test_for_of_loop_native_immutable_array_block@7:
    // tests/approvals/for-of-loops.algo.ts:41
    // return total
    retsub


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array(items.0: uint64, items.1: uint64, items.2: uint64) -> uint64:
test_for_of_loop_native_mutable_array:
    // tests/approvals/for-of-loops.algo.ts:44
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    proto 3 1
    frame_dig -3
    itob
    frame_dig -2
    itob
    // tests/approvals/for-of-loops.algo.ts:45
    // const mutable = new MutableArray(...items)
    concat
    // tests/approvals/for-of-loops.algo.ts:44
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    frame_dig -1
    itob
    // tests/approvals/for-of-loops.algo.ts:45
    // const mutable = new MutableArray(...items)
    concat
    dup
    // tests/approvals/for-of-loops.algo.ts:46
    // let total: uint64 = 0
    intc_0 // 0
    swap
    // tests/approvals/for-of-loops.algo.ts:47
    // for (const item of mutable) {
    len
    intc_2 // 8
    /
    intc_0 // 0

test_for_of_loop_native_mutable_array_for_header@1:
    // tests/approvals/for-of-loops.algo.ts:47
    // for (const item of mutable) {
    frame_dig 3
    frame_dig 2
    <
    bz test_for_of_loop_native_mutable_array_block@7
    frame_dig 0
    frame_dig 3
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    intc_0 // 0
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:48
    // total += item
    frame_dig 1
    dig 1
    +
    frame_bury 1
    // tests/approvals/for-of-loops.algo.ts:5
    // const stopNumber: uint64 = 42
    intc_3 // 42
    // tests/approvals/for-of-loops.algo.ts:49
    // if (item === stopNumber) break
    ==
    bnz test_for_of_loop_native_mutable_array_block@7
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_for_of_loop_native_mutable_array_for_header@1

test_for_of_loop_native_mutable_array_block@7:
    // tests/approvals/for-of-loops.algo.ts:51
    // return total
    frame_dig 1
    frame_bury 0
    retsub
