#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8 42
    bytecblock 0x151f7c75
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@15
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xcf1f20b8 0xc2a2bd6b 0xf3b4fec8 0x8c16ee87 0xb2c753bf 0xd1b5beee 0xa1cc0d94 0x961846c6 // method "test_for_of_loop_tuple((uint64,uint64,uint64))uint64", method "test_for_of_loop_destructured_tuple(uint64[])uint64", method "test_for_of_loop_destructured_object((uint64,uint64)[])uint64", method "test_for_of_loop_arc4_dynamic_array(uint64[])uint64", method "test_for_of_loop_arc4_static_array(uint64[5])uint64", method "test_for_of_loop_native_immutable_array(uint64[])uint64", method "test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64", method "test_iterable_props(uint64[3],uint64[3],uint64[])uint64"
    txna ApplicationArgs 0
    match test_for_of_loop_tuple test_for_of_loop_destructured_tuple test_for_of_loop_destructured_object test_for_of_loop_arc4_dynamic_array test_for_of_loop_arc4_static_array test_for_of_loop_native_immutable_array test_for_of_loop_native_mutable_array test_iterable_props
    err

main___algots__.defaultCreate@15:
    // tests/approvals/for-of-loops.algo.ts:8
    // export class ForOfLoopsAlgo extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple[routing]() -> void:
test_for_of_loop_tuple:
    // tests/approvals/for-of-loops.algo.ts:9
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_2 // 8
    extract_uint64
    cover 2
    swap
    pushint 16 // 16
    extract_uint64
    swap
    // tests/approvals/for-of-loops.algo.ts:10
    // let total: uint64 = 0
    intc_1 // 0
    swap
    intc_1 // 0
    swap

test_for_of_loop_tuple_for_body@2:
    // tests/approvals/for-of-loops.algo.ts:12
    // total += item
    dig 2
    dig 1
    +
    bury 3
    // tests/approvals/for-of-loops.algo.ts:13
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz test_for_of_loop_tuple_block@9
    // tests/approvals/for-of-loops.algo.ts:11
    // for (const item of items) {
    dup
    switch test_for_of_loop_tuple_for_header_1@6 test_for_of_loop_tuple_for_header_2@7

test_for_of_loop_tuple_block@9:
    // tests/approvals/for-of-loops.algo.ts:9
    // test_for_of_loop_tuple(items: readonly [uint64, uint64, uint64]) {
    dig 1
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

test_for_of_loop_tuple_for_header_2@7:
    pushint 2 // 2
    bury 1
    dig 2
    b test_for_of_loop_tuple_for_body@2

test_for_of_loop_tuple_for_header_1@6:
    intc_0 // 1
    bury 1
    dig 3
    b test_for_of_loop_tuple_for_body@2


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_tuple[routing]() -> void:
test_for_of_loop_destructured_tuple:
    // tests/approvals/for-of-loops.algo.ts:18
    // test_for_of_loop_destructured_tuple(items: DynamicArray<Uint64>) {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:19
    // let total: uint64 = 0
    intc_1 // 0
    // tests/approvals/for-of-loops.algo.ts:18
    // test_for_of_loop_destructured_tuple(items: DynamicArray<Uint64>) {
    dup2
    // tests/approvals/for-of-loops.algo.ts:20
    // for (const [index, v] of items.entries()) {
    extract_uint16
    intc_1 // 0

test_for_of_loop_destructured_tuple_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:20
    // for (const [index, v] of items.entries()) {
    dup
    dig 2
    <
    bz test_for_of_loop_destructured_tuple_block@8
    dig 3
    extract 2 0
    dig 1
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:21
    // total += v.asUint64()
    extract_uint64
    dig 3
    +
    dup
    bury 4
    // tests/approvals/for-of-loops.algo.ts:22
    // if (total >= stopNumber) break
    intc_3 // 42
    >=
    bnz test_for_of_loop_destructured_tuple_block@8
    dup
    intc_0 // 1
    +
    bury 1
    b test_for_of_loop_destructured_tuple_for_header@2

test_for_of_loop_destructured_tuple_block@8:
    // tests/approvals/for-of-loops.algo.ts:18
    // test_for_of_loop_destructured_tuple(items: DynamicArray<Uint64>) {
    dig 2
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_destructured_object[routing]() -> void:
test_for_of_loop_destructured_object:
    // tests/approvals/for-of-loops.algo.ts:27
    // test_for_of_loop_destructured_object(items: Point[]) {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:28
    // let total: uint64 = 0
    intc_1 // 0
    // tests/approvals/for-of-loops.algo.ts:27
    // test_for_of_loop_destructured_object(items: Point[]) {
    dup2
    // tests/approvals/for-of-loops.algo.ts:29
    // for (const { x, y } of clone(items)) {
    extract_uint16
    intc_1 // 0

test_for_of_loop_destructured_object_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:29
    // for (const { x, y } of clone(items)) {
    dup
    dig 2
    <
    bz test_for_of_loop_destructured_object_block@8
    dig 3
    extract 2 0
    dig 1
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:30
    // total += x + y
    +
    dig 3
    +
    dup
    bury 4
    // tests/approvals/for-of-loops.algo.ts:31
    // if (total >= stopNumber) break
    intc_3 // 42
    >=
    bnz test_for_of_loop_destructured_object_block@8
    dup
    intc_0 // 1
    +
    bury 1
    b test_for_of_loop_destructured_object_for_header@2

test_for_of_loop_destructured_object_block@8:
    // tests/approvals/for-of-loops.algo.ts:27
    // test_for_of_loop_destructured_object(items: Point[]) {
    dig 2
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array[routing]() -> void:
test_for_of_loop_arc4_dynamic_array:
    // tests/approvals/for-of-loops.algo.ts:36
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<Uint64>) {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:37
    // let total: uint64 = 0
    intc_1 // 0
    // tests/approvals/for-of-loops.algo.ts:36
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<Uint64>) {
    dup2
    // tests/approvals/for-of-loops.algo.ts:38
    // for (const item of items) {
    extract_uint16
    intc_1 // 0

test_for_of_loop_arc4_dynamic_array_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:38
    // for (const item of items) {
    dup
    dig 2
    <
    bz test_for_of_loop_arc4_dynamic_array_block@8
    dig 3
    extract 2 0
    dig 1
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:39
    // total += item.asUint64()
    extract_uint64
    dig 3
    dig 1
    +
    bury 4
    // tests/approvals/for-of-loops.algo.ts:40
    // if (item.asUint64() === stopNumber) break
    intc_3 // 42
    ==
    bnz test_for_of_loop_arc4_dynamic_array_block@8
    dup
    intc_0 // 1
    +
    bury 1
    b test_for_of_loop_arc4_dynamic_array_for_header@2

test_for_of_loop_arc4_dynamic_array_block@8:
    // tests/approvals/for-of-loops.algo.ts:36
    // test_for_of_loop_arc4_dynamic_array(items: DynamicArray<Uint64>) {
    dig 2
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array[routing]() -> void:
test_for_of_loop_arc4_static_array:
    // tests/approvals/for-of-loops.algo.ts:45
    // test_for_of_loop_arc4_static_array(items: StaticArray<Uint64, 5>) {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:46
    // let total: uint64 = 0
    intc_1 // 0
    dup

test_for_of_loop_arc4_static_array_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:47
    // for (const item of items) {
    dup
    pushint 5 // 5
    <
    bz test_for_of_loop_arc4_static_array_block@8
    dup
    intc_2 // 8
    *
    // tests/approvals/for-of-loops.algo.ts:48
    // total += item.asUint64()
    dig 3
    swap
    extract_uint64
    dig 2
    dig 1
    +
    bury 3
    // tests/approvals/for-of-loops.algo.ts:49
    // if (item.asUint64() === stopNumber) break
    intc_3 // 42
    ==
    bnz test_for_of_loop_arc4_static_array_block@8
    dup
    intc_0 // 1
    +
    bury 1
    b test_for_of_loop_arc4_static_array_for_header@2

test_for_of_loop_arc4_static_array_block@8:
    // tests/approvals/for-of-loops.algo.ts:45
    // test_for_of_loop_arc4_static_array(items: StaticArray<Uint64, 5>) {
    dig 1
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array[routing]() -> void:
test_for_of_loop_native_immutable_array:
    // tests/approvals/for-of-loops.algo.ts:54
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:55
    // let total: uint64 = 0
    intc_1 // 0
    // tests/approvals/for-of-loops.algo.ts:54
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    dup2
    // tests/approvals/for-of-loops.algo.ts:56
    // for (const item of items) {
    extract_uint16
    intc_1 // 0

test_for_of_loop_native_immutable_array_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:56
    // for (const item of items) {
    dup
    dig 2
    <
    bz test_for_of_loop_native_immutable_array_block@8
    dig 3
    extract 2 0
    dig 1
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:57
    // total += item
    dig 3
    dig 1
    +
    bury 4
    // tests/approvals/for-of-loops.algo.ts:58
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz test_for_of_loop_native_immutable_array_block@8
    dup
    intc_0 // 1
    +
    bury 1
    b test_for_of_loop_native_immutable_array_for_header@2

test_for_of_loop_native_immutable_array_block@8:
    // tests/approvals/for-of-loops.algo.ts:54
    // test_for_of_loop_native_immutable_array(items: Array<uint64>) {
    dig 2
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array[routing]() -> void:
test_for_of_loop_native_mutable_array:
    // tests/approvals/for-of-loops.algo.ts:63
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    txna ApplicationArgs 1
    // tests/approvals/for-of-loops.algo.ts:64
    // const mutable = new ReferenceArray(...items)
    dup
    extract 0 8
    dig 1
    extract 8 8
    uncover 2
    extract 16 8
    cover 2
    concat
    swap
    concat
    dup
    // tests/approvals/for-of-loops.algo.ts:65
    // let total: uint64 = 0
    intc_1 // 0
    swap
    // tests/approvals/for-of-loops.algo.ts:66
    // for (const item of mutable) {
    len
    intc_2 // 8
    /
    intc_1 // 0

test_for_of_loop_native_mutable_array_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:66
    // for (const item of mutable) {
    dup
    dig 2
    <
    bz test_for_of_loop_native_mutable_array_block@8
    dig 3
    dig 1
    intc_2 // 8
    *
    extract_uint64
    // tests/approvals/for-of-loops.algo.ts:67
    // total += item
    dig 3
    dig 1
    +
    bury 4
    // tests/approvals/for-of-loops.algo.ts:68
    // if (item === stopNumber) break
    intc_3 // 42
    ==
    bnz test_for_of_loop_native_mutable_array_block@8
    dup
    intc_0 // 1
    +
    bury 1
    b test_for_of_loop_native_mutable_array_for_header@2

test_for_of_loop_native_mutable_array_block@8:
    // tests/approvals/for-of-loops.algo.ts:63
    // test_for_of_loop_native_mutable_array(items: [uint64, uint64, uint64]) {
    dig 2
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_iterable_props[routing]() -> void:
test_iterable_props:
    pushbytes ""
    dupn 5
    // tests/approvals/for-of-loops.algo.ts:73
    // test_iterable_props(static_array: StaticArray<Uint64, 3>, fixed_array: FixedArray<uint64, 3>, dyn_array: DynamicArray<Uint64>) {
    txna ApplicationArgs 3
    // tests/approvals/for-of-loops.algo.ts:74
    // let i: uint64 = 0
    intc_1 // 0
    // tests/approvals/for-of-loops.algo.ts:75
    // for (const a of static_array.keys()) {
    dup

test_iterable_props_for_header@2:
    // tests/approvals/for-of-loops.algo.ts:75
    // for (const a of static_array.keys()) {
    dup
    pushint 3 // 3
    <
    bz test_iterable_props_after_for@5
    // tests/approvals/for-of-loops.algo.ts:76
    // i++
    dig 1
    intc_0 // 1
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:75
    // for (const a of static_array.keys()) {
    dup
    intc_0 // 1
    +
    bury 1
    b test_iterable_props_for_header@2

test_iterable_props_after_for@5:
    intc_1 // 0
    bury 8

test_iterable_props_for_header@6:
    // tests/approvals/for-of-loops.algo.ts:78
    // for (const a of static_array.entries()) {
    dig 7
    pushint 3 // 3
    <
    bz test_iterable_props_after_for@9
    // tests/approvals/for-of-loops.algo.ts:79
    // i++
    dig 1
    intc_0 // 1
    +
    bury 2
    dig 7
    intc_0 // 1
    +
    bury 8
    b test_iterable_props_for_header@6

test_iterable_props_after_for@9:
    // tests/approvals/for-of-loops.algo.ts:81
    // for (const a of fixed_array.keys()) {
    intc_1 // 0
    bury 7

test_iterable_props_for_header@10:
    // tests/approvals/for-of-loops.algo.ts:81
    // for (const a of fixed_array.keys()) {
    dig 6
    pushint 3 // 3
    <
    bz test_iterable_props_after_for@13
    // tests/approvals/for-of-loops.algo.ts:82
    // i++
    dig 1
    intc_0 // 1
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:81
    // for (const a of fixed_array.keys()) {
    dig 6
    intc_0 // 1
    +
    bury 7
    b test_iterable_props_for_header@10

test_iterable_props_after_for@13:
    intc_1 // 0
    bury 6

test_iterable_props_for_header@14:
    // tests/approvals/for-of-loops.algo.ts:84
    // for (const a of fixed_array.entries()) {
    dig 5
    pushint 3 // 3
    <
    bz test_iterable_props_after_for@17
    // tests/approvals/for-of-loops.algo.ts:85
    // i++
    dig 1
    intc_0 // 1
    +
    bury 2
    dig 5
    intc_0 // 1
    +
    bury 6
    b test_iterable_props_for_header@14

test_iterable_props_after_for@17:
    // tests/approvals/for-of-loops.algo.ts:87
    // for (const a of dyn_array.keys()) {
    dig 2
    intc_1 // 0
    extract_uint16
    bury 9
    intc_1 // 0
    bury 5

test_iterable_props_for_header@18:
    // tests/approvals/for-of-loops.algo.ts:87
    // for (const a of dyn_array.keys()) {
    dig 4
    dig 9
    <
    bz test_iterable_props_after_for@21
    // tests/approvals/for-of-loops.algo.ts:88
    // i++
    dig 1
    intc_0 // 1
    +
    bury 2
    // tests/approvals/for-of-loops.algo.ts:87
    // for (const a of dyn_array.keys()) {
    dig 4
    intc_0 // 1
    +
    bury 5
    b test_iterable_props_for_header@18

test_iterable_props_after_for@21:
    intc_1 // 0
    bury 4

test_iterable_props_for_header@22:
    // tests/approvals/for-of-loops.algo.ts:90
    // for (const a of dyn_array.entries()) {
    dig 3
    dig 9
    <
    bz test_iterable_props_after_for@25
    // tests/approvals/for-of-loops.algo.ts:91
    // i++
    dig 1
    intc_0 // 1
    +
    bury 2
    dig 3
    intc_0 // 1
    +
    bury 4
    b test_iterable_props_for_header@22

test_iterable_props_after_for@25:
    // tests/approvals/for-of-loops.algo.ts:73
    // test_iterable_props(static_array: StaticArray<Uint64, 3>, fixed_array: FixedArray<uint64, 3>, dyn_array: DynamicArray<Uint64>) {
    dig 1
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
