{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/for-of-loops.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;AAMA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAqCE;;AAAA;AAAA;AAAA;;AAAA;AArCF;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAqCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA5BF;;;AA4BE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAmBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAVF;;;AAUE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AACsB;;;;AAElB;;AAAA;;AAAA;AAAA;;AANqB;AAOjB;AAAJ;;;AAFF;;AAAA;;;;;;AAIA;;;;;;;;;;;;;;;;;;AAGF;;;AACsB;AACpB;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AACgB;AAAd;;AAAA;;AAAA;AAAA;;AAfqB;AAgBjB;AAAJ;;;;;;;;;;;;AAEF;AAGF;;;AACsB;;AACpB;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AACgB;;AAAA;AAAA;AAAd;;AAAA;;AAAA;AAAA;;AAxBqB;AAyBjB;AAAJ;;;;;;;;;;;;AAEF;AAGF;;;AACsB;AACpB;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AACE;;AAAA;;AAAA;AAAA;;AAjCqB;AAkCjB;AAAJ;;;;;;;;;;;;AAEF;AAGF;;;AAAsC;;AAAA;AAAA;;AAAA;AACpB;AADoB;;AAAA;AACpB;AAAA;AACI;AAAhB;AACe;AAAA;AAAA;;AAAnB;;AAAA;;AAAA;AAAA;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;;AAAA;;AAAA;AAAA;;AA3CqB;AA4CjB;AAAJ;;;;;;;;;;;;AAEF;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 42"
    },
    "7": {
      "op": "bytecblock 0x151f7c75"
    },
    "14": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "19": {
      "op": "pushbytess 0xcf1f20b8 0x8c16ee87 0xb2c753bf 0xd1b5beee 0xa1cc0d94 // method \"test_for_of_loop_tuple((uint64,uint64,uint64))uint64\", method \"test_for_of_loop_arc4_dynamic_array(uint64[])uint64\", method \"test_for_of_loop_arc4_static_array(uint64[5])uint64\", method \"test_for_of_loop_native_immutable_array(uint64[])uint64\", method \"test_for_of_loop_native_mutable_array((uint64,uint64,uint64))uint64\""
    },
    "46": {
      "op": "txna ApplicationArgs 0"
    },
    "49": {
      "op": "match main_test_for_of_loop_tuple_route@3 main_test_for_of_loop_arc4_dynamic_array_route@4 main_test_for_of_loop_arc4_static_array_route@5 main_test_for_of_loop_native_immutable_array_route@6 main_test_for_of_loop_native_mutable_array_route@7"
    },
    "61": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "return"
    },
    "63": {
      "block": "main_test_for_of_loop_native_mutable_array_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "65": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "66": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "67": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "69": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "70": {
      "op": "txna ApplicationArgs 1"
    },
    "73": {
      "op": "dup"
    },
    "74": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[24]%1#0",
        "reinterpret_bytes[24]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%1#0",
        "reinterpret_bytes[24]%1#0 (copy)",
        "0"
      ]
    },
    "75": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%1%0#0",
        "reinterpret_bytes[24]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%1#0",
        "item0%1%0#0"
      ]
    },
    "76": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_bytes[24]%1#0",
        "item0%1%0#0",
        "reinterpret_bytes[24]%1#0 (copy)"
      ]
    },
    "78": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "item0%1%0#0",
        "reinterpret_bytes[24]%1#0",
        "reinterpret_bytes[24]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%1#0",
        "item0%1%0#0",
        "reinterpret_bytes[24]%1#0 (copy)",
        "8"
      ]
    },
    "79": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "reinterpret_bytes[24]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%1#0",
        "item0%1%0#0",
        "item1%1%0#0"
      ]
    },
    "80": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "reinterpret_bytes[24]%1#0"
      ]
    },
    "82": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%1%0#0",
        "item1%1%0#0",
        "reinterpret_bytes[24]%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "reinterpret_bytes[24]%1#0",
        "16"
      ]
    },
    "84": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0"
      ]
    },
    "85": {
      "callsub": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array",
      "op": "callsub test_for_of_loop_native_mutable_array",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "88": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "89": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "92": {
      "op": "log",
      "stack_out": []
    },
    "93": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "return"
    },
    "95": {
      "block": "main_test_for_of_loop_native_immutable_array_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "98": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "102": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_uint64[]%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64[]%0#0"
      ]
    },
    "105": {
      "callsub": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array",
      "op": "callsub test_for_of_loop_native_immutable_array",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "108": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "109": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "112": {
      "op": "log",
      "stack_out": []
    },
    "113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "return"
    },
    "115": {
      "block": "main_test_for_of_loop_arc4_static_array_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "117": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "118": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "121": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "122": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[40]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%0#0"
      ]
    },
    "125": {
      "callsub": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array",
      "op": "callsub test_for_of_loop_arc4_static_array",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "128": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "129": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "132": {
      "op": "log",
      "stack_out": []
    },
    "133": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "return"
    },
    "135": {
      "block": "main_test_for_of_loop_arc4_dynamic_array_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "137": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "138": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "142": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "145": {
      "callsub": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array",
      "op": "callsub test_for_of_loop_arc4_dynamic_array",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "148": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "149": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "150": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "151": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "152": {
      "op": "log",
      "stack_out": []
    },
    "153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "return"
    },
    "155": {
      "block": "main_test_for_of_loop_tuple_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "157": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "162": {
      "op": "txna ApplicationArgs 1"
    },
    "165": {
      "op": "dup"
    },
    "166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[24]%0#0",
        "reinterpret_bytes[24]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%0#0",
        "reinterpret_bytes[24]%0#0 (copy)",
        "0"
      ]
    },
    "167": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "reinterpret_bytes[24]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%0#0",
        "item0%0%0#0"
      ]
    },
    "168": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_bytes[24]%0#0",
        "item0%0%0#0",
        "reinterpret_bytes[24]%0#0 (copy)"
      ]
    },
    "170": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "item0%0%0#0",
        "reinterpret_bytes[24]%0#0",
        "reinterpret_bytes[24]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%0#0",
        "item0%0%0#0",
        "reinterpret_bytes[24]%0#0 (copy)",
        "8"
      ]
    },
    "171": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[24]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[24]%0#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "172": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[24]%0#0"
      ]
    },
    "174": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[24]%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "reinterpret_bytes[24]%0#0",
        "16"
      ]
    },
    "176": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0"
      ]
    },
    "177": {
      "callsub": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple",
      "op": "callsub test_for_of_loop_tuple",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "180": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "181": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "182": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "183": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "184": {
      "op": "log",
      "stack_out": []
    },
    "185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "return"
    },
    "187": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "189": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID"
    },
    "194": {
      "op": "!"
    },
    "195": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "196": {
      "op": "intc_1 // 1"
    },
    "197": {
      "op": "return"
    },
    "198": {
      "subroutine": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_tuple",
      "params": {
        "items.0#0": "uint64",
        "items.1#0": "uint64",
        "items.2#0": "uint64"
      },
      "block": "test_for_of_loop_tuple",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "201": {
      "op": "intc_0 // 0"
    },
    "202": {
      "op": "dup"
    },
    "203": {
      "op": "frame_dig -3",
      "defined_out": [
        "item#1",
        "loop_counter%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1"
      ]
    },
    "205": {
      "block": "test_for_of_loop_tuple_for_body@1",
      "stack_in": [
        "total#0",
        "loop_counter%0#0",
        "item#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1",
        "total#0"
      ]
    },
    "207": {
      "op": "dig 1",
      "defined_out": [
        "item#1",
        "item#1 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1",
        "total#0",
        "item#1 (copy)"
      ]
    },
    "209": {
      "op": "+",
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1",
        "total#0"
      ]
    },
    "210": {
      "op": "frame_bury 0",
      "defined_out": [
        "item#1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1"
      ]
    },
    "212": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42",
        "item#1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1",
        "42"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "bnz test_for_of_loop_tuple_block@8",
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "217": {
      "op": "frame_dig 1"
    },
    "219": {
      "op": "switch test_for_of_loop_tuple_for_header_1@5 test_for_of_loop_tuple_for_header_2@6"
    },
    "225": {
      "block": "test_for_of_loop_tuple_block@8",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "226": {
      "block": "test_for_of_loop_tuple_for_header_2@6",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "op": "pushint 2 // 2",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "228": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "230": {
      "op": "frame_dig -1",
      "defined_out": [
        "item#1",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1"
      ]
    },
    "232": {
      "op": "b test_for_of_loop_tuple_for_body@1"
    },
    "235": {
      "block": "test_for_of_loop_tuple_for_header_1@5",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "236": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "238": {
      "op": "frame_dig -2",
      "defined_out": [
        "item#1",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "item#1"
      ]
    },
    "240": {
      "op": "b test_for_of_loop_tuple_for_body@1"
    },
    "243": {
      "subroutine": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_dynamic_array",
      "params": {
        "items#0": "bytes"
      },
      "block": "test_for_of_loop_arc4_dynamic_array",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "246": {
      "op": "intc_0 // 0"
    },
    "247": {
      "op": "frame_dig -1"
    },
    "249": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "items#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "items#0 (copy)",
        "0"
      ]
    },
    "250": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0"
      ]
    },
    "251": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "252": {
      "block": "test_for_of_loop_arc4_dynamic_array_for_header@1",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "254": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "256": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "257": {
      "op": "bz test_for_of_loop_arc4_dynamic_array_block@7",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "260": {
      "op": "frame_dig -1"
    },
    "262": {
      "op": "extract 2 0"
    },
    "265": {
      "op": "frame_dig 2"
    },
    "267": {
      "op": "intc_2 // 8"
    },
    "268": {
      "op": "*"
    },
    "269": {
      "op": "extract_uint64"
    },
    "270": {
      "op": "frame_dig 0"
    },
    "272": {
      "op": "dig 1"
    },
    "274": {
      "op": "+"
    },
    "275": {
      "op": "frame_bury 0"
    },
    "277": {
      "op": "intc_3 // 42"
    },
    "278": {
      "op": "=="
    },
    "279": {
      "op": "bnz test_for_of_loop_arc4_dynamic_array_block@7"
    },
    "282": {
      "op": "frame_dig 2"
    },
    "284": {
      "op": "intc_1 // 1"
    },
    "285": {
      "op": "+"
    },
    "286": {
      "op": "frame_bury 2"
    },
    "288": {
      "op": "b test_for_of_loop_arc4_dynamic_array_for_header@1"
    },
    "291": {
      "block": "test_for_of_loop_arc4_dynamic_array_block@7",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "292": {
      "subroutine": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_arc4_static_array",
      "params": {
        "items#0": "bytes"
      },
      "block": "test_for_of_loop_arc4_static_array",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "295": {
      "op": "intc_0 // 0"
    },
    "296": {
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "297": {
      "block": "test_for_of_loop_arc4_static_array_for_header@1",
      "stack_in": [
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "299": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "5"
      ]
    },
    "301": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "302": {
      "op": "bz test_for_of_loop_arc4_static_array_block@7",
      "stack_out": [
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "305": {
      "op": "frame_dig 1"
    },
    "307": {
      "op": "intc_2 // 8"
    },
    "308": {
      "op": "*"
    },
    "309": {
      "op": "frame_dig -1"
    },
    "311": {
      "op": "swap"
    },
    "312": {
      "op": "extract_uint64"
    },
    "313": {
      "op": "frame_dig 0"
    },
    "315": {
      "op": "dig 1"
    },
    "317": {
      "op": "+"
    },
    "318": {
      "op": "frame_bury 0"
    },
    "320": {
      "op": "intc_3 // 42"
    },
    "321": {
      "op": "=="
    },
    "322": {
      "op": "bnz test_for_of_loop_arc4_static_array_block@7"
    },
    "325": {
      "op": "frame_dig 1"
    },
    "327": {
      "op": "intc_1 // 1"
    },
    "328": {
      "op": "+"
    },
    "329": {
      "op": "frame_bury 1"
    },
    "331": {
      "op": "b test_for_of_loop_arc4_static_array_for_header@1"
    },
    "334": {
      "block": "test_for_of_loop_arc4_static_array_block@7",
      "stack_in": [
        "total#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "335": {
      "subroutine": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_immutable_array",
      "params": {
        "items#0": "bytes"
      },
      "block": "test_for_of_loop_native_immutable_array",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "338": {
      "op": "intc_0 // 0"
    },
    "339": {
      "op": "frame_dig -1"
    },
    "341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "items#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "items#0 (copy)",
        "0"
      ]
    },
    "342": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0"
      ]
    },
    "343": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "344": {
      "block": "test_for_of_loop_native_immutable_array_for_header@1",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "346": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "348": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "349": {
      "op": "bz test_for_of_loop_native_immutable_array_block@7",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "352": {
      "op": "frame_dig -1"
    },
    "354": {
      "op": "extract 2 0"
    },
    "357": {
      "op": "frame_dig 2"
    },
    "359": {
      "op": "intc_2 // 8"
    },
    "360": {
      "op": "*"
    },
    "361": {
      "op": "extract_uint64"
    },
    "362": {
      "op": "frame_dig 0"
    },
    "364": {
      "op": "dig 1"
    },
    "366": {
      "op": "+"
    },
    "367": {
      "op": "frame_bury 0"
    },
    "369": {
      "op": "intc_3 // 42"
    },
    "370": {
      "op": "=="
    },
    "371": {
      "op": "bnz test_for_of_loop_native_immutable_array_block@7"
    },
    "374": {
      "op": "frame_dig 2"
    },
    "376": {
      "op": "intc_1 // 1"
    },
    "377": {
      "op": "+"
    },
    "378": {
      "op": "frame_bury 2"
    },
    "380": {
      "op": "b test_for_of_loop_native_immutable_array_for_header@1"
    },
    "383": {
      "block": "test_for_of_loop_native_immutable_array_block@7",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "384": {
      "subroutine": "tests/approvals/for-of-loops.algo.ts::ForOfLoopsAlgo.test_for_of_loop_native_mutable_array",
      "params": {
        "items.0#0": "uint64",
        "items.1#0": "uint64",
        "items.2#0": "uint64"
      },
      "block": "test_for_of_loop_native_mutable_array",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "387": {
      "op": "frame_dig -3",
      "defined_out": [
        "items.0#0 (copy)"
      ],
      "stack_out": [
        "items.0#0 (copy)"
      ]
    },
    "389": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1"
      ],
      "stack_out": [
        "array%sub_item%0#1"
      ]
    },
    "390": {
      "op": "frame_dig -2",
      "defined_out": [
        "array%sub_item%0#1",
        "items.1#0 (copy)"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "items.1#0 (copy)"
      ]
    },
    "392": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1"
      ],
      "stack_out": [
        "array%data%1#1"
      ]
    },
    "394": {
      "op": "frame_dig -1",
      "defined_out": [
        "array%data%1#1",
        "items.2#0 (copy)"
      ],
      "stack_out": [
        "array%data%1#1",
        "items.2#0 (copy)"
      ]
    },
    "396": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1"
      ],
      "stack_out": [
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "397": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1"
      ],
      "stack_out": [
        "array%data%2#1"
      ]
    },
    "398": {
      "op": "dup",
      "defined_out": [
        "array%data%2#1",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "array%data%2#1"
      ]
    },
    "399": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array%data%2#1",
        "slot%0",
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "array%data%2#1",
        "total#0"
      ]
    },
    "400": {
      "op": "swap",
      "defined_out": [
        "array%data%2#1",
        "slot%0",
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%data%2#1"
      ]
    },
    "401": {
      "op": "len",
      "defined_out": [
        "array%bytes_len%0#1",
        "slot%0",
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%bytes_len%0#1"
      ]
    },
    "402": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array%bytes_len%0#1",
        "slot%0",
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%bytes_len%0#1",
        "8"
      ]
    },
    "403": {
      "op": "/",
      "defined_out": [
        "array%array_len%0#1",
        "slot%0",
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array%array_len%0#1",
        "item_index_internal%0#0",
        "slot%0",
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0"
      ]
    },
    "405": {
      "block": "test_for_of_loop_native_mutable_array_for_header@1",
      "stack_in": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "407": {
      "op": "frame_dig 2",
      "defined_out": [
        "array%array_len%0#1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array%array_len%0#1"
      ]
    },
    "409": {
      "op": "<",
      "defined_out": [
        "array%array_len%0#1",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "410": {
      "op": "bz test_for_of_loop_native_mutable_array_block@7",
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0"
      ]
    },
    "413": {
      "op": "frame_dig 0"
    },
    "415": {
      "op": "frame_dig 3"
    },
    "417": {
      "op": "intc_2 // 8"
    },
    "418": {
      "op": "*"
    },
    "419": {
      "op": "intc_2 // 8"
    },
    "420": {
      "op": "extract3"
    },
    "421": {
      "op": "intc_0 // 0"
    },
    "422": {
      "op": "extract_uint64"
    },
    "423": {
      "op": "frame_dig 1"
    },
    "425": {
      "op": "dig 1"
    },
    "427": {
      "op": "+"
    },
    "428": {
      "op": "frame_bury 1"
    },
    "430": {
      "op": "intc_3 // 42"
    },
    "431": {
      "op": "=="
    },
    "432": {
      "op": "bnz test_for_of_loop_native_mutable_array_block@7"
    },
    "435": {
      "op": "frame_dig 3"
    },
    "437": {
      "op": "intc_1 // 1"
    },
    "438": {
      "op": "+"
    },
    "439": {
      "op": "frame_bury 3"
    },
    "441": {
      "op": "b test_for_of_loop_native_mutable_array_for_header@1"
    },
    "444": {
      "block": "test_for_of_loop_native_mutable_array_block@7",
      "stack_in": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "slot%0",
        "total#0",
        "array%array_len%0#1",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "446": {
      "op": "frame_bury 0"
    },
    "448": {
      "retsub": true,
      "op": "retsub"
    }
  }
}