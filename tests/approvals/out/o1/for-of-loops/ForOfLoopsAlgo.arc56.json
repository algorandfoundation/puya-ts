{
    "name": "ForOfLoopsAlgo",
    "structs": {},
    "methods": [
        {
            "name": "test_for_of_loop_tuple",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_tuple",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_destructured_object",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_dynamic_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_arc4_static_array",
            "args": [
                {
                    "type": "uint64[5]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_immutable_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_for_of_loop_native_mutable_array",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "name": "items"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iterable_props",
            "args": [
                {
                    "type": "uint64[3]",
                    "name": "static_array"
                },
                {
                    "type": "uint64[3]",
                    "name": "fixed_array"
                },
                {
                    "type": "uint64[]",
                    "name": "dyn_array"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        22
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        97
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        277
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        255
                    ],
                    "errorMessage": "invalid number of bytes for (len+(uint64,uint64)[])"
                },
                {
                    "pc": [
                        188,
                        331,
                        452,
                        616
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint64[])"
                },
                {
                    "pc": [
                        106,
                        509
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64,uint64)"
                },
                {
                    "pc": [
                        590,
                        598
                    ],
                    "errorMessage": "invalid number of bytes for uint64[3]"
                },
                {
                    "pc": [
                        388
                    ],
                    "errorMessage": "invalid number of bytes for uint64[5]"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQAIKiYBBBUffHUxG0EARzEZFEQxGESCCATPHyC4BMKivWsE87T+yASMFu6HBLLHU78E0bW+7gShzA2UBJYYRsY2GgCOCAAJAFEAkwDgASMBWQGcAeoAMRkUMRgUEEM2GgFJFYEYEkRJI1tLASRbTgJMgRBbTCNMI0xLAksBCEUDJRJAAAdJjQIAEgAJSwEWKExQsCJDgQJFAUsCQv/bIkUBSwNC/9M2GgFHAiNZSU4CJAuBAghMFRJEI0lJSwMMQQAdSwNXAgBLASQLW0sCCElFAyUPQAAISSIIRQFC/9xLARYoTFCwIkM2GgFHAiNZSU4CgRALgQIITBUSRCNJSUsDDEEAJ0sDVwIASwGBEAuBEFhJI1tMJFsISwIISUUDJQ9AAAhJIghFAUL/0ksBFihMULAiQzYaAUcCI1lJTgIkC4ECCEwVEkQjSUlLAwxBAB5LA1cCAEsBJAtbSwJLAQhFAyUSQAAISSIIRQFC/9tLARYoTFCwIkM2GgFJFYEoEkQjSUmBBQxBABtJJAtLA0xbSwJLAQhFAyUSQAAISSIIRQFC/95LARYoTFCwIkM2GgFHAiNZSU4CJAuBAghMFRJEI0lJSwMMQQAeSwNXAgBLASQLW0sCSwEIRQMlEkAACEkiCEUBQv/bSwEWKExQsCJDNhoBSRWBGBJESVcACEsBVwgITwJXEAhOAlBMUEkjTBUkCiNJSwIMQQAbSwNLASQLW0sDSwEIRQQlEkAACEkiCEUBQv/eSwIWKExQsCJDgABHBDYaARWBGBJENhoCFYEYEkQ2GgNJI1lJTgIkC4ECCEwVEkQjSUmBAwxBAA5LASIIRQJJIghFAUL/6yNFCEsHgQMMQQAPSwEiCEUCSwciCEUIQv/pI0UHSwaBAwxBAA9LASIIRQJLBiIIRQdC/+kjRQZLBYEDDEEAD0sBIghFAksFIghFBkL/6SNFBUsESwMMQQAPSwEiCEUCSwQiCEUFQv/pI0UESwNLAwxBAA9LASIIRQJLAyIIRQRC/+lLARYoTFCwIkM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}