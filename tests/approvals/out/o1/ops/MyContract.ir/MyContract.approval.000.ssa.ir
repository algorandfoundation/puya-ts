main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/ops.algo.ts::MyContract.__puya_arc4_router__() -> bool:
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L7
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L7
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test()void" => block@3, method "test2(uint64)void" => block@4, * => block@5}
    block@3: // test_route_L8
        tests/approvals/ops.algo.ts::MyContract.test[routing]()
        goto block@5
    block@4: // test2_route_L23
        tests/approvals/ops.algo.ts::MyContract.test2[routing]()
        goto block@5
    block@5: // switch_case_next_L7
        goto block@7
    block@6: // create_NoOp_L7
        goto block@7
    block@7: // after_if_else_L7
        goto block@9
    block@8: // __algots__.defaultCreate_L7
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate()
        exit 1u
    block@9: // after_if_else_L7
        exit 0u

subroutine tests/approvals/ops.algo.ts::MyContract.test[routing]() -> void:
    block@0: // L8
        tests/approvals/ops.algo.ts::MyContract.test()
        exit 1u

subroutine tests/approvals/ops.algo.ts::MyContract.test2[routing]() -> void:
    block@0: // L23
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        tests/approvals/ops.algo.ts::MyContract.test2(tmp%0#0)
        exit 1u

subroutine tests/approvals/ops.algo.ts::MyContract.test() -> void:
    block@0: // L8
        let tmp%0#0: bytes[8] = (bzero 8u)
        let tmp%1#0: bytes = (b~ tmp%0#0)
        let a#0: bytes[8] = tmp%1#0
        let tmp%2#0: uint64 = (btoi a#0)
        let b#0: uint64 = tmp%2#0
        let tmp%3#0: bool = (== b#0 18446744073709551615u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (shr b#0 32u)
        let c#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (== c#0 4294967295u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (txn GroupIndex)
        let tmp%7#0: uint64 = ((gtxns ApplicationID) tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        let tmp%10#0: bytes = ((txnas ApplicationArgs) 0u)
        let tmp%11#0: bool = (== tmp%10#0 method "test()void")
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (txn GroupIndex)
        let tmp%13#0: bytes = ((gtxnsas ApplicationArgs) tmp%12#0 0u)
        let tmp%14#0: bool = (== tmp%13#0 method "test()void")
        (assert tmp%14#0)
        return 

subroutine tests/approvals/ops.algo.ts::MyContract.test2(size: uint64) -> void:
    block@0: // L23
        let tmp%0#0: bytes = (bzero size#0)
        let a#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (len a#0)
        let tmp%2#0: bool = (== tmp%1#0 size#0)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/ops.algo.ts::MyContract.__algots__.defaultCreate() -> void:
    block@0: // L7
        return 