main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L42
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@10
    block@1: // abi_routing_L42
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@8
    block@2: // call_NoOp_L42
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getBoolConstants()(bool,bool)" => block@3, method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)" => block@4, method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)" => block@5, method "getStringConstants()string[]" => block@6, * => block@7}
    block@3: // getBoolConstants_route_L43
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants[routing]()
        goto block@7
    block@4: // getUintConstants_route_L46
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants[routing]()
        goto block@7
    block@5: // getBigUintConstants_route_L49
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants[routing]()
        goto block@7
    block@6: // getStringConstants_route_L52
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants[routing]()
        goto block@7
    block@7: // switch_case_next_L42
        goto block@9
    block@8: // create_NoOp_L42
        goto block@9
    block@9: // after_if_else_L42
        goto block@11
    block@10: // __algots__.defaultCreate_L42
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate()
        exit 1u
    block@11: // after_if_else_L42
        exit 0u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants[routing]() -> void:
    block@0: // L43
        let (tmp%0#0: bool, tmp%1#0: bool) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants()
        let tmp%2#0: Encoded(bool1,bool1) = bytes_encode<(bool1,bool1)>(tmp%0#0, tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants[routing]() -> void:
    block@0: // L46
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: uint64, tmp%3#0: uint64, tmp%4#0: uint64, tmp%5#0: uint64, tmp%6#0: uint64, tmp%7#0: uint64, tmp%8#0: uint64, tmp%9#0: uint64, tmp%10#0: uint64) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants()
        let tmp%11#0: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = bytes_encode<(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)>(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0, tmp%5#0, tmp%6#0, tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        exit 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants[routing]() -> void:
    block@0: // L49
        let (tmp%0#0: biguint, tmp%1#0: biguint, tmp%2#0: biguint, tmp%3#0: biguint, tmp%4#0: biguint, tmp%5#0: biguint, tmp%6#0: biguint, tmp%7#0: biguint) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants()
        let tmp%8#0: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = bytes_encode<(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)>(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0, tmp%5#0, tmp%6#0, tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants[routing]() -> void:
    block@0: // L52
        let tmp%0#0: Encoded(len+(len+utf8[])[]) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants() -> <bool, bool>:
    block@0: // L43
        return 0u 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants() -> <uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64>:
    block@0: // L46
        return 12u 8u 20u 5u 0u 100u 40u 2u 10u 8u 2u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants() -> <biguint, biguint, biguint, biguint, biguint, biguint, biguint, biguint>:
    block@0: // L49
        return 12b 8b 20b 5b 0b 10b 8b 2b

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants() -> Encoded(len+(len+utf8[])[]):
    block@0: // L52
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = bytes_encode<(len+(len+utf8[])[])>("ab")
        return encoded_array%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L42
        return 