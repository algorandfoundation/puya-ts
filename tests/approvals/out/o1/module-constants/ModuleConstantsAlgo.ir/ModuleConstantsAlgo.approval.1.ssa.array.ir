main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L42
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getBoolConstants()(bool,bool)" => block@3, method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)" => block@4, method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)" => block@5, method "getStringConstants()string[]" => block@6, * => block@13}
    block@3: // getBoolConstants_route_L43
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let aggregate%encoded_bit%0#1: bytes = (setbit 0x00 0u 0u)
        let aggregate%encoded%0#1: Encoded(bool1) = (concat 0x aggregate%encoded_bit%0#1)
        let aggregate%set_bit%0#1: Encoded(bool1) = (setbit aggregate%encoded%0#1 1u 1u)
        let aggregate%encoded%1#1: Encoded(bool1,bool1) = (concat aggregate%set_bit%0#1 0x)
        let tmp%9#0: Encoded(bool1,bool1) = aggregate%encoded%1#1
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // getUintConstants_route_L46
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 12u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 8u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%3#1: Encoded(uint64,uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%4#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%3#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%5#1: Encoded(uint64,uint64,uint64,uint64) = (concat aggregate%encoded%4#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%6#1: Encoded(uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%5#1 aggregate%as_Encoded(uint64)%4#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 100u)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%7#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%6#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob 40u)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%encoded%8#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%7#1 aggregate%as_Encoded(uint64)%6#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%encoded%9#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%8#1 aggregate%as_Encoded(uint64)%7#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%8#1: Encoded(uint64) = aggregate%val_as_bytes%8#1
        let aggregate%encoded%10#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint64)%8#1)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob 8u)
        let aggregate%as_Encoded(uint64)%9#1: Encoded(uint64) = aggregate%val_as_bytes%9#1
        let aggregate%encoded%11#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%10#1 aggregate%as_Encoded(uint64)%9#1)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%10#1: Encoded(uint64) = aggregate%val_as_bytes%10#1
        let aggregate%encoded%12#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%11#1 aggregate%as_Encoded(uint64)%10#1)
        let aggregate%encoded%13#1: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = (concat aggregate%encoded%12#1 0x)
        let tmp%26#0: Encoded(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) = aggregate%encoded%13#1
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getBigUintConstants_route_L49
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let aggregate%value_len%0#1: uint64 = (len 12b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 12b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let aggregate%encoded%14#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%0#1)
        let aggregate%value_len%1#1: uint64 = (len 8b)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| 8b aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint512)%1#1: Encoded(uint512) = aggregate%arc4_encoded%1#1
        let aggregate%encoded%15#1: Encoded(uint512,uint512) = (concat aggregate%encoded%14#1 aggregate%as_Encoded(uint512)%1#1)
        let aggregate%value_len%2#1: uint64 = (len 20b)
        let aggregate%len_ok%2#1: bool = (<= aggregate%value_len%2#1 64u)
        (assert aggregate%len_ok%2#1) // overflow
        let aggregate%bzero%2#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#1: bytes[64] = (b| 20b aggregate%bzero%2#1)
        let aggregate%as_Encoded(uint512)%2#1: Encoded(uint512) = aggregate%arc4_encoded%2#1
        let aggregate%encoded%16#1: Encoded(uint512,uint512,uint512) = (concat aggregate%encoded%15#1 aggregate%as_Encoded(uint512)%2#1)
        let aggregate%value_len%3#1: uint64 = (len 5b)
        let aggregate%len_ok%3#1: bool = (<= aggregate%value_len%3#1 64u)
        (assert aggregate%len_ok%3#1) // overflow
        let aggregate%bzero%3#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%3#1: bytes[64] = (b| 5b aggregate%bzero%3#1)
        let aggregate%as_Encoded(uint512)%3#1: Encoded(uint512) = aggregate%arc4_encoded%3#1
        let aggregate%encoded%17#1: Encoded(uint512,uint512,uint512,uint512) = (concat aggregate%encoded%16#1 aggregate%as_Encoded(uint512)%3#1)
        let aggregate%value_len%4#1: uint64 = (len 0b)
        let aggregate%len_ok%4#1: bool = (<= aggregate%value_len%4#1 64u)
        (assert aggregate%len_ok%4#1) // overflow
        let aggregate%bzero%4#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%4#1: bytes[64] = (b| 0b aggregate%bzero%4#1)
        let aggregate%as_Encoded(uint512)%4#1: Encoded(uint512) = aggregate%arc4_encoded%4#1
        let aggregate%encoded%18#1: Encoded(uint512,uint512,uint512,uint512,uint512) = (concat aggregate%encoded%17#1 aggregate%as_Encoded(uint512)%4#1)
        let aggregate%value_len%5#1: uint64 = (len 10b)
        let aggregate%len_ok%5#1: bool = (<= aggregate%value_len%5#1 64u)
        (assert aggregate%len_ok%5#1) // overflow
        let aggregate%bzero%5#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%5#1: bytes[64] = (b| 10b aggregate%bzero%5#1)
        let aggregate%as_Encoded(uint512)%5#1: Encoded(uint512) = aggregate%arc4_encoded%5#1
        let aggregate%encoded%19#1: Encoded(uint512,uint512,uint512,uint512,uint512,uint512) = (concat aggregate%encoded%18#1 aggregate%as_Encoded(uint512)%5#1)
        let aggregate%value_len%6#1: uint64 = (len 8b)
        let aggregate%len_ok%6#1: bool = (<= aggregate%value_len%6#1 64u)
        (assert aggregate%len_ok%6#1) // overflow
        let aggregate%bzero%6#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%6#1: bytes[64] = (b| 8b aggregate%bzero%6#1)
        let aggregate%as_Encoded(uint512)%6#1: Encoded(uint512) = aggregate%arc4_encoded%6#1
        let aggregate%encoded%20#1: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512) = (concat aggregate%encoded%19#1 aggregate%as_Encoded(uint512)%6#1)
        let aggregate%value_len%7#1: uint64 = (len 2b)
        let aggregate%len_ok%7#1: bool = (<= aggregate%value_len%7#1 64u)
        (assert aggregate%len_ok%7#1) // overflow
        let aggregate%bzero%7#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%7#1: bytes[64] = (b| 2b aggregate%bzero%7#1)
        let aggregate%as_Encoded(uint512)%7#1: Encoded(uint512) = aggregate%arc4_encoded%7#1
        let aggregate%encoded%21#1: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = (concat aggregate%encoded%20#1 aggregate%as_Encoded(uint512)%7#1)
        let aggregate%encoded%22#1: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = (concat aggregate%encoded%21#1 0x)
        let tmp%40#0: Encoded(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512) = aggregate%encoded%22#1
        let tmp%41#0: bytes = (concat 0x151f7c75 tmp%40#0)
        (log tmp%41#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // getStringConstants_route_L52
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let tmp%46#0: Encoded(len+(len+utf8[])[]) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants()
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L42
        let tmp%48#0: uint64 = (txn OnCompletion)
        goto tmp%48#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L42
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // can only call when creating
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L42
        let tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants() -> Encoded(len+(len+utf8[])[]):
    block@0: // L52
        let aggregate%length%0#1: uint64 = (len "ab")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "ab")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 2u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%0#1)
        let aggregate%encoded%2#1: Encoded(len+(len+utf8[])[]) = (concat aggregate%encoded%1#1 aggregate%tail%0#1)
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%encoded%2#1
        return encoded_array%0#0