main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%0#0 2u)
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, new_length#0, 0u)
        let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
        return tmp%12#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tmp%3#0: uint64 = (* length#0 2u)
        let tmp%4#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%4#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%3#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%5#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%6#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%7#0: uint64 = (+ tmp%6#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%7#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__puya_arc4_router__() -> bool:
    block@0: // L42
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L42
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getBoolConstants()(bool,bool)" => block@2, method "getUintConstants()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)" => block@3, method "getBigUintConstants()(uint512,uint512,uint512,uint512,uint512,uint512,uint512,uint512)" => block@4, method "getStringConstants()string[]" => block@5, * => block@6}
    block@2: // getBoolConstants_route_L43
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let (elements_to_encode%0#0: bool, elements_to_encode%1#0: bool) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants()
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u elements_to_encode%0#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u elements_to_encode%1#0)
        let current_tail_offset%0#0: uint64 = 1u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 encoded_bool%0#0)
        let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
        let encoded_tuple_buffer%2#0: bytes = (setbit encoded_tuple_buffer%1#0 1u is_true%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%7#0)
        return 1u
    block@3: // getUintConstants_route_L46
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let (elements_to_encode%2#0: uint64, elements_to_encode%3#0: uint64, elements_to_encode%4#0: uint64, elements_to_encode%5#0: uint64, elements_to_encode%6#0: uint64, elements_to_encode%7#0: uint64, elements_to_encode%8#0: uint64, elements_to_encode%9#0: uint64, elements_to_encode%10#0: uint64, elements_to_encode%11#0: uint64, elements_to_encode%12#0: uint64) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants()
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%2#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%3#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%4#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%5#0)
        let val_as_bytes%4#0: bytes[8] = (itob elements_to_encode%6#0)
        let val_as_bytes%5#0: bytes[8] = (itob elements_to_encode%7#0)
        let val_as_bytes%6#0: bytes[8] = (itob elements_to_encode%8#0)
        let val_as_bytes%7#0: bytes[8] = (itob elements_to_encode%9#0)
        let val_as_bytes%8#0: bytes[8] = (itob elements_to_encode%10#0)
        let val_as_bytes%9#0: bytes[8] = (itob elements_to_encode%11#0)
        let val_as_bytes%10#0: bytes[8] = (itob elements_to_encode%12#0)
        let current_tail_offset%1#0: uint64 = 88u
        let encoded_tuple_buffer%3#0: bytes[0] = 0x
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%3#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%4#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 val_as_bytes%5#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 val_as_bytes%6#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 val_as_bytes%7#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 val_as_bytes%8#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 val_as_bytes%9#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 val_as_bytes%10#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%14#0)
        (log tmp%12#0)
        return 1u
    block@4: // getBigUintConstants_route_L49
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let (elements_to_encode%13#0: biguint, elements_to_encode%14#0: biguint, elements_to_encode%15#0: biguint, elements_to_encode%16#0: biguint, elements_to_encode%17#0: biguint, elements_to_encode%18#0: biguint, elements_to_encode%19#0: biguint, elements_to_encode%20#0: biguint) = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants()
        let len_%0#0: uint64 = (len elements_to_encode%13#0)
        let no_overflow%0#0: bool = (<= len_%0#0 64u)
        (assert no_overflow%0#0) // overflow
        let b_zeros%0#0: bytes = (bzero 64u)
        let arc4_item%0#0: bytes = (b| elements_to_encode%13#0 b_zeros%0#0)
        let len_%1#0: uint64 = (len elements_to_encode%14#0)
        let no_overflow%1#0: bool = (<= len_%1#0 64u)
        (assert no_overflow%1#0) // overflow
        let b_zeros%1#0: bytes = (bzero 64u)
        let arc4_item%1#0: bytes = (b| elements_to_encode%14#0 b_zeros%1#0)
        let len_%2#0: uint64 = (len elements_to_encode%15#0)
        let no_overflow%2#0: bool = (<= len_%2#0 64u)
        (assert no_overflow%2#0) // overflow
        let b_zeros%2#0: bytes = (bzero 64u)
        let arc4_item%2#0: bytes = (b| elements_to_encode%15#0 b_zeros%2#0)
        let len_%3#0: uint64 = (len elements_to_encode%16#0)
        let no_overflow%3#0: bool = (<= len_%3#0 64u)
        (assert no_overflow%3#0) // overflow
        let b_zeros%3#0: bytes = (bzero 64u)
        let arc4_item%3#0: bytes = (b| elements_to_encode%16#0 b_zeros%3#0)
        let len_%4#0: uint64 = (len elements_to_encode%17#0)
        let no_overflow%4#0: bool = (<= len_%4#0 64u)
        (assert no_overflow%4#0) // overflow
        let b_zeros%4#0: bytes = (bzero 64u)
        let arc4_item%4#0: bytes = (b| elements_to_encode%17#0 b_zeros%4#0)
        let len_%5#0: uint64 = (len elements_to_encode%18#0)
        let no_overflow%5#0: bool = (<= len_%5#0 64u)
        (assert no_overflow%5#0) // overflow
        let b_zeros%5#0: bytes = (bzero 64u)
        let arc4_item%5#0: bytes = (b| elements_to_encode%18#0 b_zeros%5#0)
        let len_%6#0: uint64 = (len elements_to_encode%19#0)
        let no_overflow%6#0: bool = (<= len_%6#0 64u)
        (assert no_overflow%6#0) // overflow
        let b_zeros%6#0: bytes = (bzero 64u)
        let arc4_item%6#0: bytes = (b| elements_to_encode%19#0 b_zeros%6#0)
        let len_%7#0: uint64 = (len elements_to_encode%20#0)
        let no_overflow%7#0: bool = (<= len_%7#0 64u)
        (assert no_overflow%7#0) // overflow
        let b_zeros%7#0: bytes = (bzero 64u)
        let arc4_item%7#0: bytes = (b| elements_to_encode%20#0 b_zeros%7#0)
        let current_tail_offset%2#0: uint64 = 512u
        let encoded_tuple_buffer%15#0: bytes[0] = 0x
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 arc4_item%0#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 arc4_item%1#0)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 arc4_item%2#0)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 arc4_item%3#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 arc4_item%4#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 arc4_item%5#0)
        let encoded_tuple_buffer%22#0: bytes = (concat encoded_tuple_buffer%21#0 arc4_item%6#0)
        let encoded_tuple_buffer%23#0: bytes = (concat encoded_tuple_buffer%22#0 arc4_item%7#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%23#0)
        (log tmp%17#0)
        return 1u
    block@5: // getStringConstants_route_L52
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let tmp%22#0: bytes[] = tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants()
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        return 1u
    block@6: // switch_case_default_L42
        goto block@7
    block@7: // switch_case_next_L42
        goto block@12
    block@8: // bare_routing_L42
        let tmp%24#0: uint64 = (txn OnCompletion)
        switch tmp%24#0 {0u => block@9, * => block@10}
    block@9: // __algots__.defaultCreate_L42
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (== tmp%25#0 0u)
        (assert tmp%26#0) // can only call when creating
        tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate()
        return 1u
    block@10: // switch_case_default_L42
        goto block@11
    block@11: // switch_case_next_L42
        goto block@12
    block@12: // after_if_else_L42
        return 0u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBoolConstants() -> <bool, bool>:
    block@0: // L43
        return 0u 1u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getUintConstants() -> <uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64>:
    block@0: // L46
        return 12u 8u 20u 5u 0u 100u 40u 2u 10u 8u 2u

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getBigUintConstants() -> <biguint, biguint, biguint, biguint, biguint, biguint, biguint, biguint>:
    block@0: // L49
        return 12b 8b 20b 5b 0b 10b 8b 2b

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.getStringConstants() -> bytes[]:
    block@0: // L52
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let length%0#0: uint64 = (len "ab")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "ab")
        let data%0#0: bytes = (concat 0x encoded_value%0#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_data%0#0, data%0#0, 1u)
        return concat_result%0#0

subroutine tests/approvals/module-constants.algo.ts::ModuleConstantsAlgo.__algots__.defaultCreate() -> void:
    block@0: // L42
        return 