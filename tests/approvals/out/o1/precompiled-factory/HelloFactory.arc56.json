{
    "name": "HelloFactory",
    "structs": {},
    "methods": [
        {
            "name": "test_compile_contract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_with_template_and_custom_prefix",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_compile_contract_large",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        399,
                        706,
                        1015,
                        1175
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        50
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        97
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEBgABBSYGBAuBAUMEFR98dQQkN408BNCiggAHAAV3b3JsZARMXGG6MRtBACsxGRREMRhEggQEKheZXATjJUvJBOK3xpIEApR8ojYaAI4EAAkBWwKMA8UAMRkUMRgUEEOxJLI1KLJCgOsBCyADAAIBJgMIZ3JlZXRpbmcBIAQVH3x1MRhAAAQogABnggIEJDeNPASg6BhyNhoAjgIANgAtMRkURDEYQQAWggIE0KKCAARRgLogNhoAjgIANgBcAIAEAJIlrjYaAI4BABMAMRmBBBIxGBBDMRmBBRIxGBBDNhoBSSJZIwhLARUSRFcCAChMZyRDNhoBSSJZIwhLARUSRFcCACIoZUQpUExQSRUWVwYCTFAqTFCwJEM2GgEiKGVEKVBLASJZSwIjWUsDTwJLAlJXAgBPAkxQSwIVTwNPA08CUlcCAFBJFRZXBgJMUCpMULAkQ7JAgAQAkiWushqABwAFaGVsbG+yGiKyECOyAbO0PbFJshgrshonBLIaIrIQI7IBs7Q+SVcABCkSRFcGAIALaGVsbG8gd29ybGQSRLElshkqshqyGCKyECOyAbMkQ7EksjUoskKA2wELIAMAAQImBAhncmVldGluZwEgBBUffHUDaGV5MRhAAAMoK2eCAgQkN408BKDoGHI2GgCOAgA4AC8xGRREMRhBABaCAgTQooIABFGAuiA2GgCOAgAjAEkAgARMXGG6NhoAjgEAAQAjQzEZgQQSMRgQQzEZgQUSMRgQQzYaAUkiWSQISwEVEkRXAgAiKGVEKVBMUEkVFlcGAkxQKkxQsCNDNhoBIihlRClQSwEiWUsCJFlLA08CSwJSVwIATwJMUEsCFU8DTwNPAlJXAgBQSRUWVwYCTFAqTFCwI0OyQCcFshoishAjsgGztD2xSbIYK7IaJwSyGiKyECOyAbO0PklXAAQpEkRXBgCACWhleSB3b3JsZBJEsSWyGSqyGrIYIrIQI7IBsyRDsSSyNSiyQoDfAQsgAwABAiYECGdyZWV0aW5nASAEFR98dQdib25qb3VyMRhAAAMoK2eCAgQkN408BKDoGHI2GgCOAgA4AC8xGRREMRhBABaCAgTQooIABFGAuiA2GgCOAgAjAEkAgARMXGG6NhoAjgEAAQAjQzEZgQQSMRgQQzEZgQUSMRgQQzYaAUkiWSQISwEVEkRXAgAiKGVEKVBMUEkVFlcGAkxQKkxQsCNDNhoBIihlRClQSwEiWUsCJFlLA08CSwJSVwIATwJMUEsCFU8DTwNPAlJXAgBQSRUWVwYCTFAqTFCwI0OyQCcFshoishAjsgGztD2xSbIYK7IaJwSyGiKyECOyAbO0PklXAAQpEkRXBgCADWJvbmpvdXIgd29ybGQSRLElshkqshqyGCKyECOyAbMkQ7EoskKASQsxG0EAKYICBCQ3jTwEAr8wzzYaAI4CAAsAAQAxGRQxGBBEQgARMRmBBRIxGBBDMRkUMRgUEEOBgCCvFRaABBUffHVMULCBAUOyQCKyECOyAbO0PbFJshiABAK/MM+yGiKyECOyAbO0PklXBABMVwAEKRJEF4GAIBJEsSWyGSqyGrIYIrIQI7IBsyRD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}