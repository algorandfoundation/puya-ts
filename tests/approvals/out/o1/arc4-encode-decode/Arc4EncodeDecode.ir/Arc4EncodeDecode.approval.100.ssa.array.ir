main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@3, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@4, * => block@11}
    block@3: // testEncoding_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let aggregate%get_bit%0#1: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%8#0: bool = aggregate%get_bit%0#1
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 3)
        let tmp%9#0: biguint = reinterpret_Encoded(uint512)%0#0
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%10#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%11#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = (txna ApplicationArgs 7)
        let tmp%12#0: bytes[12] = reinterpret_Encoded(uint8[12])%0#0
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, reinterpret_Encoded(uint8[32])%0#0, tmp%12#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testDecoding_route_L69
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%18#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(bool8)%1#0: Encoded(bool8) = (txna ApplicationArgs 3)
        let aggregate%get_bit%1#1: bool = (getbit reinterpret_Encoded(bool8)%1#0 0u)
        let tmp%19#0: bool = aggregate%get_bit%1#1
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%20#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let reinterpret_Encoded(uint512)%1#0: Encoded(uint512) = (txna ApplicationArgs 5)
        let tmp%21#0: biguint = reinterpret_Encoded(uint512)%1#0
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let tmp%22#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 7)
        let tmp%23#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 8)
        let tmp%24#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 10)
        let tmp%25#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 12)
        let tmp%26#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        let reinterpret_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = (txna ApplicationArgs 13)
        let tmp%27#0: bytes[12] = reinterpret_Encoded(uint8[12])%1#0
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 14)
        let tmp%28#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%7#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%17#0, tmp%18#0, tmp%19#0, tmp%20#0, tmp%21#0, tmp%22#0, tmp%23#0, tmp%24#0, reinterpret_Encoded(uint64,(len+uint8[]))%0#0, tmp%25#0, reinterpret_Encoded(uint8[32])%1#0, tmp%26#0, tmp%27#0, tmp%28#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L24
        let tmp%29#0: uint64 = (txn OnCompletion)
        goto tmp%29#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L24
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // can only call when creating
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L24
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2 <- block@8, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: string, f: Encoded(uint8[32]), g: bytes[12]) -> void:
    block@2: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 1410u tmp%1#1)
        goto tmp%2#1 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let aggregate%value_len%0#1: uint64 = (len c#0)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| c#0 aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let tmp%6#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#1
        let aggregate%length%0#1: uint64 = (len d#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 d#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let tmp%9#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%length%1#1: uint64 = (len e#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 e#0)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%12#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%2#1: uint64 = (len d#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 d#0)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 10u aggregate%data_length%0#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%1#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%2#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%1#1 aggregate%tail%0#1)
        let tmp%15#0: Encoded(uint64,(len+uint8[])) = aggregate%encoded%2#1
        let aggregate%encoded%3#1: Encoded(uint64) = (concat 0x tmp%0#0)
        let aggregate%tail%1#1: bytes = (concat 0x tmp%9#0)
        let aggregate%data_length%1#1: uint64 = (len tmp%9#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 10u aggregate%data_length%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%4#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%3#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%5#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%4#1 aggregate%tail%1#1)
        let tmp%18#0: Encoded(uint64,(len+uint8[])) = aggregate%encoded%5#1
        let tmp%19#0: bool = (== tmp%15#0 tmp%18#0)
        (assert tmp%19#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%tail%2#1: bytes = (concat 0x tmp%9#0)
        let aggregate%data_length%2#1: uint64 = (len tmp%9#0)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 10u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%7#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%6#1 aggregate%offset_as_uint16%2#1)
        let aggregate%encoded%8#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%7#1 aggregate%tail%2#1)
        let tmp%22#0: Encoded(uint64,(len+uint8[])) = aggregate%encoded%8#1
        let tmp%23#0: bool = (== tmp%15#0 tmp%22#0)
        (assert tmp%23#0)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%9#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%3#1)
        let aggregate%length%3#1: uint64 = (len g#0)
        let aggregate%lengths_equal%0#1: bool = (== aggregate%length%3#1 12u)
        (assert aggregate%lengths_equal%0#1) // invalid size
        let aggregate%as_Encoded(uint8[12])%0#1: Encoded(uint8[12]) = g#0
        let aggregate%encoded%10#1: Encoded(uint64,uint8[12]) = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint8[12])%0#1)
        let aggregate%encoded%11#1: Encoded(uint64,uint8[12]) = (concat aggregate%encoded%10#1 0x)
        let tmp%24#0: Encoded(uint64,uint8[12]) = aggregate%encoded%11#1
        let aggregate%length%4#1: uint64 = (len g#0)
        let aggregate%lengths_equal%1#1: bool = (== aggregate%length%4#1 12u)
        (assert aggregate%lengths_equal%1#1) // invalid size
        let aggregate%as_Encoded(uint8[12])%1#1: Encoded(uint8[12]) = g#0
        let tmp%25#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%1#1
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%12#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%4#1)
        let aggregate%encoded%13#1: Encoded(uint64,uint8[12]) = (concat aggregate%encoded%12#1 tmp%25#0)
        let aggregate%encoded%14#1: Encoded(uint64,uint8[12]) = (concat aggregate%encoded%13#1 0x)
        let tmp%26#0: Encoded(uint64,uint8[12]) = aggregate%encoded%14#1
        let tmp%27#0: bool = (== tmp%24#0 tmp%26#0)
        (assert tmp%27#0)
        let aggregate%length%5#1: uint64 = (len g#0)
        let aggregate%lengths_equal%2#1: bool = (== aggregate%length%5#1 12u)
        (assert aggregate%lengths_equal%2#1) // invalid size
        let aggregate%as_Encoded(uint8[12])%2#1: Encoded(uint8[12]) = g#0
        let tmp%29#0: Encoded(uint8[12]) = aggregate%as_Encoded(uint8[12])%2#1
        let tmp%31#0: bool = (== tmp%29#0 tmp%25#0)
        (assert tmp%31#0)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%15#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%5#1)
        let aggregate%encoded%16#1: Encoded(uint64) = (concat aggregate%encoded%15#1 0x)
        let tmp%32#0: Encoded(uint64) = aggregate%encoded%16#1
        let aggregate%encoded%17#1: Encoded(uint64) = (concat 0x tmp%0#0)
        let aggregate%encoded%18#1: Encoded(uint64[1]) = (concat aggregate%encoded%17#1 0x)
        let encoded_array%0#0: Encoded(uint64[1]) = aggregate%encoded%18#1
        let tmp%34#0: bool = (== tmp%32#0 encoded_array%0#0)
        (assert tmp%34#0)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%encoded%19#1: Encoded(bool1) = (concat 0x aggregate%encoded_bool%1#1)
        let aggregate%encoded%20#1: Encoded(bool1) = (concat aggregate%encoded%19#1 0x)
        let tmp%35#0: Encoded(bool1) = aggregate%encoded%20#1
        let aggregate%encoded%21#1: Encoded(bool1) = (concat 0x tmp%3#0)
        let aggregate%encoded%22#1: Encoded(bool1[1]) = (concat aggregate%encoded%21#1 0x)
        let encoded_array%1#0: Encoded(bool1[1]) = aggregate%encoded%22#1
        let tmp%37#0: bool = (== tmp%35#0 encoded_array%1#0)
        (assert tmp%37#0)
        let aggregate%value_len%1#1: uint64 = (len c#0)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| c#0 aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint512)%1#1: Encoded(uint512) = aggregate%arc4_encoded%1#1
        let aggregate%encoded%23#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%1#1)
        let aggregate%encoded%24#1: Encoded(uint512) = (concat aggregate%encoded%23#1 0x)
        let tmp%38#0: Encoded(uint512) = aggregate%encoded%24#1
        let aggregate%encoded%25#1: Encoded(uint512) = (concat 0x tmp%6#0)
        let aggregate%encoded%26#1: Encoded(uint512[1]) = (concat aggregate%encoded%25#1 0x)
        let encoded_array%2#0: Encoded(uint512[1]) = aggregate%encoded%26#1
        let tmp%40#0: bool = (== tmp%38#0 encoded_array%2#0)
        (assert tmp%40#0)
        let aggregate%length%6#1: uint64 = (len d#0)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 d#0)
        let aggregate%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = aggregate%encoded_value%3#1
        let aggregate%tail%3#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%2#1)
        let aggregate%data_length%3#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%2#1)
        let aggregate%current_tail_offset%3#1: uint64 = (+ 2u aggregate%data_length%3#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%27#1: Encoded((len+uint8[])) = (concat 0x aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%28#1: Encoded((len+uint8[])) = (concat aggregate%encoded%27#1 aggregate%tail%3#1)
        let tmp%41#0: Encoded((len+uint8[])) = aggregate%encoded%28#1
        let aggregate%tail%4#1: bytes = (concat 0x tmp%9#0)
        let aggregate%data_length%4#1: uint64 = (len tmp%9#0)
        let aggregate%current_tail_offset%4#1: uint64 = (+ 2u aggregate%data_length%4#1)
        let aggregate%as_bytes%8#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded%29#1: Encoded((len+uint8[])) = (concat 0x aggregate%offset_as_uint16%4#1)
        let aggregate%encoded%30#1: Encoded((len+uint8[])[1]) = (concat aggregate%encoded%29#1 aggregate%tail%4#1)
        let encoded_array%3#0: Encoded((len+uint8[])[1]) = aggregate%encoded%30#1
        let tmp%43#0: bool = (== tmp%41#0 encoded_array%3#0)
        (assert tmp%43#0)
        let aggregate%length%7#1: uint64 = (len e#0)
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 e#0)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let aggregate%tail%5#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%data_length%5#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%current_tail_offset%5#1: uint64 = (+ 2u aggregate%data_length%5#1)
        let aggregate%as_bytes%10#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%31#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%5#1)
        let aggregate%encoded%32#1: Encoded((len+utf8[])) = (concat aggregate%encoded%31#1 aggregate%tail%5#1)
        let tmp%44#0: Encoded((len+utf8[])) = aggregate%encoded%32#1
        let aggregate%tail%6#1: bytes = (concat 0x tmp%12#0)
        let aggregate%data_length%6#1: uint64 = (len tmp%12#0)
        let aggregate%current_tail_offset%6#1: uint64 = (+ 2u aggregate%data_length%6#1)
        let aggregate%as_bytes%11#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%11#1)
        let aggregate%encoded%33#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%6#1)
        let aggregate%encoded%34#1: Encoded((len+utf8[])[1]) = (concat aggregate%encoded%33#1 aggregate%tail%6#1)
        let encoded_array%4#0: Encoded((len+utf8[])[1]) = aggregate%encoded%34#1
        let tmp%46#0: bool = (== tmp%44#0 encoded_array%4#0)
        (assert tmp%46#0)
        let aggregate%encoded%35#1: Encoded(uint8[32]) = (concat 0x f#0)
        let aggregate%encoded%36#1: Encoded(uint8[32]) = (concat aggregate%encoded%35#1 0x)
        let tmp%47#0: Encoded(uint8[32]) = aggregate%encoded%36#1
        let aggregate%encoded%37#1: Encoded(uint8[32]) = (concat 0x f#0)
        let aggregate%encoded%38#1: Encoded(uint8[32][1]) = (concat aggregate%encoded%37#1 0x)
        let encoded_array%5#0: Encoded(uint8[32][1]) = aggregate%encoded%38#1
        let tmp%48#0: bool = (== tmp%47#0 encoded_array%5#0)
        (assert tmp%48#0)
        let aggregate%length%8#1: uint64 = (len g#0)
        let aggregate%lengths_equal%3#1: bool = (== aggregate%length%8#1 12u)
        (assert aggregate%lengths_equal%3#1) // invalid size
        let aggregate%as_Encoded(uint8[12])%3#1: Encoded(uint8[12]) = g#0
        let aggregate%encoded%39#1: Encoded(uint8[12]) = (concat 0x aggregate%as_Encoded(uint8[12])%3#1)
        let aggregate%encoded%40#1: Encoded(uint8[12]) = (concat aggregate%encoded%39#1 0x)
        let tmp%49#0: Encoded(uint8[12]) = aggregate%encoded%40#1
        let aggregate%encoded%41#1: Encoded(uint8[12]) = (concat 0x tmp%25#0)
        let aggregate%encoded%42#1: Encoded(uint8[12][1]) = (concat aggregate%encoded%41#1 0x)
        let encoded_array%6#0: Encoded(uint8[12][1]) = aggregate%encoded%42#1
        let tmp%51#0: bool = (== tmp%49#0 encoded_array%6#0)
        (assert tmp%51#0)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%encoded%43#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%6#1)
        let aggregate%as_bytes%12#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded%44#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%43#1)
        let aggregate%encoded%45#1: Encoded(len+uint64[]) = (concat aggregate%encoded%44#1 0x)
        let encoded_array%7#0: Encoded(len+uint64[]) = aggregate%encoded%45#1
        let tmp%52#0: Encoded(len+uint64[]) = encoded_array%7#0
        let aggregate%encoded%46#1: Encoded(uint64) = (concat 0x tmp%0#0)
        let aggregate%as_bytes%13#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%13#1)
        let aggregate%encoded%47#1: bytes = (concat aggregate%len_u16%1#1 aggregate%encoded%46#1)
        let aggregate%encoded%48#1: Encoded(len+uint64[]) = (concat aggregate%encoded%47#1 0x)
        let encoded_array%8#0: Encoded(len+uint64[]) = aggregate%encoded%48#1
        let tmp%54#0: bool = (== tmp%52#0 encoded_array%8#0)
        (assert tmp%54#0)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u b#0)
        let aggregate%encoded%49#1: Encoded(bool1) = (concat 0x aggregate%encoded_bool%2#1)
        let aggregate%as_bytes%14#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%14#1)
        let aggregate%encoded%50#1: bytes = (concat aggregate%len_u16%2#1 aggregate%encoded%49#1)
        let aggregate%encoded%51#1: Encoded(len+bool1[]) = (concat aggregate%encoded%50#1 0x)
        let encoded_array%9#0: Encoded(len+bool1[]) = aggregate%encoded%51#1
        let tmp%55#0: Encoded(len+bool1[]) = encoded_array%9#0
        let aggregate%encoded%52#1: Encoded(bool1) = (concat 0x tmp%3#0)
        let aggregate%as_bytes%15#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%15#1)
        let aggregate%encoded%53#1: bytes = (concat aggregate%len_u16%3#1 aggregate%encoded%52#1)
        let aggregate%encoded%54#1: Encoded(len+bool1[]) = (concat aggregate%encoded%53#1 0x)
        let encoded_array%10#0: Encoded(len+bool1[]) = aggregate%encoded%54#1
        let tmp%57#0: bool = (== tmp%55#0 encoded_array%10#0)
        (assert tmp%57#0)
        let aggregate%value_len%2#1: uint64 = (len c#0)
        let aggregate%len_ok%2#1: bool = (<= aggregate%value_len%2#1 64u)
        (assert aggregate%len_ok%2#1) // overflow
        let aggregate%bzero%2#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#1: bytes[64] = (b| c#0 aggregate%bzero%2#1)
        let aggregate%as_Encoded(uint512)%2#1: Encoded(uint512) = aggregate%arc4_encoded%2#1
        let aggregate%encoded%55#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%2#1)
        let aggregate%as_bytes%16#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%16#1)
        let aggregate%encoded%56#1: bytes = (concat aggregate%len_u16%4#1 aggregate%encoded%55#1)
        let aggregate%encoded%57#1: Encoded(len+uint512[]) = (concat aggregate%encoded%56#1 0x)
        let encoded_array%11#0: Encoded(len+uint512[]) = aggregate%encoded%57#1
        let tmp%58#0: Encoded(len+uint512[]) = encoded_array%11#0
        let aggregate%encoded%58#1: Encoded(uint512) = (concat 0x tmp%6#0)
        let aggregate%as_bytes%17#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%17#1)
        let aggregate%encoded%59#1: bytes = (concat aggregate%len_u16%5#1 aggregate%encoded%58#1)
        let aggregate%encoded%60#1: Encoded(len+uint512[]) = (concat aggregate%encoded%59#1 0x)
        let encoded_array%12#0: Encoded(len+uint512[]) = aggregate%encoded%60#1
        let tmp%60#0: bool = (== tmp%58#0 encoded_array%12#0)
        (assert tmp%60#0)
        let aggregate%length%9#1: uint64 = (len d#0)
        let aggregate%as_bytes%18#1: bytes[8] = (itob aggregate%length%9#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%18#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 d#0)
        let aggregate%as_Encoded(len+uint8[])%3#1: Encoded(len+uint8[]) = aggregate%encoded_value%5#1
        let aggregate%tail%7#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%3#1)
        let aggregate%data_length%7#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%3#1)
        let aggregate%current_tail_offset%7#1: uint64 = (+ 2u aggregate%data_length%7#1)
        let aggregate%as_bytes%19#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%19#1)
        let aggregate%encoded%61#1: Encoded((len+uint8[])) = (concat 0x aggregate%offset_as_uint16%7#1)
        let aggregate%as_bytes%20#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%20#1)
        let aggregate%encoded%62#1: bytes = (concat aggregate%len_u16%6#1 aggregate%encoded%61#1)
        let aggregate%encoded%63#1: Encoded(len+(len+uint8[])[]) = (concat aggregate%encoded%62#1 aggregate%tail%7#1)
        let encoded_array%13#0: Encoded(len+(len+uint8[])[]) = aggregate%encoded%63#1
        let tmp%61#0: Encoded(len+(len+uint8[])[]) = encoded_array%13#0
        let aggregate%tail%8#1: bytes = (concat 0x tmp%9#0)
        let aggregate%data_length%8#1: uint64 = (len tmp%9#0)
        let aggregate%current_tail_offset%8#1: uint64 = (+ 2u aggregate%data_length%8#1)
        let aggregate%as_bytes%21#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%21#1)
        let aggregate%encoded%64#1: Encoded((len+uint8[])) = (concat 0x aggregate%offset_as_uint16%8#1)
        let aggregate%as_bytes%22#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%22#1)
        let aggregate%encoded%65#1: bytes = (concat aggregate%len_u16%7#1 aggregate%encoded%64#1)
        let aggregate%encoded%66#1: Encoded(len+(len+uint8[])[]) = (concat aggregate%encoded%65#1 aggregate%tail%8#1)
        let encoded_array%14#0: Encoded(len+(len+uint8[])[]) = aggregate%encoded%66#1
        let tmp%63#0: bool = (== tmp%61#0 encoded_array%14#0)
        (assert tmp%63#0)
        let aggregate%length%10#1: uint64 = (len e#0)
        let aggregate%as_bytes%23#1: bytes[8] = (itob aggregate%length%10#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%23#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 e#0)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let aggregate%tail%9#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%data_length%9#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%2#1)
        let aggregate%current_tail_offset%9#1: uint64 = (+ 2u aggregate%data_length%9#1)
        let aggregate%as_bytes%24#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%24#1)
        let aggregate%encoded%67#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%9#1)
        let aggregate%as_bytes%25#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%25#1)
        let aggregate%encoded%68#1: bytes = (concat aggregate%len_u16%8#1 aggregate%encoded%67#1)
        let aggregate%encoded%69#1: Encoded(len+(len+utf8[])[]) = (concat aggregate%encoded%68#1 aggregate%tail%9#1)
        let encoded_array%15#0: Encoded(len+(len+utf8[])[]) = aggregate%encoded%69#1
        let tmp%64#0: Encoded(len+(len+utf8[])[]) = encoded_array%15#0
        let aggregate%tail%10#1: bytes = (concat 0x tmp%12#0)
        let aggregate%data_length%10#1: uint64 = (len tmp%12#0)
        let aggregate%current_tail_offset%10#1: uint64 = (+ 2u aggregate%data_length%10#1)
        let aggregate%as_bytes%26#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%10#1: bytes = ((extract 6 2) aggregate%as_bytes%26#1)
        let aggregate%encoded%70#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%10#1)
        let aggregate%as_bytes%27#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%27#1)
        let aggregate%encoded%71#1: bytes = (concat aggregate%len_u16%9#1 aggregate%encoded%70#1)
        let aggregate%encoded%72#1: Encoded(len+(len+utf8[])[]) = (concat aggregate%encoded%71#1 aggregate%tail%10#1)
        let encoded_array%16#0: Encoded(len+(len+utf8[])[]) = aggregate%encoded%72#1
        let tmp%66#0: bool = (== tmp%64#0 encoded_array%16#0)
        (assert tmp%66#0)
        let aggregate%encoded%73#1: Encoded(uint8[32]) = (concat 0x f#0)
        let aggregate%as_bytes%28#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%10#1: bytes = ((extract 6 2) aggregate%as_bytes%28#1)
        let aggregate%encoded%74#1: bytes = (concat aggregate%len_u16%10#1 aggregate%encoded%73#1)
        let aggregate%encoded%75#1: Encoded(len+uint8[32][]) = (concat aggregate%encoded%74#1 0x)
        let encoded_array%17#0: Encoded(len+uint8[32][]) = aggregate%encoded%75#1
        let tmp%67#0: Encoded(len+uint8[32][]) = encoded_array%17#0
        let tmp%68#0: bool = (== tmp%67#0 encoded_array%17#0)
        (assert tmp%68#0)
        let aggregate%length%11#1: uint64 = (len g#0)
        let aggregate%lengths_equal%4#1: bool = (== aggregate%length%11#1 12u)
        (assert aggregate%lengths_equal%4#1) // invalid size
        let aggregate%as_Encoded(uint8[12])%4#1: Encoded(uint8[12]) = g#0
        let aggregate%encoded%76#1: Encoded(uint8[12]) = (concat 0x aggregate%as_Encoded(uint8[12])%4#1)
        let aggregate%as_bytes%29#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%11#1: bytes = ((extract 6 2) aggregate%as_bytes%29#1)
        let aggregate%encoded%77#1: bytes = (concat aggregate%len_u16%11#1 aggregate%encoded%76#1)
        let aggregate%encoded%78#1: Encoded(len+uint8[12][]) = (concat aggregate%encoded%77#1 0x)
        let encoded_array%19#0: Encoded(len+uint8[12][]) = aggregate%encoded%78#1
        let tmp%69#0: Encoded(len+uint8[12][]) = encoded_array%19#0
        let aggregate%encoded%79#1: Encoded(uint8[12]) = (concat 0x tmp%25#0)
        let aggregate%as_bytes%30#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%12#1: bytes = ((extract 6 2) aggregate%as_bytes%30#1)
        let aggregate%encoded%80#1: bytes = (concat aggregate%len_u16%12#1 aggregate%encoded%79#1)
        let aggregate%encoded%81#1: Encoded(len+uint8[12][]) = (concat aggregate%encoded%80#1 0x)
        let encoded_array%20#0: Encoded(len+uint8[12][]) = aggregate%encoded%81#1
        let tmp%71#0: bool = (== tmp%69#0 encoded_array%20#0)
        (assert tmp%71#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: string, d_bytes: bytes, e: Encoded(uint64,(len+uint8[])), e_bytes: bytes, f: Encoded(uint8[32]), f_bytes: bytes, g: bytes[12], g_bytes: bytes) -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (btoi a_bytes#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let aggregate%get_bit%0#1: bool = (getbit b_bytes#0 0u)
        let tmp%2#0: bool = aggregate%get_bit%0#1
        let tmp%3#0: bool = (== tmp%2#0 b#0)
        (assert tmp%3#0)
        let tmp%4#0: biguint = c_bytes#0
        let tmp%5#0: bool = (b== tmp%4#0 c#0)
        (assert tmp%5#0)
        let tmp%6#0: string = ((extract 2 0) d_bytes#0)
        let tmp%7#0: bool = (== tmp%6#0 d#0)
        (assert tmp%7#0)
        let tmp%8#0: Encoded(uint64,(len+uint8[])) = e_bytes#0
        let aggregate%extract%0#1: bytes = (extract3 tmp%8#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let aggregate%extract%1#1: bytes = (extract3 e#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let tmp%9#0: bool = (== tuple_item%0#0 tuple_item%1#0)
        goto tmp%9#0 ? block@1 : block@3
    block@1: // and_contd_L89
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 tmp%8#0 8u)
        let aggregate%len%0#1: uint64 = (len tmp%8#0)
        let aggregate%substring3%0#1: bytes = (substring3 tmp%8#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%2#0: Encoded(len+uint8[]) = aggregate%substring3%0#1
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%1#1: uint64 = (len e#0)
        let aggregate%substring3%1#1: bytes = (substring3 e#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let tuple_item%3#0: Encoded(len+uint8[]) = aggregate%substring3%1#1
        let tmp%11#0: bool = (== tuple_item%2#0 tuple_item%3#0)
        goto tmp%11#0 ? block@2 : block@3
    block@2: // bool_true_L89
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L89
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L89
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat 0x0001 a_bytes#0)
        let tmp%16#0: Encoded(len+uint64[]) = reinterpret_Encoded(len+uint64[])%0#0
        let array_length%0#0: uint64 = (extract_uint16 tmp%16#0 0u)
        let tmp%17#0: bool = (== array_length%0#0 1u)
        goto tmp%17#0 ? block@5 : block@7
    block@5: // and_contd_L93
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) tmp%16#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%19#0: bool = (== values%0#0 a#0)
        goto tmp%19#0 ? block@6 : block@7
    block@6: // bool_true_L93
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L93
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L93
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat 0x0001 b_bytes#0)
        let tmp%20#0: Encoded(len+bool1[]) = reinterpret_Encoded(len+bool1[])%0#0
        let array_length%1#0: uint64 = (extract_uint16 tmp%20#0 0u)
        let tmp%21#0: bool = (== array_length%1#0 1u)
        goto tmp%21#0 ? block@9 : block@11
    block@9: // and_contd_L94
        let aggregate%array_length%0#1: uint64 = (extract_uint16 tmp%20#0 0u)
        let aggregate%lt%0#1: bool = (< 0u aggregate%array_length%0#1)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) tmp%20#0)
        let aggregate%get_bit%1#1: uint64 = (getbit aggregate%array_trimmed%1#1 0u)
        let array_item%1#0: bool = aggregate%get_bit%1#1
        let tmp%23#0: bool = (== array_item%1#0 b#0)
        goto tmp%23#0 ? block@10 : block@11
    block@10: // bool_true_L94
        let and_result%2#0: bool = 1u
        goto block@12
    block@11: // bool_false_L94
        let and_result%2#1: bool = 0u
        goto block@12
    block@12: // bool_merge_L94
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@10, and_result%2#1 <- block@11)
        (assert and_result%2#2) // Array of boolean matches
        let tmp%24#0: bytes = (concat 0x0001 c_bytes#0)
        (log tmp%24#0)
        let tmp%25#0: Encoded(len+uint512[]) = tmp%24#0
        let array_length%2#0: uint64 = (extract_uint16 tmp%25#0 0u)
        let tmp%26#0: bool = (== array_length%2#0 1u)
        goto tmp%26#0 ? block@13 : block@15
    block@13: // and_contd_L96
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) tmp%25#0)
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 64u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%1#1 64u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint512) = aggregate%encoded_element%1#1
        let values%1#0: biguint = array_item%2#0
        let tmp%28#0: bool = (b== values%1#0 c#0)
        goto tmp%28#0 ? block@14 : block@15
    block@14: // bool_true_L96
        let and_result%3#0: bool = 1u
        goto block@16
    block@15: // bool_false_L96
        let and_result%3#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L96
        let and_result%3#2: bool = Ï†(and_result%3#0 <- block@14, and_result%3#1 <- block@15)
        (assert and_result%3#2) // Array of biguint matches
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat 0x00010002 d_bytes#0)
        let tmp%31#0: Encoded(len+(len+utf8[])[]) = reinterpret_Encoded(len+(len+utf8[])[])%0#0
        let array_length%3#0: uint64 = (extract_uint16 tmp%31#0 0u)
        let tmp%32#0: bool = (== array_length%3#0 1u)
        goto tmp%32#0 ? block@17 : block@19
    block@17: // and_contd_L97
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) tmp%31#0)
        let aggregate%array_length%1#1: uint64 = (extract_uint16 tmp%31#0 0u)
        let aggregate%lt%1#1: bool = (< 0u aggregate%array_length%1#1)
        (assert aggregate%lt%1#1) // index access is out of bounds
        let aggregate%item_offset_offset%0#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1)
        let aggregate%item_length_in_bytes%0#1: uint64 = (* aggregate%item_length%0#1 1u)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length_in_bytes%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let array_item%3#0: Encoded(len+utf8[]) = aggregate%item%0#1
        let values%2#0: string = ((extract 2 0) array_item%3#0)
        let tmp%36#0: bool = (== values%2#0 d#0)
        goto tmp%36#0 ? block@18 : block@19
    block@18: // bool_true_L97
        let and_result%4#0: bool = 1u
        goto block@20
    block@19: // bool_false_L97
        let and_result%4#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L97
        let and_result%4#2: bool = Ï†(and_result%4#0 <- block@18, and_result%4#1 <- block@19)
        (assert and_result%4#2) // Array of string matches
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat 0x00010002 e_bytes#0)
        let tmp%39#0: Encoded(len+(uint64,(len+uint8[]))[]) = reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0
        let array_length%4#0: uint64 = (extract_uint16 tmp%39#0 0u)
        let tmp%40#0: bool = (== array_length%4#0 1u)
        goto tmp%40#0 ? block@21 : block@24
    block@21: // and_contd_L99
        let aggregate%array_head_and_tail%1#1: bytes = ((extract 2 0) tmp%39#0)
        let aggregate%array_length%2#1: uint64 = (extract_uint16 tmp%39#0 0u)
        let aggregate%item_offset_offset%1#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%item_offset_offset%1#1)
        let aggregate%next_index%0#1: uint64 = (+ 0u 1u)
        let aggregate%has_next%0#1: uint64 = (- aggregate%array_length%2#1 aggregate%next_index%0#1) // on error: index access is out of bounds
        let aggregate%end_of_array%0#1: uint64 = (len aggregate%array_head_and_tail%1#1)
        let aggregate%next_item_offset_offset%0#1: uint64 = (* aggregate%next_index%0#1 2u)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%next_item_offset_offset%0#1)
        let aggregate%end_offset%0#1: uint64 = (select aggregate%end_of_array%0#1 aggregate%next_item_offset%0#1 aggregate%has_next%0#1)
        let aggregate%substring3%2#1: bytes = (substring3 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1 aggregate%end_offset%0#1)
        let aggregate%extract%2#1: bytes = (extract3 aggregate%substring3%2#1 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%2#1
        let tmp%44#0: bool = (== tuple_item%4#0 tuple_item%1#0)
        goto tmp%44#0 ? block@22 : block@24
    block@22: // and_contd_L99
        let aggregate%array_head_and_tail%2#1: bytes = ((extract 2 0) tmp%39#0)
        let aggregate%array_length%3#1: uint64 = (extract_uint16 tmp%39#0 0u)
        let aggregate%item_offset_offset%2#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%item_offset_offset%2#1)
        let aggregate%next_index%1#1: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#1: uint64 = (- aggregate%array_length%3#1 aggregate%next_index%1#1) // on error: index access is out of bounds
        let aggregate%end_of_array%1#1: uint64 = (len aggregate%array_head_and_tail%2#1)
        let aggregate%next_item_offset_offset%1#1: uint64 = (* aggregate%next_index%1#1 2u)
        let aggregate%next_item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%next_item_offset_offset%1#1)
        let aggregate%end_offset%1#1: uint64 = (select aggregate%end_of_array%1#1 aggregate%next_item_offset%1#1 aggregate%has_next%1#1)
        let aggregate%substring3%3#1: bytes = (substring3 aggregate%array_head_and_tail%2#1 aggregate%item_offset%2#1 aggregate%end_offset%1#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%3#1 8u)
        let aggregate%len%2#1: uint64 = (len aggregate%substring3%3#1)
        let aggregate%substring3%4#1: bytes = (substring3 aggregate%substring3%3#1 aggregate%extract_uint16%2#1 aggregate%len%2#1)
        let tuple_item%6#0: Encoded(len+uint8[]) = aggregate%substring3%4#1
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%3#1: uint64 = (len e#0)
        let aggregate%substring3%5#1: bytes = (substring3 e#0 aggregate%extract_uint16%3#1 aggregate%len%3#1)
        let tuple_item%7#0: Encoded(len+uint8[]) = aggregate%substring3%5#1
        let tmp%48#0: bool = (== tuple_item%6#0 tuple_item%7#0)
        goto tmp%48#0 ? block@23 : block@24
    block@23: // bool_true_L99
        let and_result%5#0: bool = 1u
        goto block@25
    block@24: // bool_false_L99
        let and_result%5#1: bool = 0u
        goto block@25
    block@25: // bool_merge_L99
        let and_result%5#2: bool = Ï†(and_result%5#0 <- block@23, and_result%5#1 <- block@24)
        (assert and_result%5#2) // Array of struct matches
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat 0x0001 f_bytes#0)
        let tmp%50#0: Encoded(len+uint8[32][]) = reinterpret_Encoded(len+uint8[32][])%0#0
        let array_length%5#0: uint64 = (extract_uint16 tmp%50#0 0u)
        let tmp%51#0: bool = (== array_length%5#0 1u)
        goto tmp%51#0 ? block@26 : block@28
    block@26: // and_contd_L100
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) tmp%50#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 0u 32u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%2#1 32u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8[32]) = aggregate%encoded_element%2#1
        let tmp%54#0: bool = (== array_item%6#0 f#0)
        goto tmp%54#0 ? block@27 : block@28
    block@27: // bool_true_L100
        let and_result%6#0: bool = 1u
        goto block@29
    block@28: // bool_false_L100
        let and_result%6#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L100
        let and_result%6#2: bool = Ï†(and_result%6#0 <- block@27, and_result%6#1 <- block@28)
        (assert and_result%6#2) // Array of address matches
        let tmp%55#0: bytes[12] = g_bytes#0
        let tmp%56#0: bool = (== tmp%55#0 g#0)
        (assert tmp%56#0)
        return 