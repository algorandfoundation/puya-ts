main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__() -> bool:
    block@0: // L18
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L18
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string)void" => block@2, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[])void" => block@3, * => block@4}
    block@2: // testEncoding_route_L19
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%8#0: bool = (getbit reinterpret_bytes[1]%0#0 0u)
        let reinterpret_bytes[64]%0#0: bytes[64] = (txna ApplicationArgs 3)
        let tmp%9#0: bytes = (txna ApplicationArgs 4)
        let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
        let tmp%11#0: bytes = (txna ApplicationArgs 5)
        let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%7#0, tmp%8#0, reinterpret_bytes[64]%0#0, tmp%10#0, tmp%12#0)
        return 1u
    block@3: // testDecoding_route_L40
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%18#0: bytes = (txna ApplicationArgs 2)
        let tmp%19#0: bytes = ((extract 2 0) tmp%18#0)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%20#0: bool = (getbit reinterpret_bytes[1]%1#0 0u)
        let tmp%21#0: bytes = (txna ApplicationArgs 4)
        let tmp%22#0: bytes = ((extract 2 0) tmp%21#0)
        let reinterpret_bytes[64]%1#0: bytes[64] = (txna ApplicationArgs 5)
        let tmp%23#0: bytes = (txna ApplicationArgs 6)
        let tmp%24#0: bytes = ((extract 2 0) tmp%23#0)
        let tmp%25#0: bytes = (txna ApplicationArgs 7)
        let tmp%26#0: bytes = ((extract 2 0) tmp%25#0)
        let tmp%27#0: bytes = (txna ApplicationArgs 8)
        let tmp%28#0: bytes = ((extract 2 0) tmp%27#0)
        let tmp%29#0: bytes = (txna ApplicationArgs 9)
        let item0%0#0: bytes = (extract3 tmp%29#0 0u 8u) // on error: Index access is out of bounds
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%29#0 8u)
        let item_end_offset%0#0: uint64 = (len tmp%29#0)
        let item1%0#0: bytes = (substring3 tmp%29#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%30#0: bytes = (txna ApplicationArgs 10)
        let tmp%31#0: bytes = ((extract 2 0) tmp%30#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%17#0, tmp%19#0, tmp%20#0, tmp%22#0, reinterpret_bytes[64]%1#0, tmp%24#0, tmp%26#0, tmp%28#0, item0%0#0, item1%0#0, tmp%31#0)
        return 1u
    block@4: // switch_case_default_L18
        goto block@5
    block@5: // switch_case_next_L18
        goto block@10
    block@6: // bare_routing_L18
        let tmp%32#0: uint64 = (txn OnCompletion)
        switch tmp%32#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L18
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (== tmp%33#0 0u)
        (assert tmp%34#0) // can only call when creating
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L18
        goto block@9
    block@9: // switch_case_next_L18
        goto block@10
    block@10: // after_if_else_L18
        return 0u

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: bytes) -> void:
    block@0: // L19
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let val_as_bytes%1#0: bytes[8] = (itob a#0)
        let tmp%0#0: bool = (== val_as_bytes%0#0 val_as_bytes%1#0)
        (assert tmp%0#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u b#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u b#0)
        let tmp%1#0: bool = (== encoded_bool%0#0 encoded_bool%1#0)
        (assert tmp%1#0)
        let len_%0#0: uint64 = (len c#0)
        let no_overflow%0#0: bool = (<= len_%0#0 64u)
        (assert no_overflow%0#0) // overflow
        let b_zeros%0#0: bytes = (bzero 64u)
        let tmp%2#0: bytes = (b| c#0 b_zeros%0#0)
        let len_%1#0: uint64 = (len c#0)
        let no_overflow%1#0: bool = (<= len_%1#0 64u)
        (assert no_overflow%1#0) // overflow
        let b_zeros%1#0: bytes = (bzero 64u)
        let tmp%3#0: bytes = (b| c#0 b_zeros%1#0)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let length%0#0: uint64 = (len d#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 d#0)
        let length%1#0: uint64 = (len d#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 d#0)
        let tmp%5#0: bool = (== encoded_value%0#0 encoded_value%1#0)
        (assert tmp%5#0)
        let length%2#0: uint64 = (len e#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 e#0)
        let length%3#0: uint64 = (len e#0)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 e#0)
        let tmp%6#0: bool = (== encoded_value%2#0 encoded_value%3#0)
        (assert tmp%6#0)
        let val_as_bytes%2#0: bytes[8] = (itob a#0)
        let length%4#0: uint64 = (len d#0)
        let as_bytes%4#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 d#0)
        let current_tail_offset%0#0: uint64 = 10u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%2#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%4#0)
        let val_as_bytes%3#0: bytes[8] = (itob a#0)
        let length%5#0: uint64 = (len d#0)
        let as_bytes%6#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 d#0)
        let val_as_bytes%4#0: bytes[8] = (itob a#0)
        let length%6#0: uint64 = (len d#0)
        let as_bytes%7#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 d#0)
        let current_tail_offset%2#0: uint64 = 10u
        let encoded_tuple_buffer%4#0: bytes[0] = 0x
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%6#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%6#0)
        let tmp%7#0: bool = (== encoded_tuple_buffer%3#0 encoded_tuple_buffer%7#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== 8u 8u)
        (assert tmp%8#0)
        let tmp%9#0: bool = (== 1u 1u)
        (assert tmp%9#0)
        let tmp%10#0: bool = (== 64u 64u)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== 17u 17u)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== 17u 17u)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== 3u 3u)
        (assert tmp%13#0)
        let tmp%14#0: bool = (== 3u 3u)
        (assert tmp%14#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: bytes, d_bytes: bytes, e.a: bytes[8], e.b: bytes, e_bytes: bytes) -> void:
    block@0: // L40
        let reinterpret_bytes[8]%0#0: bytes[8] = a_bytes#0
        let tmp%0#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let reinterpret_bytes[1]%0#0: bytes[1] = b_bytes#0
        let tmp%2#0: bool = (getbit reinterpret_bytes[1]%0#0 0u)
        let tmp%3#0: bool = (== tmp%2#0 b#0)
        (assert tmp%3#0)
        let reinterpret_bytes[64]%0#0: bytes[64] = c_bytes#0
        let tmp%4#0: bool = (b== reinterpret_bytes[64]%0#0 c#0)
        (assert tmp%4#0)
        let tmp%5#0: bytes = ((extract 2 0) d_bytes#0)
        let tmp%6#0: bool = (== tmp%5#0 d#0)
        (assert tmp%6#0)
        let item0%0#0: bytes = (extract3 e_bytes#0 0u 8u) // on error: Index access is out of bounds
        let item_start_offset%0#0: uint64 = (extract_uint16 e_bytes#0 8u)
        let item_end_offset%0#0: uint64 = (len e_bytes#0)
        let item1%0#0: bytes = (substring3 e_bytes#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%7#0: bool = (== item0%0#0 e.a#0)
        goto tmp%7#0 ? block@1 : block@3
    block@1: // and_contd_L57
        let item0%1#0: bytes = (extract3 e_bytes#0 0u 8u) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 e_bytes#0 8u)
        let item_end_offset%1#0: uint64 = (len e_bytes#0)
        let item1%1#0: bytes = (substring3 e_bytes#0 item_start_offset%1#0 item_end_offset%1#0)
        let tmp%8#0: bool = (== item1%1#0 e.b#0)
        goto tmp%8#0 ? block@2 : block@3
    block@2: // bool_true_L57
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L57
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L57
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__algots__.defaultCreate() -> void:
    block@0: // L18
        return 