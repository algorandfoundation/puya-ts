main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address,byte[12])void" => block@3, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[],byte[12],byte[])void" => block@4, * => block@11}
    block@3: // testEncoding_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let aggregate%get_bit%0#1: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%10#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%11#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint8[12])%0#0: Encoded(uint8[12]) = (txna ApplicationArgs 7)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%7#0, aggregate%get_bit%0#1, reinterpret_Encoded(uint512)%0#0, tmp%10#0, tmp%11#0, reinterpret_Encoded(uint8[32])%0#0, reinterpret_Encoded(uint8[12])%0#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testDecoding_route_L69
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%18#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(bool8)%1#0: Encoded(bool8) = (txna ApplicationArgs 3)
        let aggregate%get_bit%1#1: bool = (getbit reinterpret_Encoded(bool8)%1#0 0u)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%20#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let reinterpret_Encoded(uint512)%1#0: Encoded(uint512) = (txna ApplicationArgs 5)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let tmp%22#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 7)
        let tmp%23#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 8)
        let tmp%24#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 10)
        let tmp%25#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 12)
        let tmp%26#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        let reinterpret_Encoded(uint8[12])%1#0: Encoded(uint8[12]) = (txna ApplicationArgs 13)
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 14)
        let tmp%28#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%7#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%17#0, tmp%18#0, aggregate%get_bit%1#1, tmp%20#0, reinterpret_Encoded(uint512)%1#0, tmp%22#0, tmp%23#0, tmp%24#0, reinterpret_Encoded(uint64,(len+uint8[]))%0#0, tmp%25#0, reinterpret_Encoded(uint8[32])%1#0, tmp%26#0, reinterpret_Encoded(uint8[12])%1#0, tmp%28#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L24
        let tmp%29#0: uint64 = (txn OnCompletion)
        goto tmp%29#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L24
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // can only call when creating
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L24
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2 <- block@8, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: string, f: Encoded(uint8[32]), g: bytes[12]) -> void:
    block@2: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 1410u tmp%1#1)
        goto tmp%2#1 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let aggregate%value_len%0#1: uint64 = (len c#0)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%length%3#1: uint64 = (len g#0)
        let aggregate%lengths_equal%0#1: bool = (== aggregate%length%3#1 12u)
        (assert aggregate%lengths_equal%0#1) // invalid size
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: string, d_bytes: bytes, e: Encoded(uint64,(len+uint8[])), e_bytes: bytes, f: Encoded(uint8[32]), f_bytes: bytes, g: bytes[12], g_bytes: bytes) -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (btoi a_bytes#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let aggregate%get_bit%0#1: bool = (getbit b_bytes#0 0u)
        let tmp%3#0: bool = (== aggregate%get_bit%0#1 b#0)
        (assert tmp%3#0)
        let tmp%5#0: bool = (b== c_bytes#0 c#0)
        (assert tmp%5#0)
        let tmp%6#0: string = ((extract 2 0) d_bytes#0)
        let tmp%7#0: bool = (== tmp%6#0 d#0)
        (assert tmp%7#0)
        let aggregate%extract%0#1: bytes = ((extract 0 8) e_bytes#0)
        let aggregate%extract%1#1: bytes = ((extract 0 8) e#0)
        let tmp%9#0: bool = (== aggregate%extract%0#1 aggregate%extract%1#1)
        goto tmp%9#0 ? block@1 : block@3
    block@1: // and_contd_L89
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 e_bytes#0 8u)
        let aggregate%len%0#1: uint64 = (len e_bytes#0)
        let aggregate%substring3%0#1: bytes = (substring3 e_bytes#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%1#1: uint64 = (len e#0)
        let aggregate%substring3%1#1: bytes = (substring3 e#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let tmp%11#0: bool = (== aggregate%substring3%0#1 aggregate%substring3%1#1)
        goto tmp%11#0 ? block@2 : block@3
    block@2: // bool_true_L89
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L89
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L89
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (concat 0x0001 a_bytes#0)
        let array_length%0#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint64[])%0#0 0u)
        let tmp%17#0: bool = (== array_length%0#0 1u)
        goto tmp%17#0 ? block@5 : block@7
    block@5: // and_contd_L93
        let values%0#0: uint64 = (extract_uint64 reinterpret_Encoded(len+uint64[])%0#0 2u)
        let tmp%19#0: bool = (== values%0#0 a#0)
        goto tmp%19#0 ? block@6 : block@7
    block@6: // bool_true_L93
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L93
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L93
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // Array of uint64 matches
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (concat 0x0001 b_bytes#0)
        let array_length%1#0: uint64 = (extract_uint16 reinterpret_Encoded(len+bool1[])%0#0 0u)
        let tmp%21#0: bool = (== array_length%1#0 1u)
        goto tmp%21#0 ? block@9 : block@11
    block@9: // and_contd_L94
        (assert array_length%1#0) // index access is out of bounds
        let aggregate%get_bit%1#1: uint64 = (getbit reinterpret_Encoded(len+bool1[])%0#0 16u)
        let tmp%23#0: bool = (== aggregate%get_bit%1#1 b#0)
        goto tmp%23#0 ? block@10 : block@11
    block@10: // bool_true_L94
        let and_result%2#0: bool = 1u
        goto block@12
    block@11: // bool_false_L94
        let and_result%2#1: bool = 0u
        goto block@12
    block@12: // bool_merge_L94
        let and_result%2#2: bool = φ(and_result%2#0 <- block@10, and_result%2#1 <- block@11)
        (assert and_result%2#2) // Array of boolean matches
        let tmp%24#0: bytes = (concat 0x0001 c_bytes#0)
        (log tmp%24#0)
        let array_length%2#0: uint64 = (extract_uint16 tmp%24#0 0u)
        let tmp%26#0: bool = (== array_length%2#0 1u)
        goto tmp%26#0 ? block@13 : block@15
    block@13: // and_contd_L96
        let aggregate%encoded_element%1#1: bytes = ((extract 2 64) tmp%24#0)
        let tmp%28#0: bool = (b== aggregate%encoded_element%1#1 c#0)
        goto tmp%28#0 ? block@14 : block@15
    block@14: // bool_true_L96
        let and_result%3#0: bool = 1u
        goto block@16
    block@15: // bool_false_L96
        let and_result%3#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L96
        let and_result%3#2: bool = φ(and_result%3#0 <- block@14, and_result%3#1 <- block@15)
        (assert and_result%3#2) // Array of biguint matches
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (concat 0x00010002 d_bytes#0)
        let array_length%3#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(len+utf8[])[])%0#0 0u)
        let tmp%32#0: bool = (== array_length%3#0 1u)
        goto tmp%32#0 ? block@17 : block@19
    block@17: // and_contd_L97
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) reinterpret_Encoded(len+(len+utf8[])[])%0#0)
        (assert array_length%3#0) // index access is out of bounds
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 0u)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let values%2#0: string = ((extract 2 0) aggregate%item%0#1)
        let tmp%36#0: bool = (== values%2#0 d#0)
        goto tmp%36#0 ? block@18 : block@19
    block@18: // bool_true_L97
        let and_result%4#0: bool = 1u
        goto block@20
    block@19: // bool_false_L97
        let and_result%4#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L97
        let and_result%4#2: bool = φ(and_result%4#0 <- block@18, and_result%4#1 <- block@19)
        (assert and_result%4#2) // Array of string matches
        let reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = (concat 0x00010002 e_bytes#0)
        let array_length%4#0: uint64 = (extract_uint16 reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0 0u)
        let tmp%40#0: bool = (== array_length%4#0 1u)
        goto tmp%40#0 ? block@21 : block@24
    block@21: // and_contd_L99
        let aggregate%array_head_and_tail%1#1: bytes = ((extract 2 0) reinterpret_Encoded(len+(uint64,(len+uint8[]))[])%0#0)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 0u)
        let aggregate%has_next%0#1: uint64 = (- array_length%4#0 1u) // on error: index access is out of bounds
        let aggregate%end_of_array%0#1: uint64 = (len aggregate%array_head_and_tail%1#1)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 2u)
        let aggregate%end_offset%0#1: uint64 = (select aggregate%end_of_array%0#1 aggregate%next_item_offset%0#1 aggregate%has_next%0#1)
        let aggregate%substring3%2#1: bytes = (substring3 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1 aggregate%end_offset%0#1)
        let aggregate%extract%2#1: bytes = ((extract 0 8) aggregate%substring3%2#1)
        let tmp%44#0: bool = (== aggregate%extract%2#1 aggregate%extract%1#1)
        goto tmp%44#0 ? block@22 : block@24
    block@22: // and_contd_L99
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%2#1 8u)
        let aggregate%len%2#1: uint64 = (len aggregate%substring3%2#1)
        let aggregate%substring3%4#1: bytes = (substring3 aggregate%substring3%2#1 aggregate%extract_uint16%2#1 aggregate%len%2#1)
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 e#0 8u)
        let aggregate%len%3#1: uint64 = (len e#0)
        let aggregate%substring3%5#1: bytes = (substring3 e#0 aggregate%extract_uint16%3#1 aggregate%len%3#1)
        let tmp%48#0: bool = (== aggregate%substring3%4#1 aggregate%substring3%5#1)
        goto tmp%48#0 ? block@23 : block@24
    block@23: // bool_true_L99
        let and_result%5#0: bool = 1u
        goto block@25
    block@24: // bool_false_L99
        let and_result%5#1: bool = 0u
        goto block@25
    block@25: // bool_merge_L99
        let and_result%5#2: bool = φ(and_result%5#0 <- block@23, and_result%5#1 <- block@24)
        (assert and_result%5#2) // Array of struct matches
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (concat 0x0001 f_bytes#0)
        let array_length%5#0: uint64 = (extract_uint16 reinterpret_Encoded(len+uint8[32][])%0#0 0u)
        let tmp%51#0: bool = (== array_length%5#0 1u)
        goto tmp%51#0 ? block@26 : block@28
    block@26: // and_contd_L100
        let aggregate%encoded_element%2#1: bytes = ((extract 2 32) reinterpret_Encoded(len+uint8[32][])%0#0)
        let tmp%54#0: bool = (== aggregate%encoded_element%2#1 f#0)
        goto tmp%54#0 ? block@27 : block@28
    block@27: // bool_true_L100
        let and_result%6#0: bool = 1u
        goto block@29
    block@28: // bool_false_L100
        let and_result%6#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L100
        let and_result%6#2: bool = φ(and_result%6#0 <- block@27, and_result%6#1 <- block@28)
        (assert and_result%6#2) // Array of address matches
        let tmp%56#0: bool = (== g_bytes#0 g#0)
        (assert tmp%56#0)
        return 