main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L19
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testEncoding(uint64,bool,uint512,byte[],string,address)void" => block@3, method "testDecoding(uint64,byte[],bool,byte[],uint512,byte[],string,byte[],(uint64,byte[]),byte[],address,byte[])void" => block@4, * => block@11}
    block@3: // testEncoding_route_L20
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%8#0: bool = (getbit reinterpret_bytes[1]%0#0 0u)
        let reinterpret_bytes[64]%0#0: bytes[64] = (txna ApplicationArgs 3)
        let tmp%9#0: bytes = (txna ApplicationArgs 4)
        let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
        let tmp%11#0: bytes = (txna ApplicationArgs 5)
        let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
        let reinterpret_bytes[32]%0#0: bytes[32] = (txna ApplicationArgs 6)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(tmp%7#0, tmp%8#0, reinterpret_bytes[64]%0#0, tmp%10#0, tmp%12#0, reinterpret_bytes[32]%0#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testDecoding_route_L38
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%18#0: bytes = (txna ApplicationArgs 2)
        let tmp%19#0: bytes = ((extract 2 0) tmp%18#0)
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%20#0: bool = (getbit reinterpret_bytes[1]%1#0 0u)
        let tmp%21#0: bytes = (txna ApplicationArgs 4)
        let tmp%22#0: bytes = ((extract 2 0) tmp%21#0)
        let reinterpret_bytes[64]%1#0: bytes[64] = (txna ApplicationArgs 5)
        let tmp%23#0: bytes = (txna ApplicationArgs 6)
        let tmp%24#0: bytes = ((extract 2 0) tmp%23#0)
        let tmp%25#0: bytes = (txna ApplicationArgs 7)
        let tmp%26#0: bytes = ((extract 2 0) tmp%25#0)
        let tmp%27#0: bytes = (txna ApplicationArgs 8)
        let tmp%28#0: bytes = ((extract 2 0) tmp%27#0)
        let tmp%29#0: bytes = (txna ApplicationArgs 9)
        let item0%0#0: bytes = ((extract 0 8) tmp%29#0) // on error: Index access is out of bounds
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%29#0 8u)
        let item_end_offset%0#0: uint64 = (len tmp%29#0)
        let item1%0#0: bytes = (substring3 tmp%29#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%30#0: bytes = (txna ApplicationArgs 10)
        let tmp%31#0: bytes = ((extract 2 0) tmp%30#0)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txna ApplicationArgs 11)
        let tmp%32#0: bytes = (txna ApplicationArgs 12)
        let tmp%33#0: bytes = ((extract 2 0) tmp%32#0)
        tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(tmp%17#0, tmp%19#0, tmp%20#0, tmp%22#0, reinterpret_bytes[64]%1#0, tmp%24#0, tmp%26#0, tmp%28#0, item0%0#0, item1%0#0, tmp%31#0, reinterpret_bytes[32]%1#0, tmp%33#0)
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L19
        let tmp%34#0: uint64 = (txn OnCompletion)
        goto tmp%34#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L19
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // can only call when creating
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L19
        let tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#2 <- block@8, tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%0#0 2u)
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let array_head_and_tail#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tail_offset#0: uint64 = (* new_length#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tail_offset#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%5#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#1)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%6#1: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%7#1: uint64 = (+ tmp%6#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%7#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        let tmp%12#0: bytes = (concat tmp%2#0 array_head_and_tail#1)
        return tmp%12#0

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testEncoding(a: uint64, b: bool, c: biguint, d: bytes, e: bytes, f: bytes[32]) -> void:
    block@0: // L20
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let new_items_bytes#0: bytes = (setbit 0x00 0u b#0)
        let len_%0#0: uint64 = (len c#0)
        let no_overflow%0#0: bool = (<= len_%0#0 64u)
        (assert no_overflow%0#0) // overflow
        let b_zeros%0#0: bytes = (bzero 64u)
        let tmp%2#0: bytes = (b| c#0 b_zeros%0#0)
        let length%0#0: uint64 = (len d#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 d#0)
        let length%2#0: uint64 = (len e#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 e#0)
        let array%sub_item%0#1: bytes[8] = (itob a#0)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let encoded%0#0: uint64[] = array%data%0#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%2#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%9#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%9#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 encoded%0#0)
        let array_data%1#0: bytes = (concat 0x0001 val_as_bytes%0#0)
        let tmp%9#0: bool = (== concat_result%0#0 array_data%1#0)
        (assert tmp%9#0)
        let result#1: bytes = 0x000100
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = 16u
        goto block@4
    block@4: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@0, write_offset#2 <- block@5)
        let result#2: bytes = φ(result#1 <- block@0, result#3 <- block@5)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@0, read_offset#2 <- block@5)
        let tmp%6#1: bool = (< write_offset#1 17u)
        goto tmp%6#1 ? block@5 : block@6
    block@5: // while_body_L154
        let tmp%7#1: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#1)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 8u)
        goto block@4
    block@6: // after_while_L153
        let array_data%3#0: bytes = (concat 0x0001 new_items_bytes#0)
        let tmp%10#0: bool = (== result#2 array_data%3#0)
        (assert tmp%10#0)
        let array%encoded%1#1: bytes[512][] = (concat 0x c#0)
        let array%data%1#1: bytes[512][] = (concat 0x array%encoded%1#1)
        let encoded%1#0: bytes[512][] = array%data%1#1
        let byte_len%1#0: uint64 = (len encoded%1#0)
        let len_%3#0: uint64 = (/ byte_len%1#0 64u)
        let as_bytes%10#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%10#0)
        let concat_result%2#0: bytes = (concat len_16_bit%1#0 encoded%1#0)
        let array_data%5#0: bytes = (concat 0x0001 tmp%2#0)
        let tmp%12#0: bool = (== concat_result%2#0 array_data%5#0)
        (assert tmp%12#0)
        let concat_result%3#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, encoded_value%0#0, 1u)
        let result%3#0: bytes = (concat 0x0002 encoded_value%0#0)
        let array_data%7#0: bytes = (concat 0x0001 result%3#0)
        let tmp%13#0: bool = (== concat_result%3#0 array_data%7#0)
        (assert tmp%13#0)
        let concat_result%4#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, encoded_value%2#0, 1u)
        let result%5#0: bytes = (concat 0x0002 encoded_value%2#0)
        let array_data%9#0: bytes = (concat 0x0001 result%5#0)
        let tmp%14#0: bool = (== concat_result%4#0 array_data%9#0)
        (assert tmp%14#0)
        let array%encoded%2#1: bytes[32][] = (concat 0x f#0)
        let array%data%2#1: bytes[32][] = (concat 0x array%encoded%2#1)
        let encoded%2#0: bytes[32][] = array%data%2#1
        let byte_len%2#0: uint64 = (len encoded%2#0)
        let len_%5#0: uint64 = (/ byte_len%2#0 32u)
        let as_bytes%17#0: bytes[8] = (itob len_%5#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%17#0)
        let concat_result%5#0: bytes = (concat len_16_bit%2#0 encoded%2#0)
        let array_data%11#0: bytes = (concat 0x0001 f#0)
        let tmp%15#0: bool = (== concat_result%5#0 array_data%11#0)
        (assert tmp%15#0)
        return 

subroutine tests/approvals/arc4-encode-decode.algo.ts::Arc4EncodeDecode.testDecoding(a: uint64, a_bytes: bytes, b: bool, b_bytes: bytes, c: biguint, c_bytes: bytes, d: bytes, d_bytes: bytes, e.a: bytes[8], e.b: bytes, e_bytes: bytes, f: bytes[32], f_bytes: bytes) -> void:
    block@0: // L38
        let tmp%0#0: uint64 = (btoi a_bytes#0)
        let tmp%1#0: bool = (== tmp%0#0 a#0)
        (assert tmp%1#0)
        let tmp%2#0: bool = (getbit b_bytes#0 0u)
        let tmp%3#0: bool = (== tmp%2#0 b#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (b== c_bytes#0 c#0)
        (assert tmp%4#0)
        let tmp%5#0: bytes = ((extract 2 0) d_bytes#0)
        let tmp%6#0: bool = (== tmp%5#0 d#0)
        (assert tmp%6#0)
        let item0%0#0: bytes = ((extract 0 8) e_bytes#0) // on error: Index access is out of bounds
        let item_start_offset%0#0: uint64 = (extract_uint16 e_bytes#0 8u)
        let item_end_offset%0#0: uint64 = (len e_bytes#0)
        let tmp%7#0: bool = (== item0%0#0 e.a#0)
        goto tmp%7#0 ? block@1 : block@3
    block@1: // and_contd_L56
        let item1%1#0: bytes = (substring3 e_bytes#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%8#0: bool = (== item1%1#0 e.b#0)
        goto tmp%8#0 ? block@2 : block@3
    block@2: // bool_true_L56
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L56
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L56
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%11#0: bytes = (concat 0x0001 a_bytes#0)
        let tmp%12#0: uint64 = (extract_uint16 tmp%11#0 0u)
        let tmp%13#0: bool = (== tmp%12#0 1u)
        goto tmp%13#0 ? block@5 : block@7
    block@5: // and_contd_L60
        let tmp%15#0: uint64 = (extract_uint64 tmp%11#0 2u)
        let tmp%16#0: bool = (== tmp%15#0 a#0)
        goto tmp%16#0 ? block@6 : block@7
    block@6: // bool_true_L60
        let and_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L60
        let and_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L60
        let and_result%1#2: bool = φ(and_result%1#0 <- block@6, and_result%1#1 <- block@7)
        (assert and_result%1#2) // Array of uint64 matches
        let tmp%17#0: bytes = (concat 0x0001 b_bytes#0)
        let tmp%18#0: uint64 = (extract_uint16 tmp%17#0 0u)
        let tmp%19#0: bool = (== tmp%18#0 1u)
        goto tmp%19#0 ? block@9 : block@11
    block@9: // and_contd_L61
        let array_head_and_tail%1#0: bytes = ((extract 2 0) tmp%17#0)
        (assert tmp%18#0) // Index access is out of bounds
        let is_true%0#0: uint64 = (getbit array_head_and_tail%1#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%21#0: bool = (getbit encoded_bool%0#0 0u)
        let tmp%22#0: bool = (== tmp%21#0 b#0)
        goto tmp%22#0 ? block@10 : block@11
    block@10: // bool_true_L61
        let and_result%2#0: bool = 1u
        goto block@12
    block@11: // bool_false_L61
        let and_result%2#1: bool = 0u
        goto block@12
    block@12: // bool_merge_L61
        let and_result%2#2: bool = φ(and_result%2#0 <- block@10, and_result%2#1 <- block@11)
        (assert and_result%2#2) // Array of boolean matches
        let tmp%23#0: bytes = (concat 0x0001 c_bytes#0)
        (log tmp%23#0)
        let tmp%25#0: uint64 = (extract_uint16 tmp%23#0 0u)
        let tmp%26#0: bool = (== tmp%25#0 1u)
        goto tmp%26#0 ? block@13 : block@15
    block@13: // and_contd_L63
        let arc4_item%2#0: bytes = ((extract 2 64) tmp%23#0)
        let tmp%28#0: bool = (b== arc4_item%2#0 c#0)
        goto tmp%28#0 ? block@14 : block@15
    block@14: // bool_true_L63
        let and_result%3#0: bool = 1u
        goto block@16
    block@15: // bool_false_L63
        let and_result%3#1: bool = 0u
        goto block@16
    block@16: // bool_merge_L63
        let and_result%3#2: bool = φ(and_result%3#0 <- block@14, and_result%3#1 <- block@15)
        (assert and_result%3#2) // Array of biguint matches
        let tmp%31#0: bytes = (concat 0x00010002 d_bytes#0)
        let tmp%32#0: uint64 = (extract_uint16 tmp%31#0 0u)
        let tmp%33#0: bool = (== tmp%32#0 1u)
        goto tmp%33#0 ? block@17 : block@19
    block@17: // and_contd_L64
        let array_head_and_tail%3#0: bytes = ((extract 2 0) tmp%31#0)
        (assert tmp%32#0) // Index access is out of bounds
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%3#0 0u)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset%2#0)
        let item_head_tail_length%0#0: uint64 = (+ item_length%0#0 2u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%2#0 item_head_tail_length%0#0)
        let tmp%37#0: bytes = ((extract 2 0) arc4_item%3#0)
        let tmp%38#0: bool = (== tmp%37#0 d#0)
        goto tmp%38#0 ? block@18 : block@19
    block@18: // bool_true_L64
        let and_result%4#0: bool = 1u
        goto block@20
    block@19: // bool_false_L64
        let and_result%4#1: bool = 0u
        goto block@20
    block@20: // bool_merge_L64
        let and_result%4#2: bool = φ(and_result%4#0 <- block@18, and_result%4#1 <- block@19)
        (assert and_result%4#2) // Array of string matches
        let tmp%41#0: bytes = (concat 0x00010002 e_bytes#0)
        let tmp%42#0: uint64 = (extract_uint16 tmp%41#0 0u)
        let tmp%43#0: bool = (== tmp%42#0 1u)
        goto tmp%43#0 ? block@21 : block@24
    block@21: // and_contd_L66
        let array_head_and_tail%4#0: bytes = ((extract 2 0) tmp%41#0)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%4#0 0u)
        let has_next%0#0: uint64 = (- tmp%42#0 1u) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%4#0)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%4#0 2u)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%4#0: bytes = (substring3 array_head_and_tail%4#0 item_offset%3#0 end_offset%0#0)
        let item0%2#0: bytes = ((extract 0 8) arc4_item%4#0) // on error: Index access is out of bounds
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%4#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%4#0)
        let tmp%47#0: bool = (== item0%2#0 e.a#0)
        goto tmp%47#0 ? block@22 : block@24
    block@22: // and_contd_L66
        let item1%3#0: bytes = (substring3 arc4_item%4#0 item_start_offset%2#0 item_end_offset%2#0)
        let tmp%51#0: bool = (== item1%3#0 e.b#0)
        goto tmp%51#0 ? block@23 : block@24
    block@23: // bool_true_L66
        let and_result%5#0: bool = 1u
        goto block@25
    block@24: // bool_false_L66
        let and_result%5#1: bool = 0u
        goto block@25
    block@25: // bool_merge_L66
        let and_result%5#2: bool = φ(and_result%5#0 <- block@23, and_result%5#1 <- block@24)
        (assert and_result%5#2) // Array of struct matches
        let tmp%53#0: bytes = (concat 0x0001 f_bytes#0)
        let tmp%54#0: uint64 = (extract_uint16 tmp%53#0 0u)
        let tmp%55#0: bool = (== tmp%54#0 1u)
        goto tmp%55#0 ? block@26 : block@28
    block@26: // and_contd_L67
        let arc4_item%6#0: bytes = ((extract 2 32) tmp%53#0)
        let tmp%58#0: bool = (== arc4_item%6#0 f#0)
        goto tmp%58#0 ? block@27 : block@28
    block@27: // bool_true_L67
        let and_result%6#0: bool = 1u
        goto block@29
    block@28: // bool_false_L67
        let and_result%6#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L67
        let and_result%6#2: bool = φ(and_result%6#0 <- block@27, and_result%6#1 <- block@28)
        (assert and_result%6#2) // Array of address matches
        return 