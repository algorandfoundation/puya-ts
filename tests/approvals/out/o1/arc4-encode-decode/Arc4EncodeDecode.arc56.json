{
    "name": "Arc4EncodeDecode",
    "structs": {
        "TestObj": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "testEncoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "string",
                    "name": "e"
                },
                {
                    "type": "address",
                    "name": "f"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testDecoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "a_bytes"
                },
                {
                    "type": "bool",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "b_bytes"
                },
                {
                    "type": "uint512",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "c_bytes"
                },
                {
                    "type": "string",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "d_bytes"
                },
                {
                    "type": "(uint64,byte[])",
                    "struct": "TestObj",
                    "name": "e"
                },
                {
                    "type": "byte[]",
                    "name": "e_bytes"
                },
                {
                    "type": "address",
                    "name": "f"
                },
                {
                    "type": "byte[]",
                    "name": "f_bytes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1037
                    ],
                    "errorMessage": "Array of address matches"
                },
                {
                    "pc": [
                        886
                    ],
                    "errorMessage": "Array of biguint matches"
                },
                {
                    "pc": [
                        857
                    ],
                    "errorMessage": "Array of boolean matches"
                },
                {
                    "pc": [
                        931
                    ],
                    "errorMessage": "Array of string matches"
                },
                {
                    "pc": [
                        1010
                    ],
                    "errorMessage": "Array of struct matches"
                },
                {
                    "pc": [
                        815
                    ],
                    "errorMessage": "Array of uint64 matches"
                },
                {
                    "pc": [
                        206,
                        757,
                        840,
                        912,
                        961,
                        977
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        61,
                        278
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        789
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        364
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        64,
                        281
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        79,
                        105,
                        130,
                        146,
                        162,
                        195,
                        214,
                        239,
                        315,
                        331
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        97,
                        298
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        86,
                        112,
                        137,
                        153,
                        169,
                        221,
                        246,
                        322,
                        338
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        233,
                        350
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        124,
                        309
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        72,
                        289
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        204
                    ],
                    "errorMessage": "invalid number of bytes for tests/approvals/arc4-encode-decode.algo.ts::TestObj"
                },
                {
                    "pc": [
                        186
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of tests/approvals/arc4-encode-decode.algo.ts::TestObj"
                },
                {
                    "pc": [
                        181
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        529
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAECCCYHAgABAAMGgQEBAAIAAgIAAAQAAQACMRtBAUGCAgT4O5tJBOK9YlE2GgCOAgDbAAIiQzEZFEQxGEQ2GgFJFSUSRBc2GgJJIlkkCEsBFRJEVwIANhoDSRUjEkQiUzYaBEkiWSQISwEVEkRXAgA2GgVJFYFAEkQ2GgZJIlkkCEsBFRJEVwIANhoHSSJZJAhLARUSRFcCADYaCEkiWSQISwEVEkRXAgA2GglJFUsBJVlJgQoSREsCTEsCUkkiWSQIgQoITwISRExXAAg2GgpJIlkkCEsBFRJEVwIANhoLSRWBIBJENhoMSSJZJAhLARUSRFcCAE4MTgxODE4MTgxPC08MTwxPDE8MiAG7I0MxGRREMRhENhoBSRUlEkQXNhoCSRUjEkQiUzYaA0kVgUASRDYaBEkiWSQISwEVEkRXAgA2GgVJIlkkCEsBFRJEVwIANhoGSRWBIBJEiAB4I0MxGUD+zzEYFEQjQ4oDAYv9IllJi/8ITCQLJAhLARZXBgJOAov9JEsCUov/JAuvUIv9FYv9TwNPAlJQi/5QTCQLSSJMiwOLAgxBACOLBEkWVwYCiwGLA0lOBE8CXUmMAUsBWSQICIwEJAiMA0L/1YsAiwFQjACJigYAIkcGKUmBggsyDA1BABaxgQayEIEFshkqsh4qsh8isgGzQv/hi/oWKyKL+1SMBYv8FYFADkSBQK+L/KuMAIv9FRZXBgKL/VBJjAOL/hUWVwYCi/5QSYwEJwRPAlCMAScETFCMAihLAVAoTwJQEkSAAwABAIwGIowHgRCMCIsIgREMQQAfiwWLB0lOAlOLBosISU4DTwJUjAYjCIwIJQiMB0L/2SiLBVCLBhJEiwBJFYFAChZXBgJLAVAoTwJQEkQnBYsDI4j+yyiLAVASRCcFiwQjiP69KIsCUBJEi/8VgSAKFlcGAov/UCiL/1ASRImKDQAiRwYpRwSL9BeL8xJEi/YiU4v1EkSL+Iv3qESL+lcCAIv5EkSL/VcACIv9JVlMi/0VTIv7EkEBIIv9iwyLDVKL/BJBARMjRCiL9FBJjAEiWSMSQQD/iwEkW4vzEkEA9SNEKIv2UEmMAiJZSYwJIxJBAN6LAlcCAIsJRCJTKyJPAlQiU4v1EkEAxyNEKIv4UEmMA0mwIlkjEkEAsYsDVwJAi/eoQQCmI0QnBov6UEmMBCJZSYwKIxJBAI6LBFcCAIsKREkiWUpZJAhYVwIAi/kSQQB1I0QnBov9UEmMBSJZSYwLIxJBAF2LBVcCAEkiWYsLIwlLAhVLAyRZTwJNUkmMAElXAAhLASVZjAhMFYwHi/sSQQAviwCLCIsHUov8EkEAIiNEKIv/UEmMBiJZIxJBAA6LBlcCIIv+EkEAAyNEiSJC//oiQv/bIkL/iCJC/1ciQv82IkL/CCJC/uo=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 11,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}