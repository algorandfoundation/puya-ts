main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L268
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@10}
    block@3: // test_route_L271
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::LargeBox.test()
        let tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L268
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L268
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        let tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L268
        let tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#1 <- block@7, tests/approvals/box-proxies.algo.ts::LargeBox.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::LargeBox.test() -> void:
    block@6: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 7010u tmp%1#1)
        goto tmp%2#1 ? block@7 : block@11
    block@7: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@6
    block@11: // after_while_L20
        (box_create "large" 12800u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "large")
        let tmp%0#0: bool = (== value%0#0 12800u)
        (assert tmp%0#0) // Box should be created with the correct size
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L276
        let temp.0#0: uint64 = φ(item_index_internal%0#0 <- block@11, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< temp.0#0 200u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L276
        let box%element_offset%0#0: uint64 = (* temp.0#0 64u)
        let temp.1#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = (box_extract "large" box%element_offset%0#0 64u)
        let tmp%3#0: uint64 = (+ temp.0#0 10u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let x#1: Encoded(uint8[32],uint64,uint64,uint64,uint64) = ((replace2 32) temp.1#0 aggregate%val_as_bytes%0#0)
        (box_replace "large" box%element_offset%0#0 x#1)
        let box%box_extract%2#0: Encoded(uint8[32],uint64,uint64,uint64,uint64) = (box_extract "large" box%element_offset%0#0 64u)
        let values%0#0: uint64 = (extract_uint64 box%box_extract%2#0 32u)
        let tmp%5#0: bool = (== values%0#0 tmp%3#0)
        (assert tmp%5#0)
        let item_index_internal%0#2: uint64 = (+ temp.0#0 1u)
        goto block@1
    block@4: // after_for_L276
        return 