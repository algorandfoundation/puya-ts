main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L238
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test((uint64,uint64),string)void" => block@3, * => block@10}
    block@3: // test_route_L241
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract%1#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 8u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%1#1)
        let (tmp%7#0: uint64, tmp%8#0: uint64) = (aggregate%item0%0#1, aggregate%item1%0#1)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let tmp%9#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        tests/approvals/box-proxies.algo.ts::CompositeKeyTest.test(tmp%7#0, tmp%8#0, tmp%9#0)
        let tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L238
        let tmp%10#0: uint64 = (txn OnCompletion)
        goto tmp%10#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L238
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // can only call when creating
        let tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L238
        let tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#1 <- block@7, tests/approvals/box-proxies.algo.ts::CompositeKeyTest.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::CompositeKeyTest.test(key.a: uint64, key.b: uint64, val: string) -> void:
    block@0: // L241
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob key.a#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob key.b#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%2#1: Encoded(uint64,uint64) = (concat aggregate%encoded%1#1 0x)
        let encoded_for_storage%0#0: Encoded(uint64,uint64) = aggregate%encoded%2#1
        (box_del encoded_for_storage%0#0)
        (box_put encoded_for_storage%0#0 val#0)
        return 