{
    "name": "BoxCreate",
    "structs": {},
    "methods": [
        {
            "name": "createBoxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "boxBool": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym9vbA=="
                },
                "boxArc4Bool": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "YXJjNGI="
                },
                "boxStr": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "YQ=="
                },
                "boxUint": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Yg=="
                },
                "boxStaticArray": {
                    "keyType": "AVMString",
                    "valueType": "uint32[10]",
                    "key": "Yw=="
                },
                "boxDynamicArray": {
                    "keyType": "AVMString",
                    "valueType": "uint8[]",
                    "key": "ZA=="
                },
                "boxTuple": {
                    "keyType": "AVMString",
                    "valueType": "(uint8,uint8,bool,bool)",
                    "key": "ZQ=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        64
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        53
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgOCAxIDEwIDQwCiAgICBieXRlY2Jsb2NrICJhIiAiYiIgImMiICJkIiAiYm9vbCIgImFyYzRiIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTM5CiAgICAvLyBjbGFzcyBCb3hDcmVhdGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVANQogICAgcHVzaGJ5dGVzIDB4OTMyMDEwYzEgLy8gbWV0aG9kICJjcmVhdGVCb3hlcygpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlQm94ZXNfcm91dGVAMwogICAgZXJyCgptYWluX2NyZWF0ZUJveGVzX3JvdXRlQDM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDgKICAgIC8vIGNyZWF0ZUJveGVzKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBiIGNyZWF0ZUJveGVzCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTM5CiAgICAvLyBjbGFzcyBCb3hDcmVhdGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjpCb3hDcmVhdGUuY3JlYXRlQm94ZXNbcm91dGluZ10oKSAtPiB2b2lkOgpjcmVhdGVCb3hlczoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE0MgogICAgLy8gYm94U3RyID0gQm94PHN0cmluZz4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE0OQogICAgLy8gdGhpcy5ib3hTdHIuY3JlYXRlKHsgc2l6ZTogMTAgfSkKICAgIGludGNfMiAvLyAxMAogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDIKICAgIC8vIGJveFN0ciA9IEJveDxzdHJpbmc+KHsga2V5OiAnYScgfSkKICAgIGJ5dGVjXzAgLy8gImEiCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNTAKICAgIC8vIGFzc2VydCh0aGlzLmJveFN0ci5sZW5ndGggPT09IDEwKQogICAgYm94X2xlbgogICAgcG9wCiAgICBpbnRjXzIgLy8gMTAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE0MwogICAgLy8gYm94VWludCA9IEJveDx1aW50NjQ+KHsga2V5OiAnYicgfSkKICAgIGJ5dGVjXzEgLy8gImIiCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNTEKICAgIC8vIHRoaXMuYm94VWludC5jcmVhdGUoKQogICAgaW50Y18wIC8vIDgKICAgIGJveF9jcmVhdGUKICAgIHBvcAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTQzCiAgICAvLyBib3hVaW50ID0gQm94PHVpbnQ2ND4oeyBrZXk6ICdiJyB9KQogICAgYnl0ZWNfMSAvLyAiYiIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE1MgogICAgLy8gYXNzZXJ0KHRoaXMuYm94VWludC5sZW5ndGggPT09IDgpCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGludGNfMCAvLyA4CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDQKICAgIC8vIGJveFN0YXRpY0FycmF5ID0gQm94PGFyYzQuU3RhdGljQXJyYXk8YXJjNC5VaW50MzIsIDEwPj4oeyBrZXk6ICdjJyB9KQogICAgYnl0ZWNfMiAvLyAiYyIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE1MwogICAgLy8gdGhpcy5ib3hTdGF0aWNBcnJheS5jcmVhdGUoKQogICAgaW50Y18zIC8vIDQwCiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE0NAogICAgLy8gYm94U3RhdGljQXJyYXkgPSBCb3g8YXJjNC5TdGF0aWNBcnJheTxhcmM0LlVpbnQzMiwgMTA+Pih7IGtleTogJ2MnIH0pCiAgICBieXRlY18yIC8vICJjIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTU0CiAgICAvLyBhc3NlcnQodGhpcy5ib3hTdGF0aWNBcnJheS5sZW5ndGggPT09ICgzMiAvIDgpICogMTApCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGludGNfMyAvLyA0MAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTQ1CiAgICAvLyBib3hEeW5hbWljQXJyYXkgPSBCb3g8YXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50OD4+KHsga2V5OiAnZCcgfSkKICAgIGJ5dGVjXzMgLy8gImQiCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNTUKICAgIC8vIHRoaXMuYm94RHluYW1pY0FycmF5LmNyZWF0ZSh7IHNpemU6IDIgfSkKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE0NQogICAgLy8gYm94RHluYW1pY0FycmF5ID0gQm94PGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludDg+Pih7IGtleTogJ2QnIH0pCiAgICBieXRlY18zIC8vICJkIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTU2CiAgICAvLyBhc3NlcnQodGhpcy5ib3hEeW5hbWljQXJyYXkubGVuZ3RoID09PSAyKQogICAgYm94X2xlbgogICAgcG9wCiAgICBwdXNoaW50IDIgLy8gMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTQ2CiAgICAvLyBib3hUdXBsZSA9IEJveDxhcmM0LlR1cGxlPFthcmM0LlVpbnQ4LCBhcmM0LlVpbnQ4LCBhcmM0LkJvb2wsIGFyYzQuQm9vbF0+Pih7IGtleTogJ2UnIH0pCiAgICBwdXNoYnl0ZXMgImUiCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNTcKICAgIC8vIHRoaXMuYm94VHVwbGUuY3JlYXRlKCkKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE0NgogICAgLy8gYm94VHVwbGUgPSBCb3g8YXJjNC5UdXBsZTxbYXJjNC5VaW50OCwgYXJjNC5VaW50OCwgYXJjNC5Cb29sLCBhcmM0LkJvb2xdPj4oeyBrZXk6ICdlJyB9KQogICAgcHVzaGJ5dGVzICJlIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTU4CiAgICAvLyBhc3NlcnQodGhpcy5ib3hUdXBsZS5sZW5ndGggPT09IDMpCiAgICBib3hfbGVuCiAgICBwb3AKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDAKICAgIC8vIGJveEJvb2wgPSBCb3g8Ym9vbGVhbj4oeyBrZXk6ICdib29sJyB9KQogICAgYnl0ZWMgNCAvLyAiYm9vbCIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE1OQogICAgLy8gdGhpcy5ib3hCb29sLmNyZWF0ZSgpCiAgICBpbnRjXzAgLy8gOAogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDAKICAgIC8vIGJveEJvb2wgPSBCb3g8Ym9vbGVhbj4oeyBrZXk6ICdib29sJyB9KQogICAgYnl0ZWMgNCAvLyAiYm9vbCIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9ib3gtcHJveGllcy5hbGdvLnRzOjE2MAogICAgLy8gYXNzZXJ0KHRoaXMuYm94Qm9vbC5sZW5ndGggPT09IDgpCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGludGNfMCAvLyA4CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDEKICAgIC8vIGJveEFyYzRCb29sID0gQm94PGFyYzQuQm9vbD4oeyBrZXk6ICdhcmM0YicgfSkKICAgIGJ5dGVjIDUgLy8gImFyYzRiIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTYxCiAgICAvLyB0aGlzLmJveEFyYzRCb29sLmNyZWF0ZSgpCiAgICBpbnRjXzEgLy8gMQogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvYm94LXByb3hpZXMuYWxnby50czoxNDEKICAgIC8vIGJveEFyYzRCb29sID0gQm94PGFyYzQuQm9vbD4oeyBrZXk6ICdhcmM0YicgfSkKICAgIGJ5dGVjIDUgLy8gImFyYzRiIgogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTYyCiAgICAvLyBhc3NlcnQodGhpcy5ib3hBcmM0Qm9vbC5sZW5ndGggPT09IDEpCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgLy8gdGVzdHMvYXBwcm92YWxzL2JveC1wcm94aWVzLmFsZ28udHM6MTQ4CiAgICAvLyBjcmVhdGVCb3hlcygpIHsKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAECAEKKCYGAWEBYgFjAWQEYm9vbAVhcmM0YjEbQQAYgASTIBDBNhoAjgEAAQAxGRQxGBBEQgAKMRkUMRgUEEQjQygkuUgovUgkEkQpIrlIKb1IIhJEKiW5SCq9SCUSRCuBArlIK71IgQISRIABZYEDuUiAAWW9SIEDEkQnBCK5SCcEvUgiEkQnBSO5SCcFvUgjEkM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}