#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 10 20
    bytecblock "t1" "t2" "tm1a" "tm2a" 0x0005000c80000568656c6c6f0005776f726c64 "tm1b" "tm2b" 0x0005000a0000036162630003646566
    // tests/approvals/box-proxies.algo.ts:159
    // class TupleBox extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xfc19c46e 0x9f1f18e5 // method "testBox()void", method "testBoxMap()void"
    txna ApplicationArgs 0
    match main_testBox_route@3 main_testBoxMap_route@4

main_after_if_else@11:
    // tests/approvals/box-proxies.algo.ts:159
    // class TupleBox extends Contract {
    intc_0 // 0
    return

main_testBoxMap_route@4:
    // tests/approvals/box-proxies.algo.ts:191
    // testBoxMap() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub testBoxMap
    intc_1 // 1
    return

main_testBox_route@3:
    // tests/approvals/box-proxies.algo.ts:165
    // testBox() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub testBox
    intc_1 // 1
    return

main_bare_routing@7:
    // tests/approvals/box-proxies.algo.ts:159
    // class TupleBox extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/box-proxies.algo.ts::TupleBox.testBox() -> void:
testBox:
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:166
    // this.box1.create({ size: 10 })
    intc_2 // 10
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:167
    // this.box2.create({ size: 20 })
    intc_3 // 20
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:168
    // assert(this.box1.length === 10)
    box_len
    assert // Box must have value
    intc_2 // 10
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:169
    // assert(this.box2.length === 20)
    box_len
    assert // Box must have value
    intc_3 // 20
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:171
    // assert(this.box1.exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:172
    // assert(this.box2.exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:174
    // this.box1.value = ['hello', Bytes('world'), true]
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:174
    // this.box1.value = ['hello', Bytes('world'), true]
    bytec 4 // 0x0005000c80000568656c6c6f0005776f726c64
    box_put
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:179
    // this.box2.value = { a: 'hello', b: Bytes('world'), c: true }
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:179
    // this.box2.value = { a: 'hello', b: Bytes('world'), c: true }
    bytec 4 // 0x0005000c80000568656c6c6f0005776f726c64
    box_put
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:184
    // this.box1.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:160
    // box1 = Box<[string, bytes, boolean]>({ key: 't1' })
    bytec_0 // "t1"
    // tests/approvals/box-proxies.algo.ts:185
    // assert(!this.box1.exists)
    box_len
    bury 1
    !
    assert
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:187
    // this.box2.delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:161
    // box2 = Box<{ a: string; b: bytes; c: boolean }>({ key: 't2' })
    bytec_1 // "t2"
    // tests/approvals/box-proxies.algo.ts:188
    // assert(!this.box2.exists)
    box_len
    bury 1
    !
    assert
    retsub


// tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap() -> void:
testBoxMap:
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:192
    // assert(!this.boxMap1('a').exists)
    box_len
    bury 1
    !
    assert
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec_3 // "tm2a"
    // tests/approvals/box-proxies.algo.ts:193
    // assert(!this.boxMap2('a').exists)
    box_len
    bury 1
    !
    assert
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:195
    // this.boxMap1('a').value = ['hello', Bytes('world'), true]
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:195
    // this.boxMap1('a').value = ['hello', Bytes('world'), true]
    bytec 4 // 0x0005000c80000568656c6c6f0005776f726c64
    box_put
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec_3 // "tm2a"
    // tests/approvals/box-proxies.algo.ts:196
    // this.boxMap2('a').value = { a: 'hello', b: Bytes('world'), c: true }
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec_3 // "tm2a"
    // tests/approvals/box-proxies.algo.ts:196
    // this.boxMap2('a').value = { a: 'hello', b: Bytes('world'), c: true }
    bytec 4 // 0x0005000c80000568656c6c6f0005776f726c64
    box_put
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:197
    // assert(this.boxMap1('a').exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:199
    // assert(this.boxMap1('a').value[0] === 'hello')
    box_get
    assert // Box must have value
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    pushint 2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    dig 3
    pushint 32 // 32
    getbit
    uncover 2
    pushbytes "hello"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:200
    // assert(this.boxMap1('a').value[1].equals(Bytes('world')))
    cover 3
    substring3
    extract 2 0
    pushbytes "world"
    ==
    assert
    // tests/approvals/box-proxies.algo.ts:201
    // assert(this.boxMap1('a').value[2])
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec_3 // "tm2a"
    // tests/approvals/box-proxies.algo.ts:203
    // assert(this.boxMap2('a').exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec 5 // "tm1b"
    // tests/approvals/box-proxies.algo.ts:208
    // this.boxMap1('b').value = ['abc', Bytes('def'), false]
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec 5 // "tm1b"
    // tests/approvals/box-proxies.algo.ts:208
    // this.boxMap1('b').value = ['abc', Bytes('def'), false]
    bytec 7 // 0x0005000a0000036162630003646566
    box_put
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec 5 // "tm1b"
    // tests/approvals/box-proxies.algo.ts:209
    // assert(this.boxMap1('b').exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec 6 // "tm2b"
    // tests/approvals/box-proxies.algo.ts:211
    // this.boxMap2('b').value = { a: 'abc', b: Bytes('def'), c: false }
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec 6 // "tm2b"
    // tests/approvals/box-proxies.algo.ts:211
    // this.boxMap2('b').value = { a: 'abc', b: Bytes('def'), c: false }
    bytec 7 // 0x0005000a0000036162630003646566
    box_put
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec 6 // "tm2b"
    // tests/approvals/box-proxies.algo.ts:212
    // assert(this.boxMap2('b').exists)
    box_len
    bury 1
    assert
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:214
    // this.boxMap1('a').delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:162
    // boxMap1 = BoxMap<string, [string, bytes, boolean]>({ keyPrefix: 'tm1' })
    bytec_2 // "tm1a"
    // tests/approvals/box-proxies.algo.ts:215
    // assert(!this.boxMap1('a').exists)
    box_len
    bury 1
    !
    assert
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec_3 // "tm2a"
    // tests/approvals/box-proxies.algo.ts:217
    // this.boxMap2('a').delete()
    box_del
    pop
    // tests/approvals/box-proxies.algo.ts:163
    // boxMap2 = BoxMap<string, { a: string; b: bytes; c: boolean }>({ keyPrefix: 'tm2' })
    bytec_3 // "tm2a"
    // tests/approvals/box-proxies.algo.ts:218
    // assert(!this.boxMap2('a').exists)
    box_len
    bury 1
    !
    assert
    retsub
