#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 64 0 12800 1
    bytecblock "large" 0x068101
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    pushbytes 0xa78000de // method "test()void"
    txna ApplicationArgs 0
    match main_test_route@3
    err

main_test_route@3:
    // tests/approvals/box-proxies.algo.ts:271
    // test() {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b test

main___algots__.defaultCreate@5:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/box-proxies.algo.ts::LargeBox.test[routing]() -> void:
test:
    pushbytes ""

test_while_top@7:
    pushint 7010 // 7010
    global OpcodeBudget
    >
    bz test_after_while@12
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b test_while_top@7

test_after_while@12:
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:273
    // this.box.create()
    intc_2 // 12800
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:274
    // assert(this.box.length === 200 * 64, 'Box should be created with the correct size')
    box_len
    pop
    intc_2 // 12800
    ==
    assert // Box should be created with the correct size
    intc_1 // 0
    bury 1

test_for_header@2:
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    dup
    pushint 200 // 200
    <
    bz test_after_for@5
    dupn 2
    intc_0 // 64
    *
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    dig 1
    intc_0 // 64
    box_extract
    // tests/approvals/box-proxies.algo.ts:279
    // x.balance = index + 10
    dig 2
    pushint 10 // 10
    +
    dup
    itob
    uncover 2
    swap
    replace2 32
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:281
    // this.box.value[index] = clone(x)
    dig 3
    uncover 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:283
    // assert(this.box.value[index].balance === index + 10)
    uncover 2
    intc_0 // 64
    box_extract
    pushint 32 // 32
    extract_uint64
    ==
    assert
    intc_3 // 1
    +
    bury 1
    b test_for_header@2

test_after_for@5:
    // tests/approvals/box-proxies.algo.ts:271
    // test() {
    intc_3 // 1
    return
