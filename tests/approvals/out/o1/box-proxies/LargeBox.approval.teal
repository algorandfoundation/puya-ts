#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 64 12800
    bytecblock "large" 0x068101
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xa78000de // method "test()void"
    txna ApplicationArgs 0
    match main_test_route@3

main_after_if_else@10:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    intc_0 // 0
    return

main_test_route@3:
    // tests/approvals/box-proxies.algo.ts:271
    // test() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test
    intc_1 // 1
    return

main_bare_routing@6:
    // tests/approvals/box-proxies.algo.ts:268
    // export class LargeBox extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/box-proxies.algo.ts::LargeBox.test() -> void:
test:
    // tests/approvals/box-proxies.algo.ts:271
    // test() {
    proto 0 0
    pushbytes ""

test_while_top@6:
    pushint 7010 // 7010
    global OpcodeBudget
    >
    bz test_after_while@11
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    b test_while_top@6

test_after_while@11:
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:273
    // this.box.create()
    intc_3 // 12800
    box_create
    pop
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:274
    // assert(this.box.length === 200 * 64, 'Box should be created with the correct size')
    box_len
    pop
    intc_3 // 12800
    ==
    assert // Box should be created with the correct size
    intc_0 // 0
    frame_bury 0

test_for_header@1:
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    frame_dig 0
    pushint 200 // 200
    <
    bz test_after_for@4
    frame_dig 0
    dup
    intc_2 // 64
    *
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:276
    // for (const [index, v] of this.box.value.entries()) {
    dig 1
    intc_2 // 64
    box_extract
    // tests/approvals/box-proxies.algo.ts:279
    // x.balance = index + 10
    dig 2
    pushint 10 // 10
    +
    dup
    itob
    uncover 2
    swap
    replace2 32
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:281
    // this.box.value[index] = clone(x)
    dig 3
    uncover 2
    box_replace
    // tests/approvals/box-proxies.algo.ts:269
    // box = Box<FixedArray<Info, 200>>({ key: 'large' })
    bytec_0 // "large"
    // tests/approvals/box-proxies.algo.ts:283
    // assert(this.box.value[index].balance === index + 10)
    uncover 2
    intc_2 // 64
    box_extract
    pushint 32 // 32
    extract_uint64
    ==
    assert
    intc_1 // 1
    +
    frame_bury 0
    b test_for_header@1

test_after_for@4:
    retsub
