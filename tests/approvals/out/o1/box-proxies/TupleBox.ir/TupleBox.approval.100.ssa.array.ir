main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L174
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "testBox()void" => block@4, method "testBoxMap()void" => block@5, * => block@8}
    block@4: // testBox_route_L180
        tests/approvals/box-proxies.algo.ts::TupleBox.testBox[routing]()
        goto block@8
    block@5: // testBoxMap_route_L206
        tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap[routing]()
        goto block@8
    block@8: // after_if_else_L174
        fail
    block@9: // __algots__.defaultCreate_L174
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBox[routing]() -> void:
    block@0: // L180
        (box_create "t1" 10u)
        (box_create "t2" 20u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "t1")
        let tmp%0#0: bool = (== value%0#0 10u)
        (assert tmp%0#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "t2")
        let tmp%1#0: bool = (== value%1#0 20u)
        (assert tmp%1#0)
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 5u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len "world")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "world")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+utf8[]),(len+uint8[]),bool1)%0#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%concat%1#0
        let tmp%2#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%as_Encoded((len+utf8[]),(len+uint8[]),bool1)%0#0
        (box_del "t1")
        (box_put "t1" tmp%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "t1")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 storage_value%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 storage_value%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 storage_value%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%3#0: bool = (== values%0#0 "hello")
        (assert tmp%3#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "t1")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 storage_value%1#0 2u)
        let aggregate%len%0#0: uint64 = (len storage_value%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 storage_value%1#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%1#0
        let values%1#0: bytes = ((extract 2 0) tuple_item%1#0)
        let tmp%4#0: bool = (== values%1#0 "world")
        (assert tmp%4#0)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "t1" 4u 1u)
        let aggregate%lt%0#0: bool = (< 0u 8u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#0
        let values%2#0: bool = tuple_item%2#0
        (assert values%2#0)
        (box_del "t2")
        (box_put "t2" tmp%2#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "t2")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%4#0
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 storage_value%3#0 0u)
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 storage_value%3#0 2u)
        let aggregate%substring3%2#0: bytes = (substring3 storage_value%3#0 aggregate%extract_uint16%3#0 aggregate%extract_uint16%4#0)
        let tuple_item%3#0: Encoded(len+utf8[]) = aggregate%substring3%2#0
        let values%3#0: string = ((extract 2 0) tuple_item%3#0)
        let tmp%6#0: bool = (== values%3#0 "hello")
        (assert tmp%6#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "t2")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%4#0: bytes = aggregate%box_get%6#0
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 storage_value%4#0 2u)
        let aggregate%len%1#0: uint64 = (len storage_value%4#0)
        let aggregate%substring3%3#0: bytes = (substring3 storage_value%4#0 aggregate%extract_uint16%5#0 aggregate%len%1#0)
        let tuple_item%4#0: Encoded(len+uint8[]) = aggregate%substring3%3#0
        let values%4#0: bytes = ((extract 2 0) tuple_item%4#0)
        let tmp%7#0: bool = (== values%4#0 "world")
        (assert tmp%7#0)
        let box%box_extract%1#0: Encoded(bool1[8]) = (box_extract "t2" 4u 1u)
        let aggregate%lt%1#0: bool = (< 0u 8u)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%get_bit%1#0: bool = (getbit box%box_extract%1#0 0u)
        let tuple_item%5#0: bool = aggregate%get_bit%1#0
        let values%5#0: bool = tuple_item%5#0
        (assert values%5#0)
        (box_del "t1")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "t1")
        let tmp%8#0: bool = (! maybe_exists%2#0)
        (assert tmp%8#0)
        (box_del "t2")
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "t2")
        let tmp%9#0: bool = (! maybe_exists%3#0)
        (assert tmp%9#0)
        exit 1u

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap[routing]() -> void:
    block@0: // L206
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "tm1a")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0)
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "tm2a")
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0)
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 5u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len "world")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "world")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+utf8[]),(len+uint8[]),bool1)%0#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%concat%1#0
        let tmp%2#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%as_Encoded((len+utf8[]),(len+uint8[]),bool1)%0#0
        (box_del "tm1a")
        (box_put "tm1a" tmp%2#0)
        (box_del "tm2a")
        (box_put "tm2a" tmp%2#0)
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "tm1a")
        (assert maybe_exists%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tm1a")
        (assert aggregate%box_get%1#0) // Box must have value
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 storage_value%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 storage_value%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 storage_value%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let tuple_item%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let values%0#0: string = ((extract 2 0) tuple_item%0#0)
        let tmp%4#0: bool = (== values%0#0 "hello")
        (assert tmp%4#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tm1a")
        (assert aggregate%box_get%3#0) // Box must have value
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 storage_value%1#0 2u)
        let aggregate%len%0#0: uint64 = (len storage_value%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 storage_value%1#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%1#0
        let values%1#0: bytes = ((extract 2 0) tuple_item%1#0)
        let tmp%5#0: bool = (== values%1#0 "world")
        (assert tmp%5#0)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tm1a" 4u 1u)
        let aggregate%lt%0#0: bool = (< 0u 8u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        let tuple_item%2#0: bool = aggregate%get_bit%0#0
        let values%2#0: bool = tuple_item%2#0
        (assert values%2#0)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "tm2a")
        (assert maybe_exists%3#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tm2a")
        (assert aggregate%box_get%5#0) // Box must have value
        let storage_value%3#0: bytes = aggregate%box_get%4#0
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 storage_value%3#0 0u)
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 storage_value%3#0 2u)
        let aggregate%substring3%2#0: bytes = (substring3 storage_value%3#0 aggregate%extract_uint16%3#0 aggregate%extract_uint16%4#0)
        let tuple_item%3#0: Encoded(len+utf8[]) = aggregate%substring3%2#0
        let values%3#0: string = ((extract 2 0) tuple_item%3#0)
        let tmp%6#0: bool = (== values%3#0 "hello")
        (assert tmp%6#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "tm2a")
        (assert aggregate%box_get%7#0) // Box must have value
        let storage_value%4#0: bytes = aggregate%box_get%6#0
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 storage_value%4#0 2u)
        let aggregate%len%1#0: uint64 = (len storage_value%4#0)
        let aggregate%substring3%3#0: bytes = (substring3 storage_value%4#0 aggregate%extract_uint16%5#0 aggregate%len%1#0)
        let tuple_item%4#0: Encoded(len+uint8[]) = aggregate%substring3%3#0
        let values%4#0: bytes = ((extract 2 0) tuple_item%4#0)
        let tmp%7#0: bool = (== values%4#0 "world")
        (assert tmp%7#0)
        let box%box_extract%1#0: Encoded(bool1[8]) = (box_extract "tm2a" 4u 1u)
        let aggregate%lt%1#0: bool = (< 0u 8u)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%get_bit%1#0: bool = (getbit box%box_extract%1#0 0u)
        let tuple_item%5#0: bool = aggregate%get_bit%1#0
        let values%5#0: bool = tuple_item%5#0
        (assert values%5#0)
        let aggregate%length%2#0: uint64 = (len "abc")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "abc")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 5u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%3#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 5u aggregate%data_length%2#0)
        let aggregate%length%3#0: uint64 = (len "def")
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "def")
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%encoded_bool%1#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+uint8[]),bool1)%1#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%concat%3#0
        let tmp%8#0: Encoded((len+utf8[]),(len+uint8[]),bool1) = aggregate%as_Encoded((len+utf8[]),(len+uint8[]),bool1)%1#0
        (box_del "tm1b")
        (box_put "tm1b" tmp%8#0)
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len "tm1b")
        (assert maybe_exists%4#0)
        (box_del "tm2b")
        (box_put "tm2b" tmp%8#0)
        let (_%5#0: uint64, maybe_exists%5#0: bool) = (box_len "tm2b")
        (assert maybe_exists%5#0)
        (box_del "tm1a")
        let (_%6#0: uint64, maybe_exists%6#0: bool) = (box_len "tm1a")
        let tmp%10#0: bool = (! maybe_exists%6#0)
        (assert tmp%10#0)
        (box_del "tm2a")
        let (_%7#0: uint64, maybe_exists%7#0: bool) = (box_len "tm2a")
        let tmp%11#0: bool = (! maybe_exists%7#0)
        (assert tmp%11#0)
        exit 1u