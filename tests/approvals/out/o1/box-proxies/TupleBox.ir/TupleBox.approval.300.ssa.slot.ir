main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L173
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "testBox()void" => block@3, method "testBoxMap()void" => block@4, * => block@11}
    block@3: // testBox_route_L179
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::TupleBox.testBox()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // testBoxMap_route_L205
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap()
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L173
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L173
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L173
        let tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#0 <- block@3, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#1 <- block@4, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#2 <- block@8, tests/approvals/box-proxies.algo.ts::TupleBox.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBox() -> void:
    block@0: // L179
        (box_create "t1" 10u)
        (box_create "t2" 20u)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "t1")
        let tmp%0#0: bool = (== value%0#0 10u)
        (assert tmp%0#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "t2")
        let tmp%1#0: bool = (== value%1#0 20u)
        (assert tmp%1#0)
        (box_del "t1")
        (box_put "t1" 0x0005000c80000568656c6c6f0005776f726c64)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "t1" 4u 1u)
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%0#0)
        (box_del "t2")
        (box_put "t2" 0x0005000c80000568656c6c6f0005776f726c64)
        let box%box_extract%1#0: Encoded(bool1[8]) = (box_extract "t2" 4u 1u)
        let aggregate%get_bit%1#0: bool = (getbit box%box_extract%1#0 0u)
        (assert aggregate%get_bit%1#0)
        (box_del "t1")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "t1")
        let tmp%8#0: bool = (! maybe_exists%2#0)
        (assert tmp%8#0)
        (box_del "t2")
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "t2")
        let tmp%9#0: bool = (! maybe_exists%3#0)
        (assert tmp%9#0)
        return 

subroutine tests/approvals/box-proxies.algo.ts::TupleBox.testBoxMap() -> void:
    block@0: // L205
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "tm1a")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0)
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "tm2a")
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0)
        (box_del "tm1a")
        (box_put "tm1a" 0x0005000c80000568656c6c6f0005776f726c64)
        (box_del "tm2a")
        (box_put "tm2a" 0x0005000c80000568656c6c6f0005776f726c64)
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len "tm1a")
        (assert maybe_exists%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tm1a")
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 aggregate%box_get%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 aggregate%box_get%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%box_get%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let values%0#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let tmp%4#0: bool = (== values%0#0 "hello")
        (assert tmp%4#0)
        let aggregate%len%0#0: uint64 = (len aggregate%box_get%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%box_get%0#0 aggregate%extract_uint16%1#0 aggregate%len%0#0)
        let values%1#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%5#0: bool = (== values%1#0 "world")
        (assert tmp%5#0)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tm1a" 4u 1u)
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%0#0)
        let box%box_extract%1#0: Encoded(bool1[8]) = (box_extract "tm2a" 4u 1u)
        let aggregate%get_bit%1#0: bool = (getbit box%box_extract%1#0 0u)
        (assert aggregate%get_bit%1#0)
        (box_del "tm1b")
        (box_put "tm1b" 0x0005000a0000036162630003646566)
        (box_del "tm2b")
        (box_put "tm2b" 0x0005000a0000036162630003646566)
        (box_del "tm1a")
        let (_%6#0: uint64, maybe_exists%6#0: bool) = (box_len "tm1a")
        let tmp%10#0: bool = (! maybe_exists%6#0)
        (assert tmp%10#0)
        (box_del "tm2a")
        let (_%7#0: uint64, maybe_exists%7#0: bool) = (box_len "tm2a")
        let tmp%11#0: bool = (! maybe_exists%7#0)
        (assert tmp%11#0)
        return 