{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/box-proxies.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EY;;AAAR;;;AAL0B;AAjE5B;;AAiE4B;AAMH;;AAvEzB;AAFoC;AAGpC;;AAHoC;AAyEX;;AAtEzB;AAgE4B;AA9DjB;AAAA;AALyB;AAKV;AAAA;AAAnB;AAAP;AA8D4B;AA5DjB;AAAA;;AAAJ;;;AAP6B;AAOV;AAAA;;AAAnB;;;;AAAP;AA4D4B;AA1DjB;AAAA;AAAX;AA0D4B;AAxDxB;;AAXgC;AAY/B;;AAuDuB;AAtDhB;AAAA;;AAAL;;;AAb6B;AAaR;AAAA;;AAAN;;;;AAAtB;AAboC;AAgB7B;AADY;;;AACZ;;AAAA;AAmDqB;AAnDiB;AAD1B;;;AAC0B;;AAAA;AAAtC;AAAP;AAmD4B;AAjDhB;AAAA;;AACL;AAAP;AAgD4B;AA/C5B;;AA+C4B;AAMH;;AArDzB;AA+C4B;AA9CnB;AAAA;;AACT;AAqD6C;;;;AAAL;AA/CpC;AAAJ;;AAAI;AAAJ;;AAAA;AA+C+B;;AA9C/B;;AA8C+B;;AA9C/B;AAAA;AAEW;AAAJ;AAAA;AAAP;AAEW;AAAJ;AAAA;;AAAP;AAEW;AAAA;AAAA;AAwCoB;;AAxCA;AAAA;AAAxB;AAAP;AAEI;AAAJ;;AAEW;;;;;;;;;;;AAAJ;AAAoC;;;AAApC;;AAAA;AAA2D;;;;;;;;AAAX;AAAuC;;;AAAvC;;AAAA;AAAhD;AAAP;AAG2B;;AAGf;AAAA;;AAAR;;;AAHuB;;AAIH;;;AAAtB;;AAuB0B;AAnBpB;AAAA;;AAAR;;;AAmB4B;AAlBf;AAAX;AAkB0B;AAdV;;AAClB;AAa4B;AAXX;AAAA;;AACjB;AAU4B;AARjB;AAAA;AAAU;;AAAd;AAAP;AAQ4B;AAPjB;AAAG;AAAG;;;AAAjB;AAO4B;AANjB;AAAA;AAAU;;;;;;AAAd;AAAP;AAgBS;AAAP;AAV0B;AAhBP;AAAnB;;;;;AAXyB;;AAKT;AAAA;AA8Be;AA9BtB;AAAJ;;;AALoB;;AAmCM;AA7B/B;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests/approvals/box-proxies.algo.ts::BoxContract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 4 99 0"
    },
    "7": {
      "op": "bytecblock \"one\" \"three\" \"A\" \"twowhat?\" \"abc\" \"aaaaaargh\" \"what?\" 0xffffffff"
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "57": {
      "op": "bz main_after_if_else@2",
      "stack_out": []
    },
    "60": {
      "op": "bytec_0 // \"one\""
    },
    "61": {
      "op": "box_del"
    },
    "62": {
      "op": "pop"
    },
    "63": {
      "op": "bytec_0 // \"one\""
    },
    "64": {
      "op": "bytec 5 // \"aaaaaargh\""
    },
    "66": {
      "op": "box_put"
    },
    "67": {
      "op": "bytec_2 // \"A\""
    },
    "68": {
      "op": "box_del"
    },
    "69": {
      "op": "pop"
    },
    "70": {
      "op": "bytec_2 // \"A\""
    },
    "71": {
      "op": "bytec 5 // \"aaaaaargh\""
    },
    "73": {
      "op": "box_put"
    },
    "74": {
      "op": "bytec_0 // \"one\""
    },
    "75": {
      "op": "box_get"
    },
    "76": {
      "error": "Box must have value",
      "op": "assert // Box must have value"
    },
    "77": {
      "op": "bytec_2 // \"A\""
    },
    "78": {
      "op": "box_get"
    },
    "79": {
      "error": "Box must have value",
      "op": "assert // Box must have value"
    },
    "80": {
      "op": "=="
    },
    "81": {
      "op": "assert"
    },
    "82": {
      "op": "bytec_0 // \"one\""
    },
    "83": {
      "op": "box_len"
    },
    "84": {
      "op": "bury 1"
    },
    "86": {
      "op": "bz main_bool_false@6"
    },
    "89": {
      "op": "bytec_2 // \"A\""
    },
    "90": {
      "op": "box_len"
    },
    "91": {
      "op": "bury 1"
    },
    "93": {
      "op": "bz main_bool_false@6"
    },
    "96": {
      "op": "intc_0 // 1"
    },
    "97": {
      "block": "main_bool_merge@7",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "98": {
      "op": "bytec_0 // \"one\"",
      "defined_out": [
        "\"one\""
      ],
      "stack_out": [
        "\"one\""
      ]
    },
    "99": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "100": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "101": {
      "op": "assert",
      "stack_out": []
    },
    "102": {
      "op": "bytec_0 // \"one\"",
      "stack_out": [
        "\"one\""
      ]
    },
    "103": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "104": {
      "op": "pop",
      "stack_out": []
    },
    "105": {
      "op": "bytec_2 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "106": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "107": {
      "op": "pop",
      "stack_out": []
    },
    "108": {
      "op": "bytec_0 // \"one\"",
      "stack_out": [
        "\"one\""
      ]
    },
    "109": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "110": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%4#0"
      ]
    },
    "112": {
      "op": "bnz main_bool_false@10",
      "stack_out": []
    },
    "115": {
      "op": "bytec_2 // \"A\""
    },
    "116": {
      "op": "box_len"
    },
    "117": {
      "op": "bury 1"
    },
    "119": {
      "op": "bnz main_bool_false@10"
    },
    "122": {
      "op": "intc_0 // 1"
    },
    "123": {
      "block": "main_bool_merge@11",
      "stack_in": [
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "124": {
      "op": "bytec_2 // \"A\"",
      "defined_out": [
        "\"A\""
      ],
      "stack_out": [
        "\"A\""
      ]
    },
    "125": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "126": {
      "op": "pushbytes \"O\"",
      "defined_out": [
        "\"O\"",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0",
        "\"O\""
      ]
    },
    "129": {
      "op": "cover 2",
      "stack_out": [
        "\"O\"",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "131": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "132": {
      "op": "bytec_0 // \"one\"",
      "defined_out": [
        "\"one\"",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "\"one\""
      ]
    },
    "133": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "134": {
      "op": "pushbytes \"O\"",
      "stack_out": [
        "state_get%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0",
        "\"O\""
      ]
    },
    "137": {
      "op": "cover 2",
      "stack_out": [
        "state_get%0#0",
        "\"O\"",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "139": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%1#0"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "141": {
      "op": "assert",
      "stack_out": []
    },
    "142": {
      "op": "bytec_0 // \"one\"",
      "stack_out": [
        "\"one\""
      ]
    },
    "143": {
      "op": "box_get",
      "defined_out": [
        "_#0",
        "e#0"
      ],
      "stack_out": [
        "_#0",
        "e#0"
      ]
    },
    "144": {
      "op": "bury 1",
      "stack_out": [
        "e#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "147": {
      "op": "assert",
      "stack_out": []
    },
    "148": {
      "op": "bytec_0 // \"one\"",
      "stack_out": [
        "\"one\""
      ]
    },
    "149": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "150": {
      "op": "pop",
      "stack_out": []
    },
    "151": {
      "op": "bytec_0 // \"one\"",
      "stack_out": [
        "\"one\""
      ]
    },
    "152": {
      "op": "bytec 5 // \"aaaaaargh\"",
      "defined_out": [
        "\"aaaaaargh\"",
        "\"one\""
      ],
      "stack_out": [
        "\"one\"",
        "\"aaaaaargh\""
      ]
    },
    "154": {
      "op": "box_put",
      "stack_out": []
    },
    "155": {
      "op": "bytec_0 // \"one\"",
      "stack_out": [
        "\"one\""
      ]
    },
    "156": {
      "op": "box_get",
      "defined_out": [
        "_\u2081#0",
        "e#0"
      ],
      "stack_out": [
        "_\u2081#0",
        "e#0"
      ]
    },
    "157": {
      "op": "bury 1",
      "stack_out": [
        "e#0"
      ]
    },
    "159": {
      "op": "assert",
      "stack_out": []
    },
    "160": {
      "op": "pushint 256456 // 256456",
      "defined_out": [
        "256456"
      ],
      "stack_out": [
        "256456"
      ]
    },
    "164": {
      "op": "itob",
      "defined_out": [
        "value#1"
      ],
      "stack_out": [
        "value#1"
      ]
    },
    "165": {
      "op": "bytec_3 // \"twowhat?\"",
      "defined_out": [
        "\"twowhat?\"",
        "value#1"
      ],
      "stack_out": [
        "value#1",
        "\"twowhat?\""
      ]
    },
    "166": {
      "op": "box_del",
      "stack_out": [
        "value#1",
        "{box_del}"
      ]
    },
    "167": {
      "op": "pop",
      "stack_out": [
        "value#1"
      ]
    },
    "168": {
      "op": "bytec_3 // \"twowhat?\"",
      "stack_out": [
        "value#1",
        "\"twowhat?\""
      ]
    },
    "169": {
      "op": "dig 1",
      "defined_out": [
        "\"twowhat?\"",
        "value#1",
        "value#1 (copy)"
      ],
      "stack_out": [
        "value#1",
        "\"twowhat?\"",
        "value#1 (copy)"
      ]
    },
    "171": {
      "op": "box_put",
      "stack_out": [
        "value#1"
      ]
    },
    "172": {
      "op": "bytec 6 // \"what?\"",
      "defined_out": [
        "\"what?\"",
        "value#1"
      ],
      "stack_out": [
        "value#1",
        "\"what?\""
      ]
    },
    "174": {
      "op": "box_del",
      "stack_out": [
        "value#1",
        "{box_del}"
      ]
    },
    "175": {
      "op": "pop",
      "stack_out": [
        "value#1"
      ]
    },
    "176": {
      "op": "bytec 6 // \"what?\"",
      "stack_out": [
        "value#1",
        "\"what?\""
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "\"what?\"",
        "value#1"
      ]
    },
    "179": {
      "op": "box_put",
      "stack_out": []
    },
    "180": {
      "op": "bytec_3 // \"twowhat?\"",
      "stack_out": [
        "\"twowhat?\""
      ]
    },
    "181": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "182": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "183": {
      "op": "assert",
      "stack_out": []
    },
    "184": {
      "op": "bytec_3 // \"twowhat?\"",
      "stack_out": [
        "\"twowhat?\""
      ]
    },
    "185": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "186": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "188": {
      "op": "assert",
      "stack_out": []
    },
    "189": {
      "op": "bytec_3 // \"twowhat?\"",
      "stack_out": [
        "\"twowhat?\""
      ]
    },
    "190": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "191": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "192": {
      "op": "bytec 6 // \"what?\"",
      "stack_out": [
        "maybe_value%1#0",
        "\"what?\""
      ]
    },
    "194": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "195": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#1"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "197": {
      "op": "assert",
      "stack_out": []
    },
    "198": {
      "op": "bytec_3 // \"twowhat?\"",
      "stack_out": [
        "\"twowhat?\""
      ]
    },
    "199": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "200": {
      "op": "pop",
      "stack_out": []
    },
    "201": {
      "op": "pushbytes \"twowhat?x\"",
      "defined_out": [
        "\"twowhat?x\""
      ],
      "stack_out": [
        "\"twowhat?x\""
      ]
    },
    "212": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#1"
      ],
      "stack_out": [
        "maybe_value%3#1",
        "maybe_exists%3#0"
      ]
    },
    "213": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%3#0",
        "maybe_value%3#1"
      ],
      "stack_out": [
        "maybe_value%3#1",
        "maybe_exists%3#0",
        "\"b\""
      ]
    },
    "216": {
      "op": "cover 2",
      "stack_out": [
        "\"b\"",
        "maybe_value%3#1",
        "maybe_exists%3#0"
      ]
    },
    "218": {
      "op": "select",
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "219": {
      "op": "pushbytes \"what?x\"",
      "defined_out": [
        "\"what?x\"",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "\"what?x\""
      ]
    },
    "227": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#1",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "maybe_value%4#1",
        "maybe_exists%4#0"
      ]
    },
    "228": {
      "op": "pushbytes \"b\"",
      "stack_out": [
        "state_get%0#0",
        "maybe_value%4#1",
        "maybe_exists%4#0",
        "\"b\""
      ]
    },
    "231": {
      "op": "cover 2",
      "stack_out": [
        "state_get%0#0",
        "\"b\"",
        "maybe_value%4#1",
        "maybe_exists%4#0"
      ]
    },
    "233": {
      "op": "select",
      "stack_out": [
        "state_get%0#0",
        "state_get%1#0"
      ]
    },
    "234": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "235": {
      "op": "assert",
      "stack_out": []
    },
    "236": {
      "op": "bytec 4 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "238": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "239": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "241": {
      "op": "bnz main_else_body@17",
      "stack_out": []
    },
    "244": {
      "op": "bytec 4 // \"abc\""
    },
    "246": {
      "op": "pushint 1000 // 1000"
    },
    "249": {
      "op": "box_create"
    },
    "250": {
      "op": "pop"
    },
    "251": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "bytec_1 // \"three\"",
      "defined_out": [
        "\"three\""
      ],
      "stack_out": [
        "\"three\""
      ]
    },
    "252": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#2"
      ],
      "stack_out": [
        "maybe_value%1#2",
        "maybe_exists%1#0"
      ]
    },
    "253": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "255": {
      "op": "bz main_else_body@22",
      "stack_out": []
    },
    "258": {
      "op": "bytec_1 // \"three\""
    },
    "259": {
      "op": "intc_1 // 4"
    },
    "260": {
      "op": "box_resize"
    },
    "261": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "bytec_1 // \"three\"",
      "defined_out": [
        "\"three\""
      ],
      "stack_out": [
        "\"three\""
      ]
    },
    "262": {
      "op": "bytec 7 // 0xffffffff",
      "defined_out": [
        "\"three\"",
        "0xffffffff"
      ],
      "stack_out": [
        "\"three\"",
        "0xffffffff"
      ]
    },
    "264": {
      "op": "box_put",
      "stack_out": []
    },
    "265": {
      "op": "bytec_1 // \"three\"",
      "stack_out": [
        "\"three\""
      ]
    },
    "266": {
      "op": "box_get",
      "defined_out": [
        "maybeBox.0#0",
        "maybeBox.1#0"
      ],
      "stack_out": [
        "maybeBox.0#0",
        "maybeBox.1#0"
      ]
    },
    "267": {
      "op": "bury 1",
      "stack_out": [
        "maybeBox.1#0"
      ]
    },
    "269": {
      "op": "assert",
      "stack_out": []
    },
    "270": {
      "op": "bytec_1 // \"three\"",
      "stack_out": [
        "\"three\""
      ]
    },
    "271": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#1"
      ],
      "stack_out": [
        "maybe_value%3#1",
        "maybe_exists%3#0"
      ]
    },
    "272": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%3#1"
      ]
    },
    "273": {
      "op": "bytec 7 // 0xffffffff",
      "stack_out": [
        "maybe_value%3#1",
        "0xffffffff"
      ]
    },
    "275": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "276": {
      "op": "assert",
      "stack_out": []
    },
    "277": {
      "op": "bytec_1 // \"three\"",
      "stack_out": [
        "\"three\""
      ]
    },
    "278": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"three\"",
        "1"
      ],
      "stack_out": [
        "\"three\"",
        "1"
      ]
    },
    "279": {
      "op": "dup",
      "stack_out": [
        "\"three\"",
        "1",
        "1"
      ]
    },
    "280": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "\"three\"",
        "0x00",
        "1"
      ],
      "stack_out": [
        "\"three\"",
        "1",
        "1",
        "0x00"
      ]
    },
    "283": {
      "op": "box_splice",
      "stack_out": []
    },
    "284": {
      "op": "bytec_1 // \"three\"",
      "stack_out": [
        "\"three\""
      ]
    },
    "285": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#1"
      ],
      "stack_out": [
        "maybe_value%4#1",
        "maybe_exists%4#0"
      ]
    },
    "286": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%4#1"
      ]
    },
    "287": {
      "op": "pushbytes 0xff00ffff",
      "defined_out": [
        "0xff00ffff",
        "maybe_value%4#1"
      ],
      "stack_out": [
        "maybe_value%4#1",
        "0xff00ffff"
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "294": {
      "op": "assert",
      "stack_out": []
    },
    "295": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "block": "main_else_body@22",
      "stack_in": [],
      "op": "bytec_1 // \"three\"",
      "defined_out": [
        "\"three\""
      ],
      "stack_out": [
        "\"three\""
      ]
    },
    "298": {
      "op": "intc_1 // 4",
      "defined_out": [
        "\"three\"",
        "4"
      ],
      "stack_out": [
        "\"three\"",
        "4"
      ]
    },
    "299": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "300": {
      "op": "pop",
      "stack_out": []
    },
    "301": {
      "op": "b main_after_if_else@23"
    },
    "304": {
      "block": "main_else_body@17",
      "stack_in": [],
      "op": "bytec 4 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "306": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "307": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "308": {
      "op": "intc_2 // 99",
      "defined_out": [
        "99",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "99"
      ]
    },
    "309": {
      "op": "!=",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "310": {
      "op": "bz main_after_if_else@20",
      "stack_out": []
    },
    "313": {
      "op": "bytec 4 // \"abc\""
    },
    "315": {
      "op": "intc_2 // 99"
    },
    "316": {
      "op": "box_resize"
    },
    "317": {
      "op": "b main_after_if_else@20"
    },
    "320": {
      "block": "main_bool_false@10",
      "stack_in": [],
      "op": "intc_3 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "321": {
      "op": "b main_bool_merge@11"
    },
    "324": {
      "block": "main_bool_false@6",
      "stack_in": [],
      "op": "intc_3 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "325": {
      "op": "b main_bool_merge@7"
    }
  }
}