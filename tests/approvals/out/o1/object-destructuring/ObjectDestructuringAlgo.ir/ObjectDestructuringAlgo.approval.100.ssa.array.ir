main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L96
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()void" => block@3, * => block@4}
    block@3: // test_route_L97
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test[routing]()
        goto block@4
    block@4: // switch_case_next_L96
        fail
    block@5: // __algots__.defaultCreate_L96
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/object-destructuring.algo.ts::produceItems() -> Encoded(uint64,(len+uint8[]),bool1,uint512):
    block@0: // L51
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 75u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 75u aggregate%data_length%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let aggregate%value_len%0#0: uint64 = (len 999b)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| 999b aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),bool1,uint512)%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = aggregate%concat%0#0
        let tmp%0#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = aggregate%as_Encoded(uint64,(len+uint8[]),bool1,uint512)%0#0
        return tmp%0#0

subroutine tests/approvals/object-destructuring.algo.ts::produceVector() -> Encoded((uint64,uint64),(uint64,uint64)):
    block@0: // L60
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%head%4#0: bytes = (concat 0x tmp%0#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%1#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%5#0
        let tmp%2#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0
        return tmp%2#0

subroutine tests/approvals/object-destructuring.algo.ts::ObjectDestructuringAlgo.test[routing]() -> void:
    block@0: // L97
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%7#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 20u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 30u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%8#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%head%4#0: bytes = (concat 0x tmp%7#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%8#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%head%5#0
        let arg#0: Encoded((uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64))%0#0
        let aggregate%extract%0#0: bytes = (extract3 arg#0 0u 16u)
        let aggregate%extract%1#0: bytes = (extract3 aggregate%extract%0#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let x#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 arg#0 0u 16u)
        let aggregate%extract%3#0: bytes = (extract3 aggregate%extract%2#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let y#0: uint64 = (btoi tuple_item%3#0)
        let tmp%11#0: bool = (== x#0 10u)
        let tmp%12#0: bool = (&& 1u tmp%11#0)
        let tmp%13#0: bool = (== y#0 20u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // assert target is match for conditions
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 434u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%head%6#0
        let y#1: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#0
        let aggregate%extract%4#0: bytes = (extract3 y#1 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%4#0
        let values%0#1: uint64 = (btoi tuple_item%0#0)
        let tmp%2#1: bool = (== values%0#1 434u)
        let tmp%3#1: bool = (&& 1u tmp%2#1)
        let tmp%5#1: bool = (&& tmp%3#1 tmp%2#1)
        (assert tmp%5#1) // assert target is match for conditions
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%8#0
        let awst_tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#0
        let aggregate%extract%5#0: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%0#1: Encoded(uint64) = aggregate%extract%5#0
        let f#0: uint64 = (btoi tuple_item%0#1)
        let aggregate%extract%6#0: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%1#1: Encoded(uint64) = aggregate%extract%6#0
        let e#0: uint64 = (btoi tuple_item%1#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob e#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%9#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob f#0)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%11#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64)%11#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%12#0
        let res3#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 res3#0 0u) // on error: invalid array length header
        let tmp%16#0: uint64 = aggregate%array_length%0#0
        let tmp%17#0: bool = (== tmp%16#0 4u)
        let aggregate%total_length%0#0: uint64 = (len res3#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 res3#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%18#0: bool = (== values%0#0 4u)
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        let aggregate%total_length%1#0: uint64 = (len res3#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 res3#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%20#0: bool = (== values%1#0 1u)
        let tmp%21#0: bool = (&& tmp%19#0 tmp%20#0)
        let aggregate%total_length%2#0: uint64 = (len res3#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 res3#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%22#0: bool = (== values%2#0 4u)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        let aggregate%total_length%3#0: uint64 = (len res3#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 res3#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%24#0: bool = (== values%3#0 1u)
        let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
        (assert tmp%25#0) // assert target is match for conditions
        let awst_tmp%0#1: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let awst_tmp%1#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let f#1: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let awst_tmp%3#0: Encoded(uint64,(len+uint8[]),bool1,uint512) = tests/approvals/object-destructuring.algo.ts::produceItems()
        let awst_tmp%0#2: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let awst_tmp%1#1: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let f#2: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        let awst_tmp%3#1: Encoded((uint64,uint64),(uint64,uint64)) = tests/approvals/object-destructuring.algo.ts::produceVector()
        exit 1u