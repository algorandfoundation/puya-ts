main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L15
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test()uint64" => block@4, method "test2()uint64" => block@5, method "test3()uint64" => block@6, method "test4()uint64" => block@7, method "test5()uint512" => block@8, method "test6()uint512" => block@9, * => block@12}
    block@4: // test_route_L16
        (log 0x151f7c75000000000000007b)
        exit 1u
    block@5: // test2_route_L20
        (log 0x151f7c750000000000000004)
        exit 1u
    block@6: // test3_route_L25
        (log 0x151f7c75000000000000000c)
        exit 1u
    block@7: // test4_route_L32
        (log 0x151f7c758000000000000000)
        exit 1u
    block@8: // test5_route_L37
        (log 0x151f7c7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000)
        exit 1u
    block@9: // test6_route_L41
        (log 0x151f7c7500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000)
        exit 1u
    block@12: // after_if_else_L15
        fail
    block@13: // __algots__.defaultCreate_L15
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u