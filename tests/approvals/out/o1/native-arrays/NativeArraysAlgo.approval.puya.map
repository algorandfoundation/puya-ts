{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/native-arrays.algo.ts"
  ],
  "mappings": ";;;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAgDE;;AAAA;AAAA;AAAA;;AAAA;AAhDF;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDE;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAgDE;;;;AAAQ;;AAAA;AAAA;;AAAA;AAAA;AAGO;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEb;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AACA;;AAAA;;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8"
    },
    "6": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "8": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "11": {
      "op": "pushbytess 0x0f4c11ca 0x13a588c8 0x787b50b2 0xeb87a064 // method \"buildArray()uint64[]\", method \"doThings()void\", method \"arc4Interop()void\", method \"structs((uint64,uint64))(uint64,uint64)[]\""
    },
    "33": {
      "op": "txna ApplicationArgs 0"
    },
    "36": {
      "op": "match main_buildArray_route@3 main_doThings_route@4 main_arc4Interop_route@5 main_structs_route@6"
    },
    "46": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "47": {
      "op": "return"
    },
    "48": {
      "block": "main_structs_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "50": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "51": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "54": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "55": {
      "op": "txna ApplicationArgs 1"
    },
    "58": {
      "op": "dup"
    },
    "59": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "60": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%0%0#0"
      ]
    },
    "61": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "62": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "63": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "64": {
      "callsub": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs",
      "op": "callsub structs",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "67": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "75": {
      "op": "log",
      "stack_out": []
    },
    "76": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "return"
    },
    "78": {
      "block": "main_arc4Interop_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "84": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "85": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "86": {
      "op": "return"
    },
    "87": {
      "block": "main_doThings_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "89": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "90": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "93": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "94": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "return"
    },
    "96": {
      "block": "main_buildArray_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "98": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "99": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "100": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "102": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "103": {
      "op": "pushbytes 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004",
      "defined_out": [
        "0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004"
      ],
      "stack_out": [
        "0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004"
      ]
    },
    "143": {
      "op": "log",
      "stack_out": []
    },
    "144": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "return"
    },
    "146": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "148": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "151": {
      "op": "txn ApplicationID"
    },
    "153": {
      "op": "!"
    },
    "154": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "155": {
      "op": "intc_0 // 1"
    },
    "156": {
      "op": "return"
    },
    "157": {
      "subroutine": "tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs",
      "params": {
        "p.x#0": "uint64",
        "p.y#0": "uint64"
      },
      "block": "structs",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "160": {
      "op": "intc_1 // 0",
      "stack_out": [
        "arc4_item%0#0"
      ]
    },
    "161": {
      "op": "frame_dig -2",
      "defined_out": [
        "p.x#0 (copy)"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "p.x#0 (copy)"
      ]
    },
    "163": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%sub_item%0#1"
      ]
    },
    "164": {
      "op": "frame_dig -1",
      "defined_out": [
        "array%sub_item%0#1",
        "p.y#0 (copy)"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%sub_item%0#1",
        "p.y#0 (copy)"
      ]
    },
    "166": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "array%encoded%1#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1"
      ]
    },
    "168": {
      "op": "dup",
      "defined_out": [
        "array%encoded%1#1",
        "array%encoded%1#1 (copy)"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1",
        "array%encoded%1#1 (copy)"
      ]
    },
    "169": {
      "op": "len",
      "defined_out": [
        "array%encoded%1#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1",
        "byte_len%0#0"
      ]
    },
    "170": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "array%encoded%1#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1",
        "byte_len%0#0",
        "16"
      ]
    },
    "172": {
      "op": "/",
      "defined_out": [
        "array%encoded%1#1",
        "len_%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1",
        "len_%0#0"
      ]
    },
    "173": {
      "op": "itob",
      "defined_out": [
        "array%encoded%1#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1",
        "as_bytes%0#0"
      ]
    },
    "174": {
      "op": "extract 6 2",
      "defined_out": [
        "array%encoded%1#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "array%encoded%1#1",
        "len_16_bit%0#0"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "arc4_item%0#0",
        "len_16_bit%0#0",
        "array%encoded%1#1"
      ]
    },
    "178": {
      "op": "concat",
      "defined_out": [
        "myVectors#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1"
      ]
    },
    "179": {
      "op": "dup",
      "defined_out": [
        "myVectors#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "myVectors#1"
      ]
    },
    "180": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "myVectors#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "myVectors#1",
        "0"
      ]
    },
    "181": {
      "op": "extract_uint16",
      "defined_out": [
        "myVectors#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "intc_0 // 1",
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "tmp%0#0",
        "1"
      ]
    },
    "183": {
      "op": "==",
      "defined_out": [
        "myVectors#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "tmp%1#0"
      ]
    },
    "184": {
      "op": "bz structs_bool_false@4",
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1"
      ]
    },
    "187": {
      "op": "frame_dig 1"
    },
    "189": {
      "op": "extract 2 16"
    },
    "192": {
      "op": "dup"
    },
    "193": {
      "op": "frame_bury 0"
    },
    "195": {
      "op": "intc_1 // 0"
    },
    "196": {
      "op": "extract_uint64"
    },
    "197": {
      "op": "frame_dig -2"
    },
    "199": {
      "op": "=="
    },
    "200": {
      "op": "bz structs_bool_false@4"
    },
    "203": {
      "op": "frame_dig 0"
    },
    "205": {
      "op": "intc_2 // 8"
    },
    "206": {
      "op": "extract_uint64"
    },
    "207": {
      "op": "frame_dig -1"
    },
    "209": {
      "op": "=="
    },
    "210": {
      "op": "bz structs_bool_false@4"
    },
    "213": {
      "op": "intc_0 // 1"
    },
    "214": {
      "block": "structs_bool_merge@5",
      "stack_in": [
        "arc4_item%0#0",
        "myVectors#1",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1"
      ]
    },
    "215": {
      "op": "frame_dig 1",
      "defined_out": [
        "myVectors#1"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "myVectors#1"
      ]
    },
    "217": {
      "op": "frame_bury 0"
    },
    "219": {
      "retsub": true,
      "op": "retsub"
    },
    "220": {
      "block": "structs_bool_false@4",
      "stack_in": [
        "arc4_item%0#0",
        "myVectors#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "arc4_item%0#0",
        "myVectors#1",
        "and_result%0#0"
      ]
    },
    "221": {
      "op": "b structs_bool_merge@5"
    }
  }
}