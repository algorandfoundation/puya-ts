#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8
    bytecblock 0x151f7c75a0 0x151f7c750003a0
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x0f4c11ca 0x13a588c8 0x787b50b2 0xeb87a064 0xbc61d6b8 0x8f544473 0x43e7ee45 0xcbe3a4f8 // method "buildArray()uint64[]", method "doThings()void", method "arc4Interop()void", method "structs((uint64,uint64))(uint64,uint64)[]", method "booleans()bool[]", method "booleansStatic()(bool,bool,bool)", method "arc4Booleans()bool[]", method "arc4BooleansStatic()(bool,bool,bool)"
    txna ApplicationArgs 0
    match main_buildArray_route@3 main_doThings_route@4 main_arc4Interop_route@5 main_structs_route@6 main_booleans_route@7 main_booleansStatic_route@8 main_arc4Booleans_route@9 main_arc4BooleansStatic_route@10

main_after_if_else@17:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    intc_1 // 0
    return

main_arc4BooleansStatic_route@10:
    // tests/approvals/native-arrays.algo.ts:75
    // arc4BooleansStatic() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75a0
    log
    intc_0 // 1
    return

main_arc4Booleans_route@9:
    // tests/approvals/native-arrays.algo.ts:71
    // arc4Booleans() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_booleansStatic_route@8:
    // tests/approvals/native-arrays.algo.ts:67
    // booleansStatic() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75a0
    log
    intc_0 // 1
    return

main_booleans_route@7:
    // tests/approvals/native-arrays.algo.ts:63
    // booleans() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_structs_route@6:
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    callsub structs
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc4Interop_route@5:
    // tests/approvals/native-arrays.algo.ts:42
    // arc4Interop() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_doThings_route@4:
    // tests/approvals/native-arrays.algo.ts:11
    // doThings() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_buildArray_route@3:
    // tests/approvals/native-arrays.algo.ts:7
    // buildArray(): uint64[] {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_bare_routing@13:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@17
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p.x: uint64, p.y: uint64) -> bytes:
structs:
    // tests/approvals/native-arrays.algo.ts:54
    // structs({ x, y }: Vector) {
    proto 2 1
    intc_1 // 0
    // tests/approvals/native-arrays.algo.ts:57
    // myVectors = [{ x, y }]
    frame_dig -2
    itob
    frame_dig -1
    itob
    concat
    pushbytes 0x0001
    swap
    concat
    dup
    // tests/approvals/native-arrays.algo.ts:59
    // assertMatch(myVectors, [{ x, y }])
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz structs_bool_false@4
    frame_dig 1
    extract 2 16
    dup
    frame_bury 0
    intc_1 // 0
    extract_uint64
    frame_dig -2
    ==
    bz structs_bool_false@4
    frame_dig 0
    intc_2 // 8
    extract_uint64
    frame_dig -1
    ==
    bz structs_bool_false@4
    intc_0 // 1

structs_bool_merge@5:
    // tests/approvals/native-arrays.algo.ts:59
    // assertMatch(myVectors, [{ x, y }])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:60
    // return myVectors
    frame_dig 1
    frame_bury 0
    retsub

structs_bool_false@4:
    intc_1 // 0
    b structs_bool_merge@5
