#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 10 4
    bytecblock 0x151f7c75a0 0x151f7c750003a0 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004 0x068101 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@21
    pushbytess 0x7d318589 0xb0ac9066 0x0f4c11ca 0xaaa29f70 0xe2d5e035 0x13a588c8 0xd6ecc1e6 0x787b50b2 0xeb87a064 0xbc61d6b8 0x8f544473 0x43e7ee45 0xcbe3a4f8 0x143f223b 0xd9895442 0xe213f5b6 // method "readonlyArray()void", method "arrayInObject()void", method "buildArray()uint64[]", method "arrayFromCtor()uint64[]", method "buildReadonly()uint64[]", method "doThings()void", method "fixedArray(uint64[50])void", method "arc4Interop()void", method "structs((uint64,uint64))(uint64,uint64)[]", method "booleans()bool[]", method "booleansStatic()(bool,bool,bool)", method "arc4Booleans()bool[]", method "arc4BooleansStatic()(bool,bool,bool)", method "aliasing(uint64[],uint64[])void", method "receiveMutable(uint64[])void", method "receiveReadonly(uint64[])void"
    txna ApplicationArgs 0
    match main_readonlyArray_route@3 main_arrayInObject_route@4 main_buildArray_route@5 main_arrayFromCtor_route@6 main_buildReadonly_route@7 main_doThings_route@8 main_fixedArray_route@9 main_arc4Interop_route@10 main_structs_route@11 main_booleans_route@12 main_booleansStatic_route@13 main_arc4Booleans_route@14 main_arc4BooleansStatic_route@15 main_aliasing_route@16 main_receiveMutable_route@17 main_receiveReadonly_route@18

main_after_if_else@25:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    intc_1 // 0
    return

main_receiveReadonly_route@18:
    // tests/approvals/native-arrays.algo.ts:219
    // receiveReadonly(a: readonly uint64[]) {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_receiveMutable_route@17:
    // tests/approvals/native-arrays.algo.ts:215
    // receiveMutable(a: uint64[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:215
    // receiveMutable(a: uint64[]) {
    callsub receiveMutable
    pop
    intc_0 // 1
    return

main_aliasing_route@16:
    // tests/approvals/native-arrays.algo.ts:189
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/native-arrays.algo.ts:189
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    callsub aliasing
    intc_0 // 1
    return

main_arc4BooleansStatic_route@15:
    // tests/approvals/native-arrays.algo.ts:185
    // arc4BooleansStatic() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75a0
    log
    intc_0 // 1
    return

main_arc4Booleans_route@14:
    // tests/approvals/native-arrays.algo.ts:181
    // arc4Booleans() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_booleansStatic_route@13:
    // tests/approvals/native-arrays.algo.ts:177
    // booleansStatic() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75a0
    log
    intc_0 // 1
    return

main_booleans_route@12:
    // tests/approvals/native-arrays.algo.ts:173
    // booleans() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_structs_route@11:
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    callsub structs
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc4Interop_route@10:
    // tests/approvals/native-arrays.algo.ts:151
    // arc4Interop() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_fixedArray_route@9:
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    callsub fixedArray
    intc_0 // 1
    return

main_doThings_route@8:
    // tests/approvals/native-arrays.algo.ts:42
    // doThings() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub doThings
    intc_0 // 1
    return

main_buildReadonly_route@7:
    // tests/approvals/native-arrays.algo.ts:38
    // buildReadonly(): ReadonlyArray<uint64> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_2 // 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_arrayFromCtor_route@6:
    // tests/approvals/native-arrays.algo.ts:34
    // arrayFromCtor(): Array<uint64> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750003000000000000000100000000000000020000000000000003
    log
    intc_0 // 1
    return

main_buildArray_route@5:
    // tests/approvals/native-arrays.algo.ts:30
    // buildArray(): Array<uint64> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_2 // 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_arrayInObject_route@4:
    // tests/approvals/native-arrays.algo.ts:20
    // arrayInObject() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_readonlyArray_route@3:
    // tests/approvals/native-arrays.algo.ts:7
    // readonlyArray() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_bare_routing@21:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@25
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2
    frame_dig -2
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    uncover 2
    intc_1 // 0
    uncover 3
    substring3
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
doThings:
    // tests/approvals/native-arrays.algo.ts:42
    // doThings() {
    proto 0 0
    intc_1 // 0
    dupn 8
    pushbytes ""

doThings_while_top@180:
    pushint 1410 // 1410
    global OpcodeBudget
    >
    bz doThings_after_while@185
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_3 // 0x068101
    itxn_field ApprovalProgram
    bytec_3 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b doThings_while_top@180

doThings_after_while@185:
    // tests/approvals/native-arrays.algo.ts:46
    // arr.push(5)
    pushint 5 // 5
    itob
    frame_bury 0
    bytec 4 // 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    // tests/approvals/native-arrays.algo.ts:47
    // assert(arr.pop()! === 5)
    pushint 8 // 8
    callsub dynamic_array_pop_fixed_size
    dup
    cover 2
    frame_bury 1
    btoi
    pushint 5 // 5
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    intc_1 // 0
    extract_uint16
    dup
    frame_bury 9
    intc_3 // 4
    ==
    bz doThings_bool_false@6
    frame_dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@6
    frame_dig 1
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@6
    frame_dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@6
    frame_dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@6
    intc_0 // 1

doThings_bool_merge@7:
    // tests/approvals/native-arrays.algo.ts:48
    // assertMatch(arr, [1, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:51
    // assert(arr[0] === 1)
    frame_dig 1
    dup
    extract 2 0
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:52
    // assert(arr.at(-1)! === 4)
    frame_dig 9
    dup
    cover 2
    intc_0 // 1
    -
    pushint 8 // 8
    *
    extract_uint64
    intc_3 // 4
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:55
    // arr.push(Uint64(5))
    swap
    frame_dig 0
    concat // on error: max array length exceeded
    swap
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 1
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    intc_1 // 0
    extract_uint16
    pushint 5 // 5
    ==
    bz doThings_bool_false@14
    frame_dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@14
    frame_dig 1
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@14
    frame_dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@14
    frame_dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@14
    frame_dig 1
    pushint 34 // 34
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@14
    intc_0 // 1

doThings_bool_merge@15:
    // tests/approvals/native-arrays.algo.ts:57
    // assertMatch(arr, [1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:60
    // const top = arr.pop()!
    frame_dig 1
    pushint 8 // 8
    callsub dynamic_array_pop_fixed_size
    dup
    cover 2
    frame_bury 1
    btoi
    // tests/approvals/native-arrays.algo.ts:61
    // assert(top === 5)
    pushint 5 // 5
    ==
    assert
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@21
    frame_dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@21
    frame_dig 1
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@21
    frame_dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@21
    frame_dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@21
    intc_0 // 1

doThings_bool_merge@22:
    // tests/approvals/native-arrays.algo.ts:63
    // assertMatch(arr, [1, 2, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:66
    // arr[1] = 10
    intc_2 // 10
    itob
    frame_dig 1
    swap
    replace2 10
    dup
    frame_bury 1
    // tests/approvals/native-arrays.algo.ts:68
    // const arr2 = arr.with(1, 5)
    dup
    frame_dig 0
    replace2 10
    frame_bury 2
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@28
    frame_dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@28
    frame_dig 1
    intc_2 // 10
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@28
    frame_dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@28
    frame_dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@28
    intc_0 // 1

doThings_bool_merge@29:
    // tests/approvals/native-arrays.algo.ts:70
    // assertMatch(arr, [1, 10, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    frame_dig 2
    intc_1 // 0
    extract_uint16
    intc_3 // 4
    ==
    bz doThings_bool_false@35
    frame_dig 2
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@35
    frame_dig 2
    intc_2 // 10
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@35
    frame_dig 2
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@35
    frame_dig 2
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@35
    intc_0 // 1

doThings_bool_merge@36:
    // tests/approvals/native-arrays.algo.ts:71
    // assertMatch(arr2, [1, 5, 3, 4])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:75
    // arr = arr.concat(arr).concat(11).concat(t1)
    frame_dig 1
    dup
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    pushint 11 // 11
    itob
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    // tests/approvals/native-arrays.algo.ts:74
    // const t1: [uint64, uint64] = [12, 13]
    pushbytes 0x000000000000000c000000000000000d
    // tests/approvals/native-arrays.algo.ts:75
    // arr = arr.concat(arr).concat(11).concat(t1)
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 1
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_1 // 0
    extract_uint16
    pushint 11 // 11
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@49
    frame_dig 1
    intc_2 // 10
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 66 // 66
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 74 // 74
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@49
    frame_dig 1
    pushint 82 // 82
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@49
    intc_0 // 1

doThings_bool_merge@50:
    // tests/approvals/native-arrays.algo.ts:76
    // assertMatch(arr, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:83
    // const fArr1 = new FixedArray<uint64, 4>()
    pushint 32 // 32
    bzero
    frame_bury 8
    // tests/approvals/native-arrays.algo.ts:91
    // const arr4 = rArr1.concat(arr)
    frame_dig 1
    extract 2 0
    dup
    frame_bury 7
    // tests/approvals/native-arrays.algo.ts:80
    // rArr1 = [...rArr1, Uint64(5)]
    bytec 4 // 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    // tests/approvals/native-arrays.algo.ts:91
    // const arr4 = rArr1.concat(arr)
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 3
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@110
    frame_dig 3
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 34 // 34
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 42 // 42
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 50 // 50
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 58 // 58
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 66 // 66
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 74 // 74
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 82 // 82
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 90 // 90
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 98 // 98
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 106 // 106
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 114 // 114
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@110
    frame_dig 3
    pushint 122 // 122
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@110
    intc_0 // 1

doThings_bool_merge@111:
    // tests/approvals/native-arrays.algo.ts:92
    // assertMatch(arr4, [1, 2, 3, 4, 5, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:97
    // const arr6 = fArr1.concat(arr)
    pushbytes 0x00040000000000000000000000000000000000000000000000000000000000000000
    frame_dig 7
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 4
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 2 // 2
    extract_uint64
    bnz doThings_bool_false@140
    frame_dig 4
    intc_2 // 10
    extract_uint64
    bnz doThings_bool_false@140
    frame_dig 4
    pushint 18 // 18
    extract_uint64
    bnz doThings_bool_false@140
    frame_dig 4
    pushint 26 // 26
    extract_uint64
    bnz doThings_bool_false@140
    frame_dig 4
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 66 // 66
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 74 // 74
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 82 // 82
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 90 // 90
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 98 // 98
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 106 // 106
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@140
    frame_dig 4
    pushint 114 // 114
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@140
    intc_0 // 1

doThings_bool_merge@141:
    // tests/approvals/native-arrays.algo.ts:98
    // assertMatch(arr6, [0, 0, 0, 0, 1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:100
    // const arr7 = arr.concat(rArr1)
    frame_dig 1
    // tests/approvals/native-arrays.algo.ts:94
    // const arr5 = fArr1.concat(rArr1)
    pushbytes 0x00000000000000010000000000000002000000000000000300000000000000040000000000000005
    // tests/approvals/native-arrays.algo.ts:100
    // const arr7 = arr.concat(rArr1)
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 5
    // tests/approvals/native-arrays.algo.ts:101
    // assert(arr7.length === 16)
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    dup
    assert
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    bz doThings_bool_false@159
    frame_dig 5
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@159
    frame_dig 5
    intc_2 // 10
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 66 // 66
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 74 // 74
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 82 // 82
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 90 // 90
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 98 // 98
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 106 // 106
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 114 // 114
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@159
    frame_dig 5
    pushint 122 // 122
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@159
    intc_0 // 1

doThings_bool_merge@160:
    // tests/approvals/native-arrays.algo.ts:102
    // assertMatch(arr7, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 1, 2, 3, 4, 5])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:104
    // const arr8 = arr.concat(fArr1)
    frame_dig 1
    frame_dig 8
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 6
    // tests/approvals/native-arrays.algo.ts:105
    // assert(arr8.length === 15)
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    dup
    assert
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    bz doThings_bool_false@177
    frame_dig 6
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@177
    frame_dig 6
    intc_2 // 10
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 66 // 66
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 74 // 74
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 82 // 82
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@177
    frame_dig 6
    pushint 90 // 90
    extract_uint64
    bnz doThings_bool_false@177
    frame_dig 6
    pushint 98 // 98
    extract_uint64
    bnz doThings_bool_false@177
    frame_dig 6
    pushint 106 // 106
    extract_uint64
    bnz doThings_bool_false@177
    frame_dig 6
    pushint 114 // 114
    extract_uint64
    bnz doThings_bool_false@177
    intc_0 // 1

doThings_bool_merge@178:
    // tests/approvals/native-arrays.algo.ts:106
    // assertMatch(arr8, [1, 10, 3, 4, 1, 10, 3, 4, 11, 12, 13, 0, 0, 0, 0])
    assert // assert target is match for conditions
    retsub

doThings_bool_false@177:
    intc_1 // 0
    b doThings_bool_merge@178

doThings_bool_false@159:
    intc_1 // 0
    b doThings_bool_merge@160

doThings_bool_false@140:
    intc_1 // 0
    b doThings_bool_merge@141

doThings_bool_false@110:
    intc_1 // 0
    b doThings_bool_merge@111

doThings_bool_false@49:
    intc_1 // 0
    b doThings_bool_merge@50

doThings_bool_false@35:
    intc_1 // 0
    b doThings_bool_merge@36

doThings_bool_false@28:
    intc_1 // 0
    b doThings_bool_merge@29

doThings_bool_false@21:
    intc_1 // 0
    b doThings_bool_merge@22

doThings_bool_false@14:
    intc_1 // 0
    b doThings_bool_merge@15

doThings_bool_false@6:
    intc_1 // 0
    b doThings_bool_merge@7


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: bytes) -> void:
fixedArray:
    // tests/approvals/native-arrays.algo.ts:109
    // fixedArray(y: FixedArray<uint64, 50>) {
    proto 1 0
    // tests/approvals/native-arrays.algo.ts:113
    // assert(x[0] === y[0])
    frame_dig -1
    intc_1 // 0
    extract_uint64
    !
    assert
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: bytes) -> bytes:
structs:
    // tests/approvals/native-arrays.algo.ts:164
    // structs({ x, y }: Vector) {
    proto 1 1
    intc_1 // 0
    frame_dig -1
    intc_1 // 0
    extract_uint64
    dup
    frame_dig -1
    pushint 8 // 8
    extract_uint64
    dup
    uncover 2
    // tests/approvals/native-arrays.algo.ts:167
    // myVectors = [{ x, y }]
    itob
    swap
    itob
    concat
    pushbytes 0x0001
    swap
    concat
    dup
    // tests/approvals/native-arrays.algo.ts:169
    // assertMatch(myVectors, [{ x, y }])
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz structs_bool_false@4
    frame_dig 3
    extract 2 16
    dup
    frame_bury 0
    intc_1 // 0
    extract_uint64
    frame_dig 1
    ==
    bz structs_bool_false@4
    frame_dig 0
    pushint 8 // 8
    extract_uint64
    frame_dig 2
    ==
    bz structs_bool_false@4
    intc_0 // 1

structs_bool_merge@5:
    // tests/approvals/native-arrays.algo.ts:169
    // assertMatch(myVectors, [{ x, y }])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:170
    // return myVectors
    frame_dig 3
    frame_bury 0
    retsub

structs_bool_false@4:
    intc_1 // 0
    b structs_bool_merge@5


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: bytes, readOnly: bytes) -> void:
aliasing:
    // tests/approvals/native-arrays.algo.ts:189
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    proto 2 0
    // tests/approvals/native-arrays.algo.ts:200
    // mutable[1] += 2
    frame_dig -2
    intc_2 // 10
    extract_uint64
    dup
    pushint 2 // 2
    +
    itob
    frame_dig -2
    swap
    replace2 10
    dup
    frame_bury -2
    intc_2 // 10
    // tests/approvals/native-arrays.algo.ts:202
    // assert(mutable[1] !== needClone2[1], 'These should not match')
    extract_uint64
    !=
    assert // These should not match
    // tests/approvals/native-arrays.algo.ts:205
    // this.receiveMutable(mutable)
    frame_dig -2
    callsub receiveMutable
    frame_bury -2
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: bytes) -> bytes:
receiveMutable:
    // tests/approvals/native-arrays.algo.ts:215
    // receiveMutable(a: uint64[]) {
    proto 1 1
    // tests/approvals/native-arrays.algo.ts:216
    // a[0] = 1
    intc_0 // 1
    itob
    frame_dig -1
    swap
    replace2 2
    dup
    frame_bury -1
    retsub
