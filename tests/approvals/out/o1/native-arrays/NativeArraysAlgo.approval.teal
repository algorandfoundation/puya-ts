#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8 10
    bytecblock 0x151f7c75a0 0x151f7c750003a0 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@19
    pushbytess 0x0f4c11ca 0xaaa29f70 0xe2d5e035 0x13a588c8 0xad33a87b 0x787b50b2 0xeb87a064 0xbc61d6b8 0x8f544473 0x43e7ee45 0xcbe3a4f8 0x143f223b 0xd9895442 0xe213f5b6 // method "buildArray()uint64[]", method "arrayFromCtor()uint64[]", method "buildReadonly()uint64[]", method "doThings()void", method "fixedArray(uint64[1024])void", method "arc4Interop()void", method "structs((uint64,uint64))(uint64,uint64)[]", method "booleans()bool[]", method "booleansStatic()(bool,bool,bool)", method "arc4Booleans()bool[]", method "arc4BooleansStatic()(bool,bool,bool)", method "aliasing(uint64[],uint64[])void", method "receiveMutable(uint64[])void", method "receiveReadonly(uint64[])void"
    txna ApplicationArgs 0
    match main_buildArray_route@3 main_arrayFromCtor_route@4 main_buildReadonly_route@5 main_doThings_route@6 main_fixedArray_route@7 main_arc4Interop_route@8 main_structs_route@9 main_booleans_route@10 main_booleansStatic_route@11 main_arc4Booleans_route@12 main_arc4BooleansStatic_route@13 main_aliasing_route@14 main_receiveMutable_route@15 main_receiveReadonly_route@16

main_after_if_else@23:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    intc_1 // 0
    return

main_receiveReadonly_route@16:
    // tests/approvals/native-arrays.algo.ts:130
    // receiveReadonly(a: readonly uint64[]) {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_receiveMutable_route@15:
    // tests/approvals/native-arrays.algo.ts:126
    // receiveMutable(a: uint64[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:126
    // receiveMutable(a: uint64[]) {
    callsub receiveMutable
    pop
    intc_0 // 1
    return

main_aliasing_route@14:
    // tests/approvals/native-arrays.algo.ts:100
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/native-arrays.algo.ts:100
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    callsub aliasing
    intc_0 // 1
    return

main_arc4BooleansStatic_route@13:
    // tests/approvals/native-arrays.algo.ts:96
    // arc4BooleansStatic() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75a0
    log
    intc_0 // 1
    return

main_arc4Booleans_route@12:
    // tests/approvals/native-arrays.algo.ts:92
    // arc4Booleans() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_booleansStatic_route@11:
    // tests/approvals/native-arrays.algo.ts:88
    // booleansStatic() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75a0
    log
    intc_0 // 1
    return

main_booleans_route@10:
    // tests/approvals/native-arrays.algo.ts:84
    // booleans() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // 0x151f7c750003a0
    log
    intc_0 // 1
    return

main_structs_route@9:
    // tests/approvals/native-arrays.algo.ts:75
    // structs({ x, y }: Vector) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:75
    // structs({ x, y }: Vector) {
    callsub structs
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc4Interop_route@8:
    // tests/approvals/native-arrays.algo.ts:62
    // arc4Interop() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_fixedArray_route@7:
    // tests/approvals/native-arrays.algo.ts:54
    // fixedArray(y: FixedArray<uint64, 1024>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txna ApplicationArgs 1
    // tests/approvals/native-arrays.algo.ts:54
    // fixedArray(y: FixedArray<uint64, 1024>) {
    callsub fixedArray
    intc_0 // 1
    return

main_doThings_route@6:
    // tests/approvals/native-arrays.algo.ts:19
    // doThings() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_buildReadonly_route@5:
    // tests/approvals/native-arrays.algo.ts:15
    // buildReadonly(): ReadonlyArray<uint64> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_2 // 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_arrayFromCtor_route@4:
    // tests/approvals/native-arrays.algo.ts:11
    // arrayFromCtor(): Array<uint64> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750003000000000000000100000000000000020000000000000003
    log
    intc_0 // 1
    return

main_buildArray_route@3:
    // tests/approvals/native-arrays.algo.ts:7
    // buildArray(): Array<uint64> {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_2 // 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_bare_routing@19:
    // tests/approvals/native-arrays.algo.ts:6
    // export class NativeArraysAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@23
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: bytes) -> void:
fixedArray:
    // tests/approvals/native-arrays.algo.ts:54
    // fixedArray(y: FixedArray<uint64, 1024>) {
    proto 1 0
    // tests/approvals/native-arrays.algo.ts:57
    // assert(x[0] === y[0])
    frame_dig -1
    intc_1 // 0
    extract_uint64
    !
    assert
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: bytes) -> bytes:
structs:
    // tests/approvals/native-arrays.algo.ts:75
    // structs({ x, y }: Vector) {
    proto 1 1
    intc_1 // 0
    frame_dig -1
    intc_1 // 0
    extract_uint64
    dup
    frame_dig -1
    intc_2 // 8
    extract_uint64
    dup
    uncover 2
    // tests/approvals/native-arrays.algo.ts:78
    // myVectors = [{ x, y }]
    itob
    swap
    itob
    concat
    pushbytes 0x0001
    swap
    concat
    dup
    // tests/approvals/native-arrays.algo.ts:80
    // assertMatch(myVectors, [{ x, y }])
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz structs_bool_false@4
    frame_dig 3
    extract 2 16
    dup
    frame_bury 0
    intc_1 // 0
    extract_uint64
    frame_dig 1
    ==
    bz structs_bool_false@4
    frame_dig 0
    intc_2 // 8
    extract_uint64
    frame_dig 2
    ==
    bz structs_bool_false@4
    intc_0 // 1

structs_bool_merge@5:
    // tests/approvals/native-arrays.algo.ts:80
    // assertMatch(myVectors, [{ x, y }])
    assert // assert target is match for conditions
    // tests/approvals/native-arrays.algo.ts:81
    // return myVectors
    frame_dig 3
    frame_bury 0
    retsub

structs_bool_false@4:
    intc_1 // 0
    b structs_bool_merge@5


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: bytes, readOnly: bytes) -> void:
aliasing:
    // tests/approvals/native-arrays.algo.ts:100
    // aliasing(mutable: uint64[], readOnly: readonly uint64[]) {
    proto 2 0
    // tests/approvals/native-arrays.algo.ts:111
    // mutable[1] += 2
    frame_dig -2
    intc_3 // 10
    extract_uint64
    dup
    pushint 2 // 2
    +
    itob
    frame_dig -2
    swap
    replace2 10
    dup
    frame_bury -2
    intc_3 // 10
    // tests/approvals/native-arrays.algo.ts:113
    // assert(mutable[1] !== needClone2[1], 'These should not match')
    extract_uint64
    !=
    assert // These should not match
    // tests/approvals/native-arrays.algo.ts:116
    // this.receiveMutable(mutable)
    frame_dig -2
    callsub receiveMutable
    frame_bury -2
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: bytes) -> bytes:
receiveMutable:
    // tests/approvals/native-arrays.algo.ts:126
    // receiveMutable(a: uint64[]) {
    proto 1 1
    // tests/approvals/native-arrays.algo.ts:127
    // a[0] = 1
    intc_0 // 1
    itob
    frame_dig -1
    swap
    replace2 2
    dup
    frame_bury -1
    retsub
