{
    "hints": {
        "buildArray()uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arrayFromCtor()uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buildReadonly()uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "doThings()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fixedArray(uint64[50])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4Interop()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "structs((uint64,uint64))(uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "p": {
                    "name": "Vector",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "booleans()bool[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "booleansStatic()(bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4Booleans()bool[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4BooleansStatic()(bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "aliasing(uint64[],uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveMutable(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "receiveReadonly(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NativeArraysAlgo",
        "methods": [
            {
                "name": "buildArray",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "arrayFromCtor",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "buildReadonly",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "doThings",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fixedArray",
                "args": [
                    {
                        "type": "uint64[50]",
                        "name": "y"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc4Interop",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "structs",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "p"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            },
            {
                "name": "booleans",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool[]"
                }
            },
            {
                "name": "booleansStatic",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,bool,bool)"
                }
            },
            {
                "name": "arc4Booleans",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool[]"
                }
            },
            {
                "name": "arc4BooleansStatic",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,bool,bool)"
                }
            },
            {
                "name": "aliasing",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "mutable"
                    },
                    {
                        "type": "uint64[]",
                        "name": "readOnly"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "receiveMutable",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "receiveReadonly",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}