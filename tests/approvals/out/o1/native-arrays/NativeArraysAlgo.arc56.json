{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "readonlyArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        238,
                        247,
                        263,
                        281,
                        292,
                        303,
                        314,
                        325,
                        349,
                        358,
                        373,
                        385,
                        396,
                        438,
                        449,
                        458
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1769
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        604,
                        678,
                        728,
                        783,
                        823,
                        995,
                        1158,
                        1337,
                        1539,
                        1682,
                        1744
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        472
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        241,
                        250,
                        266,
                        284,
                        295,
                        306,
                        317,
                        328,
                        352,
                        361,
                        376,
                        388,
                        399,
                        441,
                        452,
                        461
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        620,
                        824,
                        845,
                        875,
                        1003,
                        1197,
                        1382,
                        1540
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAxMCA0IDAKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NWEwIDB4MTUxZjdjNzUwMDAzYTAgMHgxNTFmN2M3NTAwMDQwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0IDB4MDY4MTAxIDB4MDAwNTAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDA1CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDIxCiAgICBwdXNoYnl0ZXNzIDB4N2QzMTg1ODkgMHhiMGFjOTA2NiAweDBmNGMxMWNhIDB4YWFhMjlmNzAgMHhlMmQ1ZTAzNSAweDEzYTU4OGM4IDB4ZDZlY2MxZTYgMHg3ODdiNTBiMiAweGViODdhMDY0IDB4YmM2MWQ2YjggMHg4ZjU0NDQ3MyAweDQzZTdlZTQ1IDB4Y2JlM2E0ZjggMHgxNDNmMjIzYiAweGQ5ODk1NDQyIDB4ZTIxM2Y1YjYgLy8gbWV0aG9kICJyZWFkb25seUFycmF5KCl2b2lkIiwgbWV0aG9kICJhcnJheUluT2JqZWN0KCl2b2lkIiwgbWV0aG9kICJidWlsZEFycmF5KCl1aW50NjRbXSIsIG1ldGhvZCAiYXJyYXlGcm9tQ3RvcigpdWludDY0W10iLCBtZXRob2QgImJ1aWxkUmVhZG9ubHkoKXVpbnQ2NFtdIiwgbWV0aG9kICJkb1RoaW5ncygpdm9pZCIsIG1ldGhvZCAiZml4ZWRBcnJheSh1aW50NjRbNTBdKXZvaWQiLCBtZXRob2QgImFyYzRJbnRlcm9wKCl2b2lkIiwgbWV0aG9kICJzdHJ1Y3RzKCh1aW50NjQsdWludDY0KSkodWludDY0LHVpbnQ2NClbXSIsIG1ldGhvZCAiYm9vbGVhbnMoKWJvb2xbXSIsIG1ldGhvZCAiYm9vbGVhbnNTdGF0aWMoKShib29sLGJvb2wsYm9vbCkiLCBtZXRob2QgImFyYzRCb29sZWFucygpYm9vbFtdIiwgbWV0aG9kICJhcmM0Qm9vbGVhbnNTdGF0aWMoKShib29sLGJvb2wsYm9vbCkiLCBtZXRob2QgImFsaWFzaW5nKHVpbnQ2NFtdLHVpbnQ2NFtdKXZvaWQiLCBtZXRob2QgInJlY2VpdmVNdXRhYmxlKHVpbnQ2NFtdKXZvaWQiLCBtZXRob2QgInJlY2VpdmVSZWFkb25seSh1aW50NjRbXSl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9yZWFkb25seUFycmF5X3JvdXRlQDMgbWFpbl9hcnJheUluT2JqZWN0X3JvdXRlQDQgbWFpbl9idWlsZEFycmF5X3JvdXRlQDUgbWFpbl9hcnJheUZyb21DdG9yX3JvdXRlQDYgbWFpbl9idWlsZFJlYWRvbmx5X3JvdXRlQDcgbWFpbl9kb1RoaW5nc19yb3V0ZUA4IG1haW5fZml4ZWRBcnJheV9yb3V0ZUA5IG1haW5fYXJjNEludGVyb3Bfcm91dGVAMTAgbWFpbl9zdHJ1Y3RzX3JvdXRlQDExIG1haW5fYm9vbGVhbnNfcm91dGVAMTIgbWFpbl9ib29sZWFuc1N0YXRpY19yb3V0ZUAxMyBtYWluX2FyYzRCb29sZWFuc19yb3V0ZUAxNCBtYWluX2FyYzRCb29sZWFuc1N0YXRpY19yb3V0ZUAxNSBtYWluX2FsaWFzaW5nX3JvdXRlQDE2IG1haW5fcmVjZWl2ZU11dGFibGVfcm91dGVAMTcgbWFpbl9yZWNlaXZlUmVhZG9ubHlfcm91dGVAMTgKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyNToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzMgLy8gMAogICAgcmV0dXJuCgptYWluX3JlY2VpdmVSZWFkb25seV9yb3V0ZUAxODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjI1CiAgICAvLyByZWNlaXZlUmVhZG9ubHkoYTogcmVhZG9ubHkgdWludDY0W10pIHt9CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVjZWl2ZU11dGFibGVfcm91dGVAMTc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIyMQogICAgLy8gcmVjZWl2ZU11dGFibGUoYTogdWludDY0W10pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgTmF0aXZlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjIxCiAgICAvLyByZWNlaXZlTXV0YWJsZShhOiB1aW50NjRbXSkgewogICAgY2FsbHN1YiByZWNlaXZlTXV0YWJsZQogICAgcG9wCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FsaWFzaW5nX3JvdXRlQDE2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxOTUKICAgIC8vIGFsaWFzaW5nKG11dGFibGU6IHVpbnQ2NFtdLCByZWFkT25seTogcmVhZG9ubHkgdWludDY0W10pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgTmF0aXZlQXJyYXlzQWxnbyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTk1CiAgICAvLyBhbGlhc2luZyhtdXRhYmxlOiB1aW50NjRbXSwgcmVhZE9ubHk6IHJlYWRvbmx5IHVpbnQ2NFtdKSB7CiAgICBjYWxsc3ViIGFsaWFzaW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzRCb29sZWFuc1N0YXRpY19yb3V0ZUAxNToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTkxCiAgICAvLyBhcmM0Qm9vbGVhbnNTdGF0aWMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NWEwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNEJvb2xlYW5zX3JvdXRlQDE0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxODcKICAgIC8vIGFyYzRCb29sZWFucygpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1MDAwM2EwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYm9vbGVhbnNTdGF0aWNfcm91dGVAMTM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE4MwogICAgLy8gYm9vbGVhbnNTdGF0aWMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NWEwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYm9vbGVhbnNfcm91dGVAMTI6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3OQogICAgLy8gYm9vbGVhbnMoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NTAwMDNhMAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3N0cnVjdHNfcm91dGVAMTE6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3MAogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3MAogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICBjYWxsc3ViIHN0cnVjdHMKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM0SW50ZXJvcF9yb3V0ZUAxMDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTU3CiAgICAvLyBhcmM0SW50ZXJvcCgpIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9maXhlZEFycmF5X3JvdXRlQDk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwOQogICAgLy8gZml4ZWRBcnJheSh5OiBGaXhlZEFycmF5PHVpbnQ2NCwgNTA+KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwOQogICAgLy8gZml4ZWRBcnJheSh5OiBGaXhlZEFycmF5PHVpbnQ2NCwgNTA+KSB7CiAgICBjYWxsc3ViIGZpeGVkQXJyYXkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZG9UaGluZ3Nfcm91dGVAODoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NDIKICAgIC8vIGRvVGhpbmdzKCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRvVGhpbmdzCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2J1aWxkUmVhZG9ubHlfcm91dGVANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzgKICAgIC8vIGJ1aWxkUmVhZG9ubHkoKTogUmVhZG9ubHlBcnJheTx1aW50NjQ+IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1MDAwNDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcnJheUZyb21DdG9yX3JvdXRlQDY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM0CiAgICAvLyBhcnJheUZyb21DdG9yKCk6IEFycmF5PHVpbnQ2ND4gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDMwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9idWlsZEFycmF5X3JvdXRlQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjMwCiAgICAvLyBidWlsZEFycmF5KCk6IEFycmF5PHVpbnQ2ND4gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUwMDA0MDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwNAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FycmF5SW5PYmplY3Rfcm91dGVANDoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjAKICAgIC8vIGFycmF5SW5PYmplY3QoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVhZG9ubHlBcnJheV9yb3V0ZUAzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3CiAgICAvLyByZWFkb25seUFycmF5KCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AyMToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDI1CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIF9wdXlhX2xpYi5hcmM0LmR5bmFtaWNfYXJyYXlfcG9wX2ZpeGVkX3NpemUoYXJyYXk6IGJ5dGVzLCBmaXhlZF9ieXRlX3NpemU6IHVpbnQ2NCkgLT4gYnl0ZXMsIGJ5dGVzOgpkeW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplOgogICAgcHJvdG8gMiAyCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAwCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIHJlcGxhY2UyIDAKICAgIGR1cAogICAgbGVuCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGR1cDIKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdDMKICAgIHVuY292ZXIgMgogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5kb1RoaW5ncygpIC0+IHZvaWQ6CmRvVGhpbmdzOgoKZG9UaGluZ3Nfd2hpbGVfdG9wQDI6CiAgICBwdXNoaW50IDE0MTAgLy8gMTQxMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogZG9UaGluZ3NfYWZ0ZXJfd2hpbGVANwogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjXzMgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlY18zIC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBpbnRjXzMgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBiIGRvVGhpbmdzX3doaWxlX3RvcEAyCgpkb1RoaW5nc19hZnRlcl93aGlsZUA3OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0NgogICAgLy8gYXJyLnB1c2goNSkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBpdG9iCiAgICBieXRlYyA0IC8vIDB4MDAwNTAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDA1CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ3CiAgICAvLyBhc3NlcnQoYXJyLnBvcCgpISA9PT0gNSkKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBjYWxsc3ViIGR5bmFtaWNfYXJyYXlfcG9wX2ZpeGVkX3NpemUKICAgIHN3YXAKICAgIGJ0b2kKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQ4CiAgICAvLyBhc3NlcnRNYXRjaChhcnIsIFsxLCAyLCAzLCA0XSkKICAgIGR1cAogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkdXAKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgZGlnIDIKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMwogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgZGlnIDEKICAgICYmCiAgICBkaWcgNAogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICAmJgogICAgZGlnIDQKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgICYmCiAgICBkaWcgNAogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjUxCiAgICAvLyBhc3NlcnQoYXJyWzBdID09PSAxKQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjUyCiAgICAvLyBhc3NlcnQoYXJyLmF0KC0xKSEgPT09IDQpCiAgICBkaWcgMQogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAqCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18yIC8vIDQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTUKICAgIC8vIGFyci5wdXNoKFVpbnQ2NCg1KSkKICAgIHN3YXAKICAgIGRpZyAyCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIHN3YXAKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1NwogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNCwgNV0pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDM0IC8vIDM0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NjAKICAgIC8vIGNvbnN0IHRvcCA9IGFyci5wb3AoKSEKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBjYWxsc3ViIGR5bmFtaWNfYXJyYXlfcG9wX2ZpeGVkX3NpemUKICAgIHN3YXAKICAgIGJ0b2kKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NjEKICAgIC8vIGFzc2VydCh0b3AgPT09IDUpCiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2MwogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNF0pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18yIC8vIDQKICAgID09CiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjY2CiAgICAvLyBhcnJbMV0gPSAxMAogICAgaW50Y18xIC8vIDEwCiAgICBpdG9iCiAgICByZXBsYWNlMiAxMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2OAogICAgLy8gY29uc3QgYXJyMiA9IGFyci53aXRoKDEsIDUpCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTIgMTAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzAKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0XSkKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgZGlnIDIKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMwogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzEgLy8gMTAKICAgID09CiAgICAmJgogICAgZGlnIDMKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgICYmCiAgICBkaWcgMwogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBkaWcgMQogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgIGRpZyAyCiAgICBwdXNoaW50IDIgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBpbnRjXzEgLy8gMTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBkaWcgMgogICAgcHVzaGludCAxOCAvLyAxOAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgJiYKICAgIHVuY292ZXIgMgogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjc1CiAgICAvLyBhcnIgPSBhcnIuY29uY2F0KGFycikuY29uY2F0KDExKS5jb25jYXQodDEpCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICByZXBsYWNlMiAwCiAgICBwdXNoaW50IDExIC8vIDExCiAgICBpdG9iCiAgICBkaWcgMQogICAgc3dhcAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBzd2FwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3NAogICAgLy8gY29uc3QgdDE6IFt1aW50NjQsIHVpbnQ2NF0gPSBbMTIsIDEzXQogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMGQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzUKICAgIC8vIGFyciA9IGFyci5jb25jYXQoYXJyKS5jb25jYXQoMTEpLmNvbmNhdCh0MSkKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzYKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIGRpZyAxCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDIKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDIKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMgogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDIKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMgogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDIKICAgIHB1c2hpbnQgNzQgLy8gNzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4MwogICAgLy8gY29uc3QgZkFycjEgPSBuZXcgRml4ZWRBcnJheTx1aW50NjQsIDQ+KCkKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGJ6ZXJvCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjgwCiAgICAvLyByQXJyMSA9IFsuLi5yQXJyMSwgVWludDY0KDUpXQogICAgYnl0ZWMgNCAvLyAweDAwMDUwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwNQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5MQogICAgLy8gY29uc3QgYXJyNCA9IHJBcnIxLmNvbmNhdChhcnIpCiAgICBkaWcgMgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5MgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyNCwgWzEsIDIsIDMsIDQsIDUsIDEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPT0KICAgIGRpZyAxCiAgICBwdXNoaW50IDIgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBpbnRjXzEgLy8gMTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDIgLy8gMgogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxOCAvLyAxOAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDI2IC8vIDI2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18yIC8vIDQKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMzQgLy8gMzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA0MiAvLyA0MgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDU4IC8vIDU4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNjYgLy8gNjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA3NCAvLyA3NAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDkwIC8vIDkwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgOTggLy8gOTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxMDYgLy8gMTA2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxMTQgLy8gMTE0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgICYmCiAgICBzd2FwCiAgICBwdXNoaW50IDEyMiAvLyAxMjIKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjk3CiAgICAvLyBjb25zdCBhcnI2ID0gZkFycjEuY29uY2F0KGFycikKICAgIHB1c2hieXRlcyAweDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6OTgKICAgIC8vIGFzc2VydE1hdGNoKGFycjYsIFswLCAwLCAwLCAwLCAxLCAxMCwgMywgNCwgMSwgMTAsIDMsIDQsIDExLCAxMiwgMTNdKQogICAgZHVwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgMTUgLy8gMTUKICAgID09CiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICAhCiAgICAmJgogICAgZGlnIDEKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxOCAvLyAxOAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDc0IC8vIDc0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgOTAgLy8gOTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5OCAvLyA5OAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMTA2IC8vIDEwNgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICAmJgogICAgc3dhcAogICAgcHVzaGludCAxMTQgLy8gMTE0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IGFycjcgPSBhcnIuY29uY2F0KHJBcnIxKQogICAgZGlnIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6OTQKICAgIC8vIGNvbnN0IGFycjUgPSBmQXJyMS5jb25jYXQockFycjEpCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwNQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IGFycjcgPSBhcnIuY29uY2F0KHJBcnIxKQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDEKICAgIC8vIGFzc2VydChhcnI3Lmxlbmd0aCA9PT0gMTYpCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPT0KICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwMgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyNywgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxMywgMSwgMiwgMywgNCwgNV0pCiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNzQgLy8gNzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5MCAvLyA5MAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDk4IC8vIDk4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMTA2IC8vIDEwNgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDExNCAvLyAxMTQKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBzd2FwCiAgICBwdXNoaW50IDEyMiAvLyAxMjIKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDQKICAgIC8vIGNvbnN0IGFycjggPSBhcnIuY29uY2F0KGZBcnIxKQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDUKICAgIC8vIGFzc2VydChhcnI4Lmxlbmd0aCA9PT0gMTUpCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNSAvLyAxNQogICAgPT0KICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwNgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyOCwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxMywgMCwgMCwgMCwgMF0pCiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNzQgLy8gNzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5MCAvLyA5MAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5OCAvLyA5OAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxMDYgLy8gMTA2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgIQogICAgJiYKICAgIHN3YXAKICAgIHB1c2hpbnQgMTE0IC8vIDExNAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgcmV0c3ViCgoKLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo6TmF0aXZlQXJyYXlzQWxnby5maXhlZEFycmF5KHk6IGJ5dGVzKSAtPiB2b2lkOgpmaXhlZEFycmF5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDkKICAgIC8vIGZpeGVkQXJyYXkoeTogRml4ZWRBcnJheTx1aW50NjQsIDUwPikgewogICAgcHJvdG8gMSAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExOQogICAgLy8gYXNzZXJ0KHhbMF0gPT09IHlbMF0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgIQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjpOYXRpdmVBcnJheXNBbGdvLnN0cnVjdHMocDogYnl0ZXMpIC0+IGJ5dGVzOgpzdHJ1Y3RzOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNzAKICAgIC8vIHN0cnVjdHMoeyB4LCB5IH06IFZlY3RvcikgewogICAgcHJvdG8gMSAxCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTczCiAgICAvLyBteVZlY3RvcnMgPSBbeyB4LCB5IH1dCiAgICBkaWcgMQogICAgaXRvYgogICAgZGlnIDEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAwMQogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3NQogICAgLy8gYXNzZXJ0TWF0Y2gobXlWZWN0b3JzLCBbeyB4LCB5IH1dKQogICAgZHVwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgZGlnIDEKICAgIGV4dHJhY3QgMiAxNgogICAgZHVwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgNQogICAgPT0KICAgIHN3YXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgdW5jb3ZlciA0CiAgICA9PQogICAgJiYKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNzYKICAgIC8vIHJldHVybiBteVZlY3RvcnMKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYWxpYXNpbmcobXV0YWJsZTogYnl0ZXMsIHJlYWRPbmx5OiBieXRlcykgLT4gdm9pZDoKYWxpYXNpbmc6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE5NQogICAgLy8gYWxpYXNpbmcobXV0YWJsZTogdWludDY0W10sIHJlYWRPbmx5OiByZWFkb25seSB1aW50NjRbXSkgewogICAgcHJvdG8gMiAwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIwNgogICAgLy8gbXV0YWJsZVsxXSArPSAyCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgcmVwbGFjZTIgMTAKICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMgogICAgaW50Y18xIC8vIDEwCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIwOAogICAgLy8gYXNzZXJ0KG11dGFibGVbMV0gIT09IG5lZWRDbG9uZTJbMV0sICdUaGVzZSBzaG91bGQgbm90IG1hdGNoJykKICAgIGV4dHJhY3RfdWludDY0CiAgICAhPQogICAgYXNzZXJ0IC8vIFRoZXNlIHNob3VsZCBub3QgbWF0Y2gKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjExCiAgICAvLyB0aGlzLnJlY2VpdmVNdXRhYmxlKG11dGFibGUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgcmVjZWl2ZU11dGFibGUKICAgIGZyYW1lX2J1cnkgLTIKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28ucmVjZWl2ZU11dGFibGUoYTogYnl0ZXMpIC0+IGJ5dGVzOgpyZWNlaXZlTXV0YWJsZToKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjIxCiAgICAvLyByZWNlaXZlTXV0YWJsZShhOiB1aW50NjRbXSkgewogICAgcHJvdG8gMSAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIyMgogICAgLy8gYVswXSA9IDEKICAgIGludGNfMCAvLyAxCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIHJlcGxhY2UyIDIKICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMQogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}