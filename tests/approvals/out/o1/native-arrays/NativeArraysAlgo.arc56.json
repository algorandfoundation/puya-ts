{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "readonlyArray",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        117
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        317
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1612
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        447,
                        521,
                        571,
                        626,
                        666,
                        838,
                        1001,
                        1180,
                        1382,
                        1525,
                        1581
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        574,
                        579,
                        1607
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        463,
                        667,
                        688,
                        718,
                        846,
                        1040,
                        1225,
                        1383
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAxMCA0IDAKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NWEwIDB4MTUxZjdjNzUwMDAzYTAgMHgxNTFmN2M3NTAwMDQwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0IDB4MDY4MTAxIDB4MDAwNTAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDA1CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBOYXRpdmVBcnJheXNBbGdvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDIzCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweDdkMzE4NTg5IDB4YjBhYzkwNjYgMHgwZjRjMTFjYSAweGFhYTI5ZjcwIDB4ZTJkNWUwMzUgMHgxM2E1ODhjOCAweGQ2ZWNjMWU2IDB4Nzg3YjUwYjIgMHhlYjg3YTA2NCAweGJjNjFkNmI4IDB4OGY1NDQ0NzMgMHg0M2U3ZWU0NSAweGNiZTNhNGY4IDB4MTQzZjIyM2IgMHhkOTg5NTQ0MiAweGUyMTNmNWI2IC8vIG1ldGhvZCAicmVhZG9ubHlBcnJheSgpdm9pZCIsIG1ldGhvZCAiYXJyYXlJbk9iamVjdCgpdm9pZCIsIG1ldGhvZCAiYnVpbGRBcnJheSgpdWludDY0W10iLCBtZXRob2QgImFycmF5RnJvbUN0b3IoKXVpbnQ2NFtdIiwgbWV0aG9kICJidWlsZFJlYWRvbmx5KCl1aW50NjRbXSIsIG1ldGhvZCAiZG9UaGluZ3MoKXZvaWQiLCBtZXRob2QgImZpeGVkQXJyYXkodWludDY0WzUwXSl2b2lkIiwgbWV0aG9kICJhcmM0SW50ZXJvcCgpdm9pZCIsIG1ldGhvZCAic3RydWN0cygodWludDY0LHVpbnQ2NCkpKHVpbnQ2NCx1aW50NjQpW10iLCBtZXRob2QgImJvb2xlYW5zKClib29sW10iLCBtZXRob2QgImJvb2xlYW5zU3RhdGljKCkoYm9vbCxib29sLGJvb2wpIiwgbWV0aG9kICJhcmM0Qm9vbGVhbnMoKWJvb2xbXSIsIG1ldGhvZCAiYXJjNEJvb2xlYW5zU3RhdGljKCkoYm9vbCxib29sLGJvb2wpIiwgbWV0aG9kICJhbGlhc2luZyh1aW50NjRbXSx1aW50NjRbXSl2b2lkIiwgbWV0aG9kICJyZWNlaXZlTXV0YWJsZSh1aW50NjRbXSl2b2lkIiwgbWV0aG9kICJyZWNlaXZlUmVhZG9ubHkodWludDY0W10pdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fcmVhZG9ubHlBcnJheV9yb3V0ZUA0IG1haW5fYXJyYXlJbk9iamVjdF9yb3V0ZUA1IG1haW5fYnVpbGRBcnJheV9yb3V0ZUA2IG1haW5fYXJyYXlGcm9tQ3Rvcl9yb3V0ZUA3IG1haW5fYnVpbGRSZWFkb25seV9yb3V0ZUA4IGRvVGhpbmdzIGZpeGVkQXJyYXkgbWFpbl9hcmM0SW50ZXJvcF9yb3V0ZUAxMSBzdHJ1Y3RzIG1haW5fYm9vbGVhbnNfcm91dGVAMTMgbWFpbl9ib29sZWFuc1N0YXRpY19yb3V0ZUAxNCBtYWluX2FyYzRCb29sZWFuc19yb3V0ZUAxNSBtYWluX2FyYzRCb29sZWFuc1N0YXRpY19yb3V0ZUAxNiBhbGlhc2luZyBtYWluX3JlY2VpdmVNdXRhYmxlX3JvdXRlQDE4IG1haW5fcmVjZWl2ZVJlYWRvbmx5X3JvdXRlQDE5CiAgICBlcnIKCm1haW5fcmVjZWl2ZVJlYWRvbmx5X3JvdXRlQDE5OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoyMjUKICAgIC8vIHJlY2VpdmVSZWFkb25seShhOiByZWFkb25seSB1aW50NjRbXSkge30KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVjZWl2ZU11dGFibGVfcm91dGVAMTg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIyMQogICAgLy8gcmVjZWl2ZU11dGFibGUoYTogdWludDY0W10pIHsKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNEJvb2xlYW5zU3RhdGljX3JvdXRlQDE2OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxOTEKICAgIC8vIGFyYzRCb29sZWFuc1N0YXRpYygpIHsKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NWEwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNEJvb2xlYW5zX3JvdXRlQDE1OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxODcKICAgIC8vIGFyYzRCb29sZWFucygpIHsKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NTAwMDNhMAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Jvb2xlYW5zU3RhdGljX3JvdXRlQDE0OgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxODMKICAgIC8vIGJvb2xlYW5zU3RhdGljKCkgewogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1YTAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9ib29sZWFuc19yb3V0ZUAxMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTc5CiAgICAvLyBib29sZWFucygpIHsKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NTAwMDNhMAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzRJbnRlcm9wX3JvdXRlQDExOgogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNTcKICAgIC8vIGFyYzRJbnRlcm9wKCkgewogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9idWlsZFJlYWRvbmx5X3JvdXRlQDg6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjM4CiAgICAvLyBidWlsZFJlYWRvbmx5KCk6IFJlYWRvbmx5QXJyYXk8dWludDY0PiB7CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUwMDA0MDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwNAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FycmF5RnJvbUN0b3Jfcm91dGVANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MzQKICAgIC8vIGFycmF5RnJvbUN0b3IoKTogQXJyYXk8dWludDY0PiB7CiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDMwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9idWlsZEFycmF5X3JvdXRlQDY6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjMwCiAgICAvLyBidWlsZEFycmF5KCk6IEFycmF5PHVpbnQ2ND4gewogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1MDAwNDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcnJheUluT2JqZWN0X3JvdXRlQDU6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIwCiAgICAvLyBhcnJheUluT2JqZWN0KCkgewogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZWFkb25seUFycmF5X3JvdXRlQDQ6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcKICAgIC8vIHJlYWRvbmx5QXJyYXkoKSB7CiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAyMzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE5hdGl2ZUFycmF5c0FsZ28gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyBfcHV5YV9saWIuYXJjNC5keW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplKGFycmF5OiBieXRlcywgZml4ZWRfYnl0ZV9zaXplOiB1aW50NjQpIC0+IGJ5dGVzLCBieXRlczoKZHluYW1pY19hcnJheV9wb3BfZml4ZWRfc2l6ZToKICAgIHByb3RvIDIgMgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMAogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBkdXAKICAgIGxlbgogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICBkdXAyCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QzCiAgICB1bmNvdmVyIDIKICAgIGludGNfMyAvLyAwCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIHJldHN1YgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uZG9UaGluZ3Nbcm91dGluZ10oKSAtPiB2b2lkOgpkb1RoaW5nczoKCmRvVGhpbmdzX3doaWxlX3RvcEAyOgogICAgcHVzaGludCAxNDEwIC8vIDE0MTAKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgID4KICAgIGJ6IGRvVGhpbmdzX2FmdGVyX3doaWxlQDcKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBieXRlY18zIC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgYnl0ZWNfMyAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQogICAgaW50Y18zIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgYiBkb1RoaW5nc193aGlsZV90b3BAMgoKZG9UaGluZ3NfYWZ0ZXJfd2hpbGVANzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NDYKICAgIC8vIGFyci5wdXNoKDUpCiAgICBwdXNoaW50IDUgLy8gNQogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDAwMDUwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwNQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0NwogICAgLy8gYXNzZXJ0KGFyci5wb3AoKSEgPT09IDUpCiAgICBwdXNoaW50IDggLy8gOAogICAgY2FsbHN1YiBkeW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplCiAgICBzd2FwCiAgICBidG9pCiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo0OAogICAgLy8gYXNzZXJ0TWF0Y2goYXJyLCBbMSwgMiwgMywgNF0pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZHVwCiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgIGRpZyAyCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDMKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgIGRpZyAxCiAgICAmJgogICAgZGlnIDQKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgJiYKICAgIGRpZyA0CiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDQKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1MQogICAgLy8gYXNzZXJ0KGFyclswXSA9PT0gMSkKICAgIGFzc2VydAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo1MgogICAgLy8gYXNzZXJ0KGFyci5hdCgtMSkhID09PSA0KQogICAgZGlnIDEKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBwdXNoaW50IDggLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjU1CiAgICAvLyBhcnIucHVzaChVaW50NjQoNSkpCiAgICBzd2FwCiAgICBkaWcgMgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NTcKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDQsIDVdKQogICAgZHVwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgZGlnIDEKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYwCiAgICAvLyBjb25zdCB0b3AgPSBhcnIucG9wKCkhCiAgICBwdXNoaW50IDggLy8gOAogICAgY2FsbHN1YiBkeW5hbWljX2FycmF5X3BvcF9maXhlZF9zaXplCiAgICBzd2FwCiAgICBidG9pCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjYxCiAgICAvLyBhc3NlcnQodG9wID09PSA1KQogICAgcHVzaGludCA1IC8vIDUKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NjMKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDIsIDMsIDRdKQogICAgZHVwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgZGlnIDEKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo2NgogICAgLy8gYXJyWzFdID0gMTAKICAgIGludGNfMSAvLyAxMAogICAgaXRvYgogICAgcmVwbGFjZTIgMTAgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjY4CiAgICAvLyBjb25zdCBhcnIyID0gYXJyLndpdGgoMSwgNSkKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMiAxMCAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzAKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0XSkKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgZGlnIDIKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMwogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIHVuY292ZXIgMgogICAgJiYKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzEgLy8gMTAKICAgID09CiAgICAmJgogICAgZGlnIDMKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgICYmCiAgICBkaWcgMwogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjcxCiAgICAvLyBhc3NlcnRNYXRjaChhcnIyLCBbMSwgNSwgMywgNF0pCiAgICBkaWcgMQogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgIGRpZyAyCiAgICBwdXNoaW50IDIgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBpbnRjXzEgLy8gMTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBkaWcgMgogICAgcHVzaGludCAxOCAvLyAxOAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgJiYKICAgIHVuY292ZXIgMgogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjc1CiAgICAvLyBhcnIgPSBhcnIuY29uY2F0KGFycikuY29uY2F0KDExKS5jb25jYXQodDEpCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICByZXBsYWNlMiAwCiAgICBwdXNoaW50IDExIC8vIDExCiAgICBpdG9iCiAgICBkaWcgMQogICAgc3dhcAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBzd2FwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo3NAogICAgLy8gY29uc3QgdDE6IFt1aW50NjQsIHVpbnQ2NF0gPSBbMTIsIDEzXQogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMGQKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzUKICAgIC8vIGFyciA9IGFyci5jb25jYXQoYXJyKS5jb25jYXQoMTEpLmNvbmNhdCh0MSkKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6NzYKICAgIC8vIGFzc2VydE1hdGNoKGFyciwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgIGRpZyAxCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDIKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICB1bmNvdmVyIDIKICAgICYmCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDIKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMgogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDIKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMgogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDIKICAgIHB1c2hpbnQgNzQgLy8gNzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo4MwogICAgLy8gY29uc3QgZkFycjEgPSBuZXcgRml4ZWRBcnJheTx1aW50NjQsIDQ+KCkKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGJ6ZXJvCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjgwCiAgICAvLyByQXJyMSA9IFsuLi5yQXJyMSwgVWludDY0KDUpXQogICAgYnl0ZWMgNCAvLyAweDAwMDUwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwNQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5MQogICAgLy8gY29uc3QgYXJyNCA9IHJBcnIxLmNvbmNhdChhcnIpCiAgICBkaWcgMgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czo5MgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyNCwgWzEsIDIsIDMsIDQsIDUsIDEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxM10pCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPT0KICAgIGRpZyAxCiAgICBwdXNoaW50IDIgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBpbnRjXzEgLy8gMTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDIgLy8gMgogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxOCAvLyAxOAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDI2IC8vIDI2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18yIC8vIDQKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMzQgLy8gMzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA0MiAvLyA0MgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDU4IC8vIDU4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNjYgLy8gNjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA3NCAvLyA3NAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDkwIC8vIDkwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgOTggLy8gOTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxMDYgLy8gMTA2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMSAvLyAxMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxMTQgLy8gMTE0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMiAvLyAxMgogICAgPT0KICAgICYmCiAgICBzd2FwCiAgICBwdXNoaW50IDEyMiAvLyAxMjIKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEzIC8vIDEzCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjk3CiAgICAvLyBjb25zdCBhcnI2ID0gZkFycjEuY29uY2F0KGFycikKICAgIHB1c2hieXRlcyAweDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZHVwCiAgICBleHRyYWN0IDIgMAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6OTgKICAgIC8vIGFzc2VydE1hdGNoKGFycjYsIFswLCAwLCAwLCAwLCAxLCAxMCwgMywgNCwgMSwgMTAsIDMsIDQsIDExLCAxMiwgMTNdKQogICAgZHVwCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgMTUgLy8gMTUKICAgID09CiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICAhCiAgICAmJgogICAgZGlnIDEKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxOCAvLyAxOAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAyNiAvLyAyNgogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDc0IC8vIDc0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgOTAgLy8gOTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5OCAvLyA5OAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMTA2IC8vIDEwNgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgID09CiAgICAmJgogICAgc3dhcAogICAgcHVzaGludCAxMTQgLy8gMTE0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IGFycjcgPSBhcnIuY29uY2F0KHJBcnIxKQogICAgZGlnIDEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6OTQKICAgIC8vIGNvbnN0IGFycjUgPSBmQXJyMS5jb25jYXQockFycjEpCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwNQogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IGFycjcgPSBhcnIuY29uY2F0KHJBcnIxKQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDEKICAgIC8vIGFzc2VydChhcnI3Lmxlbmd0aCA9PT0gMTYpCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPT0KICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwMgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyNywgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxMywgMSwgMiwgMywgNCwgNV0pCiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNzQgLy8gNzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5MCAvLyA5MAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDk4IC8vIDk4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMTA2IC8vIDEwNgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDExNCAvLyAxMTQKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBzd2FwCiAgICBwdXNoaW50IDEyMiAvLyAxMjIKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDQKICAgIC8vIGNvbnN0IGFycjggPSBhcnIuY29uY2F0KGZBcnIxKQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxMDUKICAgIC8vIGFzc2VydChhcnI4Lmxlbmd0aCA9PT0gMTUpCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxNSAvLyAxNQogICAgPT0KICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwNgogICAgLy8gYXNzZXJ0TWF0Y2goYXJyOCwgWzEsIDEwLCAzLCA0LCAxLCAxMCwgMywgNCwgMTEsIDEyLCAxMywgMCwgMCwgMCwgMF0pCiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAzNCAvLyAzNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEwCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNTggLy8gNTgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gNAogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA2NiAvLyA2NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMTEgLy8gMTEKICAgID09CiAgICAmJgogICAgZGlnIDEKICAgIHB1c2hpbnQgNzQgLy8gNzQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICA9PQogICAgJiYKICAgIGRpZyAxCiAgICBwdXNoaW50IDgyIC8vIDgyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAxMyAvLyAxMwogICAgPT0KICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5MCAvLyA5MAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCA5OCAvLyA5OAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICBkaWcgMQogICAgcHVzaGludCAxMDYgLy8gMTA2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgIQogICAgJiYKICAgIHN3YXAKICAgIHB1c2hpbnQgMTE0IC8vIDExNAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgICYmCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjQyCiAgICAvLyBkb1RoaW5ncygpIHsKICAgIHJldHVybiAvLyBvbiBlcnJvcjogYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uZml4ZWRBcnJheVtyb3V0aW5nXSgpIC0+IHZvaWQ6CmZpeGVkQXJyYXk6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjEwOQogICAgLy8gZml4ZWRBcnJheSh5OiBGaXhlZEFycmF5PHVpbnQ2NCwgNTA+KSB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjExOQogICAgLy8gYXNzZXJ0KHhbMF0gPT09IHlbMF0pCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTA5CiAgICAvLyBmaXhlZEFycmF5KHk6IEZpeGVkQXJyYXk8dWludDY0LCA1MD4pIHsKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uc3RydWN0c1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnN0cnVjdHM6CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3MAogICAgLy8gc3RydWN0cyh7IHgsIHkgfTogVmVjdG9yKSB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE3MwogICAgLy8gbXlWZWN0b3JzID0gW3sgeCwgeSB9XQogICAgZGlnIDEKICAgIGl0b2IKICAgIGRpZyAxCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwMDEKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gdGVzdHMvYXBwcm92YWxzL25hdGl2ZS1hcnJheXMuYWxnby50czoxNzUKICAgIC8vIGFzc2VydE1hdGNoKG15VmVjdG9ycywgW3sgeCwgeSB9XSkKICAgIGR1cAogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGRpZyAxCiAgICBleHRyYWN0IDIgMTYKICAgIGR1cAogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICB1bmNvdmVyIDUKICAgID09CiAgICBzd2FwCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgNAogICAgPT0KICAgICYmCiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTcwCiAgICAvLyBzdHJ1Y3RzKHsgeCwgeSB9OiBWZWN0b3IpIHsKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6Ok5hdGl2ZUFycmF5c0FsZ28uYWxpYXNpbmdbcm91dGluZ10oKSAtPiB2b2lkOgphbGlhc2luZzoKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MTk1CiAgICAvLyBhbGlhc2luZyhtdXRhYmxlOiB1aW50NjRbXSwgcmVhZE9ubHk6IHJlYWRvbmx5IHVpbnQ2NFtdKSB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjIwNgogICAgLy8gbXV0YWJsZVsxXSArPSAyCiAgICBkdXAKICAgIGludGNfMSAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGl0b2IKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgcmVwbGFjZTIgMTAgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzEgLy8gMTAKICAgIC8vIHRlc3RzL2FwcHJvdmFscy9uYXRpdmUtYXJyYXlzLmFsZ28udHM6MjA4CiAgICAvLyBhc3NlcnQobXV0YWJsZVsxXSAhPT0gbmVlZENsb25lMlsxXSwgJ1RoZXNlIHNob3VsZCBub3QgbWF0Y2gnKQogICAgZXh0cmFjdF91aW50NjQKICAgICE9CiAgICAvLyB0ZXN0cy9hcHByb3ZhbHMvbmF0aXZlLWFycmF5cy5hbGdvLnRzOjE5NQogICAgLy8gYWxpYXNpbmcobXV0YWJsZTogdWludDY0W10sIHJlYWRPbmx5OiByZWFkb25seSB1aW50NjRbXSkgewogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBUaGVzZSBzaG91bGQgbm90IG1hdGNoCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}