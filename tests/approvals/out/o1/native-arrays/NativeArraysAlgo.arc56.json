{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "arrayInObject",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arrayFromCtor",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buildReadonly",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixedArray",
            "args": [
                {
                    "type": "uint64[50]",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "booleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Booleans",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4BooleansStatic",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "aliasing",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "mutable"
                },
                {
                    "type": "uint64[]",
                    "name": "readOnly"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveMutable",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "receiveReadonly",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        184,
                        193,
                        209,
                        227,
                        238,
                        249,
                        260,
                        271,
                        295,
                        304,
                        319,
                        331,
                        342,
                        384,
                        395
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1182
                    ],
                    "errorMessage": "These should not match"
                },
                {
                    "pc": [
                        560,
                        666,
                        733,
                        799,
                        851,
                        1050,
                        1149
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        409
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        187,
                        196,
                        212,
                        230,
                        241,
                        252,
                        263,
                        274,
                        298,
                        307,
                        322,
                        334,
                        345,
                        387,
                        398
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        592,
                        858,
                        879,
                        909
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAECiYDBRUffHWgBxUffHUAA6AmFR98dQAEAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAQxG0EBToIPBLCskGYED0wRygSqop9wBOLV4DUEE6WIyATW7MHmBHh7ULIE64egZAS8Yda4BI9URHMEQ+fuRQTL46T4BBQ/IjsE2YlUQgTiE/W2NhoAjg8A1QDKAKAAlQCJAHoAcQBZAE4AQwA4AC0AGwALAAIjQzEZFEQxGEQiQzEZFEQxGEQ2GgGIA9xIIkMxGRREMRhENhoBNhoCiAOpIkMxGRREMRhEKLAiQzEZFEQxGEQpsCJDMRkURDEYRCiwIkMxGRREMRhEKbAiQzEZFEQxGEQ2GgGIAyWABBUffHVMULAiQzEZFEQxGEQiQzEZFEQxGEQ2GgGIAvoiQzEZFEQxGESIAHgiQzEZFEQxGEQqsCJDMRkURDEYRIAeFR98dQADAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAADsCJDMRkURDEYRCqwIkMxGRREMRhEIkMxGUD/HTEYFEQiQ4oCAov+I1kiCRZXBgCL/kxcAEkVi/8JSov/WE8CI08DUomKAAAjgQUWgCoABQAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAWBCIj/pklPAheBBRJEI1lJJBJBAiqLAoECWyISQQIgiwIlW4ECEkECFosCgRJbgQMSQQILiwKBGlskEkECASJEiwJJVwIASwGBAlsiEkSLA0lOAiIJgQgLWyQSREyLAVBMIggWVwYCXABJjAIjWYEFEkEBx4sCgQJbIhJBAb2LAiVbgQISQQGziwKBEluBAxJBAaiLAoEaWyQSQQGeiwKBIluBBRJBAZMiRIsCgQiI/vpJTgKMAheBBRJEI1kkEkEBdYsCgQJbIhJBAWuLAiVbgQISQQFhiwKBEluBAxJBAVaLAoEaWyQSQQFMIkQlFosCTFwKSYwCSYsBXAqMACNZJBJBAS6LAoECWyISQQEkiwIlWyUSQQEbiwKBEluBAxJBARCLAoEaWyQSQQEGIkSLACNZJBJBAPeLAIECWyISQQDtiwAlW4EFEkEA44sAgRJbgQMSQQDYiwCBGlskEkEAziJEiwJJVwIAUElXAgAVgQgKFlcGAlwAgQsWSwFMUEwjWSIIFlcGAlwAgBAAAAAAAAAADAAAAAAAAAANUElXAgAVgQgKFlcGAlwASYwCI1mBCxJBAHWLAoECWyISQQBriwIlWyUSQQBiiwKBEluBAxJBAFeLAoEaWyQSQQBNiwKBIlsiEkEAQ4sCgSpbJRJBADmLAoEyW4EDEkEALosCgTpbJBJBACSLAoFCW4ELEkEAGYsCgUpbgQwSQQAOiwKBUluBDRJBAAMiRIkjQv/6I0L/LyNC/vcjQv6xI0L+aiNC/fyKAQCL/yNbFESJigEBI4v/I1tJi/+BCFtJTwIWTBZQgAIAAUxQSSNZIhJBACKLA1cCEEmMACNbiwESQQASiwCBCFuLAhJBAAciRIsDjACJI0L/9ooCAIv+JVtJgQIIFov+TFwKSYz+JVsTRIv+iAADjP6JigEBIhaL/0xcAkmM/4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}