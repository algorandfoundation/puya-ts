main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@3, method "doThings()void" => block@4, method "arc4Interop()void" => block@5, method "structs((uint64,uint64))(uint64,uint64)[]" => block@6, method "booleans()bool[]" => block@7, method "booleansStatic()(bool,bool,bool)" => block@8, method "arc4Booleans()bool[]" => block@9, method "arc4BooleansStatic()(bool,bool,bool)" => block@10, * => block@17}
    block@3: // buildArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@18
    block@4: // doThings_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@18
    block@5: // arc4Interop_route_L42
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@18
    block@6: // structs_route_L54
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let array%item0%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let array%item1%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        let tmp%23#0: Encoded(len+(uint64,uint64)[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(array%item0%0#1, array%item1%0#1)
        let tmp%24#0: bytes = (concat 0x151f7c75 tmp%23#0)
        (log tmp%24#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@18
    block@7: // booleans_route_L63
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        (log 0x151f7c750003a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@18
    block@8: // booleansStatic_route_L67
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@18
    block@9: // arc4Booleans_route_L71
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        (log 0x151f7c750003a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@18
    block@10: // arc4BooleansStatic_route_L75
        let tmp%46#0: uint64 = (txn OnCompletion)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // OnCompletion is not NoOp
        let tmp%48#0: uint64 = (txn ApplicationID)
        (assert tmp%48#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@18
    block@13: // bare_routing_L6
        let tmp%55#0: uint64 = (txn OnCompletion)
        goto tmp%55#0 ? block@17 : block@14
    block@14: // __algots__.defaultCreate_L6
        let tmp%56#0: uint64 = (txn ApplicationID)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@18
    block@17: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9: bool = 0u
        goto block@18
    block@18: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8 <- block@14, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9 <- block@17)
        return tmp%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p.x: uint64, p.y: uint64) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L54
        let array%val_as_bytes%0#1: bytes[8] = (itob p.x#0)
        let array%val_as_bytes%1#1: bytes[8] = (itob p.y#0)
        let array%encoded%3#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%0#1 array%val_as_bytes%1#1)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = (concat 0x0001 array%encoded%3#1)
        let array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%0#0: bool = (== array_length%0#0 1u)
        goto tmp%0#0 ? block@1 : block@4
    block@1: // and_contd_L59
        let array%encoded_element%0#1: bytes = ((extract 2 16) myVectors#1)
        let array%item0%0#1: uint64 = (extract_uint64 array%encoded_element%0#1 0u)
        let tmp%3#0: bool = (== array%item0%0#1 p.x#0)
        goto tmp%3#0 ? block@2 : block@4
    block@2: // and_contd_L59
        let array%item1%1#1: uint64 = (extract_uint64 array%encoded_element%0#1 8u)
        let tmp%6#0: bool = (== array%item1%1#1 p.y#0)
        goto tmp%6#0 ? block@3 : block@4
    block@3: // bool_true_L59
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L59
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L59
        let and_result%0#2: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return myVectors#1