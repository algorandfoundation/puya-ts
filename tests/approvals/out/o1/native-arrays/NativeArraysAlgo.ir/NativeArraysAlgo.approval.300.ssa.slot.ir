main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@23
    block@2: // abi_routing_L6
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "readonlyArray()void" => block@4, method "arrayInObject()void" => block@5, method "buildArray()uint64[]" => block@6, method "arrayFromCtor()uint64[]" => block@7, method "buildReadonly()uint64[]" => block@8, method "doThings()void" => block@9, method "fixedArray(uint64[50])void" => block@10, method "arc4Interop()void" => block@11, method "structs((uint64,uint64))(uint64,uint64)[]" => block@12, method "booleans()bool[]" => block@13, method "booleansStatic()(bool,bool,bool)" => block@14, method "arc4Booleans()bool[]" => block@15, method "arc4BooleansStatic()(bool,bool,bool)" => block@16, method "aliasing(uint64[],uint64[])void" => block@17, method "receiveMutable(uint64[])void" => block@18, method "receiveReadonly(uint64[])void" => block@19, * => block@22}
    block@4: // readonlyArray_route_L7
        exit 1u
    block@5: // arrayInObject_route_L20
        exit 1u
    block@6: // buildArray_route_L30
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        exit 1u
    block@7: // arrayFromCtor_route_L34
        (log 0x151f7c750003000000000000000100000000000000020000000000000003)
        exit 1u
    block@8: // buildReadonly_route_L38
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        exit 1u
    block@9: // doThings_route_L42
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings[routing]()
        goto block@22
    block@10: // fixedArray_route_L109
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray[routing]()
        goto block@22
    block@11: // arc4Interop_route_L157
        exit 1u
    block@12: // structs_route_L170
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs[routing]()
        goto block@22
    block@13: // booleans_route_L179
        (log 0x151f7c750003a0)
        exit 1u
    block@14: // booleansStatic_route_L183
        (log 0x151f7c75a0)
        exit 1u
    block@15: // arc4Booleans_route_L187
        (log 0x151f7c750003a0)
        exit 1u
    block@16: // arc4BooleansStatic_route_L191
        (log 0x151f7c75a0)
        exit 1u
    block@17: // aliasing_route_L195
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing[routing]()
        goto block@22
    block@18: // receiveMutable_route_L221
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable[routing]()
        goto block@22
    block@19: // receiveReadonly_route_L225
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly[routing]()
        goto block@22
    block@22: // after_if_else_L6
        fail
    block@23: // __algots__.defaultCreate_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L46
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings[routing]() -> void:
    block@2: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 1410u tmp%1#1)
        goto tmp%2#0 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 5u)
        let (tmp%3#0: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005, 8u)
        let tmp%5#0: uint64 = (btoi tmp%3#0)
        let tmp%6#0: bool = (== tmp%5#0 5u)
        (assert tmp%6#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#2 0u) // on error: invalid array length header
        let tmp%8#0: bool = (== aggregate%array_length%0#0 4u)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) arr#2)
        let values%0#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%9#0: bool = (== values%0#0 1u)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let values%1#0: uint64 = (extract_uint64 arr#2 10u)
        let tmp%11#0: bool = (== values%1#0 2u)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let values%2#0: uint64 = (extract_uint64 arr#2 18u)
        let tmp%13#0: bool = (== values%2#0 3u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        let values%3#0: uint64 = (extract_uint64 arr#2 26u)
        let tmp%15#0: bool = (== values%3#0 4u)
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // assert target is match for conditions
        (assert tmp%9#0)
        let tmp%19#0: uint64 = (- aggregate%array_length%0#0 1u)
        let aggregate%bytes_offset%4#0: uint64 = (* tmp%19#0 8u)
        let values%5#0: uint64 = (extract_uint64 aggregate%array_trimmed%0#0 aggregate%bytes_offset%4#0)
        let tmp%20#0: bool = (== values%5#0 4u)
        (assert tmp%20#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#3: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#3 0u) // on error: invalid array length header
        let tmp%24#0: bool = (== aggregate%array_length%2#0 5u)
        let values%6#0: uint64 = (extract_uint64 arr#3 2u)
        let tmp%25#0: bool = (== values%6#0 1u)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        let values%7#0: uint64 = (extract_uint64 arr#3 10u)
        let tmp%27#0: bool = (== values%7#0 2u)
        let tmp%28#0: bool = (&& tmp%26#0 tmp%27#0)
        let values%8#0: uint64 = (extract_uint64 arr#3 18u)
        let tmp%29#0: bool = (== values%8#0 3u)
        let tmp%30#0: bool = (&& tmp%28#0 tmp%29#0)
        let values%9#0: uint64 = (extract_uint64 arr#3 26u)
        let tmp%31#0: bool = (== values%9#0 4u)
        let tmp%32#0: bool = (&& tmp%30#0 tmp%31#0)
        let values%10#0: uint64 = (extract_uint64 arr#3 34u)
        let tmp%33#0: bool = (== values%10#0 5u)
        let tmp%34#0: bool = (&& tmp%32#0 tmp%33#0)
        (assert tmp%34#0) // assert target is match for conditions
        let (tmp%35#0: bytes, arr#4: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#3, 8u)
        let top#0: uint64 = (btoi tmp%35#0)
        let tmp%38#0: bool = (== top#0 5u)
        (assert tmp%38#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#4 0u) // on error: invalid array length header
        let tmp%40#0: bool = (== aggregate%array_length%3#0 4u)
        let values%11#0: uint64 = (extract_uint64 arr#4 2u)
        let tmp%41#0: bool = (== values%11#0 1u)
        let tmp%42#0: bool = (&& tmp%40#0 tmp%41#0)
        let values%12#0: uint64 = (extract_uint64 arr#4 10u)
        let tmp%43#0: bool = (== values%12#0 2u)
        let tmp%44#0: bool = (&& tmp%42#0 tmp%43#0)
        let values%13#0: uint64 = (extract_uint64 arr#4 18u)
        let tmp%45#0: bool = (== values%13#0 3u)
        let tmp%46#0: bool = (&& tmp%44#0 tmp%45#0)
        let values%14#0: uint64 = (extract_uint64 arr#4 26u)
        let tmp%47#0: bool = (== values%14#0 4u)
        let tmp%48#0: bool = (&& tmp%46#0 tmp%47#0)
        (assert tmp%48#0) // assert target is match for conditions
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 10u)
        let arr#5: Encoded(len+uint64[]) = ((replace2 10) arr#4 aggregate%val_as_bytes%1#0) // on error: index access is out of bounds
        let arr2#0: Encoded(len+uint64[]) = ((replace2 10) arr#5 aggregate%val_as_bytes%0#0) // on error: index access is out of bounds
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#5 0u) // on error: invalid array length header
        let tmp%50#0: bool = (== aggregate%array_length%4#0 4u)
        let aggregate%array_trimmed%16#0: bytes = ((extract 2 0) arr#5)
        let values%15#0: uint64 = (extract_uint64 arr#5 2u)
        let tmp%51#0: bool = (== values%15#0 1u)
        let tmp%52#0: bool = (&& tmp%50#0 tmp%51#0)
        let values%16#0: uint64 = (extract_uint64 arr#5 10u)
        let tmp%53#0: bool = (== values%16#0 10u)
        let tmp%54#0: bool = (&& tmp%52#0 tmp%53#0)
        let values%17#0: uint64 = (extract_uint64 arr#5 18u)
        let tmp%55#0: bool = (== values%17#0 3u)
        let tmp%56#0: bool = (&& tmp%54#0 tmp%55#0)
        let values%18#0: uint64 = (extract_uint64 arr#5 26u)
        let tmp%57#0: bool = (== values%18#0 4u)
        let tmp%58#0: bool = (&& tmp%56#0 tmp%57#0)
        (assert tmp%58#0) // assert target is match for conditions
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr2#0 0u) // on error: invalid array length header
        let tmp%60#0: bool = (== aggregate%array_length%5#0 4u)
        let values%19#0: uint64 = (extract_uint64 arr2#0 2u)
        let tmp%61#0: bool = (== values%19#0 1u)
        let tmp%62#0: bool = (&& tmp%60#0 tmp%61#0)
        let values%20#0: uint64 = (extract_uint64 arr2#0 10u)
        let tmp%63#0: bool = (== values%20#0 5u)
        let tmp%64#0: bool = (&& tmp%62#0 tmp%63#0)
        let values%21#0: uint64 = (extract_uint64 arr2#0 18u)
        let tmp%65#0: bool = (== values%21#0 3u)
        let tmp%66#0: bool = (&& tmp%64#0 tmp%65#0)
        let values%22#0: uint64 = (extract_uint64 arr2#0 26u)
        let tmp%67#0: bool = (== values%22#0 4u)
        let tmp%68#0: bool = (&& tmp%66#0 tmp%67#0)
        (assert tmp%68#0) // assert target is match for conditions
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#5 aggregate%array_trimmed%16#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 11u)
        let concat%3#0: Encoded(len+uint64[]) = (concat replace%2#0 aggregate%val_as_bytes%5#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 replace%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat replace%3#0 0x000000000000000c000000000000000d) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr#6: Encoded(len+uint64[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#6 0u) // on error: invalid array length header
        let tmp%72#0: bool = (== aggregate%array_length%6#0 11u)
        let aggregate%array_trimmed%24#0: bytes = ((extract 2 0) arr#6)
        let values%23#0: uint64 = (extract_uint64 arr#6 2u)
        let tmp%73#0: bool = (== values%23#0 1u)
        let tmp%74#0: bool = (&& tmp%72#0 tmp%73#0)
        let values%24#0: uint64 = (extract_uint64 arr#6 10u)
        let tmp%75#0: bool = (== values%24#0 10u)
        let tmp%76#0: bool = (&& tmp%74#0 tmp%75#0)
        let values%25#0: uint64 = (extract_uint64 arr#6 18u)
        let tmp%77#0: bool = (== values%25#0 3u)
        let tmp%78#0: bool = (&& tmp%76#0 tmp%77#0)
        let values%26#0: uint64 = (extract_uint64 arr#6 26u)
        let tmp%79#0: bool = (== values%26#0 4u)
        let tmp%80#0: bool = (&& tmp%78#0 tmp%79#0)
        let values%27#0: uint64 = (extract_uint64 arr#6 34u)
        let tmp%81#0: bool = (== values%27#0 1u)
        let tmp%82#0: bool = (&& tmp%80#0 tmp%81#0)
        let values%28#0: uint64 = (extract_uint64 arr#6 42u)
        let tmp%83#0: bool = (== values%28#0 10u)
        let tmp%84#0: bool = (&& tmp%82#0 tmp%83#0)
        let values%29#0: uint64 = (extract_uint64 arr#6 50u)
        let tmp%85#0: bool = (== values%29#0 3u)
        let tmp%86#0: bool = (&& tmp%84#0 tmp%85#0)
        let values%30#0: uint64 = (extract_uint64 arr#6 58u)
        let tmp%87#0: bool = (== values%30#0 4u)
        let tmp%88#0: bool = (&& tmp%86#0 tmp%87#0)
        let values%31#0: uint64 = (extract_uint64 arr#6 66u)
        let tmp%89#0: bool = (== values%31#0 11u)
        let tmp%90#0: bool = (&& tmp%88#0 tmp%89#0)
        let values%32#0: uint64 = (extract_uint64 arr#6 74u)
        let tmp%91#0: bool = (== values%32#0 12u)
        let tmp%92#0: bool = (&& tmp%90#0 tmp%91#0)
        let values%33#0: uint64 = (extract_uint64 arr#6 82u)
        let tmp%93#0: bool = (== values%33#0 13u)
        let tmp%94#0: bool = (&& tmp%92#0 tmp%93#0)
        (assert tmp%94#0) // assert target is match for conditions
        let fArr1#0: Encoded(uint64[4]) = (bzero 32u)
        let concat%9#0: Encoded(len+uint64[]) = (concat 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005 aggregate%array_trimmed%24#0) // on error: max array length exceeded
        let extract_to_end%9#0: bytes = ((extract 2 0) concat%9#0)
        let len%5#0: uint64 = (len extract_to_end%9#0)
        let div_floor%5#0: uint64 = (/ len%5#0 8u)
        let as_bytes%10#0: bytes[8] = (itob div_floor%5#0)
        let as_u16_bytes%10#0: bytes = ((extract 6 2) as_bytes%10#0)
        let arr4#0: Encoded(len+uint64[]) = ((replace2 0) concat%9#0 as_u16_bytes%10#0)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 arr4#0 0u) // on error: invalid array length header
        let tmp%173#0: bool = (== aggregate%array_length%10#0 16u)
        let values%64#0: uint64 = (extract_uint64 arr4#0 2u)
        let tmp%174#0: bool = (== values%64#0 1u)
        let tmp%175#0: bool = (&& tmp%173#0 tmp%174#0)
        let values%65#0: uint64 = (extract_uint64 arr4#0 10u)
        let tmp%176#0: bool = (== values%65#0 2u)
        let tmp%177#0: bool = (&& tmp%175#0 tmp%176#0)
        let values%66#0: uint64 = (extract_uint64 arr4#0 18u)
        let tmp%178#0: bool = (== values%66#0 3u)
        let tmp%179#0: bool = (&& tmp%177#0 tmp%178#0)
        let values%67#0: uint64 = (extract_uint64 arr4#0 26u)
        let tmp%180#0: bool = (== values%67#0 4u)
        let tmp%181#0: bool = (&& tmp%179#0 tmp%180#0)
        let values%68#0: uint64 = (extract_uint64 arr4#0 34u)
        let tmp%182#0: bool = (== values%68#0 5u)
        let tmp%183#0: bool = (&& tmp%181#0 tmp%182#0)
        let values%69#0: uint64 = (extract_uint64 arr4#0 42u)
        let tmp%184#0: bool = (== values%69#0 1u)
        let tmp%185#0: bool = (&& tmp%183#0 tmp%184#0)
        let values%70#0: uint64 = (extract_uint64 arr4#0 50u)
        let tmp%186#0: bool = (== values%70#0 10u)
        let tmp%187#0: bool = (&& tmp%185#0 tmp%186#0)
        let values%71#0: uint64 = (extract_uint64 arr4#0 58u)
        let tmp%188#0: bool = (== values%71#0 3u)
        let tmp%189#0: bool = (&& tmp%187#0 tmp%188#0)
        let values%72#0: uint64 = (extract_uint64 arr4#0 66u)
        let tmp%190#0: bool = (== values%72#0 4u)
        let tmp%191#0: bool = (&& tmp%189#0 tmp%190#0)
        let values%73#0: uint64 = (extract_uint64 arr4#0 74u)
        let tmp%192#0: bool = (== values%73#0 1u)
        let tmp%193#0: bool = (&& tmp%191#0 tmp%192#0)
        let values%74#0: uint64 = (extract_uint64 arr4#0 82u)
        let tmp%194#0: bool = (== values%74#0 10u)
        let tmp%195#0: bool = (&& tmp%193#0 tmp%194#0)
        let values%75#0: uint64 = (extract_uint64 arr4#0 90u)
        let tmp%196#0: bool = (== values%75#0 3u)
        let tmp%197#0: bool = (&& tmp%195#0 tmp%196#0)
        let values%76#0: uint64 = (extract_uint64 arr4#0 98u)
        let tmp%198#0: bool = (== values%76#0 4u)
        let tmp%199#0: bool = (&& tmp%197#0 tmp%198#0)
        let values%77#0: uint64 = (extract_uint64 arr4#0 106u)
        let tmp%200#0: bool = (== values%77#0 11u)
        let tmp%201#0: bool = (&& tmp%199#0 tmp%200#0)
        let values%78#0: uint64 = (extract_uint64 arr4#0 114u)
        let tmp%202#0: bool = (== values%78#0 12u)
        let tmp%203#0: bool = (&& tmp%201#0 tmp%202#0)
        let values%79#0: uint64 = (extract_uint64 arr4#0 122u)
        let tmp%204#0: bool = (== values%79#0 13u)
        let tmp%205#0: bool = (&& tmp%203#0 tmp%204#0)
        (assert tmp%205#0) // assert target is match for conditions
        let concat%11#0: Encoded(len+uint64[]) = (concat 0x00040000000000000000000000000000000000000000000000000000000000000000 aggregate%array_trimmed%24#0) // on error: max array length exceeded
        let extract_to_end%13#0: bytes = ((extract 2 0) concat%11#0)
        let len%7#0: uint64 = (len extract_to_end%13#0)
        let div_floor%7#0: uint64 = (/ len%7#0 8u)
        let as_bytes%14#0: bytes[8] = (itob div_floor%7#0)
        let as_u16_bytes%14#0: bytes = ((extract 6 2) as_bytes%14#0)
        let arr6#0: Encoded(len+uint64[]) = ((replace2 0) concat%11#0 as_u16_bytes%14#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 arr6#0 0u) // on error: invalid array length header
        let tmp%229#0: bool = (== aggregate%array_length%12#0 15u)
        let values%89#0: uint64 = (extract_uint64 arr6#0 2u)
        let tmp%230#0: bool = (! values%89#0)
        let tmp%231#0: bool = (&& tmp%229#0 tmp%230#0)
        let values%90#0: uint64 = (extract_uint64 arr6#0 10u)
        let tmp%232#0: bool = (! values%90#0)
        let tmp%233#0: bool = (&& tmp%231#0 tmp%232#0)
        let values%91#0: uint64 = (extract_uint64 arr6#0 18u)
        let tmp%234#0: bool = (! values%91#0)
        let tmp%235#0: bool = (&& tmp%233#0 tmp%234#0)
        let values%92#0: uint64 = (extract_uint64 arr6#0 26u)
        let tmp%236#0: bool = (! values%92#0)
        let tmp%237#0: bool = (&& tmp%235#0 tmp%236#0)
        let values%93#0: uint64 = (extract_uint64 arr6#0 34u)
        let tmp%238#0: bool = (== values%93#0 1u)
        let tmp%239#0: bool = (&& tmp%237#0 tmp%238#0)
        let values%94#0: uint64 = (extract_uint64 arr6#0 42u)
        let tmp%240#0: bool = (== values%94#0 10u)
        let tmp%241#0: bool = (&& tmp%239#0 tmp%240#0)
        let values%95#0: uint64 = (extract_uint64 arr6#0 50u)
        let tmp%242#0: bool = (== values%95#0 3u)
        let tmp%243#0: bool = (&& tmp%241#0 tmp%242#0)
        let values%96#0: uint64 = (extract_uint64 arr6#0 58u)
        let tmp%244#0: bool = (== values%96#0 4u)
        let tmp%245#0: bool = (&& tmp%243#0 tmp%244#0)
        let values%97#0: uint64 = (extract_uint64 arr6#0 66u)
        let tmp%246#0: bool = (== values%97#0 1u)
        let tmp%247#0: bool = (&& tmp%245#0 tmp%246#0)
        let values%98#0: uint64 = (extract_uint64 arr6#0 74u)
        let tmp%248#0: bool = (== values%98#0 10u)
        let tmp%249#0: bool = (&& tmp%247#0 tmp%248#0)
        let values%99#0: uint64 = (extract_uint64 arr6#0 82u)
        let tmp%250#0: bool = (== values%99#0 3u)
        let tmp%251#0: bool = (&& tmp%249#0 tmp%250#0)
        let values%100#0: uint64 = (extract_uint64 arr6#0 90u)
        let tmp%252#0: bool = (== values%100#0 4u)
        let tmp%253#0: bool = (&& tmp%251#0 tmp%252#0)
        let values%101#0: uint64 = (extract_uint64 arr6#0 98u)
        let tmp%254#0: bool = (== values%101#0 11u)
        let tmp%255#0: bool = (&& tmp%253#0 tmp%254#0)
        let values%102#0: uint64 = (extract_uint64 arr6#0 106u)
        let tmp%256#0: bool = (== values%102#0 12u)
        let tmp%257#0: bool = (&& tmp%255#0 tmp%256#0)
        let values%103#0: uint64 = (extract_uint64 arr6#0 114u)
        let tmp%258#0: bool = (== values%103#0 13u)
        let tmp%259#0: bool = (&& tmp%257#0 tmp%258#0)
        (assert tmp%259#0) // assert target is match for conditions
        let concat%12#0: Encoded(len+uint64[]) = (concat arr#6 0x00000000000000010000000000000002000000000000000300000000000000040000000000000005) // on error: max array length exceeded
        let extract_to_end%15#0: bytes = ((extract 2 0) concat%12#0)
        let len%8#0: uint64 = (len extract_to_end%15#0)
        let div_floor%8#0: uint64 = (/ len%8#0 8u)
        let as_bytes%15#0: bytes[8] = (itob div_floor%8#0)
        let as_u16_bytes%15#0: bytes = ((extract 6 2) as_bytes%15#0)
        let arr7#0: Encoded(len+uint64[]) = ((replace2 0) concat%12#0 as_u16_bytes%15#0)
        let aggregate%array_length%13#0: uint64 = (extract_uint16 arr7#0 0u) // on error: invalid array length header
        let tmp%261#0: bool = (== aggregate%array_length%13#0 16u)
        (assert tmp%261#0)
        let values%104#0: uint64 = (extract_uint64 arr7#0 2u)
        let tmp%264#0: bool = (== values%104#0 1u)
        let tmp%265#0: bool = (&& tmp%261#0 tmp%264#0)
        let values%105#0: uint64 = (extract_uint64 arr7#0 10u)
        let tmp%266#0: bool = (== values%105#0 10u)
        let tmp%267#0: bool = (&& tmp%265#0 tmp%266#0)
        let values%106#0: uint64 = (extract_uint64 arr7#0 18u)
        let tmp%268#0: bool = (== values%106#0 3u)
        let tmp%269#0: bool = (&& tmp%267#0 tmp%268#0)
        let values%107#0: uint64 = (extract_uint64 arr7#0 26u)
        let tmp%270#0: bool = (== values%107#0 4u)
        let tmp%271#0: bool = (&& tmp%269#0 tmp%270#0)
        let values%108#0: uint64 = (extract_uint64 arr7#0 34u)
        let tmp%272#0: bool = (== values%108#0 1u)
        let tmp%273#0: bool = (&& tmp%271#0 tmp%272#0)
        let values%109#0: uint64 = (extract_uint64 arr7#0 42u)
        let tmp%274#0: bool = (== values%109#0 10u)
        let tmp%275#0: bool = (&& tmp%273#0 tmp%274#0)
        let values%110#0: uint64 = (extract_uint64 arr7#0 50u)
        let tmp%276#0: bool = (== values%110#0 3u)
        let tmp%277#0: bool = (&& tmp%275#0 tmp%276#0)
        let values%111#0: uint64 = (extract_uint64 arr7#0 58u)
        let tmp%278#0: bool = (== values%111#0 4u)
        let tmp%279#0: bool = (&& tmp%277#0 tmp%278#0)
        let values%112#0: uint64 = (extract_uint64 arr7#0 66u)
        let tmp%280#0: bool = (== values%112#0 11u)
        let tmp%281#0: bool = (&& tmp%279#0 tmp%280#0)
        let values%113#0: uint64 = (extract_uint64 arr7#0 74u)
        let tmp%282#0: bool = (== values%113#0 12u)
        let tmp%283#0: bool = (&& tmp%281#0 tmp%282#0)
        let values%114#0: uint64 = (extract_uint64 arr7#0 82u)
        let tmp%284#0: bool = (== values%114#0 13u)
        let tmp%285#0: bool = (&& tmp%283#0 tmp%284#0)
        let values%115#0: uint64 = (extract_uint64 arr7#0 90u)
        let tmp%286#0: bool = (== values%115#0 1u)
        let tmp%287#0: bool = (&& tmp%285#0 tmp%286#0)
        let values%116#0: uint64 = (extract_uint64 arr7#0 98u)
        let tmp%288#0: bool = (== values%116#0 2u)
        let tmp%289#0: bool = (&& tmp%287#0 tmp%288#0)
        let values%117#0: uint64 = (extract_uint64 arr7#0 106u)
        let tmp%290#0: bool = (== values%117#0 3u)
        let tmp%291#0: bool = (&& tmp%289#0 tmp%290#0)
        let values%118#0: uint64 = (extract_uint64 arr7#0 114u)
        let tmp%292#0: bool = (== values%118#0 4u)
        let tmp%293#0: bool = (&& tmp%291#0 tmp%292#0)
        let values%119#0: uint64 = (extract_uint64 arr7#0 122u)
        let tmp%294#0: bool = (== values%119#0 5u)
        let tmp%295#0: bool = (&& tmp%293#0 tmp%294#0)
        (assert tmp%295#0) // assert target is match for conditions
        let concat%13#0: Encoded(len+uint64[]) = (concat arr#6 fArr1#0) // on error: max array length exceeded
        let extract_to_end%16#0: bytes = ((extract 2 0) concat%13#0)
        let len%9#0: uint64 = (len extract_to_end%16#0)
        let div_floor%9#0: uint64 = (/ len%9#0 8u)
        let as_bytes%16#0: bytes[8] = (itob div_floor%9#0)
        let as_u16_bytes%16#0: bytes = ((extract 6 2) as_bytes%16#0)
        let arr8#0: Encoded(len+uint64[]) = ((replace2 0) concat%13#0 as_u16_bytes%16#0)
        let aggregate%array_length%15#0: uint64 = (extract_uint16 arr8#0 0u) // on error: invalid array length header
        let tmp%297#0: bool = (== aggregate%array_length%15#0 15u)
        (assert tmp%297#0)
        let values%120#0: uint64 = (extract_uint64 arr8#0 2u)
        let tmp%300#0: bool = (== values%120#0 1u)
        let tmp%301#0: bool = (&& tmp%297#0 tmp%300#0)
        let values%121#0: uint64 = (extract_uint64 arr8#0 10u)
        let tmp%302#0: bool = (== values%121#0 10u)
        let tmp%303#0: bool = (&& tmp%301#0 tmp%302#0)
        let values%122#0: uint64 = (extract_uint64 arr8#0 18u)
        let tmp%304#0: bool = (== values%122#0 3u)
        let tmp%305#0: bool = (&& tmp%303#0 tmp%304#0)
        let values%123#0: uint64 = (extract_uint64 arr8#0 26u)
        let tmp%306#0: bool = (== values%123#0 4u)
        let tmp%307#0: bool = (&& tmp%305#0 tmp%306#0)
        let values%124#0: uint64 = (extract_uint64 arr8#0 34u)
        let tmp%308#0: bool = (== values%124#0 1u)
        let tmp%309#0: bool = (&& tmp%307#0 tmp%308#0)
        let values%125#0: uint64 = (extract_uint64 arr8#0 42u)
        let tmp%310#0: bool = (== values%125#0 10u)
        let tmp%311#0: bool = (&& tmp%309#0 tmp%310#0)
        let values%126#0: uint64 = (extract_uint64 arr8#0 50u)
        let tmp%312#0: bool = (== values%126#0 3u)
        let tmp%313#0: bool = (&& tmp%311#0 tmp%312#0)
        let values%127#0: uint64 = (extract_uint64 arr8#0 58u)
        let tmp%314#0: bool = (== values%127#0 4u)
        let tmp%315#0: bool = (&& tmp%313#0 tmp%314#0)
        let values%128#0: uint64 = (extract_uint64 arr8#0 66u)
        let tmp%316#0: bool = (== values%128#0 11u)
        let tmp%317#0: bool = (&& tmp%315#0 tmp%316#0)
        let values%129#0: uint64 = (extract_uint64 arr8#0 74u)
        let tmp%318#0: bool = (== values%129#0 12u)
        let tmp%319#0: bool = (&& tmp%317#0 tmp%318#0)
        let values%130#0: uint64 = (extract_uint64 arr8#0 82u)
        let tmp%320#0: bool = (== values%130#0 13u)
        let tmp%321#0: bool = (&& tmp%319#0 tmp%320#0)
        let values%131#0: uint64 = (extract_uint64 arr8#0 90u)
        let tmp%322#0: bool = (! values%131#0)
        let tmp%323#0: bool = (&& tmp%321#0 tmp%322#0)
        let values%132#0: uint64 = (extract_uint64 arr8#0 98u)
        let tmp%324#0: bool = (! values%132#0)
        let tmp%325#0: bool = (&& tmp%323#0 tmp%324#0)
        let values%133#0: uint64 = (extract_uint64 arr8#0 106u)
        let tmp%326#0: bool = (! values%133#0)
        let tmp%327#0: bool = (&& tmp%325#0 tmp%326#0)
        let values%134#0: uint64 = (extract_uint64 arr8#0 114u)
        let tmp%328#0: bool = (! values%134#0)
        let tmp%329#0: bool = (&& tmp%327#0 tmp%328#0)
        (assert tmp%329#0) // assert target is match for conditions
        exit 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray[routing]() -> void:
    block@0: // L109
        let y#0: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len y#0)
        let eq%0#0: bool = (== len%0#0 400u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<uint64, 50>
        let values%1#0: uint64 = (extract_uint64 y#0 0u)
        let tmp%6#0: bool = (! values%1#0)
        (assert tmp%6#0)
        exit 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs[routing]() -> void:
    block@0: // L170
        let p#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len p#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for tests/approvals/native-arrays.algo.ts::Vector
        let x#0: uint64 = (extract_uint64 p#0 0u)
        let y#0: uint64 = (extract_uint64 p#0 8u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob x#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob y#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = (concat 0x0001 aggregate%head%1#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u) // on error: invalid array length header
        let tmp%2#1: bool = (== aggregate%array_length%0#0 1u)
        let aggregate%encoded_element%0#0: bytes = ((extract 2 16) myVectors#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 0u)
        let tmp%3#0: bool = (== values%2#0 x#0)
        let values%3#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 8u)
        let tmp%4#0: bool = (== values%3#0 y#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        let tmp%6#0: bool = (&& tmp%2#1 tmp%5#0)
        (assert tmp%6#0) // assert target is match for conditions
        let tmp%2#0: bytes = (concat 0x151f7c75 myVectors#1)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing[routing]() -> void:
    block@0: // L195
        let mutable#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 mutable#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len mutable#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let readOnly#0: Encoded(len+uint64[]) = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 readOnly#0 0u) // on error: invalid array length header
        let mul%1#0: uint64 = (* aggregate%array_length%1#0 8u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len readOnly#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        let values%0#0: uint64 = (extract_uint64 mutable#0 10u)
        let tmp%1#1: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#1)
        let mutable#1: Encoded(len+uint64[]) = ((replace2 10) mutable#0 aggregate%val_as_bytes%0#0) // on error: index access is out of bounds
        let values%1#0: uint64 = (extract_uint64 mutable#1 10u)
        let tmp%2#0: bool = (!= values%1#0 values%0#0)
        (assert tmp%2#0) // These should not match
        exit 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable[routing]() -> void:
    block@0: // L221
        let a#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 a#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        exit 1u

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveReadonly[routing]() -> void:
    block@0: // L225
        let a#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 a#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<uint64>
        exit 1u