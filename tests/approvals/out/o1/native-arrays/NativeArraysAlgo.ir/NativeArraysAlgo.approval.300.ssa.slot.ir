main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@20
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "arrayInObject()void" => block@3, method "buildArray()uint64[]" => block@4, method "arrayFromCtor()uint64[]" => block@5, method "buildReadonly()uint64[]" => block@6, method "doThings()void" => block@7, method "fixedArray(uint64[50])void" => block@8, method "arc4Interop()void" => block@9, method "structs((uint64,uint64))(uint64,uint64)[]" => block@10, method "booleans()bool[]" => block@11, method "booleansStatic()(bool,bool,bool)" => block@12, method "arc4Booleans()bool[]" => block@13, method "arc4BooleansStatic()(bool,bool,bool)" => block@14, method "aliasing(uint64[],uint64[])void" => block@15, method "receiveMutable(uint64[])void" => block@16, method "receiveReadonly(uint64[])void" => block@17, * => block@24}
    block@3: // arrayInObject_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@25
    block@4: // buildArray_route_L17
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@25
    block@5: // arrayFromCtor_route_L21
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        (log 0x151f7c750003000000000000000100000000000000020000000000000003)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@25
    block@6: // buildReadonly_route_L25
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@25
    block@7: // doThings_route_L29
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@25
    block@8: // fixedArray_route_L66
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint64[50])%0#0: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(reinterpret_Encoded(uint64[50])%0#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@25
    block@9: // arc4Interop_route_L108
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@25
    block@10: // structs_route_L121
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%41#0: Encoded(len+(uint64,uint64)[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%42#0: bytes = (concat 0x151f7c75 tmp%41#0)
        (log tmp%42#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@25
    block@11: // booleans_route_L130
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        (log 0x151f7c750003a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@25
    block@12: // booleansStatic_route_L134
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9: bool = 1u
        goto block@25
    block@13: // arc4Booleans_route_L138
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (! tmp%58#0)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        (assert tmp%60#0) // can only call when not creating
        (log 0x151f7c750003a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10: bool = 1u
        goto block@25
    block@14: // arc4BooleansStatic_route_L142
        let tmp%64#0: uint64 = (txn OnCompletion)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0) // OnCompletion is not NoOp
        let tmp%66#0: uint64 = (txn ApplicationID)
        (assert tmp%66#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11: bool = 1u
        goto block@25
    block@15: // aliasing_route_L146
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 2)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(reinterpret_Encoded(len+uint64[])%0#0, reinterpret_Encoded(len+uint64[])%1#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12: bool = 1u
        goto block@25
    block@16: // receiveMutable_route_L172
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        (assert tmp%79#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let receiveMutable%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(reinterpret_Encoded(len+uint64[])%2#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13: bool = 1u
        goto block@25
    block@17: // receiveReadonly_route_L176
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14: bool = 1u
        goto block@25
    block@20: // bare_routing_L6
        let tmp%85#0: uint64 = (txn OnCompletion)
        goto tmp%85#0 ? block@24 : block@21
    block@21: // __algots__.defaultCreate_L6
        let tmp%86#0: uint64 = (txn ApplicationID)
        let tmp%87#0: bool = (! tmp%86#0)
        (assert tmp%87#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15: bool = 1u
        goto block@25
    block@24: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16: bool = 0u
        goto block@25
    block@25: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11 <- block@14, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12 <- block@15, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13 <- block@16, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14 <- block@17, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15 <- block@21, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16 <- block@24)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L29
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 5u)
        let (tmp%2#0: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005, 8u)
        let tmp%4#0: uint64 = (btoi tmp%2#0)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%6#0: bool = (== array_length%1#0 4u)
        goto tmp%6#0 ? block@1 : block@6
    block@1: // and_contd_L34
        let values%0#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%7#0: bool = (== values%0#0 1u)
        goto tmp%7#0 ? block@2 : block@6
    block@2: // and_contd_L34
        let values%1#0: uint64 = (extract_uint64 arr#2 10u)
        let tmp%8#0: bool = (== values%1#0 2u)
        goto tmp%8#0 ? block@3 : block@6
    block@3: // and_contd_L34
        let values%2#0: uint64 = (extract_uint64 arr#2 18u)
        let tmp%9#0: bool = (== values%2#0 3u)
        goto tmp%9#0 ? block@4 : block@6
    block@4: // and_contd_L34
        let values%3#0: uint64 = (extract_uint64 arr#2 26u)
        let tmp%10#0: bool = (== values%3#0 4u)
        goto tmp%10#0 ? block@5 : block@6
    block@5: // bool_true_L34
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L34
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L34
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) arr#2)
        let values%4#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%11#0: bool = (== values%4#0 1u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (- array_length%1#0 1u)
        let aggregate%bytes_offset%5#1: uint64 = (* tmp%12#0 8u)
        let values%5#0: uint64 = (extract_uint64 aggregate%array_trimmed%4#1 aggregate%bytes_offset%5#1)
        let tmp%13#0: bool = (== values%5#0 4u)
        (assert tmp%13#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        let add%1#0: uint64 = (+ array_length%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#5: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%4#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%15#0: bool = (== array_length%4#0 5u)
        goto tmp%15#0 ? block@8 : block@14
    block@8: // and_contd_L43
        let values%6#0: uint64 = (extract_uint64 arr#5 2u)
        let tmp%16#0: bool = (== values%6#0 1u)
        goto tmp%16#0 ? block@9 : block@14
    block@9: // and_contd_L43
        let values%7#0: uint64 = (extract_uint64 arr#5 10u)
        let tmp%17#0: bool = (== values%7#0 2u)
        goto tmp%17#0 ? block@10 : block@14
    block@10: // and_contd_L43
        let values%8#0: uint64 = (extract_uint64 arr#5 18u)
        let tmp%18#0: bool = (== values%8#0 3u)
        goto tmp%18#0 ? block@11 : block@14
    block@11: // and_contd_L43
        let values%9#0: uint64 = (extract_uint64 arr#5 26u)
        let tmp%19#0: bool = (== values%9#0 4u)
        goto tmp%19#0 ? block@12 : block@14
    block@12: // and_contd_L43
        let values%10#0: uint64 = (extract_uint64 arr#5 34u)
        let tmp%20#0: bool = (== values%10#0 5u)
        goto tmp%20#0 ? block@13 : block@14
    block@13: // bool_true_L43
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L43
        let and_result%1#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L43
        let and_result%1#2: bool = Ï†(and_result%1#0 <- block@13, and_result%1#1 <- block@14)
        (assert and_result%1#2) // assert target is match for conditions
        let (tmp%21#0: bytes, arr#8: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#5, 8u)
        let top#0: uint64 = (btoi tmp%21#0)
        let tmp%24#0: bool = (== top#0 5u)
        (assert tmp%24#0)
        let array_length%5#0: uint64 = (extract_uint16 arr#8 0u)
        let tmp%25#0: bool = (== array_length%5#0 4u)
        goto tmp%25#0 ? block@16 : block@21
    block@16: // and_contd_L49
        let values%11#0: uint64 = (extract_uint64 arr#8 2u)
        let tmp%26#0: bool = (== values%11#0 1u)
        goto tmp%26#0 ? block@17 : block@21
    block@17: // and_contd_L49
        let values%12#0: uint64 = (extract_uint64 arr#8 10u)
        let tmp%27#0: bool = (== values%12#0 2u)
        goto tmp%27#0 ? block@18 : block@21
    block@18: // and_contd_L49
        let values%13#0: uint64 = (extract_uint64 arr#8 18u)
        let tmp%28#0: bool = (== values%13#0 3u)
        goto tmp%28#0 ? block@19 : block@21
    block@19: // and_contd_L49
        let values%14#0: uint64 = (extract_uint64 arr#8 26u)
        let tmp%29#0: bool = (== values%14#0 4u)
        goto tmp%29#0 ? block@20 : block@21
    block@20: // bool_true_L49
        let and_result%2#0: bool = 1u
        goto block@22
    block@21: // bool_false_L49
        let and_result%2#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L49
        let and_result%2#2: bool = Ï†(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
        (assert and_result%2#2) // assert target is match for conditions
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 10u)
        let arr#11: Encoded(len+uint64[]) = ((replace2 10) arr#8 aggregate%val_as_bytes%1#1)
        let arr2#0: Encoded(len+uint64[]) = ((replace2 10) arr#11 aggregate%val_as_bytes%0#1)
        let array_length%6#0: uint64 = (extract_uint16 arr#11 0u)
        let tmp%30#0: bool = (== array_length%6#0 4u)
        goto tmp%30#0 ? block@23 : block@28
    block@23: // and_contd_L56
        let values%15#0: uint64 = (extract_uint64 arr#11 2u)
        let tmp%31#0: bool = (== values%15#0 1u)
        goto tmp%31#0 ? block@24 : block@28
    block@24: // and_contd_L56
        let values%16#0: uint64 = (extract_uint64 arr#11 10u)
        let tmp%32#0: bool = (== values%16#0 10u)
        goto tmp%32#0 ? block@25 : block@28
    block@25: // and_contd_L56
        let values%17#0: uint64 = (extract_uint64 arr#11 18u)
        let tmp%33#0: bool = (== values%17#0 3u)
        goto tmp%33#0 ? block@26 : block@28
    block@26: // and_contd_L56
        let values%18#0: uint64 = (extract_uint64 arr#11 26u)
        let tmp%34#0: bool = (== values%18#0 4u)
        goto tmp%34#0 ? block@27 : block@28
    block@27: // bool_true_L56
        let and_result%3#0: bool = 1u
        goto block@29
    block@28: // bool_false_L56
        let and_result%3#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L56
        let and_result%3#2: bool = Ï†(and_result%3#0 <- block@27, and_result%3#1 <- block@28)
        (assert and_result%3#2) // assert target is match for conditions
        let array_length%7#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%35#0: bool = (== array_length%7#0 4u)
        goto tmp%35#0 ? block@30 : block@35
    block@30: // and_contd_L57
        let values%19#0: uint64 = (extract_uint64 arr2#0 2u)
        let tmp%36#0: bool = (== values%19#0 1u)
        goto tmp%36#0 ? block@31 : block@35
    block@31: // and_contd_L57
        let values%20#0: uint64 = (extract_uint64 arr2#0 10u)
        let tmp%37#0: bool = (== values%20#0 5u)
        goto tmp%37#0 ? block@32 : block@35
    block@32: // and_contd_L57
        let values%21#0: uint64 = (extract_uint64 arr2#0 18u)
        let tmp%38#0: bool = (== values%21#0 3u)
        goto tmp%38#0 ? block@33 : block@35
    block@33: // and_contd_L57
        let values%22#0: uint64 = (extract_uint64 arr2#0 26u)
        let tmp%39#0: bool = (== values%22#0 4u)
        goto tmp%39#0 ? block@34 : block@35
    block@34: // bool_true_L57
        let and_result%4#0: bool = 1u
        goto block@36
    block@35: // bool_false_L57
        let and_result%4#1: bool = 0u
        goto block@36
    block@36: // bool_merge_L57
        let and_result%4#2: bool = Ï†(and_result%4#0 <- block@34, and_result%4#1 <- block@35)
        (assert and_result%4#2) // assert target is match for conditions
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#11)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#11 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 11u)
        let concat%3#0: Encoded(len+uint64[]) = (concat replace%2#0 aggregate%val_as_bytes%5#1) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 replace%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat replace%3#0 0x000000000000000c000000000000000d) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr#16: Encoded(len+uint64[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let array_length%10#0: uint64 = (extract_uint16 arr#16 0u)
        let tmp%42#0: bool = (== array_length%10#0 11u)
        goto tmp%42#0 ? block@37 : block@49
    block@37: // and_contd_L63
        let values%25#0: uint64 = (extract_uint64 arr#16 2u)
        let tmp%43#0: bool = (== values%25#0 1u)
        goto tmp%43#0 ? block@38 : block@49
    block@38: // and_contd_L63
        let values%26#0: uint64 = (extract_uint64 arr#16 10u)
        let tmp%44#0: bool = (== values%26#0 10u)
        goto tmp%44#0 ? block@39 : block@49
    block@39: // and_contd_L63
        let values%27#0: uint64 = (extract_uint64 arr#16 18u)
        let tmp%45#0: bool = (== values%27#0 3u)
        goto tmp%45#0 ? block@40 : block@49
    block@40: // and_contd_L63
        let values%28#0: uint64 = (extract_uint64 arr#16 26u)
        let tmp%46#0: bool = (== values%28#0 4u)
        goto tmp%46#0 ? block@41 : block@49
    block@41: // and_contd_L63
        let values%29#0: uint64 = (extract_uint64 arr#16 34u)
        let tmp%47#0: bool = (== values%29#0 1u)
        goto tmp%47#0 ? block@42 : block@49
    block@42: // and_contd_L63
        let values%30#0: uint64 = (extract_uint64 arr#16 42u)
        let tmp%48#0: bool = (== values%30#0 10u)
        goto tmp%48#0 ? block@43 : block@49
    block@43: // and_contd_L63
        let values%31#0: uint64 = (extract_uint64 arr#16 50u)
        let tmp%49#0: bool = (== values%31#0 3u)
        goto tmp%49#0 ? block@44 : block@49
    block@44: // and_contd_L63
        let values%32#0: uint64 = (extract_uint64 arr#16 58u)
        let tmp%50#0: bool = (== values%32#0 4u)
        goto tmp%50#0 ? block@45 : block@49
    block@45: // and_contd_L63
        let values%33#0: uint64 = (extract_uint64 arr#16 66u)
        let tmp%51#0: bool = (== values%33#0 11u)
        goto tmp%51#0 ? block@46 : block@49
    block@46: // and_contd_L63
        let values%34#0: uint64 = (extract_uint64 arr#16 74u)
        let tmp%52#0: bool = (== values%34#0 12u)
        goto tmp%52#0 ? block@47 : block@49
    block@47: // and_contd_L63
        let values%35#0: uint64 = (extract_uint64 arr#16 82u)
        let tmp%53#0: bool = (== values%35#0 13u)
        goto tmp%53#0 ? block@48 : block@49
    block@48: // bool_true_L63
        let and_result%5#0: bool = 1u
        goto block@50
    block@49: // bool_false_L63
        let and_result%5#1: bool = 0u
        goto block@50
    block@50: // bool_merge_L63
        let and_result%5#2: bool = Ï†(and_result%5#0 <- block@48, and_result%5#1 <- block@49)
        (assert and_result%5#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: Encoded(uint64[50])) -> void:
    block@0: // L66
        let values%1#0: uint64 = (extract_uint64 y#0 0u)
        let tmp%0#0: bool = (! values%1#0)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: Encoded(uint64,uint64)) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L121
        let x#0: uint64 = (extract_uint64 p#0 0u)
        let y#0: uint64 = (extract_uint64 p#0 8u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob x#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob y#0)
        let aggregate%head%1#1: bytes = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = (concat 0x0001 aggregate%head%1#1)
        let array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#0: bool = (== array_length%0#0 1u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // and_contd_L126
        let aggregate%encoded_element%0#1: bytes = ((extract 2 16) myVectors#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 0u)
        let tmp%2#0: bool = (== values%2#0 x#0)
        goto tmp%2#0 ? block@2 : block@4
    block@2: // and_contd_L126
        let values%3#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 8u)
        let tmp%3#0: bool = (== values%3#0 y#0)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // bool_true_L126
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L126
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L126
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return myVectors#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: Encoded(len+uint64[]), readOnly: Encoded(len+uint64[])) -> void:
    block@0: // L146
        let values%0#0: uint64 = (extract_uint64 mutable#0 10u)
        let tmp%0#0: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%0#0)
        let mutable#1: Encoded(len+uint64[]) = ((replace2 10) mutable#0 aggregate%val_as_bytes%1#1)
        let values%1#0: uint64 = (extract_uint64 mutable#1 10u)
        let tmp%1#0: bool = (!= values%1#0 values%0#0)
        (assert tmp%1#0) // These should not match
        let mutable#2: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(mutable#1)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: Encoded(len+uint64[])) -> Encoded(len+uint64[]):
    block@0: // L172
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let a#1: Encoded(len+uint64[]) = ((replace2 2) a#0 aggregate%val_as_bytes%0#1)
        return a#1