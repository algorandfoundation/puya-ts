main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@21
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "readonlyArray()void" => block@3, method "arrayInObject()void" => block@4, method "buildArray()uint64[]" => block@5, method "arrayFromCtor()uint64[]" => block@6, method "buildReadonly()uint64[]" => block@7, method "doThings()void" => block@8, method "fixedArray(uint64[50])void" => block@9, method "arc4Interop()void" => block@10, method "structs((uint64,uint64))(uint64,uint64)[]" => block@11, method "booleans()bool[]" => block@12, method "booleansStatic()(bool,bool,bool)" => block@13, method "arc4Booleans()bool[]" => block@14, method "arc4BooleansStatic()(bool,bool,bool)" => block@15, method "aliasing(uint64[],uint64[])void" => block@16, method "receiveMutable(uint64[])void" => block@17, method "receiveReadonly(uint64[])void" => block@18, * => block@25}
    block@3: // readonlyArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@26
    block@4: // arrayInObject_route_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@26
    block@5: // buildArray_route_L30
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@26
    block@6: // arrayFromCtor_route_L34
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        (log 0x151f7c750003000000000000000100000000000000020000000000000003)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@26
    block@7: // buildReadonly_route_L38
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@26
    block@8: // doThings_route_L42
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@26
    block@9: // fixedArray_route_L109
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64[50])%0#0: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(reinterpret_Encoded(uint64[50])%0#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@26
    block@10: // arc4Interop_route_L151
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@26
    block@11: // structs_route_L164
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%45#0: Encoded(len+(uint64,uint64)[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@26
    block@12: // booleans_route_L173
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        (log 0x151f7c750003a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9: bool = 1u
        goto block@26
    block@13: // booleansStatic_route_L177
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        (assert tmp%55#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10: bool = 1u
        goto block@26
    block@14: // arc4Booleans_route_L181
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        (assert tmp%64#0) // can only call when not creating
        (log 0x151f7c750003a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11: bool = 1u
        goto block@26
    block@15: // arc4BooleansStatic_route_L185
        let tmp%68#0: uint64 = (txn OnCompletion)
        let tmp%69#0: bool = (! tmp%68#0)
        (assert tmp%69#0) // OnCompletion is not NoOp
        let tmp%70#0: uint64 = (txn ApplicationID)
        (assert tmp%70#0) // can only call when not creating
        (log 0x151f7c75a0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12: bool = 1u
        goto block@26
    block@16: // aliasing_route_L189
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        (assert tmp%79#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 2)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(reinterpret_Encoded(len+uint64[])%0#0, reinterpret_Encoded(len+uint64[])%1#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13: bool = 1u
        goto block@26
    block@17: // receiveMutable_route_L215
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let receiveMutable%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(reinterpret_Encoded(len+uint64[])%2#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14: bool = 1u
        goto block@26
    block@18: // receiveReadonly_route_L219
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15: bool = 1u
        goto block@26
    block@21: // bare_routing_L6
        let tmp%89#0: uint64 = (txn OnCompletion)
        goto tmp%89#0 ? block@25 : block@22
    block@22: // __algots__.defaultCreate_L6
        let tmp%90#0: uint64 = (txn ApplicationID)
        let tmp%91#0: bool = (! tmp%90#0)
        (assert tmp%91#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16: bool = 1u
        goto block@26
    block@25: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#17: bool = 0u
        goto block@26
    block@26: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11 <- block@14, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12 <- block@15, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13 <- block@16, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14 <- block@17, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15 <- block@18, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16 <- block@22, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#17 <- block@25)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@180: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 1410u tmp%1#1)
        goto tmp%2#1 ? block@181 : block@185
    block@181: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@180
    block@185: // after_while_L20
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 5u)
        let (tmp%2#0: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005, 8u)
        let tmp%4#0: uint64 = (btoi tmp%2#0)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%6#0: bool = (== array_length%1#0 4u)
        goto tmp%6#0 ? block@1 : block@6
    block@1: // and_contd_L48
        let values%0#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%7#0: bool = (== values%0#0 1u)
        goto tmp%7#0 ? block@2 : block@6
    block@2: // and_contd_L48
        let values%1#0: uint64 = (extract_uint64 arr#2 10u)
        let tmp%8#0: bool = (== values%1#0 2u)
        goto tmp%8#0 ? block@3 : block@6
    block@3: // and_contd_L48
        let values%2#0: uint64 = (extract_uint64 arr#2 18u)
        let tmp%9#0: bool = (== values%2#0 3u)
        goto tmp%9#0 ? block@4 : block@6
    block@4: // and_contd_L48
        let values%3#0: uint64 = (extract_uint64 arr#2 26u)
        let tmp%10#0: bool = (== values%3#0 4u)
        goto tmp%10#0 ? block@5 : block@6
    block@5: // bool_true_L48
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L48
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L48
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) arr#2)
        let values%4#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%11#0: bool = (== values%4#0 1u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (- array_length%1#0 1u)
        let aggregate%bytes_offset%5#1: uint64 = (* tmp%12#0 8u)
        let values%5#0: uint64 = (extract_uint64 aggregate%array_trimmed%4#1 aggregate%bytes_offset%5#1)
        let tmp%13#0: bool = (== values%5#0 4u)
        (assert tmp%13#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        let add%1#0: uint64 = (+ array_length%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#5: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%4#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%15#0: bool = (== array_length%4#0 5u)
        goto tmp%15#0 ? block@8 : block@14
    block@8: // and_contd_L57
        let values%6#0: uint64 = (extract_uint64 arr#5 2u)
        let tmp%16#0: bool = (== values%6#0 1u)
        goto tmp%16#0 ? block@9 : block@14
    block@9: // and_contd_L57
        let values%7#0: uint64 = (extract_uint64 arr#5 10u)
        let tmp%17#0: bool = (== values%7#0 2u)
        goto tmp%17#0 ? block@10 : block@14
    block@10: // and_contd_L57
        let values%8#0: uint64 = (extract_uint64 arr#5 18u)
        let tmp%18#0: bool = (== values%8#0 3u)
        goto tmp%18#0 ? block@11 : block@14
    block@11: // and_contd_L57
        let values%9#0: uint64 = (extract_uint64 arr#5 26u)
        let tmp%19#0: bool = (== values%9#0 4u)
        goto tmp%19#0 ? block@12 : block@14
    block@12: // and_contd_L57
        let values%10#0: uint64 = (extract_uint64 arr#5 34u)
        let tmp%20#0: bool = (== values%10#0 5u)
        goto tmp%20#0 ? block@13 : block@14
    block@13: // bool_true_L57
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L57
        let and_result%1#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L57
        let and_result%1#2: bool = φ(and_result%1#0 <- block@13, and_result%1#1 <- block@14)
        (assert and_result%1#2) // assert target is match for conditions
        let (tmp%21#0: bytes, arr#8: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#5, 8u)
        let top#0: uint64 = (btoi tmp%21#0)
        let tmp%24#0: bool = (== top#0 5u)
        (assert tmp%24#0)
        let array_length%5#0: uint64 = (extract_uint16 arr#8 0u)
        let tmp%25#0: bool = (== array_length%5#0 4u)
        goto tmp%25#0 ? block@16 : block@21
    block@16: // and_contd_L63
        let values%11#0: uint64 = (extract_uint64 arr#8 2u)
        let tmp%26#0: bool = (== values%11#0 1u)
        goto tmp%26#0 ? block@17 : block@21
    block@17: // and_contd_L63
        let values%12#0: uint64 = (extract_uint64 arr#8 10u)
        let tmp%27#0: bool = (== values%12#0 2u)
        goto tmp%27#0 ? block@18 : block@21
    block@18: // and_contd_L63
        let values%13#0: uint64 = (extract_uint64 arr#8 18u)
        let tmp%28#0: bool = (== values%13#0 3u)
        goto tmp%28#0 ? block@19 : block@21
    block@19: // and_contd_L63
        let values%14#0: uint64 = (extract_uint64 arr#8 26u)
        let tmp%29#0: bool = (== values%14#0 4u)
        goto tmp%29#0 ? block@20 : block@21
    block@20: // bool_true_L63
        let and_result%2#0: bool = 1u
        goto block@22
    block@21: // bool_false_L63
        let and_result%2#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L63
        let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
        (assert and_result%2#2) // assert target is match for conditions
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 10u)
        let arr#11: Encoded(len+uint64[]) = ((replace2 10) arr#8 aggregate%val_as_bytes%1#1)
        let arr2#0: Encoded(len+uint64[]) = ((replace2 10) arr#11 aggregate%val_as_bytes%0#1)
        let array_length%6#0: uint64 = (extract_uint16 arr#11 0u)
        let tmp%30#0: bool = (== array_length%6#0 4u)
        goto tmp%30#0 ? block@23 : block@28
    block@23: // and_contd_L70
        let values%15#0: uint64 = (extract_uint64 arr#11 2u)
        let tmp%31#0: bool = (== values%15#0 1u)
        goto tmp%31#0 ? block@24 : block@28
    block@24: // and_contd_L70
        let values%16#0: uint64 = (extract_uint64 arr#11 10u)
        let tmp%32#0: bool = (== values%16#0 10u)
        goto tmp%32#0 ? block@25 : block@28
    block@25: // and_contd_L70
        let values%17#0: uint64 = (extract_uint64 arr#11 18u)
        let tmp%33#0: bool = (== values%17#0 3u)
        goto tmp%33#0 ? block@26 : block@28
    block@26: // and_contd_L70
        let values%18#0: uint64 = (extract_uint64 arr#11 26u)
        let tmp%34#0: bool = (== values%18#0 4u)
        goto tmp%34#0 ? block@27 : block@28
    block@27: // bool_true_L70
        let and_result%3#0: bool = 1u
        goto block@29
    block@28: // bool_false_L70
        let and_result%3#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L70
        let and_result%3#2: bool = φ(and_result%3#0 <- block@27, and_result%3#1 <- block@28)
        (assert and_result%3#2) // assert target is match for conditions
        let array_length%7#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%35#0: bool = (== array_length%7#0 4u)
        goto tmp%35#0 ? block@30 : block@35
    block@30: // and_contd_L71
        let values%19#0: uint64 = (extract_uint64 arr2#0 2u)
        let tmp%36#0: bool = (== values%19#0 1u)
        goto tmp%36#0 ? block@31 : block@35
    block@31: // and_contd_L71
        let values%20#0: uint64 = (extract_uint64 arr2#0 10u)
        let tmp%37#0: bool = (== values%20#0 5u)
        goto tmp%37#0 ? block@32 : block@35
    block@32: // and_contd_L71
        let values%21#0: uint64 = (extract_uint64 arr2#0 18u)
        let tmp%38#0: bool = (== values%21#0 3u)
        goto tmp%38#0 ? block@33 : block@35
    block@33: // and_contd_L71
        let values%22#0: uint64 = (extract_uint64 arr2#0 26u)
        let tmp%39#0: bool = (== values%22#0 4u)
        goto tmp%39#0 ? block@34 : block@35
    block@34: // bool_true_L71
        let and_result%4#0: bool = 1u
        goto block@36
    block@35: // bool_false_L71
        let and_result%4#1: bool = 0u
        goto block@36
    block@36: // bool_merge_L71
        let and_result%4#2: bool = φ(and_result%4#0 <- block@34, and_result%4#1 <- block@35)
        (assert and_result%4#2) // assert target is match for conditions
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#11)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#11 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 11u)
        let concat%3#0: Encoded(len+uint64[]) = (concat replace%2#0 aggregate%val_as_bytes%5#1) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 replace%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat replace%3#0 0x000000000000000c000000000000000d) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr#16: Encoded(len+uint64[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let array_length%9#0: uint64 = (extract_uint16 arr#16 0u)
        let tmp%42#0: bool = (== array_length%9#0 11u)
        goto tmp%42#0 ? block@37 : block@49
    block@37: // and_contd_L76
        let values%23#0: uint64 = (extract_uint64 arr#16 2u)
        let tmp%43#0: bool = (== values%23#0 1u)
        goto tmp%43#0 ? block@38 : block@49
    block@38: // and_contd_L76
        let values%24#0: uint64 = (extract_uint64 arr#16 10u)
        let tmp%44#0: bool = (== values%24#0 10u)
        goto tmp%44#0 ? block@39 : block@49
    block@39: // and_contd_L76
        let values%25#0: uint64 = (extract_uint64 arr#16 18u)
        let tmp%45#0: bool = (== values%25#0 3u)
        goto tmp%45#0 ? block@40 : block@49
    block@40: // and_contd_L76
        let values%26#0: uint64 = (extract_uint64 arr#16 26u)
        let tmp%46#0: bool = (== values%26#0 4u)
        goto tmp%46#0 ? block@41 : block@49
    block@41: // and_contd_L76
        let values%27#0: uint64 = (extract_uint64 arr#16 34u)
        let tmp%47#0: bool = (== values%27#0 1u)
        goto tmp%47#0 ? block@42 : block@49
    block@42: // and_contd_L76
        let values%28#0: uint64 = (extract_uint64 arr#16 42u)
        let tmp%48#0: bool = (== values%28#0 10u)
        goto tmp%48#0 ? block@43 : block@49
    block@43: // and_contd_L76
        let values%29#0: uint64 = (extract_uint64 arr#16 50u)
        let tmp%49#0: bool = (== values%29#0 3u)
        goto tmp%49#0 ? block@44 : block@49
    block@44: // and_contd_L76
        let values%30#0: uint64 = (extract_uint64 arr#16 58u)
        let tmp%50#0: bool = (== values%30#0 4u)
        goto tmp%50#0 ? block@45 : block@49
    block@45: // and_contd_L76
        let values%31#0: uint64 = (extract_uint64 arr#16 66u)
        let tmp%51#0: bool = (== values%31#0 11u)
        goto tmp%51#0 ? block@46 : block@49
    block@46: // and_contd_L76
        let values%32#0: uint64 = (extract_uint64 arr#16 74u)
        let tmp%52#0: bool = (== values%32#0 12u)
        goto tmp%52#0 ? block@47 : block@49
    block@47: // and_contd_L76
        let values%33#0: uint64 = (extract_uint64 arr#16 82u)
        let tmp%53#0: bool = (== values%33#0 13u)
        goto tmp%53#0 ? block@48 : block@49
    block@48: // bool_true_L76
        let and_result%5#0: bool = 1u
        goto block@50
    block@49: // bool_false_L76
        let and_result%5#1: bool = 0u
        goto block@50
    block@50: // bool_merge_L76
        let and_result%5#2: bool = φ(and_result%5#0 <- block@48, and_result%5#1 <- block@49)
        (assert and_result%5#2) // assert target is match for conditions
        let fArr1#0: Encoded(uint64[4]) = (bzero 32u)
        let extract_to_end%8#0: bytes = ((extract 2 0) arr#16)
        let concat%9#0: Encoded(len+uint64[]) = (concat 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%9#0: bytes = ((extract 2 0) concat%9#0)
        let len%5#0: uint64 = (len extract_to_end%9#0)
        let div_floor%5#0: uint64 = (/ len%5#0 8u)
        let as_bytes%10#0: bytes[8] = (itob div_floor%5#0)
        let as_u16_bytes%10#0: bytes = ((extract 6 2) as_bytes%10#0)
        let arr4#0: Encoded(len+uint64[]) = ((replace2 0) concat%9#0 as_u16_bytes%10#0)
        let array_length%22#0: uint64 = (extract_uint16 arr4#0 0u)
        let tmp%90#0: bool = (== array_length%22#0 16u)
        goto tmp%90#0 ? block@93 : block@110
    block@93: // and_contd_L92
        let values%64#0: uint64 = (extract_uint64 arr4#0 2u)
        let tmp%91#0: bool = (== values%64#0 1u)
        goto tmp%91#0 ? block@94 : block@110
    block@94: // and_contd_L92
        let values%65#0: uint64 = (extract_uint64 arr4#0 10u)
        let tmp%92#0: bool = (== values%65#0 2u)
        goto tmp%92#0 ? block@95 : block@110
    block@95: // and_contd_L92
        let values%66#0: uint64 = (extract_uint64 arr4#0 18u)
        let tmp%93#0: bool = (== values%66#0 3u)
        goto tmp%93#0 ? block@96 : block@110
    block@96: // and_contd_L92
        let values%67#0: uint64 = (extract_uint64 arr4#0 26u)
        let tmp%94#0: bool = (== values%67#0 4u)
        goto tmp%94#0 ? block@97 : block@110
    block@97: // and_contd_L92
        let values%68#0: uint64 = (extract_uint64 arr4#0 34u)
        let tmp%95#0: bool = (== values%68#0 5u)
        goto tmp%95#0 ? block@98 : block@110
    block@98: // and_contd_L92
        let values%69#0: uint64 = (extract_uint64 arr4#0 42u)
        let tmp%96#0: bool = (== values%69#0 1u)
        goto tmp%96#0 ? block@99 : block@110
    block@99: // and_contd_L92
        let values%70#0: uint64 = (extract_uint64 arr4#0 50u)
        let tmp%97#0: bool = (== values%70#0 10u)
        goto tmp%97#0 ? block@100 : block@110
    block@100: // and_contd_L92
        let values%71#0: uint64 = (extract_uint64 arr4#0 58u)
        let tmp%98#0: bool = (== values%71#0 3u)
        goto tmp%98#0 ? block@101 : block@110
    block@101: // and_contd_L92
        let values%72#0: uint64 = (extract_uint64 arr4#0 66u)
        let tmp%99#0: bool = (== values%72#0 4u)
        goto tmp%99#0 ? block@102 : block@110
    block@102: // and_contd_L92
        let values%73#0: uint64 = (extract_uint64 arr4#0 74u)
        let tmp%100#0: bool = (== values%73#0 1u)
        goto tmp%100#0 ? block@103 : block@110
    block@103: // and_contd_L92
        let values%74#0: uint64 = (extract_uint64 arr4#0 82u)
        let tmp%101#0: bool = (== values%74#0 10u)
        goto tmp%101#0 ? block@104 : block@110
    block@104: // and_contd_L92
        let values%75#0: uint64 = (extract_uint64 arr4#0 90u)
        let tmp%102#0: bool = (== values%75#0 3u)
        goto tmp%102#0 ? block@105 : block@110
    block@105: // and_contd_L92
        let values%76#0: uint64 = (extract_uint64 arr4#0 98u)
        let tmp%103#0: bool = (== values%76#0 4u)
        goto tmp%103#0 ? block@106 : block@110
    block@106: // and_contd_L92
        let values%77#0: uint64 = (extract_uint64 arr4#0 106u)
        let tmp%104#0: bool = (== values%77#0 11u)
        goto tmp%104#0 ? block@107 : block@110
    block@107: // and_contd_L92
        let values%78#0: uint64 = (extract_uint64 arr4#0 114u)
        let tmp%105#0: bool = (== values%78#0 12u)
        goto tmp%105#0 ? block@108 : block@110
    block@108: // and_contd_L92
        let values%79#0: uint64 = (extract_uint64 arr4#0 122u)
        let tmp%106#0: bool = (== values%79#0 13u)
        goto tmp%106#0 ? block@109 : block@110
    block@109: // bool_true_L92
        let and_result%10#0: bool = 1u
        goto block@111
    block@110: // bool_false_L92
        let and_result%10#1: bool = 0u
        goto block@111
    block@111: // bool_merge_L92
        let and_result%10#2: bool = φ(and_result%10#0 <- block@109, and_result%10#1 <- block@110)
        (assert and_result%10#2) // assert target is match for conditions
        let concat%11#0: Encoded(len+uint64[]) = (concat 0x00040000000000000000000000000000000000000000000000000000000000000000 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%13#0: bytes = ((extract 2 0) concat%11#0)
        let len%7#0: uint64 = (len extract_to_end%13#0)
        let div_floor%7#0: uint64 = (/ len%7#0 8u)
        let as_bytes%14#0: bytes[8] = (itob div_floor%7#0)
        let as_u16_bytes%14#0: bytes = ((extract 6 2) as_bytes%14#0)
        let arr6#0: Encoded(len+uint64[]) = ((replace2 0) concat%11#0 as_u16_bytes%14#0)
        let array_length%26#0: uint64 = (extract_uint16 arr6#0 0u)
        let tmp%117#0: bool = (== array_length%26#0 15u)
        goto tmp%117#0 ? block@124 : block@140
    block@124: // and_contd_L98
        let values%89#0: uint64 = (extract_uint64 arr6#0 2u)
        goto values%89#0 ? block@140 : block@125
    block@125: // and_contd_L98
        let values%90#0: uint64 = (extract_uint64 arr6#0 10u)
        goto values%90#0 ? block@140 : block@126
    block@126: // and_contd_L98
        let values%91#0: uint64 = (extract_uint64 arr6#0 18u)
        goto values%91#0 ? block@140 : block@127
    block@127: // and_contd_L98
        let values%92#0: uint64 = (extract_uint64 arr6#0 26u)
        goto values%92#0 ? block@140 : block@128
    block@128: // and_contd_L98
        let values%93#0: uint64 = (extract_uint64 arr6#0 34u)
        let tmp%122#0: bool = (== values%93#0 1u)
        goto tmp%122#0 ? block@129 : block@140
    block@129: // and_contd_L98
        let values%94#0: uint64 = (extract_uint64 arr6#0 42u)
        let tmp%123#0: bool = (== values%94#0 10u)
        goto tmp%123#0 ? block@130 : block@140
    block@130: // and_contd_L98
        let values%95#0: uint64 = (extract_uint64 arr6#0 50u)
        let tmp%124#0: bool = (== values%95#0 3u)
        goto tmp%124#0 ? block@131 : block@140
    block@131: // and_contd_L98
        let values%96#0: uint64 = (extract_uint64 arr6#0 58u)
        let tmp%125#0: bool = (== values%96#0 4u)
        goto tmp%125#0 ? block@132 : block@140
    block@132: // and_contd_L98
        let values%97#0: uint64 = (extract_uint64 arr6#0 66u)
        let tmp%126#0: bool = (== values%97#0 1u)
        goto tmp%126#0 ? block@133 : block@140
    block@133: // and_contd_L98
        let values%98#0: uint64 = (extract_uint64 arr6#0 74u)
        let tmp%127#0: bool = (== values%98#0 10u)
        goto tmp%127#0 ? block@134 : block@140
    block@134: // and_contd_L98
        let values%99#0: uint64 = (extract_uint64 arr6#0 82u)
        let tmp%128#0: bool = (== values%99#0 3u)
        goto tmp%128#0 ? block@135 : block@140
    block@135: // and_contd_L98
        let values%100#0: uint64 = (extract_uint64 arr6#0 90u)
        let tmp%129#0: bool = (== values%100#0 4u)
        goto tmp%129#0 ? block@136 : block@140
    block@136: // and_contd_L98
        let values%101#0: uint64 = (extract_uint64 arr6#0 98u)
        let tmp%130#0: bool = (== values%101#0 11u)
        goto tmp%130#0 ? block@137 : block@140
    block@137: // and_contd_L98
        let values%102#0: uint64 = (extract_uint64 arr6#0 106u)
        let tmp%131#0: bool = (== values%102#0 12u)
        goto tmp%131#0 ? block@138 : block@140
    block@138: // and_contd_L98
        let values%103#0: uint64 = (extract_uint64 arr6#0 114u)
        let tmp%132#0: bool = (== values%103#0 13u)
        goto tmp%132#0 ? block@139 : block@140
    block@139: // bool_true_L98
        let and_result%12#0: bool = 1u
        goto block@141
    block@140: // bool_false_L98
        let and_result%12#1: bool = 0u
        goto block@141
    block@141: // bool_merge_L98
        let and_result%12#2: bool = φ(and_result%12#0 <- block@139, and_result%12#1 <- block@140)
        (assert and_result%12#2) // assert target is match for conditions
        let concat%12#0: Encoded(len+uint64[]) = (concat arr#16 0x00000000000000010000000000000002000000000000000300000000000000040000000000000005) // on error: max array length exceeded
        let extract_to_end%15#0: bytes = ((extract 2 0) concat%12#0)
        let len%8#0: uint64 = (len extract_to_end%15#0)
        let div_floor%8#0: uint64 = (/ len%8#0 8u)
        let as_bytes%15#0: bytes[8] = (itob div_floor%8#0)
        let as_u16_bytes%15#0: bytes = ((extract 6 2) as_bytes%15#0)
        let arr7#0: Encoded(len+uint64[]) = ((replace2 0) concat%12#0 as_u16_bytes%15#0)
        let array_length%28#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%133#0: bool = (== array_length%28#0 16u)
        (assert tmp%133#0)
        goto tmp%133#0 ? block@142 : block@159
    block@142: // and_contd_L102
        let values%104#0: uint64 = (extract_uint64 arr7#0 2u)
        let tmp%135#0: bool = (== values%104#0 1u)
        goto tmp%135#0 ? block@143 : block@159
    block@143: // and_contd_L102
        let values%105#0: uint64 = (extract_uint64 arr7#0 10u)
        let tmp%136#0: bool = (== values%105#0 10u)
        goto tmp%136#0 ? block@144 : block@159
    block@144: // and_contd_L102
        let values%106#0: uint64 = (extract_uint64 arr7#0 18u)
        let tmp%137#0: bool = (== values%106#0 3u)
        goto tmp%137#0 ? block@145 : block@159
    block@145: // and_contd_L102
        let values%107#0: uint64 = (extract_uint64 arr7#0 26u)
        let tmp%138#0: bool = (== values%107#0 4u)
        goto tmp%138#0 ? block@146 : block@159
    block@146: // and_contd_L102
        let values%108#0: uint64 = (extract_uint64 arr7#0 34u)
        let tmp%139#0: bool = (== values%108#0 1u)
        goto tmp%139#0 ? block@147 : block@159
    block@147: // and_contd_L102
        let values%109#0: uint64 = (extract_uint64 arr7#0 42u)
        let tmp%140#0: bool = (== values%109#0 10u)
        goto tmp%140#0 ? block@148 : block@159
    block@148: // and_contd_L102
        let values%110#0: uint64 = (extract_uint64 arr7#0 50u)
        let tmp%141#0: bool = (== values%110#0 3u)
        goto tmp%141#0 ? block@149 : block@159
    block@149: // and_contd_L102
        let values%111#0: uint64 = (extract_uint64 arr7#0 58u)
        let tmp%142#0: bool = (== values%111#0 4u)
        goto tmp%142#0 ? block@150 : block@159
    block@150: // and_contd_L102
        let values%112#0: uint64 = (extract_uint64 arr7#0 66u)
        let tmp%143#0: bool = (== values%112#0 11u)
        goto tmp%143#0 ? block@151 : block@159
    block@151: // and_contd_L102
        let values%113#0: uint64 = (extract_uint64 arr7#0 74u)
        let tmp%144#0: bool = (== values%113#0 12u)
        goto tmp%144#0 ? block@152 : block@159
    block@152: // and_contd_L102
        let values%114#0: uint64 = (extract_uint64 arr7#0 82u)
        let tmp%145#0: bool = (== values%114#0 13u)
        goto tmp%145#0 ? block@153 : block@159
    block@153: // and_contd_L102
        let values%115#0: uint64 = (extract_uint64 arr7#0 90u)
        let tmp%146#0: bool = (== values%115#0 1u)
        goto tmp%146#0 ? block@154 : block@159
    block@154: // and_contd_L102
        let values%116#0: uint64 = (extract_uint64 arr7#0 98u)
        let tmp%147#0: bool = (== values%116#0 2u)
        goto tmp%147#0 ? block@155 : block@159
    block@155: // and_contd_L102
        let values%117#0: uint64 = (extract_uint64 arr7#0 106u)
        let tmp%148#0: bool = (== values%117#0 3u)
        goto tmp%148#0 ? block@156 : block@159
    block@156: // and_contd_L102
        let values%118#0: uint64 = (extract_uint64 arr7#0 114u)
        let tmp%149#0: bool = (== values%118#0 4u)
        goto tmp%149#0 ? block@157 : block@159
    block@157: // and_contd_L102
        let values%119#0: uint64 = (extract_uint64 arr7#0 122u)
        let tmp%150#0: bool = (== values%119#0 5u)
        goto tmp%150#0 ? block@158 : block@159
    block@158: // bool_true_L102
        let and_result%13#0: bool = 1u
        goto block@160
    block@159: // bool_false_L102
        let and_result%13#1: bool = 0u
        goto block@160
    block@160: // bool_merge_L102
        let and_result%13#2: bool = φ(and_result%13#0 <- block@158, and_result%13#1 <- block@159)
        (assert and_result%13#2) // assert target is match for conditions
        let concat%13#0: Encoded(len+uint64[]) = (concat arr#16 fArr1#0) // on error: max array length exceeded
        let extract_to_end%16#0: bytes = ((extract 2 0) concat%13#0)
        let len%9#0: uint64 = (len extract_to_end%16#0)
        let div_floor%9#0: uint64 = (/ len%9#0 8u)
        let as_bytes%16#0: bytes[8] = (itob div_floor%9#0)
        let as_u16_bytes%16#0: bytes = ((extract 6 2) as_bytes%16#0)
        let arr8#0: Encoded(len+uint64[]) = ((replace2 0) concat%13#0 as_u16_bytes%16#0)
        let array_length%30#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%151#0: bool = (== array_length%30#0 15u)
        (assert tmp%151#0)
        goto tmp%151#0 ? block@161 : block@177
    block@161: // and_contd_L106
        let values%120#0: uint64 = (extract_uint64 arr8#0 2u)
        let tmp%153#0: bool = (== values%120#0 1u)
        goto tmp%153#0 ? block@162 : block@177
    block@162: // and_contd_L106
        let values%121#0: uint64 = (extract_uint64 arr8#0 10u)
        let tmp%154#0: bool = (== values%121#0 10u)
        goto tmp%154#0 ? block@163 : block@177
    block@163: // and_contd_L106
        let values%122#0: uint64 = (extract_uint64 arr8#0 18u)
        let tmp%155#0: bool = (== values%122#0 3u)
        goto tmp%155#0 ? block@164 : block@177
    block@164: // and_contd_L106
        let values%123#0: uint64 = (extract_uint64 arr8#0 26u)
        let tmp%156#0: bool = (== values%123#0 4u)
        goto tmp%156#0 ? block@165 : block@177
    block@165: // and_contd_L106
        let values%124#0: uint64 = (extract_uint64 arr8#0 34u)
        let tmp%157#0: bool = (== values%124#0 1u)
        goto tmp%157#0 ? block@166 : block@177
    block@166: // and_contd_L106
        let values%125#0: uint64 = (extract_uint64 arr8#0 42u)
        let tmp%158#0: bool = (== values%125#0 10u)
        goto tmp%158#0 ? block@167 : block@177
    block@167: // and_contd_L106
        let values%126#0: uint64 = (extract_uint64 arr8#0 50u)
        let tmp%159#0: bool = (== values%126#0 3u)
        goto tmp%159#0 ? block@168 : block@177
    block@168: // and_contd_L106
        let values%127#0: uint64 = (extract_uint64 arr8#0 58u)
        let tmp%160#0: bool = (== values%127#0 4u)
        goto tmp%160#0 ? block@169 : block@177
    block@169: // and_contd_L106
        let values%128#0: uint64 = (extract_uint64 arr8#0 66u)
        let tmp%161#0: bool = (== values%128#0 11u)
        goto tmp%161#0 ? block@170 : block@177
    block@170: // and_contd_L106
        let values%129#0: uint64 = (extract_uint64 arr8#0 74u)
        let tmp%162#0: bool = (== values%129#0 12u)
        goto tmp%162#0 ? block@171 : block@177
    block@171: // and_contd_L106
        let values%130#0: uint64 = (extract_uint64 arr8#0 82u)
        let tmp%163#0: bool = (== values%130#0 13u)
        goto tmp%163#0 ? block@172 : block@177
    block@172: // and_contd_L106
        let values%131#0: uint64 = (extract_uint64 arr8#0 90u)
        goto values%131#0 ? block@177 : block@173
    block@173: // and_contd_L106
        let values%132#0: uint64 = (extract_uint64 arr8#0 98u)
        goto values%132#0 ? block@177 : block@174
    block@174: // and_contd_L106
        let values%133#0: uint64 = (extract_uint64 arr8#0 106u)
        goto values%133#0 ? block@177 : block@175
    block@175: // and_contd_L106
        let values%134#0: uint64 = (extract_uint64 arr8#0 114u)
        goto values%134#0 ? block@177 : block@176
    block@176: // bool_true_L106
        let and_result%14#0: bool = 1u
        goto block@178
    block@177: // bool_false_L106
        let and_result%14#1: bool = 0u
        goto block@178
    block@178: // bool_merge_L106
        let and_result%14#2: bool = φ(and_result%14#0 <- block@176, and_result%14#1 <- block@177)
        (assert and_result%14#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: Encoded(uint64[50])) -> void:
    block@0: // L109
        let values%1#0: uint64 = (extract_uint64 y#0 0u)
        let tmp%0#0: bool = (! values%1#0)
        (assert tmp%0#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: Encoded(uint64,uint64)) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L164
        let x#0: uint64 = (extract_uint64 p#0 0u)
        let y#0: uint64 = (extract_uint64 p#0 8u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob x#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob y#0)
        let aggregate%head%1#1: bytes = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = (concat 0x0001 aggregate%head%1#1)
        let array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#0: bool = (== array_length%0#0 1u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // and_contd_L169
        let aggregate%encoded_element%0#1: bytes = ((extract 2 16) myVectors#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 0u)
        let tmp%2#0: bool = (== values%2#0 x#0)
        goto tmp%2#0 ? block@2 : block@4
    block@2: // and_contd_L169
        let values%3#0: uint64 = (extract_uint64 aggregate%encoded_element%0#1 8u)
        let tmp%3#0: bool = (== values%3#0 y#0)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // bool_true_L169
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L169
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L169
        let and_result%0#2: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        (assert and_result%0#2) // assert target is match for conditions
        return myVectors#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: Encoded(len+uint64[]), readOnly: Encoded(len+uint64[])) -> void:
    block@0: // L189
        let values%0#0: uint64 = (extract_uint64 mutable#0 10u)
        let tmp%0#0: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%0#0)
        let mutable#1: Encoded(len+uint64[]) = ((replace2 10) mutable#0 aggregate%val_as_bytes%1#1)
        let values%1#0: uint64 = (extract_uint64 mutable#1 10u)
        let tmp%1#0: bool = (!= values%1#0 values%0#0)
        (assert tmp%1#0) // These should not match
        let mutable#2: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(mutable#1)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: Encoded(len+uint64[])) -> Encoded(len+uint64[]):
    block@0: // L215
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let a#1: Encoded(len+uint64[]) = ((replace2 2) a#0 aggregate%val_as_bytes%0#1)
        return a#1