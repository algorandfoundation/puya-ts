main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@3, method "doThings()void" => block@4, method "arc4Interop()void" => block@5, * => block@12}
    block@3: // buildArray_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // doThings_route_L10
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // arc4Interop_route_L41
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L5
        let tmp%17#0: uint64 = (txn OnCompletion)
        goto tmp%17#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L5
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L5
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@9, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> uint64[]:
    block@0: // L6
        let array%sub_item%0#1: bytes[8] = (itob 1u)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let array%sub_item%1#1: bytes[8] = (itob 2u)
        let array%encoded%1#1: uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: uint64[] = (concat array%data%0#1 array%encoded%1#1)
        let array%sub_item%2#1: bytes[8] = (itob 3u)
        let array%encoded%2#1: uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: uint64[] = (concat array%data%1#1 array%encoded%2#1)
        let array%sub_item%3#1: bytes[8] = (itob 4u)
        let array%encoded%3#1: uint64[] = (concat 0x array%sub_item%3#1)
        let array%data%3#1: uint64[] = (concat array%data%2#1 array%encoded%3#1)
        let encoded%0#0: uint64[] = array%data%3#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 encoded%0#0)
        return concat_result%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L10
        let arr#0: uint64[] = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 4u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // and_contd_L13
        let tmp%2#0: uint64 = (extract_uint64 arr#0 2u)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        goto tmp%3#0 ? block@2 : block@6
    block@2: // and_contd_L13
        let tmp%4#0: uint64 = (extract_uint64 arr#0 10u)
        let tmp%5#0: bool = (== tmp%4#0 2u)
        goto tmp%5#0 ? block@3 : block@6
    block@3: // and_contd_L13
        let tmp%6#0: uint64 = (extract_uint64 arr#0 18u)
        let tmp%7#0: bool = (== tmp%6#0 3u)
        goto tmp%7#0 ? block@4 : block@6
    block@4: // and_contd_L13
        let tmp%8#0: uint64 = (extract_uint64 arr#0 26u)
        let tmp%9#0: bool = (== tmp%8#0 4u)
        goto tmp%9#0 ? block@5 : block@6
    block@5: // bool_true_L13
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L13
        let and_result%0#1: bool = 0u
        goto block@7
    block@7: // bool_merge_L13
        let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6)
        (assert and_result%0#2) // assert target is match for conditions
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let array%sub_item%0#1: bytes[8] = (itob 5u)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let encoded%0#0: uint64[] = array%data%0#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 encoded%0#0)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) concat_result%0#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%2#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#3: uint64[] = (concat len_16_bit%1#0 concatenated%1#0)
        let tmp%10#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%11#0: bool = (== tmp%10#0 5u)
        goto tmp%11#0 ? block@8 : block@14
    block@8: // and_contd_L18
        let tmp%12#0: uint64 = (extract_uint64 arr#3 2u)
        let tmp%13#0: bool = (== tmp%12#0 1u)
        goto tmp%13#0 ? block@9 : block@14
    block@9: // and_contd_L18
        let tmp%14#0: uint64 = (extract_uint64 arr#3 10u)
        let tmp%15#0: bool = (== tmp%14#0 2u)
        goto tmp%15#0 ? block@10 : block@14
    block@10: // and_contd_L18
        let tmp%16#0: uint64 = (extract_uint64 arr#3 18u)
        let tmp%17#0: bool = (== tmp%16#0 3u)
        goto tmp%17#0 ? block@11 : block@14
    block@11: // and_contd_L18
        let tmp%18#0: uint64 = (extract_uint64 arr#3 26u)
        let tmp%19#0: bool = (== tmp%18#0 4u)
        goto tmp%19#0 ? block@12 : block@14
    block@12: // and_contd_L18
        let tmp%20#0: uint64 = (extract_uint64 arr#3 34u)
        let tmp%21#0: bool = (== tmp%20#0 5u)
        goto tmp%21#0 ? block@13 : block@14
    block@13: // bool_true_L18
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L18
        let and_result%1#1: bool = 0u
        goto block@15
    block@15: // bool_merge_L18
        let and_result%1#2: bool = φ(and_result%1#0 <- block@13, and_result%1#1 <- block@14)
        (assert and_result%1#2) // assert target is match for conditions
        let tmp%23#0: uint64 = (- tmp%10#0 1u)
        let array_head_and_tail%9#0: bytes = ((extract 2 0) arr#3)
        let item_offset%9#0: uint64 = (* tmp%23#0 8u)
        let top#0: uint64 = (extract_uint64 array_head_and_tail%9#0 item_offset%9#0)
        let tmp%24#0: bool = (== top#0 5u)
        (assert tmp%24#0)
        let array%sub_item%1#1: bytes[8] = (itob 1u)
        let array%encoded%1#1: uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: uint64[] = (concat 0x array%encoded%1#1)
        let array%sub_item%2#1: bytes[8] = (itob 2u)
        let array%encoded%2#1: uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: uint64[] = (concat array%data%1#1 array%encoded%2#1)
        let array%sub_item%3#1: bytes[8] = (itob 3u)
        let array%encoded%3#1: uint64[] = (concat 0x array%sub_item%3#1)
        let array%data%3#1: uint64[] = (concat array%data%2#1 array%encoded%3#1)
        let array%sub_item%4#1: bytes[8] = (itob 4u)
        let array%encoded%4#1: uint64[] = (concat 0x array%sub_item%4#1)
        let array%data%4#1: uint64[] = (concat array%data%3#1 array%encoded%4#1)
        let encoded%1#0: uint64[] = array%data%4#1
        let byte_len%2#0: uint64 = (len encoded%1#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr#6: uint64[] = (concat len_16_bit%2#0 encoded%1#0)
        let tmp%25#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%26#0: bool = (== tmp%25#0 4u)
        goto tmp%26#0 ? block@16 : block@21
    block@16: // and_contd_L27
        let tmp%27#0: uint64 = (extract_uint64 arr#6 2u)
        let tmp%28#0: bool = (== tmp%27#0 1u)
        goto tmp%28#0 ? block@17 : block@21
    block@17: // and_contd_L27
        let tmp%29#0: uint64 = (extract_uint64 arr#6 10u)
        let tmp%30#0: bool = (== tmp%29#0 2u)
        goto tmp%30#0 ? block@18 : block@21
    block@18: // and_contd_L27
        let tmp%31#0: uint64 = (extract_uint64 arr#6 18u)
        let tmp%32#0: bool = (== tmp%31#0 3u)
        goto tmp%32#0 ? block@19 : block@21
    block@19: // and_contd_L27
        let tmp%33#0: uint64 = (extract_uint64 arr#6 26u)
        let tmp%34#0: bool = (== tmp%33#0 4u)
        goto tmp%34#0 ? block@20 : block@21
    block@20: // bool_true_L27
        let and_result%2#0: bool = 1u
        goto block@22
    block@21: // bool_false_L27
        let and_result%2#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L27
        let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
        (assert and_result%2#2) // assert target is match for conditions
        let val_as_bytes%0#0: bytes[8] = (itob 10u)
        let index_is_in_bounds%0#0: bool = (< 1u tmp%25#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let arr#9: uint64[] = ((replace2 10) arr#6 val_as_bytes%0#0)
        let tmp%35#0: uint64 = (extract_uint16 arr#9 0u)
        let tmp%36#0: bool = (== tmp%35#0 4u)
        goto tmp%36#0 ? block@23 : block@28
    block@23: // and_contd_L32
        let tmp%37#0: uint64 = (extract_uint64 arr#9 2u)
        let tmp%38#0: bool = (== tmp%37#0 1u)
        goto tmp%38#0 ? block@24 : block@28
    block@24: // and_contd_L32
        let tmp%39#0: uint64 = (extract_uint64 arr#9 10u)
        let tmp%40#0: bool = (== tmp%39#0 10u)
        goto tmp%40#0 ? block@25 : block@28
    block@25: // and_contd_L32
        let tmp%41#0: uint64 = (extract_uint64 arr#9 18u)
        let tmp%42#0: bool = (== tmp%41#0 3u)
        goto tmp%42#0 ? block@26 : block@28
    block@26: // and_contd_L32
        let tmp%43#0: uint64 = (extract_uint64 arr#9 26u)
        let tmp%44#0: bool = (== tmp%43#0 4u)
        goto tmp%44#0 ? block@27 : block@28
    block@27: // bool_true_L32
        let and_result%3#0: bool = 1u
        goto block@29
    block@28: // bool_false_L32
        let and_result%3#1: bool = 0u
        goto block@29
    block@29: // bool_merge_L32
        let and_result%3#2: bool = φ(and_result%3#0 <- block@27, and_result%3#1 <- block@28)
        (assert and_result%3#2) // assert target is match for conditions
        let expr_value_trimmed%4#0: bytes = ((extract 2 0) arr#9)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%4#0 expr_value_trimmed%4#0)
        let byte_len%3#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%3#0 8u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let expr_value_trimmed%6#0: bytes = ((extract 2 0) concat_result%3#0)
        let array%sub_item%5#1: bytes[8] = (itob 11u)
        let array%encoded%5#1: uint64[] = (concat 0x array%sub_item%5#1)
        let array%data%5#1: uint64[] = (concat 0x array%encoded%5#1)
        let encoded%2#0: uint64[] = array%data%5#1
        let concatenated%4#0: bytes = (concat expr_value_trimmed%6#0 encoded%2#0)
        let byte_len%4#0: uint64 = (len concatenated%4#0)
        let len_%4#0: uint64 = (/ byte_len%4#0 8u)
        let as_bytes%4#0: bytes[8] = (itob len_%4#0)
        let len_16_bit%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let concat_result%4#0: bytes = (concat len_16_bit%4#0 concatenated%4#0)
        let expr_value_trimmed%7#0: bytes = ((extract 2 0) concat_result%4#0)
        let array%sub_item%6#1: bytes[8] = (itob 12u)
        let array%encoded%6#1: uint64[] = (concat 0x array%sub_item%6#1)
        let array%data%6#1: uint64[] = (concat 0x array%encoded%6#1)
        let array%sub_item%7#1: bytes[8] = (itob 13u)
        let array%encoded%7#1: uint64[] = (concat 0x array%sub_item%7#1)
        let array%data%7#1: uint64[] = (concat array%data%6#1 array%encoded%7#1)
        let encoded%3#0: uint64[] = array%data%7#1
        let concatenated%5#0: bytes = (concat expr_value_trimmed%7#0 encoded%3#0)
        let byte_len%5#0: uint64 = (len concatenated%5#0)
        let len_%5#0: uint64 = (/ byte_len%5#0 8u)
        let as_bytes%5#0: bytes[8] = (itob len_%5#0)
        let len_16_bit%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let arr#12: uint64[] = (concat len_16_bit%5#0 concatenated%5#0)
        let tmp%45#0: uint64 = (extract_uint16 arr#12 0u)
        let tmp%46#0: bool = (== tmp%45#0 11u)
        goto tmp%46#0 ? block@30 : block@42
    block@30: // and_contd_L38
        let tmp%47#0: uint64 = (extract_uint64 arr#12 2u)
        let tmp%48#0: bool = (== tmp%47#0 1u)
        goto tmp%48#0 ? block@31 : block@42
    block@31: // and_contd_L38
        let tmp%49#0: uint64 = (extract_uint64 arr#12 10u)
        let tmp%50#0: bool = (== tmp%49#0 10u)
        goto tmp%50#0 ? block@32 : block@42
    block@32: // and_contd_L38
        let tmp%51#0: uint64 = (extract_uint64 arr#12 18u)
        let tmp%52#0: bool = (== tmp%51#0 3u)
        goto tmp%52#0 ? block@33 : block@42
    block@33: // and_contd_L38
        let tmp%53#0: uint64 = (extract_uint64 arr#12 26u)
        let tmp%54#0: bool = (== tmp%53#0 4u)
        goto tmp%54#0 ? block@34 : block@42
    block@34: // and_contd_L38
        let tmp%55#0: uint64 = (extract_uint64 arr#12 34u)
        let tmp%56#0: bool = (== tmp%55#0 1u)
        goto tmp%56#0 ? block@35 : block@42
    block@35: // and_contd_L38
        let tmp%57#0: uint64 = (extract_uint64 arr#12 42u)
        let tmp%58#0: bool = (== tmp%57#0 10u)
        goto tmp%58#0 ? block@36 : block@42
    block@36: // and_contd_L38
        let tmp%59#0: uint64 = (extract_uint64 arr#12 50u)
        let tmp%60#0: bool = (== tmp%59#0 3u)
        goto tmp%60#0 ? block@37 : block@42
    block@37: // and_contd_L38
        let tmp%61#0: uint64 = (extract_uint64 arr#12 58u)
        let tmp%62#0: bool = (== tmp%61#0 4u)
        goto tmp%62#0 ? block@38 : block@42
    block@38: // and_contd_L38
        let tmp%63#0: uint64 = (extract_uint64 arr#12 66u)
        let tmp%64#0: bool = (== tmp%63#0 11u)
        goto tmp%64#0 ? block@39 : block@42
    block@39: // and_contd_L38
        let tmp%65#0: uint64 = (extract_uint64 arr#12 74u)
        let tmp%66#0: bool = (== tmp%65#0 12u)
        goto tmp%66#0 ? block@40 : block@42
    block@40: // and_contd_L38
        let tmp%67#0: uint64 = (extract_uint64 arr#12 82u)
        let tmp%68#0: bool = (== tmp%67#0 13u)
        goto tmp%68#0 ? block@41 : block@42
    block@41: // bool_true_L38
        let and_result%4#0: bool = 1u
        goto block@43
    block@42: // bool_false_L38
        let and_result%4#1: bool = 0u
        goto block@43
    block@43: // bool_merge_L38
        let and_result%4#2: bool = φ(and_result%4#0 <- block@41, and_result%4#1 <- block@42)
        (assert and_result%4#2) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
    block@0: // L41
        let array%encoded%0#1: bytes[4][] = (concat 0x 0x0000007b)
        let array%data%0#1: bytes[4][] = (concat 0x array%encoded%0#1)
        let array%encoded%1#1: bytes[4][] = (concat 0x 0x0000007b)
        let array%data%1#1: bytes[4][] = (concat array%data%0#1 array%encoded%1#1)
        let encoded%0#0: bytes[4][] = array%data%1#1
        let byte_len%0#0: uint64 = (len encoded%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 4u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let a1#0: bytes[4][] = (concat len_16_bit%0#0 encoded%0#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) a1#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 0x0000007b0000007b)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) concat_result%1#0)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%3#0 0x0000007b0000007b)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 4u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let a1#1: bytes[4][] = (concat len_16_bit%2#0 concatenated%2#0)
        let tmp%0#0: uint64 = (extract_uint16 a1#1 0u)
        let tmp%1#0: bool = (== tmp%0#0 6u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // and_contd_L50
        let arc4_item%0#0: bytes = ((extract 2 4) a1#1)
        let tmp%2#0: bool = (== arc4_item%0#0 0x0000007b)
        goto tmp%2#0 ? block@2 : block@8
    block@2: // and_contd_L50
        let arc4_item%1#0: bytes = ((extract 6 4) a1#1)
        let tmp%3#0: bool = (== arc4_item%1#0 0x0000007b)
        goto tmp%3#0 ? block@3 : block@8
    block@3: // and_contd_L50
        let arc4_item%2#0: bytes = ((extract 10 4) a1#1)
        let tmp%4#0: bool = (== arc4_item%2#0 0x0000007b)
        goto tmp%4#0 ? block@4 : block@8
    block@4: // and_contd_L50
        let arc4_item%3#0: bytes = ((extract 14 4) a1#1)
        let tmp%5#0: bool = (== arc4_item%3#0 0x0000007b)
        goto tmp%5#0 ? block@5 : block@8
    block@5: // and_contd_L50
        let arc4_item%4#0: bytes = ((extract 18 4) a1#1)
        let tmp%6#0: bool = (== arc4_item%4#0 0x0000007b)
        goto tmp%6#0 ? block@6 : block@8
    block@6: // and_contd_L50
        let arc4_item%5#0: bytes = ((extract 22 4) a1#1)
        let tmp%7#0: bool = (== arc4_item%5#0 0x0000007b)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // bool_true_L50
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L50
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L50
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // assert target is match for conditions
        return 