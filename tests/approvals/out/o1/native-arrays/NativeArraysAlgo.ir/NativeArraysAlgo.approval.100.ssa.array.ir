main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@21
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "readonlyArray()void" => block@3, method "arrayInObject()void" => block@4, method "buildArray()uint64[]" => block@5, method "arrayFromCtor()uint64[]" => block@6, method "buildReadonly()uint64[]" => block@7, method "doThings()void" => block@8, method "fixedArray(uint64[50])void" => block@9, method "arc4Interop()void" => block@10, method "structs((uint64,uint64))(uint64,uint64)[]" => block@11, method "booleans()bool[]" => block@12, method "booleansStatic()(bool,bool,bool)" => block@13, method "arc4Booleans()bool[]" => block@14, method "arc4BooleansStatic()(bool,bool,bool)" => block@15, method "aliasing(uint64[],uint64[])void" => block@16, method "receiveMutable(uint64[])void" => block@17, method "receiveReadonly(uint64[])void" => block@18, * => block@25}
    block@3: // readonlyArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.readonlyArray()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@26
    block@4: // arrayInObject_route_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayInObject()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@26
    block@5: // buildArray_route_L30
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let tmp%15#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@26
    block@6: // arrayFromCtor_route_L34
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let tmp%21#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor()
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@26
    block@7: // buildReadonly_route_L38
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let tmp%27#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly()
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@26
    block@8: // doThings_route_L42
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 1u
        goto block@26
    block@9: // fixedArray_route_L109
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64[50])%0#0: Encoded(uint64[50]) = (txna ApplicationArgs 1)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(reinterpret_Encoded(uint64[50])%0#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6: bool = 1u
        goto block@26
    block@10: // arc4Interop_route_L157
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7: bool = 1u
        goto block@26
    block@11: // structs_route_L170
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%45#0: Encoded(len+(uint64,uint64)[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8: bool = 1u
        goto block@26
    block@12: // booleans_route_L179
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        let tmp%51#0: Encoded(len+bool1[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans()
        let tmp%52#0: bytes = (concat 0x151f7c75 tmp%51#0)
        (log tmp%52#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9: bool = 1u
        goto block@26
    block@13: // booleansStatic_route_L183
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        (assert tmp%55#0) // can only call when not creating
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u 0u)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u 1u)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%set_bit%1#0)
        let aggregate%as_Encoded(bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1) = aggregate%head%0#0
        let tmp%60#0: Encoded(bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1)%0#0
        let tmp%61#0: bytes = (concat 0x151f7c75 tmp%60#0)
        (log tmp%61#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10: bool = 1u
        goto block@26
    block@14: // arc4Booleans_route_L187
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        (assert tmp%64#0) // can only call when not creating
        let tmp%66#0: Encoded(len+bool1[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans()
        let tmp%67#0: bytes = (concat 0x151f7c75 tmp%66#0)
        (log tmp%67#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11: bool = 1u
        goto block@26
    block@15: // arc4BooleansStatic_route_L191
        let tmp%68#0: uint64 = (txn OnCompletion)
        let tmp%69#0: bool = (! tmp%68#0)
        (assert tmp%69#0) // OnCompletion is not NoOp
        let tmp%70#0: uint64 = (txn ApplicationID)
        (assert tmp%70#0) // can only call when not creating
        let (tmp%72#0: Encoded(bool8), tmp%73#0: Encoded(bool8), tmp%74#0: Encoded(bool8)) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic()
        let aggregate%get_bit%0#0: bool = (getbit tmp%73#0 0u)
        let aggregate%set_bit%2#0: Encoded(bool8) = (setbit tmp%72#0 1u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: bool = (getbit tmp%74#0 0u)
        let aggregate%set_bit%3#0: Encoded(bool8) = (setbit aggregate%set_bit%2#0 2u aggregate%get_bit%1#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%set_bit%3#0)
        let aggregate%as_Encoded(bool1,bool1,bool1)%1#0: Encoded(bool1,bool1,bool1) = aggregate%head%1#0
        let tmp%75#0: Encoded(bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1)%1#0
        let tmp%76#0: bytes = (concat 0x151f7c75 tmp%75#0)
        (log tmp%76#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12: bool = 1u
        goto block@26
    block@16: // aliasing_route_L195
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        (assert tmp%79#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 2)
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(reinterpret_Encoded(len+uint64[])%0#0, reinterpret_Encoded(len+uint64[])%1#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13: bool = 1u
        goto block@26
    block@17: // receiveMutable_route_L221
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let receiveMutable%0#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(reinterpret_Encoded(len+uint64[])%2#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14: bool = 1u
        goto block@26
    block@18: // receiveReadonly_route_L225
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15: bool = 1u
        goto block@26
    block@21: // bare_routing_L6
        let tmp%89#0: uint64 = (txn OnCompletion)
        goto tmp%89#0 ? block@25 : block@22
    block@22: // __algots__.defaultCreate_L6
        let tmp%90#0: uint64 = (txn ApplicationID)
        let tmp%91#0: bool = (! tmp%90#0)
        (assert tmp%91#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16: bool = 1u
        goto block@26
    block@25: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#17: bool = 0u
        goto block@26
    block@26: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@7, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@8, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#6 <- block@9, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#7 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#8 <- block@11, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#9 <- block@12, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#10 <- block@13, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#11 <- block@14, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#12 <- block@15, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#13 <- block@16, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#14 <- block@17, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#15 <- block@18, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#16 <- block@22, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#17 <- block@25)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.readonlyArray() -> void:
    block@0: // L7
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let myArray#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%3#0
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat myArray#0 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 myArray#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let myArray#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%4#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let extract_to_end%0#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat myArray#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let myArray#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#0
        let aggregate%total_length%0#0: uint64 = (len myArray#2)
        let aggregate%array_trimmed%0#0: bytes = (substring3 myArray#2 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 2u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 myArray#2 aggregate%write_offset_with_length_header%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let myArray#3: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 myArray#3 0u)
        let tmp%5#0: uint64 = aggregate%array_length%0#0
        let tmp%6#0: bool = (== tmp%5#0 5u)
        let aggregate%total_length%1#0: uint64 = (len myArray#3)
        let aggregate%array_trimmed%1#0: bytes = (substring3 myArray#3 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%7#0: bool = (== values%0#0 1u)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        let aggregate%total_length%2#0: uint64 = (len myArray#3)
        let aggregate%array_trimmed%2#0: bytes = (substring3 myArray#3 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%9#0: bool = (== values%1#0 2u)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let aggregate%total_length%3#0: uint64 = (len myArray#3)
        let aggregate%array_trimmed%3#0: bytes = (substring3 myArray#3 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%11#0: bool = (== values%2#0 3u)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let aggregate%total_length%4#0: uint64 = (len myArray#3)
        let aggregate%array_trimmed%4#0: bytes = (substring3 myArray#3 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%13#0: bool = (== values%3#0 5u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        let aggregate%total_length%5#0: uint64 = (len myArray#3)
        let aggregate%array_trimmed%5#0: bytes = (substring3 myArray#3 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%15#0: bool = (== values%4#0 4u)
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayInObject() -> void:
    block@0: // L20
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1337u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let person.favouriteNumbers#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat person.favouriteNumbers#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 person.favouriteNumbers#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let person.favouriteNumbers#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 person.favouriteNumbers#1 0u)
        let length#0: uint64 = aggregate%array_length%0#0
        let tmp%2#0: bool = (== length#0 2u)
        (assert tmp%2#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray() -> Encoded(len+uint64[]):
    block@0: // L30
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arrayFromCtor() -> Encoded(len+uint64[]):
    block@0: // L34
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildReadonly() -> Encoded(len+uint64[]):
    block@0: // L38
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@2: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 1410u tmp%1#1)
        goto tmp%2#1 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let arr#0: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.buildArray()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let (tmp%3#0: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 8u)
        let tmp%5#0: uint64 = (btoi tmp%3#0)
        let tmp%6#0: bool = (== tmp%5#0 5u)
        (assert tmp%6#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%7#0: uint64 = aggregate%array_length%0#0
        let tmp%8#0: bool = (== tmp%7#0 4u)
        let aggregate%total_length%0#0: uint64 = (len arr#2)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#2 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%9#0: bool = (== values%0#0 1u)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let aggregate%total_length%1#0: uint64 = (len arr#2)
        let aggregate%array_trimmed%1#0: bytes = (substring3 arr#2 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%11#0: bool = (== values%1#0 2u)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let aggregate%total_length%2#0: uint64 = (len arr#2)
        let aggregate%array_trimmed%2#0: bytes = (substring3 arr#2 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%13#0: bool = (== values%2#0 3u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        let aggregate%total_length%3#0: uint64 = (len arr#2)
        let aggregate%array_trimmed%3#0: bytes = (substring3 arr#2 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%15#0: bool = (== values%3#0 4u)
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // assert target is match for conditions
        (assert tmp%9#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%18#0: uint64 = aggregate%array_length%1#0
        let tmp%19#0: uint64 = (- tmp%18#0 1u)
        let aggregate%total_length%4#0: uint64 = (len arr#2)
        let aggregate%array_trimmed%4#0: bytes = (substring3 arr#2 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* tmp%19#0 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%20#0: bool = (== values%5#0 4u)
        (assert tmp%20#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr#2 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#3: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%23#0: uint64 = aggregate%array_length%2#0
        let tmp%24#0: bool = (== tmp%23#0 5u)
        let aggregate%total_length%5#0: uint64 = (len arr#3)
        let aggregate%array_trimmed%5#0: bytes = (substring3 arr#3 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%6#0: uint64 = (btoi array_item%6#0)
        let tmp%25#0: bool = (== values%6#0 1u)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        let aggregate%total_length%6#0: uint64 = (len arr#3)
        let aggregate%array_trimmed%6#0: bytes = (substring3 arr#3 2u aggregate%total_length%6#0)
        let aggregate%bytes_offset%6#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%6#0: bytes = (extract3 aggregate%array_trimmed%6#0 aggregate%bytes_offset%6#0 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%6#0
        let values%7#0: uint64 = (btoi array_item%7#0)
        let tmp%27#0: bool = (== values%7#0 2u)
        let tmp%28#0: bool = (&& tmp%26#0 tmp%27#0)
        let aggregate%total_length%7#0: uint64 = (len arr#3)
        let aggregate%array_trimmed%7#0: bytes = (substring3 arr#3 2u aggregate%total_length%7#0)
        let aggregate%bytes_offset%7#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%7#0: bytes = (extract3 aggregate%array_trimmed%7#0 aggregate%bytes_offset%7#0 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%7#0
        let values%8#0: uint64 = (btoi array_item%8#0)
        let tmp%29#0: bool = (== values%8#0 3u)
        let tmp%30#0: bool = (&& tmp%28#0 tmp%29#0)
        let aggregate%total_length%8#0: uint64 = (len arr#3)
        let aggregate%array_trimmed%8#0: bytes = (substring3 arr#3 2u aggregate%total_length%8#0)
        let aggregate%bytes_offset%8#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%8#0: bytes = (extract3 aggregate%array_trimmed%8#0 aggregate%bytes_offset%8#0 8u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint64) = aggregate%encoded_element%8#0
        let values%9#0: uint64 = (btoi array_item%9#0)
        let tmp%31#0: bool = (== values%9#0 4u)
        let tmp%32#0: bool = (&& tmp%30#0 tmp%31#0)
        let aggregate%total_length%9#0: uint64 = (len arr#3)
        let aggregate%array_trimmed%9#0: bytes = (substring3 arr#3 2u aggregate%total_length%9#0)
        let aggregate%bytes_offset%9#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%9#0: bytes = (extract3 aggregate%array_trimmed%9#0 aggregate%bytes_offset%9#0 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%9#0
        let values%10#0: uint64 = (btoi array_item%10#0)
        let tmp%33#0: bool = (== values%10#0 5u)
        let tmp%34#0: bool = (&& tmp%32#0 tmp%33#0)
        (assert tmp%34#0) // assert target is match for conditions
        let (tmp%35#0: bytes, arr#4: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#3, 8u)
        let top#0: uint64 = (btoi tmp%35#0)
        let tmp%38#0: bool = (== top#0 5u)
        (assert tmp%38#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%39#0: uint64 = aggregate%array_length%3#0
        let tmp%40#0: bool = (== tmp%39#0 4u)
        let aggregate%total_length%10#0: uint64 = (len arr#4)
        let aggregate%array_trimmed%10#0: bytes = (substring3 arr#4 2u aggregate%total_length%10#0)
        let aggregate%bytes_offset%10#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%10#0: bytes = (extract3 aggregate%array_trimmed%10#0 aggregate%bytes_offset%10#0 8u) // on error: index access is out of bounds
        let array_item%11#0: Encoded(uint64) = aggregate%encoded_element%10#0
        let values%11#0: uint64 = (btoi array_item%11#0)
        let tmp%41#0: bool = (== values%11#0 1u)
        let tmp%42#0: bool = (&& tmp%40#0 tmp%41#0)
        let aggregate%total_length%11#0: uint64 = (len arr#4)
        let aggregate%array_trimmed%11#0: bytes = (substring3 arr#4 2u aggregate%total_length%11#0)
        let aggregate%bytes_offset%11#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%11#0: bytes = (extract3 aggregate%array_trimmed%11#0 aggregate%bytes_offset%11#0 8u) // on error: index access is out of bounds
        let array_item%12#0: Encoded(uint64) = aggregate%encoded_element%11#0
        let values%12#0: uint64 = (btoi array_item%12#0)
        let tmp%43#0: bool = (== values%12#0 2u)
        let tmp%44#0: bool = (&& tmp%42#0 tmp%43#0)
        let aggregate%total_length%12#0: uint64 = (len arr#4)
        let aggregate%array_trimmed%12#0: bytes = (substring3 arr#4 2u aggregate%total_length%12#0)
        let aggregate%bytes_offset%12#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%12#0: bytes = (extract3 aggregate%array_trimmed%12#0 aggregate%bytes_offset%12#0 8u) // on error: index access is out of bounds
        let array_item%13#0: Encoded(uint64) = aggregate%encoded_element%12#0
        let values%13#0: uint64 = (btoi array_item%13#0)
        let tmp%45#0: bool = (== values%13#0 3u)
        let tmp%46#0: bool = (&& tmp%44#0 tmp%45#0)
        let aggregate%total_length%13#0: uint64 = (len arr#4)
        let aggregate%array_trimmed%13#0: bytes = (substring3 arr#4 2u aggregate%total_length%13#0)
        let aggregate%bytes_offset%13#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%13#0: bytes = (extract3 aggregate%array_trimmed%13#0 aggregate%bytes_offset%13#0 8u) // on error: index access is out of bounds
        let array_item%14#0: Encoded(uint64) = aggregate%encoded_element%13#0
        let values%14#0: uint64 = (btoi array_item%14#0)
        let tmp%47#0: bool = (== values%14#0 4u)
        let tmp%48#0: bool = (&& tmp%46#0 tmp%47#0)
        (assert tmp%48#0) // assert target is match for conditions
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 10u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%total_length%14#0: uint64 = (len arr#4)
        let aggregate%array_trimmed%14#0: bytes = (substring3 arr#4 2u aggregate%total_length%14#0)
        let aggregate%bytes_offset%14#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%14#0: bytes = (extract3 aggregate%array_trimmed%14#0 aggregate%bytes_offset%14#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 1u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 arr#4 aggregate%write_offset_with_length_header%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let arr#5: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#0
        let aggregate%total_length%15#0: uint64 = (len arr#5)
        let aggregate%array_trimmed%15#0: bytes = (substring3 arr#5 2u aggregate%total_length%15#0)
        let aggregate%bytes_offset%15#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%15#0: bytes = (extract3 aggregate%array_trimmed%15#0 aggregate%bytes_offset%15#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%write_offset_with_length_header%1#0: uint64 = (+ aggregate%write_offset%1#0 2u)
        let aggregate%updated_array%1#0: bytes = (replace3 arr#5 aggregate%write_offset_with_length_header%1#0 encoded_value%1#0) // on error: index access is out of bounds
        let arr2#0: Encoded(len+uint64[]) = aggregate%updated_array%1#0
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%49#0: uint64 = aggregate%array_length%4#0
        let tmp%50#0: bool = (== tmp%49#0 4u)
        let aggregate%total_length%16#0: uint64 = (len arr#5)
        let aggregate%array_trimmed%16#0: bytes = (substring3 arr#5 2u aggregate%total_length%16#0)
        let aggregate%bytes_offset%16#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%16#0: bytes = (extract3 aggregate%array_trimmed%16#0 aggregate%bytes_offset%16#0 8u) // on error: index access is out of bounds
        let array_item%15#0: Encoded(uint64) = aggregate%encoded_element%16#0
        let values%15#0: uint64 = (btoi array_item%15#0)
        let tmp%51#0: bool = (== values%15#0 1u)
        let tmp%52#0: bool = (&& tmp%50#0 tmp%51#0)
        let aggregate%total_length%17#0: uint64 = (len arr#5)
        let aggregate%array_trimmed%17#0: bytes = (substring3 arr#5 2u aggregate%total_length%17#0)
        let aggregate%bytes_offset%17#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%17#0: bytes = (extract3 aggregate%array_trimmed%17#0 aggregate%bytes_offset%17#0 8u) // on error: index access is out of bounds
        let array_item%16#0: Encoded(uint64) = aggregate%encoded_element%17#0
        let values%16#0: uint64 = (btoi array_item%16#0)
        let tmp%53#0: bool = (== values%16#0 10u)
        let tmp%54#0: bool = (&& tmp%52#0 tmp%53#0)
        let aggregate%total_length%18#0: uint64 = (len arr#5)
        let aggregate%array_trimmed%18#0: bytes = (substring3 arr#5 2u aggregate%total_length%18#0)
        let aggregate%bytes_offset%18#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%18#0: bytes = (extract3 aggregate%array_trimmed%18#0 aggregate%bytes_offset%18#0 8u) // on error: index access is out of bounds
        let array_item%17#0: Encoded(uint64) = aggregate%encoded_element%18#0
        let values%17#0: uint64 = (btoi array_item%17#0)
        let tmp%55#0: bool = (== values%17#0 3u)
        let tmp%56#0: bool = (&& tmp%54#0 tmp%55#0)
        let aggregate%total_length%19#0: uint64 = (len arr#5)
        let aggregate%array_trimmed%19#0: bytes = (substring3 arr#5 2u aggregate%total_length%19#0)
        let aggregate%bytes_offset%19#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%19#0: bytes = (extract3 aggregate%array_trimmed%19#0 aggregate%bytes_offset%19#0 8u) // on error: index access is out of bounds
        let array_item%18#0: Encoded(uint64) = aggregate%encoded_element%19#0
        let values%18#0: uint64 = (btoi array_item%18#0)
        let tmp%57#0: bool = (== values%18#0 4u)
        let tmp%58#0: bool = (&& tmp%56#0 tmp%57#0)
        (assert tmp%58#0) // assert target is match for conditions
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%59#0: uint64 = aggregate%array_length%5#0
        let tmp%60#0: bool = (== tmp%59#0 4u)
        let aggregate%total_length%20#0: uint64 = (len arr2#0)
        let aggregate%array_trimmed%20#0: bytes = (substring3 arr2#0 2u aggregate%total_length%20#0)
        let aggregate%bytes_offset%20#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%20#0: bytes = (extract3 aggregate%array_trimmed%20#0 aggregate%bytes_offset%20#0 8u) // on error: index access is out of bounds
        let array_item%19#0: Encoded(uint64) = aggregate%encoded_element%20#0
        let values%19#0: uint64 = (btoi array_item%19#0)
        let tmp%61#0: bool = (== values%19#0 1u)
        let tmp%62#0: bool = (&& tmp%60#0 tmp%61#0)
        let aggregate%total_length%21#0: uint64 = (len arr2#0)
        let aggregate%array_trimmed%21#0: bytes = (substring3 arr2#0 2u aggregate%total_length%21#0)
        let aggregate%bytes_offset%21#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%21#0: bytes = (extract3 aggregate%array_trimmed%21#0 aggregate%bytes_offset%21#0 8u) // on error: index access is out of bounds
        let array_item%20#0: Encoded(uint64) = aggregate%encoded_element%21#0
        let values%20#0: uint64 = (btoi array_item%20#0)
        let tmp%63#0: bool = (== values%20#0 5u)
        let tmp%64#0: bool = (&& tmp%62#0 tmp%63#0)
        let aggregate%total_length%22#0: uint64 = (len arr2#0)
        let aggregate%array_trimmed%22#0: bytes = (substring3 arr2#0 2u aggregate%total_length%22#0)
        let aggregate%bytes_offset%22#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%22#0: bytes = (extract3 aggregate%array_trimmed%22#0 aggregate%bytes_offset%22#0 8u) // on error: index access is out of bounds
        let array_item%21#0: Encoded(uint64) = aggregate%encoded_element%22#0
        let values%21#0: uint64 = (btoi array_item%21#0)
        let tmp%65#0: bool = (== values%21#0 3u)
        let tmp%66#0: bool = (&& tmp%64#0 tmp%65#0)
        let aggregate%total_length%23#0: uint64 = (len arr2#0)
        let aggregate%array_trimmed%23#0: bytes = (substring3 arr2#0 2u aggregate%total_length%23#0)
        let aggregate%bytes_offset%23#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%23#0: bytes = (extract3 aggregate%array_trimmed%23#0 aggregate%bytes_offset%23#0 8u) // on error: index access is out of bounds
        let array_item%22#0: Encoded(uint64) = aggregate%encoded_element%23#0
        let values%22#0: uint64 = (btoi array_item%22#0)
        let tmp%67#0: bool = (== values%22#0 4u)
        let tmp%68#0: bool = (&& tmp%66#0 tmp%67#0)
        (assert tmp%68#0) // assert target is match for conditions
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 12u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 13u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%2#0
        let t1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#5)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#5 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 11u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64[])%1#0: Encoded(uint64[]) = aggregate%head%3#0
        let tmp%70#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#0
        let concat%3#0: Encoded(len+uint64[]) = (concat replace%2#0 tmp%70#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 replace%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat replace%3#0 t1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr#6: Encoded(len+uint64[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%71#0: uint64 = aggregate%array_length%6#0
        let tmp%72#0: bool = (== tmp%71#0 11u)
        let aggregate%total_length%24#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%24#0: bytes = (substring3 arr#6 2u aggregate%total_length%24#0)
        let aggregate%bytes_offset%24#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%24#0: bytes = (extract3 aggregate%array_trimmed%24#0 aggregate%bytes_offset%24#0 8u) // on error: index access is out of bounds
        let array_item%23#0: Encoded(uint64) = aggregate%encoded_element%24#0
        let values%23#0: uint64 = (btoi array_item%23#0)
        let tmp%73#0: bool = (== values%23#0 1u)
        let tmp%74#0: bool = (&& tmp%72#0 tmp%73#0)
        let aggregate%total_length%25#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%25#0: bytes = (substring3 arr#6 2u aggregate%total_length%25#0)
        let aggregate%bytes_offset%25#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%25#0: bytes = (extract3 aggregate%array_trimmed%25#0 aggregate%bytes_offset%25#0 8u) // on error: index access is out of bounds
        let array_item%24#0: Encoded(uint64) = aggregate%encoded_element%25#0
        let values%24#0: uint64 = (btoi array_item%24#0)
        let tmp%75#0: bool = (== values%24#0 10u)
        let tmp%76#0: bool = (&& tmp%74#0 tmp%75#0)
        let aggregate%total_length%26#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%26#0: bytes = (substring3 arr#6 2u aggregate%total_length%26#0)
        let aggregate%bytes_offset%26#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%26#0: bytes = (extract3 aggregate%array_trimmed%26#0 aggregate%bytes_offset%26#0 8u) // on error: index access is out of bounds
        let array_item%25#0: Encoded(uint64) = aggregate%encoded_element%26#0
        let values%25#0: uint64 = (btoi array_item%25#0)
        let tmp%77#0: bool = (== values%25#0 3u)
        let tmp%78#0: bool = (&& tmp%76#0 tmp%77#0)
        let aggregate%total_length%27#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%27#0: bytes = (substring3 arr#6 2u aggregate%total_length%27#0)
        let aggregate%bytes_offset%27#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%27#0: bytes = (extract3 aggregate%array_trimmed%27#0 aggregate%bytes_offset%27#0 8u) // on error: index access is out of bounds
        let array_item%26#0: Encoded(uint64) = aggregate%encoded_element%27#0
        let values%26#0: uint64 = (btoi array_item%26#0)
        let tmp%79#0: bool = (== values%26#0 4u)
        let tmp%80#0: bool = (&& tmp%78#0 tmp%79#0)
        let aggregate%total_length%28#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%28#0: bytes = (substring3 arr#6 2u aggregate%total_length%28#0)
        let aggregate%bytes_offset%28#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%28#0: bytes = (extract3 aggregate%array_trimmed%28#0 aggregate%bytes_offset%28#0 8u) // on error: index access is out of bounds
        let array_item%27#0: Encoded(uint64) = aggregate%encoded_element%28#0
        let values%27#0: uint64 = (btoi array_item%27#0)
        let tmp%81#0: bool = (== values%27#0 1u)
        let tmp%82#0: bool = (&& tmp%80#0 tmp%81#0)
        let aggregate%total_length%29#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%29#0: bytes = (substring3 arr#6 2u aggregate%total_length%29#0)
        let aggregate%bytes_offset%29#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%29#0: bytes = (extract3 aggregate%array_trimmed%29#0 aggregate%bytes_offset%29#0 8u) // on error: index access is out of bounds
        let array_item%28#0: Encoded(uint64) = aggregate%encoded_element%29#0
        let values%28#0: uint64 = (btoi array_item%28#0)
        let tmp%83#0: bool = (== values%28#0 10u)
        let tmp%84#0: bool = (&& tmp%82#0 tmp%83#0)
        let aggregate%total_length%30#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%30#0: bytes = (substring3 arr#6 2u aggregate%total_length%30#0)
        let aggregate%bytes_offset%30#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%30#0: bytes = (extract3 aggregate%array_trimmed%30#0 aggregate%bytes_offset%30#0 8u) // on error: index access is out of bounds
        let array_item%29#0: Encoded(uint64) = aggregate%encoded_element%30#0
        let values%29#0: uint64 = (btoi array_item%29#0)
        let tmp%85#0: bool = (== values%29#0 3u)
        let tmp%86#0: bool = (&& tmp%84#0 tmp%85#0)
        let aggregate%total_length%31#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%31#0: bytes = (substring3 arr#6 2u aggregate%total_length%31#0)
        let aggregate%bytes_offset%31#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%31#0: bytes = (extract3 aggregate%array_trimmed%31#0 aggregate%bytes_offset%31#0 8u) // on error: index access is out of bounds
        let array_item%30#0: Encoded(uint64) = aggregate%encoded_element%31#0
        let values%30#0: uint64 = (btoi array_item%30#0)
        let tmp%87#0: bool = (== values%30#0 4u)
        let tmp%88#0: bool = (&& tmp%86#0 tmp%87#0)
        let aggregate%total_length%32#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%32#0: bytes = (substring3 arr#6 2u aggregate%total_length%32#0)
        let aggregate%bytes_offset%32#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%32#0: bytes = (extract3 aggregate%array_trimmed%32#0 aggregate%bytes_offset%32#0 8u) // on error: index access is out of bounds
        let array_item%31#0: Encoded(uint64) = aggregate%encoded_element%32#0
        let values%31#0: uint64 = (btoi array_item%31#0)
        let tmp%89#0: bool = (== values%31#0 11u)
        let tmp%90#0: bool = (&& tmp%88#0 tmp%89#0)
        let aggregate%total_length%33#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%33#0: bytes = (substring3 arr#6 2u aggregate%total_length%33#0)
        let aggregate%bytes_offset%33#0: uint64 = (* 9u 8u)
        let aggregate%encoded_element%33#0: bytes = (extract3 aggregate%array_trimmed%33#0 aggregate%bytes_offset%33#0 8u) // on error: index access is out of bounds
        let array_item%32#0: Encoded(uint64) = aggregate%encoded_element%33#0
        let values%32#0: uint64 = (btoi array_item%32#0)
        let tmp%91#0: bool = (== values%32#0 12u)
        let tmp%92#0: bool = (&& tmp%90#0 tmp%91#0)
        let aggregate%total_length%34#0: uint64 = (len arr#6)
        let aggregate%array_trimmed%34#0: bytes = (substring3 arr#6 2u aggregate%total_length%34#0)
        let aggregate%bytes_offset%34#0: uint64 = (* 10u 8u)
        let aggregate%encoded_element%34#0: bytes = (extract3 aggregate%array_trimmed%34#0 aggregate%bytes_offset%34#0 8u) // on error: index access is out of bounds
        let array_item%33#0: Encoded(uint64) = aggregate%encoded_element%34#0
        let values%33#0: uint64 = (btoi array_item%33#0)
        let tmp%93#0: bool = (== values%33#0 13u)
        let tmp%94#0: bool = (&& tmp%92#0 tmp%93#0)
        (assert tmp%94#0) // assert target is match for conditions
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%6#0
        let rArr1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%7#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%9#0)
        let aggregate%as_Encoded(uint64[])%2#0: Encoded(uint64[]) = aggregate%head%7#0
        let tmp%96#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#0
        let concat%5#0: Encoded(len+uint64[]) = (concat rArr1#0 tmp%96#0) // on error: max array length exceeded
        let extract_uint16%3#0: uint64 = (extract_uint16 rArr1#0 0u)
        let add%3#0: uint64 = (+ extract_uint16%3#0 1u)
        let as_bytes%5#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let rArr1#1: Encoded(len+uint64[]) = ((replace2 0) concat%5#0 as_u16_bytes%5#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%8#0: bytes = (concat aggregate%len_u16%1#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%8#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let extract_to_end%3#0: bytes = ((extract 2 0) encoded_array%1#0)
        let concat%6#0: Encoded(len+uint64[]) = (concat rArr1#1 extract_to_end%3#0) // on error: max array length exceeded
        let extract_to_end%4#0: bytes = ((extract 2 0) concat%6#0)
        let len%2#0: uint64 = (len extract_to_end%4#0)
        let div_floor%2#0: uint64 = (/ len%2#0 8u)
        let as_bytes%6#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let rArr1#2: Encoded(len+uint64[]) = ((replace2 0) concat%6#0 as_u16_bytes%6#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 rArr1#2 0u)
        let tmp%100#0: uint64 = aggregate%array_length%7#0
        let tmp%101#0: bool = (== tmp%100#0 5u)
        let aggregate%total_length%35#0: uint64 = (len rArr1#2)
        let aggregate%array_trimmed%35#0: bytes = (substring3 rArr1#2 2u aggregate%total_length%35#0)
        let aggregate%bytes_offset%35#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%35#0: bytes = (extract3 aggregate%array_trimmed%35#0 aggregate%bytes_offset%35#0 8u) // on error: index access is out of bounds
        let array_item%34#0: Encoded(uint64) = aggregate%encoded_element%35#0
        let values%34#0: uint64 = (btoi array_item%34#0)
        let tmp%102#0: bool = (== values%34#0 1u)
        let tmp%103#0: bool = (&& tmp%101#0 tmp%102#0)
        let aggregate%total_length%36#0: uint64 = (len rArr1#2)
        let aggregate%array_trimmed%36#0: bytes = (substring3 rArr1#2 2u aggregate%total_length%36#0)
        let aggregate%bytes_offset%36#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%36#0: bytes = (extract3 aggregate%array_trimmed%36#0 aggregate%bytes_offset%36#0 8u) // on error: index access is out of bounds
        let array_item%35#0: Encoded(uint64) = aggregate%encoded_element%36#0
        let values%35#0: uint64 = (btoi array_item%35#0)
        let tmp%104#0: bool = (== values%35#0 2u)
        let tmp%105#0: bool = (&& tmp%103#0 tmp%104#0)
        let aggregate%total_length%37#0: uint64 = (len rArr1#2)
        let aggregate%array_trimmed%37#0: bytes = (substring3 rArr1#2 2u aggregate%total_length%37#0)
        let aggregate%bytes_offset%37#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%37#0: bytes = (extract3 aggregate%array_trimmed%37#0 aggregate%bytes_offset%37#0 8u) // on error: index access is out of bounds
        let array_item%36#0: Encoded(uint64) = aggregate%encoded_element%37#0
        let values%36#0: uint64 = (btoi array_item%36#0)
        let tmp%106#0: bool = (== values%36#0 3u)
        let tmp%107#0: bool = (&& tmp%105#0 tmp%106#0)
        let aggregate%total_length%38#0: uint64 = (len rArr1#2)
        let aggregate%array_trimmed%38#0: bytes = (substring3 rArr1#2 2u aggregate%total_length%38#0)
        let aggregate%bytes_offset%38#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%38#0: bytes = (extract3 aggregate%array_trimmed%38#0 aggregate%bytes_offset%38#0 8u) // on error: index access is out of bounds
        let array_item%37#0: Encoded(uint64) = aggregate%encoded_element%38#0
        let values%37#0: uint64 = (btoi array_item%37#0)
        let tmp%108#0: bool = (== values%37#0 4u)
        let tmp%109#0: bool = (&& tmp%107#0 tmp%108#0)
        let aggregate%total_length%39#0: uint64 = (len rArr1#2)
        let aggregate%array_trimmed%39#0: bytes = (substring3 rArr1#2 2u aggregate%total_length%39#0)
        let aggregate%bytes_offset%39#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%39#0: bytes = (extract3 aggregate%array_trimmed%39#0 aggregate%bytes_offset%39#0 8u) // on error: index access is out of bounds
        let array_item%38#0: Encoded(uint64) = aggregate%encoded_element%39#0
        let values%38#0: uint64 = (btoi array_item%38#0)
        let tmp%110#0: bool = (== values%38#0 5u)
        let tmp%111#0: bool = (&& tmp%109#0 tmp%110#0)
        (assert tmp%111#0) // assert target is match for conditions
        let fArr1#0: Encoded(uint64[4]) = (bzero 32u)
        let tmp%113#0: uint64 = 4u
        let as_bytes%7#0: bytes[8] = (itob tmp%113#0)
        let as_u16_bytes%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let converted_array%0#0: Encoded(len+uint64[]) = (concat as_u16_bytes%7#0 fArr1#0)
        let concat%7#0: Encoded(len+uint64[]) = (concat converted_array%0#0 fArr1#0) // on error: max array length exceeded
        let extract_to_end%5#0: bytes = ((extract 2 0) concat%7#0)
        let len%3#0: uint64 = (len extract_to_end%5#0)
        let div_floor%3#0: uint64 = (/ len%3#0 8u)
        let as_bytes%8#0: bytes[8] = (itob div_floor%3#0)
        let as_u16_bytes%8#0: bytes = ((extract 6 2) as_bytes%8#0)
        let fArr2#0: Encoded(len+uint64[]) = ((replace2 0) concat%7#0 as_u16_bytes%8#0)
        let tmp%114#0: uint64 = 4u
        let tmp%115#0: bool = (== tmp%114#0 4u)
        let aggregate%bytes_offset%40#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%40#0: bytes = (extract3 fArr1#0 aggregate%bytes_offset%40#0 8u) // on error: index access is out of bounds
        let array_item%39#0: Encoded(uint64) = aggregate%encoded_element%40#0
        let values%39#0: uint64 = (btoi array_item%39#0)
        let tmp%116#0: bool = (! values%39#0)
        let tmp%117#0: bool = (&& tmp%115#0 tmp%116#0)
        let aggregate%bytes_offset%41#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%41#0: bytes = (extract3 fArr1#0 aggregate%bytes_offset%41#0 8u) // on error: index access is out of bounds
        let array_item%40#0: Encoded(uint64) = aggregate%encoded_element%41#0
        let values%40#0: uint64 = (btoi array_item%40#0)
        let tmp%118#0: bool = (! values%40#0)
        let tmp%119#0: bool = (&& tmp%117#0 tmp%118#0)
        let aggregate%bytes_offset%42#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%42#0: bytes = (extract3 fArr1#0 aggregate%bytes_offset%42#0 8u) // on error: index access is out of bounds
        let array_item%41#0: Encoded(uint64) = aggregate%encoded_element%42#0
        let values%41#0: uint64 = (btoi array_item%41#0)
        let tmp%120#0: bool = (! values%41#0)
        let tmp%121#0: bool = (&& tmp%119#0 tmp%120#0)
        let aggregate%bytes_offset%43#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%43#0: bytes = (extract3 fArr1#0 aggregate%bytes_offset%43#0 8u) // on error: index access is out of bounds
        let array_item%42#0: Encoded(uint64) = aggregate%encoded_element%43#0
        let values%42#0: uint64 = (btoi array_item%42#0)
        let tmp%122#0: bool = (! values%42#0)
        let tmp%123#0: bool = (&& tmp%121#0 tmp%122#0)
        (assert tmp%123#0) // assert target is match for conditions
        let aggregate%array_length%8#0: uint64 = (extract_uint16 fArr2#0 0u)
        let tmp%124#0: uint64 = aggregate%array_length%8#0
        let tmp%125#0: bool = (== tmp%124#0 8u)
        let aggregate%total_length%40#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%40#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%40#0)
        let aggregate%bytes_offset%44#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%44#0: bytes = (extract3 aggregate%array_trimmed%40#0 aggregate%bytes_offset%44#0 8u) // on error: index access is out of bounds
        let array_item%43#0: Encoded(uint64) = aggregate%encoded_element%44#0
        let values%43#0: uint64 = (btoi array_item%43#0)
        let tmp%126#0: bool = (! values%43#0)
        let tmp%127#0: bool = (&& tmp%125#0 tmp%126#0)
        let aggregate%total_length%41#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%41#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%41#0)
        let aggregate%bytes_offset%45#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%45#0: bytes = (extract3 aggregate%array_trimmed%41#0 aggregate%bytes_offset%45#0 8u) // on error: index access is out of bounds
        let array_item%44#0: Encoded(uint64) = aggregate%encoded_element%45#0
        let values%44#0: uint64 = (btoi array_item%44#0)
        let tmp%128#0: bool = (! values%44#0)
        let tmp%129#0: bool = (&& tmp%127#0 tmp%128#0)
        let aggregate%total_length%42#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%42#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%42#0)
        let aggregate%bytes_offset%46#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%46#0: bytes = (extract3 aggregate%array_trimmed%42#0 aggregate%bytes_offset%46#0 8u) // on error: index access is out of bounds
        let array_item%45#0: Encoded(uint64) = aggregate%encoded_element%46#0
        let values%45#0: uint64 = (btoi array_item%45#0)
        let tmp%130#0: bool = (! values%45#0)
        let tmp%131#0: bool = (&& tmp%129#0 tmp%130#0)
        let aggregate%total_length%43#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%43#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%43#0)
        let aggregate%bytes_offset%47#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%47#0: bytes = (extract3 aggregate%array_trimmed%43#0 aggregate%bytes_offset%47#0 8u) // on error: index access is out of bounds
        let array_item%46#0: Encoded(uint64) = aggregate%encoded_element%47#0
        let values%46#0: uint64 = (btoi array_item%46#0)
        let tmp%132#0: bool = (! values%46#0)
        let tmp%133#0: bool = (&& tmp%131#0 tmp%132#0)
        let aggregate%total_length%44#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%44#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%44#0)
        let aggregate%bytes_offset%48#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%48#0: bytes = (extract3 aggregate%array_trimmed%44#0 aggregate%bytes_offset%48#0 8u) // on error: index access is out of bounds
        let array_item%47#0: Encoded(uint64) = aggregate%encoded_element%48#0
        let values%47#0: uint64 = (btoi array_item%47#0)
        let tmp%134#0: bool = (! values%47#0)
        let tmp%135#0: bool = (&& tmp%133#0 tmp%134#0)
        let aggregate%total_length%45#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%45#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%45#0)
        let aggregate%bytes_offset%49#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%49#0: bytes = (extract3 aggregate%array_trimmed%45#0 aggregate%bytes_offset%49#0 8u) // on error: index access is out of bounds
        let array_item%48#0: Encoded(uint64) = aggregate%encoded_element%49#0
        let values%48#0: uint64 = (btoi array_item%48#0)
        let tmp%136#0: bool = (! values%48#0)
        let tmp%137#0: bool = (&& tmp%135#0 tmp%136#0)
        let aggregate%total_length%46#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%46#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%46#0)
        let aggregate%bytes_offset%50#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%50#0: bytes = (extract3 aggregate%array_trimmed%46#0 aggregate%bytes_offset%50#0 8u) // on error: index access is out of bounds
        let array_item%49#0: Encoded(uint64) = aggregate%encoded_element%50#0
        let values%49#0: uint64 = (btoi array_item%49#0)
        let tmp%138#0: bool = (! values%49#0)
        let tmp%139#0: bool = (&& tmp%137#0 tmp%138#0)
        let aggregate%total_length%47#0: uint64 = (len fArr2#0)
        let aggregate%array_trimmed%47#0: bytes = (substring3 fArr2#0 2u aggregate%total_length%47#0)
        let aggregate%bytes_offset%51#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%51#0: bytes = (extract3 aggregate%array_trimmed%47#0 aggregate%bytes_offset%51#0 8u) // on error: index access is out of bounds
        let array_item%50#0: Encoded(uint64) = aggregate%encoded_element%51#0
        let values%50#0: uint64 = (btoi array_item%50#0)
        let tmp%140#0: bool = (! values%50#0)
        let tmp%141#0: bool = (&& tmp%139#0 tmp%140#0)
        (assert tmp%141#0) // assert target is match for conditions
        let extract_to_end%6#0: bytes = ((extract 2 0) fArr2#0)
        let concat%8#0: Encoded(len+uint64[]) = (concat rArr1#2 extract_to_end%6#0) // on error: max array length exceeded
        let extract_to_end%7#0: bytes = ((extract 2 0) concat%8#0)
        let len%4#0: uint64 = (len extract_to_end%7#0)
        let div_floor%4#0: uint64 = (/ len%4#0 8u)
        let as_bytes%9#0: bytes[8] = (itob div_floor%4#0)
        let as_u16_bytes%9#0: bytes = ((extract 6 2) as_bytes%9#0)
        let arr3#0: Encoded(len+uint64[]) = ((replace2 0) concat%8#0 as_u16_bytes%9#0)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 arr3#0 0u)
        let tmp%143#0: uint64 = aggregate%array_length%9#0
        let tmp%144#0: bool = (== tmp%143#0 13u)
        let aggregate%total_length%48#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%48#0: bytes = (substring3 arr3#0 2u aggregate%total_length%48#0)
        let aggregate%bytes_offset%52#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%52#0: bytes = (extract3 aggregate%array_trimmed%48#0 aggregate%bytes_offset%52#0 8u) // on error: index access is out of bounds
        let array_item%51#0: Encoded(uint64) = aggregate%encoded_element%52#0
        let values%51#0: uint64 = (btoi array_item%51#0)
        let tmp%145#0: bool = (== values%51#0 1u)
        let tmp%146#0: bool = (&& tmp%144#0 tmp%145#0)
        let aggregate%total_length%49#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%49#0: bytes = (substring3 arr3#0 2u aggregate%total_length%49#0)
        let aggregate%bytes_offset%53#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%53#0: bytes = (extract3 aggregate%array_trimmed%49#0 aggregate%bytes_offset%53#0 8u) // on error: index access is out of bounds
        let array_item%52#0: Encoded(uint64) = aggregate%encoded_element%53#0
        let values%52#0: uint64 = (btoi array_item%52#0)
        let tmp%147#0: bool = (== values%52#0 2u)
        let tmp%148#0: bool = (&& tmp%146#0 tmp%147#0)
        let aggregate%total_length%50#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%50#0: bytes = (substring3 arr3#0 2u aggregate%total_length%50#0)
        let aggregate%bytes_offset%54#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%54#0: bytes = (extract3 aggregate%array_trimmed%50#0 aggregate%bytes_offset%54#0 8u) // on error: index access is out of bounds
        let array_item%53#0: Encoded(uint64) = aggregate%encoded_element%54#0
        let values%53#0: uint64 = (btoi array_item%53#0)
        let tmp%149#0: bool = (== values%53#0 3u)
        let tmp%150#0: bool = (&& tmp%148#0 tmp%149#0)
        let aggregate%total_length%51#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%51#0: bytes = (substring3 arr3#0 2u aggregate%total_length%51#0)
        let aggregate%bytes_offset%55#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%55#0: bytes = (extract3 aggregate%array_trimmed%51#0 aggregate%bytes_offset%55#0 8u) // on error: index access is out of bounds
        let array_item%54#0: Encoded(uint64) = aggregate%encoded_element%55#0
        let values%54#0: uint64 = (btoi array_item%54#0)
        let tmp%151#0: bool = (== values%54#0 4u)
        let tmp%152#0: bool = (&& tmp%150#0 tmp%151#0)
        let aggregate%total_length%52#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%52#0: bytes = (substring3 arr3#0 2u aggregate%total_length%52#0)
        let aggregate%bytes_offset%56#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%56#0: bytes = (extract3 aggregate%array_trimmed%52#0 aggregate%bytes_offset%56#0 8u) // on error: index access is out of bounds
        let array_item%55#0: Encoded(uint64) = aggregate%encoded_element%56#0
        let values%55#0: uint64 = (btoi array_item%55#0)
        let tmp%153#0: bool = (== values%55#0 5u)
        let tmp%154#0: bool = (&& tmp%152#0 tmp%153#0)
        let aggregate%total_length%53#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%53#0: bytes = (substring3 arr3#0 2u aggregate%total_length%53#0)
        let aggregate%bytes_offset%57#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%57#0: bytes = (extract3 aggregate%array_trimmed%53#0 aggregate%bytes_offset%57#0 8u) // on error: index access is out of bounds
        let array_item%56#0: Encoded(uint64) = aggregate%encoded_element%57#0
        let values%56#0: uint64 = (btoi array_item%56#0)
        let tmp%155#0: bool = (! values%56#0)
        let tmp%156#0: bool = (&& tmp%154#0 tmp%155#0)
        let aggregate%total_length%54#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%54#0: bytes = (substring3 arr3#0 2u aggregate%total_length%54#0)
        let aggregate%bytes_offset%58#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%58#0: bytes = (extract3 aggregate%array_trimmed%54#0 aggregate%bytes_offset%58#0 8u) // on error: index access is out of bounds
        let array_item%57#0: Encoded(uint64) = aggregate%encoded_element%58#0
        let values%57#0: uint64 = (btoi array_item%57#0)
        let tmp%157#0: bool = (! values%57#0)
        let tmp%158#0: bool = (&& tmp%156#0 tmp%157#0)
        let aggregate%total_length%55#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%55#0: bytes = (substring3 arr3#0 2u aggregate%total_length%55#0)
        let aggregate%bytes_offset%59#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%59#0: bytes = (extract3 aggregate%array_trimmed%55#0 aggregate%bytes_offset%59#0 8u) // on error: index access is out of bounds
        let array_item%58#0: Encoded(uint64) = aggregate%encoded_element%59#0
        let values%58#0: uint64 = (btoi array_item%58#0)
        let tmp%159#0: bool = (! values%58#0)
        let tmp%160#0: bool = (&& tmp%158#0 tmp%159#0)
        let aggregate%total_length%56#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%56#0: bytes = (substring3 arr3#0 2u aggregate%total_length%56#0)
        let aggregate%bytes_offset%60#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%60#0: bytes = (extract3 aggregate%array_trimmed%56#0 aggregate%bytes_offset%60#0 8u) // on error: index access is out of bounds
        let array_item%59#0: Encoded(uint64) = aggregate%encoded_element%60#0
        let values%59#0: uint64 = (btoi array_item%59#0)
        let tmp%161#0: bool = (! values%59#0)
        let tmp%162#0: bool = (&& tmp%160#0 tmp%161#0)
        let aggregate%total_length%57#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%57#0: bytes = (substring3 arr3#0 2u aggregate%total_length%57#0)
        let aggregate%bytes_offset%61#0: uint64 = (* 9u 8u)
        let aggregate%encoded_element%61#0: bytes = (extract3 aggregate%array_trimmed%57#0 aggregate%bytes_offset%61#0 8u) // on error: index access is out of bounds
        let array_item%60#0: Encoded(uint64) = aggregate%encoded_element%61#0
        let values%60#0: uint64 = (btoi array_item%60#0)
        let tmp%163#0: bool = (! values%60#0)
        let tmp%164#0: bool = (&& tmp%162#0 tmp%163#0)
        let aggregate%total_length%58#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%58#0: bytes = (substring3 arr3#0 2u aggregate%total_length%58#0)
        let aggregate%bytes_offset%62#0: uint64 = (* 10u 8u)
        let aggregate%encoded_element%62#0: bytes = (extract3 aggregate%array_trimmed%58#0 aggregate%bytes_offset%62#0 8u) // on error: index access is out of bounds
        let array_item%61#0: Encoded(uint64) = aggregate%encoded_element%62#0
        let values%61#0: uint64 = (btoi array_item%61#0)
        let tmp%165#0: bool = (! values%61#0)
        let tmp%166#0: bool = (&& tmp%164#0 tmp%165#0)
        let aggregate%total_length%59#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%59#0: bytes = (substring3 arr3#0 2u aggregate%total_length%59#0)
        let aggregate%bytes_offset%63#0: uint64 = (* 11u 8u)
        let aggregate%encoded_element%63#0: bytes = (extract3 aggregate%array_trimmed%59#0 aggregate%bytes_offset%63#0 8u) // on error: index access is out of bounds
        let array_item%62#0: Encoded(uint64) = aggregate%encoded_element%63#0
        let values%62#0: uint64 = (btoi array_item%62#0)
        let tmp%167#0: bool = (! values%62#0)
        let tmp%168#0: bool = (&& tmp%166#0 tmp%167#0)
        let aggregate%total_length%60#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%60#0: bytes = (substring3 arr3#0 2u aggregate%total_length%60#0)
        let aggregate%bytes_offset%64#0: uint64 = (* 12u 8u)
        let aggregate%encoded_element%64#0: bytes = (extract3 aggregate%array_trimmed%60#0 aggregate%bytes_offset%64#0 8u) // on error: index access is out of bounds
        let array_item%63#0: Encoded(uint64) = aggregate%encoded_element%64#0
        let values%63#0: uint64 = (btoi array_item%63#0)
        let tmp%169#0: bool = (! values%63#0)
        let tmp%170#0: bool = (&& tmp%168#0 tmp%169#0)
        (assert tmp%170#0) // assert target is match for conditions
        let extract_to_end%8#0: bytes = ((extract 2 0) arr#6)
        let concat%9#0: Encoded(len+uint64[]) = (concat rArr1#2 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%9#0: bytes = ((extract 2 0) concat%9#0)
        let len%5#0: uint64 = (len extract_to_end%9#0)
        let div_floor%5#0: uint64 = (/ len%5#0 8u)
        let as_bytes%10#0: bytes[8] = (itob div_floor%5#0)
        let as_u16_bytes%10#0: bytes = ((extract 6 2) as_bytes%10#0)
        let arr4#0: Encoded(len+uint64[]) = ((replace2 0) concat%9#0 as_u16_bytes%10#0)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 arr4#0 0u)
        let tmp%172#0: uint64 = aggregate%array_length%10#0
        let tmp%173#0: bool = (== tmp%172#0 16u)
        let aggregate%total_length%61#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%61#0: bytes = (substring3 arr4#0 2u aggregate%total_length%61#0)
        let aggregate%bytes_offset%65#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%65#0: bytes = (extract3 aggregate%array_trimmed%61#0 aggregate%bytes_offset%65#0 8u) // on error: index access is out of bounds
        let array_item%64#0: Encoded(uint64) = aggregate%encoded_element%65#0
        let values%64#0: uint64 = (btoi array_item%64#0)
        let tmp%174#0: bool = (== values%64#0 1u)
        let tmp%175#0: bool = (&& tmp%173#0 tmp%174#0)
        let aggregate%total_length%62#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%62#0: bytes = (substring3 arr4#0 2u aggregate%total_length%62#0)
        let aggregate%bytes_offset%66#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%66#0: bytes = (extract3 aggregate%array_trimmed%62#0 aggregate%bytes_offset%66#0 8u) // on error: index access is out of bounds
        let array_item%65#0: Encoded(uint64) = aggregate%encoded_element%66#0
        let values%65#0: uint64 = (btoi array_item%65#0)
        let tmp%176#0: bool = (== values%65#0 2u)
        let tmp%177#0: bool = (&& tmp%175#0 tmp%176#0)
        let aggregate%total_length%63#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%63#0: bytes = (substring3 arr4#0 2u aggregate%total_length%63#0)
        let aggregate%bytes_offset%67#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%67#0: bytes = (extract3 aggregate%array_trimmed%63#0 aggregate%bytes_offset%67#0 8u) // on error: index access is out of bounds
        let array_item%66#0: Encoded(uint64) = aggregate%encoded_element%67#0
        let values%66#0: uint64 = (btoi array_item%66#0)
        let tmp%178#0: bool = (== values%66#0 3u)
        let tmp%179#0: bool = (&& tmp%177#0 tmp%178#0)
        let aggregate%total_length%64#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%64#0: bytes = (substring3 arr4#0 2u aggregate%total_length%64#0)
        let aggregate%bytes_offset%68#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%68#0: bytes = (extract3 aggregate%array_trimmed%64#0 aggregate%bytes_offset%68#0 8u) // on error: index access is out of bounds
        let array_item%67#0: Encoded(uint64) = aggregate%encoded_element%68#0
        let values%67#0: uint64 = (btoi array_item%67#0)
        let tmp%180#0: bool = (== values%67#0 4u)
        let tmp%181#0: bool = (&& tmp%179#0 tmp%180#0)
        let aggregate%total_length%65#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%65#0: bytes = (substring3 arr4#0 2u aggregate%total_length%65#0)
        let aggregate%bytes_offset%69#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%69#0: bytes = (extract3 aggregate%array_trimmed%65#0 aggregate%bytes_offset%69#0 8u) // on error: index access is out of bounds
        let array_item%68#0: Encoded(uint64) = aggregate%encoded_element%69#0
        let values%68#0: uint64 = (btoi array_item%68#0)
        let tmp%182#0: bool = (== values%68#0 5u)
        let tmp%183#0: bool = (&& tmp%181#0 tmp%182#0)
        let aggregate%total_length%66#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%66#0: bytes = (substring3 arr4#0 2u aggregate%total_length%66#0)
        let aggregate%bytes_offset%70#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%70#0: bytes = (extract3 aggregate%array_trimmed%66#0 aggregate%bytes_offset%70#0 8u) // on error: index access is out of bounds
        let array_item%69#0: Encoded(uint64) = aggregate%encoded_element%70#0
        let values%69#0: uint64 = (btoi array_item%69#0)
        let tmp%184#0: bool = (== values%69#0 1u)
        let tmp%185#0: bool = (&& tmp%183#0 tmp%184#0)
        let aggregate%total_length%67#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%67#0: bytes = (substring3 arr4#0 2u aggregate%total_length%67#0)
        let aggregate%bytes_offset%71#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%71#0: bytes = (extract3 aggregate%array_trimmed%67#0 aggregate%bytes_offset%71#0 8u) // on error: index access is out of bounds
        let array_item%70#0: Encoded(uint64) = aggregate%encoded_element%71#0
        let values%70#0: uint64 = (btoi array_item%70#0)
        let tmp%186#0: bool = (== values%70#0 10u)
        let tmp%187#0: bool = (&& tmp%185#0 tmp%186#0)
        let aggregate%total_length%68#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%68#0: bytes = (substring3 arr4#0 2u aggregate%total_length%68#0)
        let aggregate%bytes_offset%72#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%72#0: bytes = (extract3 aggregate%array_trimmed%68#0 aggregate%bytes_offset%72#0 8u) // on error: index access is out of bounds
        let array_item%71#0: Encoded(uint64) = aggregate%encoded_element%72#0
        let values%71#0: uint64 = (btoi array_item%71#0)
        let tmp%188#0: bool = (== values%71#0 3u)
        let tmp%189#0: bool = (&& tmp%187#0 tmp%188#0)
        let aggregate%total_length%69#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%69#0: bytes = (substring3 arr4#0 2u aggregate%total_length%69#0)
        let aggregate%bytes_offset%73#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%73#0: bytes = (extract3 aggregate%array_trimmed%69#0 aggregate%bytes_offset%73#0 8u) // on error: index access is out of bounds
        let array_item%72#0: Encoded(uint64) = aggregate%encoded_element%73#0
        let values%72#0: uint64 = (btoi array_item%72#0)
        let tmp%190#0: bool = (== values%72#0 4u)
        let tmp%191#0: bool = (&& tmp%189#0 tmp%190#0)
        let aggregate%total_length%70#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%70#0: bytes = (substring3 arr4#0 2u aggregate%total_length%70#0)
        let aggregate%bytes_offset%74#0: uint64 = (* 9u 8u)
        let aggregate%encoded_element%74#0: bytes = (extract3 aggregate%array_trimmed%70#0 aggregate%bytes_offset%74#0 8u) // on error: index access is out of bounds
        let array_item%73#0: Encoded(uint64) = aggregate%encoded_element%74#0
        let values%73#0: uint64 = (btoi array_item%73#0)
        let tmp%192#0: bool = (== values%73#0 1u)
        let tmp%193#0: bool = (&& tmp%191#0 tmp%192#0)
        let aggregate%total_length%71#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%71#0: bytes = (substring3 arr4#0 2u aggregate%total_length%71#0)
        let aggregate%bytes_offset%75#0: uint64 = (* 10u 8u)
        let aggregate%encoded_element%75#0: bytes = (extract3 aggregate%array_trimmed%71#0 aggregate%bytes_offset%75#0 8u) // on error: index access is out of bounds
        let array_item%74#0: Encoded(uint64) = aggregate%encoded_element%75#0
        let values%74#0: uint64 = (btoi array_item%74#0)
        let tmp%194#0: bool = (== values%74#0 10u)
        let tmp%195#0: bool = (&& tmp%193#0 tmp%194#0)
        let aggregate%total_length%72#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%72#0: bytes = (substring3 arr4#0 2u aggregate%total_length%72#0)
        let aggregate%bytes_offset%76#0: uint64 = (* 11u 8u)
        let aggregate%encoded_element%76#0: bytes = (extract3 aggregate%array_trimmed%72#0 aggregate%bytes_offset%76#0 8u) // on error: index access is out of bounds
        let array_item%75#0: Encoded(uint64) = aggregate%encoded_element%76#0
        let values%75#0: uint64 = (btoi array_item%75#0)
        let tmp%196#0: bool = (== values%75#0 3u)
        let tmp%197#0: bool = (&& tmp%195#0 tmp%196#0)
        let aggregate%total_length%73#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%73#0: bytes = (substring3 arr4#0 2u aggregate%total_length%73#0)
        let aggregate%bytes_offset%77#0: uint64 = (* 12u 8u)
        let aggregate%encoded_element%77#0: bytes = (extract3 aggregate%array_trimmed%73#0 aggregate%bytes_offset%77#0 8u) // on error: index access is out of bounds
        let array_item%76#0: Encoded(uint64) = aggregate%encoded_element%77#0
        let values%76#0: uint64 = (btoi array_item%76#0)
        let tmp%198#0: bool = (== values%76#0 4u)
        let tmp%199#0: bool = (&& tmp%197#0 tmp%198#0)
        let aggregate%total_length%74#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%74#0: bytes = (substring3 arr4#0 2u aggregate%total_length%74#0)
        let aggregate%bytes_offset%78#0: uint64 = (* 13u 8u)
        let aggregate%encoded_element%78#0: bytes = (extract3 aggregate%array_trimmed%74#0 aggregate%bytes_offset%78#0 8u) // on error: index access is out of bounds
        let array_item%77#0: Encoded(uint64) = aggregate%encoded_element%78#0
        let values%77#0: uint64 = (btoi array_item%77#0)
        let tmp%200#0: bool = (== values%77#0 11u)
        let tmp%201#0: bool = (&& tmp%199#0 tmp%200#0)
        let aggregate%total_length%75#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%75#0: bytes = (substring3 arr4#0 2u aggregate%total_length%75#0)
        let aggregate%bytes_offset%79#0: uint64 = (* 14u 8u)
        let aggregate%encoded_element%79#0: bytes = (extract3 aggregate%array_trimmed%75#0 aggregate%bytes_offset%79#0 8u) // on error: index access is out of bounds
        let array_item%78#0: Encoded(uint64) = aggregate%encoded_element%79#0
        let values%78#0: uint64 = (btoi array_item%78#0)
        let tmp%202#0: bool = (== values%78#0 12u)
        let tmp%203#0: bool = (&& tmp%201#0 tmp%202#0)
        let aggregate%total_length%76#0: uint64 = (len arr4#0)
        let aggregate%array_trimmed%76#0: bytes = (substring3 arr4#0 2u aggregate%total_length%76#0)
        let aggregate%bytes_offset%80#0: uint64 = (* 15u 8u)
        let aggregate%encoded_element%80#0: bytes = (extract3 aggregate%array_trimmed%76#0 aggregate%bytes_offset%80#0 8u) // on error: index access is out of bounds
        let array_item%79#0: Encoded(uint64) = aggregate%encoded_element%80#0
        let values%79#0: uint64 = (btoi array_item%79#0)
        let tmp%204#0: bool = (== values%79#0 13u)
        let tmp%205#0: bool = (&& tmp%203#0 tmp%204#0)
        (assert tmp%205#0) // assert target is match for conditions
        let tmp%206#0: uint64 = 4u
        let as_bytes%11#0: bytes[8] = (itob tmp%206#0)
        let as_u16_bytes%11#0: bytes = ((extract 6 2) as_bytes%11#0)
        let converted_array%1#0: Encoded(len+uint64[]) = (concat as_u16_bytes%11#0 fArr1#0)
        let extract_to_end%10#0: bytes = ((extract 2 0) rArr1#2)
        let concat%10#0: Encoded(len+uint64[]) = (concat converted_array%1#0 extract_to_end%10#0) // on error: max array length exceeded
        let extract_to_end%11#0: bytes = ((extract 2 0) concat%10#0)
        let len%6#0: uint64 = (len extract_to_end%11#0)
        let div_floor%6#0: uint64 = (/ len%6#0 8u)
        let as_bytes%12#0: bytes[8] = (itob div_floor%6#0)
        let as_u16_bytes%12#0: bytes = ((extract 6 2) as_bytes%12#0)
        let arr5#0: Encoded(len+uint64[]) = ((replace2 0) concat%10#0 as_u16_bytes%12#0)
        let aggregate%array_length%11#0: uint64 = (extract_uint16 arr5#0 0u)
        let tmp%207#0: uint64 = aggregate%array_length%11#0
        let tmp%208#0: bool = (== tmp%207#0 9u)
        let aggregate%total_length%77#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%77#0: bytes = (substring3 arr5#0 2u aggregate%total_length%77#0)
        let aggregate%bytes_offset%81#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%81#0: bytes = (extract3 aggregate%array_trimmed%77#0 aggregate%bytes_offset%81#0 8u) // on error: index access is out of bounds
        let array_item%80#0: Encoded(uint64) = aggregate%encoded_element%81#0
        let values%80#0: uint64 = (btoi array_item%80#0)
        let tmp%209#0: bool = (! values%80#0)
        let tmp%210#0: bool = (&& tmp%208#0 tmp%209#0)
        let aggregate%total_length%78#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%78#0: bytes = (substring3 arr5#0 2u aggregate%total_length%78#0)
        let aggregate%bytes_offset%82#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%82#0: bytes = (extract3 aggregate%array_trimmed%78#0 aggregate%bytes_offset%82#0 8u) // on error: index access is out of bounds
        let array_item%81#0: Encoded(uint64) = aggregate%encoded_element%82#0
        let values%81#0: uint64 = (btoi array_item%81#0)
        let tmp%211#0: bool = (! values%81#0)
        let tmp%212#0: bool = (&& tmp%210#0 tmp%211#0)
        let aggregate%total_length%79#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%79#0: bytes = (substring3 arr5#0 2u aggregate%total_length%79#0)
        let aggregate%bytes_offset%83#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%83#0: bytes = (extract3 aggregate%array_trimmed%79#0 aggregate%bytes_offset%83#0 8u) // on error: index access is out of bounds
        let array_item%82#0: Encoded(uint64) = aggregate%encoded_element%83#0
        let values%82#0: uint64 = (btoi array_item%82#0)
        let tmp%213#0: bool = (! values%82#0)
        let tmp%214#0: bool = (&& tmp%212#0 tmp%213#0)
        let aggregate%total_length%80#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%80#0: bytes = (substring3 arr5#0 2u aggregate%total_length%80#0)
        let aggregate%bytes_offset%84#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%84#0: bytes = (extract3 aggregate%array_trimmed%80#0 aggregate%bytes_offset%84#0 8u) // on error: index access is out of bounds
        let array_item%83#0: Encoded(uint64) = aggregate%encoded_element%84#0
        let values%83#0: uint64 = (btoi array_item%83#0)
        let tmp%215#0: bool = (! values%83#0)
        let tmp%216#0: bool = (&& tmp%214#0 tmp%215#0)
        let aggregate%total_length%81#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%81#0: bytes = (substring3 arr5#0 2u aggregate%total_length%81#0)
        let aggregate%bytes_offset%85#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%85#0: bytes = (extract3 aggregate%array_trimmed%81#0 aggregate%bytes_offset%85#0 8u) // on error: index access is out of bounds
        let array_item%84#0: Encoded(uint64) = aggregate%encoded_element%85#0
        let values%84#0: uint64 = (btoi array_item%84#0)
        let tmp%217#0: bool = (== values%84#0 1u)
        let tmp%218#0: bool = (&& tmp%216#0 tmp%217#0)
        let aggregate%total_length%82#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%82#0: bytes = (substring3 arr5#0 2u aggregate%total_length%82#0)
        let aggregate%bytes_offset%86#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%86#0: bytes = (extract3 aggregate%array_trimmed%82#0 aggregate%bytes_offset%86#0 8u) // on error: index access is out of bounds
        let array_item%85#0: Encoded(uint64) = aggregate%encoded_element%86#0
        let values%85#0: uint64 = (btoi array_item%85#0)
        let tmp%219#0: bool = (== values%85#0 2u)
        let tmp%220#0: bool = (&& tmp%218#0 tmp%219#0)
        let aggregate%total_length%83#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%83#0: bytes = (substring3 arr5#0 2u aggregate%total_length%83#0)
        let aggregate%bytes_offset%87#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%87#0: bytes = (extract3 aggregate%array_trimmed%83#0 aggregate%bytes_offset%87#0 8u) // on error: index access is out of bounds
        let array_item%86#0: Encoded(uint64) = aggregate%encoded_element%87#0
        let values%86#0: uint64 = (btoi array_item%86#0)
        let tmp%221#0: bool = (== values%86#0 3u)
        let tmp%222#0: bool = (&& tmp%220#0 tmp%221#0)
        let aggregate%total_length%84#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%84#0: bytes = (substring3 arr5#0 2u aggregate%total_length%84#0)
        let aggregate%bytes_offset%88#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%88#0: bytes = (extract3 aggregate%array_trimmed%84#0 aggregate%bytes_offset%88#0 8u) // on error: index access is out of bounds
        let array_item%87#0: Encoded(uint64) = aggregate%encoded_element%88#0
        let values%87#0: uint64 = (btoi array_item%87#0)
        let tmp%223#0: bool = (== values%87#0 4u)
        let tmp%224#0: bool = (&& tmp%222#0 tmp%223#0)
        let aggregate%total_length%85#0: uint64 = (len arr5#0)
        let aggregate%array_trimmed%85#0: bytes = (substring3 arr5#0 2u aggregate%total_length%85#0)
        let aggregate%bytes_offset%89#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%89#0: bytes = (extract3 aggregate%array_trimmed%85#0 aggregate%bytes_offset%89#0 8u) // on error: index access is out of bounds
        let array_item%88#0: Encoded(uint64) = aggregate%encoded_element%89#0
        let values%88#0: uint64 = (btoi array_item%88#0)
        let tmp%225#0: bool = (== values%88#0 5u)
        let tmp%226#0: bool = (&& tmp%224#0 tmp%225#0)
        (assert tmp%226#0) // assert target is match for conditions
        let tmp%227#0: uint64 = 4u
        let as_bytes%13#0: bytes[8] = (itob tmp%227#0)
        let as_u16_bytes%13#0: bytes = ((extract 6 2) as_bytes%13#0)
        let converted_array%2#0: Encoded(len+uint64[]) = (concat as_u16_bytes%13#0 fArr1#0)
        let concat%11#0: Encoded(len+uint64[]) = (concat converted_array%2#0 extract_to_end%8#0) // on error: max array length exceeded
        let extract_to_end%13#0: bytes = ((extract 2 0) concat%11#0)
        let len%7#0: uint64 = (len extract_to_end%13#0)
        let div_floor%7#0: uint64 = (/ len%7#0 8u)
        let as_bytes%14#0: bytes[8] = (itob div_floor%7#0)
        let as_u16_bytes%14#0: bytes = ((extract 6 2) as_bytes%14#0)
        let arr6#0: Encoded(len+uint64[]) = ((replace2 0) concat%11#0 as_u16_bytes%14#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 arr6#0 0u)
        let tmp%228#0: uint64 = aggregate%array_length%12#0
        let tmp%229#0: bool = (== tmp%228#0 15u)
        let aggregate%total_length%86#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%86#0: bytes = (substring3 arr6#0 2u aggregate%total_length%86#0)
        let aggregate%bytes_offset%90#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%90#0: bytes = (extract3 aggregate%array_trimmed%86#0 aggregate%bytes_offset%90#0 8u) // on error: index access is out of bounds
        let array_item%89#0: Encoded(uint64) = aggregate%encoded_element%90#0
        let values%89#0: uint64 = (btoi array_item%89#0)
        let tmp%230#0: bool = (! values%89#0)
        let tmp%231#0: bool = (&& tmp%229#0 tmp%230#0)
        let aggregate%total_length%87#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%87#0: bytes = (substring3 arr6#0 2u aggregate%total_length%87#0)
        let aggregate%bytes_offset%91#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%91#0: bytes = (extract3 aggregate%array_trimmed%87#0 aggregate%bytes_offset%91#0 8u) // on error: index access is out of bounds
        let array_item%90#0: Encoded(uint64) = aggregate%encoded_element%91#0
        let values%90#0: uint64 = (btoi array_item%90#0)
        let tmp%232#0: bool = (! values%90#0)
        let tmp%233#0: bool = (&& tmp%231#0 tmp%232#0)
        let aggregate%total_length%88#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%88#0: bytes = (substring3 arr6#0 2u aggregate%total_length%88#0)
        let aggregate%bytes_offset%92#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%92#0: bytes = (extract3 aggregate%array_trimmed%88#0 aggregate%bytes_offset%92#0 8u) // on error: index access is out of bounds
        let array_item%91#0: Encoded(uint64) = aggregate%encoded_element%92#0
        let values%91#0: uint64 = (btoi array_item%91#0)
        let tmp%234#0: bool = (! values%91#0)
        let tmp%235#0: bool = (&& tmp%233#0 tmp%234#0)
        let aggregate%total_length%89#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%89#0: bytes = (substring3 arr6#0 2u aggregate%total_length%89#0)
        let aggregate%bytes_offset%93#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%93#0: bytes = (extract3 aggregate%array_trimmed%89#0 aggregate%bytes_offset%93#0 8u) // on error: index access is out of bounds
        let array_item%92#0: Encoded(uint64) = aggregate%encoded_element%93#0
        let values%92#0: uint64 = (btoi array_item%92#0)
        let tmp%236#0: bool = (! values%92#0)
        let tmp%237#0: bool = (&& tmp%235#0 tmp%236#0)
        let aggregate%total_length%90#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%90#0: bytes = (substring3 arr6#0 2u aggregate%total_length%90#0)
        let aggregate%bytes_offset%94#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%94#0: bytes = (extract3 aggregate%array_trimmed%90#0 aggregate%bytes_offset%94#0 8u) // on error: index access is out of bounds
        let array_item%93#0: Encoded(uint64) = aggregate%encoded_element%94#0
        let values%93#0: uint64 = (btoi array_item%93#0)
        let tmp%238#0: bool = (== values%93#0 1u)
        let tmp%239#0: bool = (&& tmp%237#0 tmp%238#0)
        let aggregate%total_length%91#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%91#0: bytes = (substring3 arr6#0 2u aggregate%total_length%91#0)
        let aggregate%bytes_offset%95#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%95#0: bytes = (extract3 aggregate%array_trimmed%91#0 aggregate%bytes_offset%95#0 8u) // on error: index access is out of bounds
        let array_item%94#0: Encoded(uint64) = aggregate%encoded_element%95#0
        let values%94#0: uint64 = (btoi array_item%94#0)
        let tmp%240#0: bool = (== values%94#0 10u)
        let tmp%241#0: bool = (&& tmp%239#0 tmp%240#0)
        let aggregate%total_length%92#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%92#0: bytes = (substring3 arr6#0 2u aggregate%total_length%92#0)
        let aggregate%bytes_offset%96#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%96#0: bytes = (extract3 aggregate%array_trimmed%92#0 aggregate%bytes_offset%96#0 8u) // on error: index access is out of bounds
        let array_item%95#0: Encoded(uint64) = aggregate%encoded_element%96#0
        let values%95#0: uint64 = (btoi array_item%95#0)
        let tmp%242#0: bool = (== values%95#0 3u)
        let tmp%243#0: bool = (&& tmp%241#0 tmp%242#0)
        let aggregate%total_length%93#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%93#0: bytes = (substring3 arr6#0 2u aggregate%total_length%93#0)
        let aggregate%bytes_offset%97#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%97#0: bytes = (extract3 aggregate%array_trimmed%93#0 aggregate%bytes_offset%97#0 8u) // on error: index access is out of bounds
        let array_item%96#0: Encoded(uint64) = aggregate%encoded_element%97#0
        let values%96#0: uint64 = (btoi array_item%96#0)
        let tmp%244#0: bool = (== values%96#0 4u)
        let tmp%245#0: bool = (&& tmp%243#0 tmp%244#0)
        let aggregate%total_length%94#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%94#0: bytes = (substring3 arr6#0 2u aggregate%total_length%94#0)
        let aggregate%bytes_offset%98#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%98#0: bytes = (extract3 aggregate%array_trimmed%94#0 aggregate%bytes_offset%98#0 8u) // on error: index access is out of bounds
        let array_item%97#0: Encoded(uint64) = aggregate%encoded_element%98#0
        let values%97#0: uint64 = (btoi array_item%97#0)
        let tmp%246#0: bool = (== values%97#0 1u)
        let tmp%247#0: bool = (&& tmp%245#0 tmp%246#0)
        let aggregate%total_length%95#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%95#0: bytes = (substring3 arr6#0 2u aggregate%total_length%95#0)
        let aggregate%bytes_offset%99#0: uint64 = (* 9u 8u)
        let aggregate%encoded_element%99#0: bytes = (extract3 aggregate%array_trimmed%95#0 aggregate%bytes_offset%99#0 8u) // on error: index access is out of bounds
        let array_item%98#0: Encoded(uint64) = aggregate%encoded_element%99#0
        let values%98#0: uint64 = (btoi array_item%98#0)
        let tmp%248#0: bool = (== values%98#0 10u)
        let tmp%249#0: bool = (&& tmp%247#0 tmp%248#0)
        let aggregate%total_length%96#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%96#0: bytes = (substring3 arr6#0 2u aggregate%total_length%96#0)
        let aggregate%bytes_offset%100#0: uint64 = (* 10u 8u)
        let aggregate%encoded_element%100#0: bytes = (extract3 aggregate%array_trimmed%96#0 aggregate%bytes_offset%100#0 8u) // on error: index access is out of bounds
        let array_item%99#0: Encoded(uint64) = aggregate%encoded_element%100#0
        let values%99#0: uint64 = (btoi array_item%99#0)
        let tmp%250#0: bool = (== values%99#0 3u)
        let tmp%251#0: bool = (&& tmp%249#0 tmp%250#0)
        let aggregate%total_length%97#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%97#0: bytes = (substring3 arr6#0 2u aggregate%total_length%97#0)
        let aggregate%bytes_offset%101#0: uint64 = (* 11u 8u)
        let aggregate%encoded_element%101#0: bytes = (extract3 aggregate%array_trimmed%97#0 aggregate%bytes_offset%101#0 8u) // on error: index access is out of bounds
        let array_item%100#0: Encoded(uint64) = aggregate%encoded_element%101#0
        let values%100#0: uint64 = (btoi array_item%100#0)
        let tmp%252#0: bool = (== values%100#0 4u)
        let tmp%253#0: bool = (&& tmp%251#0 tmp%252#0)
        let aggregate%total_length%98#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%98#0: bytes = (substring3 arr6#0 2u aggregate%total_length%98#0)
        let aggregate%bytes_offset%102#0: uint64 = (* 12u 8u)
        let aggregate%encoded_element%102#0: bytes = (extract3 aggregate%array_trimmed%98#0 aggregate%bytes_offset%102#0 8u) // on error: index access is out of bounds
        let array_item%101#0: Encoded(uint64) = aggregate%encoded_element%102#0
        let values%101#0: uint64 = (btoi array_item%101#0)
        let tmp%254#0: bool = (== values%101#0 11u)
        let tmp%255#0: bool = (&& tmp%253#0 tmp%254#0)
        let aggregate%total_length%99#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%99#0: bytes = (substring3 arr6#0 2u aggregate%total_length%99#0)
        let aggregate%bytes_offset%103#0: uint64 = (* 13u 8u)
        let aggregate%encoded_element%103#0: bytes = (extract3 aggregate%array_trimmed%99#0 aggregate%bytes_offset%103#0 8u) // on error: index access is out of bounds
        let array_item%102#0: Encoded(uint64) = aggregate%encoded_element%103#0
        let values%102#0: uint64 = (btoi array_item%102#0)
        let tmp%256#0: bool = (== values%102#0 12u)
        let tmp%257#0: bool = (&& tmp%255#0 tmp%256#0)
        let aggregate%total_length%100#0: uint64 = (len arr6#0)
        let aggregate%array_trimmed%100#0: bytes = (substring3 arr6#0 2u aggregate%total_length%100#0)
        let aggregate%bytes_offset%104#0: uint64 = (* 14u 8u)
        let aggregate%encoded_element%104#0: bytes = (extract3 aggregate%array_trimmed%100#0 aggregate%bytes_offset%104#0 8u) // on error: index access is out of bounds
        let array_item%103#0: Encoded(uint64) = aggregate%encoded_element%104#0
        let values%103#0: uint64 = (btoi array_item%103#0)
        let tmp%258#0: bool = (== values%103#0 13u)
        let tmp%259#0: bool = (&& tmp%257#0 tmp%258#0)
        (assert tmp%259#0) // assert target is match for conditions
        let concat%12#0: Encoded(len+uint64[]) = (concat arr#6 extract_to_end%10#0) // on error: max array length exceeded
        let extract_to_end%15#0: bytes = ((extract 2 0) concat%12#0)
        let len%8#0: uint64 = (len extract_to_end%15#0)
        let div_floor%8#0: uint64 = (/ len%8#0 8u)
        let as_bytes%15#0: bytes[8] = (itob div_floor%8#0)
        let as_u16_bytes%15#0: bytes = ((extract 6 2) as_bytes%15#0)
        let arr7#0: Encoded(len+uint64[]) = ((replace2 0) concat%12#0 as_u16_bytes%15#0)
        let aggregate%array_length%13#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%260#0: uint64 = aggregate%array_length%13#0
        let tmp%261#0: bool = (== tmp%260#0 16u)
        (assert tmp%261#0)
        let aggregate%array_length%14#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%262#0: uint64 = aggregate%array_length%14#0
        let tmp%263#0: bool = (== tmp%262#0 16u)
        let aggregate%total_length%101#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%101#0: bytes = (substring3 arr7#0 2u aggregate%total_length%101#0)
        let aggregate%bytes_offset%105#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%105#0: bytes = (extract3 aggregate%array_trimmed%101#0 aggregate%bytes_offset%105#0 8u) // on error: index access is out of bounds
        let array_item%104#0: Encoded(uint64) = aggregate%encoded_element%105#0
        let values%104#0: uint64 = (btoi array_item%104#0)
        let tmp%264#0: bool = (== values%104#0 1u)
        let tmp%265#0: bool = (&& tmp%263#0 tmp%264#0)
        let aggregate%total_length%102#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%102#0: bytes = (substring3 arr7#0 2u aggregate%total_length%102#0)
        let aggregate%bytes_offset%106#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%106#0: bytes = (extract3 aggregate%array_trimmed%102#0 aggregate%bytes_offset%106#0 8u) // on error: index access is out of bounds
        let array_item%105#0: Encoded(uint64) = aggregate%encoded_element%106#0
        let values%105#0: uint64 = (btoi array_item%105#0)
        let tmp%266#0: bool = (== values%105#0 10u)
        let tmp%267#0: bool = (&& tmp%265#0 tmp%266#0)
        let aggregate%total_length%103#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%103#0: bytes = (substring3 arr7#0 2u aggregate%total_length%103#0)
        let aggregate%bytes_offset%107#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%107#0: bytes = (extract3 aggregate%array_trimmed%103#0 aggregate%bytes_offset%107#0 8u) // on error: index access is out of bounds
        let array_item%106#0: Encoded(uint64) = aggregate%encoded_element%107#0
        let values%106#0: uint64 = (btoi array_item%106#0)
        let tmp%268#0: bool = (== values%106#0 3u)
        let tmp%269#0: bool = (&& tmp%267#0 tmp%268#0)
        let aggregate%total_length%104#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%104#0: bytes = (substring3 arr7#0 2u aggregate%total_length%104#0)
        let aggregate%bytes_offset%108#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%108#0: bytes = (extract3 aggregate%array_trimmed%104#0 aggregate%bytes_offset%108#0 8u) // on error: index access is out of bounds
        let array_item%107#0: Encoded(uint64) = aggregate%encoded_element%108#0
        let values%107#0: uint64 = (btoi array_item%107#0)
        let tmp%270#0: bool = (== values%107#0 4u)
        let tmp%271#0: bool = (&& tmp%269#0 tmp%270#0)
        let aggregate%total_length%105#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%105#0: bytes = (substring3 arr7#0 2u aggregate%total_length%105#0)
        let aggregate%bytes_offset%109#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%109#0: bytes = (extract3 aggregate%array_trimmed%105#0 aggregate%bytes_offset%109#0 8u) // on error: index access is out of bounds
        let array_item%108#0: Encoded(uint64) = aggregate%encoded_element%109#0
        let values%108#0: uint64 = (btoi array_item%108#0)
        let tmp%272#0: bool = (== values%108#0 1u)
        let tmp%273#0: bool = (&& tmp%271#0 tmp%272#0)
        let aggregate%total_length%106#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%106#0: bytes = (substring3 arr7#0 2u aggregate%total_length%106#0)
        let aggregate%bytes_offset%110#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%110#0: bytes = (extract3 aggregate%array_trimmed%106#0 aggregate%bytes_offset%110#0 8u) // on error: index access is out of bounds
        let array_item%109#0: Encoded(uint64) = aggregate%encoded_element%110#0
        let values%109#0: uint64 = (btoi array_item%109#0)
        let tmp%274#0: bool = (== values%109#0 10u)
        let tmp%275#0: bool = (&& tmp%273#0 tmp%274#0)
        let aggregate%total_length%107#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%107#0: bytes = (substring3 arr7#0 2u aggregate%total_length%107#0)
        let aggregate%bytes_offset%111#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%111#0: bytes = (extract3 aggregate%array_trimmed%107#0 aggregate%bytes_offset%111#0 8u) // on error: index access is out of bounds
        let array_item%110#0: Encoded(uint64) = aggregate%encoded_element%111#0
        let values%110#0: uint64 = (btoi array_item%110#0)
        let tmp%276#0: bool = (== values%110#0 3u)
        let tmp%277#0: bool = (&& tmp%275#0 tmp%276#0)
        let aggregate%total_length%108#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%108#0: bytes = (substring3 arr7#0 2u aggregate%total_length%108#0)
        let aggregate%bytes_offset%112#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%112#0: bytes = (extract3 aggregate%array_trimmed%108#0 aggregate%bytes_offset%112#0 8u) // on error: index access is out of bounds
        let array_item%111#0: Encoded(uint64) = aggregate%encoded_element%112#0
        let values%111#0: uint64 = (btoi array_item%111#0)
        let tmp%278#0: bool = (== values%111#0 4u)
        let tmp%279#0: bool = (&& tmp%277#0 tmp%278#0)
        let aggregate%total_length%109#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%109#0: bytes = (substring3 arr7#0 2u aggregate%total_length%109#0)
        let aggregate%bytes_offset%113#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%113#0: bytes = (extract3 aggregate%array_trimmed%109#0 aggregate%bytes_offset%113#0 8u) // on error: index access is out of bounds
        let array_item%112#0: Encoded(uint64) = aggregate%encoded_element%113#0
        let values%112#0: uint64 = (btoi array_item%112#0)
        let tmp%280#0: bool = (== values%112#0 11u)
        let tmp%281#0: bool = (&& tmp%279#0 tmp%280#0)
        let aggregate%total_length%110#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%110#0: bytes = (substring3 arr7#0 2u aggregate%total_length%110#0)
        let aggregate%bytes_offset%114#0: uint64 = (* 9u 8u)
        let aggregate%encoded_element%114#0: bytes = (extract3 aggregate%array_trimmed%110#0 aggregate%bytes_offset%114#0 8u) // on error: index access is out of bounds
        let array_item%113#0: Encoded(uint64) = aggregate%encoded_element%114#0
        let values%113#0: uint64 = (btoi array_item%113#0)
        let tmp%282#0: bool = (== values%113#0 12u)
        let tmp%283#0: bool = (&& tmp%281#0 tmp%282#0)
        let aggregate%total_length%111#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%111#0: bytes = (substring3 arr7#0 2u aggregate%total_length%111#0)
        let aggregate%bytes_offset%115#0: uint64 = (* 10u 8u)
        let aggregate%encoded_element%115#0: bytes = (extract3 aggregate%array_trimmed%111#0 aggregate%bytes_offset%115#0 8u) // on error: index access is out of bounds
        let array_item%114#0: Encoded(uint64) = aggregate%encoded_element%115#0
        let values%114#0: uint64 = (btoi array_item%114#0)
        let tmp%284#0: bool = (== values%114#0 13u)
        let tmp%285#0: bool = (&& tmp%283#0 tmp%284#0)
        let aggregate%total_length%112#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%112#0: bytes = (substring3 arr7#0 2u aggregate%total_length%112#0)
        let aggregate%bytes_offset%116#0: uint64 = (* 11u 8u)
        let aggregate%encoded_element%116#0: bytes = (extract3 aggregate%array_trimmed%112#0 aggregate%bytes_offset%116#0 8u) // on error: index access is out of bounds
        let array_item%115#0: Encoded(uint64) = aggregate%encoded_element%116#0
        let values%115#0: uint64 = (btoi array_item%115#0)
        let tmp%286#0: bool = (== values%115#0 1u)
        let tmp%287#0: bool = (&& tmp%285#0 tmp%286#0)
        let aggregate%total_length%113#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%113#0: bytes = (substring3 arr7#0 2u aggregate%total_length%113#0)
        let aggregate%bytes_offset%117#0: uint64 = (* 12u 8u)
        let aggregate%encoded_element%117#0: bytes = (extract3 aggregate%array_trimmed%113#0 aggregate%bytes_offset%117#0 8u) // on error: index access is out of bounds
        let array_item%116#0: Encoded(uint64) = aggregate%encoded_element%117#0
        let values%116#0: uint64 = (btoi array_item%116#0)
        let tmp%288#0: bool = (== values%116#0 2u)
        let tmp%289#0: bool = (&& tmp%287#0 tmp%288#0)
        let aggregate%total_length%114#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%114#0: bytes = (substring3 arr7#0 2u aggregate%total_length%114#0)
        let aggregate%bytes_offset%118#0: uint64 = (* 13u 8u)
        let aggregate%encoded_element%118#0: bytes = (extract3 aggregate%array_trimmed%114#0 aggregate%bytes_offset%118#0 8u) // on error: index access is out of bounds
        let array_item%117#0: Encoded(uint64) = aggregate%encoded_element%118#0
        let values%117#0: uint64 = (btoi array_item%117#0)
        let tmp%290#0: bool = (== values%117#0 3u)
        let tmp%291#0: bool = (&& tmp%289#0 tmp%290#0)
        let aggregate%total_length%115#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%115#0: bytes = (substring3 arr7#0 2u aggregate%total_length%115#0)
        let aggregate%bytes_offset%119#0: uint64 = (* 14u 8u)
        let aggregate%encoded_element%119#0: bytes = (extract3 aggregate%array_trimmed%115#0 aggregate%bytes_offset%119#0 8u) // on error: index access is out of bounds
        let array_item%118#0: Encoded(uint64) = aggregate%encoded_element%119#0
        let values%118#0: uint64 = (btoi array_item%118#0)
        let tmp%292#0: bool = (== values%118#0 4u)
        let tmp%293#0: bool = (&& tmp%291#0 tmp%292#0)
        let aggregate%total_length%116#0: uint64 = (len arr7#0)
        let aggregate%array_trimmed%116#0: bytes = (substring3 arr7#0 2u aggregate%total_length%116#0)
        let aggregate%bytes_offset%120#0: uint64 = (* 15u 8u)
        let aggregate%encoded_element%120#0: bytes = (extract3 aggregate%array_trimmed%116#0 aggregate%bytes_offset%120#0 8u) // on error: index access is out of bounds
        let array_item%119#0: Encoded(uint64) = aggregate%encoded_element%120#0
        let values%119#0: uint64 = (btoi array_item%119#0)
        let tmp%294#0: bool = (== values%119#0 5u)
        let tmp%295#0: bool = (&& tmp%293#0 tmp%294#0)
        (assert tmp%295#0) // assert target is match for conditions
        let concat%13#0: Encoded(len+uint64[]) = (concat arr#6 fArr1#0) // on error: max array length exceeded
        let extract_to_end%16#0: bytes = ((extract 2 0) concat%13#0)
        let len%9#0: uint64 = (len extract_to_end%16#0)
        let div_floor%9#0: uint64 = (/ len%9#0 8u)
        let as_bytes%16#0: bytes[8] = (itob div_floor%9#0)
        let as_u16_bytes%16#0: bytes = ((extract 6 2) as_bytes%16#0)
        let arr8#0: Encoded(len+uint64[]) = ((replace2 0) concat%13#0 as_u16_bytes%16#0)
        let aggregate%array_length%15#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%296#0: uint64 = aggregate%array_length%15#0
        let tmp%297#0: bool = (== tmp%296#0 15u)
        (assert tmp%297#0)
        let aggregate%array_length%16#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%298#0: uint64 = aggregate%array_length%16#0
        let tmp%299#0: bool = (== tmp%298#0 15u)
        let aggregate%total_length%117#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%117#0: bytes = (substring3 arr8#0 2u aggregate%total_length%117#0)
        let aggregate%bytes_offset%121#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%121#0: bytes = (extract3 aggregate%array_trimmed%117#0 aggregate%bytes_offset%121#0 8u) // on error: index access is out of bounds
        let array_item%120#0: Encoded(uint64) = aggregate%encoded_element%121#0
        let values%120#0: uint64 = (btoi array_item%120#0)
        let tmp%300#0: bool = (== values%120#0 1u)
        let tmp%301#0: bool = (&& tmp%299#0 tmp%300#0)
        let aggregate%total_length%118#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%118#0: bytes = (substring3 arr8#0 2u aggregate%total_length%118#0)
        let aggregate%bytes_offset%122#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%122#0: bytes = (extract3 aggregate%array_trimmed%118#0 aggregate%bytes_offset%122#0 8u) // on error: index access is out of bounds
        let array_item%121#0: Encoded(uint64) = aggregate%encoded_element%122#0
        let values%121#0: uint64 = (btoi array_item%121#0)
        let tmp%302#0: bool = (== values%121#0 10u)
        let tmp%303#0: bool = (&& tmp%301#0 tmp%302#0)
        let aggregate%total_length%119#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%119#0: bytes = (substring3 arr8#0 2u aggregate%total_length%119#0)
        let aggregate%bytes_offset%123#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%123#0: bytes = (extract3 aggregate%array_trimmed%119#0 aggregate%bytes_offset%123#0 8u) // on error: index access is out of bounds
        let array_item%122#0: Encoded(uint64) = aggregate%encoded_element%123#0
        let values%122#0: uint64 = (btoi array_item%122#0)
        let tmp%304#0: bool = (== values%122#0 3u)
        let tmp%305#0: bool = (&& tmp%303#0 tmp%304#0)
        let aggregate%total_length%120#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%120#0: bytes = (substring3 arr8#0 2u aggregate%total_length%120#0)
        let aggregate%bytes_offset%124#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%124#0: bytes = (extract3 aggregate%array_trimmed%120#0 aggregate%bytes_offset%124#0 8u) // on error: index access is out of bounds
        let array_item%123#0: Encoded(uint64) = aggregate%encoded_element%124#0
        let values%123#0: uint64 = (btoi array_item%123#0)
        let tmp%306#0: bool = (== values%123#0 4u)
        let tmp%307#0: bool = (&& tmp%305#0 tmp%306#0)
        let aggregate%total_length%121#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%121#0: bytes = (substring3 arr8#0 2u aggregate%total_length%121#0)
        let aggregate%bytes_offset%125#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%125#0: bytes = (extract3 aggregate%array_trimmed%121#0 aggregate%bytes_offset%125#0 8u) // on error: index access is out of bounds
        let array_item%124#0: Encoded(uint64) = aggregate%encoded_element%125#0
        let values%124#0: uint64 = (btoi array_item%124#0)
        let tmp%308#0: bool = (== values%124#0 1u)
        let tmp%309#0: bool = (&& tmp%307#0 tmp%308#0)
        let aggregate%total_length%122#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%122#0: bytes = (substring3 arr8#0 2u aggregate%total_length%122#0)
        let aggregate%bytes_offset%126#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%126#0: bytes = (extract3 aggregate%array_trimmed%122#0 aggregate%bytes_offset%126#0 8u) // on error: index access is out of bounds
        let array_item%125#0: Encoded(uint64) = aggregate%encoded_element%126#0
        let values%125#0: uint64 = (btoi array_item%125#0)
        let tmp%310#0: bool = (== values%125#0 10u)
        let tmp%311#0: bool = (&& tmp%309#0 tmp%310#0)
        let aggregate%total_length%123#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%123#0: bytes = (substring3 arr8#0 2u aggregate%total_length%123#0)
        let aggregate%bytes_offset%127#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%127#0: bytes = (extract3 aggregate%array_trimmed%123#0 aggregate%bytes_offset%127#0 8u) // on error: index access is out of bounds
        let array_item%126#0: Encoded(uint64) = aggregate%encoded_element%127#0
        let values%126#0: uint64 = (btoi array_item%126#0)
        let tmp%312#0: bool = (== values%126#0 3u)
        let tmp%313#0: bool = (&& tmp%311#0 tmp%312#0)
        let aggregate%total_length%124#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%124#0: bytes = (substring3 arr8#0 2u aggregate%total_length%124#0)
        let aggregate%bytes_offset%128#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%128#0: bytes = (extract3 aggregate%array_trimmed%124#0 aggregate%bytes_offset%128#0 8u) // on error: index access is out of bounds
        let array_item%127#0: Encoded(uint64) = aggregate%encoded_element%128#0
        let values%127#0: uint64 = (btoi array_item%127#0)
        let tmp%314#0: bool = (== values%127#0 4u)
        let tmp%315#0: bool = (&& tmp%313#0 tmp%314#0)
        let aggregate%total_length%125#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%125#0: bytes = (substring3 arr8#0 2u aggregate%total_length%125#0)
        let aggregate%bytes_offset%129#0: uint64 = (* 8u 8u)
        let aggregate%encoded_element%129#0: bytes = (extract3 aggregate%array_trimmed%125#0 aggregate%bytes_offset%129#0 8u) // on error: index access is out of bounds
        let array_item%128#0: Encoded(uint64) = aggregate%encoded_element%129#0
        let values%128#0: uint64 = (btoi array_item%128#0)
        let tmp%316#0: bool = (== values%128#0 11u)
        let tmp%317#0: bool = (&& tmp%315#0 tmp%316#0)
        let aggregate%total_length%126#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%126#0: bytes = (substring3 arr8#0 2u aggregate%total_length%126#0)
        let aggregate%bytes_offset%130#0: uint64 = (* 9u 8u)
        let aggregate%encoded_element%130#0: bytes = (extract3 aggregate%array_trimmed%126#0 aggregate%bytes_offset%130#0 8u) // on error: index access is out of bounds
        let array_item%129#0: Encoded(uint64) = aggregate%encoded_element%130#0
        let values%129#0: uint64 = (btoi array_item%129#0)
        let tmp%318#0: bool = (== values%129#0 12u)
        let tmp%319#0: bool = (&& tmp%317#0 tmp%318#0)
        let aggregate%total_length%127#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%127#0: bytes = (substring3 arr8#0 2u aggregate%total_length%127#0)
        let aggregate%bytes_offset%131#0: uint64 = (* 10u 8u)
        let aggregate%encoded_element%131#0: bytes = (extract3 aggregate%array_trimmed%127#0 aggregate%bytes_offset%131#0 8u) // on error: index access is out of bounds
        let array_item%130#0: Encoded(uint64) = aggregate%encoded_element%131#0
        let values%130#0: uint64 = (btoi array_item%130#0)
        let tmp%320#0: bool = (== values%130#0 13u)
        let tmp%321#0: bool = (&& tmp%319#0 tmp%320#0)
        let aggregate%total_length%128#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%128#0: bytes = (substring3 arr8#0 2u aggregate%total_length%128#0)
        let aggregate%bytes_offset%132#0: uint64 = (* 11u 8u)
        let aggregate%encoded_element%132#0: bytes = (extract3 aggregate%array_trimmed%128#0 aggregate%bytes_offset%132#0 8u) // on error: index access is out of bounds
        let array_item%131#0: Encoded(uint64) = aggregate%encoded_element%132#0
        let values%131#0: uint64 = (btoi array_item%131#0)
        let tmp%322#0: bool = (! values%131#0)
        let tmp%323#0: bool = (&& tmp%321#0 tmp%322#0)
        let aggregate%total_length%129#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%129#0: bytes = (substring3 arr8#0 2u aggregate%total_length%129#0)
        let aggregate%bytes_offset%133#0: uint64 = (* 12u 8u)
        let aggregate%encoded_element%133#0: bytes = (extract3 aggregate%array_trimmed%129#0 aggregate%bytes_offset%133#0 8u) // on error: index access is out of bounds
        let array_item%132#0: Encoded(uint64) = aggregate%encoded_element%133#0
        let values%132#0: uint64 = (btoi array_item%132#0)
        let tmp%324#0: bool = (! values%132#0)
        let tmp%325#0: bool = (&& tmp%323#0 tmp%324#0)
        let aggregate%total_length%130#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%130#0: bytes = (substring3 arr8#0 2u aggregate%total_length%130#0)
        let aggregate%bytes_offset%134#0: uint64 = (* 13u 8u)
        let aggregate%encoded_element%134#0: bytes = (extract3 aggregate%array_trimmed%130#0 aggregate%bytes_offset%134#0 8u) // on error: index access is out of bounds
        let array_item%133#0: Encoded(uint64) = aggregate%encoded_element%134#0
        let values%133#0: uint64 = (btoi array_item%133#0)
        let tmp%326#0: bool = (! values%133#0)
        let tmp%327#0: bool = (&& tmp%325#0 tmp%326#0)
        let aggregate%total_length%131#0: uint64 = (len arr8#0)
        let aggregate%array_trimmed%131#0: bytes = (substring3 arr8#0 2u aggregate%total_length%131#0)
        let aggregate%bytes_offset%135#0: uint64 = (* 14u 8u)
        let aggregate%encoded_element%135#0: bytes = (extract3 aggregate%array_trimmed%131#0 aggregate%bytes_offset%135#0 8u) // on error: index access is out of bounds
        let array_item%134#0: Encoded(uint64) = aggregate%encoded_element%135#0
        let values%134#0: uint64 = (btoi array_item%134#0)
        let tmp%328#0: bool = (! values%134#0)
        let tmp%329#0: bool = (&& tmp%327#0 tmp%328#0)
        (assert tmp%329#0) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.fixedArray(y: Encoded(uint64[50])) -> void:
    block@0: // L109
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64[4])%0#0: Encoded(uint64[4]) = aggregate%head%3#0
        let x#0: Encoded(uint64[4]) = aggregate%as_Encoded(uint64[4])%0#0
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%4#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 x#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%updated_array%0#0: bytes = (replace3 x#0 aggregate%write_offset%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let x#1: Encoded(uint64[4]) = aggregate%updated_array%0#0
        let x2#0: Encoded(uint64[50]) = (bzero 400u)
        let tmp%1#0: uint64 = 50u
        let tmp%2#0: bool = (== tmp%1#0 50u)
        (assert tmp%2#0)
        let x3#0: Encoded(uint8[32][12]) = (bzero 384u)
        let tmp%4#0: uint64 = 12u
        let tmp%5#0: bool = (== tmp%4#0 12u)
        (assert tmp%5#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 x#1 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 y#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%6#0: bool = (== values%0#0 values%1#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = 4u
        let tmp%8#0: bool = (== tmp%7#0 4u)
        let tmp%9#0: bool = (< values%0#0 1u)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 x#1 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%11#0: bool = (== values%3#0 2u)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 x#1 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%13#0: bool = (== values%4#0 3u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 x#1 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%15#0: bool = (== values%5#0 4u)
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // assert target is match for conditions
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%5#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%5#0
        let tmp%18#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%7#0
        let tmp%19#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%head%8#0: bytes = (concat 0x tmp%18#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 tmp%19#0)
        let aggregate%as_Encoded((uint64,uint64)[2])%0#0: Encoded((uint64,uint64)[2]) = aggregate%head%9#0
        let myVectors#0: Encoded((uint64,uint64)[2]) = aggregate%as_Encoded((uint64,uint64)[2])%0#0
        let tmp%20#0: uint64 = 2u
        let tmp%21#0: bool = (== tmp%20#0 2u)
        let aggregate%bytes_offset%6#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%6#0: bytes = (extract3 myVectors#0 aggregate%bytes_offset%6#0 16u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = (extract3 aggregate%encoded_element%6#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%7#0: uint64 = (btoi tuple_item%0#0)
        let tmp%22#0: bool = (== values%7#0 1u)
        let aggregate%bytes_offset%7#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%7#0: bytes = (extract3 myVectors#0 aggregate%bytes_offset%7#0 16u) // on error: index access is out of bounds
        let aggregate%extract%1#0: bytes = (extract3 aggregate%encoded_element%7#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%8#0: uint64 = (btoi tuple_item%1#0)
        let tmp%23#0: bool = (== values%8#0 2u)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        let tmp%25#0: bool = (&& tmp%21#0 tmp%24#0)
        let aggregate%bytes_offset%8#0: uint64 = (* 1u 16u)
        let aggregate%encoded_element%8#0: bytes = (extract3 myVectors#0 aggregate%bytes_offset%8#0 16u) // on error: index access is out of bounds
        let aggregate%extract%2#0: bytes = (extract3 aggregate%encoded_element%8#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%9#0: uint64 = (btoi tuple_item%2#0)
        let tmp%26#0: bool = (== values%9#0 3u)
        let aggregate%bytes_offset%9#0: uint64 = (* 1u 16u)
        let aggregate%encoded_element%9#0: bytes = (extract3 myVectors#0 aggregate%bytes_offset%9#0 16u) // on error: index access is out of bounds
        let aggregate%extract%3#0: bytes = (extract3 aggregate%encoded_element%9#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%10#0: uint64 = (btoi tuple_item%3#0)
        let tmp%27#0: bool = (== values%10#0 4u)
        let tmp%28#0: bool = (&& tmp%26#0 tmp%27#0)
        let tmp%29#0: bool = (&& tmp%25#0 tmp%28#0)
        (assert tmp%29#0) // assert target is match for conditions
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%10#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 6u)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%11#0
        let tmp%30#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#0
        let aggregate%head%12#0: bytes = (concat 0x tmp%30#0)
        let aggregate%as_Encoded((uint64,uint64)[1])%0#0: Encoded((uint64,uint64)[1]) = aggregate%head%12#0
        let encoded_array%2#0: Encoded((uint64,uint64)[1]) = aggregate%as_Encoded((uint64,uint64)[1])%0#0
        let aggregate%head%13#0: bytes = (concat 0x encoded_array%2#0)
        let aggregate%as_Encoded((uint64,uint64)[1])%1#0: Encoded((uint64,uint64)[1]) = aggregate%head%13#0
        let myObject#0: Encoded((uint64,uint64)[1]) = aggregate%as_Encoded((uint64,uint64)[1])%1#0
        let aggregate%extract%4#0: bytes = (extract3 myObject#0 0u 16u)
        let tuple_item%4#0: Encoded((uint64,uint64)[1]) = aggregate%extract%4#0
        let tmp%32#0: uint64 = 1u
        let tmp%33#0: bool = (== tmp%32#0 1u)
        let aggregate%extract%5#0: bytes = (extract3 myObject#0 0u 16u)
        let aggregate%bytes_offset%10#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%10#0: bytes = (extract3 aggregate%extract%5#0 aggregate%bytes_offset%10#0 16u) // on error: index access is out of bounds
        let aggregate%extract%6#0: bytes = (extract3 aggregate%encoded_element%10#0 0u 8u)
        let tuple_item%6#0: Encoded(uint64) = aggregate%extract%6#0
        let values%11#0: uint64 = (btoi tuple_item%6#0)
        let tmp%34#0: bool = (== values%11#0 5u)
        let aggregate%extract%7#0: bytes = (extract3 myObject#0 0u 16u)
        let aggregate%bytes_offset%11#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%11#0: bytes = (extract3 aggregate%extract%7#0 aggregate%bytes_offset%11#0 16u) // on error: index access is out of bounds
        let aggregate%extract%8#0: bytes = (extract3 aggregate%encoded_element%11#0 8u 8u)
        let tuple_item%8#0: Encoded(uint64) = aggregate%extract%8#0
        let values%12#0: uint64 = (btoi tuple_item%8#0)
        let tmp%35#0: bool = (== values%12#0 6u)
        let tmp%36#0: bool = (&& tmp%34#0 tmp%35#0)
        let tmp%37#0: bool = (&& tmp%33#0 tmp%36#0)
        (assert tmp%37#0) // assert target is match for conditions
        let z1#0: Encoded(uint64[4]) = (bzero 32u)
        let tmp%39#0: uint64 = 4u
        let tmp%40#0: bool = (== tmp%39#0 4u)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = 4u
        let tmp%42#0: bool = (== tmp%41#0 4u)
        let aggregate%bytes_offset%12#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%12#0: bytes = (extract3 z1#0 aggregate%bytes_offset%12#0 8u) // on error: index access is out of bounds
        let array_item%13#0: Encoded(uint64) = aggregate%encoded_element%12#0
        let values%13#0: uint64 = (btoi array_item%13#0)
        let tmp%43#0: bool = (! values%13#0)
        let tmp%44#0: bool = (&& tmp%42#0 tmp%43#0)
        let aggregate%bytes_offset%13#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%13#0: bytes = (extract3 z1#0 aggregate%bytes_offset%13#0 8u) // on error: index access is out of bounds
        let array_item%14#0: Encoded(uint64) = aggregate%encoded_element%13#0
        let values%14#0: uint64 = (btoi array_item%14#0)
        let tmp%45#0: bool = (! values%14#0)
        let tmp%46#0: bool = (&& tmp%44#0 tmp%45#0)
        let aggregate%bytes_offset%14#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%14#0: bytes = (extract3 z1#0 aggregate%bytes_offset%14#0 8u) // on error: index access is out of bounds
        let array_item%15#0: Encoded(uint64) = aggregate%encoded_element%14#0
        let values%15#0: uint64 = (btoi array_item%15#0)
        let tmp%47#0: bool = (! values%15#0)
        let tmp%48#0: bool = (&& tmp%46#0 tmp%47#0)
        let aggregate%bytes_offset%15#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%15#0: bytes = (extract3 z1#0 aggregate%bytes_offset%15#0 8u) // on error: index access is out of bounds
        let array_item%16#0: Encoded(uint64) = aggregate%encoded_element%15#0
        let values%16#0: uint64 = (btoi array_item%16#0)
        let tmp%49#0: bool = (! values%16#0)
        let tmp%50#0: bool = (&& tmp%48#0 tmp%49#0)
        (assert tmp%50#0) // assert target is match for conditions
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%11#0: Encoded(uint64) = aggregate%val_as_bytes%11#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%11#0
        let aggregate%bytes_offset%16#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%16#0: bytes = (extract3 z1#0 aggregate%bytes_offset%16#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%updated_array%1#0: bytes = (replace3 z1#0 aggregate%write_offset%1#0 encoded_value%1#0) // on error: index access is out of bounds
        let z1#1: Encoded(uint64[4]) = aggregate%updated_array%1#0
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%12#0: Encoded(uint64) = aggregate%val_as_bytes%12#0
        let encoded_value%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%12#0
        let aggregate%bytes_offset%17#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%17#0: bytes = (extract3 z1#1 aggregate%bytes_offset%17#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%2#0: uint64 = (* 1u 8u)
        let aggregate%updated_array%2#0: bytes = (replace3 z1#1 aggregate%write_offset%2#0 encoded_value%2#0) // on error: index access is out of bounds
        let z1#2: Encoded(uint64[4]) = aggregate%updated_array%2#0
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%13#0: Encoded(uint64) = aggregate%val_as_bytes%13#0
        let encoded_value%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%13#0
        let aggregate%bytes_offset%18#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%18#0: bytes = (extract3 z1#2 aggregate%bytes_offset%18#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%3#0: uint64 = (* 2u 8u)
        let aggregate%updated_array%3#0: bytes = (replace3 z1#2 aggregate%write_offset%3#0 encoded_value%3#0) // on error: index access is out of bounds
        let z1#3: Encoded(uint64[4]) = aggregate%updated_array%3#0
        let aggregate%val_as_bytes%14#0: bytes[8] = (itob 4u)
        let aggregate%as_Encoded(uint64)%14#0: Encoded(uint64) = aggregate%val_as_bytes%14#0
        let encoded_value%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%14#0
        let aggregate%bytes_offset%19#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%19#0: bytes = (extract3 z1#3 aggregate%bytes_offset%19#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%4#0: uint64 = (* 3u 8u)
        let aggregate%updated_array%4#0: bytes = (replace3 z1#3 aggregate%write_offset%4#0 encoded_value%4#0) // on error: index access is out of bounds
        let z1#4: Encoded(uint64[4]) = aggregate%updated_array%4#0
        let tmp%51#0: uint64 = 4u
        let tmp%52#0: bool = (== tmp%51#0 4u)
        let aggregate%bytes_offset%20#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%20#0: bytes = (extract3 z1#4 aggregate%bytes_offset%20#0 8u) // on error: index access is out of bounds
        let array_item%17#0: Encoded(uint64) = aggregate%encoded_element%20#0
        let values%17#0: uint64 = (btoi array_item%17#0)
        let tmp%53#0: bool = (<= values%17#0 1u)
        let tmp%54#0: bool = (&& tmp%52#0 tmp%53#0)
        let aggregate%bytes_offset%21#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%21#0: bytes = (extract3 z1#4 aggregate%bytes_offset%21#0 8u) // on error: index access is out of bounds
        let array_item%18#0: Encoded(uint64) = aggregate%encoded_element%21#0
        let values%18#0: uint64 = (btoi array_item%18#0)
        let tmp%55#0: bool = (== values%18#0 2u)
        let tmp%56#0: bool = (&& tmp%54#0 tmp%55#0)
        let aggregate%bytes_offset%22#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%22#0: bytes = (extract3 z1#4 aggregate%bytes_offset%22#0 8u) // on error: index access is out of bounds
        let array_item%19#0: Encoded(uint64) = aggregate%encoded_element%22#0
        let values%19#0: uint64 = (btoi array_item%19#0)
        let tmp%57#0: bool = (== values%19#0 3u)
        let tmp%58#0: bool = (&& tmp%56#0 tmp%57#0)
        let aggregate%bytes_offset%23#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%23#0: bytes = (extract3 z1#4 aggregate%bytes_offset%23#0 8u) // on error: index access is out of bounds
        let array_item%20#0: Encoded(uint64) = aggregate%encoded_element%23#0
        let values%20#0: uint64 = (btoi array_item%20#0)
        let tmp%59#0: bool = (== values%20#0 4u)
        let tmp%60#0: bool = (&& tmp%58#0 tmp%59#0)
        (assert tmp%60#0) // assert target is match for conditions
        let z2#0: Encoded(bool1[3]) = (bzero 1u)
        let aggregate%lt%0#0: bool = (< 0u 3u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%get_bit%0#0: bool = (getbit z2#0 0u)
        let array_item%21#0: bool = aggregate%get_bit%0#0
        let values%21#0: bool = array_item%21#0
        let tmp%62#0: bool = (! values%21#0)
        (assert tmp%62#0)
        let z3#0: Encoded(uint64[2][4]) = (bzero 64u)
        let tmp%64#0: uint64 = 4u
        let tmp%65#0: bool = (== tmp%64#0 4u)
        (assert tmp%65#0)
        let tmp%67#0: uint64 = 4u
        let tmp%68#0: bool = (== tmp%67#0 4u)
        (assert tmp%68#0)
        let tmp%70#0: uint64 = 4u
        let tmp%71#0: bool = (== tmp%70#0 4u)
        (assert tmp%71#0)
        let z6#0: Encoded((uint64,bool1)[4]) = (bzero 36u)
        let tmp%73#0: uint64 = 4u
        let tmp%74#0: bool = (== tmp%73#0 4u)
        (assert tmp%74#0)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Interop() -> void:
    block@0: // L157
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x0000007b)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x0000007b)
        let aggregate%as_Encoded(len+uint32[])%0#0: Encoded(len+uint32[]) = aggregate%head%1#0
        let da1#0: Encoded(len+uint32[]) = aggregate%as_Encoded(len+uint32[])%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x0000007b)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x0000007b)
        let aggregate%as_Encoded(uint32[2])%0#0: Encoded(uint32[2]) = aggregate%head%3#0
        let sa1#0: Encoded(uint32[2]) = aggregate%as_Encoded(uint32[2])%0#0
        let extract_to_end%0#0: bytes = ((extract 2 0) da1#0)
        let concat%0#0: Encoded(len+uint32[]) = (concat da1#0 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 4u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let concat%1#0: Encoded(len+uint32[]) = (concat replace%0#0 sa1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 4u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let a1#1: Encoded(len+uint32[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 a1#1 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 6u)
        let aggregate%total_length%0#0: uint64 = (len a1#1)
        let aggregate%array_trimmed%0#0: bytes = (substring3 a1#1 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 4u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 4u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint32) = aggregate%encoded_element%0#0
        let tmp%2#0: bool = (== array_item%0#0 0x0000007b)
        let tmp%3#0: bool = (&& tmp%1#0 tmp%2#0)
        let aggregate%total_length%1#0: uint64 = (len a1#1)
        let aggregate%array_trimmed%1#0: bytes = (substring3 a1#1 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 4u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 4u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint32) = aggregate%encoded_element%1#0
        let tmp%4#0: bool = (== array_item%1#0 0x0000007b)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        let aggregate%total_length%2#0: uint64 = (len a1#1)
        let aggregate%array_trimmed%2#0: bytes = (substring3 a1#1 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 4u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 4u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint32) = aggregate%encoded_element%2#0
        let tmp%6#0: bool = (== array_item%2#0 0x0000007b)
        let tmp%7#0: bool = (&& tmp%5#0 tmp%6#0)
        let aggregate%total_length%3#0: uint64 = (len a1#1)
        let aggregate%array_trimmed%3#0: bytes = (substring3 a1#1 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 4u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 4u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint32) = aggregate%encoded_element%3#0
        let tmp%8#0: bool = (== array_item%3#0 0x0000007b)
        let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
        let aggregate%total_length%4#0: uint64 = (len a1#1)
        let aggregate%array_trimmed%4#0: bytes = (substring3 a1#1 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 4u 4u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 4u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint32) = aggregate%encoded_element%4#0
        let tmp%10#0: bool = (== array_item%4#0 0x0000007b)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        let aggregate%total_length%5#0: uint64 = (len a1#1)
        let aggregate%array_trimmed%5#0: bytes = (substring3 a1#1 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 5u 4u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 4u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint32) = aggregate%encoded_element%5#0
        let tmp%12#0: bool = (== array_item%5#0 0x0000007b)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0) // assert target is match for conditions
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.structs(p: Encoded(uint64,uint64)) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L170
        let aggregate%extract%0#0: bytes = (extract3 p#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let x#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 p#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let y#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob x#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob y#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%head%2#0
        let myVectors#1: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#0: uint64 = aggregate%array_length%0#0
        let tmp%2#0: bool = (== tmp%1#0 1u)
        let aggregate%total_length%0#0: uint64 = (len myVectors#1)
        let aggregate%array_trimmed%0#0: bytes = (substring3 myVectors#1 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%2#0: bytes = (extract3 aggregate%encoded_element%0#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%3#0: bool = (== values%2#0 x#0)
        let aggregate%total_length%1#0: uint64 = (len myVectors#1)
        let aggregate%array_trimmed%1#0: bytes = (substring3 myVectors#1 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let aggregate%extract%3#0: bytes = (extract3 aggregate%encoded_element%1#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let tmp%4#0: bool = (== values%3#0 y#0)
        let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
        let tmp%6#0: bool = (&& tmp%2#0 tmp%5#0)
        (assert tmp%6#0) // assert target is match for conditions
        return myVectors#1

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.booleans() -> Encoded(len+bool1[]):
    block@0: // L179
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u 0u)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u 1u)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%set_bit%1#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4Booleans() -> Encoded(len+bool1[]):
    block@0: // L187
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%get_bit%0#0: bool = (getbit tmp%1#0 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%0#0 1u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: bool = (getbit tmp%0#0 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit aggregate%set_bit%0#0 2u aggregate%get_bit%1#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%set_bit%1#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        return encoded_array%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.arc4BooleansStatic() -> <Encoded(bool8), Encoded(bool8), Encoded(bool8)>:
    block@0: // L191
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%0#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        return tmp%0#0 tmp%1#0 tmp%0#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.aliasing(mutable: Encoded(len+uint64[]), readOnly: Encoded(len+uint64[])) -> void:
    block@0: // L195
        let aggregate%total_length%0#0: uint64 = (len mutable#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 mutable#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%1#0: uint64 = (+ values%0#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%total_length%1#0: uint64 = (len mutable#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 mutable#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 1u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 mutable#0 aggregate%write_offset_with_length_header%0#0 encoded_value%1#0) // on error: index access is out of bounds
        let mutable#1: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        let aggregate%total_length%2#0: uint64 = (len mutable#1)
        let aggregate%array_trimmed%2#0: bytes = (substring3 mutable#1 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%2#0: bool = (!= values%1#0 values%0#0)
        (assert tmp%2#0) // These should not match
        let mutable#2: Encoded(len+uint64[]) = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(mutable#1)
        return 

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.receiveMutable(a: Encoded(len+uint64[])) -> Encoded(len+uint64[]):
    block@0: // L221
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%total_length%0#0: uint64 = (len a#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 a#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 a#0 aggregate%write_offset_with_length_header%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let a#1: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        return a#1