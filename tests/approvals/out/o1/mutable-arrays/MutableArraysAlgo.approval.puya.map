{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/mutable-arrays.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;;AAAA;AADF;;;AAAA;AACE;;;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEa;;;AACU;AAAZ;;AAAe;;AAAA;;AAAA;AAAxB;;;AACU;;AAAA;AAAA;;;AAAR;AAAA;;;AADkC;AAAA;AAAA;;;;;;;AAI1B;AAAA;AAAA;AAAA;AAAA;AAAH;;AAAA;AAAP;AACA;;AAAA;AACe;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGG;;AAAS;AAAT;AAAX;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1"
    },
    "6": {
      "op": "bytecblock 0x 0x068101"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "18": {
      "op": "pushbytes 0x2a337771 // method \"test(uint64)void\""
    },
    "24": {
      "op": "txna ApplicationArgs 0"
    },
    "27": {
      "op": "match main_test_route@3"
    },
    "31": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "return"
    },
    "33": {
      "block": "main_test_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "39": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "40": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "43": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "44": {
      "callsub": "tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test",
      "op": "callsub test",
      "stack_out": []
    },
    "47": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "return"
    },
    "49": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "51": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "54": {
      "op": "txn ApplicationID"
    },
    "56": {
      "op": "!"
    },
    "57": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "58": {
      "op": "intc_2 // 1"
    },
    "59": {
      "op": "return"
    },
    "60": {
      "subroutine": "tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test",
      "params": {
        "length#0": "uint64"
      },
      "block": "test",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "63": {
      "op": "intc_0 // 0"
    },
    "64": {
      "op": "bytec_0 // \"\""
    },
    "65": {
      "op": "pushint 2010 // 2010"
    },
    "68": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "2010",
        "tmp%0#1"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "2010",
        "tmp%0#1"
      ]
    },
    "70": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "71": {
      "op": "bz test_after_while@10",
      "stack_out": [
        "slot%0",
        "i#0"
      ]
    },
    "74": {
      "op": "itxn_begin"
    },
    "75": {
      "op": "pushint 6 // appl"
    },
    "77": {
      "op": "itxn_field TypeEnum"
    },
    "79": {
      "op": "pushint 5 // DeleteApplication"
    },
    "81": {
      "op": "itxn_field OnCompletion"
    },
    "83": {
      "op": "bytec_1 // 0x068101"
    },
    "84": {
      "op": "itxn_field ApprovalProgram"
    },
    "86": {
      "op": "bytec_1 // 0x068101"
    },
    "87": {
      "op": "itxn_field ClearStateProgram"
    },
    "89": {
      "op": "intc_0 // 0"
    },
    "90": {
      "op": "itxn_field Fee"
    },
    "92": {
      "op": "itxn_submit"
    },
    "93": {
      "op": "b test"
    },
    "96": {
      "block": "test_after_while@10",
      "stack_in": [
        "slot%0",
        "i#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot%0"
      ]
    },
    "97": {
      "op": "frame_bury 0",
      "defined_out": [
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0"
      ]
    },
    "99": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "i#0"
      ]
    },
    "100": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "i#0"
      ]
    },
    "102": {
      "block": "test_while_top@1",
      "stack_in": [
        "slot%0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "i#0"
      ]
    },
    "104": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "106": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "bz test_after_while@3",
      "stack_out": [
        "slot%0",
        "i#0"
      ]
    },
    "110": {
      "op": "frame_dig 1"
    },
    "112": {
      "op": "dup"
    },
    "113": {
      "op": "itob"
    },
    "114": {
      "op": "frame_dig 0"
    },
    "116": {
      "op": "swap"
    },
    "117": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded"
    },
    "118": {
      "op": "frame_bury 0"
    },
    "120": {
      "op": "intc_2 // 1"
    },
    "121": {
      "op": "+"
    },
    "122": {
      "op": "frame_bury 1"
    },
    "124": {
      "op": "b test_while_top@1"
    },
    "127": {
      "block": "test_after_while@3",
      "stack_in": [
        "slot%0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0"
      ]
    },
    "129": {
      "op": "dup",
      "defined_out": [
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ]
    },
    "130": {
      "op": "len",
      "defined_out": [
        "array%bytes_len%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1"
      ]
    },
    "131": {
      "op": "dup",
      "defined_out": [
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)"
      ]
    },
    "132": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%bytes_len%0#1 (copy)",
        "8"
      ]
    },
    "133": {
      "op": "/",
      "defined_out": [
        "array%array_len%0#1",
        "array%bytes_len%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%array_len%0#1"
      ]
    },
    "134": {
      "op": "frame_dig -1",
      "defined_out": [
        "array%array_len%0#1",
        "array%bytes_len%0#1",
        "length#0 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "array%array_len%0#1",
        "length#0 (copy)"
      ]
    },
    "136": {
      "op": "==",
      "defined_out": [
        "array%bytes_len%0#1",
        "slot_contents%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "tmp%2#0"
      ]
    },
    "137": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1"
      ]
    },
    "138": {
      "op": "frame_dig -1",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "length#0 (copy)"
      ]
    },
    "140": {
      "error": "has length",
      "op": "assert // has length",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1"
      ]
    },
    "141": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%bytes_len%0#1",
        "8"
      ]
    },
    "142": {
      "op": "-",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "143": {
      "op": "dup",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)"
      ]
    },
    "144": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_bytes_new_length%0#1",
        "array%array_bytes_new_length%0#1 (copy)",
        "8"
      ]
    },
    "145": {
      "op": "/",
      "defined_out": [
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1"
      ]
    },
    "146": {
      "op": "dig 2",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0 (copy)"
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_bytes_new_length%0#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0 (copy)",
        "0"
      ]
    },
    "149": {
      "op": "uncover 3",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_new_length%0#1",
        "slot_contents%1#0 (copy)",
        "0",
        "array%array_bytes_new_length%0#1"
      ]
    },
    "151": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%array_new_length%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_new_length%0#1",
        "array%array_contents%1#1"
      ]
    },
    "152": {
      "op": "swap",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_contents%1#1",
        "array%array_new_length%0#1"
      ]
    },
    "153": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_contents%1#1",
        "array%array_new_length%0#1",
        "8"
      ]
    },
    "154": {
      "op": "*",
      "defined_out": [
        "array%array_contents%1#1",
        "array%bytes_index%0#1",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "slot_contents%1#0",
        "array%array_contents%1#1",
        "array%bytes_index%0#1"
      ]
    },
    "155": {
      "op": "uncover 2",
      "stack_out": [
        "slot%0",
        "i#0",
        "array%array_contents%1#1",
        "array%bytes_index%0#1",
        "slot_contents%1#0"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "slot%0",
        "i#0",
        "array%array_contents%1#1",
        "slot_contents%1#0",
        "array%bytes_index%0#1"
      ]
    },
    "158": {
      "op": "intc_1 // 8",
      "stack_out": [
        "slot%0",
        "i#0",
        "array%array_contents%1#1",
        "slot_contents%1#0",
        "array%bytes_index%0#1",
        "8"
      ]
    },
    "159": {
      "op": "extract3",
      "defined_out": [
        "array%array_contents%1#1",
        "array%value%0#1"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "array%array_contents%1#1",
        "array%value%0#1"
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "slot%0",
        "i#0",
        "array%array_contents%1#1",
        "array%value%0#1",
        "0"
      ]
    },
    "161": {
      "op": "extract_uint64",
      "defined_out": [
        "array%array_contents%1#1",
        "popped#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "array%array_contents%1#1",
        "popped#0"
      ]
    },
    "162": {
      "op": "bury 1",
      "stack_out": [
        "slot%0",
        "i#0",
        "popped#0"
      ]
    },
    "164": {
      "op": "frame_dig -1",
      "stack_out": [
        "slot%0",
        "i#0",
        "popped#0",
        "length#0 (copy)"
      ]
    },
    "166": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "length#0 (copy)",
        "popped#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "popped#0",
        "length#0 (copy)",
        "1"
      ]
    },
    "167": {
      "op": "-",
      "defined_out": [
        "popped#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "popped#0",
        "tmp%3#0"
      ]
    },
    "168": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "slot%0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "169": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "i#0"
      ]
    },
    "170": {
      "retsub": true,
      "op": "retsub"
    }
  }
}