#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 8 1
    bytecblock 0x 0x068101
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x2a337771 // method "test(uint64)void"
    txna ApplicationArgs 0
    match main_test_route@3

main_after_if_else@10:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    intc_0 // 0
    return

main_test_route@3:
    // tests/approvals/mutable-arrays.algo.ts:5
    // test(length: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txna ApplicationArgs 1
    btoi
    // tests/approvals/mutable-arrays.algo.ts:5
    // test(length: uint64) {
    callsub test
    intc_2 // 1
    return

main_bare_routing@6:
    // tests/approvals/mutable-arrays.algo.ts:4
    // class MutableArraysAlgo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test(length: uint64) -> void:
test:
    // tests/approvals/mutable-arrays.algo.ts:5
    // test(length: uint64) {
    proto 1 0
    intc_0 // 0
    bytec_0 // ""

test_while_top@5:
    pushint 2010 // 2010
    global OpcodeBudget
    >
    bz test_after_while@10
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    b test_while_top@5

test_after_while@10:
    // tests/approvals/mutable-arrays.algo.ts:7
    // const ma = new MutableArray<uint64>()
    bytec_0 // 0x
    frame_bury 0
    // tests/approvals/mutable-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    intc_0 // 0
    frame_bury 1

test_while_top@1:
    // tests/approvals/mutable-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    frame_dig 1
    frame_dig -1
    <
    bz test_after_while@3
    // tests/approvals/mutable-arrays.algo.ts:9
    // ma.push(i)
    frame_dig 1
    dup
    itob
    frame_dig 0
    swap
    concat // on error: max array length exceeded
    frame_bury 0
    // tests/approvals/mutable-arrays.algo.ts:8
    // for (let i: uint64 = 0; i < length; i++) {
    intc_2 // 1
    +
    frame_bury 1
    b test_while_top@1

test_after_while@3:
    frame_dig 0
    // tests/approvals/mutable-arrays.algo.ts:12
    // assert(ma.length === length)
    dup
    len
    dup
    intc_1 // 8
    /
    frame_dig -1
    ==
    assert
    // tests/approvals/mutable-arrays.algo.ts:13
    // assert(length, 'has length')
    frame_dig -1
    assert // has length
    // tests/approvals/mutable-arrays.algo.ts:14
    // const popped = ma.pop()
    intc_1 // 8
    -
    dup
    intc_1 // 8
    /
    dig 2
    intc_0 // 0
    uncover 3
    extract3
    swap
    intc_1 // 8
    *
    uncover 2
    swap
    intc_1 // 8
    extract3
    intc_0 // 0
    extract_uint64
    bury 1
    // tests/approvals/mutable-arrays.algo.ts:17
    // assert(popped === length - 1)
    frame_dig -1
    intc_2 // 1
    -
    ==
    assert
    retsub
