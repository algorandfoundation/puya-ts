main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64)void" => block@3, * => block@10}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test(tmp%7#0)
        let tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L4
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__%0#1 <- block@7, tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine tests/approvals/mutable-arrays.algo.ts::MutableArraysAlgo.test(length: uint64) -> void:
    block@7: // while_top_L20
        let tmp%0#1: uint64 = (global OpcodeBudget)
        let tmp%1#1: bool = (> 2010u tmp%0#1)
        goto tmp%1#1 ? block@8 : block@12
    block@8: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@7
    block@12: // after_while_L20
        let encoded%0#0: uint64[] = 0x
        let ma#0: uint64[]* = new()
        write(ma#0, encoded%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L8
        let i#1: uint64 = φ(i#0 <- block@12, i#3 <- block@2)
        let tmp%0#0: bool = (< i#1 length#0)
        goto tmp%0#0 ? block@2 : block@4
    block@2: // while_body_L8
        let array%sub_item%0#1: bytes[8] = (itob i#1)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let encoded%1#0: uint64[] = array%data%0#1
        let slot_contents%0#0: uint64[] = read(ma#0)
        let array%array_contents%0#1: bytes = (concat slot_contents%0#0 encoded%1#0) // on error: max array length exceeded
        let extended%0#0: uint64[] = array%array_contents%0#1
        write(ma#0, extended%0#0)
        let i#3: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_while_L8
        let slot_contents%1#0: uint64[] = read(ma#0)
        let array%bytes_len%0#1: uint64 = (len slot_contents%1#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 8u)
        let tmp%1#0: uint64 = array%array_len%0#1
        let tmp%2#0: bool = (== tmp%1#0 length#0)
        (assert tmp%2#0)
        (assert length#0) // has length
        let array%array_bytes_length%0#1: uint64 = (len slot_contents%1#0)
        let array%array_bytes_new_length%0#1: uint64 = (- array%array_bytes_length%0#1 8u)
        let array%array_new_length%0#1: uint64 = (/ array%array_bytes_new_length%0#1 8u)
        let array%array_contents%1#1: bytes = (extract3 slot_contents%1#0 0u array%array_bytes_new_length%0#1)
        let array%bytes_index%0#1: uint64 = (* array%array_new_length%0#1 8u)
        let array%value%0#1: bytes = (extract3 slot_contents%1#0 array%bytes_index%0#1 8u)
        let array%sub_item%1#1: bytes = (extract3 array%value%0#1 0u 8u)
        let array%sub_item%2#1: uint64 = (btoi array%sub_item%1#1)
        let (new_contents%0#0: uint64[], popped#0: uint64) = (array%array_contents%1#1, array%sub_item%2#1)
        write(ma#0, new_contents%0#0)
        let tmp%3#0: uint64 = (- length#0 1u)
        let tmp%4#0: bool = (== popped#0 tmp%3#0)
        (assert tmp%4#0)
        return 