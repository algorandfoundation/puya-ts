main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        (app_global_put "stateCommon" 123u)
        (app_global_put "stateOne" 45u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@12
    block@4: // abi_routing_L22
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "methodOne()string" => block@6, method "methodCommon()string" => block@7, method "b2CantOverride()string" => block@8, * => block@11}
    block@6: // methodOne_route_L24
        (log 0x151f7c750008626173652d6f6e65)
        exit 1u
    block@7: // methodCommon_route_L13
        (log 0x151f7c750006636f6d6d6f6e)
        exit 1u
    block@8: // b2CantOverride_route_L17
        (log 0x151f7c750006636f6d6d6f6e)
        exit 1u
    block@11: // after_if_else_L22
        fail
    block@12: // __algots__.defaultCreate_L22
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u