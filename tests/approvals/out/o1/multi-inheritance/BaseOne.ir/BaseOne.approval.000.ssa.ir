main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = tests/approvals/multi-inheritance.algo.ts::BaseOne.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance.algo.ts::BaseOne.__puya_arc4_router__() -> bool:
    block@0: // L22
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "methodOne()string" => block@2, method "methodCommon()string" => block@3, method "b2CantOverride()string" => block@4, * => block@5}
    block@2: // methodOne_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: string = tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne()
        let tmp%8#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        return 1u
    block@3: // methodCommon_route_L13
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: string = tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon()
        let tmp%15#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%14#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        return 1u
    block@4: // b2CantOverride_route_L17
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let tmp%21#0: string = tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride()
        let tmp%22#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%21#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        return 1u
    block@5: // switch_case_default_L22
        goto block@6
    block@6: // switch_case_next_L22
        goto block@11
    block@7: // bare_routing_L22
        let tmp%24#0: uint64 = (txn OnCompletion)
        switch tmp%24#0 {0u => block@8, * => block@9}
    block@8: // __algots__.defaultCreate_L22
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (== tmp%25#0 0u)
        (assert tmp%26#0) // can only call when creating
        tests/approvals/multi-inheritance.algo.ts::BaseOne.__algots__.defaultCreate()
        return 1u
    block@9: // switch_case_default_L22
        goto block@10
    block@10: // switch_case_next_L22
        goto block@11
    block@11: // after_if_else_L22
        return 0u

subroutine tests/approvals/multi-inheritance.algo.ts::BaseOne.methodOne() -> string:
    block@0: // L24
        return "base-one"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.methodCommon() -> string:
    block@0: // L13
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.b2CantOverride() -> string:
    block@0: // L17
        return "common"

subroutine tests/approvals/multi-inheritance.algo.ts::BaseOne.__algots__.defaultCreate() -> void:
    block@0: // L22
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::BaseOne.constructor() -> void:
    block@0: // L22
        tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor()
        (app_global_put "stateOne" 45u)
        return 

subroutine tests/approvals/multi-inheritance.algo.ts::CommonBase.constructor() -> void:
    block@0: // L10
        @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor()
        (app_global_put "stateCommon" 123u)
        return 

subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor() -> void:
    block@0: // L1
        return 