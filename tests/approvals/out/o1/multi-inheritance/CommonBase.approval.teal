#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    bytecblock 0x151f7c750006636f6d6d6f6e
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/approvals/multi-inheritance.algo.ts:11
    // stateCommon = GlobalState<uint64>({ initialValue: 123 })
    pushbytes "stateCommon"
    pushint 123 // 123
    app_global_put

main_after_if_else@2:
    // tests/approvals/multi-inheritance.algo.ts:10
    // export class CommonBase extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x455c8d09 0xf9f5142c // method "methodCommon()string", method "b2CantOverride()string"
    txna ApplicationArgs 0
    match main_methodCommon_route@5 main_b2CantOverride_route@6

main_after_if_else@13:
    err

main_b2CantOverride_route@6:
    // tests/approvals/multi-inheritance.algo.ts:17
    // b2CantOverride(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c750006636f6d6d6f6e
    log
    pushint 1 // 1
    return

main_methodCommon_route@5:
    // tests/approvals/multi-inheritance.algo.ts:13
    // methodCommon() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c750006636f6d6d6f6e
    log
    pushint 1 // 1
    return

main_bare_routing@9:
    // tests/approvals/multi-inheritance.algo.ts:10
    // export class CommonBase extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return
