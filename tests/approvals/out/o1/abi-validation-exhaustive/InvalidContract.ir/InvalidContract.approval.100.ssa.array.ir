main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L117
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@3, method "invalidValue()uint64[3]" => block@4, * => block@8}
    block@3: // create_route_L121
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // can only call when creating
        let tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@9
    block@4: // invalidValue_route_L124
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: bytes[24] = tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue()
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@9
    block@8: // after_if_else_L117
        let tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@9
    block@9: // after_inlined_tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router__%0#0 <- block@3, tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router__%0#1 <- block@4, tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.__puya_arc4_router__%0#2 <- block@8)
        return tmp%0#0

subroutine tests/approvals/abi-validation-exhaustive.algo.ts::InvalidContract.invalidValue() -> bytes[24]:
    block@0: // L124
        (app_global_put "g" "invalid")
        return "invalid"