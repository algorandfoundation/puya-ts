main tests/approvals/arc4-hybrid.algo.ts::Arc4HybridAlgo.approvalProgram:
    block@0: // L4
        (log "before")
        let %did_match_routing#0: bool = 0u
        let tmp%0#0: uint64 = (txn NumAppArgs)
        goto tmp%0#0 ? block@2 : block@5
    block@2: // abi_routing_L3
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "someMethod()void" => block@3, * => block@4}
    block@3: // someMethod_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        (log "some method")
        let %did_match_routing#1: bool = 1u
        goto block@4
    block@4: // switch_case_next_L3
        let %did_match_routing#4: bool = φ(%did_match_routing#0 <- block@2, %did_match_routing#1 <- block@3)
        goto block@6
    block@5: // __algots__.defaultCreate_L3
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        let %did_match_routing#2: bool = 1u
        goto block@6
    block@6: // after_if_else_L3
        let result#0: bool = φ(%did_match_routing#4 <- block@4, %did_match_routing#2 <- block@5)
        (log "after")
        return result#0