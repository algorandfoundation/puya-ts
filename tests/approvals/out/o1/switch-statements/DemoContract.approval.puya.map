{
  "version": 3,
  "sources": [
    "C:/Source/algorand/puya-ts/tests/approvals/switch-statements.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AADF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAE4B;AAAjB;;;AAAwB;AAAxB;AAAP;AACwB;;AAAjB;;;AAAwB;AAAxB;AAAP;AACwB;AAAjB;;;AAAwB;AAAxB;AAAP;AACwB;;AAAjB;;;AAAwB;AAAxB;AAAP;AAEuB;AAAhB;;;AAAuB;;AAAvB;AAAP;AACuB;;AAAhB;;;AAAuB;;AAAvB;AAAP;AACuB;AAAhB;;;AAAuB;AAAvB;AAAP;AACuB;;AAAhB;;;AAAuB;;AAAvB;AAAP;AACuB;;AAAhB;;;AAAuB;;AAAvB;AAAP;AAE6B;AAAtB;;;AAAP;AACuB;AAAhB;;;AAAP;AACuB;AAAhB;;;AAAP;AACuB;AAAhB;;;AAAP;AACwB;;AAAhB;;;AAAD;AAAP;;AAGF;;;AACE;;AAAA;;;;;;;;;;;;AAMW;AAAP;AAFO;AAAP;AAON;;;AACkB;AAChB;;AAAA;;;;;;;;;;;;;;AASA;;AAAA;AAAA;AAVgB;AAQZ;;AAAA;AAAA;;;;;AARY;AAKZ;;AAAA;AAAA;;AACA;;;AAON;;;AAEe;AACN;AACA;AACA;AAJP;;AAAA;;;;;;;;;;AAOO;AAAP;AAFW;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 3 10 0"
    },
    "7": {
      "op": "bytecblock \"hmmm\" 0xff base64(ZHNmc2Rmc2Q=) base32(ONSGMZ3OMJTGOZDGMRSGM)"
    },
    "39": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "41": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "44": {
      "op": "pushbytes 0xa6ff944a // method \"run()void\""
    },
    "50": {
      "op": "txna ApplicationArgs 0"
    },
    "53": {
      "op": "match main_run_route@3"
    },
    "57": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_3 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "return"
    },
    "59": {
      "block": "main_run_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "62": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "65": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "66": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.run",
      "op": "callsub run"
    },
    "69": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "return"
    },
    "71": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "73": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID"
    },
    "78": {
      "op": "!"
    },
    "79": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "80": {
      "op": "intc_0 // 1"
    },
    "81": {
      "op": "return"
    },
    "82": {
      "subroutine": "tests/approvals/switch-statements.algo.ts::DemoContract.run",
      "params": {},
      "block": "run",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "83": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64",
      "op": "callsub test_uint64",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "86": {
      "op": "intc_1 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "88": {
      "op": "assert",
      "stack_out": []
    },
    "89": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "91": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64",
      "op": "callsub test_uint64",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "94": {
      "op": "intc_1 // 3",
      "stack_out": [
        "tmp%2#0",
        "3"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "96": {
      "op": "assert",
      "stack_out": []
    },
    "97": {
      "op": "intc_1 // 3",
      "stack_out": [
        "3"
      ]
    },
    "98": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64",
      "op": "callsub test_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "101": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "1"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": []
    },
    "104": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "106": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64",
      "op": "callsub test_uint64",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "109": {
      "op": "intc_1 // 3",
      "stack_out": [
        "tmp%6#0",
        "3"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "111": {
      "op": "assert",
      "stack_out": []
    },
    "112": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "113": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_break",
      "op": "callsub test_break",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "116": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "11"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "119": {
      "op": "assert",
      "stack_out": []
    },
    "120": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "2"
      ]
    },
    "122": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_break",
      "op": "callsub test_break",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "125": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "12"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "128": {
      "op": "assert",
      "stack_out": []
    },
    "129": {
      "op": "intc_1 // 3",
      "stack_out": [
        "3"
      ]
    },
    "130": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_break",
      "op": "callsub test_break",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "133": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "10"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "135": {
      "op": "assert",
      "stack_out": []
    },
    "136": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "4"
      ]
    },
    "138": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_break",
      "op": "callsub test_break",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "141": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "14"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "144": {
      "op": "assert",
      "stack_out": []
    },
    "145": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "147": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_break",
      "op": "callsub test_break",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "150": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "50"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "153": {
      "op": "assert",
      "stack_out": []
    },
    "154": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "155": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes",
      "op": "callsub test_bytes",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "158": {
      "op": "assert",
      "stack_out": []
    },
    "159": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "0xff"
      ]
    },
    "160": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes",
      "op": "callsub test_bytes",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "163": {
      "op": "assert",
      "stack_out": []
    },
    "164": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "ZHNmc2Rmc2Q="
      ]
    },
    "165": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes",
      "op": "callsub test_bytes",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "168": {
      "op": "assert",
      "stack_out": []
    },
    "169": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "ONSGMZ3OMJTGOZDGMRSGM"
      ],
      "stack_out": [
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "170": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes",
      "op": "callsub test_bytes",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "173": {
      "op": "assert",
      "stack_out": []
    },
    "174": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "176": {
      "callsub": "tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes",
      "op": "callsub test_bytes",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "180": {
      "op": "assert",
      "stack_out": []
    },
    "181": {
      "retsub": true,
      "op": "retsub"
    },
    "182": {
      "subroutine": "tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64",
      "params": {
        "x#0": "uint64"
      },
      "block": "test_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "185": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "187": {
      "op": "switch test_uint64_switch_case_default@7 test_uint64_block@6 test_uint64_block@6 test_uint64_switch_case_default@7 test_uint64_block@6",
      "stack_out": []
    },
    "199": {
      "block": "test_uint64_switch_case_default@7",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "200": {
      "retsub": true,
      "op": "retsub"
    },
    "201": {
      "block": "test_uint64_block@6",
      "stack_in": [],
      "op": "intc_1 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "202": {
      "retsub": true,
      "op": "retsub"
    },
    "203": {
      "subroutine": "tests/approvals/switch-statements.algo.ts::DemoContract.test_break",
      "params": {
        "x#0": "uint64"
      },
      "block": "test_break",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "206": {
      "op": "intc_2 // 10"
    },
    "207": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "x#0 (copy)"
      ]
    },
    "209": {
      "op": "switch test_break_block@11 test_break_block@6 test_break_block@6 test_break_block@11 test_break_block@6 test_break_switch_case_3@7",
      "stack_out": [
        "i#0"
      ]
    },
    "223": {
      "block": "test_break_block@11",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "225": {
      "op": "swap"
    },
    "226": {
      "retsub": true,
      "op": "retsub"
    },
    "227": {
      "block": "test_break_switch_case_3@7",
      "stack_in": [
        "i#0"
      ],
      "op": "intc_2 // 10",
      "defined_out": [
        "10"
      ],
      "stack_out": [
        "i#0",
        "10"
      ]
    },
    "228": {
      "op": "frame_dig -1",
      "defined_out": [
        "10",
        "x#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "10",
        "x#0 (copy)"
      ]
    },
    "230": {
      "op": "*",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "231": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "233": {
      "op": "b test_break_block@11"
    },
    "236": {
      "block": "test_break_block@6",
      "stack_in": [
        "i#0"
      ],
      "op": "intc_2 // 10",
      "defined_out": [
        "10"
      ],
      "stack_out": [
        "i#0",
        "10"
      ]
    },
    "237": {
      "op": "frame_dig -1",
      "defined_out": [
        "10",
        "x#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "10",
        "x#0 (copy)"
      ]
    },
    "239": {
      "op": "+",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "240": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "242": {
      "op": "b test_break_block@11"
    },
    "245": {
      "subroutine": "tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes",
      "params": {
        "x#0": "bytes"
      },
      "block": "test_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "248": {
      "op": "bytec_0 // \"hmmm\"",
      "defined_out": [
        "\"hmmm\""
      ],
      "stack_out": [
        "\"hmmm\""
      ]
    },
    "249": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "\"hmmm\"",
        "0xff"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff"
      ]
    },
    "250": {
      "op": "bytec_2 // base64(ZHNmc2Rmc2Q=)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q="
      ]
    },
    "251": {
      "op": "bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q="
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM"
      ]
    },
    "252": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"hmmm\"",
        "0xff",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "ZHNmc2Rmc2Q=",
        "x#0 (copy)"
      ],
      "stack_out": [
        "\"hmmm\"",
        "0xff",
        "ZHNmc2Rmc2Q=",
        "ONSGMZ3OMJTGOZDGMRSGM",
        "x#0 (copy)"
      ]
    },
    "254": {
      "op": "match test_bytes_block@8 test_bytes_block@8 test_bytes_block@8 test_bytes_block@8",
      "stack_out": []
    },
    "264": {
      "op": "intc_3 // 0"
    },
    "265": {
      "retsub": true,
      "op": "retsub"
    },
    "266": {
      "block": "test_bytes_block@8",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    }
  }
}