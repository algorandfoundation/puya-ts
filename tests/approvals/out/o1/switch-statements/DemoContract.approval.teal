#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 3 10 0
    bytecblock "hmmm" 0xff base64(ZHNmc2Rmc2Q=) base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xa6ff944a // method "run()void"
    txna ApplicationArgs 0
    match main_run_route@3

main_after_if_else@10:
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    intc_3 // 0
    return

main_run_route@3:
    // tests/approvals/switch-statements.algo.ts:5
    // run() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub run
    intc_0 // 1
    return

main_bare_routing@6:
    // tests/approvals/switch-statements.algo.ts:4
    // export class DemoContract extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/approvals/switch-statements.algo.ts::DemoContract.run() -> void:
run:
    // tests/approvals/switch-statements.algo.ts:5
    // run() {
    proto 0 0
    // tests/approvals/switch-statements.algo.ts:6
    // assert(this.test_uint64(1) === 3)
    intc_0 // 1
    callsub test_uint64
    intc_1 // 3
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:7
    // assert(this.test_uint64(2) === 3)
    pushint 2 // 2
    callsub test_uint64
    intc_1 // 3
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:8
    // assert(this.test_uint64(3) === 1)
    intc_1 // 3
    callsub test_uint64
    intc_0 // 1
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:9
    // assert(this.test_uint64(4) === 3)
    pushint 4 // 4
    callsub test_uint64
    intc_1 // 3
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:11
    // assert(this.test_break(1) === 11)
    intc_0 // 1
    callsub test_break
    pushint 11 // 11
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:12
    // assert(this.test_break(2) === 12)
    pushint 2 // 2
    callsub test_break
    pushint 12 // 12
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:13
    // assert(this.test_break(3) === 10)
    intc_1 // 3
    callsub test_break
    intc_2 // 10
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:14
    // assert(this.test_break(4) === 14)
    pushint 4 // 4
    callsub test_break
    pushint 14 // 14
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:15
    // assert(this.test_break(5) === 50)
    pushint 5 // 5
    callsub test_break
    pushint 50 // 50
    ==
    assert
    // tests/approvals/switch-statements.algo.ts:17
    // assert(this.test_bytes(Bytes('hmmm')))
    bytec_0 // "hmmm"
    callsub test_bytes
    assert
    // tests/approvals/switch-statements.algo.ts:18
    // assert(this.test_bytes(Bytes.fromHex('ff')))
    bytec_1 // 0xff
    callsub test_bytes
    assert
    // tests/approvals/switch-statements.algo.ts:19
    // assert(this.test_bytes(Bytes.fromBase64('ZHNmc2Rmc2Q=')))
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    callsub test_bytes
    assert
    // tests/approvals/switch-statements.algo.ts:20
    // assert(this.test_bytes(Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM===')))
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    callsub test_bytes
    assert
    // tests/approvals/switch-statements.algo.ts:21
    // assert(!this.test_bytes(Bytes()))
    pushbytes 0x
    callsub test_bytes
    !
    assert
    retsub


// tests/approvals/switch-statements.algo.ts::DemoContract.test_uint64(x: uint64) -> uint64:
test_uint64:
    // tests/approvals/switch-statements.algo.ts:24
    // private test_uint64(x: uint64): uint64 {
    proto 1 1
    // tests/approvals/switch-statements.algo.ts:25-33
    // switch (x) {
    //   case 1:
    //   case 2:
    //   case Uint64(4):
    //     return 3
    //   default: {
    //     return 1
    //   }
    // }
    frame_dig -1
    switch test_uint64_switch_case_default@7 test_uint64_block@6 test_uint64_block@6 test_uint64_switch_case_default@7 test_uint64_block@6

test_uint64_switch_case_default@7:
    // tests/approvals/switch-statements.algo.ts:31
    // return 1
    intc_0 // 1
    retsub

test_uint64_block@6:
    // tests/approvals/switch-statements.algo.ts:29
    // return 3
    intc_1 // 3
    retsub


// tests/approvals/switch-statements.algo.ts::DemoContract.test_break(x: uint64) -> uint64:
test_break:
    // tests/approvals/switch-statements.algo.ts:36
    // private test_break(x: uint64): uint64 {
    proto 1 1
    // tests/approvals/switch-statements.algo.ts:37
    // let i: uint64 = 10
    intc_2 // 10
    // tests/approvals/switch-statements.algo.ts:38-46
    // switch (x) {
    //   case 1:
    //   case 2:
    //   case Uint64(4):
    //     i += x
    //     break
    //   case 5:
    //     i *= x
    // }
    frame_dig -1
    switch test_break_block@11 test_break_block@6 test_break_block@6 test_break_block@11 test_break_block@6 test_break_switch_case_3@7

test_break_block@11:
    // tests/approvals/switch-statements.algo.ts:47
    // return i
    frame_dig 0
    swap
    retsub

test_break_switch_case_3@7:
    // tests/approvals/switch-statements.algo.ts:37
    // let i: uint64 = 10
    intc_2 // 10
    // tests/approvals/switch-statements.algo.ts:45
    // i *= x
    frame_dig -1
    *
    frame_bury 0
    b test_break_block@11

test_break_block@6:
    // tests/approvals/switch-statements.algo.ts:37
    // let i: uint64 = 10
    intc_2 // 10
    // tests/approvals/switch-statements.algo.ts:42
    // i += x
    frame_dig -1
    +
    frame_bury 0
    // tests/approvals/switch-statements.algo.ts:43
    // break
    b test_break_block@11


// tests/approvals/switch-statements.algo.ts::DemoContract.test_bytes(x: bytes) -> uint64:
test_bytes:
    // tests/approvals/switch-statements.algo.ts:50
    // private test_bytes(x: bytes): boolean {
    proto 1 1
    // tests/approvals/switch-statements.algo.ts:52
    // case Bytes('hmmm'):
    bytec_0 // "hmmm"
    // tests/approvals/switch-statements.algo.ts:53
    // case Bytes.fromHex('Ff'):
    bytec_1 // 0xff
    // tests/approvals/switch-statements.algo.ts:54
    // case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    bytec_2 // base64(ZHNmc2Rmc2Q=)
    // tests/approvals/switch-statements.algo.ts:55
    // case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    bytec_3 // base32(ONSGMZ3OMJTGOZDGMRSGM)
    // tests/approvals/switch-statements.algo.ts:51-57
    // switch (x) {
    //   case Bytes('hmmm'):
    //   case Bytes.fromHex('Ff'):
    //   case Bytes.fromBase64('ZHNmc2Rmc2Q='):
    //   case Bytes.fromBase32('ONSGMZ3OMJTGOZDGMRSGM==='):
    //     return true
    // }
    frame_dig -1
    match test_bytes_block@8 test_bytes_block@8 test_bytes_block@8 test_bytes_block@8
    // tests/approvals/switch-statements.algo.ts:58
    // return false
    intc_3 // 0
    retsub

test_bytes_block@8:
    // tests/approvals/switch-statements.algo.ts:56
    // return true
    intc_0 // 1
    retsub
