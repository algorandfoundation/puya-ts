{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "run",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_side_effects",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_non_trivial_termination_of_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "evalCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXZhbENvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        87,
                        117,
                        133
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        433
                    ],
                    "errorMessage": "Only two functions should be evaluated"
                },
                {
                    "pc": [
                        150
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        90,
                        120,
                        136
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        380,
                        430
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQMCACYFCWV2YWxDb3VudARobW1tAf8IZHNmc2Rmc2QNc2RmZ25iZmdkZmRkZjEbQQBYggMEpv+USgSX1M8ABKgaR6s2GgCOAwAwACAAAiVDMRkURDEYRDYaARc2GgIXiAFNFoAEFR98dUxQsCJDMRkURDEYRDYaAReIAQUiQzEZFEQxGESIAA0iQzEZQP+/MRgURCJDIogAYCMSRCSIAFkjEkQjiABSIhJEgQSIAEojEkQiiABggQsSRCSIAFiBDBJEI4gAUIEKEkSBBIgAR4EOEkSBBYgAPoEyEkQpiABuRCqIAGlEK4gAZEQnBIgAXkSAAIgAWBREiYoBAYv/IhJAAA+L/yQSQAAIi/+BBBJBAAIjiSKJigEBgQqL/yISQAAPi/8kEkAACIv/gQQSQQALgQqL/wiMAIsATImL/4EFEkH/9IEKi/8LjABC/+qKAQGL/ykSQAAWi/8qEkAAD4v/KxJAAAiL/ycEEkEAAiKJJYmKAQElKGVEIggoTGeL/4mKAQAoJWeL/yIJiP/ki/8SQAATi/+I/9mL/xJAAAiL/yIIiP/MSCUoZUQkEkSJigIBi/4iEkEADYv/JBhAAAOL/4mL/omL/4v+C4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}