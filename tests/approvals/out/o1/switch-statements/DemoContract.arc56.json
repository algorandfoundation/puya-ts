{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "run",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_side_effects",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_non_trivial_termination_of_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "evalCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXZhbENvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        86,
                        116,
                        132
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        432
                    ],
                    "errorMessage": "Only two functions should be evaluated"
                },
                {
                    "pc": [
                        149
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        89,
                        119,
                        135
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        377,
                        429
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQMCBCYFCWV2YWxDb3VudARobW1tAf8IZHNmc2Rmc2QNc2RmZ25iZmdkZmRkZjEbQQBXggMEpv+USgSX1M8ABKgaR6s2GgCOAwAvAB8AAQAxGRREMRhENhoBFzYaAheIAU0WgAQVH3x1TFCwIkMxGRREMRhENhoBF4gBAyJDMRkURDEYRIgADSJDMRlA/8AxGBREIkMiiABeIxJEJIgAVyMSRCOIAFAiEkQliABJIxJEIogAXoELEkQkiABWgQwSRCOIAE6BChJEJYgARoEOEkSBBYgAPYEyEkQpiABsRCqIAGdEK4gAYkQnBIgAXESAAIgAVhREiYoBAYv/IhJAAA6L/yQSQAAHi/8lEkEAAiOJIomKAQGBCov/IhJAAA6L/yQSQAAHi/8lEkEAC4EKi/8IjACLAEyJi/+BBRJB//SBCov/C4wAQv/qigEBi/8pEkAAFov/KhJAAA+L/ysSQAAIi/8nBBJBAAIiiYEAiYoBAYEAKGVEIggoTGeL/4mKAQAogQBni/8iCYj/4ov/EkAAE4v/iP/Xi/8SQAAIi/8iCIj/ykiBAChlRCQSRImKAgGL/iISQQANi/8kGEAAA4v/iYv+iYv/i/4LiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}