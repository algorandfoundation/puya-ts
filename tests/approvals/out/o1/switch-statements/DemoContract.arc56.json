{
    "name": "DemoContract",
    "structs": {},
    "methods": [
        {
            "name": "run",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_side_effects",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_non_trivial_termination_of_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "y"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "evalCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXZhbENvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        57
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        97
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        245
                    ],
                    "errorMessage": "Only two functions should be evaluated"
                },
                {
                    "pc": [
                        242,
                        433
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        205,
                        256,
                        267
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQMCBCYFCWV2YWxDb3VudARobW1tAf8IZHNmc2Rmc2QNc2RmZ25iZmdkZmRkZjEbQQAkMRkURDEYRIIDBKb/lEoEl9TPAASoGkerNhoAjgMACwBsAJ8AMRkUMRgUEEQiQyKIAMojEkQkiADDIxJEI4gAvCISRCWIALUjEkQiiADKgQsSRCSIAMKBDBJEI4gAuoEKEkQliACygQ4SRIEFiACpgTISRCmIANhEKogA00QriADORCcEiADIRIAAiADCFEM2GgFJFYEIEkQXSSiBAGdJIgmIANASQAAQRwKIAMcSQAAHSSIIiAC9SIEAKGVEJBJEIkM2GgFJFYEIEkQXSTYaAkkVgQgSRBdMIhJBABhJJBhAAA1JFoAEFR98dUxQsCJDSwFC/+9JSwILQv/oigEBi/8iEkAADov/JBJAAAeL/yUSQQACI4kiiYoBAYEKi/8iEkAADov/JBJAAAeL/yUSQQALgQqL/wiMAIsATImL/4EFEkH/9IEKi/8LjABC/+qKAQGL/ykSQAAWi/8qEkAAD4v/KxJAAAiL/ycEEkEAAiKJgQCJigEBgQAoZUQiCChMZ4v/iQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}