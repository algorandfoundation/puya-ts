main tests/approvals/uint64-expressions.algo.ts::DemoContract.approvalProgram:
    block@0: // L14
        let tmp%0#0: bool = (== 2u 2u)
        let (tmp%1#0: uint64, tmp%2#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test2()
        let tmp%3#0: bool = (== tmp%1#0 123u)
        let tmp%4#0: bool = (&& tmp%0#0 tmp%3#0)
        let (tmp%5#0: uint64, tmp%6#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test2()
        let tmp%7#0: bool = (== tmp%6#0 12300u)
        let tmp%8#0: bool = (&& tmp%4#0 tmp%7#0)
        (assert tmp%8#0) // assert target is match for conditions
        let tmp%9#0: bool = (== 5u 5u)
        let (tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: uint64, tmp%13#0: uint64, tmp%14#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%15#0: bool = (== tmp%10#0 0u)
        let tmp%16#0: bool = (&& tmp%9#0 tmp%15#0)
        let (tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: uint64, tmp%20#0: uint64, tmp%21#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%22#0: bool = (== tmp%18#0 0u)
        let tmp%23#0: bool = (&& tmp%16#0 tmp%22#0)
        let (tmp%24#0: uint64, tmp%25#0: uint64, tmp%26#0: uint64, tmp%27#0: uint64, tmp%28#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%29#0: bool = (== tmp%26#0 1u)
        let tmp%30#0: bool = (&& tmp%23#0 tmp%29#0)
        let (tmp%31#0: uint64, tmp%32#0: uint64, tmp%33#0: uint64, tmp%34#0: uint64, tmp%35#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%36#0: bool = (== tmp%34#0 1u)
        let tmp%37#0: bool = (&& tmp%30#0 tmp%36#0)
        let (tmp%38#0: uint64, tmp%39#0: uint64, tmp%40#0: uint64, tmp%41#0: uint64, tmp%42#0: uint64) = tests/approvals/uint64-expressions.algo.ts::test()
        let tmp%43#0: bool = (== tmp%42#0 1u)
        let tmp%44#0: bool = (&& tmp%37#0 tmp%43#0)
        (assert tmp%44#0) // assert target is match for conditions
        return 1u

subroutine tests/approvals/uint64-expressions.algo.ts::test() -> <uint64, uint64, uint64, uint64, uint64>:
    block@0: // L3
        return 0u 0u 1u 1u 1u

subroutine tests/approvals/uint64-expressions.algo.ts::test2() -> <uint64, uint64>:
    block@0: // L7
        return 123u 12300u