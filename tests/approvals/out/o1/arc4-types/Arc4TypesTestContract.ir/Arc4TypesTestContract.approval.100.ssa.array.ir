main tests/approvals/arc4-types.algo.ts::Arc4TypesTestContract.approvalProgram:
    block@2: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 1410u tmp%1#0)
        goto tmp%2#0 ? block@3 : block@8
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@2
    block@8: // after_while_L20
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#2: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%1#1: bool = (== tmp%0#2 0x0000)
        (assert tmp%1#1) // Empty string should equal the uint16 length prefix
        let aggregate%length%1#0: uint64 = (len "Hello")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let s2_bytes#0: bytes = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 8u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint8%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 7u 1u)
        let aggregate%as_Encoded(uint8)%0#0: Encoded(uint8) = aggregate%uint8%0#0
        let z#0: Encoded(uint8) = aggregate%as_Encoded(uint8)%0#0
        let z_native#0: uint64 = (btoi z#0)
        let tmp%7#1: bool = (== z_native#0 1u)
        (assert tmp%7#1)
        let aggregate%value_len%0#0: uint64 = (len 2b)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 16u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 16u)
        let aggregate%arc4_encoded%0#0: bytes[16] = (b| 2b aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint128)%0#0: Encoded(uint128) = aggregate%arc4_encoded%0#0
        let a#0: Encoded(uint128) = aggregate%as_Encoded(uint128)%0#0
        let a_native#0: biguint = a#0
        let tmp%10#0: bool = (b== a_native#0 2b)
        (assert tmp%10#0)
        let tmp%14#0: uint64 = (btoi 0x000000000000000c)
        let tmp%15#0: bool = (== tmp%14#0 12u)
        (assert tmp%15#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x0000000000000041)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x0000000000000041)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x0000000000000041)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let myArray#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%head%3#0: bytes = (concat 0x 0x0000000000000041)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%3#0
        let tmp%0#5: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat myArray#0 tmp%0#5) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 myArray#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let myArray#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) myArray#1)
        let concat%1#0: Encoded(len+uint64[]) = (concat myArray#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let doubleArray#0: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 8u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%1#0 0x0000000000000041)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x0000000000000041)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x0000000000000041)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x0000000000000041)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 0x0000000000000041)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 0x0000000000000041)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x0000000000000041)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 0x0000000000000041)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%11#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let tmp%1#3: bool = (== doubleArray#0 encoded_array%1#0)
        (assert tmp%1#3)
        let aggregate%head%12#0: bytes = (concat 0x 0x0000000000000041)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 0x0000000000000041)
        let aggregate%as_Encoded(uint64[2])%0#0: Encoded(uint64[2]) = aggregate%head%13#0
        let myStatic#0: Encoded(uint64[2]) = aggregate%as_Encoded(uint64[2])%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 myStatic#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: Encoded(uint64) = array_item%0#0
        let array_length#0: uint64 = (extract_uint16 myArray#1 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#9: bytes = (itob length_minus_1#0)
        let tmp%3#9: bytes = ((extract 6 0) tmp%2#9)
        let result#1: bytes = ((replace2 0) myArray#1 tmp%3#9)
        let tmp%5#5: uint64 = (len result#1)
        let item_location#0: uint64 = (- tmp%5#5 8u)
        let popped#0: bytes = (extract3 result#1 item_location#0 8u)
        let tmp%4#2: Encoded(uint64) = popped#0
        let tmp%5#2: bool = (== values%0#0 tmp%4#2)
        (assert tmp%5#2)
        let encoded_value%0#0: Encoded(uint64) = 0x0000000000000032
        let aggregate%head%14#0: bytes = (concat 0x 0x0000000000000041)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 0x0000000000000041)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 0x0000000000000041)
        let aggregate%as_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = aggregate%head%16#0
        let myStatic2#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#0
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: Encoded(uint64) = array_item%1#0
        let tmp%7#2: bool = (== values%1#0 0x0000000000000041)
        let tmp%8#1: bool = (&& 1u tmp%7#2)
        let aggregate%bytes_offset%2#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%2#0: Encoded(uint64) = array_item%2#0
        let tmp%9#1: bool = (== values%2#0 0x0000000000000041)
        let tmp%10#1: bool = (&& tmp%8#1 tmp%9#1)
        let aggregate%bytes_offset%3#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 myStatic2#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%3#0: Encoded(uint64) = array_item%3#0
        let tmp%11#1: bool = (== values%3#0 0x0000000000000041)
        let tmp%12#1: bool = (&& tmp%10#1 tmp%11#1)
        (assert tmp%12#1) // assert target is match for conditions
        let array_length%1#0: uint64 = (extract_uint16 doubleArray#0 0u)
        let tmp%13#1: bool = (== array_length%1#0 8u)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%4#0: Encoded(uint64) = array_item%4#0
        let tmp%14#1: bool = (== values%4#0 0x0000000000000041)
        let tmp%15#1: bool = (&& tmp%13#1 tmp%14#1)
        let aggregate%array_trimmed%1#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%5#0: Encoded(uint64) = array_item%5#0
        let tmp%16#1: bool = (== values%5#0 0x0000000000000041)
        let tmp%17#1: bool = (&& tmp%15#1 tmp%16#1)
        let aggregate%array_trimmed%2#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%6#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%6#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%6#0 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#0
        let values%6#0: Encoded(uint64) = array_item%6#0
        let tmp%18#1: bool = (== values%6#0 0x0000000000000041)
        let tmp%19#0: bool = (&& tmp%17#1 tmp%18#1)
        let aggregate%array_trimmed%3#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%7#0: uint64 = (* 3u 8u)
        let aggregate%encoded_element%7#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%7#0 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%7#0
        let values%7#0: Encoded(uint64) = array_item%7#0
        let tmp%20#0: bool = (== values%7#0 0x0000000000000041)
        let tmp%21#0: bool = (&& tmp%19#0 tmp%20#0)
        let aggregate%array_trimmed%4#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%8#0: uint64 = (* 4u 8u)
        let aggregate%encoded_element%8#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%8#0 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%8#0
        let values%8#0: Encoded(uint64) = array_item%8#0
        let tmp%22#0: bool = (== values%8#0 0x0000000000000041)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        let aggregate%array_trimmed%5#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%9#0: uint64 = (* 5u 8u)
        let aggregate%encoded_element%9#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%9#0 8u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint64) = aggregate%encoded_element%9#0
        let values%9#0: Encoded(uint64) = array_item%9#0
        let tmp%24#0: bool = (== values%9#0 0x0000000000000041)
        let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
        let aggregate%array_trimmed%6#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%10#0: uint64 = (* 6u 8u)
        let aggregate%encoded_element%10#0: bytes = (extract3 aggregate%array_trimmed%6#0 aggregate%bytes_offset%10#0 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%10#0
        let values%10#0: Encoded(uint64) = array_item%10#0
        let tmp%26#0: bool = (== values%10#0 0x0000000000000041)
        let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
        let aggregate%array_trimmed%7#0: bytes = ((extract 2 0) doubleArray#0)
        let aggregate%bytes_offset%11#0: uint64 = (* 7u 8u)
        let aggregate%encoded_element%11#0: bytes = (extract3 aggregate%array_trimmed%7#0 aggregate%bytes_offset%11#0 8u) // on error: index access is out of bounds
        let array_item%11#0: Encoded(uint64) = aggregate%encoded_element%11#0
        let values%11#0: Encoded(uint64) = array_item%11#0
        let tmp%28#0: bool = (== values%11#0 0x0000000000000041)
        let tmp%29#0: bool = (&& tmp%27#0 tmp%28#0)
        (assert tmp%29#0) // assert target is match for conditions
        let b#1: Encoded(uint8[32]) = (txn Sender)
        let tmp%0#6: account = b#1
        let tmp%1#4: account = (txn Sender)
        let tmp%2#4: bool = (== tmp%0#6 tmp%1#4)
        (assert tmp%2#4)
        let tmp%3#4: bool = (!= addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ b#1)
        (assert tmp%3#4) // Zero address should not match sender
        let aggregate%bytes_offset%12#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%12#0: bytes = (extract3 addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ aggregate%bytes_offset%12#0 1u) // on error: index access is out of bounds
        let array_item%0#1: Encoded(uint8) = aggregate%encoded_element%12#0
        let values%0#1: Encoded(uint8) = array_item%0#1
        let tmp%5#3: bool = (== values%0#1 0x00)
        (assert tmp%5#3) // Zero address should start with zero byte
        let aggregate%head%17#0: bytes = (concat 0x 0x0000000000000022)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%head%17#0
        let t#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 t#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let firstItem#0: Encoded(uint64) = tuple_item%0#0
        let tmp%2#5: bool = (== firstItem#0 0x0000000000000022)
        (assert tmp%2#5)
        let aggregate%head%18#0: bytes = (concat 0x addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 0x00)
        let aggregate%as_Encoded(uint8[32],uint8)%0#0: Encoded(uint8[32],uint8) = aggregate%head%19#0
        let t1#0: Encoded(uint8[32],uint8) = aggregate%as_Encoded(uint8[32],uint8)%0#0
        let tmp%0#8: bytes = ((extract 2 0) 0x0000)
        let tmp%1#6: bool = (== tmp%0#8 0x)
        (assert tmp%1#6) // No args should give empty bytes
        let aggregate%length%2#0: uint64 = (len "hmmmmmmmmm")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "hmmmmmmmmm")
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let db2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%6#3: bytes = ((extract 2 0) 0x000568656c6c6f)
        let tmp%7#3: bool = (== tmp%6#3 "hello")
        (assert tmp%7#3)
        let tmp%8#2: bytes = ((extract 2 0) 0x000b68656c6c6f20776f726c64)
        let tmp%9#2: bool = (== tmp%8#2 "hello world")
        (assert tmp%9#2)
        let aggregate%head%20#0: bytes = (concat 0x 0xaabbccddee)
        let aggregate%as_Encoded(uint8[5][1])%0#0: Encoded(uint8[5][1]) = aggregate%head%20#0
        let s5#0: Encoded(uint8[5][1]) = aggregate%as_Encoded(uint8[5][1])%0#0
        let aggregate%bytes_offset%13#0: uint64 = (* 0u 5u)
        let aggregate%encoded_element%13#0: bytes = (extract3 s5#0 aggregate%bytes_offset%13#0 5u) // on error: index access is out of bounds
        let array_item%0#2: Encoded(uint8[5]) = aggregate%encoded_element%13#0
        let values%0#3: Encoded(uint8[5]) = array_item%0#2
        let tmp%0#9: bytes = values%0#3
        let tmp%1#7: bool = (== tmp%0#9 0xaabbccddee)
        (assert tmp%1#7)
        let tmp%2#7: bytes = ((extract 2 0) 0x000900000000aabbccddee)
        let tmp%3#7: bool = (== tmp%2#7 0x00000000aabbccddee)
        (assert tmp%3#7)
        let tmp%0#10: Encoded(uint8[4]) = (bzero 4u)
        let aggregate%head%21#0: bytes = (concat 0x 0x00)
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 0x00)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 0x00)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 0x00)
        let aggregate%as_Encoded(uint8[4])%0#0: Encoded(uint8[4]) = aggregate%head%24#0
        let encoded_array%0#3: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#0
        let tmp%1#8: bool = (== tmp%0#10 encoded_array%0#3)
        (assert tmp%1#8)
        let tmp%2#8: Encoded(bool1[4]) = (bzero 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%3#8: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%get_bit%0#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%0#0: Encoded(bool8) = (setbit tmp%3#8 1u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%1#0: Encoded(bool8) = (setbit aggregate%set_bit%0#0 2u aggregate%get_bit%1#0)
        let aggregate%get_bit%2#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%2#0: Encoded(bool8) = (setbit aggregate%set_bit%1#0 3u aggregate%get_bit%2#0)
        let aggregate%head%25#0: bytes = (concat 0x aggregate%set_bit%2#0)
        let aggregate%as_Encoded(bool1[4])%0#0: Encoded(bool1[4]) = aggregate%head%25#0
        let encoded_array%1#1: Encoded(bool1[4]) = aggregate%as_Encoded(bool1[4])%0#0
        let tmp%7#4: bool = (== tmp%2#8 encoded_array%1#1)
        (assert tmp%7#4)
        let tmp%8#3: Encoded(bool1[9]) = (bzero 2u)
        let aggregate%get_bit%3#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%3#0: Encoded(bool8) = (setbit tmp%3#8 1u aggregate%get_bit%3#0)
        let aggregate%get_bit%4#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%4#0: Encoded(bool8) = (setbit aggregate%set_bit%3#0 2u aggregate%get_bit%4#0)
        let aggregate%get_bit%5#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%5#0: Encoded(bool8) = (setbit aggregate%set_bit%4#0 3u aggregate%get_bit%5#0)
        let aggregate%get_bit%6#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%6#0: Encoded(bool8) = (setbit aggregate%set_bit%5#0 4u aggregate%get_bit%6#0)
        let aggregate%get_bit%7#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%7#0: Encoded(bool8) = (setbit aggregate%set_bit%6#0 5u aggregate%get_bit%7#0)
        let aggregate%get_bit%8#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%8#0: Encoded(bool8) = (setbit aggregate%set_bit%7#0 6u aggregate%get_bit%8#0)
        let aggregate%get_bit%9#0: uint64 = (getbit tmp%3#8 0u)
        let aggregate%set_bit%9#0: Encoded(bool8) = (setbit aggregate%set_bit%8#0 7u aggregate%get_bit%9#0)
        let aggregate%head%26#0: bytes = (concat 0x aggregate%set_bit%9#0)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 tmp%3#8)
        let aggregate%as_Encoded(bool1[9])%0#0: Encoded(bool1[9]) = aggregate%head%27#0
        let encoded_array%2#1: Encoded(bool1[9]) = aggregate%as_Encoded(bool1[9])%0#0
        let tmp%18#2: bool = (== tmp%8#3 encoded_array%2#1)
        (assert tmp%18#2)
        let aggregate%as_bytes%5#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%len_u16%2#0
        let encoded_array%3#1: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let tmp%20#1: bool = (== encoded_array%3#1 tmp%8#3)
        (assert tmp%20#1)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%set_bit%10#0: bytes[1] = (setbit aggregate%encoded_bool%1#0 1u 0u)
        let aggregate%set_bit%11#0: bytes[1] = (setbit aggregate%set_bit%10#0 2u 0u)
        let aggregate%set_bit%12#0: bytes[1] = (setbit aggregate%set_bit%11#0 3u 0u)
        let aggregate%set_bit%13#0: bytes[1] = (setbit aggregate%set_bit%12#0 4u 0u)
        let aggregate%set_bit%14#0: bytes[1] = (setbit aggregate%set_bit%13#0 5u 0u)
        let aggregate%set_bit%15#0: bytes[1] = (setbit aggregate%set_bit%14#0 6u 0u)
        let aggregate%set_bit%16#0: bytes[1] = (setbit aggregate%set_bit%15#0 7u 0u)
        let aggregate%head%28#0: bytes = (concat 0x aggregate%set_bit%16#0)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 0u)
        let aggregate%head%29#0: bytes = (concat aggregate%head%28#0 aggregate%encoded_bool%2#0)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = aggregate%head%29#0
        let tmp%22#1: Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1)%0#0
        let tmp%23#1: bool = (== tmp%8#3 tmp%22#1)
        (assert tmp%23#1)
        let tmp%26#1: bool = (== tmp%0#2 tmp%8#3)
        (assert tmp%26#1)
        let tmp%37#0: bool = (== tmp%3#8 tmp%2#8)
        (assert tmp%37#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = aggregate%len_u16%3#0
        let result#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#0
        let array_length%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        return 1u