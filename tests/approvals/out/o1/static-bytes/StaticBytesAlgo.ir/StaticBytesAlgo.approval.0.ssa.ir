main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__() -> bool:
    block@0: // L14
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@10
    block@1: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "hashAddresses(byte[32],byte[32])byte[32]" => block@2, method "receiveB32(byte[32])byte[32]" => block@3, method "receiveBytes(byte[],uint64)void" => block@4, method "returnLength(byte[32])uint64" => block@5, method "test()void" => block@6, method "testArray()void" => block@7, * => block@8}
    block@2: // hashAddresses_route_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[32]%0#0: bytes[32] = (txna ApplicationArgs 1)
        let reinterpret_bytes[32]%1#0: bytes[32] = (txna ApplicationArgs 2)
        let to_encode%0#0: bytes[32] = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(reinterpret_bytes[32]%0#0, reinterpret_bytes[32]%1#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        let tmp%7#0: bytes = (concat 0x151f7c75 to_encode%0#0)
        (log tmp%7#0)
        return 1u
    block@3: // receiveB32_route_L19
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_bytes[32]%2#0: bytes[32] = (txna ApplicationArgs 1)
        let to_encode%1#0: bytes[32] = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(reinterpret_bytes[32]%2#0)
        let length%1#0: uint64 = (len to_encode%1#0)
        let lengths_equal%1#0: bool = (== length%1#0 32u)
        (assert lengths_equal%1#0) // invalid size
        let tmp%12#0: bytes = (concat 0x151f7c75 to_encode%1#0)
        (log tmp%12#0)
        return 1u
    block@4: // receiveBytes_route_L23
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let tmp%17#0: bytes = (txna ApplicationArgs 1)
        let tmp%18#0: bytes = ((extract 2 0) tmp%17#0)
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%19#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(tmp%18#0, tmp%19#0)
        return 1u
    block@5: // returnLength_route_L27
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_bytes[32]%3#0: bytes[32] = (txna ApplicationArgs 1)
        let to_encode%2#0: uint64 = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(reinterpret_bytes[32]%3#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%2#0)
        let tmp%24#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%24#0)
        return 1u
    block@6: // test_route_L31
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test()
        return 1u
    block@7: // testArray_route_L41
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray()
        return 1u
    block@8: // switch_case_default_L14
        goto block@9
    block@9: // switch_case_next_L14
        goto block@14
    block@10: // bare_routing_L14
        let tmp%33#0: uint64 = (txn OnCompletion)
        switch tmp%33#0 {0u => block@11, * => block@12}
    block@11: // __algots__.defaultCreate_L14
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (== tmp%34#0 0u)
        (assert tmp%35#0) // can only call when creating
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__algots__.defaultCreate()
        return 1u
    block@12: // switch_case_default_L14
        goto block@13
    block@13: // switch_case_next_L14
        goto block@14
    block@14: // after_if_else_L14
        return 0u

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(a1: bytes[32], a2: bytes[32]) -> bytes[32]:
    block@0: // L15
        let tmp%0#0: bytes = (concat a1#0 a2#0)
        let tmp%1#0: bytes[32] = (sha512_256 tmp%0#0)
        return tmp%1#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(b: bytes[32]) -> bytes[32]:
    block@0: // L19
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 32u)
        (assert tmp%1#0)
        let tmp%2#0: bytes[32] = (sha512_256 b#0)
        return tmp%2#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(b: bytes, length: uint64) -> void:
    block@0: // L23
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 length#0)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(b: bytes[32]) -> uint64:
    block@0: // L27
        let tmp%0#0: uint64 = (len b#0)
        return tmp%0#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test() -> void:
    block@0: // L31
        let tmp%0#0: bytes[32] = (txn Sender)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(tmp%0#0)
        let tmp%1#0: bytes[32] = (txn Sender)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(tmp%1#0, 32u)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32("abcdefghabcdefghabcdefghabcdefgh")
        let tmp%2#0: bytes = (concat "" "abc")
        let tmp%3#0: bytes = (concat tmp%2#0 0xaaff)
        let tmp%4#0: bytes = (concat tmp%3#0 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)
        let awst_tmp%0#0: bytes = (concat tmp%4#0 SGVsbG8gQWxnb3JhbmQ=)
        let reinterpret_bytes[55]%0#0: bytes[55] = awst_tmp%0#0
        let tmp%5#0: uint64 = (len awst_tmp%0#0)
        let tmp%6#0: bool = (== tmp%5#0 55u)
        (assert tmp%6#0) // Length must be 55
        let joined#0: bytes[55] = reinterpret_bytes[55]%0#0
        let tmp%7#0: uint64 = (len joined#0)
        let tmp%8#0: bool = (== tmp%7#0 55u)
        (assert tmp%8#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray() -> void:
    block@0: // L41
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bytes[32] = (txn Sender)
        let (a.0#0: bytes[32], a.1#0: bytes[32]) = (tmp%0#0, tmp%1#0)
        let tmp%2#0: bytes[32] = (txn Sender)
        let encoded%0#0: bytes[32][] = encode<bytes[32]>(tmp%2#0)
        let slot%0#0: bytes[32][]* = new()
        write(slot%0#0, encoded%0#0)
        let b#0: bytes[32][]* = slot%0#0
        let encoded%1#0: bytes[32][] = encode<bytes[32]>(a.0#0, a.1#0)
        let slot_contents%0#0: bytes[32][] = read(b#0)
        let extended%0#0: bytes[32][] = slot_contents%0#0.concat(encoded%1#0)
        write(b#0, extended%0#0)
        let slot_contents%1#0: bytes[32][] = read(b#0)
        let tmp%3#0: bytes[32] = slot_contents%1#0[0u]
        let bitAnd#0: bytes[32] = (b& a.0#0 tmp%3#0)
        let tmp%4#0: bytes[32] = (txn Sender)
        let tmp%5#0: bool = (== bitAnd#0 tmp%4#0)
        (assert tmp%5#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__algots__.defaultCreate() -> void:
    block@0: // L14
        return 