main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        (app_global_put "name" 0x)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@14
    block@4: // abi_routing_L20
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test1()void" => block@6, method "test2()void" => block@7, method "test3()void" => block@8, method "test4()void" => block@9, method "test5(uint64)void" => block@10, * => block@13}
    block@6: // test1_route_L23
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test1[routing]()
        goto block@13
    block@7: // test2_route_L71
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test2[routing]()
        goto block@13
    block@8: // test3_route_L108
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test3[routing]()
        goto block@13
    block@9: // test4_route_L184
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test4[routing]()
        goto block@13
    block@10: // test5_route_L207
        tests/approvals/itxn.algo.ts::ItxnDemoContract.test5[routing]()
        goto block@13
    block@13: // after_if_else_L20
        fail
    block@14: // __algots__.defaultCreate_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test1[routing]() -> void:
    block@0: // L23
        let assetParams%%param_ConfigAssetManager_idx_0#0: account = (global CurrentApplicationAddress)
        let assetParams%%param_ConfigAssetReserve_idx_0#0: account = (global CurrentApplicationAddress)
        (app_global_put "name" "AST2")
        itxn_begin
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) "AST1")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset1_txn.ConfigAssetName#0: bytes = (itxn ConfigAssetName)
        let asset1_txn.CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
        itxn_begin
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) "AST2")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let asset2_txn.ConfigAssetName#0: bytes = (itxn ConfigAssetName)
        let asset2_txn.CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
        let tmp%0#0: bool = (== asset1_txn.ConfigAssetName#0 "AST1")
        (assert tmp%0#0) // asset1_txn is correct
        let tmp%1#0: bool = (== asset2_txn.ConfigAssetName#0 "AST2")
        (assert tmp%1#0) // asset2_txn is correct
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset1_txn.CreatedAssetID#0)
        (assert check%0#0) // asset exists
        let tmp%2#0: bool = (== value%0#0 "AST1")
        (assert tmp%2#0) // created asset 1 is correct
        let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetName) asset2_txn.CreatedAssetID#0)
        (assert check%1#0) // asset exists
        let tmp%3#0: bool = (== value%1#0 "AST2")
        (assert tmp%3#0) // created asset 2 is correct
        itxn_begin
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) "AST3")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appCreateTxn.CreatedApplicationID#0: uint64 = (gitxn 0 CreatedApplicationID)
        let asset3_txn.ConfigAssetName#0: bytes = (itxn ConfigAssetName)
        (assert appCreateTxn.CreatedApplicationID#0) // app is created
        let tmp%4#0: bool = (== asset3_txn.ConfigAssetName#0 "AST3")
        (assert tmp%4#0) // asset3_txn is correct
        itxn_begin
        ((itxn_field Note) "3rd")
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field Note) "3rd")
        ((itxn_field ConfigAssetReserve) assetParams%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) assetParams%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetUnitName) "unit")
        ((itxn_field ConfigAssetName) "AST3")
        ((itxn_field ConfigAssetTotal) 1000u)
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test2[routing]() -> void:
    block@0: // L71
        let createAppParams%%param_ApplicationArgs_idx_2#3: bytes = undefined
        let createAppParams%%param_OnCompletion_idx_0#2: uint64 = undefined
        let reinterpret_bool%0#0: bool = (txn NumAppArgs)
        goto reinterpret_bool%0#0 ? block@2 : block@3
    block@2: // if_body_L73
        let createAppParams%%param_ApplicationArgs_idx_0#0: bytes = "1"
        let createAppParams%%param_ApplicationArgs_idx_1#0: bytes = "2"
        let createAppParams%%ApplicationArgs_length#0: uint64 = 2u
        let createAppParams%%param_OnCompletion_idx_0#0: uint64 = 0u
        let createAppParams%%OnCompletion_length#0: uint64 = 1u
        let createAppParams%%param_Note_idx_0#0: bytes[19] = "with args param set"
        goto block@4
    block@3: // else_body_L82
        let aggregate%length%0#0: uint64 = (len "4")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "4")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let createAppParams%%param_ApplicationArgs_idx_0#1: bytes[1] = "3"
        let createAppParams%%param_ApplicationArgs_idx_2#0: bytes[1] = "5"
        let createAppParams%%ApplicationArgs_length#1: uint64 = 3u
        let createAppParams%%param_Note_idx_0#1: bytes[17] = "no args param set"
        let createAppParams%%OnCompletion_length#1: uint64 = 0u
        goto block@4
    block@4: // after_if_else_L73
        let createAppParams%%param_Note_idx_0#2: bytes = φ(createAppParams%%param_Note_idx_0#0 <- block@2, createAppParams%%param_Note_idx_0#1 <- block@3)
        let createAppParams%%OnCompletion_length#2: uint64 = φ(createAppParams%%OnCompletion_length#0 <- block@2, createAppParams%%OnCompletion_length#1 <- block@3)
        let createAppParams%%param_OnCompletion_idx_0#1: uint64 = φ(createAppParams%%param_OnCompletion_idx_0#0 <- block@2, createAppParams%%param_OnCompletion_idx_0#2 <- block@3)
        let createAppParams%%param_ApplicationArgs_idx_0#3: bytes = φ(createAppParams%%param_ApplicationArgs_idx_0#0 <- block@2, createAppParams%%param_ApplicationArgs_idx_0#1 <- block@3)
        let createAppParams%%param_ApplicationArgs_idx_1#3: bytes = φ(createAppParams%%param_ApplicationArgs_idx_1#0 <- block@2, tmp%0#0 <- block@3)
        let createAppParams%%ApplicationArgs_length#3: uint64 = φ(createAppParams%%ApplicationArgs_length#0 <- block@2, createAppParams%%ApplicationArgs_length#1 <- block@3)
        let createAppParams%%param_ApplicationArgs_idx_2#2: bytes = φ(createAppParams%%param_ApplicationArgs_idx_2#3 <- block@2, createAppParams%%param_ApplicationArgs_idx_2#0 <- block@3)
        itxn_begin
        ((itxn_field Note) createAppParams%%param_Note_idx_0#2)
        goto createAppParams%%OnCompletion_length#2 ? block@5 : block@6
    block@5: // set_OnCompletion_0_to_0_L90
        ((itxn_field OnCompletion) createAppParams%%param_OnCompletion_idx_0#1)
        goto block@6
    block@6: // next_field_L90
        ((itxn_field ApplicationArgs) createAppParams%%param_ApplicationArgs_idx_0#3)
        ((itxn_field ApplicationArgs) createAppParams%%param_ApplicationArgs_idx_1#3)
        let is_ApplicationArgs_count_gte_3%0#0: bool = (>= createAppParams%%ApplicationArgs_length#3 3u)
        goto is_ApplicationArgs_count_gte_3%0#0 ? block@7 : block@8
    block@7: // set_ApplicationArgs_2_to_2_L90
        ((itxn_field ApplicationArgs) createAppParams%%param_ApplicationArgs_idx_2#2)
        goto block@8
    block@8: // next_field_L90
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let createAppTxn.Note#0: bytes = (itxn Note)
        let tmp%1#0: bytes = (itxna ApplicationArgs 0)
        let tmp%2#0: bool = (== tmp%1#0 "1")
        (assert tmp%2#0) // correct args used 1
        let tmp%3#0: bytes = (itxna ApplicationArgs 1)
        let tmp%4#0: bool = (== tmp%3#0 "2")
        (assert tmp%4#0) // correct args used 2
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: bool = (> tmp%5#0 1u)
        goto tmp%6#0 ? block@10 : block@12
    block@10: // if_body_L94
        itxn_begin
        ((itxn_field ApplicationArgs) "42")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%7#0: bytes = (itxna ApplicationArgs 0)
        let tmp%8#0: bool = (== tmp%7#0 "42")
        (assert tmp%8#0) // correct args used 2
        let tmp%9#0: bool = (== createAppTxn.Note#0 "with args param set")
        (assert tmp%9#0)
        goto block@12
    block@12: // after_if_else_L94
        exit 1u

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test3[routing]() -> void:
    block@0: // L108
        itxn_begin
        ((itxn_field ApplicationArgs) "1")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "2")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "3")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "4")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "5")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "6")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "7")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "8")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "9")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "10")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "11")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "12")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "13")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "14")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "15")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x09361a00b08101)
        ((itxn_field ApplicationArgs) "16")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%0#0: bytes = (gitxna 0 Logs 0)
        let tmp%1#0: bool = (== tmp%0#0 "1")
        (assert tmp%1#0)
        let tmp%2#0: bytes = (gitxna 1 Logs 0)
        let tmp%3#0: bool = (== tmp%2#0 "2")
        (assert tmp%3#0)
        let tmp%4#0: bytes = (gitxna 2 Logs 0)
        let tmp%5#0: bool = (== tmp%4#0 "3")
        (assert tmp%5#0)
        let tmp%6#0: bytes = (gitxna 3 Logs 0)
        let tmp%7#0: bool = (== tmp%6#0 "4")
        (assert tmp%7#0)
        let tmp%8#0: bytes = (gitxna 4 Logs 0)
        let tmp%9#0: bool = (== tmp%8#0 "5")
        (assert tmp%9#0)
        let tmp%10#0: bytes = (gitxna 5 Logs 0)
        let tmp%11#0: bool = (== tmp%10#0 "6")
        (assert tmp%11#0)
        let tmp%12#0: bytes = (gitxna 6 Logs 0)
        let tmp%13#0: bool = (== tmp%12#0 "7")
        (assert tmp%13#0)
        let tmp%14#0: bytes = (gitxna 7 Logs 0)
        let tmp%15#0: bool = (== tmp%14#0 "8")
        (assert tmp%15#0)
        let tmp%16#0: bytes = (gitxna 8 Logs 0)
        let tmp%17#0: bool = (== tmp%16#0 "9")
        (assert tmp%17#0)
        let tmp%18#0: bytes = (gitxna 9 Logs 0)
        let tmp%19#0: bool = (== tmp%18#0 "10")
        (assert tmp%19#0)
        let tmp%20#0: bytes = (gitxna 10 Logs 0)
        let tmp%21#0: bool = (== tmp%20#0 "11")
        (assert tmp%21#0)
        let tmp%22#0: bytes = (gitxna 11 Logs 0)
        let tmp%23#0: bool = (== tmp%22#0 "12")
        (assert tmp%23#0)
        let tmp%24#0: bytes = (gitxna 12 Logs 0)
        let tmp%25#0: bool = (== tmp%24#0 "13")
        (assert tmp%25#0)
        let tmp%26#0: bytes = (gitxna 13 Logs 0)
        let tmp%27#0: bool = (== tmp%26#0 "14")
        (assert tmp%27#0)
        let tmp%28#0: bytes = (gitxna 14 Logs 0)
        let tmp%29#0: bool = (== tmp%28#0 "15")
        (assert tmp%29#0)
        let tmp%30#0: bytes = (itxna Logs 0)
        let tmp%31#0: bool = (== tmp%30#0 "16")
        (assert tmp%31#0)
        exit 1u

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test4[routing]() -> void:
    block@0: // L184
        let lotsOfBytes#0: bytes[2044] = (bzero 2044u)
        let tmp%1#0: bytes = (concat 0x80fc0f lotsOfBytes#0)
        let approval2#0: bytes = (concat tmp%1#0 0x48)
        itxn_begin
        ((itxn_field ExtraProgramPages) 3u)
        ((itxn_field ApplicationArgs) "1")
        ((itxn_field OnCompletion) 5u)
        ((itxn_field ClearStateProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) 0x098101)
        ((itxn_field ApprovalProgramPages) approval2#0)
        ((itxn_field ApprovalProgramPages) approval2#0)
        ((itxn_field ApprovalProgramPages) approval2#0)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let app1.ExtraProgramPages#0: uint64 = (itxn ExtraProgramPages)
        let app1.NumApprovalProgramPages#0: uint64 = (itxn NumApprovalProgramPages)
        let app1.NumClearStateProgramPages#0: uint64 = (itxn NumClearStateProgramPages)
        let tmp%3#0: bool = (== app1.ExtraProgramPages#0 3u)
        (assert tmp%3#0) // extra pages = 3
        let tmp%4#0: bool = (== app1.NumApprovalProgramPages#0 2u)
        (assert tmp%4#0) // approval pages = 2
        let tmp%5#0: bytes = (itxna ApprovalProgramPages 0)
        let tmp%6#0: bytes = (concat 0x098101 approval2#0)
        let length%0#0: uint64 = (len approval2#0)
        let is_out_of_bounds%0#0: bool = (>= 0u length%0#0)
        let bounded_index%0#0: uint64 = (select 0u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 3u length%0#0)
        let bounded_offset%0#0: uint64 = (select 3u length%0#0 is_out_of_bounds%1#0)
        let bounded_index%1#0: uint64 = (- length%0#0 bounded_offset%0#0)
        let end_before_start%0#0: bool = (< bounded_index%1#0 bounded_index%0#0)
        let end%0#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0)
        let tmp%7#0: bytes = (substring3 approval2#0 bounded_index%0#0 end%0#0)
        let tmp%8#0: bytes = (concat tmp%6#0 tmp%7#0)
        let tmp%9#0: bool = (== tmp%5#0 tmp%8#0)
        (assert tmp%9#0) // expected approval page 0
        let tmp%10#0: bytes = (itxna ApprovalProgramPages 1)
        let tmp%11#0: bytes = (substring3 approval2#0 bounded_index%1#0 length%0#0)
        let tmp%12#0: bytes = (concat tmp%11#0 approval2#0)
        let tmp%13#0: bool = (== tmp%10#0 tmp%12#0)
        (assert tmp%13#0) // expected approval page 1
        let tmp%14#0: bool = (== app1.NumClearStateProgramPages#0 1u)
        (assert tmp%14#0) // clear state pages = 1
        let tmp%15#0: bytes = (itxna ClearStateProgramPages 0)
        let tmp%16#0: bool = (== tmp%15#0 0x098101)
        (assert tmp%16#0) // expected clear state page
        exit 1u

subroutine tests/approvals/itxn.algo.ts::ItxnDemoContract.test5[routing]() -> void:
    block@0: // L207
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let appId#0: uint64 = (btoi tmp%0#0)
        let (value%0#0: account, check%0#0: bool) = ((app_params_get AppAddress) appId#0)
        (assert check%0#0) // application exists
        let aggregate%length%0#0: uint64 = (len "hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        itxn_begin
        ((itxn_field Amount) 1000u)
        ((itxn_field Receiver) value%0#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationArgs) method "receivePay(uint64,pay,string)(uint64,uint64,string)")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) 6u)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appRes.LastLog#0: bytes = (itxn LastLog)
        let returnValue#0: Encoded(uint64,uint64,(len+utf8[])) = ((extract 4 0) appRes.LastLog#0)
        let tmp%2#0: bytes = ((extract 0 4) appRes.LastLog#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // Bytes has valid prefix
        let aggregate%extract%0#0: bytes = (extract3 returnValue#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%5#0: bool = (== values%0#0 1u)
        let tmp%6#0: bool = (&& 1u tmp%5#0)
        let aggregate%extract%1#0: bytes = (extract3 returnValue#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%7#0: bool = (== values%1#0 1000u)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 returnValue#0 16u)
        let aggregate%len%0#0: uint64 = (len returnValue#0)
        let aggregate%substring3%0#0: bytes = (substring3 returnValue#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%2#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let values%2#0: string = ((extract 2 0) tuple_item%2#0)
        let tmp%9#0: bool = (== values%2#0 "hello")
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // assert target is match for conditions
        exit 1u