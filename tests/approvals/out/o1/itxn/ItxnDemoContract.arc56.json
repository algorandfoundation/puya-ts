{
    "name": "ItxnDemoContract",
    "structs": {},
    "methods": [
        {
            "name": "test1",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test3",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test4",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bmFtZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        160,
                        173,
                        186,
                        199
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "app is created"
                },
                {
                    "pc": [
                        1131
                    ],
                    "errorMessage": "approval pages = 2"
                },
                {
                    "pc": [
                        321,
                        328
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        312
                    ],
                    "errorMessage": "asset1_txn is correct"
                },
                {
                    "pc": [
                        317
                    ],
                    "errorMessage": "asset2_txn is correct"
                },
                {
                    "pc": [
                        385
                    ],
                    "errorMessage": "asset3_txn is correct"
                },
                {
                    "pc": [
                        217
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        163,
                        176,
                        189,
                        202
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        228,
                        273
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        1210
                    ],
                    "errorMessage": "clear state pages = 1"
                },
                {
                    "pc": [
                        525
                    ],
                    "errorMessage": "correct args used 1"
                },
                {
                    "pc": [
                        532,
                        568
                    ],
                    "errorMessage": "correct args used 2"
                },
                {
                    "pc": [
                        325
                    ],
                    "errorMessage": "created asset 1 is correct"
                },
                {
                    "pc": [
                        332
                    ],
                    "errorMessage": "created asset 2 is correct"
                },
                {
                    "pc": [
                        1191
                    ],
                    "errorMessage": "expected approval page 0"
                },
                {
                    "pc": [
                        1206
                    ],
                    "errorMessage": "expected approval page 1"
                },
                {
                    "pc": [
                        1216
                    ],
                    "errorMessage": "expected clear state page"
                },
                {
                    "pc": [
                        1126
                    ],
                    "errorMessage": "extra pages = 3"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAYFA+gHJhYDCYEBBwk2GgCwgQEEbmFtZQExBHVuaXQBMgRBU1QxBEFTVDIEQVNUMwEzATQBNQMzcmQTd2l0aCBhcmdzIHBhcmFtIHNldAI0MgIxMAIxMQIxMgIxMwIxNAIxNQIxNjEYQAAEKoAAZzEbQQBZggQEICVPkQTxkIUkBN+SDzcEPUY0XDYaAI4EACkAHAAPAAIiQzEZFEQxGESIA4iBAUMxGRREMRhEiAG0gQFDMRkURDEYRIgA8oEBQzEZFEQxGESIAA+BAUMxGUD/xTEYFESBAUMqJwZnIiplRDIKSSonB2exSbIqSwGyKSWyIycEsiVPArImIQSyIiWyECKyAbO0JrQ8IiplRLFLA7IqSwSyKSWyIycEsiWyJiEEsiIlshAisgGztCa0PE8DJwYSREwnBxJETHEERCcGEkRxBEQnBxJEsSiyQiiyQCOyECKyAbZJsipLAbIpJbIjJwSyJScIsiYhBLIiJbIQIrIBs7QmtwA9RCcIEkSxJwyyBSiyQiiyQCOyECKyAbYnDLIFsiqyKSWyIycEsiUnCLImIQSyIiWyECKyAbOJigAAIkcCgABJIoAAMRtBAHwrjAAnBYwBgQKMAyKMBoEBjAQnDbGyBYsEQQAEiwayGYsAshqLAbIaiwMlD0EABIsFshooskIoskAjshAisgGztAWMArUaACsSRLUaAScFEkQxG4EBDUEAIrEnDrIaJLIZKLJCKLJAI7IQIrIBs7UaACcOEkSLAicNEkSJJwmMACcKjAEnC4wFJYwDgBFubyBhcmdzIHBhcmFtIHNldCKMBEL/cLErshokshkoskIpskAjshAisgG2KLJCKbJAJwWyGiSyGSOyECKyAbYoskIpskAnCbIaJLIZI7IQIrIBtiiyQimyQCcKshokshkjshAisgG2KLJCKbJAJwuyGiSyGSOyECKyAbYoskIpskCAATayGiSyGSOyECKyAbYoskIpskCAATeyGiSyGSOyECKyAbYoskIpskCAATiyGiSyGSOyECKyAbYoskIpskCAATmyGiSyGSOyECKyAbYoskIpskAnD7IaJLIZI7IQIrIBtiiyQimyQCcQshokshkjshAisgG2KLJCKbJAJxGyGiSyGSOyECKyAbYoskIpskAnErIaJLIZI7IQIrIBtiiyQimyQCcTshokshkjshAisgG2KLJCKbJAJxSyGiSyGSOyECKyAbYoskIpskAnFbIaJLIZI7IQIrIBs7gAOgArEkS4AToAJwUSRLgCOgAnCRJEuAM6ACcKEkS4BDoAJwsSRLgFOgCAATYSRLgGOgCAATcSRLgHOgCAATgSRLgIOgCAATkSRLgJOgAnDxJEuAo6ACcQEkS4CzoAJxESRLgMOgAnEhJEuA06ACcTEkS4DjoAJxQSRLU6ACcVEkSJgfwPr4ADgPwPTFCAAUhQsSWyOCuyGiSyGSiyQiiyQEmyQEmyQEmyQCOyECKyAbO0QbRDtDglEkRMgQISRLVAAChLA1BLAxUiSwEPIksCTwJNJUsCDyVLA08CTUsCTAlJSwIMSwFLA08CTUsHTwNPAlJPA0xQTwMSRLVAAUsETwJPA1JPA1ASRIEBEkS1QgAoEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}