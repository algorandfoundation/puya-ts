#pragma version 10
#pragma typetrack false

// tests/approvals/itxn.algo.ts::ItxnDemoContract.approvalProgram() -> uint64:
main:
    intcblock 0 3 1000 6
    bytecblock "name" "unit" 0x098101 0x "AST1" "AST2" "AST3" "with args param set" "\t\xc2\x81\x01" "3rd"
    intc_0 // 0
    dupn 2
    bytec_3 // ""
    dupn 2
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    bytec_3 // 0x
    app_global_put

main_after_if_else@2:
    // tests/approvals/itxn.algo.ts:11
    // if (Txn.numAppArgs) {
    txn NumAppArgs
    bz main_after_if_else@15
    // tests/approvals/itxn.algo.ts:12
    // switch (Txn.applicationArgs(0)) {
    intc_0 // 0
    txnas ApplicationArgs
    // tests/approvals/itxn.algo.ts:13
    // case Bytes('test1'):
    pushbytess "test1" "test2" "test3" "test4" // "test1", "test2", "test3", "test4"
    // tests/approvals/itxn.algo.ts:12-22
    // switch (Txn.applicationArgs(0)) {
    //   case Bytes('test1'):
    //     this.test1()
    //     break
    //   case Bytes('test2'):
    //     this.test2()
    //     break
    //   case Bytes('test3'):
    //   case Bytes('test4'):
    //     break
    // }
    uncover 4
    match main_switch_case_0@4 main_switch_case_1@6 main_after_if_else@15 main_after_if_else@15

main_after_if_else@15:
    // tests/approvals/itxn.algo.ts:24
    // return true
    pushint 1 // 1
    return

main_switch_case_1@6:
    intc_0 // 0
    bury 4
    bytec_3 // ""
    bury 1
    // tests/approvals/itxn.algo.ts:77
    // if (Txn.numAppArgs) {
    txn NumAppArgs
    bz main_else_body@18
    // tests/approvals/itxn.algo.ts:78
    // const args = [Bytes('1'), Bytes('2')] as const
    pushbytes "1"
    bury 6
    pushbytes "2"
    bury 5
    // tests/approvals/itxn.algo.ts:82
    // appArgs: args,
    pushint 2 // 2
    bury 3
    // tests/approvals/itxn.algo.ts:83
    // onCompletion: OnCompleteAction.NoOp,
    intc_0 // 0
    bury 1
    pushint 1 // 1
    bury 2
    // tests/approvals/itxn.algo.ts:84
    // note: 'with args param set',
    bytec 7 // "with args param set"

main_after_if_else@19:
    // tests/approvals/itxn.algo.ts:94
    // const createAppTxn = createAppParams.submit()
    itxn_begin
    itxn_field Note
    dig 1
    bz main_next_field@21
    dup
    itxn_field OnCompletion

main_next_field@21:
    dig 5
    itxn_field ApplicationArgs
    dig 4
    itxn_field ApplicationArgs
    dig 2
    intc_1 // 3
    >=
    // tests/approvals/itxn.algo.ts:94
    // const createAppTxn = createAppParams.submit()
    bz main_next_field@23
    dig 3
    itxn_field ApplicationArgs

main_next_field@23:
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes('\x09\x81\x01')
    bytec 8 // "\t\xc2\x81\x01"
    itxn_field ClearStateProgramPages
    bytec 8 // "\t\xc2\x81\x01"
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:79-85
    // createAppParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   appArgs: args,
    //   onCompletion: OnCompleteAction.NoOp,
    //   note: 'with args param set',
    // })
    intc_3 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:94
    // const createAppTxn = createAppParams.submit()
    itxn_submit
    itxn Note
    // tests/approvals/itxn.algo.ts:95
    // assert(createAppTxn.appArgs(0) === Bytes('1'), 'correct args used 1')
    itxna ApplicationArgs 0
    pushbytes "1"
    ==
    assert // correct args used 1
    // tests/approvals/itxn.algo.ts:96
    // assert(createAppTxn.appArgs(1) === Bytes('2'), 'correct args used 2')
    itxna ApplicationArgs 1
    pushbytes "2"
    ==
    assert // correct args used 2
    // tests/approvals/itxn.algo.ts:97
    // assert(createAppTxn.note === Bytes('with args param set'))
    bytec 7 // "with args param set"
    ==
    assert
    // tests/approvals/itxn.algo.ts:18
    // break
    b main_after_if_else@15

main_else_body@18:
    // tests/approvals/itxn.algo.ts:90
    // appArgs: [Bytes('3'), '4', Bytes('5')],
    pushbytes "3"
    bury 6
    pushbytes "4"
    bury 5
    pushbytes "5"
    bury 4
    intc_1 // 3
    bury 3
    // tests/approvals/itxn.algo.ts:91
    // note: 'no args param set',
    pushbytes "no args param set"
    // tests/approvals/itxn.algo.ts:87
    // createAppParams = itxn.applicationCall({
    intc_0 // 0
    bury 3
    b main_after_if_else@19

main_switch_case_0@4:
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/approvals/itxn.algo.ts:28
    // this.name.value = Bytes('AST1')
    bytec 4 // "AST1"
    app_global_put
    // tests/approvals/itxn.algo.ts:32
    // assetName: this.name.value,
    intc_0 // 0
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/approvals/itxn.algo.ts:32
    // assetName: this.name.value,
    app_global_get_ex
    assert // check GlobalState exists
    // tests/approvals/itxn.algo.ts:35
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/itxn.algo.ts:36
    // reserve: Global.currentApplicationAddress,
    dup
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/approvals/itxn.algo.ts:39
    // this.name.value = Bytes('AST2')
    bytec 5 // "AST2"
    app_global_put
    // tests/approvals/itxn.algo.ts:40
    // const asset1_txn = assetParams.submit()
    itxn_begin
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:34
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:33
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    uncover 2
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:31
    // total: 1000,
    intc_2 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:30-37
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:40
    // const asset1_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/approvals/itxn.algo.ts:42
    // assetName: this.name.value,
    intc_0 // 0
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/approvals/itxn.algo.ts:42
    // assetName: this.name.value,
    app_global_get_ex
    assert // check GlobalState exists
    // tests/approvals/itxn.algo.ts:44
    // const asset2_txn = assetParams.submit()
    itxn_begin
    dig 3
    itxn_field ConfigAssetReserve
    dig 4
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:34
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:33
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:31
    // total: 1000,
    intc_2 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:30-37
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:44
    // const asset2_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/approvals/itxn.algo.ts:46
    // assert(asset1_txn.assetName === Bytes('AST1'), 'asset1_txn is correct')
    uncover 3
    bytec 4 // "AST1"
    ==
    assert // asset1_txn is correct
    // tests/approvals/itxn.algo.ts:47
    // assert(asset2_txn.assetName === Bytes('AST2'), 'asset2_txn is correct')
    swap
    bytec 5 // "AST2"
    ==
    assert // asset2_txn is correct
    // tests/approvals/itxn.algo.ts:48
    // assert(asset1_txn.createdAsset.name === Bytes('AST1'), 'created asset 1 is correct')
    swap
    asset_params_get AssetName
    assert // asset exists
    bytec 4 // "AST1"
    ==
    assert // created asset 1 is correct
    // tests/approvals/itxn.algo.ts:49
    // assert(asset2_txn.createdAsset.name === Bytes('AST2'), 'created asset 2 is correct')
    asset_params_get AssetName
    assert // asset exists
    bytec 5 // "AST2"
    ==
    assert // created asset 2 is correct
    // tests/approvals/itxn.algo.ts:61
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/approvals/itxn.algo.ts:53
    // clearStateProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:52
    // approvalProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:51-55
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: Bytes.fromHex('098101'),
    //   clearStateProgram: Bytes.fromHex('098101'),
    //   fee: 0,
    // })
    intc_3 // 6
    itxn_field TypeEnum
    // tests/approvals/itxn.algo.ts:54
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:61
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:34
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:33
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:58
    // assetName: 'AST3',
    bytec 6 // "AST3"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:31
    // total: 1000,
    intc_2 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:30-37
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:61
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    itxn ConfigAssetName
    gitxn 0 ApplicationID
    // tests/approvals/itxn.algo.ts:63
    // assert(appCreateTxn.appId, 'app is created')
    assert // app is created
    // tests/approvals/itxn.algo.ts:64
    // assert(asset3_txn.assetName === Bytes('AST3'), 'asset3_txn is correct')
    bytec 6 // "AST3"
    ==
    assert // asset3_txn is correct
    // tests/approvals/itxn.algo.ts:72
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/approvals/itxn.algo.ts:67
    // note: '3rd',
    bytec 9 // "3rd"
    itxn_field Note
    // tests/approvals/itxn.algo.ts:53
    // clearStateProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:52
    // approvalProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:51-55
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: Bytes.fromHex('098101'),
    //   clearStateProgram: Bytes.fromHex('098101'),
    //   fee: 0,
    // })
    intc_3 // 6
    itxn_field TypeEnum
    // tests/approvals/itxn.algo.ts:54
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:72
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    // tests/approvals/itxn.algo.ts:70
    // note: '3rd',
    bytec 9 // "3rd"
    itxn_field Note
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:34
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:33
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:58
    // assetName: 'AST3',
    bytec 6 // "AST3"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:31
    // total: 1000,
    intc_2 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:30-37
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:72
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    // tests/approvals/itxn.algo.ts:15
    // break
    b main_after_if_else@15
