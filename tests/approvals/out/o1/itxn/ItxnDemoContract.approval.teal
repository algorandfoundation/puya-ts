#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 6 5 3 1000
    bytecblock 0x098101 0x09361a00b08101 "name" "1" "unit" "2" "AST1" "AST2" "AST3" "3" "4" "5" "3rd" "with args param set" "42" "10" "11" "12" "13" "14" "15" "16"
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_2 // "name"
    pushbytes 0x
    app_global_put

main_after_if_else@2:
    // tests/approvals/itxn.algo.ts:7
    // export class ItxnDemoContract extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x20254f91 0xf1908524 0xdf920f37 0x3d46345c // method "test1()void", method "test2()void", method "test3()void", method "test4()void"
    txna ApplicationArgs 0
    match main_test1_route@5 main_test2_route@6 main_test3_route@7 main_test4_route@8

main_after_if_else@15:
    // tests/approvals/itxn.algo.ts:7
    // export class ItxnDemoContract extends Contract {
    intc_0 // 0
    return

main_test4_route@8:
    // tests/approvals/itxn.algo.ts:171
    // public test4() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test4
    pushint 1 // 1
    return

main_test3_route@7:
    // tests/approvals/itxn.algo.ts:95
    // public test3() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test3
    pushint 1 // 1
    return

main_test2_route@6:
    // tests/approvals/itxn.algo.ts:58
    // public test2() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test2
    pushint 1 // 1
    return

main_test1_route@5:
    // tests/approvals/itxn.algo.ts:10
    // public test1() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test1
    pushint 1 // 1
    return

main_bare_routing@11:
    // tests/approvals/itxn.algo.ts:7
    // export class ItxnDemoContract extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// tests/approvals/itxn.algo.ts::ItxnDemoContract.test1() -> void:
test1:
    // tests/approvals/itxn.algo.ts:10
    // public test1() {
    proto 0 0
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_2 // "name"
    // tests/approvals/itxn.algo.ts:11
    // this.name.value = Bytes('AST1')
    bytec 6 // "AST1"
    app_global_put
    // tests/approvals/itxn.algo.ts:15
    // assetName: this.name.value,
    intc_0 // 0
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_2 // "name"
    // tests/approvals/itxn.algo.ts:15
    // assetName: this.name.value,
    app_global_get_ex
    assert // check GlobalState exists
    // tests/approvals/itxn.algo.ts:18
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/approvals/itxn.algo.ts:19
    // reserve: Global.currentApplicationAddress,
    dup
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_2 // "name"
    // tests/approvals/itxn.algo.ts:22
    // this.name.value = Bytes('AST2')
    bytec 7 // "AST2"
    app_global_put
    // tests/approvals/itxn.algo.ts:23
    // const asset1_txn = assetParams.submit()
    itxn_begin
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:17
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:16
    // unitName: 'unit',
    bytec 4 // "unit"
    itxn_field ConfigAssetUnitName
    uncover 2
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:14
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:13-20
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:23
    // const asset1_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/approvals/itxn.algo.ts:25
    // assetName: this.name.value,
    intc_0 // 0
    // tests/approvals/itxn.algo.ts:8
    // name = GlobalState({ initialValue: Bytes() })
    bytec_2 // "name"
    // tests/approvals/itxn.algo.ts:25
    // assetName: this.name.value,
    app_global_get_ex
    assert // check GlobalState exists
    // tests/approvals/itxn.algo.ts:27
    // const asset2_txn = assetParams.submit()
    itxn_begin
    dig 3
    itxn_field ConfigAssetReserve
    dig 4
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:17
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:16
    // unitName: 'unit',
    bytec 4 // "unit"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:14
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:13-20
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:27
    // const asset2_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/approvals/itxn.algo.ts:29
    // assert(asset1_txn.assetName === Bytes('AST1'), 'asset1_txn is correct')
    uncover 3
    bytec 6 // "AST1"
    ==
    assert // asset1_txn is correct
    // tests/approvals/itxn.algo.ts:30
    // assert(asset2_txn.assetName === Bytes('AST2'), 'asset2_txn is correct')
    swap
    bytec 7 // "AST2"
    ==
    assert // asset2_txn is correct
    // tests/approvals/itxn.algo.ts:31
    // assert(asset1_txn.createdAsset.name === Bytes('AST1'), 'created asset 1 is correct')
    swap
    asset_params_get AssetName
    assert // asset exists
    bytec 6 // "AST1"
    ==
    assert // created asset 1 is correct
    // tests/approvals/itxn.algo.ts:32
    // assert(asset2_txn.createdAsset.name === Bytes('AST2'), 'created asset 2 is correct')
    asset_params_get AssetName
    assert // asset exists
    bytec 7 // "AST2"
    ==
    assert // created asset 2 is correct
    // tests/approvals/itxn.algo.ts:44
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:34-38
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   fee: 0,
    // })
    intc_1 // 6
    itxn_field TypeEnum
    // tests/approvals/itxn.algo.ts:37
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:44
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:17
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:16
    // unitName: 'unit',
    bytec 4 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:41
    // assetName: 'AST3',
    bytec 8 // "AST3"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:14
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:13-20
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:44
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    itxn ConfigAssetName
    gitxn 0 CreatedApplicationID
    // tests/approvals/itxn.algo.ts:46
    // assert(appCreateTxn.createdApp, 'app is created')
    assert // app is created
    // tests/approvals/itxn.algo.ts:47
    // assert(asset3_txn.assetName === Bytes('AST3'), 'asset3_txn is correct')
    bytec 8 // "AST3"
    ==
    assert // asset3_txn is correct
    // tests/approvals/itxn.algo.ts:55
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/approvals/itxn.algo.ts:50
    // note: '3rd',
    bytec 12 // "3rd"
    itxn_field Note
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:34-38
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   fee: 0,
    // })
    intc_1 // 6
    itxn_field TypeEnum
    // tests/approvals/itxn.algo.ts:37
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:55
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    // tests/approvals/itxn.algo.ts:53
    // note: '3rd',
    bytec 12 // "3rd"
    itxn_field Note
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // tests/approvals/itxn.algo.ts:17
    // decimals: 3,
    intc_3 // 3
    itxn_field ConfigAssetDecimals
    // tests/approvals/itxn.algo.ts:16
    // unitName: 'unit',
    bytec 4 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/approvals/itxn.algo.ts:41
    // assetName: 'AST3',
    bytec 8 // "AST3"
    itxn_field ConfigAssetName
    // tests/approvals/itxn.algo.ts:14
    // total: 1000,
    intc 4 // 1000
    itxn_field ConfigAssetTotal
    // tests/approvals/itxn.algo.ts:13-20
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:55
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    retsub


// tests/approvals/itxn.algo.ts::ItxnDemoContract.test2() -> void:
test2:
    // tests/approvals/itxn.algo.ts:58
    // public test2() {
    proto 0 0
    intc_0 // 0
    dupn 2
    pushbytes ""
    dup
    intc_0 // 0
    pushbytes ""
    // tests/approvals/itxn.algo.ts:60
    // if (Txn.numAppArgs) {
    txn NumAppArgs
    bz test2_else_body@2
    // tests/approvals/itxn.algo.ts:61
    // const args = [Bytes('1'), Bytes('2')] as const
    bytec_3 // "1"
    frame_bury 0
    bytec 5 // "2"
    frame_bury 1
    // tests/approvals/itxn.algo.ts:65
    // appArgs: args,
    pushint 2 // 2
    frame_bury 3
    // tests/approvals/itxn.algo.ts:66
    // onCompletion: OnCompleteAction.NoOp,
    intc_0 // 0
    frame_bury 6
    pushint 1 // 1
    frame_bury 4
    // tests/approvals/itxn.algo.ts:67
    // note: 'with args param set',
    bytec 13 // "with args param set"

test2_after_if_else@3:
    // tests/approvals/itxn.algo.ts:77
    // const createAppTxn = createAppParams.submit()
    itxn_begin
    itxn_field Note
    frame_dig 4
    bz test2_next_field@5
    frame_dig 6
    itxn_field OnCompletion

test2_next_field@5:
    frame_dig 0
    itxn_field ApplicationArgs
    frame_dig 1
    itxn_field ApplicationArgs
    frame_dig 3
    intc_3 // 3
    >=
    // tests/approvals/itxn.algo.ts:77
    // const createAppTxn = createAppParams.submit()
    bz test2_next_field@7
    frame_dig 5
    itxn_field ApplicationArgs

test2_next_field@7:
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:62-68
    // createAppParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   appArgs: args,
    //   onCompletion: OnCompleteAction.NoOp,
    //   note: 'with args param set',
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:77
    // const createAppTxn = createAppParams.submit()
    itxn_submit
    itxn Note
    frame_bury 2
    // tests/approvals/itxn.algo.ts:78
    // assert(createAppTxn.appArgs(0) === Bytes('1'), 'correct args used 1')
    itxna ApplicationArgs 0
    bytec_3 // "1"
    ==
    assert // correct args used 1
    // tests/approvals/itxn.algo.ts:79
    // assert(createAppTxn.appArgs(1) === Bytes('2'), 'correct args used 2')
    itxna ApplicationArgs 1
    bytec 5 // "2"
    ==
    assert // correct args used 2
    // tests/approvals/itxn.algo.ts:81
    // if (Txn.numAppArgs > 1) {
    txn NumAppArgs
    pushint 1 // 1
    >
    bz test2_after_if_else@11
    // tests/approvals/itxn.algo.ts:82-89
    // const createAppTxn2 = itxn
    //   .applicationCall({
    //     approvalProgram: APPROVE,
    //     clearStateProgram: APPROVE,
    //     onCompletion: OnCompleteAction.DeleteApplication,
    //     appArgs: [Bytes('42')],
    //   })
    //   .submit()
    itxn_begin
    // tests/approvals/itxn.algo.ts:87
    // appArgs: [Bytes('42')],
    bytec 14 // "42"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:86
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:82-88
    // const createAppTxn2 = itxn
    //   .applicationCall({
    //     approvalProgram: APPROVE,
    //     clearStateProgram: APPROVE,
    //     onCompletion: OnCompleteAction.DeleteApplication,
    //     appArgs: [Bytes('42')],
    //   })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:82-89
    // const createAppTxn2 = itxn
    //   .applicationCall({
    //     approvalProgram: APPROVE,
    //     clearStateProgram: APPROVE,
    //     onCompletion: OnCompleteAction.DeleteApplication,
    //     appArgs: [Bytes('42')],
    //   })
    //   .submit()
    itxn_submit
    // tests/approvals/itxn.algo.ts:90
    // assert(createAppTxn2.appArgs(0) === Bytes('42'), 'correct args used 2')
    itxna ApplicationArgs 0
    bytec 14 // "42"
    ==
    assert // correct args used 2
    // tests/approvals/itxn.algo.ts:91
    // assert(createAppTxn.note === Bytes('with args param set'))
    frame_dig 2
    bytec 13 // "with args param set"
    ==
    assert

test2_after_if_else@11:
    retsub

test2_else_body@2:
    // tests/approvals/itxn.algo.ts:73
    // appArgs: [Bytes('3'), '4', Bytes('5')],
    bytec 9 // "3"
    frame_bury 0
    bytec 10 // "4"
    frame_bury 1
    bytec 11 // "5"
    frame_bury 5
    intc_3 // 3
    frame_bury 3
    // tests/approvals/itxn.algo.ts:74
    // note: 'no args param set',
    pushbytes "no args param set"
    // tests/approvals/itxn.algo.ts:70
    // createAppParams = itxn.applicationCall({
    intc_0 // 0
    frame_bury 4
    b test2_after_if_else@3


// tests/approvals/itxn.algo.ts::ItxnDemoContract.test3() -> void:
test3:
    // tests/approvals/itxn.algo.ts:95
    // public test3() {
    proto 0 0
    // tests/approvals/itxn.algo.ts:134-151
    // const [app1, app2, app3, app4, app5, app6, app7, app8, app9, app10, app11, app12, app13, app14, app15, app16] = itxn.submitGroup(
    //   appTxn1,
    //   appTxn2,
    //   appTxn3,
    //   appTxn4,
    //   appTxn5,
    //   appTxn6,
    //   appTxn7,
    //   appTxn8,
    //   appTxn9,
    //   appTxn10,
    //   appTxn11,
    //   appTxn12,
    //   appTxn13,
    //   appTxn14,
    //   appTxn15,
    //   appTxn16,
    // )
    itxn_begin
    // tests/approvals/itxn.algo.ts:100
    // appArgs: [Bytes('1')],
    bytec_3 // "1"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:136
    // appTxn2,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:104
    // appTxn2.set({ appArgs: [Bytes('2')] })
    bytec 5 // "2"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:137
    // appTxn3,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:106
    // appTxn3.set({ appArgs: [Bytes('3')] })
    bytec 9 // "3"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:138
    // appTxn4,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:108
    // appTxn4.set({ appArgs: [Bytes('4')] })
    bytec 10 // "4"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:139
    // appTxn5,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:110
    // appTxn5.set({ appArgs: [Bytes('5')] })
    bytec 11 // "5"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:140
    // appTxn6,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:112
    // appTxn6.set({ appArgs: [Bytes('6')] })
    pushbytes "6"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:141
    // appTxn7,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:114
    // appTxn7.set({ appArgs: [Bytes('7')] })
    pushbytes "7"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:142
    // appTxn8,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:116
    // appTxn8.set({ appArgs: [Bytes('8')] })
    pushbytes "8"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:143
    // appTxn9,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:118
    // appTxn9.set({ appArgs: [Bytes('9')] })
    pushbytes "9"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:144
    // appTxn10,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:120
    // appTxn10.set({ appArgs: [Bytes('10')] })
    bytec 15 // "10"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:145
    // appTxn11,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:122
    // appTxn11.set({ appArgs: [Bytes('11')] })
    bytec 16 // "11"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:146
    // appTxn12,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:124
    // appTxn12.set({ appArgs: [Bytes('12')] })
    bytec 17 // "12"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:147
    // appTxn13,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:126
    // appTxn13.set({ appArgs: [Bytes('13')] })
    bytec 18 // "13"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:148
    // appTxn14,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:128
    // appTxn14.set({ appArgs: [Bytes('14')] })
    bytec 19 // "14"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:149
    // appTxn15,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:130
    // appTxn15.set({ appArgs: [Bytes('15')] })
    bytec 20 // "15"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:150
    // appTxn16,
    itxn_next
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/approvals/itxn.algo.ts:4
    // const LOG_1ST_ARG_AND_APPROVE = Bytes.fromHex('09361A00B08101')
    bytec_1 // 0x09361a00b08101
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:132
    // appTxn16.set({ appArgs: [Bytes('16')] })
    bytec 21 // "16"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:99
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:96-101
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: LOG_1ST_ARG_AND_APPROVE,
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:134-151
    // const [app1, app2, app3, app4, app5, app6, app7, app8, app9, app10, app11, app12, app13, app14, app15, app16] = itxn.submitGroup(
    //   appTxn1,
    //   appTxn2,
    //   appTxn3,
    //   appTxn4,
    //   appTxn5,
    //   appTxn6,
    //   appTxn7,
    //   appTxn8,
    //   appTxn9,
    //   appTxn10,
    //   appTxn11,
    //   appTxn12,
    //   appTxn13,
    //   appTxn14,
    //   appTxn15,
    //   appTxn16,
    // )
    itxn_submit
    // tests/approvals/itxn.algo.ts:153
    // assert(app1.logs(0) === Bytes('1'))
    gitxna 0 Logs 0
    bytec_3 // "1"
    ==
    assert
    // tests/approvals/itxn.algo.ts:154
    // assert(app2.logs(0) === Bytes('2'))
    gitxna 1 Logs 0
    bytec 5 // "2"
    ==
    assert
    // tests/approvals/itxn.algo.ts:155
    // assert(app3.logs(0) === Bytes('3'))
    gitxna 2 Logs 0
    bytec 9 // "3"
    ==
    assert
    // tests/approvals/itxn.algo.ts:156
    // assert(app4.logs(0) === Bytes('4'))
    gitxna 3 Logs 0
    bytec 10 // "4"
    ==
    assert
    // tests/approvals/itxn.algo.ts:157
    // assert(app5.logs(0) === Bytes('5'))
    gitxna 4 Logs 0
    bytec 11 // "5"
    ==
    assert
    // tests/approvals/itxn.algo.ts:158
    // assert(app6.logs(0) === Bytes('6'))
    gitxna 5 Logs 0
    pushbytes "6"
    ==
    assert
    // tests/approvals/itxn.algo.ts:159
    // assert(app7.logs(0) === Bytes('7'))
    gitxna 6 Logs 0
    pushbytes "7"
    ==
    assert
    // tests/approvals/itxn.algo.ts:160
    // assert(app8.logs(0) === Bytes('8'))
    gitxna 7 Logs 0
    pushbytes "8"
    ==
    assert
    // tests/approvals/itxn.algo.ts:161
    // assert(app9.logs(0) === Bytes('9'))
    gitxna 8 Logs 0
    pushbytes "9"
    ==
    assert
    // tests/approvals/itxn.algo.ts:162
    // assert(app10.logs(0) === Bytes('10'))
    gitxna 9 Logs 0
    bytec 15 // "10"
    ==
    assert
    // tests/approvals/itxn.algo.ts:163
    // assert(app11.logs(0) === Bytes('11'))
    gitxna 10 Logs 0
    bytec 16 // "11"
    ==
    assert
    // tests/approvals/itxn.algo.ts:164
    // assert(app12.logs(0) === Bytes('12'))
    gitxna 11 Logs 0
    bytec 17 // "12"
    ==
    assert
    // tests/approvals/itxn.algo.ts:165
    // assert(app13.logs(0) === Bytes('13'))
    gitxna 12 Logs 0
    bytec 18 // "13"
    ==
    assert
    // tests/approvals/itxn.algo.ts:166
    // assert(app14.logs(0) === Bytes('14'))
    gitxna 13 Logs 0
    bytec 19 // "14"
    ==
    assert
    // tests/approvals/itxn.algo.ts:167
    // assert(app15.logs(0) === Bytes('15'))
    gitxna 14 Logs 0
    bytec 20 // "15"
    ==
    assert
    // tests/approvals/itxn.algo.ts:168
    // assert(app16.logs(0) === Bytes('16'))
    itxna Logs 0
    bytec 21 // "16"
    ==
    assert
    retsub


// tests/approvals/itxn.algo.ts::ItxnDemoContract.test4() -> void:
test4:
    // tests/approvals/itxn.algo.ts:171
    // public test4() {
    proto 0 0
    // tests/approvals/itxn.algo.ts:172
    // const lotsOfBytes = op.bzero(2044)
    pushint 2044 // 2044
    bzero
    // tests/approvals/itxn.algo.ts:174
    // const approval2 = Bytes.fromHex('80' + 'FC0f')
    pushbytes 0x80fc0f
    // tests/approvals/itxn.algo.ts:174-175
    // const approval2 = Bytes.fromHex('80' + 'FC0f')
    //   .concat(lotsOfBytes)
    swap
    concat
    // tests/approvals/itxn.algo.ts:176
    // .concat(Bytes.fromHex('48'))
    pushbytes 0x48
    // tests/approvals/itxn.algo.ts:174-176
    // const approval2 = Bytes.fromHex('80' + 'FC0f')
    //   .concat(lotsOfBytes)
    //   .concat(Bytes.fromHex('48'))
    concat
    // tests/approvals/itxn.algo.ts:185
    // const app1 = appTxn1.submit()
    itxn_begin
    // tests/approvals/itxn.algo.ts:183
    // extraProgramPages: 3,
    intc_3 // 3
    itxn_field ExtraProgramPages
    // tests/approvals/itxn.algo.ts:182
    // appArgs: [Bytes('1')],
    bytec_3 // "1"
    itxn_field ApplicationArgs
    // tests/approvals/itxn.algo.ts:181
    // onCompletion: OnCompleteAction.DeleteApplication,
    intc_2 // 5
    itxn_field OnCompletion
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    itxn_field ClearStateProgramPages
    bytec_0 // 0x098101
    itxn_field ApprovalProgramPages
    dup
    itxn_field ApprovalProgramPages
    dup
    itxn_field ApprovalProgramPages
    dup
    itxn_field ApprovalProgramPages
    // tests/approvals/itxn.algo.ts:178-184
    // const appTxn1 = itxn.applicationCall({
    //   approvalProgram: [approval1, approval2, approval2, approval2],
    //   clearStateProgram: APPROVE,
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appArgs: [Bytes('1')],
    //   extraProgramPages: 3,
    // })
    intc_1 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/approvals/itxn.algo.ts:185
    // const app1 = appTxn1.submit()
    itxn_submit
    itxn NumApprovalProgramPages
    itxn NumClearStateProgramPages
    itxn ExtraProgramPages
    // tests/approvals/itxn.algo.ts:186
    // assert(app1.extraProgramPages === 3, 'extra pages = 3')
    intc_3 // 3
    ==
    assert // extra pages = 3
    // tests/approvals/itxn.algo.ts:187
    // assert(app1.numApprovalProgramPages === 2, 'approval pages = 2')
    swap
    pushint 2 // 2
    ==
    assert // approval pages = 2
    // tests/approvals/itxn.algo.ts:188
    // assert(app1.approvalProgramPages(0) === approval1.concat(approval2).concat(approval2.slice(0, -3)), 'expected approval page 0')
    itxna ApprovalProgramPages 0
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    // tests/approvals/itxn.algo.ts:188
    // assert(app1.approvalProgramPages(0) === approval1.concat(approval2).concat(approval2.slice(0, -3)), 'expected approval page 0')
    dig 3
    concat
    dig 3
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    intc_3 // 3
    dig 2
    >=
    intc_3 // 3
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dup
    dig 2
    <
    dig 1
    dig 3
    uncover 2
    select
    dig 7
    uncover 3
    uncover 2
    substring3
    uncover 3
    swap
    concat
    uncover 3
    ==
    assert // expected approval page 0
    // tests/approvals/itxn.algo.ts:189
    // assert(app1.approvalProgramPages(1) === approval2.slice(-3).concat(approval2), 'expected approval page 1')
    itxna ApprovalProgramPages 1
    dig 4
    uncover 2
    uncover 3
    substring3
    uncover 3
    concat
    ==
    assert // expected approval page 1
    // tests/approvals/itxn.algo.ts:190
    // assert(app1.numClearStateProgramPages === 1, 'clear state pages = 1')
    pushint 1 // 1
    ==
    assert // clear state pages = 1
    // tests/approvals/itxn.algo.ts:191
    // assert(app1.clearStateProgramPages(0) === APPROVE, 'expected clear state page')
    itxna ClearStateProgramPages 0
    // tests/approvals/itxn.algo.ts:5
    // const APPROVE = Bytes.fromHex('098101')
    bytec_0 // 0x098101
    // tests/approvals/itxn.algo.ts:191
    // assert(app1.clearStateProgramPages(0) === APPROVE, 'expected clear state page')
    ==
    assert // expected clear state page
    retsub
