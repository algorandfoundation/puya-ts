main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#0: bool = tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.__puya_arc4_router__() -> bool:
    block@0: // L226
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L226
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "receivePay(uint64,pay,string)(uint64,uint64,string)" => block@2, * => block@3}
    block@2: // receivePay_route_L227
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/itxn.algo.ts::ItxnReceiver.receivePay[routing]()
        goto block@3
    block@3: // switch_case_next_L226
        goto block@5
    block@4: // __algots__.defaultCreate_L226
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        tests/approvals/itxn.algo.ts::ItxnReceiver.__algots__.defaultCreate()
        exit 1u
    block@5: // after_if_else_L226
        exit 0u

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.receivePay[routing]() -> void:
    block@0: // L227
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = decode_bytes<uint64>(as_Encoded(uint64)%0#0)
        let tmp%2#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%2#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%3#0: bytes = (txna ApplicationArgs 2)
        let length%0#0: uint64 = array_len(tmp%3#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%1#0: uint64 = (len tmp%3#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%3#0
        let tmp%4#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%0#0)
        let tmp%5#0: Encoded(uint64,uint64,(len+utf8[])) = tests/approvals/itxn.algo.ts::ItxnReceiver.receivePay(tmp%1#0, gtxn_idx%0#0, tmp%4#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.receivePay(a: uint64, b: uint64, c: string) -> Encoded(uint64,uint64,(len+utf8[])):
    block@0: // L227
        let tmp%0#0: uint64 = ((gtxns Amount) b#0)
        let tmp%1#0: Encoded(uint64,uint64,(len+utf8[])) = bytes_encode<(uint64,uint64,(len+utf8[]))>(a#0, tmp%0#0, c#0)
        return tmp%1#0

subroutine tests/approvals/itxn.algo.ts::ItxnReceiver.__algots__.defaultCreate() -> void:
    block@0: // L226
        return 