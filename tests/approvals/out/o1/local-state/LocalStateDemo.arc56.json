{
    "name": "LocalStateDemo",
    "structs": {
        "": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ],
        "object": [
            {
                "name": "localUint",
                "type": "uint64"
            },
            {
                "name": "localUint2",
                "type": "uint64"
            },
            {
                "name": "localBytes",
                "type": "byte[]"
            },
            {
                "name": "localBytes2",
                "type": "byte[]"
            },
            {
                "name": "localEncoded",
                "type": "uint64[10]"
            },
            {
                "name": "localTuple",
                "type": "(uint64,byte[])"
            },
            {
                "name": "localObject",
                "type": "(uint64,byte[])"
            },
            {
                "name": "localMutableObject",
                "type": "Data"
            }
        ],
        "Data": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "bool"
            },
            {
                "name": "d",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setState",
            "args": [
                {
                    "type": "(uint64,byte[])",
                    "struct": "object",
                    "name": "p"
                },
                {
                    "type": "uint64[10]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getState",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))",
                "struct": "object"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clearState",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 2,
                "bytes": 6
            }
        },
        "keys": {
            "global": {},
            "local": {
                "localUint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bDE="
                },
                "localUint2": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxVaW50Mg=="
                },
                "localBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YjE="
                },
                "localBytes2": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCeXRlczI="
                },
                "localEncoded": {
                    "keyType": "AVMString",
                    "valueType": "uint64[10]",
                    "key": "bG9jYWxFbmNvZGVk"
                },
                "localTuple": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])",
                    "key": "bG9jYWxUdXBsZQ=="
                },
                "localObject": {
                    "keyType": "AVMString",
                    "valueType": "",
                    "key": "bG9jYWxPYmplY3Q="
                },
                "localMutableObject": {
                    "keyType": "AVMString",
                    "valueType": "Data",
                    "key": "bG9jYWxNdXRhYmxlT2JqZWN0"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        140,
                        152,
                        173
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        192
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        206
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        143,
                        155,
                        176,
                        195
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        352,
                        358,
                        364,
                        370,
                        377,
                        384,
                        409,
                        434
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEIJgkCbDEKbG9jYWxVaW50MgJiMQtsb2NhbEJ5dGVzMgxsb2NhbEVuY29kZWQCAAoKbG9jYWxUdXBsZQtsb2NhbE9iamVjdBJsb2NhbE11dGFibGVPYmplY3QxG0EAYoIEBCkxTZUEqu/LQwQOosRpBBEXBTQ2GgCOBAA1ACMADgACIkMxGRREMRhEiAG+I0MxGRREMRhEiAC8gAQVH3x1TFCwI0MxGRREMRhENhoBNhoCiAAXI0MxGSMSRDEYRCNDMRlA/7wxGBREI0OKAgCL/iJbi/4kWYv+FYv+TgJSVwIAMQAoSwNmMQApSwNmMQAqSwJmMQArSwJmMQAnBIv/ZjEATwIWSwIVFlcGAk8DUEsBJwVQSwFQTwMnBksCZjEAJwdPAmZJFYENCE8CgAIADVCAAYBQTwKABwAFaGVsbG9QTwIWVwYCTwJMUExQMQAnCE8CZokxACIoY0QxACIpY0QxACIqY0QxACIrY0QxACInBGNEMQAiJwZjREkiW0sBJFlLAhVPA04CUlcCADEAIicHY0RJIltLASRZSwIVTwNOAlJXAgAxACInCGNETwkWTwkWUEsIFRZXBgJPCVBJFYFqCE8CgAIAalBLCRUWVwYCTwpQTwNLAVBMFUsDCE8DFlcGAk8DTFBPCFBPBxZLBxUWVwYCTwhQTCcFUExQTwNLAVBMFUsDCE8DFlcGAk8DTFBPBRZLBRUWVwYCTwZQTCcFUExQTwNLAVBMFUsDCE8DFlcGAk8DTFBPAk8DUE8CFlcGAk8CTFBMUIkxAChoMQApaDEAKmgxACtoMQAnBGgxACcGaDEAJwdoMQAnCGiJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}