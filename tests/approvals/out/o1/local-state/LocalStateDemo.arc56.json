{
    "name": "LocalStateDemo",
    "structs": {
        "object": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            }
        ],
        "getStateResult": [
            {
                "name": "localUint",
                "type": "uint64"
            },
            {
                "name": "localUint2",
                "type": "uint64"
            },
            {
                "name": "localBytes",
                "type": "byte[]"
            },
            {
                "name": "localBytes2",
                "type": "byte[]"
            },
            {
                "name": "localEncoded",
                "type": "uint64[10]"
            },
            {
                "name": "localTuple",
                "type": "(uint64,byte[])"
            },
            {
                "name": "localObject",
                "type": "object"
            }
        ]
    },
    "methods": [
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setState",
            "args": [
                {
                    "type": "(uint64,byte[])",
                    "struct": "object",
                    "name": "p"
                },
                {
                    "type": "uint64[10]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getState",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]))",
                "struct": "getStateResult"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clearState",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 2,
                "bytes": 5
            }
        },
        "keys": {
            "global": {},
            "local": {
                "localUint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bDE="
                },
                "localUint2": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxVaW50Mg=="
                },
                "localBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YjE="
                },
                "localBytes2": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCeXRlczI="
                },
                "localEncoded": {
                    "keyType": "AVMString",
                    "valueType": "uint64[10]",
                    "key": "bG9jYWxFbmNvZGVk"
                },
                "localTuple": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])",
                    "key": "bG9jYWxUdXBsZQ=="
                },
                "localObject": {
                    "keyType": "AVMString",
                    "valueType": "object",
                    "key": "bG9jYWxPYmplY3Q="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        121,
                        133,
                        280
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        317
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        331
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        124,
                        136,
                        283,
                        320
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        408,
                        414,
                        420,
                        427,
                        434,
                        441,
                        466
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEIJggCAAoCbDEKbG9jYWxVaW50MgJiMQtsb2NhbEJ5dGVzMgxsb2NhbEVuY29kZWQKbG9jYWxUdXBsZQtsb2NhbE9iamVjdDEbQQDyggQEKTFNlQSq78tDBKiKBtkEERcFNDYaAI4EAMUAoQAOAAIiQzEZFEQxGESIAWYjQzEZFEQxGESIAQdPCBZPCBZLCBUWVwYCTwlQSwgVFlcGAk8JUE8HFksHFRZXBgJPCFBMKFBMUE8GFksGFRZXBgJPB1BMKFBMUE8FTwVQgAIAaFBLBBWBaAhJFlcGAk8CTFBLBBVPAghMTwZQSwEWVwYCUEsDFU8CCBZXBgJQTwRQTwNQTwJQTFCABBUffHVMULAjQzEZFEQxGEQ2GgFJIltLASRZSwIVTwNOAlJXAgA2GgKIABcjQzEZIxJEMRhEI0MxGUD/LDEYFEQjQ4oDADEAKYv9ZjEAKov9ZjEAK4v+ZjEAJwSL/mYxACcFi/9mMQCL/RaL/hUWVwYCi/5QTChQTFBMJwZLAmYxACcHTwJmiTEAIiljRDEAIipjRDEAIitjRDEAIicEY0QxACInBWNEMQAiJwZjREkiW0sBJFlLAhVPA04CUlcCADEAIicHY0RJIltLASRZSwIVTwNOAlJXAgCJMQApaDEAKmgxACtoMQAnBGgxACcFaDEAJwZoMQAnB2iJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 8,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}