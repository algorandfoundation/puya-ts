main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@14
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, * => block@4}
    block@3: // optIn_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be OptIn && can only call when not creating
        exit 1u
    block@4: // switch_case_next_L8
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion must be NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0)
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        switch tmp%12#0 {method "setState((uint64,byte[]),uint64[10])void" => block@6, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))" => block@7, method "clearState()void" => block@8, method "writeDynamicLocalState(string,string)string" => block@9, method "readDynamicLocalState(string)string" => block@10, * => block@13}
    block@6: // setState_route_L21
        tests/approvals/local-state.algo.ts::LocalStateDemo.setState[routing]()
        goto block@13
    block@7: // getState_route_L32
        tests/approvals/local-state.algo.ts::LocalStateDemo.getState[routing]()
        goto block@13
    block@8: // clearState_route_L45
        tests/approvals/local-state.algo.ts::LocalStateDemo.clearState[routing]()
        goto block@13
    block@9: // writeDynamicLocalState_route_L63
        tests/approvals/local-state.algo.ts::LocalStateDemo.writeDynamicLocalState[routing]()
        goto block@13
    block@10: // readDynamicLocalState_route_L82
        tests/approvals/local-state.algo.ts::LocalStateDemo.readDynamicLocalState[routing]()
        goto block@13
    block@13: // after_if_else_L8
        fail
    block@14: // __algots__.defaultCreate_L8
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (! tmp%15#0)
        let tmp%17#0: bool = (&& tmp%14#0 tmp%16#0)
        (assert tmp%17#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.setState[routing]() -> void:
    block@0: // L21
        let p#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 1)
        let tuple_len%0#0: uint64 = (len p#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]))
        let substring3%0#0: bytes = (substring3 p#0 extract_uint16%0#0 tuple_len%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 substring3%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%1#0: uint64 = (+ length%0#0 12u)
        let eq%1#0: bool = (== tuple_len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for ObjectEFF43F36
        let c#0: Encoded(uint64[10]) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len c#0)
        let eq%2#0: bool = (== len%1#0 80u)
        (assert eq%2#0) // invalid number of bytes for arc4.static_array<arc4.uint64, 10>
        let aggregate%extract%0#0: bytes = (extract3 p#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let a#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 p#0 8u)
        let aggregate%len%0#0: uint64 = (len p#0)
        let aggregate%substring3%0#0: bytes = (substring3 p#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%1#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let b#0: bytes = ((extract 2 0) tuple_item%1#0)
        let tmp%0#1: account = (txn Sender)
        (app_local_put tmp%0#1 "l1" a#0)
        let tmp%1#1: account = (txn Sender)
        (app_local_put tmp%1#1 "localUint2" a#0)
        let tmp%2#0: account = (txn Sender)
        (app_local_put tmp%2#0 "b1" b#0)
        let tmp%3#0: account = (txn Sender)
        (app_local_put tmp%3#0 "localBytes2" b#0)
        let tmp%4#0: account = (txn Sender)
        (app_local_put tmp%4#0 "localEncoded" c#0)
        let tmp%5#0: account = (txn Sender)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len b#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 10u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%0#0
        (app_local_put tmp%5#0 "localTuple" encoded_for_storage%0#0)
        let tmp%6#0: account = (txn Sender)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%1#0: uint64 = (len b#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 10u aggregate%data_length%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%1#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%1#0
        let encoded_for_storage%1#0: Encoded(uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,(len+uint8[]))%1#0
        (app_local_put tmp%6#0 "localObject" encoded_for_storage%1#0)
        let aggregate%length%2#0: uint64 = (len "hello")
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%length%3#0: uint64 = (len b#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let aggregate%as_bytes%6#0: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 13u aggregate%data_length%2#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%encoded_bool%0#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len tmp%7#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%7#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),bool1,(len+utf8[]))%0#0: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = aggregate%concat%3#0
        let tmp%8#0: Encoded(uint64,(len+uint8[]),bool1,(len+utf8[])) = aggregate%as_Encoded(uint64,(len+uint8[]),bool1,(len+utf8[]))%0#0
        let tmp%9#0: account = (txn Sender)
        (app_local_put tmp%9#0 "localMutableObject" tmp%8#0)
        exit 1u

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.getState[routing]() -> void:
    block@0: // L32
        let tmp%0#1: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#1 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#1: account = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#1 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#0 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#0: account = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#0 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#0: account = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#0 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let tmp%5#0: account = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#0 0u "localTuple")
        (assert maybe_exists%5#0) // check LocalState exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%5#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%5#0 8u)
        let aggregate%len%0#0: uint64 = (len maybe_value%5#0)
        let aggregate%substring3%0#0: bytes = (substring3 maybe_value%5#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%item1%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let (tmp%6#0: uint64, tmp%7#0: bytes) = (aggregate%item0%0#0, aggregate%item1%0#0)
        let tmp%8#0: account = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%8#0 0u "localObject")
        (assert maybe_exists%6#0) // check LocalState exists
        let aggregate%extract%1#0: bytes = (extract3 maybe_value%6#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%1#0)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let aggregate%len%1#0: uint64 = (len maybe_value%6#0)
        let aggregate%substring3%1#0: bytes = (substring3 maybe_value%6#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let aggregate%item1%1#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let (tmp%9#0: uint64, tmp%10#0: bytes) = (aggregate%item0%1#0, aggregate%item1%1#0)
        let tmp%11#0: account = (txn Sender)
        let (maybe_value%7#0: bytes, maybe_exists%7#0: bool) = (app_local_get_ex tmp%11#0 0u "localMutableObject")
        (assert maybe_exists%7#0) // check LocalState exists
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob maybe_value%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob maybe_value%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%0#0: uint64 = (len maybe_value%2#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 maybe_value%2#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 106u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 106u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len maybe_value%3#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 maybe_value%3#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 maybe_value%4#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%5#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%length%2#0: uint64 = (len tmp%7#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%7#0)
        let aggregate%as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 10u aggregate%data_length%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(len+uint8[])%2#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%0#0
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len aggregate%as_Encoded(uint64,(len+uint8[]))%0#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%3#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%length%3#0: uint64 = (len tmp%10#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 tmp%10#0)
        let aggregate%as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = aggregate%encoded_value%3#0
        let aggregate%as_bytes%8#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%3#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 10u aggregate%data_length%4#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(len+uint8[])%3#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%1#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%1#0
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%7#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len aggregate%as_Encoded(uint64,(len+uint8[]))%1#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%3#0 aggregate%data_length%5#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%5#0)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len maybe_value%7#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ aggregate%current_tail_offset%5#0 aggregate%data_length%6#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 aggregate%as_Encoded(uint64,(len+uint8[]))%0#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 aggregate%as_Encoded(uint64,(len+uint8[]))%1#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%concat%5#0 maybe_value%7#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[])))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = aggregate%concat%6#0
        let tmp%12#0: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[]))) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[])),(uint64,(len+uint8[]),bool1,(len+utf8[])))%0#0
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%1#0)
        exit 1u

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.clearState[routing]() -> void:
    block@0: // L45
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 "l1")
        let tmp%1#0: account = (txn Sender)
        (app_local_del tmp%1#0 "localUint2")
        let tmp%2#0: account = (txn Sender)
        (app_local_del tmp%2#0 "b1")
        let tmp%3#0: account = (txn Sender)
        (app_local_del tmp%3#0 "localBytes2")
        let tmp%4#0: account = (txn Sender)
        (app_local_del tmp%4#0 "localEncoded")
        let tmp%5#0: account = (txn Sender)
        (app_local_del tmp%5#0 "localTuple")
        let tmp%6#0: account = (txn Sender)
        (app_local_del tmp%6#0 "localObject")
        let tmp%7#0: account = (txn Sender)
        (app_local_del tmp%7#0 "localMutableObject")
        exit 1u

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.writeDynamicLocalState[routing]() -> void:
    block@0: // L63
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#0: string = ((extract 2 0) tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let value#0: string = ((extract 2 0) tmp%2#0)
        let sender#0: account = (txn Sender)
        let tmp%1#1: uint64 = (global CurrentApplicationID)
        let tmp%2#1: bool = (app_opted_in sender#0 tmp%1#1)
        (assert tmp%2#1) // Account must opt in to contract first
        (app_local_put sender#0 key#0 value#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex sender#0 0u key#0)
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%3#1: bool = (== maybe_value%0#0 value#0)
        (assert tmp%3#1)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex sender#0 0u key#0)
        (assert maybe_exists%1#0) // check LocalState exists
        let aggregate%length%0#0: uint64 = (len maybe_value%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 maybe_value%1#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.readDynamicLocalState[routing]() -> void:
    block@0: // L82
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#0: string = ((extract 2 0) tmp%0#0)
        let sender#0: account = (txn Sender)
        let tmp%1#1: uint64 = (global CurrentApplicationID)
        let tmp%2#1: bool = (app_opted_in sender#0 tmp%1#1)
        (assert tmp%2#1) // Account must opt in to contract first
        let (_%0#0: string, maybe_exists%0#0: bool) = (app_local_get_ex sender#0 0u key#0)
        (assert maybe_exists%0#0) // Key not found
        let (maybe_value%0#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex sender#0 0u key#0)
        (assert maybe_exists%1#0) // check LocalState exists
        let aggregate%length%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 maybe_value%0#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u