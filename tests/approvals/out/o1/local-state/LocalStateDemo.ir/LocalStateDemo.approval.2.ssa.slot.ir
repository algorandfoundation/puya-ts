main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L7
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "optIn()void" => block@3, method "setState((uint64,byte[]),uint64[10])void" => block@4, method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]))" => block@5, method "clearState()void" => block@6, * => block@13}
    block@3: // optIn_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // setState_route_L19
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = (txna ApplicationArgs 1)
        let array%item0%0#1: uint64 = (extract_uint64 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 0u)
        let array%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 8u)
        let array%len%0#1: uint64 = (len reinterpret_Encoded(uint64,(len+uint8[]))%0#0)
        let array%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+uint8[]))%0#0 array%extract_uint16%0#1 array%len%0#1)
        let array%item1%0#1: bytes = ((extract 2 0) array%substring3%0#1)
        let reinterpret_Encoded(uint64[10])%0#0: Encoded(uint64[10]) = (txna ApplicationArgs 2)
        tests/approvals/local-state.algo.ts::LocalStateDemo.setState(array%item0%0#1, array%item1%0#1, reinterpret_Encoded(uint64[10])%0#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // getState_route_L29
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let (tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: bytes, tmp%20#0: bytes, tmp%21#0: Encoded(uint64[10]), tmp%22#0: Encoded(uint64,(len+uint8[])), tmp%23#0: uint64, tmp%24#0: bytes) = tests/approvals/local-state.algo.ts::LocalStateDemo.getState()
        let array%val_as_bytes%0#1: bytes[8] = (itob tmp%17#0)
        let array%val_as_bytes%1#1: bytes[8] = (itob tmp%18#0)
        let array%encoded%1#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%0#1 array%val_as_bytes%1#1)
        let array%length%0#1: uint64 = (len tmp%19#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 tmp%19#0)
        let array%data_length%0#1: uint64 = (len array%encoded_value%0#1)
        let array%current_tail_offset%0#1: uint64 = (+ 104u array%data_length%0#1)
        let array%encoded%2#1: Encoded(uint64,uint64,(len+uint8[])) = (concat array%encoded%1#1 0x0068)
        let array%length%1#1: uint64 = (len tmp%20#0)
        let array%as_bytes%2#1: bytes[8] = (itob array%length%1#1)
        let array%length_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%2#1)
        let array%encoded_value%1#1: bytes = (concat array%length_uint16%1#1 tmp%20#0)
        let array%tail%1#1: bytes = (concat array%encoded_value%0#1 array%encoded_value%1#1)
        let array%data_length%1#1: uint64 = (len array%encoded_value%1#1)
        let array%current_tail_offset%1#1: uint64 = (+ array%current_tail_offset%0#1 array%data_length%1#1)
        let array%as_bytes%3#1: bytes[8] = (itob array%current_tail_offset%0#1)
        let array%offset_as_uint16%1#1: bytes = ((extract 6 2) array%as_bytes%3#1)
        let array%encoded%3#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[])) = (concat array%encoded%2#1 array%offset_as_uint16%1#1)
        let array%encoded%4#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10]) = (concat array%encoded%3#1 tmp%21#0)
        let array%tail%2#1: bytes = (concat array%tail%1#1 tmp%22#0)
        let array%data_length%2#1: uint64 = (len tmp%22#0)
        let array%current_tail_offset%2#1: uint64 = (+ array%current_tail_offset%1#1 array%data_length%2#1)
        let array%as_bytes%4#1: bytes[8] = (itob array%current_tail_offset%1#1)
        let array%offset_as_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%4#1)
        let array%encoded%5#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[]))) = (concat array%encoded%4#1 array%offset_as_uint16%2#1)
        let array%val_as_bytes%2#1: bytes[8] = (itob tmp%23#0)
        let array%length%2#1: uint64 = (len tmp%24#0)
        let array%as_bytes%5#1: bytes[8] = (itob array%length%2#1)
        let array%length_uint16%2#1: bytes = ((extract 6 2) array%as_bytes%5#1)
        let array%encoded_value%2#1: bytes = (concat array%length_uint16%2#1 tmp%24#0)
        let array%encoded%7#1: Encoded(uint64,(len+uint8[])) = (concat array%val_as_bytes%2#1 0x000a)
        let array%encoded%8#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%7#1 array%encoded_value%2#1)
        let array%tail%4#1: bytes = (concat array%tail%2#1 array%encoded%8#1)
        let array%as_bytes%7#1: bytes[8] = (itob array%current_tail_offset%2#1)
        let array%offset_as_uint16%4#1: bytes = ((extract 6 2) array%as_bytes%7#1)
        let array%encoded%9#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[]))) = (concat array%encoded%5#1 array%offset_as_uint16%4#1)
        let array%encoded%10#1: Encoded(uint64,uint64,(len+uint8[]),(len+uint8[]),uint64[10],(uint64,(len+uint8[])),(uint64,(len+uint8[]))) = (concat array%encoded%9#1 array%tail%4#1)
        let tmp%26#0: bytes = (concat 0x151f7c75 array%encoded%10#1)
        (log tmp%26#0)
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // clearState_route_L41
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        tests/approvals/local-state.algo.ts::LocalStateDemo.clearState()
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L7
        let tmp%31#0: uint64 = (txn OnCompletion)
        goto tmp%31#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L7
        let tmp%32#0: uint64 = (txn ApplicationID)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // can only call when creating
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L7
        let tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#3 <- block@6, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p.a: uint64, p.b: bytes, c: Encoded(uint64[10])) -> void:
    block@0: // L19
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 "l1" p.a#0)
        let tmp%1#0: account = (txn Sender)
        (app_local_put tmp%1#0 "localUint2" p.a#0)
        let tmp%2#0: account = (txn Sender)
        (app_local_put tmp%2#0 "b1" p.b#0)
        let tmp%3#0: account = (txn Sender)
        (app_local_put tmp%3#0 "localBytes2" p.b#0)
        let tmp%4#0: account = (txn Sender)
        (app_local_put tmp%4#0 "localEncoded" c#0)
        let array%val_as_bytes%0#1: bytes[8] = (itob p.a#0)
        let array%length%0#1: uint64 = (len p.b#0)
        let array%as_bytes%0#1: bytes[8] = (itob array%length%0#1)
        let array%length_uint16%0#1: bytes = ((extract 6 2) array%as_bytes%0#1)
        let array%encoded_value%0#1: bytes = (concat array%length_uint16%0#1 p.b#0)
        let array%encoded%1#1: Encoded(uint64,(len+uint8[])) = (concat array%val_as_bytes%0#1 0x000a)
        let array%encoded%2#1: Encoded(uint64,(len+uint8[])) = (concat array%encoded%1#1 array%encoded_value%0#1)
        let tmp%6#0: account = (txn Sender)
        (app_local_put tmp%6#0 "localTuple" array%encoded%2#1)
        let tmp%7#0: account = (txn Sender)
        (app_local_put tmp%7#0 "localObject" array%encoded%2#1)
        return 

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> <uint64, uint64, bytes, bytes, Encoded(uint64[10]), Encoded(uint64,(len+uint8[])), uint64, bytes>:
    block@0: // L29
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "l1")
        (assert maybe_exists%0#0) // check LocalState exists
        let tmp%1#0: account = (txn Sender)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#0 0u "localUint2")
        (assert maybe_exists%1#0) // check LocalState exists
        let tmp%2#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#0 0u "b1")
        (assert maybe_exists%2#0) // check LocalState exists
        let tmp%3#0: account = (txn Sender)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#0 0u "localBytes2")
        (assert maybe_exists%3#0) // check LocalState exists
        let tmp%4#0: account = (txn Sender)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#0 0u "localEncoded")
        (assert maybe_exists%4#0) // check LocalState exists
        let tmp%5#0: account = (txn Sender)
        let (maybe_value%5#0: bytes, maybe_exists%5#0: bool) = (app_local_get_ex tmp%5#0 0u "localTuple")
        (assert maybe_exists%5#0) // check LocalState exists
        let tmp%6#0: account = (txn Sender)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (app_local_get_ex tmp%6#0 0u "localObject")
        (assert maybe_exists%6#0) // check LocalState exists
        let array%item0%0#1: uint64 = (extract_uint64 maybe_value%6#0 0u)
        let array%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%6#0 8u)
        let array%len%0#1: uint64 = (len maybe_value%6#0)
        let array%substring3%0#1: bytes = (substring3 maybe_value%6#0 array%extract_uint16%0#1 array%len%0#1)
        let array%item1%0#1: bytes = ((extract 2 0) array%substring3%0#1)
        return maybe_value%0#0 maybe_value%1#0 maybe_value%2#0 maybe_value%3#0 maybe_value%4#0 maybe_value%5#0 array%item0%0#1 array%item1%0#1

subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
    block@0: // L41
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 "l1")
        let tmp%1#0: account = (txn Sender)
        (app_local_del tmp%1#0 "localUint2")
        let tmp%2#0: account = (txn Sender)
        (app_local_del tmp%2#0 "b1")
        let tmp%3#0: account = (txn Sender)
        (app_local_del tmp%3#0 "localBytes2")
        let tmp%4#0: account = (txn Sender)
        (app_local_del tmp%4#0 "localEncoded")
        let tmp%5#0: account = (txn Sender)
        (app_local_del tmp%5#0 "localTuple")
        let tmp%6#0: account = (txn Sender)
        (app_local_del tmp%6#0 "localObject")
        return 