#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8
    bytecblock 0x151f7c75 "l1" "localUint2" "b1" "localBytes2" "localEncoded" 0x000a "localTuple" "localObject" "localMutableObject"
    // tests/approvals/local-state.algo.ts:8
    // export class LocalStateDemo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x29314d95 0xaaefcb43 0x0ea2c469 0x11170534 0x2793c249 0x213631f5 // method "optIn()void", method "setState((uint64,byte[]),uint64[10])void", method "getState()(uint64,uint64,byte[],byte[],uint64[10],(uint64,byte[]),(uint64,byte[]),(uint64,byte[],bool,string))", method "clearState()void", method "writeDynamicLocalState(string,string)string", method "readDynamicLocalState(string)string"
    txna ApplicationArgs 0
    match main_optIn_route@3 main_setState_route@4 main_getState_route@5 main_clearState_route@6 main_writeDynamicLocalState_route@7 main_readDynamicLocalState_route@8

main_after_if_else@15:
    // tests/approvals/local-state.algo.ts:8
    // export class LocalStateDemo extends Contract {
    intc_0 // 0
    return

main_readDynamicLocalState_route@8:
    // tests/approvals/local-state.algo.ts:82
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:8
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/approvals/local-state.algo.ts:82
    // @arc4.abimethod()
    callsub readDynamicLocalState
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_writeDynamicLocalState_route@7:
    // tests/approvals/local-state.algo.ts:63
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:8
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/approvals/local-state.algo.ts:63
    // @arc4.abimethod()
    callsub writeDynamicLocalState
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_clearState_route@6:
    // tests/approvals/local-state.algo.ts:45
    // public clearState() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub clearState
    intc_1 // 1
    return

main_getState_route@5:
    // tests/approvals/local-state.algo.ts:32
    // public getState() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getState
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_setState_route@4:
    // tests/approvals/local-state.algo.ts:21
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:8
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // tests/approvals/local-state.algo.ts:21
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    callsub setState
    intc_1 // 1
    return

main_optIn_route@3:
    // tests/approvals/local-state.algo.ts:18
    // @abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_bare_routing@11:
    // tests/approvals/local-state.algo.ts:8
    // export class LocalStateDemo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p: bytes, c: bytes) -> void:
setState:
    // tests/approvals/local-state.algo.ts:21
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    proto 2 0
    frame_dig -2
    intc_0 // 0
    extract_uint64
    frame_dig -2
    intc_2 // 8
    extract_uint16
    frame_dig -2
    len
    frame_dig -2
    cover 2
    substring3
    extract 2 0
    // tests/approvals/local-state.algo.ts:22
    // this.localUint(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_1 // "l1"
    // tests/approvals/local-state.algo.ts:22
    // this.localUint(Txn.sender).value = a
    dig 3
    app_local_put
    // tests/approvals/local-state.algo.ts:23
    // this.localUint2(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localUint2 = LocalState<uint64>()
    bytec_2 // "localUint2"
    // tests/approvals/local-state.algo.ts:23
    // this.localUint2(Txn.sender).value = a
    dig 3
    app_local_put
    // tests/approvals/local-state.algo.ts:24
    // this.localBytes(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_3 // "b1"
    // tests/approvals/local-state.algo.ts:24
    // this.localBytes(Txn.sender).value = b
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:25
    // this.localBytes2(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localBytes2 = LocalState<bytes>()
    bytec 4 // "localBytes2"
    // tests/approvals/local-state.algo.ts:25
    // this.localBytes2(Txn.sender).value = b
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:26
    // this.localEncoded(Txn.sender).value = clone(c)
    txn Sender
    // tests/approvals/local-state.algo.ts:13
    // localEncoded = LocalState<SampleArray>()
    bytec 5 // "localEncoded"
    // tests/approvals/local-state.algo.ts:26
    // this.localEncoded(Txn.sender).value = clone(c)
    frame_dig -1
    app_local_put
    // tests/approvals/local-state.algo.ts:27
    // this.localTuple(Txn.sender).value = [a, b]
    txn Sender
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 1
    bytec 6 // 0x000a
    concat
    dig 1
    concat
    uncover 3
    // tests/approvals/local-state.algo.ts:14
    // localTuple = LocalState<readonly [uint64, bytes]>()
    bytec 7 // "localTuple"
    // tests/approvals/local-state.algo.ts:27
    // this.localTuple(Txn.sender).value = [a, b]
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:28
    // this.localObject(Txn.sender).value = { a, b }
    txn Sender
    // tests/approvals/local-state.algo.ts:15
    // localObject = LocalState<Readonly<{ a: uint64; b: bytes }>>()
    bytec 8 // "localObject"
    // tests/approvals/local-state.algo.ts:28
    // this.localObject(Txn.sender).value = { a, b }
    uncover 2
    app_local_put
    // tests/approvals/local-state.algo.ts:29
    // this.localMutableObject(Txn.sender).value = { a, b, c: true, d: new arc4.Str('hello') }
    dup
    len
    pushint 13 // 13
    +
    uncover 2
    pushbytes 0x000d80
    concat
    swap
    itob
    extract 6 2
    concat
    swap
    concat
    pushbytes 0x000568656c6c6f
    concat
    txn Sender
    // tests/approvals/local-state.algo.ts:16
    // localMutableObject = LocalState<Data>()
    bytec 9 // "localMutableObject"
    // tests/approvals/local-state.algo.ts:29
    // this.localMutableObject(Txn.sender).value = { a, b, c: true, d: new arc4.Str('hello') }
    uncover 2
    app_local_put
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> bytes:
getState:
    // tests/approvals/local-state.algo.ts:34
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_1 // "l1"
    // tests/approvals/local-state.algo.ts:34
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:35
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localUint2 = LocalState<uint64>()
    bytec_2 // "localUint2"
    // tests/approvals/local-state.algo.ts:35
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:36
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_3 // "b1"
    // tests/approvals/local-state.algo.ts:36
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:37
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localBytes2 = LocalState<bytes>()
    bytec 4 // "localBytes2"
    // tests/approvals/local-state.algo.ts:37
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:38
    // localEncoded: clone(this.localEncoded(Txn.sender).value),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:13
    // localEncoded = LocalState<SampleArray>()
    bytec 5 // "localEncoded"
    // tests/approvals/local-state.algo.ts:38
    // localEncoded: clone(this.localEncoded(Txn.sender).value),
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:39
    // localTuple: this.localTuple(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:14
    // localTuple = LocalState<readonly [uint64, bytes]>()
    bytec 7 // "localTuple"
    // tests/approvals/local-state.algo.ts:39
    // localTuple: this.localTuple(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    dup
    extract 0 8
    dig 1
    intc_2 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    // tests/approvals/local-state.algo.ts:40
    // localObject: this.localObject(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:15
    // localObject = LocalState<Readonly<{ a: uint64; b: bytes }>>()
    bytec 8 // "localObject"
    // tests/approvals/local-state.algo.ts:40
    // localObject: this.localObject(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    dup
    extract 0 8
    dig 1
    intc_2 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    // tests/approvals/local-state.algo.ts:41
    // localMutableObject: clone(this.localMutableObject(Txn.sender).value),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:16
    // localMutableObject = LocalState<Data>()
    bytec 9 // "localMutableObject"
    // tests/approvals/local-state.algo.ts:41
    // localMutableObject: clone(this.localMutableObject(Txn.sender).value),
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:33-42
    // return {
    //   localUint: this.localUint(Txn.sender).value,
    //   localUint2: this.localUint2(Txn.sender).value,
    //   localBytes: this.localBytes(Txn.sender).value,
    //   localBytes2: this.localBytes2(Txn.sender).value,
    //   localEncoded: clone(this.localEncoded(Txn.sender).value),
    //   localTuple: this.localTuple(Txn.sender).value,
    //   localObject: this.localObject(Txn.sender).value,
    //   localMutableObject: clone(this.localMutableObject(Txn.sender).value),
    // }
    uncover 9
    itob
    uncover 9
    itob
    concat
    dig 8
    len
    itob
    extract 6 2
    uncover 9
    concat
    swap
    pushbytes 0x006a
    concat
    dig 1
    len
    pushint 106 // 106
    +
    dig 9
    len
    itob
    extract 6 2
    uncover 10
    concat
    dig 1
    itob
    extract 6 2
    uncover 3
    swap
    concat
    dig 1
    len
    uncover 3
    +
    swap
    uncover 9
    concat
    dig 7
    len
    itob
    extract 6 2
    uncover 8
    concat
    uncover 8
    bytec 6 // 0x000a
    concat
    swap
    concat
    dig 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    dig 1
    len
    uncover 3
    +
    dig 6
    len
    itob
    extract 6 2
    uncover 7
    concat
    uncover 7
    bytec 6 // 0x000a
    concat
    swap
    concat
    dig 1
    itob
    extract 6 2
    uncover 3
    swap
    concat
    dig 1
    len
    uncover 3
    +
    itob
    extract 6 2
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
clearState:
    // tests/approvals/local-state.algo.ts:46
    // this.localUint(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_1 // "l1"
    // tests/approvals/local-state.algo.ts:46
    // this.localUint(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:47
    // this.localUint2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localUint2 = LocalState<uint64>()
    bytec_2 // "localUint2"
    // tests/approvals/local-state.algo.ts:47
    // this.localUint2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:48
    // this.localBytes(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_3 // "b1"
    // tests/approvals/local-state.algo.ts:48
    // this.localBytes(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:49
    // this.localBytes2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localBytes2 = LocalState<bytes>()
    bytec 4 // "localBytes2"
    // tests/approvals/local-state.algo.ts:49
    // this.localBytes2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:50
    // this.localEncoded(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:13
    // localEncoded = LocalState<SampleArray>()
    bytec 5 // "localEncoded"
    // tests/approvals/local-state.algo.ts:50
    // this.localEncoded(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:51
    // this.localTuple(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:14
    // localTuple = LocalState<readonly [uint64, bytes]>()
    bytec 7 // "localTuple"
    // tests/approvals/local-state.algo.ts:51
    // this.localTuple(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:52
    // this.localObject(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:15
    // localObject = LocalState<Readonly<{ a: uint64; b: bytes }>>()
    bytec 8 // "localObject"
    // tests/approvals/local-state.algo.ts:52
    // this.localObject(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:53
    // this.localMutableObject(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:16
    // localMutableObject = LocalState<Data>()
    bytec 9 // "localMutableObject"
    // tests/approvals/local-state.algo.ts:53
    // this.localMutableObject(Txn.sender).delete()
    app_local_del
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.writeDynamicLocalState(key: bytes, value: bytes) -> bytes:
writeDynamicLocalState:
    // tests/approvals/local-state.algo.ts:63-64
    // @arc4.abimethod()
    // public writeDynamicLocalState(key: string, value: string): string {
    proto 2 1
    // tests/approvals/local-state.algo.ts:65
    // const sender = Txn.sender
    txn Sender
    // tests/approvals/local-state.algo.ts:66
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // tests/approvals/local-state.algo.ts:70
    // localDynamicAccess(sender).value = value
    frame_dig -2
    frame_dig -1
    app_local_put
    // tests/approvals/local-state.algo.ts:74
    // return localDynamicAccess(sender).value
    frame_dig -1
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.readDynamicLocalState(key: bytes) -> bytes:
readDynamicLocalState:
    // tests/approvals/local-state.algo.ts:82-83
    // @arc4.abimethod()
    // public readDynamicLocalState(key: string): string {
    proto 1 1
    // tests/approvals/local-state.algo.ts:84
    // const sender = Txn.sender
    txn Sender
    // tests/approvals/local-state.algo.ts:86
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // tests/approvals/local-state.algo.ts:90
    // assert(localDynamicAccess(sender).hasValue, 'Key not found')
    intc_0 // 0
    frame_dig -1
    app_local_get_ex
    assert // Key not found
    // tests/approvals/local-state.algo.ts:92
    // return localDynamicAccess(sender).value
    retsub
