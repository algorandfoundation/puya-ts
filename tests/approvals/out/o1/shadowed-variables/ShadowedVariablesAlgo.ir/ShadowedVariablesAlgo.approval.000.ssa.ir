main tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.approvalProgram:
    block@0: // L7
        let awst_tmp%0#0: Encoded((len+uint8[]),uint64,bool1) = tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues()
        let tuple_item%0#0: Encoded(len+uint8[]) = extract_value(awst_tmp%0#0, 0)
        let values%0#0: bytes = decode_bytes<bytes>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tuple_item%2#0: bool = extract_value(awst_tmp%0#0, 2)
        let values%2#0: bool = decode_bytes<bool>(tuple_item%2#0)
        let b#0: bytes = values%0#0
        let u#0: uint64 = values%1#0
        let f#0: bool = values%2#0
        let tmp%0#0: bool = (== "123" b#0)
        (assert tmp%0#0) // a should be module const (bytes)
        let a#0: uint64 = u#0
        let tmp%1#0: bool = (== a#0 123u)
        (assert tmp%1#0) // a should be local const (uint)
        let a₁#0: bool = f#0
        let tmp%2#0: bool = (! a₁#0)
        (assert tmp%2#0) // a should be local let (bool)
        let tmp%3#0: bool = (! a₁#0)
        let a₁#1: bool = tmp%3#0
        (assert a₁#1) // a should be modified local let (bool)
        (assert a₁#1) // a should still be modified local let (bool)
        let tmp%4#0: bool = (== a#0 123u)
        (assert tmp%4#0) // a should be local const (uint)
        let tmp%5#0: bool = (== "123" "123")
        (assert tmp%5#0) // a should be module const (bytes)
        return 1u

subroutine tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues() -> Encoded((len+uint8[]),uint64,bool1):
    block@0: // L28
        let tmp%0#0: Encoded((len+uint8[]),uint64,bool1) = bytes_encode<((len+uint8[]),uint64,bool1)>("123", 123u, 0u)
        return tmp%0#0