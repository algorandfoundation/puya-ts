main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L5
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test()bool" => block@4, method "someMethod()uint64" => block@5, method "test2()void" => block@6, * => block@9}
    block@4: // test_route_L6
        tests/approvals/arc4-method-selector.algo.ts::ContractOne.test[routing]()
        goto block@9
    block@5: // someMethod_route_L9
        tests/approvals/arc4-method-selector.algo.ts::ContractOne.someMethod[routing]()
        goto block@9
    block@6: // test2_route_L13
        (assert 0u)
        exit 1u
    block@9: // after_if_else_L5
        fail
    block@10: // __algots__.defaultCreate_L5
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractOne.test[routing]() -> void:
    block@0: // L6
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractOne.someMethod[routing]() -> void:
    block@0: // L9
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u