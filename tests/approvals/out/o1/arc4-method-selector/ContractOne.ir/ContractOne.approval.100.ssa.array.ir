main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test()bool" => block@3, method "someMethod()uint64" => block@4, method "test2()void" => block@5, * => block@12}
    block@3: // test_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%8#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // someMethod_route_L9
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 123u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%15#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // test2_route_L13
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        (assert 0u)
        let tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L5
        let tmp%21#0: uint64 = (txn OnCompletion)
        goto tmp%21#0 ? block@12 : block@9
    block@9: // __algots__.defaultCreate_L5
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // can only call when creating
        let tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L5
        let tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#0 <- block@3, tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#1 <- block@4, tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#2 <- block@5, tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#3 <- block@9, tests/approvals/arc4-method-selector.algo.ts::ContractOne.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0