main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L20
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "renamedSomeMethod()void" => block@4, method "test()bool" => block@5, method "referenceTypes(pay,uint64,address,uint64,appl)void" => block@6, * => block@9}
    block@4: // renamedSomeMethod_route_L21
        exit 1u
    block@5: // test_route_L24
        (log 0x151f7c7580)
        exit 1u
    block@6: // referenceTypes_route_L28
        tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes[routing]()
        goto block@9
    block@9: // after_if_else_L20
        fail
    block@10: // __algots__.defaultCreate_L20
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/arc4-method-selector.algo.ts::ContractTwo.referenceTypes[routing]() -> void:
    block@0: // L28
        let tmp%0#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%1#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let tmp%3#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%3#0)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%5#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%5#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let tmp%7#0: uint64 = (txn GroupIndex)
        let appTxn#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) appTxn#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 appl)
        (assert gtxn_type_matches%1#0) // transaction type is appl
        exit 1u