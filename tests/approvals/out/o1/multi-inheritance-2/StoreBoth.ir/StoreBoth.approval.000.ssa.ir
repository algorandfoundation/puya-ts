main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@2 : block@1
    block@1: // if_body_L1
        polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance-2.algo.ts::StoreString,tests/approvals/multi-inheritance-2.algo.ts::StoreUint64>.constructor()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.__puya_arc4_router__()
        return tmp%0#0

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.__puya_arc4_router__() -> bool:
    block@0: // L21
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L21
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(string,uint64)void" => block@2, method "setStore(string)void" => block@3, * => block@4}
    block@2: // test_route_L22
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%9#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test(tmp%8#0, tmp%9#0)
        return 1u
    block@3: // setStore_route_L8
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let tmp%14#0: bytes = (txna ApplicationArgs 1)
        let tmp%15#0: bytes = ((extract 2 0) tmp%14#0)
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(tmp%15#0)
        return 1u
    block@4: // switch_case_default_L21
        goto block@5
    block@5: // switch_case_next_L21
        goto block@10
    block@6: // bare_routing_L21
        let tmp%16#0: uint64 = (txn OnCompletion)
        switch tmp%16#0 {0u => block@7, * => block@8}
    block@7: // __algots__.defaultCreate_L21
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (== tmp%17#0 0u)
        (assert tmp%18#0) // can only call when creating
        tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.__algots__.defaultCreate()
        return 1u
    block@8: // switch_case_default_L21
        goto block@9
    block@9: // switch_case_next_L21
        goto block@10
    block@10: // after_if_else_L21
        return 0u

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test(theString: bytes, theUint: uint64) -> void:
    block@0: // L22
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(theString#0)
        tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore(theUint#0)
        return 

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore(value: bytes) -> void:
    block@0: // L8
        (app_global_put "stringStore" value#0)
        return 

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore(value: uint64) -> void:
    block@0: // L16
        (app_global_put "uint64Store" value#0)
        return 

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.__algots__.defaultCreate() -> void:
    block@0: // L21
        return 

subroutine polytype/lib/polytype-module.d.ts::ClusteredContract<tests/approvals/multi-inheritance-2.algo.ts::StoreString,tests/approvals/multi-inheritance-2.algo.ts::StoreUint64>.constructor() -> void:
    block@0: // L1
        @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor()
        @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor()
        return 

subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.constructor() -> void:
    block@0: // L1
        return 