main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@11
    block@4: // abi_routing_L21
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test(string,uint64)void" => block@6, method "setStore(string)void" => block@7, * => block@10}
    block@6: // test_route_L22
        tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test[routing]()
        goto block@10
    block@7: // setStore_route_L8
        tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore[routing]()
        goto block@10
    block@10: // after_if_else_L21
        fail
    block@11: // __algots__.defaultCreate_L21
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreBoth.test[routing]() -> void:
    block@0: // L22
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let theString#0: string = ((extract 2 0) tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let theUint#0: uint64 = (btoi tmp%2#0)
        (app_global_put "stringStore" theString#0)
        (app_global_put "uint64Store" theUint#0)
        exit 1u

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreString.setStore[routing]() -> void:
    block@0: // L8
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+utf8[])
        let value#0: string = ((extract 2 0) tmp%0#0)
        (app_global_put "stringStore" value#0)
        exit 1u