main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "setStore(uint64)void" => block@3, * => block@4}
    block@3: // setStore_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore[routing]()
        goto block@4
    block@4: // switch_case_next_L13
        fail
    block@5: // __algots__.defaultCreate_L13
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/multi-inheritance-2.algo.ts::StoreUint64.setStore[routing]() -> void:
    block@0: // L16
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let value#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        (app_global_put "uint64Store" value#0)
        exit 1u