contract tests/approvals/casting.algo.ts::CastingAlgo:
    program approval:
        subroutine tests/approvals/casting.algo.ts::CastingAlgo.approvalProgram() -> bool:
            block@0: // L5
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/casting.algo.ts::CastingAlgo.constructor()
                goto block@2
            block@2: // after_if_else_L1
                let x#0: uint64 = 123u
                let (y.0#0: uint64, y.1#0: uint64, y.2#0: uint64) = (1u, 2u, 3u)
                let (z.0#0: uint64, z.1#0: uint64, z.2#0: uint64) = (1u, 2u, 3u)
                let tmp%0#0: uint64 = (* y.0#0 y.1#0)
                let tmp%1#0: uint64 = (* tmp%0#0 y.2#0)
                let tmp%2#0: uint64 = (* tmp%1#0 z.0#0)
                let tmp%3#0: uint64 = (* tmp%2#0 z.1#0)
                let tmp%4#0: uint64 = (* tmp%3#0 z.2#0)
                let tmp%5#0: bool = (> x#0 tmp%4#0)
                return tmp%5#0
        
        subroutine tests/approvals/casting.algo.ts::CastingAlgo.constructor() -> void:
            block@0: // L4
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u