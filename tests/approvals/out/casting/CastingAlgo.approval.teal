#pragma version 10

tests/approvals/casting.algo.ts::CastingAlgo.approvalProgram:
    intcblock 1 2 3
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    // tests/approvals/casting.algo.ts:8
    // const y = [1, 2, 3] as [uint64, uint64, uint64]
    intc_0 // 1
    intc_1 // 2
    // tests/approvals/casting.algo.ts:12
    // return x > y[0] * y[1] * y[2] * z[0] * z[1] * z[2]
    *
    // tests/approvals/casting.algo.ts:8
    // const y = [1, 2, 3] as [uint64, uint64, uint64]
    intc_2 // 3
    // tests/approvals/casting.algo.ts:12
    // return x > y[0] * y[1] * y[2] * z[0] * z[1] * z[2]
    *
    // tests/approvals/casting.algo.ts:10
    // const z = [1 as uint64, 2 as uint64, 3 as uint64] as const
    intc_0 // 1
    // tests/approvals/casting.algo.ts:12
    // return x > y[0] * y[1] * y[2] * z[0] * z[1] * z[2]
    *
    // tests/approvals/casting.algo.ts:10
    // const z = [1 as uint64, 2 as uint64, 3 as uint64] as const
    intc_1 // 2
    // tests/approvals/casting.algo.ts:12
    // return x > y[0] * y[1] * y[2] * z[0] * z[1] * z[2]
    *
    // tests/approvals/casting.algo.ts:10
    // const z = [1 as uint64, 2 as uint64, 3 as uint64] as const
    intc_2 // 3
    // tests/approvals/casting.algo.ts:12
    // return x > y[0] * y[1] * y[2] * z[0] * z[1] * z[2]
    *
    // tests/approvals/casting.algo.ts:6
    // const x = 123 as uint64
    pushint 123 // 123
    // tests/approvals/casting.algo.ts:12
    // return x > y[0] * y[1] * y[2] * z[0] * z[1] * z[2]
    <
    return


// tests/approvals/casting.algo.ts::CastingAlgo.constructor() -> void:
constructor:
    // tests/approvals/casting.algo.ts:4
    // export class CastingAlgo extends BaseContract {
    proto 0 0
    retsub
