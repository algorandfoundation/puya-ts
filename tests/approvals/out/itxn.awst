contract ItxnDemoContract extends @algorandfoundation/algo-ts/base-contract.d.ts::BaseContract
{
  globals {
    ["name"]: bytes
  }
  constructor(): void
  {
    void
    var GlobalState["name"]: bytes = 0x
  }
  
  approvalProgram(): bool
  {
    if (Boolean(txn<NumAppArgs>())) {
      switch (txnas<ApplicationArgs>(0)) {
        case "test1":
          #switch₁ᶜ₀:
          this.test1()
          goto #switch₁ᵇ
        case "test2":
          #switch₁ᶜ₁:
          this.test2()
          goto #switch₁ᵇ
        case "test3":
          #switch₁ᶜ₂:
          goto #switch₁ᶜ₃
        case "test4":
          #switch₁ᶜ₃:
          goto #switch₁ᵇ
      }
      #switch₁ᵇ:
    }
    return True
  }
  
  test1(): void
  {
    var GlobalState["name"]: bytes = "AST1"
    var assetParams: inner_transaction_fields_acfg = create_inner_transaction(Fee=0, ConfigAssetName=GlobalState["name"], ConfigAssetDecimals=3, ConfigAssetManager=global<CurrentApplicationAddress>(), ConfigAssetReserve=global<CurrentApplicationAddress>(), ConfigAssetTotal=1000, ConfigAssetUnitName="unit")
    var GlobalState["name"]: bytes = "AST2"
    var asset1_txn: inner_transaction_acfg = submit_txn(assetParams)
    update_inner_transaction(assetParams, ConfigAssetName=GlobalState["name"])
    var asset2_txn: inner_transaction_acfg = submit_txn(assetParams)
    assert(asset1_txn.ConfigAssetName == "AST1")
    assert(asset2_txn.ConfigAssetName == "AST2")
    assert(checked_maybe(asset_params_get<AssetName>(asset1_txn.ConfigAsset), comment=asset exists) == "AST1")
    assert(checked_maybe(asset_params_get<AssetName>(asset1_txn.ConfigAsset), comment=asset exists) == "AST2")
    var appCreateParams: inner_transaction_fields_appl = create_inner_transaction(Fee=0, ApprovalProgram=0x000800, ClearStateProgram=0x000800)
    update_inner_transaction(assetParams, ConfigAssetName="AST3")
    var <tuple>[appCreateTxn, asset3_txn]: readonlytuple[inner_transaction_appl, inner_transaction_acfg] = submit_txn(appCreateParams, assetParams)
    assert(Boolean(appCreateTxn.ApplicationID))
    assert(asset3_txn.ConfigAssetName == "AST3")
    update_inner_transaction(appCreateParams, Note="3rd")
    update_inner_transaction(assetParams, Note="3rd")
    submit_txn(appCreateParams, assetParams)
  }
  
  test2(): void
  {
    if (Boolean(txn<NumAppArgs>())) {
      var args: readonlytuple[bytes, bytes] = <tuple>["1", "2"]
      var createAppParams: inner_transaction_fields_appl = create_inner_transaction(Fee=0, ApplicationArgs=<tuple>[args.0, args.1], ApprovalProgram="	", ClearStateProgram="	", Note="with args param set", OnCompletion=0)
    } else {
      var createAppParams: inner_transaction_fields_appl = create_inner_transaction(Fee=0, ApplicationArgs=<tuple>["3", "4", "5"], ApprovalProgram="	", ClearStateProgram="	", Note="no args param set")
    }
    var createAppTxn: inner_transaction_appl = submit_txn(createAppParams)
    assert(createAppTxn.ApplicationArgs[0] == "1")
    assert(createAppTxn.ApplicationArgs[1] == "2")
    assert(createAppTxn.Note == "with args param set")
  }
  
}