contract tests/approvals/inheritance-b.algo.ts::ConcreteSimpleContract:
    program approval:
        subroutine tests/approvals/inheritance-b.algo.ts::ConcreteSimpleContract.approvalProgram() -> uint64:
            block@0: // L6
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/inheritance-b.algo.ts::ConcreteSimpleContract.constructor()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%0#0: bytes = ((txnas ApplicationArgs) 0u)
                let a#0: uint64 = (btoi tmp%0#0)
                let tmp%1#0: bytes = ((txnas ApplicationArgs) 1u)
                let b#0: uint64 = (btoi tmp%1#0)
                let tmp%2#0: uint64 = tests/approvals/inheritance-a.algo.ts::SimpleContract.simpleMethod(a#0, b#0)
                return tmp%2#0
        
        subroutine tests/approvals/inheritance-b.algo.ts::ConcreteSimpleContract.constructor() -> void:
            block@0: // L5
                tests/approvals/inheritance-a.algo.ts::SimpleContract.constructor()
                return 
        
        subroutine tests/approvals/inheritance-a.algo.ts::SimpleContract.constructor() -> void:
            block@0: // L4
                return 
        
        subroutine tests/approvals/inheritance-a.algo.ts::SimpleContract.simpleMethod(a: uint64, b: uint64) -> uint64:
            block@0: // L6
                let tmp%0#0: uint64 = (* a#0 b#0)
                return tmp%0#0
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u