contract tests/approvals/local-state.algo.ts::LocalStateDemo:
    program approval:
        subroutine @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L7
                tests/approvals/local-state.algo.ts::LocalStateDemo.constructor()
                goto block@2
            block@2: // entrypoint_L7
                let tmp%0#0: bool = tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__() -> bool:
            block@0: // L7
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@7
            block@1: // abi_routing_L7
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "setState((uint64,byte[]),uint64[10])void" => block@2, method "getState()(uint64,uint64,byte[],byte[],uint64[10])" => block@3, method "clearState()void" => block@4, * => block@5}
            block@2: // setState_route_L14
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let item0%0#0: bytes = (extract3 tmp%7#0 0u 8u) // on error: Index access is out of bounds
                let item0%0%0#0: uint64 = (btoi item0%0#0)
                let item_start_offset%0#0: uint64 = (extract_uint16 tmp%7#0 8u)
                let item_end_offset%0#0: uint64 = (len tmp%7#0)
                let item1%0#0: bytes = (substring3 tmp%7#0 item_start_offset%0#0 item_end_offset%0#0)
                let item1%0%0#0: bytes = ((extract 2 0) item1%0#0)
                let tmp%8#0: bytes = (txna ApplicationArgs 2)
                tests/approvals/local-state.algo.ts::LocalStateDemo.setState(item0%0%0#0, item1%0%0#0, tmp%8#0)
                return 1u
            block@3: // getState_route_L22
                let tmp%9#0: uint64 = (txn OnCompletion)
                let tmp%10#0: bool = (== tmp%9#0 NoOp)
                (assert tmp%10#0) // OnCompletion is NoOp
                let tmp%11#0: uint64 = (txn ApplicationID)
                let tmp%12#0: bool = (!= tmp%11#0 0u)
                (assert tmp%12#0) // is not creating
                let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64, elements_to_encode%2#0: bytes, elements_to_encode%3#0: bytes, elements_to_encode%4#0: bytes) = tests/approvals/local-state.algo.ts::LocalStateDemo.getState()
                let val_as_bytes%0#0: bytes = (itob elements_to_encode%0#0)
                let val_as_bytes%1#0: bytes = (itob elements_to_encode%1#0)
                let length%0#0: uint64 = (len elements_to_encode%2#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%2#0)
                let length%1#0: uint64 = (len elements_to_encode%3#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 elements_to_encode%3#0)
                let current_tail_offset%0#0: uint64 = 100u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
                let as_bytes%2#0: bytes = (itob current_tail_offset%0#0)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let data_length%1#0: uint64 = (len encoded_value%1#0)
                let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 elements_to_encode%4#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
                let tmp%13#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%7#0)
                (log tmp%13#0)
                return 1u
            block@4: // clearState_route_L32
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: bool = (== tmp%14#0 NoOp)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: uint64 = (txn ApplicationID)
                let tmp%17#0: bool = (!= tmp%16#0 0u)
                (assert tmp%17#0) // is not creating
                tests/approvals/local-state.algo.ts::LocalStateDemo.clearState()
                return 1u
            block@5: // switch_case_default_L7
                goto block@6
            block@6: // switch_case_next_L7
                goto block@8
            block@7: // bare_routing_L7
                goto block@8
            block@8: // after_if_else_L7
                return 0u
        
        subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p.a: uint64, p.b: bytes, c: bytes) -> void:
            block@0: // L14
                let a#0: uint64 = p.a#0
                let b#0: bytes = p.b#0
                let tmp%0#0: bytes = (txn Sender)
                (app_local_put tmp%0#0 "l1" a#0)
                let tmp%1#0: bytes = (txn Sender)
                (app_local_put tmp%1#0 "localUint2" a#0)
                let tmp%2#0: bytes = (txn Sender)
                (app_local_put tmp%2#0 "b1" b#0)
                let tmp%3#0: bytes = (txn Sender)
                (app_local_put tmp%3#0 "localBytes2" b#0)
                let copy%0#0: bytes = c#0
                let tmp%4#0: bytes = (txn Sender)
                (app_local_put tmp%4#0 "localEncoded" copy%0#0)
                return 
        
        subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> <uint64, uint64, bytes, bytes, bytes>:
            block@0: // L22
                let tmp%0#0: bytes = (txn Sender)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "l1")
                (assert maybe_exists%0#0) // check LocalState exists
                let tmp%1#0: bytes = (txn Sender)
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_local_get_ex tmp%1#0 0u "localUint2")
                (assert maybe_exists%1#0) // check LocalState exists
                let tmp%2#0: bytes = (txn Sender)
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%2#0 0u "b1")
                (assert maybe_exists%2#0) // check LocalState exists
                let tmp%3#0: bytes = (txn Sender)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_local_get_ex tmp%3#0 0u "localBytes2")
                (assert maybe_exists%3#0) // check LocalState exists
                let tmp%4#0: bytes = (txn Sender)
                let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_local_get_ex tmp%4#0 0u "localEncoded")
                (assert maybe_exists%4#0) // check LocalState exists
                let copy%0#0: bytes = maybe_value%4#0
                return maybe_value%0#0 maybe_value%1#0 maybe_value%2#0 maybe_value%3#0 copy%0#0
        
        subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
            block@0: // L32
                let tmp%0#0: bytes = (txn Sender)
                (app_local_del tmp%0#0 "l1")
                let tmp%1#0: bytes = (txn Sender)
                (app_local_del tmp%1#0 "localUint2")
                let tmp%2#0: bytes = (txn Sender)
                (app_local_del tmp%2#0 "b1")
                let tmp%3#0: bytes = (txn Sender)
                (app_local_del tmp%3#0 "localBytes2")
                let tmp%4#0: bytes = (txn Sender)
                (app_local_del tmp%4#0 "localEncoded")
                return 
        
        subroutine tests/approvals/local-state.algo.ts::LocalStateDemo.constructor() -> void:
            block@0: // L7
                return 
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u