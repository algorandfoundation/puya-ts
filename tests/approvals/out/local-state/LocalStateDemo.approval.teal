#pragma version 10

tests/approvals/local-state.algo.ts::LocalStateDemo.approvalProgram:
    intcblock 0 1 8 100
    bytecblock "l1" "localUint2" "b1" "localBytes2" "localEncoded"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// tests/approvals/local-state.algo.ts::LocalStateDemo.constructor() -> void:
constructor:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    proto 0 0
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@7
    txna ApplicationArgs 0
    pushbytes 0xaaefcb43 // method "setState((uint64,byte[]),uint64[10])void"
    pushbytes 0x67816cc5 // method "getState()(uint64,uint64,byte[],byte[],uint64[10])"
    pushbytes 0x11170534 // method "clearState()void"
    uncover 3
    match __puya_arc4_router___setState_route@2 __puya_arc4_router___getState_route@3 __puya_arc4_router___clearState_route@4
    b __puya_arc4_router___switch_case_default@5

__puya_arc4_router___setState_route@2:
    // tests/approvals/local-state.algo.ts:14
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    // tests/approvals/local-state.algo.ts:14
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    uncover 2
    uncover 2
    uncover 2
    callsub setState
    intc_1 // 1
    retsub

__puya_arc4_router___getState_route@3:
    // tests/approvals/local-state.algo.ts:22
    // public getState() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub getState
    cover 4
    cover 3
    cover 2
    swap
    itob
    cover 3
    itob
    cover 3
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 3
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 3
    pushbytes 0x
    swap
    concat
    swap
    concat
    intc_3 // 100
    itob
    extract 6 2
    concat
    dig 1
    len
    intc_3 // 100
    +
    itob
    extract 6 2
    concat
    uncover 3
    concat
    swap
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___clearState_route@4:
    // tests/approvals/local-state.algo.ts:32
    // public clearState() {
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub clearState
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@5:
    b __puya_arc4_router___after_if_else@11

__puya_arc4_router___bare_routing@7:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algots__.defaultCreate@8
    b __puya_arc4_router___switch_case_default@9

__puya_arc4_router_____algots__.defaultCreate@8:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algots__.defaultCreate
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@9:

__puya_arc4_router___after_if_else@11:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    intc_0 // 0
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.setState(p.a: uint64, p.b: bytes, c: bytes) -> void:
setState:
    // tests/approvals/local-state.algo.ts:14
    // public setState({ a, b }: { a: uint64; b: bytes }, c: SampleArray) {
    proto 3 0
    frame_dig -3
    frame_dig -2
    swap
    // tests/approvals/local-state.algo.ts:15
    // this.localUint(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:15
    // this.localUint(Txn.sender).value = a
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:16
    // this.localUint2(Txn.sender).value = a
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:16
    // this.localUint2(Txn.sender).value = a
    uncover 2
    app_local_put
    // tests/approvals/local-state.algo.ts:17
    // this.localBytes(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:17
    // this.localBytes(Txn.sender).value = b
    dig 2
    app_local_put
    // tests/approvals/local-state.algo.ts:18
    // this.localBytes2(Txn.sender).value = b
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:18
    // this.localBytes2(Txn.sender).value = b
    uncover 2
    app_local_put
    // tests/approvals/local-state.algo.ts:19
    // this.localEncoded(Txn.sender).value = c.copy()
    frame_dig -1
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:19
    // this.localEncoded(Txn.sender).value = c.copy()
    uncover 2
    app_local_put
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.getState() -> uint64, uint64, bytes, bytes, bytes:
getState:
    // tests/approvals/local-state.algo.ts:22
    // public getState() {
    proto 0 5
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:24
    // localUint: this.localUint(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:25
    // localUint2: this.localUint2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:26
    // localBytes: this.localBytes(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:27
    // localBytes2: this.localBytes2(Txn.sender).value,
    app_local_get_ex
    bury 1
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    txn Sender
    intc_0 // 0
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:28
    // localEncoded: this.localEncoded(Txn.sender).value.copy(),
    app_local_get_ex
    assert // check LocalState exists
    // tests/approvals/local-state.algo.ts:23-29
    // return {
    //   localUint: this.localUint(Txn.sender).value,
    //   localUint2: this.localUint2(Txn.sender).value,
    //   localBytes: this.localBytes(Txn.sender).value,
    //   localBytes2: this.localBytes2(Txn.sender).value,
    //   localEncoded: this.localEncoded(Txn.sender).value.copy(),
    // }
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.clearState() -> void:
clearState:
    // tests/approvals/local-state.algo.ts:32
    // public clearState() {
    proto 0 0
    // tests/approvals/local-state.algo.ts:33
    // this.localUint(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:8
    // localUint = LocalState<uint64>({ key: 'l1' })
    bytec_0 // "l1"
    // tests/approvals/local-state.algo.ts:33
    // this.localUint(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:34
    // this.localUint2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:9
    // localUint2 = LocalState<uint64>()
    bytec_1 // "localUint2"
    // tests/approvals/local-state.algo.ts:34
    // this.localUint2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:35
    // this.localBytes(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:10
    // localBytes = LocalState<bytes>({ key: 'b1' })
    bytec_2 // "b1"
    // tests/approvals/local-state.algo.ts:35
    // this.localBytes(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:36
    // this.localBytes2(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:11
    // localBytes2 = LocalState<bytes>()
    bytec_3 // "localBytes2"
    // tests/approvals/local-state.algo.ts:36
    // this.localBytes2(Txn.sender).delete()
    app_local_del
    // tests/approvals/local-state.algo.ts:37
    // this.localEncoded(Txn.sender).delete()
    txn Sender
    // tests/approvals/local-state.algo.ts:12
    // localEncoded = LocalState<SampleArray>()
    bytec 4 // "localEncoded"
    // tests/approvals/local-state.algo.ts:37
    // this.localEncoded(Txn.sender).delete()
    app_local_del
    retsub


// tests/approvals/local-state.algo.ts::LocalStateDemo.__algots__.defaultCreate() -> void:
__algots__.defaultCreate:
    // tests/approvals/local-state.algo.ts:7
    // export class LocalStateDemo extends Contract {
    proto 0 0
    retsub
