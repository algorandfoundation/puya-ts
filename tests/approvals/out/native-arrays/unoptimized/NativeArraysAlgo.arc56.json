{
    "name": "NativeArraysAlgo",
    "structs": {
        "Vector": [
            {
                "name": "x",
                "type": "uint64"
            },
            {
                "name": "y",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "buildArray",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doThings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Interop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "structs",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "Vector",
                    "name": "p"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        87,
                        92,
                        252,
                        268,
                        286,
                        304,
                        378,
                        394,
                        412,
                        430,
                        446,
                        471,
                        541,
                        557,
                        575,
                        593,
                        612,
                        637,
                        653,
                        671,
                        689,
                        792,
                        808,
                        826,
                        844,
                        860,
                        877,
                        895,
                        913,
                        929,
                        947,
                        965,
                        1097,
                        1112,
                        1128,
                        1144,
                        1159,
                        1175,
                        1250,
                        1253,
                        1272,
                        1275
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        75,
                        109,
                        126,
                        143
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        312,
                        455,
                        601,
                        697,
                        974,
                        1182,
                        1284
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        175
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        80,
                        114,
                        131,
                        148
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAECAABBCYEAAQAAAB7AgAABBUffHUxGyMTQQCCNhoAgAQPTBHKgAQTpYjIgAR4e1CygATrh6BkTwSOBABGADUAJAACI0MxGSMSRDEYIxNENhoBSSMiWBdMIklYF4gEQytMULAkQv/dMRkjEkQxGCMTRIgDbiRC/8wxGSMSRDEYIxNEiABeJEL/uzEZIxJEMRgjE0SIAB8rTFCwJEL/pjEZI0yOAQADQv+aMRgjEkSIBFskQv+PKihQVwIAJBYoTFAoTFCBAhYoTFBQgQMWKExQUCUWKExQUFBJFSIKFlcGAkxQiYoAAIj/zEkjWSUSQQLtiwBXAgAjIgsiWBckEkEC3YsAVwIAJCILIlgXgQISQQLMiwBXAgCBAiILIlgXgQMSQQK6iwBXAgCBAyILIlgXJRJBAqkkRIsAVwIAKihQVwIAgQUWKExQKExQUEkVIgoWVwYCTFBXAgBQSRUiChZXBgJMUEmMACNZgQUSQQJriwBXAgAjIgsiWBckEkECW4sAVwIAJCILIlgXgQISQQJKiwBXAgCBAiILIlgXgQMSQQI4iwBXAgCBAyILIlgXJRJBAieLAFcCACUiCyJYF4EFEkECFiREiwBJI1kkCUxXAgBMIgsiWBeBBRJEKihQVwIAJBYoTFAoTFCBAhYoTFBQgQMWKExQUCUWKExQUFBJFSIKFlcGAkxQSYwAI1klEkEBxIsAVwIAIyILIlgXJBJBAbSLAFcCACQiCyJYF4ECEkEBo4sAVwIAgQIiCyJYF4EDEkEBkYsAVwIAgQMiCyJYFyUSQQGAJESBChaLAEkjWSQNRIEKTwJdSYwAI1klEkEBYIsAVwIAIyILIlgXJBJBAVCLAFcCACQiCyJYF4EKEkEBP4sAVwIAgQIiCyJYF4EDEkEBLYsAVwIAgQMiCyJYFyUSQQEcJESLAElXAgBMVwIAUEkVIgoWVwYCTFBXAgCBCxYoTFAoTFBQSRUiChZXBgJMUFcCAIEMFihMUChMUIENFihMUFBQSRUiChZXBgJMUEmMACNZgQsSQQDBiwBXAgAjIgsiWBckEkEAsYsAVwIAJCILIlgXgQoSQQCgiwBXAgCBAiILIlgXgQMSQQCOiwBXAgCBAyILIlgXJRJBAH2LAFcCACUiCyJYFyQSQQBtiwBXAgCBBSILIlgXgQoSQQBbiwBXAgCBBiILIlgXgQMSQQBJiwBXAgCBByILIlgXJRJBADiLAFcCACJJCyJYF4ELEkEAJ4sAVwIAgQkiCyJYF4EMEkEAFYsAVwIAgQoiCyJYF4ENEkEAAyREiSNC//ojQv7hI0L+fSNC/ecjQv1UigAAKClQKVCAAgACTFAoKVApUChMUEwqKFBXAgAoKVAoTFAoKVBQUEkVJQoWVwYCTFBXAgBMVwIAUEkVJQoWVwYCTFBXAgBMUEkVJQoWVwYCTFBJI1mBBhJBAGCLAFcCACMlCyVYKRJBAFGLAFcCACQlCyVYKRJBAEKLAFcCAIECJQslWCkSQQAyiwBXAgCBAyULJVgpEkEAIosAVwIAJUkLJVgpEkEAE4sAVwIAgQUlCyVYKRJBAAMkRIkjQv/6igIBi/5Ji/9JTgJOAiooUFcCAE4CFihMUEwWUChMUFBJFYEQChZXBgJMUEkjWSQSQQAziwJXAgAjgRALgRBYIyJYF4sAEkEAHYsCVwIAI4EQC4EQWCJJWBeLARJBAAckRIsCjACJI0L/9ok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}