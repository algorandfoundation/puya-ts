main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@3, method "doThings()void" => block@4, method "arc4Interop()void" => block@5, method "structs((uint64,uint64))(uint64,uint64)[]" => block@6, * => block@13}
    block@3: // buildArray_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // doThings_route_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@5: // arc4Interop_route_L42
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@6: // structs_route_L54
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let p.x#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let p.y#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        let array%sub_item%16#1: bytes[8] = (itob p.x#0)
        let array%sub_item%17#1: bytes[8] = (itob p.y#0)
        let array%encoded%19#1: (uint64,uint64)[] = (concat array%sub_item%16#1 array%sub_item%17#1)
        let byte_len%0#0: uint64 = (len array%encoded%19#1)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let myVectors#1: (uint64,uint64)[] = (concat len_16_bit%0#0 array%encoded%19#1)
        let tmp%0#2: uint64 = (extract_uint16 myVectors#1 0u)
        let tmp%1#1: bool = (== tmp%0#2 1u)
        goto tmp%1#1 ? block@18 : block@21
    block@18: // and_contd_L59
        let arc4_item%0#0: bytes = ((extract 2 16) myVectors#1)
        let item0%0%0#1: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let tmp%2#1: bool = (== item0%0%0#1 p.x#0)
        goto tmp%2#1 ? block@19 : block@21
    block@19: // and_contd_L59
        let item1%1%0#0: uint64 = (extract_uint64 arc4_item%0#0 8u)
        let tmp%3#1: bool = (== item1%1%0#0 p.y#0)
        goto tmp%3#1 ? block@20 : block@21
    block@20: // bool_true_L59
        let and_result%0#0: bool = 1u
        goto block@22
    block@21: // bool_false_L59
        let and_result%0#1: bool = 0u
        goto block@22
    block@22: // bool_merge_L59
        let and_result%0#2: bool = φ(and_result%0#0 <- block@20, and_result%0#1 <- block@21)
        (assert and_result%0#2) // assert target is match for conditions
        let tmp%22#0: bytes = (concat 0x151f7c75 myVectors#1)
        (log tmp%22#0)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@9: // bare_routing_L6
        let tmp%23#0: uint64 = (txn OnCompletion)
        goto tmp%23#0 ? block@13 : block@10
    block@10: // __algots__.defaultCreate_L6
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L6
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0 <- block@3, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#1 <- block@4, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#2 <- block@5, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#3 <- block@22, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#4 <- block@10, tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0