#pragma version 10

tests/approvals/reserve-scratch.algo.ts::ReserveScratchAlgo.approvalProgram:
    intcblock 1 0 15 45
    bytecblock "hello"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    // tests/approvals/reserve-scratch.algo.ts:13
    // this.setThings()
    callsub setThings
    // tests/approvals/reserve-scratch.algo.ts:15
    // assert(Scratch.loadUint64(0) === 1)
    intc_1 // 0
    loads
    intc_0 // 1
    ==
    assert
    // tests/approvals/reserve-scratch.algo.ts:16
    // assert(Scratch.loadBytes(0) === Bytes('hello'))
    intc_1 // 0
    loads
    bytec_0 // "hello"
    ==
    assert
    // tests/approvals/reserve-scratch.algo.ts:17
    // assert(Scratch.loadUint64(15) === 45)
    intc_2 // 15
    loads
    intc_3 // 45
    ==
    assert
    // tests/approvals/reserve-scratch.algo.ts:18
    // return true
    intc_0 // 1
    return


// tests/approvals/reserve-scratch.algo.ts::ReserveScratchAlgo.constructor() -> void:
constructor:
    // tests/approvals/reserve-scratch.algo.ts:4-5
    // @contract({ scratchSlots: [0, 1, { from: 10, to: 20 }] })
    // export class ReserveScratchAlgo extends BaseContract {
    proto 0 0
    retsub


// tests/approvals/reserve-scratch.algo.ts::ReserveScratchAlgo.setThings() -> void:
setThings:
    // tests/approvals/reserve-scratch.algo.ts:6
    // setThings() {
    proto 0 0
    // tests/approvals/reserve-scratch.algo.ts:7
    // Scratch.store(0, 1)
    intc_1 // 0
    intc_0 // 1
    stores
    // tests/approvals/reserve-scratch.algo.ts:8
    // Scratch.store(1, Bytes('hello'))
    intc_0 // 1
    bytec_0 // "hello"
    stores
    // tests/approvals/reserve-scratch.algo.ts:9
    // Scratch.store(15, 45)
    intc_2 // 15
    intc_3 // 45
    stores
    retsub
