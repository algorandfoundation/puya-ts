subroutine test(): void
{
  var <tuple>[a, b, c, d]: readonlytuple[uint64, bytes, bool, biguint] = produceItems()
  var <tuple>[_, _₁, _₂, e]: readonlytuple[uint64, bytes, bool, biguint] = <tuple>[(#se0 = produceItems()).0, #se0.1, #se0.2, #se0.3]
  var f: tuple[uint64, bytes, bool, biguint] = (<tuple>[g, _₃, _₄, i] = <tuple>[(#se1 = produceItems()).0, #se1.1, #se1.2, #se1.3])
  receivePartial(<tuple>[(#se2 = produceItems()).0, #se2.3])
}
subroutine produceItems(): tuple[uint64, bytes, bool, biguint]
{
  return <tuple>[1, "", False, 999]
}
subroutine receivePartial(x: tuple[uint64, biguint]): void
{
}
subroutine testLiteralToLiteral(): void
{
  var a: uint64 = 4
  var b: uint64 = 1
  var <tuple>[e, f]: readonlytuple[uint64, uint64] = (<tuple>[c, d] = <tuple>[a, b])
}
subroutine testNumericResolution(): void
{
  var x: tuple[uint64] = (y = <tuple>[434])
}