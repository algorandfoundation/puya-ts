boxA = 0x41
subroutine testBox(box: box_key, value: string): void
{
  box.value = value
  Box["A"].value = value
  assert(box.value == Box["A"].value)
  STATE_DEL(box.value)
  STATE_DEL(Box["A"].value)
  var defaultVal: string = "O"
  assert(STATE_GET(Box["A"].value, default=defaultVal == STATE_GET(box.value, default=defaultVal)
  assert(!e)
  box.value = value
  assert(e)
}
boxMap = 0x
subroutine testBoxMap(box: box_key, key: string, value: bytes): void
{
  concat(box, reinterpret_cast<bytes>(key)).value = value
  concat("", reinterpret_cast<bytes>(key)).value = value
  assert(concat(box, reinterpret_cast<bytes>(key)).value == concat("", reinterpret_cast<bytes>(key)).value)
  STATE_DEL(concat(box, reinterpret_cast<bytes>(key)).value)
  assert(STATE_GET(concat(box, reinterpret_cast<bytes>("" + key + "x")).value, default="b" == STATE_GET(concat("", reinterpret_cast<bytes>("" + key + "x")).value, default="b")
}
boxRef = 0x616263
subroutine testBoxRef(box: box_key): void
{
  var someBytes: bytes = 0x0f0f0f0f
}