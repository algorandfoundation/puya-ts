#pragma version 10

tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.approvalProgram:
    bytecblock "123"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    // tests/approvals/shadowed-variables.algo.ts:8
    // const [b, u, f] = this.getValues()
    callsub getValues
    cover 2
    cover 2
    swap
    cover 2
    // tests/approvals/shadowed-variables.algo.ts:4
    // const a = Bytes('123')
    bytec_0 // "123"
    // tests/approvals/shadowed-variables.algo.ts:9
    // assert(a === b, 'a should be module const (bytes)')
    ==
    assert // a should be module const (bytes)
    // tests/approvals/shadowed-variables.algo.ts:12
    // assert(a === 123, 'a should be local const (uint)')
    dup
    pushint 123 // 123
    ==
    assert // a should be local const (uint)
    // tests/approvals/shadowed-variables.algo.ts:14
    // let a = f
    swap
    // tests/approvals/shadowed-variables.algo.ts:15
    // assert(!a, 'a should be local let (bool)')
    dup
    !
    assert // a should be local let (bool)
    // tests/approvals/shadowed-variables.algo.ts:17
    // a = !a
    !
    // tests/approvals/shadowed-variables.algo.ts:18
    // assert(a, 'a should be modified local let (bool)')
    dup
    assert // a should be modified local let (bool)
    // tests/approvals/shadowed-variables.algo.ts:20
    // assert(a, 'a should still be modified local let (bool)')
    assert // a should still be modified local let (bool)
    // tests/approvals/shadowed-variables.algo.ts:22
    // assert(a === 123, 'a should be local const (uint)')
    pushint 123 // 123
    ==
    assert // a should be local const (uint)
    // tests/approvals/shadowed-variables.algo.ts:4
    // const a = Bytes('123')
    bytec_0 // "123"
    // tests/approvals/shadowed-variables.algo.ts:24
    // assert(a === Bytes('123'), 'a should be module const (bytes)')
    dup
    ==
    assert // a should be module const (bytes)
    // tests/approvals/shadowed-variables.algo.ts:25
    // return true
    pushint 1 // 1
    return


// tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.constructor() -> void:
constructor:
    // tests/approvals/shadowed-variables.algo.ts:6
    // class ShadowedVariablesAlgo extends BaseContract {
    proto 0 0
    retsub


// tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues() -> bytes, uint64, uint64:
getValues:
    // tests/approvals/shadowed-variables.algo.ts:28
    // private getValues(): [bytes, uint64, boolean] {
    proto 0 3
    // tests/approvals/shadowed-variables.algo.ts:4
    // const a = Bytes('123')
    bytec_0 // "123"
    // tests/approvals/shadowed-variables.algo.ts:29
    // return [a, Uint64(123), false]
    pushint 123 // 123
    pushint 0 // 0
    retsub
