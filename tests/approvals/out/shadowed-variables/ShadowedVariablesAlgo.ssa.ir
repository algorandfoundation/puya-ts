contract tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo:
    program approval:
        subroutine tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.approvalProgram() -> bool:
            block@0: // L7
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@2 : block@1
            block@1: // if_body_L1
                tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.constructor()
                goto block@2
            block@2: // after_if_else_L1
                let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: uint64, tuple_assignment%2#0: bool) = tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues()
                let b#0: bytes = tuple_assignment%0#0
                let u#0: uint64 = tuple_assignment%1#0
                let f#0: bool = tuple_assignment%2#0
                let tmp%0#0: bool = (== "123" b#0)
                (assert tmp%0#0) // a should be module const (bytes)
                let a#0: uint64 = u#0
                let tmp%1#0: bool = (== a#0 123u)
                (assert tmp%1#0) // a should be local const (uint)
                let a₁#0: bool = f#0
                let tmp%2#0: bool = (! a₁#0)
                (assert tmp%2#0) // a should be local let (bool)
                let a₁#1: bool = (! a₁#0)
                (assert a₁#1) // a should be modified local let (bool)
                (assert a₁#1) // a should still be modified local let (bool)
                let tmp%3#0: bool = (== a#0 123u)
                (assert tmp%3#0) // a should be local const (uint)
                let tmp%4#0: bool = (== "123" "123")
                (assert tmp%4#0) // a should be module const (bytes)
                return 1u
        
        subroutine tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.constructor() -> void:
            block@0: // L6
                return 
        
        subroutine tests/approvals/shadowed-variables.algo.ts::ShadowedVariablesAlgo.getValues() -> <bytes, uint64, bool>:
            block@0: // L28
                return "123" 123u 0u
    
    program clear-state:
        subroutine @algorandfoundation/algorand-typescript/base-contract.d.ts::BaseContract.clearStateProgram() -> bool:
            block@0: // L1
                return 1u