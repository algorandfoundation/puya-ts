import { IntrinsicEnumType } from './ptype-classes'

export const acctParamsPType = new IntrinsicEnumType({
  name: 'acct_params',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['AcctBalance', 'AcctBalance'],
    ['AcctMinBalance', 'AcctMinBalance'],
    ['AcctAuthAddr', 'AcctAuthAddr'],
    ['AcctTotalNumUint', 'AcctTotalNumUint'],
    ['AcctTotalNumByteSlice', 'AcctTotalNumByteSlice'],
    ['AcctTotalExtraAppPages', 'AcctTotalExtraAppPages'],
    ['AcctTotalAppsCreated', 'AcctTotalAppsCreated'],
    ['AcctTotalAppsOptedIn', 'AcctTotalAppsOptedIn'],
    ['AcctTotalAssetsCreated', 'AcctTotalAssetsCreated'],
    ['AcctTotalAssets', 'AcctTotalAssets'],
    ['AcctTotalBoxes', 'AcctTotalBoxes'],
    ['AcctTotalBoxBytes', 'AcctTotalBoxBytes'],
  ],
})
export const appParamsPType = new IntrinsicEnumType({
  name: 'app_params',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['AppApprovalProgram', 'AppApprovalProgram'],
    ['AppClearStateProgram', 'AppClearStateProgram'],
    ['AppGlobalNumUint', 'AppGlobalNumUint'],
    ['AppGlobalNumByteSlice', 'AppGlobalNumByteSlice'],
    ['AppLocalNumUint', 'AppLocalNumUint'],
    ['AppLocalNumByteSlice', 'AppLocalNumByteSlice'],
    ['AppExtraProgramPages', 'AppExtraProgramPages'],
    ['AppCreator', 'AppCreator'],
    ['AppAddress', 'AppAddress'],
  ],
})
export const assetHoldingPType = new IntrinsicEnumType({
  name: 'asset_holding',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['AssetBalance', 'AssetBalance'],
    ['AssetFrozen', 'AssetFrozen'],
  ],
})
export const assetParamsPType = new IntrinsicEnumType({
  name: 'asset_params',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['AssetTotal', 'AssetTotal'],
    ['AssetDecimals', 'AssetDecimals'],
    ['AssetDefaultFrozen', 'AssetDefaultFrozen'],
    ['AssetUnitName', 'AssetUnitName'],
    ['AssetName', 'AssetName'],
    ['AssetURL', 'AssetURL'],
    ['AssetMetadataHash', 'AssetMetadataHash'],
    ['AssetManager', 'AssetManager'],
    ['AssetReserve', 'AssetReserve'],
    ['AssetFreeze', 'AssetFreeze'],
    ['AssetClawback', 'AssetClawback'],
    ['AssetCreator', 'AssetCreator'],
  ],
})
export const base64PType = new IntrinsicEnumType({
  name: 'base64',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['URLEncoding', 'URLEncoding'],
    ['StdEncoding', 'StdEncoding'],
  ],
})
export const blockPType = new IntrinsicEnumType({
  name: 'block',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['BlkSeed', 'BlkSeed'],
    ['BlkTimestamp', 'BlkTimestamp'],
  ],
})
export const ecPType = new IntrinsicEnumType({
  name: 'EC',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['BN254g1', 'BN254g1'],
    ['BN254g2', 'BN254g2'],
    ['BLS12_381g1', 'BLS12_381g1'],
    ['BLS12_381g2', 'BLS12_381g2'],
  ],
})
export const ecdsaPType = new IntrinsicEnumType({
  name: 'ECDSA',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['Secp256k1', 'Secp256k1'],
    ['Secp256r1', 'Secp256r1'],
  ],
})
export const txnPType = new IntrinsicEnumType({
  name: 'txn',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['Sender', 'Sender'],
    ['Fee', 'Fee'],
    ['FirstValid', 'FirstValid'],
    ['FirstValidTime', 'FirstValidTime'],
    ['LastValid', 'LastValid'],
    ['Note', 'Note'],
    ['Lease', 'Lease'],
    ['Receiver', 'Receiver'],
    ['Amount', 'Amount'],
    ['CloseRemainderTo', 'CloseRemainderTo'],
    ['VotePK', 'VotePK'],
    ['SelectionPK', 'SelectionPK'],
    ['VoteFirst', 'VoteFirst'],
    ['VoteLast', 'VoteLast'],
    ['VoteKeyDilution', 'VoteKeyDilution'],
    ['Type', 'Type'],
    ['TypeEnum', 'TypeEnum'],
    ['XferAsset', 'XferAsset'],
    ['AssetAmount', 'AssetAmount'],
    ['AssetSender', 'AssetSender'],
    ['AssetReceiver', 'AssetReceiver'],
    ['AssetCloseTo', 'AssetCloseTo'],
    ['GroupIndex', 'GroupIndex'],
    ['TxID', 'TxID'],
    ['ApplicationID', 'ApplicationID'],
    ['OnCompletion', 'OnCompletion'],
    ['ApplicationArgs', 'ApplicationArgs'],
    ['NumAppArgs', 'NumAppArgs'],
    ['Accounts', 'Accounts'],
    ['NumAccounts', 'NumAccounts'],
    ['ApprovalProgram', 'ApprovalProgram'],
    ['ClearStateProgram', 'ClearStateProgram'],
    ['RekeyTo', 'RekeyTo'],
    ['ConfigAsset', 'ConfigAsset'],
    ['ConfigAssetTotal', 'ConfigAssetTotal'],
    ['ConfigAssetDecimals', 'ConfigAssetDecimals'],
    ['ConfigAssetDefaultFrozen', 'ConfigAssetDefaultFrozen'],
    ['ConfigAssetUnitName', 'ConfigAssetUnitName'],
    ['ConfigAssetName', 'ConfigAssetName'],
    ['ConfigAssetURL', 'ConfigAssetURL'],
    ['ConfigAssetMetadataHash', 'ConfigAssetMetadataHash'],
    ['ConfigAssetManager', 'ConfigAssetManager'],
    ['ConfigAssetReserve', 'ConfigAssetReserve'],
    ['ConfigAssetFreeze', 'ConfigAssetFreeze'],
    ['ConfigAssetClawback', 'ConfigAssetClawback'],
    ['FreezeAsset', 'FreezeAsset'],
    ['FreezeAssetAccount', 'FreezeAssetAccount'],
    ['FreezeAssetFrozen', 'FreezeAssetFrozen'],
    ['Assets', 'Assets'],
    ['NumAssets', 'NumAssets'],
    ['Applications', 'Applications'],
    ['NumApplications', 'NumApplications'],
    ['GlobalNumUint', 'GlobalNumUint'],
    ['GlobalNumByteSlice', 'GlobalNumByteSlice'],
    ['LocalNumUint', 'LocalNumUint'],
    ['LocalNumByteSlice', 'LocalNumByteSlice'],
    ['ExtraProgramPages', 'ExtraProgramPages'],
    ['Nonparticipation', 'Nonparticipation'],
    ['Logs', 'Logs'],
    ['NumLogs', 'NumLogs'],
    ['CreatedAssetID', 'CreatedAssetID'],
    ['CreatedApplicationID', 'CreatedApplicationID'],
    ['LastLog', 'LastLog'],
    ['StateProofPK', 'StateProofPK'],
    ['ApprovalProgramPages', 'ApprovalProgramPages'],
    ['NumApprovalProgramPages', 'NumApprovalProgramPages'],
    ['ClearStateProgramPages', 'ClearStateProgramPages'],
    ['NumClearStateProgramPages', 'NumClearStateProgramPages'],
  ],
})
export const txnaPType = new IntrinsicEnumType({
  name: 'txna',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['ApplicationArgs', 'ApplicationArgs'],
    ['Accounts', 'Accounts'],
    ['Assets', 'Assets'],
    ['Applications', 'Applications'],
    ['Logs', 'Logs'],
    ['ApprovalProgramPages', 'ApprovalProgramPages'],
    ['ClearStateProgramPages', 'ClearStateProgramPages'],
  ],
})
export const globalPType = new IntrinsicEnumType({
  name: 'global',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['MinTxnFee', 'MinTxnFee'],
    ['MinBalance', 'MinBalance'],
    ['MaxTxnLife', 'MaxTxnLife'],
    ['ZeroAddress', 'ZeroAddress'],
    ['GroupSize', 'GroupSize'],
    ['LogicSigVersion', 'LogicSigVersion'],
    ['Round', 'Round'],
    ['LatestTimestamp', 'LatestTimestamp'],
    ['CurrentApplicationID', 'CurrentApplicationID'],
    ['CreatorAddress', 'CreatorAddress'],
    ['CurrentApplicationAddress', 'CurrentApplicationAddress'],
    ['GroupID', 'GroupID'],
    ['OpcodeBudget', 'OpcodeBudget'],
    ['CallerApplicationID', 'CallerApplicationID'],
    ['CallerApplicationAddress', 'CallerApplicationAddress'],
    ['AssetCreateMinBalance', 'AssetCreateMinBalance'],
    ['AssetOptInMinBalance', 'AssetOptInMinBalance'],
    ['GenesisHash', 'GenesisHash'],
  ],
})
export const itxnFieldPType = new IntrinsicEnumType({
  name: 'itxn_field',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['Sender', 'Sender'],
    ['Fee', 'Fee'],
    ['Note', 'Note'],
    ['Receiver', 'Receiver'],
    ['Amount', 'Amount'],
    ['CloseRemainderTo', 'CloseRemainderTo'],
    ['VotePK', 'VotePK'],
    ['SelectionPK', 'SelectionPK'],
    ['VoteFirst', 'VoteFirst'],
    ['VoteLast', 'VoteLast'],
    ['VoteKeyDilution', 'VoteKeyDilution'],
    ['Type', 'Type'],
    ['TypeEnum', 'TypeEnum'],
    ['XferAsset', 'XferAsset'],
    ['AssetAmount', 'AssetAmount'],
    ['AssetSender', 'AssetSender'],
    ['AssetReceiver', 'AssetReceiver'],
    ['AssetCloseTo', 'AssetCloseTo'],
    ['ApplicationID', 'ApplicationID'],
    ['OnCompletion', 'OnCompletion'],
    ['ApplicationArgs', 'ApplicationArgs'],
    ['Accounts', 'Accounts'],
    ['ApprovalProgram', 'ApprovalProgram'],
    ['ClearStateProgram', 'ClearStateProgram'],
    ['RekeyTo', 'RekeyTo'],
    ['ConfigAsset', 'ConfigAsset'],
    ['ConfigAssetTotal', 'ConfigAssetTotal'],
    ['ConfigAssetDecimals', 'ConfigAssetDecimals'],
    ['ConfigAssetDefaultFrozen', 'ConfigAssetDefaultFrozen'],
    ['ConfigAssetUnitName', 'ConfigAssetUnitName'],
    ['ConfigAssetName', 'ConfigAssetName'],
    ['ConfigAssetURL', 'ConfigAssetURL'],
    ['ConfigAssetMetadataHash', 'ConfigAssetMetadataHash'],
    ['ConfigAssetManager', 'ConfigAssetManager'],
    ['ConfigAssetReserve', 'ConfigAssetReserve'],
    ['ConfigAssetFreeze', 'ConfigAssetFreeze'],
    ['ConfigAssetClawback', 'ConfigAssetClawback'],
    ['FreezeAsset', 'FreezeAsset'],
    ['FreezeAssetAccount', 'FreezeAssetAccount'],
    ['FreezeAssetFrozen', 'FreezeAssetFrozen'],
    ['Assets', 'Assets'],
    ['Applications', 'Applications'],
    ['GlobalNumUint', 'GlobalNumUint'],
    ['GlobalNumByteSlice', 'GlobalNumByteSlice'],
    ['LocalNumUint', 'LocalNumUint'],
    ['LocalNumByteSlice', 'LocalNumByteSlice'],
    ['ExtraProgramPages', 'ExtraProgramPages'],
    ['Nonparticipation', 'Nonparticipation'],
    ['StateProofPK', 'StateProofPK'],
    ['ApprovalProgramPages', 'ApprovalProgramPages'],
    ['ClearStateProgramPages', 'ClearStateProgramPages'],
  ],
})
export const jsonRefPType = new IntrinsicEnumType({
  name: 'json_ref',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [
    ['JSONString', 'JSONString'],
    ['JSONUint64', 'JSONUint64'],
    ['JSONObject', 'JSONObject'],
  ],
})
export const vrfVerifyPType = new IntrinsicEnumType({
  name: 'vrf_verify',
  module: '@algorandfoundation/algo-ts/op-types.d.ts',
  members: [['VrfAlgorand', 'VrfAlgorand']],
})
