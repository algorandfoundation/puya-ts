/* THIS FILE IS GENERATED BY ~/scripts/generate-txn-types.ts - DO NOT MODIFY DIRECTLY */
import { NoImplementation } from './internal/errors'
import { OnCompleteAction } from './on-complete-action'
import { bytes, uint64 } from './primitives'
import { Account, Application, Asset } from './reference'
import { TransactionType } from './transactions'

const isGtxn = Symbol('isGtxn')
export namespace gtxn {
  /**
   * A group transaction of type 'pay'
   */
  export interface PaymentTxn {
    /** @hidden */
    [isGtxn]?: true
    /**
     * 32 byte address
     */
    readonly sender: Account
    /**
     * microalgos
     */
    readonly fee: uint64
    /**
     * round number
     */
    readonly firstValid: uint64
    /**
     * UNIX timestamp of block before txn.FirstValid. Fails if negative
     */
    readonly firstValidTime: uint64
    /**
     * round number
     */
    readonly lastValid: uint64
    /**
     * Any data up to 1024 bytes
     */
    readonly note: bytes
    /**
     * 32 byte lease value
     */
    readonly lease: bytes<32>
    /**
     * Transaction type as bytes
     */
    readonly typeBytes: bytes
    /**
     * Transaction type
     */
    readonly type: TransactionType.Payment
    /**
     * Position of this transaction within an atomic group
     * A stand-alone transaction is implicitly element 0 in a group of 1
     */
    readonly groupIndex: uint64
    /**
     * The computed ID for this transaction. 32 bytes.
     */
    readonly txnId: bytes<32>
    /**
     * 32 byte Sender's new AuthAddr
     */
    readonly rekeyTo: Account
    /**
     * 32 byte address
     */
    readonly receiver: Account
    /**
     * microalgos
     */
    readonly amount: uint64
    /**
     * 32 byte address
     */
    readonly closeRemainderTo: Account
  }
  /**
   * A group transaction of type 'keyreg'
   */
  export interface KeyRegistrationTxn {
    /** @hidden */
    [isGtxn]?: true
    /**
     * 32 byte address
     */
    readonly sender: Account
    /**
     * microalgos
     */
    readonly fee: uint64
    /**
     * round number
     */
    readonly firstValid: uint64
    /**
     * UNIX timestamp of block before txn.FirstValid. Fails if negative
     */
    readonly firstValidTime: uint64
    /**
     * round number
     */
    readonly lastValid: uint64
    /**
     * Any data up to 1024 bytes
     */
    readonly note: bytes
    /**
     * 32 byte lease value
     */
    readonly lease: bytes<32>
    /**
     * Transaction type as bytes
     */
    readonly typeBytes: bytes
    /**
     * Transaction type
     */
    readonly type: TransactionType.KeyRegistration
    /**
     * Position of this transaction within an atomic group
     * A stand-alone transaction is implicitly element 0 in a group of 1
     */
    readonly groupIndex: uint64
    /**
     * The computed ID for this transaction. 32 bytes.
     */
    readonly txnId: bytes<32>
    /**
     * 32 byte Sender's new AuthAddr
     */
    readonly rekeyTo: Account
    /**
     * 32 byte address
     */
    readonly voteKey: bytes<32>
    /**
     * 32 byte address
     */
    readonly selectionKey: bytes<32>
    /**
     * The first round that the participation key is valid.
     */
    readonly voteFirst: uint64
    /**
     * The last round that the participation key is valid.
     */
    readonly voteLast: uint64
    /**
     * Dilution for the 2-level participation key
     */
    readonly voteKeyDilution: uint64
    /**
     * Marks an account nonparticipating for rewards
     */
    readonly nonparticipation: boolean
    /**
     * 64 byte state proof public key
     */
    readonly stateProofKey: bytes<64>
  }
  /**
   * A group transaction of type 'acfg'
   */
  export interface AssetConfigTxn {
    /** @hidden */
    [isGtxn]?: true
    /**
     * 32 byte address
     */
    readonly sender: Account
    /**
     * microalgos
     */
    readonly fee: uint64
    /**
     * round number
     */
    readonly firstValid: uint64
    /**
     * UNIX timestamp of block before txn.FirstValid. Fails if negative
     */
    readonly firstValidTime: uint64
    /**
     * round number
     */
    readonly lastValid: uint64
    /**
     * Any data up to 1024 bytes
     */
    readonly note: bytes
    /**
     * 32 byte lease value
     */
    readonly lease: bytes<32>
    /**
     * Transaction type as bytes
     */
    readonly typeBytes: bytes
    /**
     * Transaction type
     */
    readonly type: TransactionType.AssetConfig
    /**
     * Position of this transaction within an atomic group
     * A stand-alone transaction is implicitly element 0 in a group of 1
     */
    readonly groupIndex: uint64
    /**
     * The computed ID for this transaction. 32 bytes.
     */
    readonly txnId: bytes<32>
    /**
     * 32 byte Sender's new AuthAddr
     */
    readonly rekeyTo: Account
    /**
     * Asset ID in asset config transaction
     */
    readonly configAsset: Asset
    /**
     * The asset created by this transaction
     */
    readonly createdAsset: Asset
    /**
     * Total number of units of this asset created
     */
    readonly total: uint64
    /**
     * Number of digits to display after the decimal place when displaying the asset
     */
    readonly decimals: uint64
    /**
     * Whether the asset's slots are frozen by default or not, 0 or 1
     */
    readonly defaultFrozen: boolean
    /**
     * Unit name of the asset
     */
    readonly unitName: bytes
    /**
     * The asset name
     */
    readonly assetName: bytes
    /**
     * URL
     */
    readonly url: bytes
    /**
     * 32 byte commitment to unspecified asset metadata
     */
    readonly metadataHash: bytes<32>
    /**
     * 32 byte address
     */
    readonly manager: Account
    /**
     * 32 byte address
     */
    readonly reserve: Account
    /**
     * 32 byte address
     */
    readonly freeze: Account
    /**
     * 32 byte address
     */
    readonly clawback: Account
  }
  /**
   * A group transaction of type 'axfer'
   */
  export interface AssetTransferTxn {
    /** @hidden */
    [isGtxn]?: true
    /**
     * 32 byte address
     */
    readonly sender: Account
    /**
     * microalgos
     */
    readonly fee: uint64
    /**
     * round number
     */
    readonly firstValid: uint64
    /**
     * UNIX timestamp of block before txn.FirstValid. Fails if negative
     */
    readonly firstValidTime: uint64
    /**
     * round number
     */
    readonly lastValid: uint64
    /**
     * Any data up to 1024 bytes
     */
    readonly note: bytes
    /**
     * 32 byte lease value
     */
    readonly lease: bytes<32>
    /**
     * Transaction type as bytes
     */
    readonly typeBytes: bytes
    /**
     * Transaction type
     */
    readonly type: TransactionType.AssetTransfer
    /**
     * Position of this transaction within an atomic group
     * A stand-alone transaction is implicitly element 0 in a group of 1
     */
    readonly groupIndex: uint64
    /**
     * The computed ID for this transaction. 32 bytes.
     */
    readonly txnId: bytes<32>
    /**
     * 32 byte Sender's new AuthAddr
     */
    readonly rekeyTo: Account
    /**
     * Asset ID
     */
    readonly xferAsset: Asset
    /**
     * value in Asset's units
     */
    readonly assetAmount: uint64
    /**
     * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
     */
    readonly assetSender: Account
    /**
     * 32 byte address
     */
    readonly assetReceiver: Account
    /**
     * 32 byte address
     */
    readonly assetCloseTo: Account
  }
  /**
   * A group transaction of type 'afrz'
   */
  export interface AssetFreezeTxn {
    /** @hidden */
    [isGtxn]?: true
    /**
     * 32 byte address
     */
    readonly sender: Account
    /**
     * microalgos
     */
    readonly fee: uint64
    /**
     * round number
     */
    readonly firstValid: uint64
    /**
     * UNIX timestamp of block before txn.FirstValid. Fails if negative
     */
    readonly firstValidTime: uint64
    /**
     * round number
     */
    readonly lastValid: uint64
    /**
     * Any data up to 1024 bytes
     */
    readonly note: bytes
    /**
     * 32 byte lease value
     */
    readonly lease: bytes<32>
    /**
     * Transaction type as bytes
     */
    readonly typeBytes: bytes
    /**
     * Transaction type
     */
    readonly type: TransactionType.AssetFreeze
    /**
     * Position of this transaction within an atomic group
     * A stand-alone transaction is implicitly element 0 in a group of 1
     */
    readonly groupIndex: uint64
    /**
     * The computed ID for this transaction. 32 bytes.
     */
    readonly txnId: bytes<32>
    /**
     * 32 byte Sender's new AuthAddr
     */
    readonly rekeyTo: Account
    /**
     * Asset ID being frozen or un-frozen
     */
    readonly freezeAsset: Asset
    /**
     * 32 byte address of the account whose asset slot is being frozen or un-frozen
     */
    readonly freezeAccount: Account
    /**
     * The new frozen value
     */
    readonly frozen: boolean
  }
  /**
   * A group transaction of type 'appl'
   */
  export interface ApplicationCallTxn {
    /** @hidden */
    [isGtxn]?: true
    /**
     * 32 byte address
     */
    readonly sender: Account
    /**
     * microalgos
     */
    readonly fee: uint64
    /**
     * round number
     */
    readonly firstValid: uint64
    /**
     * UNIX timestamp of block before txn.FirstValid. Fails if negative
     */
    readonly firstValidTime: uint64
    /**
     * round number
     */
    readonly lastValid: uint64
    /**
     * Any data up to 1024 bytes
     */
    readonly note: bytes
    /**
     * 32 byte lease value
     */
    readonly lease: bytes<32>
    /**
     * Transaction type as bytes
     */
    readonly typeBytes: bytes
    /**
     * Transaction type
     */
    readonly type: TransactionType.ApplicationCall
    /**
     * Position of this transaction within an atomic group
     * A stand-alone transaction is implicitly element 0 in a group of 1
     */
    readonly groupIndex: uint64
    /**
     * The computed ID for this transaction. 32 bytes.
     */
    readonly txnId: bytes<32>
    /**
     * 32 byte Sender's new AuthAddr
     */
    readonly rekeyTo: Account
    /**
     * ApplicationID from ApplicationCall transaction
     */
    readonly appId: Application
    /**
     * ApplicationCall transaction on completion action
     */
    readonly onCompletion: OnCompleteAction
    /**
     * Number of ApplicationArgs
     */
    readonly numAppArgs: uint64
    /**
     * Number of ApplicationArgs
     */
    readonly numAccounts: uint64
    /**
     * The first page of the Approval program
     */
    readonly approvalProgram: bytes
    /**
     * The first page of the Clear State program
     */
    readonly clearStateProgram: bytes
    /**
     * Number of Assets
     */
    readonly numAssets: uint64
    /**
     * Number of Applications
     */
    readonly numApps: uint64
    /**
     * Number of global state integers this application makes use of.
     */
    readonly globalNumUint: uint64
    /**
     * Number of global state byteslices this application makes use of.
     */
    readonly globalNumBytes: uint64
    /**
     * Number of local state integers this application makes use of.
     */
    readonly localNumUint: uint64
    /**
     * Number of local state byteslices this application makes use of.
     */
    readonly localNumBytes: uint64
    /**
     * Number of additional pages for each of the application's approval and clear state program
     */
    readonly extraProgramPages: uint64
    /**
     * The last message emitted. Empty bytes if none were emitted. App mode only
     */
    readonly lastLog: bytes
    /**
     * Read application logs
     * @param index Index of the log to get
     */
    logs(index: uint64): bytes
    /**
     * Number of Approval Program pages
     */
    readonly numApprovalProgramPages: uint64
    /**
     * All approval program pages
     * @param index Index of the page to get
     */
    approvalProgramPages(index: uint64): bytes
    /**
     * Number of Clear State Program pages
     */
    readonly numClearStateProgramPages: uint64
    /**
     * All clear state program pages
     * @param index Index of the page to get
     */
    clearStateProgramPages(index: uint64): bytes
    /**
     * Arguments passed to the application in the ApplicationCall transaction
     * @param index Index of the arg to get
     */
    appArgs(index: uint64): bytes
    /**
     * Accounts listed in the ApplicationCall transaction
     * @param index Index of the account to get
     */
    accounts(index: uint64): Account
    /**
     * Foreign Assets listed in the ApplicationCall transaction
     * @param index Index of the asset to get
     */
    assets(index: uint64): Asset
    /**
     * Foreign Apps listed in the ApplicationCall transaction
     * @param index Index of the application to get
     */
    apps(index: uint64): Application
    /**
     * The id of the created application
     */
    readonly createdApp: Application
    /**
     * Number of logs
     */
    readonly numLogs: uint64
  }
  /**
   * A group transaction of any type
   */
  export type Transaction = PaymentTxn | KeyRegistrationTxn | AssetConfigTxn | AssetTransferTxn | AssetFreezeTxn | ApplicationCallTxn
  /**
   * Get the nth transaction in the group without verifying its type
   * @param n The index of the txn in the group
   */
  export function Transaction(n: uint64): Transaction {
    throw new NoImplementation()
  }
  /**
   * Get the nth transaction in the group
   * Verifies the txn type is 'pay'
   * @param n The index of the txn in the group
   */
  export function PaymentTxn(n: uint64): PaymentTxn {
    throw new NoImplementation()
  }
  /**
   * Get the nth transaction in the group
   * Verifies the txn type is 'keyreg'
   * @param n The index of the txn in the group
   */
  export function KeyRegistrationTxn(n: uint64): KeyRegistrationTxn {
    throw new NoImplementation()
  }
  /**
   * Get the nth transaction in the group
   * Verifies the txn type is 'acfg'
   * @param n The index of the txn in the group
   */
  export function AssetConfigTxn(n: uint64): AssetConfigTxn {
    throw new NoImplementation()
  }
  /**
   * Get the nth transaction in the group
   * Verifies the txn type is 'axfer'
   * @param n The index of the txn in the group
   */
  export function AssetTransferTxn(n: uint64): AssetTransferTxn {
    throw new NoImplementation()
  }
  /**
   * Get the nth transaction in the group
   * Verifies the txn type is 'afrz'
   * @param n The index of the txn in the group
   */
  export function AssetFreezeTxn(n: uint64): AssetFreezeTxn {
    throw new NoImplementation()
  }
  /**
   * Get the nth transaction in the group
   * Verifies the txn type is 'appl'
   * @param n The index of the txn in the group
   */
  export function ApplicationCallTxn(n: uint64): ApplicationCallTxn {
    throw new NoImplementation()
  }
}
