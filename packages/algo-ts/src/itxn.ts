/* THIS FILE IS GENERATED BY ~/scripts/generate-txn-types.ts - DO NOT MODIFY DIRECTLY */
import { NoImplementation } from './internal/errors'
import { OnCompleteAction } from './on-complete-action'
import { bytes, NTuple, uint64 } from './primitives'
import { Account, Application, Asset } from './reference'
import { TransactionType } from './transactions'

const isItxn = Symbol('isItxn')

/**
 * An inner transaction of type 'pay'
 */
export interface PaymentInnerTxn {
  /** @hidden */
  [isItxn]?: true
  /**
   * 32 byte address
   */
  readonly sender: Account
  /**
   * microalgos
   */
  readonly fee: uint64
  /**
   * round number
   */
  readonly firstValid: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  readonly firstValidTime: uint64
  /**
   * round number
   */
  readonly lastValid: uint64
  /**
   * Any data up to 1024 bytes
   */
  readonly note: bytes
  /**
   * 32 byte lease value
   */
  readonly lease: bytes
  /**
   * Transaction type as bytes
   */
  readonly typeBytes: bytes
  /**
   * Transaction type
   */
  readonly type: TransactionType.Payment
  /**
   * Position of this transaction within an atomic group
   * A stand-alone transaction is implicitly element 0 in a group of 1
   */
  readonly groupIndex: uint64
  /**
   * The computed ID for this transaction. 32 bytes.
   */
  readonly txnId: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  readonly rekeyTo: Account
  /**
   * 32 byte address
   */
  readonly receiver: Account
  /**
   * microalgos
   */
  readonly amount: uint64
  /**
   * 32 byte address
   */
  readonly closeRemainderTo: Account
}
/**
 * An inner transaction of type 'keyreg'
 */
export interface KeyRegistrationInnerTxn {
  /** @hidden */
  [isItxn]?: true
  /**
   * 32 byte address
   */
  readonly sender: Account
  /**
   * microalgos
   */
  readonly fee: uint64
  /**
   * round number
   */
  readonly firstValid: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  readonly firstValidTime: uint64
  /**
   * round number
   */
  readonly lastValid: uint64
  /**
   * Any data up to 1024 bytes
   */
  readonly note: bytes
  /**
   * 32 byte lease value
   */
  readonly lease: bytes
  /**
   * Transaction type as bytes
   */
  readonly typeBytes: bytes
  /**
   * Transaction type
   */
  readonly type: TransactionType.KeyRegistration
  /**
   * Position of this transaction within an atomic group
   * A stand-alone transaction is implicitly element 0 in a group of 1
   */
  readonly groupIndex: uint64
  /**
   * The computed ID for this transaction. 32 bytes.
   */
  readonly txnId: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  readonly rekeyTo: Account
  /**
   * 32 byte address
   */
  readonly voteKey: bytes
  /**
   * 32 byte address
   */
  readonly selectionKey: bytes
  /**
   * The first round that the participation key is valid.
   */
  readonly voteFirst: uint64
  /**
   * The last round that the participation key is valid.
   */
  readonly voteLast: uint64
  /**
   * Dilution for the 2-level participation key
   */
  readonly voteKeyDilution: uint64
  /**
   * Marks an account nonparticipating for rewards
   */
  readonly nonparticipation: boolean
  /**
   * 64 byte state proof public key
   */
  readonly stateProofKey: bytes
}
/**
 * An inner transaction of type 'acfg'
 */
export interface AssetConfigInnerTxn {
  /** @hidden */
  [isItxn]?: true
  /**
   * 32 byte address
   */
  readonly sender: Account
  /**
   * microalgos
   */
  readonly fee: uint64
  /**
   * round number
   */
  readonly firstValid: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  readonly firstValidTime: uint64
  /**
   * round number
   */
  readonly lastValid: uint64
  /**
   * Any data up to 1024 bytes
   */
  readonly note: bytes
  /**
   * 32 byte lease value
   */
  readonly lease: bytes
  /**
   * Transaction type as bytes
   */
  readonly typeBytes: bytes
  /**
   * Transaction type
   */
  readonly type: TransactionType.AssetConfig
  /**
   * Position of this transaction within an atomic group
   * A stand-alone transaction is implicitly element 0 in a group of 1
   */
  readonly groupIndex: uint64
  /**
   * The computed ID for this transaction. 32 bytes.
   */
  readonly txnId: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  readonly rekeyTo: Account
  /**
   * Asset ID in asset config transaction
   */
  readonly configAsset: Asset
  /**
   * The asset created by this transaction
   */
  readonly createdAsset: Asset
  /**
   * Total number of units of this asset created
   */
  readonly total: uint64
  /**
   * Number of digits to display after the decimal place when displaying the asset
   */
  readonly decimals: uint64
  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   */
  readonly defaultFrozen: boolean
  /**
   * Unit name of the asset
   */
  readonly unitName: bytes
  /**
   * The asset name
   */
  readonly assetName: bytes
  /**
   * URL
   */
  readonly url: bytes
  /**
   * 32 byte commitment to unspecified asset metadata
   */
  readonly metadataHash: bytes
  /**
   * 32 byte address
   */
  readonly manager: Account
  /**
   * 32 byte address
   */
  readonly reserve: Account
  /**
   * 32 byte address
   */
  readonly freeze: Account
  /**
   * 32 byte address
   */
  readonly clawback: Account
}
/**
 * An inner transaction of type 'axfer'
 */
export interface AssetTransferInnerTxn {
  /** @hidden */
  [isItxn]?: true
  /**
   * 32 byte address
   */
  readonly sender: Account
  /**
   * microalgos
   */
  readonly fee: uint64
  /**
   * round number
   */
  readonly firstValid: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  readonly firstValidTime: uint64
  /**
   * round number
   */
  readonly lastValid: uint64
  /**
   * Any data up to 1024 bytes
   */
  readonly note: bytes
  /**
   * 32 byte lease value
   */
  readonly lease: bytes
  /**
   * Transaction type as bytes
   */
  readonly typeBytes: bytes
  /**
   * Transaction type
   */
  readonly type: TransactionType.AssetTransfer
  /**
   * Position of this transaction within an atomic group
   * A stand-alone transaction is implicitly element 0 in a group of 1
   */
  readonly groupIndex: uint64
  /**
   * The computed ID for this transaction. 32 bytes.
   */
  readonly txnId: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  readonly rekeyTo: Account
  /**
   * Asset ID
   */
  readonly xferAsset: Asset
  /**
   * value in Asset's units
   */
  readonly assetAmount: uint64
  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   */
  readonly assetSender: Account
  /**
   * 32 byte address
   */
  readonly assetReceiver: Account
  /**
   * 32 byte address
   */
  readonly assetCloseTo: Account
}
/**
 * An inner transaction of type 'afrz'
 */
export interface AssetFreezeInnerTxn {
  /** @hidden */
  [isItxn]?: true
  /**
   * 32 byte address
   */
  readonly sender: Account
  /**
   * microalgos
   */
  readonly fee: uint64
  /**
   * round number
   */
  readonly firstValid: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  readonly firstValidTime: uint64
  /**
   * round number
   */
  readonly lastValid: uint64
  /**
   * Any data up to 1024 bytes
   */
  readonly note: bytes
  /**
   * 32 byte lease value
   */
  readonly lease: bytes
  /**
   * Transaction type as bytes
   */
  readonly typeBytes: bytes
  /**
   * Transaction type
   */
  readonly type: TransactionType.AssetFreeze
  /**
   * Position of this transaction within an atomic group
   * A stand-alone transaction is implicitly element 0 in a group of 1
   */
  readonly groupIndex: uint64
  /**
   * The computed ID for this transaction. 32 bytes.
   */
  readonly txnId: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  readonly rekeyTo: Account
  /**
   * Asset ID being frozen or un-frozen
   */
  readonly freezeAsset: Asset
  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   */
  readonly freezeAccount: Account
  /**
   * The new frozen value
   */
  readonly frozen: boolean
}
/**
 * An inner transaction of type 'appl'
 */
export interface ApplicationCallInnerTxn {
  /** @hidden */
  [isItxn]?: true
  /**
   * 32 byte address
   */
  readonly sender: Account
  /**
   * microalgos
   */
  readonly fee: uint64
  /**
   * round number
   */
  readonly firstValid: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  readonly firstValidTime: uint64
  /**
   * round number
   */
  readonly lastValid: uint64
  /**
   * Any data up to 1024 bytes
   */
  readonly note: bytes
  /**
   * 32 byte lease value
   */
  readonly lease: bytes
  /**
   * Transaction type as bytes
   */
  readonly typeBytes: bytes
  /**
   * Transaction type
   */
  readonly type: TransactionType.ApplicationCall
  /**
   * Position of this transaction within an atomic group
   * A stand-alone transaction is implicitly element 0 in a group of 1
   */
  readonly groupIndex: uint64
  /**
   * The computed ID for this transaction. 32 bytes.
   */
  readonly txnId: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  readonly rekeyTo: Account
  /**
   * ApplicationID from ApplicationCall transaction
   */
  readonly appId: Application
  /**
   * ApplicationCall transaction on completion action
   */
  readonly onCompletion: OnCompleteAction
  /**
   * Number of ApplicationArgs
   */
  readonly numAppArgs: uint64
  /**
   * Number of ApplicationArgs
   */
  readonly numAccounts: uint64
  /**
   * The first page of the Approval program
   */
  readonly approvalProgram: bytes
  /**
   * The first page of the Clear State program
   */
  readonly clearStateProgram: bytes
  /**
   * Number of Assets
   */
  readonly numAssets: uint64
  /**
   * Number of Applications
   */
  readonly numApps: uint64
  /**
   * Number of global state integers this application makes use of.
   */
  readonly globalNumUint: uint64
  /**
   * Number of global state byteslices this application makes use of.
   */
  readonly globalNumBytes: uint64
  /**
   * Number of local state integers this application makes use of.
   */
  readonly localNumUint: uint64
  /**
   * Number of local state byteslices this application makes use of.
   */
  readonly localNumBytes: uint64
  /**
   * Number of additional pages for each of the application's approval and clear state program
   */
  readonly extraProgramPages: uint64
  /**
   * The last message emitted. Empty bytes if none were emitted. App mode only
   */
  readonly lastLog: bytes
  /**
   * Read application logs
   * @param index Index of the log to get
   */
  logs(index: uint64): bytes
  /**
   * Number of Approval Program pages
   */
  readonly numApprovalProgramPages: uint64
  /**
   * All approval program pages
   * @param index Index of the page to get
   */
  approvalProgramPages(index: uint64): bytes
  /**
   * Number of Clear State Program pages
   */
  readonly numClearStateProgramPages: uint64
  /**
   * All clear state program pages
   * @param index Index of the page to get
   */
  clearStateProgramPages(index: uint64): bytes
  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * @param index Index of the arg to get
   */
  appArgs(index: uint64): bytes
  /**
   * Accounts listed in the ApplicationCall transaction
   * @param index Index of the account to get
   */
  accounts(index: uint64): Account
  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * @param index Index of the asset to get
   */
  assets(index: uint64): Asset
  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * @param index Index of the application to get
   */
  apps(index: uint64): Application
  /**
   * The id of the created application
   */
  readonly createdApp: Application
  /**
   * Number of logs
   */
  readonly numLogs: uint64
}
export interface PaymentFields {
  /**
   * 32 byte address
   */
  sender?: Account | bytes
  /**
   * microalgos
   */
  fee?: uint64
  /**
   * round number
   */
  firstValid?: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  firstValidTime?: uint64
  /**
   * round number
   */
  lastValid?: uint64
  /**
   * Any data up to 1024 bytes
   */
  note?: bytes | string
  /**
   * 32 byte lease value
   */
  lease?: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  rekeyTo?: Account | bytes
  /**
   * 32 byte address
   */
  receiver?: Account | bytes
  /**
   * microalgos
   */
  amount?: uint64
  /**
   * 32 byte address
   */
  closeRemainderTo?: Account | bytes
}
export interface KeyRegistrationFields {
  /**
   * 32 byte address
   */
  sender?: Account | bytes
  /**
   * microalgos
   */
  fee?: uint64
  /**
   * round number
   */
  firstValid?: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  firstValidTime?: uint64
  /**
   * round number
   */
  lastValid?: uint64
  /**
   * Any data up to 1024 bytes
   */
  note?: bytes | string
  /**
   * 32 byte lease value
   */
  lease?: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  rekeyTo?: Account | bytes
  /**
   * 32 byte address
   */
  voteKey?: bytes
  /**
   * 32 byte address
   */
  selectionKey?: bytes
  /**
   * The first round that the participation key is valid.
   */
  voteFirst?: uint64
  /**
   * The last round that the participation key is valid.
   */
  voteLast?: uint64
  /**
   * Dilution for the 2-level participation key
   */
  voteKeyDilution?: uint64
  /**
   * Marks an account nonparticipating for rewards
   */
  nonparticipation?: boolean
  /**
   * 64 byte state proof public key
   */
  stateProofKey?: bytes
}
export interface AssetConfigFields {
  /**
   * 32 byte address
   */
  sender?: Account | bytes
  /**
   * microalgos
   */
  fee?: uint64
  /**
   * round number
   */
  firstValid?: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  firstValidTime?: uint64
  /**
   * round number
   */
  lastValid?: uint64
  /**
   * Any data up to 1024 bytes
   */
  note?: bytes | string
  /**
   * 32 byte lease value
   */
  lease?: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  rekeyTo?: Account | bytes
  /**
   * Asset ID in asset config transaction
   */
  configAsset?: Asset | uint64
  /**
   * Total number of units of this asset created
   */
  total?: uint64
  /**
   * Number of digits to display after the decimal place when displaying the asset
   */
  decimals?: uint64
  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   */
  defaultFrozen?: boolean
  /**
   * Unit name of the asset
   */
  unitName?: bytes | string
  /**
   * The asset name
   */
  assetName?: bytes | string
  /**
   * URL
   */
  url?: bytes | string
  /**
   * 32 byte commitment to unspecified asset metadata
   */
  metadataHash?: bytes
  /**
   * 32 byte address
   */
  manager?: Account | bytes
  /**
   * 32 byte address
   */
  reserve?: Account | bytes
  /**
   * 32 byte address
   */
  freeze?: Account | bytes
  /**
   * 32 byte address
   */
  clawback?: Account | bytes
}
export interface AssetTransferFields {
  /**
   * 32 byte address
   */
  sender?: Account | bytes
  /**
   * microalgos
   */
  fee?: uint64
  /**
   * round number
   */
  firstValid?: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  firstValidTime?: uint64
  /**
   * round number
   */
  lastValid?: uint64
  /**
   * Any data up to 1024 bytes
   */
  note?: bytes | string
  /**
   * 32 byte lease value
   */
  lease?: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  rekeyTo?: Account | bytes
  /**
   * Asset ID
   */
  xferAsset?: Asset | uint64
  /**
   * value in Asset's units
   */
  assetAmount?: uint64
  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   */
  assetSender?: Account | bytes
  /**
   * 32 byte address
   */
  assetReceiver?: Account | bytes
  /**
   * 32 byte address
   */
  assetCloseTo?: Account | bytes
}
export interface AssetFreezeFields {
  /**
   * 32 byte address
   */
  sender?: Account | bytes
  /**
   * microalgos
   */
  fee?: uint64
  /**
   * round number
   */
  firstValid?: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  firstValidTime?: uint64
  /**
   * round number
   */
  lastValid?: uint64
  /**
   * Any data up to 1024 bytes
   */
  note?: bytes | string
  /**
   * 32 byte lease value
   */
  lease?: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  rekeyTo?: Account | bytes
  /**
   * Asset ID being frozen or un-frozen
   */
  freezeAsset?: Asset | uint64
  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   */
  freezeAccount?: Account | bytes
  /**
   * The new frozen value
   */
  frozen?: boolean
}
export interface ApplicationCallFields {
  /**
   * 32 byte address
   */
  sender?: Account | bytes
  /**
   * microalgos
   */
  fee?: uint64
  /**
   * round number
   */
  firstValid?: uint64
  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   */
  firstValidTime?: uint64
  /**
   * round number
   */
  lastValid?: uint64
  /**
   * Any data up to 1024 bytes
   */
  note?: bytes | string
  /**
   * 32 byte lease value
   */
  lease?: bytes
  /**
   * 32 byte Sender's new AuthAddr
   */
  rekeyTo?: Account | bytes
  /**
   * ApplicationID from ApplicationCall transaction
   */
  appId?: Application | uint64
  /**
   * ApplicationCall transaction on completion action
   */
  onCompletion?: OnCompleteAction
  /**
   * Number of global state integers this application makes use of.
   */
  globalNumUint?: uint64
  /**
   * Number of global state byteslices this application makes use of.
   */
  globalNumBytes?: uint64
  /**
   * Number of local state integers this application makes use of.
   */
  localNumUint?: uint64
  /**
   * Number of local state byteslices this application makes use of.
   */
  localNumBytes?: uint64
  /**
   * Number of additional pages for each of the application's approval and clear state program
   */
  extraProgramPages?: uint64
  /**
   * All approval program pages
   * @param index Index of the page to get
   */
  approvalProgram?: bytes | readonly [...bytes[]]
  /**
   * All clear state program pages
   * @param index Index of the page to get
   */
  clearStateProgram?: bytes | readonly [...bytes[]]
  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * @param index Index of the arg to get
   */
  appArgs?: readonly [...unknown[]]
  /**
   * Accounts listed in the ApplicationCall transaction
   * @param index Index of the account to get
   */
  accounts?: readonly [...(Account | bytes)[]]
  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * @param index Index of the asset to get
   */
  assets?: readonly [...(Asset | uint64)[]]
  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * @param index Index of the application to get
   */
  apps?: readonly [...(Application | uint64)[]]
}
/**
 * A union of all ItxnParams types
 */
export type ItxnParams =
  | PaymentItxnParams
  | KeyRegistrationItxnParams
  | AssetConfigItxnParams
  | AssetTransferItxnParams
  | AssetFreezeItxnParams
  | ApplicationCallItxnParams
/**
 * A union of all InnerTxn types
 */
export type InnerTxn =
  | PaymentInnerTxn
  | KeyRegistrationInnerTxn
  | AssetConfigInnerTxn
  | AssetTransferInnerTxn
  | AssetFreezeInnerTxn
  | ApplicationCallInnerTxn
/**
 * Conditional type which returns the matching InnerTxn types for a given tuple of ItxnParams types
 */
export type TxnFor<TFields extends [...ItxnParams[]]> = TFields extends [{ submit(): infer TTxn }, ...infer TRest extends [...ItxnParams[]]]
  ? [TTxn, ...TxnFor<TRest>]
  : []
/**
 * Submit a group of ItxnParams objects and return the InnerTxn results
 */
export function submitGroup<TFields extends [...ItxnParams[]]>(...transactionFields: TFields): TxnFor<TFields> {
  throw new NoImplementation()
}
/**
 * Submit all staged ItxnParams and return the last n InnerTxn results, where n is the numResults parameter
 * @param numResults How many InnerTxn results to retrieve
 */
export function submitStaged<T extends number>(numResults: T): NTuple<InnerTxn, T> {
  throw new NoImplementation()
}
/**
 * Holds Payment fields which can be updated, cloned, or submitted.
 */
export abstract class PaymentItxnParams {
  /**
   * Submit an itxn with these fields and return the PaymentInnerTxn result
   */
  submit(): PaymentInnerTxn {
    throw new NoImplementation()
  }
  /**
   * Update one or more fields in this PaymentItxnParams object
   */
  set(fields: PaymentFields): void {
    throw new NoImplementation()
  }
  /**
   * Stage this itxn ready to be submitted in a group
   */
  stage(): void {
    throw new NoImplementation()
  }
  /**
   * Return a copy of this PaymentItxnParams object
   */
  copy(): PaymentItxnParams {
    throw new NoImplementation()
  }
}
/**
 * Create a new PaymentItxnParams object with the specified fields
 */
export function payment(fields: PaymentFields): PaymentItxnParams {
  throw new NoImplementation()
}
/**
 * Holds KeyRegistration fields which can be updated, cloned, or submitted.
 */
export abstract class KeyRegistrationItxnParams {
  /**
   * Submit an itxn with these fields and return the KeyRegistrationInnerTxn result
   */
  submit(): KeyRegistrationInnerTxn {
    throw new NoImplementation()
  }
  /**
   * Update one or more fields in this KeyRegistrationItxnParams object
   */
  set(fields: KeyRegistrationFields): void {
    throw new NoImplementation()
  }
  /**
   * Stage this itxn ready to be submitted in a group
   */
  stage(): void {
    throw new NoImplementation()
  }
  /**
   * Return a copy of this KeyRegistrationItxnParams object
   */
  copy(): KeyRegistrationItxnParams {
    throw new NoImplementation()
  }
}
/**
 * Create a new KeyRegistrationItxnParams object with the specified fields
 */
export function keyRegistration(fields: KeyRegistrationFields): KeyRegistrationItxnParams {
  throw new NoImplementation()
}
/**
 * Holds AssetConfig fields which can be updated, cloned, or submitted.
 */
export abstract class AssetConfigItxnParams {
  /**
   * Submit an itxn with these fields and return the AssetConfigInnerTxn result
   */
  submit(): AssetConfigInnerTxn {
    throw new NoImplementation()
  }
  /**
   * Update one or more fields in this AssetConfigItxnParams object
   */
  set(fields: AssetConfigFields): void {
    throw new NoImplementation()
  }
  /**
   * Stage this itxn ready to be submitted in a group
   */
  stage(): void {
    throw new NoImplementation()
  }
  /**
   * Return a copy of this AssetConfigItxnParams object
   */
  copy(): AssetConfigItxnParams {
    throw new NoImplementation()
  }
}
/**
 * Create a new AssetConfigItxnParams object with the specified fields
 */
export function assetConfig(fields: AssetConfigFields): AssetConfigItxnParams {
  throw new NoImplementation()
}
/**
 * Holds AssetTransfer fields which can be updated, cloned, or submitted.
 */
export abstract class AssetTransferItxnParams {
  /**
   * Submit an itxn with these fields and return the AssetTransferInnerTxn result
   */
  submit(): AssetTransferInnerTxn {
    throw new NoImplementation()
  }
  /**
   * Update one or more fields in this AssetTransferItxnParams object
   */
  set(fields: AssetTransferFields): void {
    throw new NoImplementation()
  }
  /**
   * Stage this itxn ready to be submitted in a group
   */
  stage(): void {
    throw new NoImplementation()
  }
  /**
   * Return a copy of this AssetTransferItxnParams object
   */
  copy(): AssetTransferItxnParams {
    throw new NoImplementation()
  }
}
/**
 * Create a new AssetTransferItxnParams object with the specified fields
 */
export function assetTransfer(fields: AssetTransferFields): AssetTransferItxnParams {
  throw new NoImplementation()
}
/**
 * Holds AssetFreeze fields which can be updated, cloned, or submitted.
 */
export abstract class AssetFreezeItxnParams {
  /**
   * Submit an itxn with these fields and return the AssetFreezeInnerTxn result
   */
  submit(): AssetFreezeInnerTxn {
    throw new NoImplementation()
  }
  /**
   * Update one or more fields in this AssetFreezeItxnParams object
   */
  set(fields: AssetFreezeFields): void {
    throw new NoImplementation()
  }
  /**
   * Stage this itxn ready to be submitted in a group
   */
  stage(): void {
    throw new NoImplementation()
  }
  /**
   * Return a copy of this AssetFreezeItxnParams object
   */
  copy(): AssetFreezeItxnParams {
    throw new NoImplementation()
  }
}
/**
 * Create a new AssetFreezeItxnParams object with the specified fields
 */
export function assetFreeze(fields: AssetFreezeFields): AssetFreezeItxnParams {
  throw new NoImplementation()
}
/**
 * Holds ApplicationCall fields which can be updated, cloned, or submitted.
 */
export abstract class ApplicationCallItxnParams {
  /**
   * Submit an itxn with these fields and return the ApplicationCallInnerTxn result
   */
  submit(): ApplicationCallInnerTxn {
    throw new NoImplementation()
  }
  /**
   * Update one or more fields in this ApplicationCallItxnParams object
   */
  set(fields: ApplicationCallFields): void {
    throw new NoImplementation()
  }
  /**
   * Stage this itxn ready to be submitted in a group
   */
  stage(): void {
    throw new NoImplementation()
  }
  /**
   * Return a copy of this ApplicationCallItxnParams object
   */
  copy(): ApplicationCallItxnParams {
    throw new NoImplementation()
  }
}
/**
 * Create a new ApplicationCallItxnParams object with the specified fields
 */
export function applicationCall(fields: ApplicationCallFields): ApplicationCallItxnParams {
  throw new NoImplementation()
}
