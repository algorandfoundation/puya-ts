/* THIS FILE IS GENERATED BY ~/scripts/generate-op-funcs.ts - DO NOT MODIFY DIRECTLY */
import { NoImplementation } from './internal/errors'
import { bytes, uint64, biguint } from './primitives'
import { Account, Application, Asset } from './reference'

export enum Base64 {
  URLEncoding = 'URLEncoding',
  StdEncoding = 'StdEncoding',
}
export enum Ec {
  /**
   * G1 of the BN254 curve. Points encoded as 32 byte X following by 32 byte Y
   */
  BN254g1 = 'BN254g1',
  /**
   * G2 of the BN254 curve. Points encoded as 64 byte X following by 64 byte Y
   */
  BN254g2 = 'BN254g2',
  /**
   * G1 of the BLS 12-381 curve. Points encoded as 48 byte X following by 48 byte Y
   */
  BLS12_381g1 = 'BLS12_381g1',
  /**
   * G2 of the BLS 12-381 curve. Points encoded as 96 byte X following by 96 byte Y
   */
  BLS12_381g2 = 'BLS12_381g2',
}
export enum Ecdsa {
  /**
   * secp256k1 curve, used in Bitcoin
   */
  Secp256k1 = 'Secp256k1',
  /**
   * secp256r1 curve, NIST standard
   */
  Secp256r1 = 'Secp256r1',
}
export enum MimcConfigurations {
  /**
   * MiMC configuration for the BN254 curve with Miyaguchi-Preneel mode, 110 rounds, exponent 5, seed "seed"
   */
  BN254Mp110 = 'BN254Mp110',
  /**
   * MiMC configuration for the BLS12-381 curve with Miyaguchi-Preneel mode, 111 rounds, exponent 5, seed "seed"
   */
  BLS12_381Mp111 = 'BLS12_381Mp111',
}
export enum VrfVerify {
  VrfAlgorand = 'VrfAlgorand',
}
export const AcctParams = {
  /**
   * Account balance in microalgos
   * Min AVM version: 6
   */
  acctBalance(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Minimum required balance for account, in microalgos
   * Min AVM version: 6
   */
  acctMinBalance(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Address the account is rekeyed to.
   * Min AVM version: 6
   */
  acctAuthAddr(a: Account | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },

  /**
   * The total number of uint64 values allocated by this account in Global and Local States.
   * Min AVM version: 8
   */
  acctTotalNumUint(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The total number of byte array values allocated by this account in Global and Local States.
   * Min AVM version: 8
   */
  acctTotalNumByteSlice(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The number of extra app code pages used by this account.
   * Min AVM version: 8
   */
  acctTotalExtraAppPages(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The number of existing apps created by this account.
   * Min AVM version: 8
   */
  acctTotalAppsCreated(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The number of apps this account is opted into.
   * Min AVM version: 8
   */
  acctTotalAppsOptedIn(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The number of existing ASAs created by this account.
   * Min AVM version: 8
   */
  acctTotalAssetsCreated(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The numbers of ASAs held by this account (including ASAs this account created).
   * Min AVM version: 8
   */
  acctTotalAssets(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The number of existing boxes created by this account's app.
   * Min AVM version: 8
   */
  acctTotalBoxes(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The total number of bytes used by this account's app's box keys and values.
   * Min AVM version: 8
   */
  acctTotalBoxBytes(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Has this account opted into block payouts
   * Min AVM version: 11
   */
  acctIncentiveEligible(a: Account | uint64): readonly [boolean, boolean] {
    throw new NoImplementation()
  },

  /**
   * The round number of the last block this account proposed.
   * Min AVM version: 11
   */
  acctLastProposed(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * The round number of the last block this account sent a heartbeat.
   * Min AVM version: 11
   */
  acctLastHeartbeat(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },
}

/**
 * A plus B as a 128-bit result. X is the carry-bit, Y is the low-order 64 bits.
 * @see Native TEAL opcode: [`addw`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#addw)
 * Min AVM version: 2
 */
export function addw(a: uint64, b: uint64): readonly [uint64, uint64] {
  throw new NoImplementation()
}

/**
 * Get or modify Global app state
 */
export const AppGlobal = {
  /**
   * delete key A from the global state of the current application
   * @param state key.
   * Deleting a key which is already absent has no effect on the application global state. (In particular, it does _not_ cause the program to fail.)
   * @see Native TEAL opcode: [`app_global_del`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_global_del)
   * Min AVM version: 2
   */
  delete(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * global state of the key A in the current application
   * @param state key.
   *  * @return value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_global_get`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_global_get)
   * Min AVM version: 2
   */
  getBytes(a: bytes): bytes {
    throw new NoImplementation()
  },

  /**
   * global state of the key A in the current application
   * @param state key.
   *  * @return value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_global_get`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_global_get)
   * Min AVM version: 2
   */
  getUint64(a: bytes): uint64 {
    throw new NoImplementation()
  },

  /**
   * X is the global state of application A, key B. Y is 1 if key existed, else 0
   * @param Txn.ForeignApps offset (or, since v4, an _available_ application id), state key.
   *  * @return did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_global_get_ex`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_global_get_ex)
   * Min AVM version: 2
   */
  getExBytes(a: Application | uint64, b: bytes): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * X is the global state of application A, key B. Y is 1 if key existed, else 0
   * @param Txn.ForeignApps offset (or, since v4, an _available_ application id), state key.
   *  * @return did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_global_get_ex`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_global_get_ex)
   * Min AVM version: 2
   */
  getExUint64(a: Application | uint64, b: bytes): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * write B to key A in the global state of the current application
   * @see Native TEAL opcode: [`app_global_put`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_global_put)
   * Min AVM version: 2
   */
  put(a: bytes, b: uint64 | bytes): void {
    throw new NoImplementation()
  },
}

/**
 * Get or modify Local app state
 */
export const AppLocal = {
  /**
   * delete key B from account A's local state of the current application
   * @param Txn.Accounts offset (or, since v4, an _available_ account address), state key.
   * Deleting a key which is already absent has no effect on the application local state. (In particular, it does _not_ cause the program to fail.)
   * @see Native TEAL opcode: [`app_local_del`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_local_del)
   * Min AVM version: 2
   */
  delete(a: Account | uint64, b: bytes): void {
    throw new NoImplementation()
  },

  /**
   * local state of the key B in the current application in account A
   * @param Txn.Accounts offset (or, since v4, an _available_ account address), state key.
   *  * @return value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_local_get`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_local_get)
   * Min AVM version: 2
   */
  getBytes(a: Account | uint64, b: bytes): bytes {
    throw new NoImplementation()
  },

  /**
   * local state of the key B in the current application in account A
   * @param Txn.Accounts offset (or, since v4, an _available_ account address), state key.
   *  * @return value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_local_get`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_local_get)
   * Min AVM version: 2
   */
  getUint64(a: Account | uint64, b: bytes): uint64 {
    throw new NoImplementation()
  },

  /**
   * X is the local state of application B, key C in account A. Y is 1 if key existed, else 0
   * @param Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset), state key.
   *  * @return did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_local_get_ex`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_local_get_ex)
   * Min AVM version: 2
   */
  getExBytes(a: Account | uint64, b: Application | uint64, c: bytes): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * X is the local state of application B, key C in account A. Y is 1 if key existed, else 0
   * @param Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset), state key.
   *  * @return did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.
   * @see Native TEAL opcode: [`app_local_get_ex`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_local_get_ex)
   * Min AVM version: 2
   */
  getExUint64(a: Account | uint64, b: Application | uint64, c: bytes): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * write C to key B in account A's local state of the current application
   * @param Txn.Accounts offset (or, since v4, an _available_ account address), state key, value.
   * @see Native TEAL opcode: [`app_local_put`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_local_put)
   * Min AVM version: 2
   */
  put(a: Account | uint64, b: bytes, c: uint64 | bytes): void {
    throw new NoImplementation()
  },
}

/**
 * 1 if account A is opted in to application B, else 0
 * @param Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset).
 *  * @return 1 if opted in and 0 otherwise.
 * @see Native TEAL opcode: [`app_opted_in`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#app_opted_in)
 * Min AVM version: 2
 */
export function appOptedIn(a: Account | uint64, b: Application | uint64): boolean {
  throw new NoImplementation()
}
export const AppParams = {
  /**
   * Bytecode of Approval Program
   * Min AVM version: 5
   */
  appApprovalProgram(a: Application | uint64): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * Bytecode of Clear State Program
   * Min AVM version: 5
   */
  appClearStateProgram(a: Application | uint64): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * Number of uint64 values allowed in Global State
   * Min AVM version: 5
   */
  appGlobalNumUint(a: Application | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Number of byte array values allowed in Global State
   * Min AVM version: 5
   */
  appGlobalNumByteSlice(a: Application | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Number of uint64 values allowed in Local State
   * Min AVM version: 5
   */
  appLocalNumUint(a: Application | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Number of byte array values allowed in Local State
   * Min AVM version: 5
   */
  appLocalNumByteSlice(a: Application | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Number of Extra Program Pages of code space
   * Min AVM version: 5
   */
  appExtraProgramPages(a: Application | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Creator address
   * Min AVM version: 5
   */
  appCreator(a: Application | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },

  /**
   * Address for which this application has authority
   * Min AVM version: 5
   */
  appAddress(a: Application | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },
}

/**
 * Ath LogicSig argument
 * @see Native TEAL opcode: [`args`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#args)
 * Min AVM version: 5
 */
export function arg(a: uint64): bytes {
  throw new NoImplementation()
}
export const AssetHolding = {
  /**
   * Amount of the asset unit held by this account
   * Min AVM version: 2
   */
  assetBalance(a: Account | uint64, b: Asset | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Is the asset frozen or not
   * Min AVM version: 2
   */
  assetFrozen(a: Account | uint64, b: Asset | uint64): readonly [boolean, boolean] {
    throw new NoImplementation()
  },
}

export const AssetParams = {
  /**
   * Total number of units of this asset
   * Min AVM version: 2
   */
  assetTotal(a: Asset | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * See AssetParams.Decimals
   * Min AVM version: 2
   */
  assetDecimals(a: Asset | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Frozen by default or not
   * Min AVM version: 2
   */
  assetDefaultFrozen(a: Asset | uint64): readonly [boolean, boolean] {
    throw new NoImplementation()
  },

  /**
   * Asset unit name
   * Min AVM version: 2
   */
  assetUnitName(a: Asset | uint64): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * Asset name
   * Min AVM version: 2
   */
  assetName(a: Asset | uint64): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * URL with additional info about the asset
   * Min AVM version: 2
   */
  assetUrl(a: Asset | uint64): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * Arbitrary commitment
   * Min AVM version: 2
   */
  assetMetadataHash(a: Asset | uint64): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * Manager address
   * Min AVM version: 2
   */
  assetManager(a: Asset | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },

  /**
   * Reserve address
   * Min AVM version: 2
   */
  assetReserve(a: Asset | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },

  /**
   * Freeze address
   * Min AVM version: 2
   */
  assetFreeze(a: Asset | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },

  /**
   * Clawback address
   * Min AVM version: 2
   */
  assetClawback(a: Asset | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },

  /**
   * Creator address
   * Min AVM version: 5
   */
  assetCreator(a: Asset | uint64): readonly [Account, boolean] {
    throw new NoImplementation()
  },
}

/**
 * balance for account A, in microalgos. The balance is observed after the effects of previous transactions in the group, and after the fee for the current transaction is deducted. Changes caused by inner transactions are observable immediately following `itxn_submit`
 * @param Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset).
 *  * @return value.
 * @see Native TEAL opcode: [`balance`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#balance)
 * Min AVM version: 2
 */
export function balance(a: Account | uint64): uint64 {
  throw new NoImplementation()
}

/**
 * decode A which was base64-encoded using _encoding_ E. Fail if A is not base64 encoded with encoding E
 * *Warning*: Usage should be restricted to very rare use cases. In almost all cases, smart contracts should directly handle non-encoded byte-strings.	This opcode should only be used in cases where base64 is the only available option, e.g. interoperability with a third-party that only signs base64 strings.
 *  Decodes A using the base64 encoding E. Specify the encoding with an immediate arg either as URL and Filename Safe (`URLEncoding`) or Standard (`StdEncoding`). See [RFC 4648 sections 4 and 5](https://rfc-editor.org/rfc/rfc4648.html#section-4). It is assumed that the encoding ends with the exact number of `=` padding characters as required by the RFC. When padding occurs, any unused pad bits in the encoding must be set to zero or the decoding will fail. The special cases of `\n` and `\r` are allowed but completely ignored. An error will result when attempting to decode a string with a character that is not in the encoding alphabet or not one of `=`, `\r`, or `\n`.
 * @see Native TEAL opcode: [`base64_decode`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#base64_decode)
 * Min AVM version: 7
 */
export function base64Decode(e: Base64, a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * The highest set bit in A. If A is a byte-array, it is interpreted as a big-endian unsigned integer. bitlen of 0 is 0, bitlen of 8 is 4
 * bitlen interprets arrays as big-endian integers, unlike setbit/getbit
 * @see Native TEAL opcode: [`bitlen`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#bitlen)
 * Min AVM version: 4
 */
export function bitLength(a: uint64 | bytes): uint64 {
  throw new NoImplementation()
}
export const Block = {
  blkSeed(a: uint64): bytes {
    throw new NoImplementation()
  },

  blkTimestamp(a: uint64): uint64 {
    throw new NoImplementation()
  },

  blkProposer(a: uint64): Account {
    throw new NoImplementation()
  },

  blkFeesCollected(a: uint64): uint64 {
    throw new NoImplementation()
  },

  blkBonus(a: uint64): uint64 {
    throw new NoImplementation()
  },

  blkBranch(a: uint64): bytes {
    throw new NoImplementation()
  },

  blkFeeSink(a: uint64): Account {
    throw new NoImplementation()
  },

  blkProtocol(a: uint64): bytes {
    throw new NoImplementation()
  },

  blkTxnCounter(a: uint64): uint64 {
    throw new NoImplementation()
  },

  blkProposerPayout(a: uint64): uint64 {
    throw new NoImplementation()
  },
}

/**
 * Get or modify box state
 */
export const Box = {
  /**
   * create a box named A, of length B. Fail if the name A is empty or B exceeds 32,768. Returns 0 if A already existed, else 1
   * Newly created boxes are filled with 0 bytes. `box_create` will fail if the referenced box already exists with a different size. Otherwise, existing boxes are unchanged by `box_create`.
   * @see Native TEAL opcode: [`box_create`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_create)
   * Min AVM version: 8
   */
  create(a: bytes, b: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * delete box named A if it exists. Return 1 if A existed, 0 otherwise
   * @see Native TEAL opcode: [`box_del`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_del)
   * Min AVM version: 8
   */
  delete(a: bytes): boolean {
    throw new NoImplementation()
  },

  /**
   * read C bytes from box A, starting at offset B. Fail if A does not exist, or the byte range is outside A's size.
   * @see Native TEAL opcode: [`box_extract`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_extract)
   * Min AVM version: 8
   */
  extract(a: bytes, b: uint64, c: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * X is the contents of box A if A exists, else ''. Y is 1 if A exists, else 0.
   * For boxes that exceed 4,096 bytes, consider `box_create`, `box_extract`, and `box_replace`
   * @see Native TEAL opcode: [`box_get`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_get)
   * Min AVM version: 8
   */
  get(a: bytes): readonly [bytes, boolean] {
    throw new NoImplementation()
  },

  /**
   * X is the length of box A if A exists, else 0. Y is 1 if A exists, else 0.
   * @see Native TEAL opcode: [`box_len`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_len)
   * Min AVM version: 8
   */
  length(a: bytes): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * replaces the contents of box A with byte-array B. Fails if A exists and len(B) != len(box A). Creates A if it does not exist
   * For boxes that exceed 4,096 bytes, consider `box_create`, `box_extract`, and `box_replace`
   * @see Native TEAL opcode: [`box_put`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_put)
   * Min AVM version: 8
   */
  put(a: bytes, b: bytes): void {
    throw new NoImplementation()
  },

  /**
   * write byte-array C into box A, starting at offset B. Fail if A does not exist, or the byte range is outside A's size.
   * @see Native TEAL opcode: [`box_replace`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_replace)
   * Min AVM version: 8
   */
  replace(a: bytes, b: uint64, c: bytes): void {
    throw new NoImplementation()
  },

  /**
   * change the size of box named A to be of length B, adding zero bytes to end or removing bytes from the end, as needed. Fail if the name A is empty, A is not an existing box, or B exceeds 32,768.
   * @see Native TEAL opcode: [`box_resize`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_resize)
   * Min AVM version: 10
   */
  resize(a: bytes, b: uint64): void {
    throw new NoImplementation()
  },

  /**
   * set box A to contain its previous bytes up to index B, followed by D, followed by the original bytes of A that began at index B+C.
   * Boxes are of constant length. If C < len(D), then len(D)-C bytes will be removed from the end. If C > len(D), zero bytes will be appended to the end to reach the box length.
   * @see Native TEAL opcode: [`box_splice`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#box_splice)
   * Min AVM version: 10
   */
  splice(a: bytes, b: uint64, c: uint64, d: bytes): void {
    throw new NoImplementation()
  },
}

/**
 * The largest integer I such that I^2 <= A. A and I are interpreted as big-endian unsigned integers
 * @see Native TEAL opcode: [`bsqrt`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#bsqrt)
 * Min AVM version: 6
 */
export function bsqrt(a: biguint): biguint {
  throw new NoImplementation()
}

/**
 * converts big-endian byte array A to uint64. Fails if len(A) > 8. Padded by leading 0s if len(A) < 8.
 * `btoi` fails if the input is longer than 8 bytes.
 * @see Native TEAL opcode: [`btoi`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#btoi)
 * Min AVM version: 1
 */
export function btoi(a: bytes): uint64 {
  throw new NoImplementation()
}

/**
 * zero filled byte-array of length A
 * @see Native TEAL opcode: [`bzero`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#bzero)
 * Min AVM version: 4
 */
export function bzero(a: uint64): bytes {
  throw new NoImplementation()
}

/**
 * join A and B
 * `concat` fails if the result would be greater than 4096 bytes.
 * @see Native TEAL opcode: [`concat`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#concat)
 * Min AVM version: 2
 */
export function concat(a: bytes, b: bytes): bytes {
  throw new NoImplementation()
}

/**
 * W,X = (A,B / C,D); Y,Z = (A,B modulo C,D)
 * The notation J,K indicates that two uint64 values J and K are interpreted as a uint128 value, with J as the high uint64 and K the low.
 * @see Native TEAL opcode: [`divmodw`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#divmodw)
 * Min AVM version: 4
 */
export function divmodw(a: uint64, b: uint64, c: uint64, d: uint64): readonly [uint64, uint64, uint64, uint64] {
  throw new NoImplementation()
}

/**
 * A,B / C. Fail if C == 0 or if result overflows.
 * The notation A,B indicates that A and B are interpreted as a uint128 value, with A as the high uint64 and B the low.
 * @see Native TEAL opcode: [`divw`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#divw)
 * Min AVM version: 6
 */
export function divw(a: uint64, b: uint64, c: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * Elliptic Curve functions
 */
export const EllipticCurve = {
  /**
   * for curve points A and B, return the curve point A + B
   * A and B are curve points in affine representation: field element X concatenated with field element Y. Field element `Z` is encoded as follows.
   * For the base field elements (Fp), `Z` is encoded as a big-endian number and must be lower than the field modulus.
   * For the quadratic field extension (Fp2), `Z` is encoded as the concatenation of the individual encoding of the coefficients. For an Fp2 element of the form `Z = Z0 + Z1 i`, where `i` is a formal quadratic non-residue, the encoding of Z is the concatenation of the encoding of `Z0` and `Z1` in this order. (`Z0` and `Z1` must be less than the field modulus).
   * The point at infinity is encoded as `(X,Y) = (0,0)`.
   * Groups G1 and G2 are denoted additively.
   * Fails if A or B is not in G.
   * A and/or B are allowed to be the point at infinity.
   * Does _not_ check if A and B are in the main prime-order subgroup.
   * @see Native TEAL opcode: [`ec_add`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ec_add)
   * Min AVM version: 10
   */
  add(g: Ec, a: bytes, b: bytes): bytes {
    throw new NoImplementation()
  },

  /**
   * maps field element A to group G
   * BN254 points are mapped by the SVDW map. BLS12-381 points are mapped by the SSWU map.
   * G1 element inputs are base field elements and G2 element inputs are quadratic field elements, with nearly the same encoding rules (for field elements) as defined in `ec_add`. There is one difference of encoding rule: G1 element inputs do not need to be 0-padded if they fit in less than 32 bytes for BN254 and less than 48 bytes for BLS12-381. (As usual, the empty byte array represents 0.) G2 elements inputs need to be always have the required size.
   * @see Native TEAL opcode: [`ec_map_to`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ec_map_to)
   * Min AVM version: 10
   */
  mapTo(g: Ec, a: bytes): bytes {
    throw new NoImplementation()
  },

  /**
   * for curve points A and scalars B, return curve point B0A0 + B1A1 + B2A2 + ... + BnAn
   * A is a list of concatenated points, encoded and checked as described in `ec_add`. B is a list of concatenated scalars which, unlike ec_scalar_mul, must all be exactly 32 bytes long.
   * The name `ec_multi_scalar_mul` was chosen to reflect common usage, but a more consistent name would be `ec_multi_scalar_mul`. AVM values are limited to 4096 bytes, so `ec_multi_scalar_mul` is limited by the size of the points in the group being operated upon.
   * @see Native TEAL opcode: [`ec_multi_scalar_mul`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ec_multi_scalar_mul)
   * Min AVM version: 10
   */
  scalarMulMulti(g: Ec, a: bytes, b: bytes): bytes {
    throw new NoImplementation()
  },

  /**
   * 1 if the product of the pairing of each point in A with its respective point in B is equal to the identity element of the target group Gt, else 0
   * A and B are concatenated points, encoded and checked as described in `ec_add`. A contains points of the group G, B contains points of the associated group (G2 if G is G1, and vice versa). Fails if A and B have a different number of points, or if any point is not in its described group or outside the main prime-order subgroup - a stronger condition than other opcodes. AVM values are limited to 4096 bytes, so `ec_pairing_check` is limited by the size of the points in the groups being operated upon.
   * @see Native TEAL opcode: [`ec_pairing_check`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ec_pairing_check)
   * Min AVM version: 10
   */
  pairingCheck(g: Ec, a: bytes, b: bytes): boolean {
    throw new NoImplementation()
  },

  /**
   * for curve point A and scalar B, return the curve point BA, the point A multiplied by the scalar B.
   * A is a curve point encoded and checked as described in `ec_add`. Scalar B is interpreted as a big-endian unsigned integer. Fails if B exceeds 32 bytes.
   * @see Native TEAL opcode: [`ec_scalar_mul`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ec_scalar_mul)
   * Min AVM version: 10
   */
  scalarMul(g: Ec, a: bytes, b: bytes): bytes {
    throw new NoImplementation()
  },

  /**
   * 1 if A is in the main prime-order subgroup of G (including the point at infinity) else 0. Program fails if A is not in G at all.
   * @see Native TEAL opcode: [`ec_subgroup_check`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ec_subgroup_check)
   * Min AVM version: 10
   */
  subgroupCheck(g: Ec, a: bytes): boolean {
    throw new NoImplementation()
  },
}

/**
 * decompress pubkey A into components X, Y
 * The 33 byte public key in a compressed form to be decompressed into X and Y (top) components. All values are big-endian encoded.
 * @see Native TEAL opcode: [`ecdsa_pk_decompress`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ecdsa_pk_decompress)
 * Min AVM version: 5
 */
export function ecdsaPkDecompress(v: Ecdsa, a: bytes): readonly [bytes, bytes] {
  throw new NoImplementation()
}

/**
 * for (data A, recovery id B, signature C, D) recover a public key
 * S (top) and R elements of a signature, recovery id and data (bottom) are expected on the stack and used to deriver a public key. All values are big-endian encoded. The signed data must be 32 bytes long.
 * @see Native TEAL opcode: [`ecdsa_pk_recover`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ecdsa_pk_recover)
 * Min AVM version: 5
 */
export function ecdsaPkRecover(v: Ecdsa, a: bytes, b: uint64, c: bytes, d: bytes): readonly [bytes, bytes] {
  throw new NoImplementation()
}

/**
 * for (data A, signature B, C and pubkey D, E) verify the signature of the data against the pubkey => {0 or 1}
 * The 32 byte Y-component of a public key is the last element on the stack, preceded by X-component of a pubkey, preceded by S and R components of a signature, preceded by the data that is fifth element on the stack. All values are big-endian encoded. The signed data must be 32 bytes long, and signatures in lower-S form are only accepted.
 * @see Native TEAL opcode: [`ecdsa_verify`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ecdsa_verify)
 * Min AVM version: 5
 */
export function ecdsaVerify(v: Ecdsa, a: bytes, b: bytes, c: bytes, d: bytes, e: bytes): boolean {
  throw new NoImplementation()
}

/**
 * for (data A, signature B, pubkey C) verify the signature of ("ProgData" || program_hash || data) against the pubkey => {0 or 1}
 * The 32 byte public key is the last element on the stack, preceded by the 64 byte signature at the second-to-last element on the stack, preceded by the data which was signed at the third-to-last element on the stack.
 * @see Native TEAL opcode: [`ed25519verify`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ed25519verify)
 * Min AVM version: 1
 */
export function ed25519verify(a: bytes, b: bytes, c: bytes): boolean {
  throw new NoImplementation()
}

/**
 * for (data A, signature B, pubkey C) verify the signature of the data against the pubkey => {0 or 1}
 * @see Native TEAL opcode: [`ed25519verify_bare`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#ed25519verify_bare)
 * Min AVM version: 7
 */
export function ed25519verifyBare(a: bytes, b: bytes, c: bytes): boolean {
  throw new NoImplementation()
}

/**
 * A raised to the Bth power. Fail if A == B == 0 and on overflow
 * @see Native TEAL opcode: [`exp`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#exp)
 * Min AVM version: 4
 */
export function exp(a: uint64, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * A raised to the Bth power as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low. Fail if A == B == 0 or if the results exceeds 2^128-1
 * @see Native TEAL opcode: [`expw`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#expw)
 * Min AVM version: 4
 */
export function expw(a: uint64, b: uint64): readonly [uint64, uint64] {
  throw new NoImplementation()
}

/**
 * A uint16 formed from a range of big-endian bytes from A starting at B up to but not including B+2. If B+2 is larger than the array length, the program fails
 * @see Native TEAL opcode: [`extract_uint16`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#extract_uint16)
 * Min AVM version: 5
 */
export function extractUint16(a: bytes, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * A uint32 formed from a range of big-endian bytes from A starting at B up to but not including B+4. If B+4 is larger than the array length, the program fails
 * @see Native TEAL opcode: [`extract_uint32`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#extract_uint32)
 * Min AVM version: 5
 */
export function extractUint32(a: bytes, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * A uint64 formed from a range of big-endian bytes from A starting at B up to but not including B+8. If B+8 is larger than the array length, the program fails
 * @see Native TEAL opcode: [`extract_uint64`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#extract_uint64)
 * Min AVM version: 5
 */
export function extractUint64(a: bytes, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * for (data A, compressed-format signature B, pubkey C) verify the signature of data against the pubkey
 * @see Native TEAL opcode: [`falcon_verify`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#falcon_verify)
 * Min AVM version: 12
 */
export function falconVerify(a: bytes, b: bytes, c: bytes): boolean {
  throw new NoImplementation()
}

/**
 * ID of the asset or application created in the Ath transaction of the current group
 * `gaids` fails unless the requested transaction created an asset or application and A < GroupIndex.
 * @see Native TEAL opcode: [`gaids`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#gaids)
 * Min AVM version: 4
 */
export function gaid(a: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * Bth bit of (byte-array or integer) A. If B is greater than or equal to the bit length of the value (8*byte length), the program fails
 * see explanation of bit ordering in setbit
 * @see Native TEAL opcode: [`getbit`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#getbit)
 * Min AVM version: 3
 */
export function getBit(a: uint64 | bytes, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * Bth byte of A, as an integer. If B is greater than or equal to the array length, the program fails
 * @see Native TEAL opcode: [`getbyte`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#getbyte)
 * Min AVM version: 3
 */
export function getByte(a: bytes, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * Get values for inner transaction in the last group submitted
 */
export const GITxn = {
  /**
   * 32 byte address
   * Min AVM version: 6
   */
  sender(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 6
   */
  fee(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 6
   */
  firstValid(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   * Min AVM version: 7
   */
  firstValidTime(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 6
   */
  lastValid(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Any data up to 1024 bytes
   * Min AVM version: 6
   */
  note(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte lease value
   * Min AVM version: 6
   */
  lease(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 6
   */
  receiver(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 6
   */
  amount(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 6
   */
  closeRemainderTo(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 6
   */
  votePk(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 6
   */
  selectionPk(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * The first round that the participation key is valid.
   * Min AVM version: 6
   */
  voteFirst(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * The last round that the participation key is valid.
   * Min AVM version: 6
   */
  voteLast(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Dilution for the 2-level participation key
   * Min AVM version: 6
   */
  voteKeyDilution(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Transaction type as bytes
   * Min AVM version: 6
   */
  type(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Transaction type as integer
   * Min AVM version: 6
   */
  typeEnum(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID
   * Min AVM version: 6
   */
  xferAsset(t: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * value in Asset's units
   * Min AVM version: 6
   */
  assetAmount(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   * Min AVM version: 6
   */
  assetSender(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 6
   */
  assetReceiver(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 6
   */
  assetCloseTo(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Position of this transaction within an atomic transaction group. A stand-alone transaction is implicitly element 0 in a group of 1
   * Min AVM version: 6
   */
  groupIndex(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * The computed ID for this transaction. 32 bytes.
   * Min AVM version: 6
   */
  txId(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * ApplicationID from ApplicationCall transaction
   * Min AVM version: 2
   */
  applicationId(t: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * ApplicationCall transaction on completion action
   * Min AVM version: 2
   */
  onCompletion(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * Min AVM version: 2
   */
  applicationArgs(t: uint64, a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ApplicationArgs
   * Min AVM version: 2
   */
  numAppArgs(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Accounts listed in the ApplicationCall transaction
   * Min AVM version: 2
   */
  accounts(t: uint64, a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Number of Accounts
   * Min AVM version: 2
   */
  numAccounts(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Approval program
   * Min AVM version: 2
   */
  approvalProgram(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Clear state program
   * Min AVM version: 2
   */
  clearStateProgram(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte Sender's new AuthAddr
   * Min AVM version: 2
   */
  rekeyTo(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID in asset config transaction
   * Min AVM version: 2
   */
  configAsset(t: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * Total number of units of this asset created
   * Min AVM version: 2
   */
  configAssetTotal(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of digits to display after the decimal place when displaying the asset
   * Min AVM version: 2
   */
  configAssetDecimals(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   * Min AVM version: 2
   */
  configAssetDefaultFrozen(t: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * Unit name of the asset
   * Min AVM version: 2
   */
  configAssetUnitName(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * The asset name
   * Min AVM version: 2
   */
  configAssetName(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * URL
   * Min AVM version: 2
   */
  configAssetUrl(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte commitment to unspecified asset metadata
   * Min AVM version: 2
   */
  configAssetMetadataHash(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetManager(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetReserve(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetFreeze(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetClawback(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID being frozen or un-frozen
   * Min AVM version: 2
   */
  freezeAsset(t: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   * Min AVM version: 2
   */
  freezeAssetAccount(t: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * The new frozen value, 0 or 1
   * Min AVM version: 2
   */
  freezeAssetFrozen(t: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  assets(t: uint64, a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * Number of Assets
   * Min AVM version: 3
   */
  numAssets(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  applications(t: uint64, a: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * Number of Applications
   * Min AVM version: 3
   */
  numApplications(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state integers in ApplicationCall
   * Min AVM version: 3
   */
  globalNumUint(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  globalNumByteSlice(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state integers in ApplicationCall
   * Min AVM version: 3
   */
  localNumUint(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  localNumByteSlice(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.
   * Min AVM version: 4
   */
  extraProgramPages(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Marks an account nonparticipating for rewards
   * Min AVM version: 5
   */
  nonparticipation(t: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * Log messages emitted by an application call (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  logs(t: uint64, a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Logs (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  numLogs(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID allocated by the creation of an ASA (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  createdAssetId(t: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * ApplicationID allocated by the creation of an application (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  createdApplicationId(t: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * The last message emitted. Empty bytes if none were emitted. Application mode only
   * Min AVM version: 6
   */
  lastLog(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 64 byte state proof public key
   * Min AVM version: 6
   */
  stateProofPk(t: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Approval Program as an array of pages
   * Min AVM version: 7
   */
  approvalProgramPages(t: uint64, a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Approval Program pages
   * Min AVM version: 7
   */
  numApprovalProgramPages(t: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * ClearState Program as an array of pages
   * Min AVM version: 7
   */
  clearStateProgramPages(t: uint64, a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ClearState Program pages
   * Min AVM version: 7
   */
  numClearStateProgramPages(t: uint64): uint64 {
    throw new NoImplementation()
  },
}

/**
 * Bth scratch space value of the Ath transaction in the current group
 * @see Native TEAL opcode: [`gloadss`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#gloadss)
 * Min AVM version: 6
 */
export function gloadBytes(a: uint64, b: uint64): bytes {
  throw new NoImplementation()
}

/**
 * Bth scratch space value of the Ath transaction in the current group
 * @see Native TEAL opcode: [`gloadss`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#gloadss)
 * Min AVM version: 6
 */
export function gloadUint64(a: uint64, b: uint64): uint64 {
  throw new NoImplementation()
}
export const Global = {
  /**
   * microalgos
   * Min AVM version: 1
   */
  get minTxnFee(): uint64 {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 1
   */
  get minBalance(): uint64 {
    throw new NoImplementation()
  },

  /**
   * rounds
   * Min AVM version: 1
   */
  get maxTxnLife(): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address of all zero bytes
   * Min AVM version: 1
   */
  get zeroAddress(): Account {
    throw new NoImplementation()
  },

  /**
   * Number of transactions in this atomic transaction group. At least 1
   * Min AVM version: 1
   */
  get groupSize(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Maximum supported version
   * Min AVM version: 2
   */
  get logicSigVersion(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Current round number. Application mode only.
   * Min AVM version: 2
   */
  get round(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Last confirmed block UNIX timestamp. Fails if negative. Application mode only.
   * Min AVM version: 2
   */
  get latestTimestamp(): uint64 {
    throw new NoImplementation()
  },

  /**
   * ID of current application executing. Application mode only.
   * Min AVM version: 2
   */
  get currentApplicationId(): Application {
    throw new NoImplementation()
  },

  /**
   * Address of the creator of the current application. Application mode only.
   * Min AVM version: 3
   */
  get creatorAddress(): Account {
    throw new NoImplementation()
  },

  /**
   * Address that the current application controls. Application mode only.
   * Min AVM version: 5
   */
  get currentApplicationAddress(): Account {
    throw new NoImplementation()
  },

  /**
   * ID of the transaction group. 32 zero bytes if the transaction is not part of a group.
   * Min AVM version: 5
   */
  get groupId(): bytes {
    throw new NoImplementation()
  },

  /**
   * The remaining cost that can be spent by opcodes in this program.
   * Min AVM version: 6
   */
  get opcodeBudget(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The application ID of the application that called this application. 0 if this application is at the top-level. Application mode only.
   * Min AVM version: 6
   */
  get callerApplicationId(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The application address of the application that called this application. ZeroAddress if this application is at the top-level. Application mode only.
   * Min AVM version: 6
   */
  get callerApplicationAddress(): Account {
    throw new NoImplementation()
  },

  /**
   * The additional minimum balance required to create (and opt-in to) an asset.
   * Min AVM version: 10
   */
  get assetCreateMinBalance(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The additional minimum balance required to opt-in to an asset.
   * Min AVM version: 10
   */
  get assetOptInMinBalance(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The Genesis Hash for the network.
   * Min AVM version: 10
   */
  get genesisHash(): bytes {
    throw new NoImplementation()
  },

  /**
   * Whether block proposal payouts are enabled.
   * Min AVM version: 11
   */
  get payoutsEnabled(): boolean {
    throw new NoImplementation()
  },

  /**
   * The fee required in a keyreg transaction to make an account incentive eligible.
   * Min AVM version: 11
   */
  get payoutsGoOnlineFee(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The percentage of transaction fees in a block that can be paid to the block proposer.
   * Min AVM version: 11
   */
  get payoutsPercent(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The minimum balance an account must have in the agreement round to receive block payouts in the proposal round.
   * Min AVM version: 11
   */
  get payoutsMinBalance(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The maximum balance an account can have in the agreement round to receive block payouts in the proposal round.
   * Min AVM version: 11
   */
  get payoutsMaxBalance(): uint64 {
    throw new NoImplementation()
  },
}

/**
 * Get values for transactions in the current group
 */
export const GTxn = {
  /**
   * 32 byte address
   * Min AVM version: 3
   */
  sender(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 3
   */
  fee(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 3
   */
  firstValid(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   * Min AVM version: 7
   */
  firstValidTime(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 3
   */
  lastValid(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Any data up to 1024 bytes
   * Min AVM version: 3
   */
  note(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte lease value
   * Min AVM version: 3
   */
  lease(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 3
   */
  receiver(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 3
   */
  amount(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 3
   */
  closeRemainderTo(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 3
   */
  votePk(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 3
   */
  selectionPk(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * The first round that the participation key is valid.
   * Min AVM version: 3
   */
  voteFirst(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * The last round that the participation key is valid.
   * Min AVM version: 3
   */
  voteLast(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Dilution for the 2-level participation key
   * Min AVM version: 3
   */
  voteKeyDilution(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Transaction type as bytes
   * Min AVM version: 3
   */
  type(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Transaction type as integer
   * Min AVM version: 3
   */
  typeEnum(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID
   * Min AVM version: 3
   */
  xferAsset(a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * value in Asset's units
   * Min AVM version: 3
   */
  assetAmount(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   * Min AVM version: 3
   */
  assetSender(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 3
   */
  assetReceiver(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 3
   */
  assetCloseTo(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Position of this transaction within an atomic transaction group. A stand-alone transaction is implicitly element 0 in a group of 1
   * Min AVM version: 3
   */
  groupIndex(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * The computed ID for this transaction. 32 bytes.
   * Min AVM version: 3
   */
  txId(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * ApplicationID from ApplicationCall transaction
   * Min AVM version: 2
   */
  applicationId(a: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * ApplicationCall transaction on completion action
   * Min AVM version: 2
   */
  onCompletion(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * Min AVM version: 2
   */
  applicationArgs(a: uint64, b: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ApplicationArgs
   * Min AVM version: 2
   */
  numAppArgs(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Accounts listed in the ApplicationCall transaction
   * Min AVM version: 2
   */
  accounts(a: uint64, b: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Number of Accounts
   * Min AVM version: 2
   */
  numAccounts(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Approval program
   * Min AVM version: 2
   */
  approvalProgram(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Clear state program
   * Min AVM version: 2
   */
  clearStateProgram(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte Sender's new AuthAddr
   * Min AVM version: 2
   */
  rekeyTo(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID in asset config transaction
   * Min AVM version: 2
   */
  configAsset(a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * Total number of units of this asset created
   * Min AVM version: 2
   */
  configAssetTotal(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of digits to display after the decimal place when displaying the asset
   * Min AVM version: 2
   */
  configAssetDecimals(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   * Min AVM version: 2
   */
  configAssetDefaultFrozen(a: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * Unit name of the asset
   * Min AVM version: 2
   */
  configAssetUnitName(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * The asset name
   * Min AVM version: 2
   */
  configAssetName(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * URL
   * Min AVM version: 2
   */
  configAssetUrl(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte commitment to unspecified asset metadata
   * Min AVM version: 2
   */
  configAssetMetadataHash(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetManager(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetReserve(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetFreeze(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  configAssetClawback(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID being frozen or un-frozen
   * Min AVM version: 2
   */
  freezeAsset(a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   * Min AVM version: 2
   */
  freezeAssetAccount(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * The new frozen value, 0 or 1
   * Min AVM version: 2
   */
  freezeAssetFrozen(a: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  assets(a: uint64, b: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * Number of Assets
   * Min AVM version: 3
   */
  numAssets(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  applications(a: uint64, b: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * Number of Applications
   * Min AVM version: 3
   */
  numApplications(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state integers in ApplicationCall
   * Min AVM version: 3
   */
  globalNumUint(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  globalNumByteSlice(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state integers in ApplicationCall
   * Min AVM version: 3
   */
  localNumUint(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  localNumByteSlice(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.
   * Min AVM version: 4
   */
  extraProgramPages(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Marks an account nonparticipating for rewards
   * Min AVM version: 5
   */
  nonparticipation(a: uint64): boolean {
    throw new NoImplementation()
  },

  /**
   * Log messages emitted by an application call (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  logs(a: uint64, b: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Logs (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  numLogs(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID allocated by the creation of an ASA (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  createdAssetId(a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * ApplicationID allocated by the creation of an application (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  createdApplicationId(a: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * The last message emitted. Empty bytes if none were emitted. Application mode only
   * Min AVM version: 6
   */
  lastLog(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * 64 byte state proof public key
   * Min AVM version: 6
   */
  stateProofPk(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Approval Program as an array of pages
   * Min AVM version: 7
   */
  approvalProgramPages(a: uint64, b: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Approval Program pages
   * Min AVM version: 7
   */
  numApprovalProgramPages(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * ClearState Program as an array of pages
   * Min AVM version: 7
   */
  clearStateProgramPages(a: uint64, b: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ClearState Program pages
   * Min AVM version: 7
   */
  numClearStateProgramPages(a: uint64): uint64 {
    throw new NoImplementation()
  },
}

/**
 * converts uint64 A to big-endian byte array, always of length 8
 * @see Native TEAL opcode: [`itob`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#itob)
 * Min AVM version: 1
 */
export function itob(a: uint64): bytes {
  throw new NoImplementation()
}

/**
 * Get values for the last inner transaction
 */
export const ITxn = {
  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get sender(): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 5
   */
  get fee(): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 5
   */
  get firstValid(): uint64 {
    throw new NoImplementation()
  },

  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   * Min AVM version: 7
   */
  get firstValidTime(): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 5
   */
  get lastValid(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Any data up to 1024 bytes
   * Min AVM version: 5
   */
  get note(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte lease value
   * Min AVM version: 5
   */
  get lease(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get receiver(): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 5
   */
  get amount(): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get closeRemainderTo(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get votePk(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get selectionPk(): bytes {
    throw new NoImplementation()
  },

  /**
   * The first round that the participation key is valid.
   * Min AVM version: 5
   */
  get voteFirst(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The last round that the participation key is valid.
   * Min AVM version: 5
   */
  get voteLast(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Dilution for the 2-level participation key
   * Min AVM version: 5
   */
  get voteKeyDilution(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Transaction type as bytes
   * Min AVM version: 5
   */
  get type(): bytes {
    throw new NoImplementation()
  },

  /**
   * Transaction type as integer
   * Min AVM version: 5
   */
  get typeEnum(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID
   * Min AVM version: 5
   */
  get xferAsset(): Asset {
    throw new NoImplementation()
  },

  /**
   * value in Asset's units
   * Min AVM version: 5
   */
  get assetAmount(): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   * Min AVM version: 5
   */
  get assetSender(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get assetReceiver(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  get assetCloseTo(): Account {
    throw new NoImplementation()
  },

  /**
   * Position of this transaction within an atomic transaction group. A stand-alone transaction is implicitly element 0 in a group of 1
   * Min AVM version: 5
   */
  get groupIndex(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The computed ID for this transaction. 32 bytes.
   * Min AVM version: 5
   */
  get txId(): bytes {
    throw new NoImplementation()
  },

  /**
   * ApplicationID from ApplicationCall transaction
   * Min AVM version: 2
   */
  get applicationId(): Application {
    throw new NoImplementation()
  },

  /**
   * ApplicationCall transaction on completion action
   * Min AVM version: 2
   */
  get onCompletion(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * Min AVM version: 2
   */
  applicationArgs(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ApplicationArgs
   * Min AVM version: 2
   */
  get numAppArgs(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Accounts listed in the ApplicationCall transaction
   * Min AVM version: 2
   */
  accounts(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Number of Accounts
   * Min AVM version: 2
   */
  get numAccounts(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Approval program
   * Min AVM version: 2
   */
  get approvalProgram(): bytes {
    throw new NoImplementation()
  },

  /**
   * Clear state program
   * Min AVM version: 2
   */
  get clearStateProgram(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte Sender's new AuthAddr
   * Min AVM version: 2
   */
  get rekeyTo(): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID in asset config transaction
   * Min AVM version: 2
   */
  get configAsset(): Asset {
    throw new NoImplementation()
  },

  /**
   * Total number of units of this asset created
   * Min AVM version: 2
   */
  get configAssetTotal(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of digits to display after the decimal place when displaying the asset
   * Min AVM version: 2
   */
  get configAssetDecimals(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   * Min AVM version: 2
   */
  get configAssetDefaultFrozen(): boolean {
    throw new NoImplementation()
  },

  /**
   * Unit name of the asset
   * Min AVM version: 2
   */
  get configAssetUnitName(): bytes {
    throw new NoImplementation()
  },

  /**
   * The asset name
   * Min AVM version: 2
   */
  get configAssetName(): bytes {
    throw new NoImplementation()
  },

  /**
   * URL
   * Min AVM version: 2
   */
  get configAssetUrl(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte commitment to unspecified asset metadata
   * Min AVM version: 2
   */
  get configAssetMetadataHash(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetManager(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetReserve(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetFreeze(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetClawback(): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID being frozen or un-frozen
   * Min AVM version: 2
   */
  get freezeAsset(): Asset {
    throw new NoImplementation()
  },

  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   * Min AVM version: 2
   */
  get freezeAssetAccount(): Account {
    throw new NoImplementation()
  },

  /**
   * The new frozen value, 0 or 1
   * Min AVM version: 2
   */
  get freezeAssetFrozen(): boolean {
    throw new NoImplementation()
  },

  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  assets(a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * Number of Assets
   * Min AVM version: 3
   */
  get numAssets(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  applications(a: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * Number of Applications
   * Min AVM version: 3
   */
  get numApplications(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state integers in ApplicationCall
   * Min AVM version: 3
   */
  get globalNumUint(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  get globalNumByteSlice(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state integers in ApplicationCall
   * Min AVM version: 3
   */
  get localNumUint(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  get localNumByteSlice(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.
   * Min AVM version: 4
   */
  get extraProgramPages(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Marks an account nonparticipating for rewards
   * Min AVM version: 5
   */
  get nonparticipation(): boolean {
    throw new NoImplementation()
  },

  /**
   * Log messages emitted by an application call (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  logs(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Logs (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  get numLogs(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID allocated by the creation of an ASA (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  get createdAssetId(): Asset {
    throw new NoImplementation()
  },

  /**
   * ApplicationID allocated by the creation of an application (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  get createdApplicationId(): Application {
    throw new NoImplementation()
  },

  /**
   * The last message emitted. Empty bytes if none were emitted. Application mode only
   * Min AVM version: 6
   */
  get lastLog(): bytes {
    throw new NoImplementation()
  },

  /**
   * 64 byte state proof public key
   * Min AVM version: 6
   */
  get stateProofPk(): bytes {
    throw new NoImplementation()
  },

  /**
   * Approval Program as an array of pages
   * Min AVM version: 7
   */
  approvalProgramPages(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Approval Program pages
   * Min AVM version: 7
   */
  get numApprovalProgramPages(): uint64 {
    throw new NoImplementation()
  },

  /**
   * ClearState Program as an array of pages
   * Min AVM version: 7
   */
  clearStateProgramPages(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ClearState Program pages
   * Min AVM version: 7
   */
  get numClearStateProgramPages(): uint64 {
    throw new NoImplementation()
  },
}

/**
 * Create inner transactions
 */
export const ITxnCreate = {
  /**
   * begin preparation of a new inner transaction in a new transaction group
   * `itxn_begin` initializes Sender to the application address; Fee to the minimum allowable, taking into account MinTxnFee and credit from overpaying in earlier transactions; FirstValid/LastValid to the values in the invoking transaction, and all other fields to zero or empty values.
   * @see Native TEAL opcode: [`itxn_begin`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#itxn_begin)
   * Min AVM version: 5
   */
  begin(): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setSender(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 5
   */
  setFee(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Any data up to 1024 bytes
   * Min AVM version: 5
   */
  setNote(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setReceiver(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 5
   */
  setAmount(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setCloseRemainderTo(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setVotePk(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setSelectionPk(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * The first round that the participation key is valid.
   * Min AVM version: 5
   */
  setVoteFirst(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * The last round that the participation key is valid.
   * Min AVM version: 5
   */
  setVoteLast(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Dilution for the 2-level participation key
   * Min AVM version: 5
   */
  setVoteKeyDilution(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Transaction type as bytes
   * Min AVM version: 5
   */
  setType(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * Transaction type as integer
   * Min AVM version: 5
   */
  setTypeEnum(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Asset ID
   * Min AVM version: 5
   */
  setXferAsset(a: Asset | uint64): void {
    throw new NoImplementation()
  },

  /**
   * value in Asset's units
   * Min AVM version: 5
   */
  setAssetAmount(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   * Min AVM version: 5
   */
  setAssetSender(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setAssetReceiver(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 5
   */
  setAssetCloseTo(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * ApplicationID from ApplicationCall transaction
   * Min AVM version: 2
   */
  setApplicationId(a: Application | uint64): void {
    throw new NoImplementation()
  },

  /**
   * ApplicationCall transaction on completion action
   * Min AVM version: 2
   */
  setOnCompletion(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * Min AVM version: 2
   */
  setApplicationArgs(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * Accounts listed in the ApplicationCall transaction
   * Min AVM version: 2
   */
  setAccounts(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * Approval program
   * Min AVM version: 2
   */
  setApprovalProgram(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * Clear state program
   * Min AVM version: 2
   */
  setClearStateProgram(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte Sender's new AuthAddr
   * Min AVM version: 2
   */
  setRekeyTo(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * Asset ID in asset config transaction
   * Min AVM version: 2
   */
  setConfigAsset(a: Asset | uint64): void {
    throw new NoImplementation()
  },

  /**
   * Total number of units of this asset created
   * Min AVM version: 2
   */
  setConfigAssetTotal(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Number of digits to display after the decimal place when displaying the asset
   * Min AVM version: 2
   */
  setConfigAssetDecimals(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   * Min AVM version: 2
   */
  setConfigAssetDefaultFrozen(a: boolean): void {
    throw new NoImplementation()
  },

  /**
   * Unit name of the asset
   * Min AVM version: 2
   */
  setConfigAssetUnitName(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * The asset name
   * Min AVM version: 2
   */
  setConfigAssetName(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * URL
   * Min AVM version: 2
   */
  setConfigAssetUrl(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte commitment to unspecified asset metadata
   * Min AVM version: 2
   */
  setConfigAssetMetadataHash(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  setConfigAssetManager(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  setConfigAssetReserve(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  setConfigAssetFreeze(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  setConfigAssetClawback(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * Asset ID being frozen or un-frozen
   * Min AVM version: 2
   */
  setFreezeAsset(a: Asset | uint64): void {
    throw new NoImplementation()
  },

  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   * Min AVM version: 2
   */
  setFreezeAssetAccount(a: Account): void {
    throw new NoImplementation()
  },

  /**
   * The new frozen value, 0 or 1
   * Min AVM version: 2
   */
  setFreezeAssetFrozen(a: boolean): void {
    throw new NoImplementation()
  },

  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  setAssets(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  setApplications(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Number of global state integers in ApplicationCall
   * Min AVM version: 3
   */
  setGlobalNumUint(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Number of global state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  setGlobalNumByteSlice(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Number of local state integers in ApplicationCall
   * Min AVM version: 3
   */
  setLocalNumUint(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Number of local state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  setLocalNumByteSlice(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.
   * Min AVM version: 4
   */
  setExtraProgramPages(a: uint64): void {
    throw new NoImplementation()
  },

  /**
   * Marks an account nonparticipating for rewards
   * Min AVM version: 5
   */
  setNonparticipation(a: boolean): void {
    throw new NoImplementation()
  },

  /**
   * 64 byte state proof public key
   * Min AVM version: 6
   */
  setStateProofPk(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * Approval Program as an array of pages
   * Min AVM version: 7
   */
  setApprovalProgramPages(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * ClearState Program as an array of pages
   * Min AVM version: 7
   */
  setClearStateProgramPages(a: bytes): void {
    throw new NoImplementation()
  },

  /**
   * begin preparation of a new inner transaction in the same transaction group
   * `itxn_next` initializes the transaction exactly as `itxn_begin` does
   * @see Native TEAL opcode: [`itxn_next`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#itxn_next)
   * Min AVM version: 6
   */
  next(): void {
    throw new NoImplementation()
  },

  /**
   * execute the current inner transaction group. Fail if executing this group would exceed the inner transaction limit, or if any transaction in the group fails.
   * `itxn_submit` resets the current transaction so that it can not be resubmitted. A new `itxn_begin` is required to prepare another inner transaction.
   * @see Native TEAL opcode: [`itxn_submit`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#itxn_submit)
   * Min AVM version: 5
   */
  submit(): void {
    throw new NoImplementation()
  },
}

export const JsonRef = {
  jsonString(a: bytes, b: bytes): bytes {
    throw new NoImplementation()
  },

  jsonUint64(a: bytes, b: bytes): uint64 {
    throw new NoImplementation()
  },

  jsonObject(a: bytes, b: bytes): bytes {
    throw new NoImplementation()
  },
}

/**
 * Keccak256 hash of value A, yields [32]byte
 * @see Native TEAL opcode: [`keccak256`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#keccak256)
 * Min AVM version: 1
 */
export function keccak256(a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * yields length of byte value A
 * @see Native TEAL opcode: [`len`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#len)
 * Min AVM version: 1
 */
export function len(a: bytes): uint64 {
  throw new NoImplementation()
}

/**
 * Load or store scratch values
 */
export const Scratch = {
  /**
   * Ath scratch space value.  All scratch spaces are 0 at program start.
   * @see Native TEAL opcode: [`loads`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#loads)
   * Min AVM version: 5
   */
  loadBytes(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Ath scratch space value.  All scratch spaces are 0 at program start.
   * @see Native TEAL opcode: [`loads`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#loads)
   * Min AVM version: 5
   */
  loadUint64(a: uint64): uint64 {
    throw new NoImplementation()
  },

  /**
   * store B to the Ath scratch space
   * @see Native TEAL opcode: [`stores`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#stores)
   * Min AVM version: 5
   */
  store(a: uint64, b: uint64 | bytes): void {
    throw new NoImplementation()
  },
}

/**
 * MiMC hash of scalars A, using curve and parameters specified by configuration C
 * A is a list of concatenated 32 byte big-endian unsigned integer scalars.  Fail if A's length is not a multiple of 32 or any element exceeds the curve modulus.
 * The MiMC hash function has known collisions since any input which is a multiple of the elliptic curve modulus will hash to the same value. MiMC is thus not a general purpose hash function, but meant to be used in zero knowledge applications to match a zk-circuit implementation.
 * @see Native TEAL opcode: [`mimc`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#mimc)
 * Min AVM version: 11
 */
export function mimc(c: MimcConfigurations, a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * minimum required balance for account A, in microalgos. Required balance is affected by ASA, App, and Box usage. When creating or opting into an app, the minimum balance grows before the app code runs, therefore the increase is visible there. When deleting or closing out, the minimum balance decreases after the app executes. Changes caused by inner transactions or box usage are observable immediately following the opcode effecting the change.
 * @param Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset).
 *  * @return value.
 * @see Native TEAL opcode: [`min_balance`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#min_balance)
 * Min AVM version: 3
 */
export function minBalance(a: Account | uint64): uint64 {
  throw new NoImplementation()
}

/**
 * A times B as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low
 * @see Native TEAL opcode: [`mulw`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#mulw)
 * Min AVM version: 1
 */
export function mulw(a: uint64, b: uint64): readonly [uint64, uint64] {
  throw new NoImplementation()
}

/**
 * the total online stake in the agreement round
 * @see Native TEAL opcode: [`online_stake`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#online_stake)
 * Min AVM version: 11
 */
export function onlineStake(): uint64 {
  throw new NoImplementation()
}

/**
 * Copy of A with the bytes starting at B replaced by the bytes of C. Fails if B+len(C) exceeds len(A)
 * `replace3` can be called using `replace` with no immediates.
 * @see Native TEAL opcode: [`replace3`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#replace3)
 * Min AVM version: 7
 */
export function replace(a: bytes, b: uint64, c: bytes): bytes {
  throw new NoImplementation()
}

/**
 * Copy of A with the Bth byte set to small integer (between 0..255) C. If B is greater than or equal to the array length, the program fails
 * @see Native TEAL opcode: [`setbyte`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#setbyte)
 * Min AVM version: 3
 */
export function setByte(a: bytes, b: uint64, c: uint64): bytes {
  throw new NoImplementation()
}

/**
 * SHA256 hash of value A, yields [32]byte
 * @see Native TEAL opcode: [`sha256`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#sha256)
 * Min AVM version: 1
 */
export function sha256(a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * SHA3_256 hash of value A, yields [32]byte
 * @see Native TEAL opcode: [`sha3_256`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#sha3_256)
 * Min AVM version: 7
 */
export function sha3_256(a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * SHA512_256 hash of value A, yields [32]byte
 * @see Native TEAL opcode: [`sha512_256`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#sha512_256)
 * Min AVM version: 1
 */
export function sha512_256(a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * A times 2^B, modulo 2^64
 * @see Native TEAL opcode: [`shl`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#shl)
 * Min AVM version: 4
 */
export function shl(a: uint64, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * A divided by 2^B
 * @see Native TEAL opcode: [`shr`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#shr)
 * Min AVM version: 4
 */
export function shr(a: uint64, b: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * The largest integer I such that I^2 <= A
 * @see Native TEAL opcode: [`sqrt`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#sqrt)
 * Min AVM version: 4
 */
export function sqrt(a: uint64): uint64 {
  throw new NoImplementation()
}

/**
 * A range of bytes from A starting at B up to but not including C. If C < B, or either is larger than the array length, the program fails
 * @see Native TEAL opcode: [`substring3`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#substring3)
 * Min AVM version: 2
 */
export function substring(a: bytes, b: uint64, c: uint64): bytes {
  throw new NoImplementation()
}

/**
 * sumhash512 of value A, yields [64]byte
 * @see Native TEAL opcode: [`sumhash512`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#sumhash512)
 * Min AVM version: 12
 */
export function sumhash512(a: bytes): bytes {
  throw new NoImplementation()
}

/**
 * Get values for the current executing transaction
 */
export const Txn = {
  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get sender(): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 1
   */
  get fee(): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 1
   */
  get firstValid(): uint64 {
    throw new NoImplementation()
  },

  /**
   * UNIX timestamp of block before txn.FirstValid. Fails if negative
   * Min AVM version: 7
   */
  get firstValidTime(): uint64 {
    throw new NoImplementation()
  },

  /**
   * round number
   * Min AVM version: 1
   */
  get lastValid(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Any data up to 1024 bytes
   * Min AVM version: 1
   */
  get note(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte lease value
   * Min AVM version: 1
   */
  get lease(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get receiver(): Account {
    throw new NoImplementation()
  },

  /**
   * microalgos
   * Min AVM version: 1
   */
  get amount(): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get closeRemainderTo(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get votePk(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get selectionPk(): bytes {
    throw new NoImplementation()
  },

  /**
   * The first round that the participation key is valid.
   * Min AVM version: 1
   */
  get voteFirst(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The last round that the participation key is valid.
   * Min AVM version: 1
   */
  get voteLast(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Dilution for the 2-level participation key
   * Min AVM version: 1
   */
  get voteKeyDilution(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Transaction type as bytes
   * Min AVM version: 1
   */
  get type(): bytes {
    throw new NoImplementation()
  },

  /**
   * Transaction type as integer
   * Min AVM version: 1
   */
  get typeEnum(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID
   * Min AVM version: 1
   */
  get xferAsset(): Asset {
    throw new NoImplementation()
  },

  /**
   * value in Asset's units
   * Min AVM version: 1
   */
  get assetAmount(): uint64 {
    throw new NoImplementation()
  },

  /**
   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.
   * Min AVM version: 1
   */
  get assetSender(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get assetReceiver(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 1
   */
  get assetCloseTo(): Account {
    throw new NoImplementation()
  },

  /**
   * Position of this transaction within an atomic transaction group. A stand-alone transaction is implicitly element 0 in a group of 1
   * Min AVM version: 1
   */
  get groupIndex(): uint64 {
    throw new NoImplementation()
  },

  /**
   * The computed ID for this transaction. 32 bytes.
   * Min AVM version: 1
   */
  get txId(): bytes {
    throw new NoImplementation()
  },

  /**
   * ApplicationID from ApplicationCall transaction
   * Min AVM version: 2
   */
  get applicationId(): Application {
    throw new NoImplementation()
  },

  /**
   * ApplicationCall transaction on completion action
   * Min AVM version: 2
   */
  get onCompletion(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Arguments passed to the application in the ApplicationCall transaction
   * Min AVM version: 2
   */
  applicationArgs(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ApplicationArgs
   * Min AVM version: 2
   */
  get numAppArgs(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Accounts listed in the ApplicationCall transaction
   * Min AVM version: 2
   */
  accounts(a: uint64): Account {
    throw new NoImplementation()
  },

  /**
   * Number of Accounts
   * Min AVM version: 2
   */
  get numAccounts(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Approval program
   * Min AVM version: 2
   */
  get approvalProgram(): bytes {
    throw new NoImplementation()
  },

  /**
   * Clear state program
   * Min AVM version: 2
   */
  get clearStateProgram(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte Sender's new AuthAddr
   * Min AVM version: 2
   */
  get rekeyTo(): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID in asset config transaction
   * Min AVM version: 2
   */
  get configAsset(): Asset {
    throw new NoImplementation()
  },

  /**
   * Total number of units of this asset created
   * Min AVM version: 2
   */
  get configAssetTotal(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of digits to display after the decimal place when displaying the asset
   * Min AVM version: 2
   */
  get configAssetDecimals(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Whether the asset's slots are frozen by default or not, 0 or 1
   * Min AVM version: 2
   */
  get configAssetDefaultFrozen(): boolean {
    throw new NoImplementation()
  },

  /**
   * Unit name of the asset
   * Min AVM version: 2
   */
  get configAssetUnitName(): bytes {
    throw new NoImplementation()
  },

  /**
   * The asset name
   * Min AVM version: 2
   */
  get configAssetName(): bytes {
    throw new NoImplementation()
  },

  /**
   * URL
   * Min AVM version: 2
   */
  get configAssetUrl(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte commitment to unspecified asset metadata
   * Min AVM version: 2
   */
  get configAssetMetadataHash(): bytes {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetManager(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetReserve(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetFreeze(): Account {
    throw new NoImplementation()
  },

  /**
   * 32 byte address
   * Min AVM version: 2
   */
  get configAssetClawback(): Account {
    throw new NoImplementation()
  },

  /**
   * Asset ID being frozen or un-frozen
   * Min AVM version: 2
   */
  get freezeAsset(): Asset {
    throw new NoImplementation()
  },

  /**
   * 32 byte address of the account whose asset slot is being frozen or un-frozen
   * Min AVM version: 2
   */
  get freezeAssetAccount(): Account {
    throw new NoImplementation()
  },

  /**
   * The new frozen value, 0 or 1
   * Min AVM version: 2
   */
  get freezeAssetFrozen(): boolean {
    throw new NoImplementation()
  },

  /**
   * Foreign Assets listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  assets(a: uint64): Asset {
    throw new NoImplementation()
  },

  /**
   * Number of Assets
   * Min AVM version: 3
   */
  get numAssets(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Foreign Apps listed in the ApplicationCall transaction
   * Min AVM version: 3
   */
  applications(a: uint64): Application {
    throw new NoImplementation()
  },

  /**
   * Number of Applications
   * Min AVM version: 3
   */
  get numApplications(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state integers in ApplicationCall
   * Min AVM version: 3
   */
  get globalNumUint(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of global state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  get globalNumByteSlice(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state integers in ApplicationCall
   * Min AVM version: 3
   */
  get localNumUint(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of local state byteslices in ApplicationCall
   * Min AVM version: 3
   */
  get localNumByteSlice(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.
   * Min AVM version: 4
   */
  get extraProgramPages(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Marks an account nonparticipating for rewards
   * Min AVM version: 5
   */
  get nonparticipation(): boolean {
    throw new NoImplementation()
  },

  /**
   * Log messages emitted by an application call (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  logs(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Logs (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  get numLogs(): uint64 {
    throw new NoImplementation()
  },

  /**
   * Asset ID allocated by the creation of an ASA (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  get createdAssetId(): Asset {
    throw new NoImplementation()
  },

  /**
   * ApplicationID allocated by the creation of an application (only with `itxn` in v5). Application mode only
   * Min AVM version: 5
   */
  get createdApplicationId(): Application {
    throw new NoImplementation()
  },

  /**
   * The last message emitted. Empty bytes if none were emitted. Application mode only
   * Min AVM version: 6
   */
  get lastLog(): bytes {
    throw new NoImplementation()
  },

  /**
   * 64 byte state proof public key
   * Min AVM version: 6
   */
  get stateProofPk(): bytes {
    throw new NoImplementation()
  },

  /**
   * Approval Program as an array of pages
   * Min AVM version: 7
   */
  approvalProgramPages(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of Approval Program pages
   * Min AVM version: 7
   */
  get numApprovalProgramPages(): uint64 {
    throw new NoImplementation()
  },

  /**
   * ClearState Program as an array of pages
   * Min AVM version: 7
   */
  clearStateProgramPages(a: uint64): bytes {
    throw new NoImplementation()
  },

  /**
   * Number of ClearState Program pages
   * Min AVM version: 7
   */
  get numClearStateProgramPages(): uint64 {
    throw new NoImplementation()
  },
}

export const VoterParams = {
  /**
   * Online stake in microalgos
   * Min AVM version: 11
   */
  voterBalance(a: Account | uint64): readonly [uint64, boolean] {
    throw new NoImplementation()
  },

  /**
   * Had this account opted into block payouts
   * Min AVM version: 11
   */
  voterIncentiveEligible(a: Account | uint64): readonly [boolean, boolean] {
    throw new NoImplementation()
  },
}

/**
 * Verify the proof B of message A against pubkey C. Returns vrf output and verification flag.
 * `VrfAlgorand` is the VRF used in Algorand. It is ECVRF-ED25519-SHA512-Elligator2, specified in the IETF internet draft [draft-irtf-cfrg-vrf-03](https://datatracker.ietf.org/doc/draft-irtf-cfrg-vrf/03/).
 * @see Native TEAL opcode: [`vrf_verify`](https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/v10/#vrf_verify)
 * Min AVM version: 7
 */
export function vrfVerify(s: VrfVerify, a: bytes, b: bytes, c: bytes): readonly [bytes, boolean] {
  throw new NoImplementation()
}

/**
 * A range of bytes from A starting at B up to the end of the sequence
 */
export function extract(a: bytes, b: uint64): bytes

/**
 * A range of bytes from A starting at B up to but not including B+C. If B+C is larger than the array length, the program fails
 */
export function extract(a: bytes, b: uint64, c: uint64): bytes
export function extract(a: bytes, b: uint64, c?: uint64): bytes {
  throw new NoImplementation()
}

/**
 * selects one of two values based on top-of-stack: B if C != 0, else A
 */
export function select(a: bytes, b: bytes, c: uint64): bytes

/**
 * selects one of two values based on top-of-stack: B if C != 0, else A
 */
export function select(a: uint64, b: uint64, c: uint64): uint64
export function select(a: uint64 | bytes, b: uint64 | bytes, c: uint64): bytes | uint64 {
  throw new NoImplementation()
}

/**
 * Set the nth bit of target to the value of c (1 or 0)
 */
export function setBit(target: bytes, n: uint64, c: uint64): bytes

/**
 * Set the nth bit of target to the value of c (1 or 0)
 */
export function setBit(target: uint64, n: uint64, c: uint64): uint64
export function setBit(target: uint64 | bytes, n: uint64, c: uint64): bytes | uint64 {
  throw new NoImplementation()
}
